// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetworkBan_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetworkBan_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class metaDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<metaData>
     _instance;
} _metaData_default_instance_;
class tags_contDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<tags_cont>
     _instance;
} _tags_cont_default_instance_;
class NetworkBan_requestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetworkBan_request>
     _instance;
} _NetworkBan_request_default_instance_;
class NetworkBan_answerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NetworkBan_answer>
     _instance;
} _NetworkBan_answer_default_instance_;

namespace protobuf_NetworkBan_5frequest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metaData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metaData, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metaData, list_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(metaData, is_root_ban_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tags_cont, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tags_cont, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tags_cont, tag_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_request, need_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_request, list_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_request, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_request, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_request, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_request, need_normalize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_request, client_name_),
  2,
  3,
  ~0u,
  0,
  ~0u,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_answer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_answer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_answer, ans_codes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_answer, mata_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_answer, state_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkBan_answer, ban_all_),
  ~0u,
  ~0u,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(metaData)},
  { 11, 17, sizeof(tags_cont)},
  { 18, 30, sizeof(NetworkBan_request)},
  { 37, 46, sizeof(NetworkBan_answer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_metaData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tags_cont_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkBan_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkBan_answer_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "NetworkBan_request.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _metaData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_metaData_default_instance_);_tags_cont_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_tags_cont_default_instance_);_NetworkBan_request_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetworkBan_request_default_instance_);_NetworkBan_answer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NetworkBan_answer_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030NetworkBan_request.proto\"R\n\010metaData\022\014"
      "\n\004info\030\001 \003(\t\022\034\n\tlist_type\030\002 \003(\0162\t.ListTy"
      "pe\022\032\n\013is_root_ban\030\003 \001(\010:\005false\"\030\n\ttags_c"
      "ont\022\013\n\003tag\030\001 \003(\t\"\301\001\n\022NetworkBan_request\022"
      "\034\n\rneed_metadata\030\001 \001(\010:\005false\022!\n\tlist_ty"
      "pe\030\002 \001(\0162\t.ListType:\003ALL\022\014\n\004urls\030\003 \003(\t\022\r"
      "\n\005query\030\004 \001(\t\022\030\n\004tags\030\005 \003(\0132\n.tags_cont\022"
      "\034\n\016need_normalize\030\006 \001(\010:\004true\022\025\n\013client_"
      "name\030\007 \001(\t:\000\"v\n\021NetworkBan_answer\022\036\n\tans"
      "_codes\030\001 \003(\0162\013.AnswerCode\022\034\n\tmata_data\030\002"
      " \003(\0132\t.metaData\022\022\n\nstate_hash\030\003 \002(\003\022\017\n\007b"
      "an_all\030\004 \001(\010*C\n\010ListType\022\007\n\003ALL\020\000\022\016\n\nBAN"
      "404_SVN\020\001\022\010\n\004STUB\020\002\022\007\n\003GSB\020\003\022\013\n\007UNKNOWN\020"
      "\004*4\n\nAnswerCode\022\t\n\005FOUND\020\000\022\t\n\005CLEAR\020\001\022\020\n"
      "\014WAIT_RESOLVE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 575);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NetworkBan_request.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_NetworkBan_5frequest_2eproto

const ::google::protobuf::EnumDescriptor* ListType_descriptor() {
  protobuf_NetworkBan_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NetworkBan_5frequest_2eproto::file_level_enum_descriptors[0];
}
bool ListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AnswerCode_descriptor() {
  protobuf_NetworkBan_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NetworkBan_5frequest_2eproto::file_level_enum_descriptors[1];
}
bool AnswerCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int metaData::kInfoFieldNumber;
const int metaData::kListTypeFieldNumber;
const int metaData::kIsRootBanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

metaData::metaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NetworkBan_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metaData)
}
metaData::metaData(const metaData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      info_(from.info_),
      list_type_(from.list_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_root_ban_ = from.is_root_ban_;
  // @@protoc_insertion_point(copy_constructor:metaData)
}

void metaData::SharedCtor() {
  _cached_size_ = 0;
  is_root_ban_ = false;
}

metaData::~metaData() {
  // @@protoc_insertion_point(destructor:metaData)
  SharedDtor();
}

void metaData::SharedDtor() {
}

void metaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* metaData::descriptor() {
  protobuf_NetworkBan_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NetworkBan_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const metaData& metaData::default_instance() {
  protobuf_NetworkBan_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

metaData* metaData::New(::google::protobuf::Arena* arena) const {
  metaData* n = new metaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void metaData::Clear() {
// @@protoc_insertion_point(message_clear_start:metaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  list_type_.Clear();
  is_root_ban_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool metaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info(this->info_size() - 1).data(),
            static_cast<int>(this->info(this->info_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metaData.info");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ListType list_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ListType_IsValid(value)) {
            add_list_type(static_cast< ::ListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::ListType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_list_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_root_ban = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_root_ban();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_root_ban_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metaData)
  return false;
#undef DO_
}

void metaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string info = 1;
  for (int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info(i).data(), static_cast<int>(this->info(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metaData.info");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->info(i), output);
  }

  // repeated .ListType list_type = 2;
  for (int i = 0, n = this->list_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->list_type(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_root_ban = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_root_ban(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metaData)
}

::google::protobuf::uint8* metaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metaData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string info = 1;
  for (int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info(i).data(), static_cast<int>(this->info(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metaData.info");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->info(i), target);
  }

  // repeated .ListType list_type = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->list_type_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool is_root_ban = 3 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_root_ban(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metaData)
  return target;
}

size_t metaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metaData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string info = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->info_size());
  for (int i = 0, n = this->info_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->info(i));
  }

  // repeated .ListType list_type = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->list_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->list_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional bool is_root_ban = 3 [default = false];
  if (has_is_root_ban()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void metaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metaData)
  GOOGLE_DCHECK_NE(&from, this);
  const metaData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const metaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metaData)
    MergeFrom(*source);
  }
}

void metaData::MergeFrom(const metaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
  list_type_.MergeFrom(from.list_type_);
  if (from.has_is_root_ban()) {
    set_is_root_ban(from.is_root_ban());
  }
}

void metaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void metaData::CopyFrom(const metaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool metaData::IsInitialized() const {
  return true;
}

void metaData::Swap(metaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void metaData::InternalSwap(metaData* other) {
  using std::swap;
  info_.InternalSwap(&other->info_);
  list_type_.InternalSwap(&other->list_type_);
  swap(is_root_ban_, other->is_root_ban_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata metaData::GetMetadata() const {
  protobuf_NetworkBan_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NetworkBan_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// metaData

// repeated string info = 1;
int metaData::info_size() const {
  return info_.size();
}
void metaData::clear_info() {
  info_.Clear();
}
const ::std::string& metaData::info(int index) const {
  // @@protoc_insertion_point(field_get:metaData.info)
  return info_.Get(index);
}
::std::string* metaData::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:metaData.info)
  return info_.Mutable(index);
}
void metaData::set_info(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metaData.info)
  info_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void metaData::set_info(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metaData.info)
  info_.Mutable(index)->assign(std::move(value));
}
#endif
void metaData::set_info(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metaData.info)
}
void metaData::set_info(int index, const char* value, size_t size) {
  info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metaData.info)
}
::std::string* metaData::add_info() {
  // @@protoc_insertion_point(field_add_mutable:metaData.info)
  return info_.Add();
}
void metaData::add_info(const ::std::string& value) {
  info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metaData.info)
}
#if LANG_CXX11
void metaData::add_info(::std::string&& value) {
  info_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metaData.info)
}
#endif
void metaData::add_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metaData.info)
}
void metaData::add_info(const char* value, size_t size) {
  info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metaData.info)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
metaData::info() const {
  // @@protoc_insertion_point(field_list:metaData.info)
  return info_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
metaData::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:metaData.info)
  return &info_;
}

// repeated .ListType list_type = 2;
int metaData::list_type_size() const {
  return list_type_.size();
}
void metaData::clear_list_type() {
  list_type_.Clear();
}
::ListType metaData::list_type(int index) const {
  // @@protoc_insertion_point(field_get:metaData.list_type)
  return static_cast< ::ListType >(list_type_.Get(index));
}
void metaData::set_list_type(int index, ::ListType value) {
  assert(::ListType_IsValid(value));
  list_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:metaData.list_type)
}
void metaData::add_list_type(::ListType value) {
  assert(::ListType_IsValid(value));
  list_type_.Add(value);
  // @@protoc_insertion_point(field_add:metaData.list_type)
}
const ::google::protobuf::RepeatedField<int>&
metaData::list_type() const {
  // @@protoc_insertion_point(field_list:metaData.list_type)
  return list_type_;
}
::google::protobuf::RepeatedField<int>*
metaData::mutable_list_type() {
  // @@protoc_insertion_point(field_mutable_list:metaData.list_type)
  return &list_type_;
}

// optional bool is_root_ban = 3 [default = false];
bool metaData::has_is_root_ban() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void metaData::set_has_is_root_ban() {
  _has_bits_[0] |= 0x00000001u;
}
void metaData::clear_has_is_root_ban() {
  _has_bits_[0] &= ~0x00000001u;
}
void metaData::clear_is_root_ban() {
  is_root_ban_ = false;
  clear_has_is_root_ban();
}
bool metaData::is_root_ban() const {
  // @@protoc_insertion_point(field_get:metaData.is_root_ban)
  return is_root_ban_;
}
void metaData::set_is_root_ban(bool value) {
  set_has_is_root_ban();
  is_root_ban_ = value;
  // @@protoc_insertion_point(field_set:metaData.is_root_ban)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tags_cont::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tags_cont::tags_cont()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NetworkBan_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tags_cont)
}
tags_cont::tags_cont(const tags_cont& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tag_(from.tag_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tags_cont)
}

void tags_cont::SharedCtor() {
  _cached_size_ = 0;
}

tags_cont::~tags_cont() {
  // @@protoc_insertion_point(destructor:tags_cont)
  SharedDtor();
}

void tags_cont::SharedDtor() {
}

void tags_cont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tags_cont::descriptor() {
  protobuf_NetworkBan_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NetworkBan_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const tags_cont& tags_cont::default_instance() {
  protobuf_NetworkBan_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

tags_cont* tags_cont::New(::google::protobuf::Arena* arena) const {
  tags_cont* n = new tags_cont;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tags_cont::Clear() {
// @@protoc_insertion_point(message_clear_start:tags_cont)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool tags_cont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tags_cont)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag(this->tag_size() - 1).data(),
            static_cast<int>(this->tag(this->tag_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tags_cont.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tags_cont)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tags_cont)
  return false;
#undef DO_
}

void tags_cont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tags_cont)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tag = 1;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag(i).data(), static_cast<int>(this->tag(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags_cont.tag");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tags_cont)
}

::google::protobuf::uint8* tags_cont::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tags_cont)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tag = 1;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag(i).data(), static_cast<int>(this->tag(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tags_cont.tag");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->tag(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tags_cont)
  return target;
}

size_t tags_cont::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tags_cont)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string tag = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tag_size());
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tags_cont::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tags_cont)
  GOOGLE_DCHECK_NE(&from, this);
  const tags_cont* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tags_cont>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tags_cont)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tags_cont)
    MergeFrom(*source);
  }
}

void tags_cont::MergeFrom(const tags_cont& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tags_cont)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_.MergeFrom(from.tag_);
}

void tags_cont::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tags_cont)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tags_cont::CopyFrom(const tags_cont& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tags_cont)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tags_cont::IsInitialized() const {
  return true;
}

void tags_cont::Swap(tags_cont* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tags_cont::InternalSwap(tags_cont* other) {
  using std::swap;
  tag_.InternalSwap(&other->tag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tags_cont::GetMetadata() const {
  protobuf_NetworkBan_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NetworkBan_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tags_cont

// repeated string tag = 1;
int tags_cont::tag_size() const {
  return tag_.size();
}
void tags_cont::clear_tag() {
  tag_.Clear();
}
const ::std::string& tags_cont::tag(int index) const {
  // @@protoc_insertion_point(field_get:tags_cont.tag)
  return tag_.Get(index);
}
::std::string* tags_cont::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:tags_cont.tag)
  return tag_.Mutable(index);
}
void tags_cont::set_tag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tags_cont.tag)
  tag_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void tags_cont::set_tag(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tags_cont.tag)
  tag_.Mutable(index)->assign(std::move(value));
}
#endif
void tags_cont::set_tag(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tags_cont.tag)
}
void tags_cont::set_tag(int index, const char* value, size_t size) {
  tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tags_cont.tag)
}
::std::string* tags_cont::add_tag() {
  // @@protoc_insertion_point(field_add_mutable:tags_cont.tag)
  return tag_.Add();
}
void tags_cont::add_tag(const ::std::string& value) {
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tags_cont.tag)
}
#if LANG_CXX11
void tags_cont::add_tag(::std::string&& value) {
  tag_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tags_cont.tag)
}
#endif
void tags_cont::add_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tags_cont.tag)
}
void tags_cont::add_tag(const char* value, size_t size) {
  tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tags_cont.tag)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
tags_cont::tag() const {
  // @@protoc_insertion_point(field_list:tags_cont.tag)
  return tag_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
tags_cont::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:tags_cont.tag)
  return &tag_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkBan_request::kNeedMetadataFieldNumber;
const int NetworkBan_request::kListTypeFieldNumber;
const int NetworkBan_request::kUrlsFieldNumber;
const int NetworkBan_request::kQueryFieldNumber;
const int NetworkBan_request::kTagsFieldNumber;
const int NetworkBan_request::kNeedNormalizeFieldNumber;
const int NetworkBan_request::kClientNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkBan_request::NetworkBan_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NetworkBan_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetworkBan_request)
}
NetworkBan_request::NetworkBan_request(const NetworkBan_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_name()) {
    client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  ::memcpy(&need_metadata_, &from.need_metadata_,
    static_cast<size_t>(reinterpret_cast<char*>(&need_normalize_) -
    reinterpret_cast<char*>(&need_metadata_)) + sizeof(need_normalize_));
  // @@protoc_insertion_point(copy_constructor:NetworkBan_request)
}

void NetworkBan_request::SharedCtor() {
  _cached_size_ = 0;
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&need_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&list_type_) -
      reinterpret_cast<char*>(&need_metadata_)) + sizeof(list_type_));
  need_normalize_ = true;
}

NetworkBan_request::~NetworkBan_request() {
  // @@protoc_insertion_point(destructor:NetworkBan_request)
  SharedDtor();
}

void NetworkBan_request::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkBan_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkBan_request::descriptor() {
  protobuf_NetworkBan_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NetworkBan_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkBan_request& NetworkBan_request::default_instance() {
  protobuf_NetworkBan_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkBan_request* NetworkBan_request::New(::google::protobuf::Arena* arena) const {
  NetworkBan_request* n = new NetworkBan_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkBan_request::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkBan_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!client_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&need_metadata_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&list_type_) -
        reinterpret_cast<char*>(&need_metadata_)) + sizeof(list_type_));
    need_normalize_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkBan_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetworkBan_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool need_metadata = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_need_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_metadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ListType list_type = 2 [default = ALL];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ListType_IsValid(value)) {
            set_list_type(static_cast< ::ListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string urls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NetworkBan_request.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NetworkBan_request.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tags_cont tags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_normalize = 6 [default = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_need_normalize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_normalize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string client_name = 7 [default = ""];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), static_cast<int>(this->client_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NetworkBan_request.client_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetworkBan_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetworkBan_request)
  return false;
#undef DO_
}

void NetworkBan_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetworkBan_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool need_metadata = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->need_metadata(), output);
  }

  // optional .ListType list_type = 2 [default = ALL];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->list_type(), output);
  }

  // repeated string urls = 3;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NetworkBan_request.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->urls(i), output);
  }

  // optional string query = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NetworkBan_request.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->query(), output);
  }

  // repeated .tags_cont tags = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tags(static_cast<int>(i)), output);
  }

  // optional bool need_normalize = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->need_normalize(), output);
  }

  // optional string client_name = 7 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), static_cast<int>(this->client_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NetworkBan_request.client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->client_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetworkBan_request)
}

::google::protobuf::uint8* NetworkBan_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetworkBan_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool need_metadata = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->need_metadata(), target);
  }

  // optional .ListType list_type = 2 [default = ALL];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->list_type(), target);
  }

  // repeated string urls = 3;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NetworkBan_request.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->urls(i), target);
  }

  // optional string query = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NetworkBan_request.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->query(), target);
  }

  // repeated .tags_cont tags = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->tags(static_cast<int>(i)), deterministic, target);
  }

  // optional bool need_normalize = 6 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->need_normalize(), target);
  }

  // optional string client_name = 7 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), static_cast<int>(this->client_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NetworkBan_request.client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->client_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkBan_request)
  return target;
}

size_t NetworkBan_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkBan_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string urls = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  // repeated .tags_cont tags = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string query = 4;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string client_name = 7 [default = ""];
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // optional bool need_metadata = 1 [default = false];
    if (has_need_metadata()) {
      total_size += 1 + 1;
    }

    // optional .ListType list_type = 2 [default = ALL];
    if (has_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->list_type());
    }

    // optional bool need_normalize = 6 [default = true];
    if (has_need_normalize()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkBan_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkBan_request)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkBan_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkBan_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkBan_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkBan_request)
    MergeFrom(*source);
  }
}

void NetworkBan_request::MergeFrom(const NetworkBan_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkBan_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_client_name();
      client_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      need_metadata_ = from.need_metadata_;
    }
    if (cached_has_bits & 0x00000008u) {
      list_type_ = from.list_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      need_normalize_ = from.need_normalize_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkBan_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkBan_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkBan_request::CopyFrom(const NetworkBan_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkBan_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkBan_request::IsInitialized() const {
  return true;
}

void NetworkBan_request::Swap(NetworkBan_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkBan_request::InternalSwap(NetworkBan_request* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  tags_.InternalSwap(&other->tags_);
  query_.Swap(&other->query_);
  client_name_.Swap(&other->client_name_);
  swap(need_metadata_, other->need_metadata_);
  swap(list_type_, other->list_type_);
  swap(need_normalize_, other->need_normalize_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkBan_request::GetMetadata() const {
  protobuf_NetworkBan_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NetworkBan_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkBan_request

// optional bool need_metadata = 1 [default = false];
bool NetworkBan_request::has_need_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkBan_request::set_has_need_metadata() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkBan_request::clear_has_need_metadata() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkBan_request::clear_need_metadata() {
  need_metadata_ = false;
  clear_has_need_metadata();
}
bool NetworkBan_request::need_metadata() const {
  // @@protoc_insertion_point(field_get:NetworkBan_request.need_metadata)
  return need_metadata_;
}
void NetworkBan_request::set_need_metadata(bool value) {
  set_has_need_metadata();
  need_metadata_ = value;
  // @@protoc_insertion_point(field_set:NetworkBan_request.need_metadata)
}

// optional .ListType list_type = 2 [default = ALL];
bool NetworkBan_request::has_list_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NetworkBan_request::set_has_list_type() {
  _has_bits_[0] |= 0x00000008u;
}
void NetworkBan_request::clear_has_list_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void NetworkBan_request::clear_list_type() {
  list_type_ = 0;
  clear_has_list_type();
}
::ListType NetworkBan_request::list_type() const {
  // @@protoc_insertion_point(field_get:NetworkBan_request.list_type)
  return static_cast< ::ListType >(list_type_);
}
void NetworkBan_request::set_list_type(::ListType value) {
  assert(::ListType_IsValid(value));
  set_has_list_type();
  list_type_ = value;
  // @@protoc_insertion_point(field_set:NetworkBan_request.list_type)
}

// repeated string urls = 3;
int NetworkBan_request::urls_size() const {
  return urls_.size();
}
void NetworkBan_request::clear_urls() {
  urls_.Clear();
}
const ::std::string& NetworkBan_request::urls(int index) const {
  // @@protoc_insertion_point(field_get:NetworkBan_request.urls)
  return urls_.Get(index);
}
::std::string* NetworkBan_request::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkBan_request.urls)
  return urls_.Mutable(index);
}
void NetworkBan_request::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NetworkBan_request.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void NetworkBan_request::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NetworkBan_request.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
void NetworkBan_request::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetworkBan_request.urls)
}
void NetworkBan_request::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetworkBan_request.urls)
}
::std::string* NetworkBan_request::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:NetworkBan_request.urls)
  return urls_.Add();
}
void NetworkBan_request::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetworkBan_request.urls)
}
#if LANG_CXX11
void NetworkBan_request::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NetworkBan_request.urls)
}
#endif
void NetworkBan_request::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetworkBan_request.urls)
}
void NetworkBan_request::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetworkBan_request.urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkBan_request::urls() const {
  // @@protoc_insertion_point(field_list:NetworkBan_request.urls)
  return urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkBan_request::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:NetworkBan_request.urls)
  return &urls_;
}

// optional string query = 4;
bool NetworkBan_request::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkBan_request::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkBan_request::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkBan_request::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& NetworkBan_request::query() const {
  // @@protoc_insertion_point(field_get:NetworkBan_request.query)
  return query_.GetNoArena();
}
void NetworkBan_request::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetworkBan_request.query)
}
#if LANG_CXX11
void NetworkBan_request::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetworkBan_request.query)
}
#endif
void NetworkBan_request::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetworkBan_request.query)
}
void NetworkBan_request::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetworkBan_request.query)
}
::std::string* NetworkBan_request::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:NetworkBan_request.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkBan_request::release_query() {
  // @@protoc_insertion_point(field_release:NetworkBan_request.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkBan_request::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:NetworkBan_request.query)
}

// repeated .tags_cont tags = 5;
int NetworkBan_request::tags_size() const {
  return tags_.size();
}
void NetworkBan_request::clear_tags() {
  tags_.Clear();
}
const ::tags_cont& NetworkBan_request::tags(int index) const {
  // @@protoc_insertion_point(field_get:NetworkBan_request.tags)
  return tags_.Get(index);
}
::tags_cont* NetworkBan_request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkBan_request.tags)
  return tags_.Mutable(index);
}
::tags_cont* NetworkBan_request::add_tags() {
  // @@protoc_insertion_point(field_add:NetworkBan_request.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::tags_cont >*
NetworkBan_request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:NetworkBan_request.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::tags_cont >&
NetworkBan_request::tags() const {
  // @@protoc_insertion_point(field_list:NetworkBan_request.tags)
  return tags_;
}

// optional bool need_normalize = 6 [default = true];
bool NetworkBan_request::has_need_normalize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NetworkBan_request::set_has_need_normalize() {
  _has_bits_[0] |= 0x00000010u;
}
void NetworkBan_request::clear_has_need_normalize() {
  _has_bits_[0] &= ~0x00000010u;
}
void NetworkBan_request::clear_need_normalize() {
  need_normalize_ = true;
  clear_has_need_normalize();
}
bool NetworkBan_request::need_normalize() const {
  // @@protoc_insertion_point(field_get:NetworkBan_request.need_normalize)
  return need_normalize_;
}
void NetworkBan_request::set_need_normalize(bool value) {
  set_has_need_normalize();
  need_normalize_ = value;
  // @@protoc_insertion_point(field_set:NetworkBan_request.need_normalize)
}

// optional string client_name = 7 [default = ""];
bool NetworkBan_request::has_client_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkBan_request::set_has_client_name() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkBan_request::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkBan_request::clear_client_name() {
  client_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_name();
}
const ::std::string& NetworkBan_request::client_name() const {
  // @@protoc_insertion_point(field_get:NetworkBan_request.client_name)
  return client_name_.GetNoArena();
}
void NetworkBan_request::set_client_name(const ::std::string& value) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NetworkBan_request.client_name)
}
#if LANG_CXX11
void NetworkBan_request::set_client_name(::std::string&& value) {
  set_has_client_name();
  client_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetworkBan_request.client_name)
}
#endif
void NetworkBan_request::set_client_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetworkBan_request.client_name)
}
void NetworkBan_request::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  client_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetworkBan_request.client_name)
}
::std::string* NetworkBan_request::mutable_client_name() {
  set_has_client_name();
  // @@protoc_insertion_point(field_mutable:NetworkBan_request.client_name)
  return client_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkBan_request::release_client_name() {
  // @@protoc_insertion_point(field_release:NetworkBan_request.client_name)
  clear_has_client_name();
  return client_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkBan_request::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    set_has_client_name();
  } else {
    clear_has_client_name();
  }
  client_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name);
  // @@protoc_insertion_point(field_set_allocated:NetworkBan_request.client_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkBan_answer::kAnsCodesFieldNumber;
const int NetworkBan_answer::kMataDataFieldNumber;
const int NetworkBan_answer::kStateHashFieldNumber;
const int NetworkBan_answer::kBanAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkBan_answer::NetworkBan_answer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NetworkBan_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetworkBan_answer)
}
NetworkBan_answer::NetworkBan_answer(const NetworkBan_answer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ans_codes_(from.ans_codes_),
      mata_data_(from.mata_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_hash_, &from.state_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&ban_all_) -
    reinterpret_cast<char*>(&state_hash_)) + sizeof(ban_all_));
  // @@protoc_insertion_point(copy_constructor:NetworkBan_answer)
}

void NetworkBan_answer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&state_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ban_all_) -
      reinterpret_cast<char*>(&state_hash_)) + sizeof(ban_all_));
}

NetworkBan_answer::~NetworkBan_answer() {
  // @@protoc_insertion_point(destructor:NetworkBan_answer)
  SharedDtor();
}

void NetworkBan_answer::SharedDtor() {
}

void NetworkBan_answer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkBan_answer::descriptor() {
  protobuf_NetworkBan_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NetworkBan_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetworkBan_answer& NetworkBan_answer::default_instance() {
  protobuf_NetworkBan_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkBan_answer* NetworkBan_answer::New(::google::protobuf::Arena* arena) const {
  NetworkBan_answer* n = new NetworkBan_answer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkBan_answer::Clear() {
// @@protoc_insertion_point(message_clear_start:NetworkBan_answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ans_codes_.Clear();
  mata_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&state_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ban_all_) -
        reinterpret_cast<char*>(&state_hash_)) + sizeof(ban_all_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkBan_answer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetworkBan_answer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AnswerCode ans_codes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AnswerCode_IsValid(value)) {
            add_ans_codes(static_cast< ::AnswerCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::AnswerCode_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_ans_codes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metaData mata_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mata_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 state_hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_state_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &state_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ban_all = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ban_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetworkBan_answer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetworkBan_answer)
  return false;
#undef DO_
}

void NetworkBan_answer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetworkBan_answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AnswerCode ans_codes = 1;
  for (int i = 0, n = this->ans_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ans_codes(i), output);
  }

  // repeated .metaData mata_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mata_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mata_data(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // required int64 state_hash = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->state_hash(), output);
  }

  // optional bool ban_all = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ban_all(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetworkBan_answer)
}

::google::protobuf::uint8* NetworkBan_answer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NetworkBan_answer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AnswerCode ans_codes = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->ans_codes_, target);

  // repeated .metaData mata_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mata_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->mata_data(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // required int64 state_hash = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->state_hash(), target);
  }

  // optional bool ban_all = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ban_all(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetworkBan_answer)
  return target;
}

size_t NetworkBan_answer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetworkBan_answer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 state_hash = 3;
  if (has_state_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->state_hash());
  }
  // repeated .AnswerCode ans_codes = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->ans_codes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ans_codes(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .metaData mata_data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->mata_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mata_data(static_cast<int>(i)));
    }
  }

  // optional bool ban_all = 4;
  if (has_ban_all()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkBan_answer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetworkBan_answer)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkBan_answer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkBan_answer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetworkBan_answer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetworkBan_answer)
    MergeFrom(*source);
  }
}

void NetworkBan_answer::MergeFrom(const NetworkBan_answer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetworkBan_answer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ans_codes_.MergeFrom(from.ans_codes_);
  mata_data_.MergeFrom(from.mata_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      state_hash_ = from.state_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      ban_all_ = from.ban_all_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkBan_answer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetworkBan_answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkBan_answer::CopyFrom(const NetworkBan_answer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetworkBan_answer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkBan_answer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void NetworkBan_answer::Swap(NetworkBan_answer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkBan_answer::InternalSwap(NetworkBan_answer* other) {
  using std::swap;
  ans_codes_.InternalSwap(&other->ans_codes_);
  mata_data_.InternalSwap(&other->mata_data_);
  swap(state_hash_, other->state_hash_);
  swap(ban_all_, other->ban_all_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkBan_answer::GetMetadata() const {
  protobuf_NetworkBan_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NetworkBan_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkBan_answer

// repeated .AnswerCode ans_codes = 1;
int NetworkBan_answer::ans_codes_size() const {
  return ans_codes_.size();
}
void NetworkBan_answer::clear_ans_codes() {
  ans_codes_.Clear();
}
::AnswerCode NetworkBan_answer::ans_codes(int index) const {
  // @@protoc_insertion_point(field_get:NetworkBan_answer.ans_codes)
  return static_cast< ::AnswerCode >(ans_codes_.Get(index));
}
void NetworkBan_answer::set_ans_codes(int index, ::AnswerCode value) {
  assert(::AnswerCode_IsValid(value));
  ans_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:NetworkBan_answer.ans_codes)
}
void NetworkBan_answer::add_ans_codes(::AnswerCode value) {
  assert(::AnswerCode_IsValid(value));
  ans_codes_.Add(value);
  // @@protoc_insertion_point(field_add:NetworkBan_answer.ans_codes)
}
const ::google::protobuf::RepeatedField<int>&
NetworkBan_answer::ans_codes() const {
  // @@protoc_insertion_point(field_list:NetworkBan_answer.ans_codes)
  return ans_codes_;
}
::google::protobuf::RepeatedField<int>*
NetworkBan_answer::mutable_ans_codes() {
  // @@protoc_insertion_point(field_mutable_list:NetworkBan_answer.ans_codes)
  return &ans_codes_;
}

// repeated .metaData mata_data = 2;
int NetworkBan_answer::mata_data_size() const {
  return mata_data_.size();
}
void NetworkBan_answer::clear_mata_data() {
  mata_data_.Clear();
}
const ::metaData& NetworkBan_answer::mata_data(int index) const {
  // @@protoc_insertion_point(field_get:NetworkBan_answer.mata_data)
  return mata_data_.Get(index);
}
::metaData* NetworkBan_answer::mutable_mata_data(int index) {
  // @@protoc_insertion_point(field_mutable:NetworkBan_answer.mata_data)
  return mata_data_.Mutable(index);
}
::metaData* NetworkBan_answer::add_mata_data() {
  // @@protoc_insertion_point(field_add:NetworkBan_answer.mata_data)
  return mata_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::metaData >*
NetworkBan_answer::mutable_mata_data() {
  // @@protoc_insertion_point(field_mutable_list:NetworkBan_answer.mata_data)
  return &mata_data_;
}
const ::google::protobuf::RepeatedPtrField< ::metaData >&
NetworkBan_answer::mata_data() const {
  // @@protoc_insertion_point(field_list:NetworkBan_answer.mata_data)
  return mata_data_;
}

// required int64 state_hash = 3;
bool NetworkBan_answer::has_state_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkBan_answer::set_has_state_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkBan_answer::clear_has_state_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkBan_answer::clear_state_hash() {
  state_hash_ = GOOGLE_LONGLONG(0);
  clear_has_state_hash();
}
::google::protobuf::int64 NetworkBan_answer::state_hash() const {
  // @@protoc_insertion_point(field_get:NetworkBan_answer.state_hash)
  return state_hash_;
}
void NetworkBan_answer::set_state_hash(::google::protobuf::int64 value) {
  set_has_state_hash();
  state_hash_ = value;
  // @@protoc_insertion_point(field_set:NetworkBan_answer.state_hash)
}

// optional bool ban_all = 4;
bool NetworkBan_answer::has_ban_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkBan_answer::set_has_ban_all() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkBan_answer::clear_has_ban_all() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkBan_answer::clear_ban_all() {
  ban_all_ = false;
  clear_has_ban_all();
}
bool NetworkBan_answer::ban_all() const {
  // @@protoc_insertion_point(field_get:NetworkBan_answer.ban_all)
  return ban_all_;
}
void NetworkBan_answer::set_ban_all(bool value) {
  set_has_ban_all();
  ban_all_ = value;
  // @@protoc_insertion_point(field_set:NetworkBan_answer.ban_all)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
