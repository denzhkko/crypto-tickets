// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: additive_app.proto

#ifndef PROTOBUF_additive_5fapp_2eproto__INCLUDED
#define PROTOBUF_additive_5fapp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "image_defs.pb.h"
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {
class AppCategory;
class AppCategoryDefaultTypeInternal;
extern AppCategoryDefaultTypeInternal _AppCategory_default_instance_;
class AppDataWrapper;
class AppDataWrapperDefaultTypeInternal;
extern AppDataWrapperDefaultTypeInternal _AppDataWrapper_default_instance_;
class AppDeveloper;
class AppDeveloperDefaultTypeInternal;
extern AppDeveloperDefaultTypeInternal _AppDeveloper_default_instance_;
class AppImage;
class AppImageDefaultTypeInternal;
extern AppImageDefaultTypeInternal _AppImage_default_instance_;
class AppImageWrapper;
class AppImageWrapperDefaultTypeInternal;
extern AppImageWrapperDefaultTypeInternal _AppImageWrapper_default_instance_;
class AppParsed;
class AppParsedDefaultTypeInternal;
extern AppParsedDefaultTypeInternal _AppParsed_default_instance_;
class AppProperties;
class AppPropertiesDefaultTypeInternal;
extern AppPropertiesDefaultTypeInternal _AppProperties_default_instance_;
}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace webbase {
namespace blobs {

namespace protobuf_additive_5fapp_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_additive_5fapp_2eproto

// ===================================================================

class AppDeveloper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.AppDeveloper) */ {
 public:
  AppDeveloper();
  virtual ~AppDeveloper();

  AppDeveloper(const AppDeveloper& from);

  inline AppDeveloper& operator=(const AppDeveloper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppDeveloper(AppDeveloper&& from) noexcept
    : AppDeveloper() {
    *this = ::std::move(from);
  }

  inline AppDeveloper& operator=(AppDeveloper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppDeveloper& default_instance();

  static inline const AppDeveloper* internal_default_instance() {
    return reinterpret_cast<const AppDeveloper*>(
               &_AppDeveloper_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AppDeveloper* other);
  friend void swap(AppDeveloper& a, AppDeveloper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppDeveloper* New() const PROTOBUF_FINAL { return New(NULL); }

  AppDeveloper* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppDeveloper& from);
  void MergeFrom(const AppDeveloper& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppDeveloper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string support_url = 3;
  bool has_support_url() const;
  void clear_support_url();
  static const int kSupportUrlFieldNumber = 3;
  const ::std::string& support_url() const;
  void set_support_url(const ::std::string& value);
  #if LANG_CXX11
  void set_support_url(::std::string&& value);
  #endif
  void set_support_url(const char* value);
  void set_support_url(const char* value, size_t size);
  ::std::string* mutable_support_url();
  ::std::string* release_support_url();
  void set_allocated_support_url(::std::string* support_url);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.AppDeveloper)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_url();
  void clear_has_url();
  void set_has_support_url();
  void clear_has_support_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr support_url_;
  friend struct protobuf_additive_5fapp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.AppCategory) */ {
 public:
  AppCategory();
  virtual ~AppCategory();

  AppCategory(const AppCategory& from);

  inline AppCategory& operator=(const AppCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppCategory(AppCategory&& from) noexcept
    : AppCategory() {
    *this = ::std::move(from);
  }

  inline AppCategory& operator=(AppCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppCategory& default_instance();

  static inline const AppCategory* internal_default_instance() {
    return reinterpret_cast<const AppCategory*>(
               &_AppCategory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AppCategory* other);
  friend void swap(AppCategory& a, AppCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppCategory* New() const PROTOBUF_FINAL { return New(NULL); }

  AppCategory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppCategory& from);
  void MergeFrom(const AppCategory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppCategory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.AppCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  friend struct protobuf_additive_5fapp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppParsed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.AppParsed) */ {
 public:
  AppParsed();
  virtual ~AppParsed();

  AppParsed(const AppParsed& from);

  inline AppParsed& operator=(const AppParsed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppParsed(AppParsed&& from) noexcept
    : AppParsed() {
    *this = ::std::move(from);
  }

  inline AppParsed& operator=(AppParsed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppParsed& default_instance();

  static inline const AppParsed* internal_default_instance() {
    return reinterpret_cast<const AppParsed*>(
               &_AppParsed_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AppParsed* other);
  friend void swap(AppParsed& a, AppParsed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppParsed* New() const PROTOBUF_FINAL { return New(NULL); }

  AppParsed* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppParsed& from);
  void MergeFrom(const AppParsed& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppParsed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string version = 3;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string updated = 4;
  bool has_updated() const;
  void clear_updated();
  static const int kUpdatedFieldNumber = 4;
  const ::std::string& updated() const;
  void set_updated(const ::std::string& value);
  #if LANG_CXX11
  void set_updated(::std::string&& value);
  #endif
  void set_updated(const char* value);
  void set_updated(const char* value, size_t size);
  ::std::string* mutable_updated();
  ::std::string* release_updated();
  void set_allocated_updated(::std::string* updated);

  // required string price = 5;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);

  // optional string age = 8;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 8;
  const ::std::string& age() const;
  void set_age(const ::std::string& value);
  #if LANG_CXX11
  void set_age(::std::string&& value);
  #endif
  void set_age(const char* value);
  void set_age(const char* value, size_t size);
  ::std::string* mutable_age();
  ::std::string* release_age();
  void set_allocated_age(::std::string* age);

  // optional string age_reason = 9;
  bool has_age_reason() const;
  void clear_age_reason();
  static const int kAgeReasonFieldNumber = 9;
  const ::std::string& age_reason() const;
  void set_age_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_age_reason(::std::string&& value);
  #endif
  void set_age_reason(const char* value);
  void set_age_reason(const char* value, size_t size);
  ::std::string* mutable_age_reason();
  ::std::string* release_age_reason();
  void set_allocated_age_reason(::std::string* age_reason);

  // optional string size = 10;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 10;
  const ::std::string& size() const;
  void set_size(const ::std::string& value);
  #if LANG_CXX11
  void set_size(::std::string&& value);
  #endif
  void set_size(const char* value);
  void set_size(const char* value, size_t size);
  ::std::string* mutable_size();
  ::std::string* release_size();
  void set_allocated_size(::std::string* size);

  // required string description = 12;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 12;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required string url = 16;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 16;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string mobile_url = 17;
  bool has_mobile_url() const;
  void clear_mobile_url();
  static const int kMobileUrlFieldNumber = 17;
  const ::std::string& mobile_url() const;
  void set_mobile_url(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile_url(::std::string&& value);
  #endif
  void set_mobile_url(const char* value);
  void set_mobile_url(const char* value, size_t size);
  ::std::string* mutable_mobile_url();
  ::std::string* release_mobile_url();
  void set_allocated_mobile_url(::std::string* mobile_url);

  // optional string requirements = 18;
  bool has_requirements() const;
  void clear_requirements();
  static const int kRequirementsFieldNumber = 18;
  const ::std::string& requirements() const;
  void set_requirements(const ::std::string& value);
  #if LANG_CXX11
  void set_requirements(::std::string&& value);
  #endif
  void set_requirements(const char* value);
  void set_requirements(const char* value, size_t size);
  ::std::string* mutable_requirements();
  ::std::string* release_requirements();
  void set_allocated_requirements(::std::string* requirements);

  // optional string id = 19;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 19;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string reviewers = 20;
  bool has_reviewers() const;
  void clear_reviewers();
  static const int kReviewersFieldNumber = 20;
  const ::std::string& reviewers() const;
  void set_reviewers(const ::std::string& value);
  #if LANG_CXX11
  void set_reviewers(::std::string&& value);
  #endif
  void set_reviewers(const char* value);
  void set_reviewers(const char* value, size_t size);
  ::std::string* mutable_reviewers();
  ::std::string* release_reviewers();
  void set_allocated_reviewers(::std::string* reviewers);

  // optional .ru.mail.go.webbase.blobs.AppCategory category = 6;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 6;
  const ::ru::mail::go::webbase::blobs::AppCategory& category() const;
  ::ru::mail::go::webbase::blobs::AppCategory* mutable_category();
  ::ru::mail::go::webbase::blobs::AppCategory* release_category();
  void set_allocated_category(::ru::mail::go::webbase::blobs::AppCategory* category);

  // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 11;
  bool has_thumb() const;
  void clear_thumb();
  static const int kThumbFieldNumber = 11;
  const ::ru::mail::go::webbase::parsing::img::Thumb& thumb() const;
  ::ru::mail::go::webbase::parsing::img::Thumb* mutable_thumb();
  ::ru::mail::go::webbase::parsing::img::Thumb* release_thumb();
  void set_allocated_thumb(::ru::mail::go::webbase::parsing::img::Thumb* thumb);

  // optional .ru.mail.go.webbase.blobs.AppDeveloper developer = 15;
  bool has_developer() const;
  void clear_developer();
  static const int kDeveloperFieldNumber = 15;
  const ::ru::mail::go::webbase::blobs::AppDeveloper& developer() const;
  ::ru::mail::go::webbase::blobs::AppDeveloper* mutable_developer();
  ::ru::mail::go::webbase::blobs::AppDeveloper* release_developer();
  void set_allocated_developer(::ru::mail::go::webbase::blobs::AppDeveloper* developer);

  // required uint32 platform = 2;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 2;
  ::google::protobuf::uint32 platform() const;
  void set_platform(::google::protobuf::uint32 value);

  // required bool is_free = 7;
  bool has_is_free() const;
  void clear_is_free();
  static const int kIsFreeFieldNumber = 7;
  bool is_free() const;
  void set_is_free(bool value);

  // required double rate = 13;
  bool has_rate() const;
  void clear_rate();
  static const int kRateFieldNumber = 13;
  double rate() const;
  void set_rate(double value);

  // required double max_rate = 14;
  bool has_max_rate() const;
  void clear_max_rate();
  static const int kMaxRateFieldNumber = 14;
  double max_rate() const;
  void set_max_rate(double value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.AppParsed)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_platform();
  void clear_has_platform();
  void set_has_version();
  void clear_has_version();
  void set_has_updated();
  void clear_has_updated();
  void set_has_price();
  void clear_has_price();
  void set_has_category();
  void clear_has_category();
  void set_has_is_free();
  void clear_has_is_free();
  void set_has_age();
  void clear_has_age();
  void set_has_age_reason();
  void clear_has_age_reason();
  void set_has_size();
  void clear_has_size();
  void set_has_thumb();
  void clear_has_thumb();
  void set_has_description();
  void clear_has_description();
  void set_has_rate();
  void clear_has_rate();
  void set_has_max_rate();
  void clear_has_max_rate();
  void set_has_developer();
  void clear_has_developer();
  void set_has_url();
  void clear_has_url();
  void set_has_mobile_url();
  void clear_has_mobile_url();
  void set_has_requirements();
  void clear_has_requirements();
  void set_has_id();
  void clear_has_id();
  void set_has_reviewers();
  void clear_has_reviewers();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr updated_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::internal::ArenaStringPtr age_;
  ::google::protobuf::internal::ArenaStringPtr age_reason_;
  ::google::protobuf::internal::ArenaStringPtr size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr mobile_url_;
  ::google::protobuf::internal::ArenaStringPtr requirements_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr reviewers_;
  ::ru::mail::go::webbase::blobs::AppCategory* category_;
  ::ru::mail::go::webbase::parsing::img::Thumb* thumb_;
  ::ru::mail::go::webbase::blobs::AppDeveloper* developer_;
  ::google::protobuf::uint32 platform_;
  bool is_free_;
  double rate_;
  double max_rate_;
  friend struct protobuf_additive_5fapp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppProperties : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.AppProperties) */ {
 public:
  AppProperties();
  virtual ~AppProperties();

  AppProperties(const AppProperties& from);

  inline AppProperties& operator=(const AppProperties& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppProperties(AppProperties&& from) noexcept
    : AppProperties() {
    *this = ::std::move(from);
  }

  inline AppProperties& operator=(AppProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppProperties& default_instance();

  static inline const AppProperties* internal_default_instance() {
    return reinterpret_cast<const AppProperties*>(
               &_AppProperties_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AppProperties* other);
  friend void swap(AppProperties& a, AppProperties& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppProperties* New() const PROTOBUF_FINAL { return New(NULL); }

  AppProperties* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppProperties& from);
  void MergeFrom(const AppProperties& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppProperties* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string version = 3;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string updated = 4;
  bool has_updated() const;
  void clear_updated();
  static const int kUpdatedFieldNumber = 4;
  const ::std::string& updated() const;
  void set_updated(const ::std::string& value);
  #if LANG_CXX11
  void set_updated(::std::string&& value);
  #endif
  void set_updated(const char* value);
  void set_updated(const char* value, size_t size);
  ::std::string* mutable_updated();
  ::std::string* release_updated();
  void set_allocated_updated(::std::string* updated);

  // required string price = 5;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);

  // optional string age = 8;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 8;
  const ::std::string& age() const;
  void set_age(const ::std::string& value);
  #if LANG_CXX11
  void set_age(::std::string&& value);
  #endif
  void set_age(const char* value);
  void set_age(const char* value, size_t size);
  ::std::string* mutable_age();
  ::std::string* release_age();
  void set_allocated_age(::std::string* age);

  // optional string age_reason = 9;
  bool has_age_reason() const;
  void clear_age_reason();
  static const int kAgeReasonFieldNumber = 9;
  const ::std::string& age_reason() const;
  void set_age_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_age_reason(::std::string&& value);
  #endif
  void set_age_reason(const char* value);
  void set_age_reason(const char* value, size_t size);
  ::std::string* mutable_age_reason();
  ::std::string* release_age_reason();
  void set_allocated_age_reason(::std::string* age_reason);

  // optional string size = 10;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 10;
  const ::std::string& size() const;
  void set_size(const ::std::string& value);
  #if LANG_CXX11
  void set_size(::std::string&& value);
  #endif
  void set_size(const char* value);
  void set_size(const char* value, size_t size);
  ::std::string* mutable_size();
  ::std::string* release_size();
  void set_allocated_size(::std::string* size);

  // required string description = 11;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 11;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required string url = 15;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 15;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string mobile_url = 16;
  bool has_mobile_url() const;
  void clear_mobile_url();
  static const int kMobileUrlFieldNumber = 16;
  const ::std::string& mobile_url() const;
  void set_mobile_url(const ::std::string& value);
  #if LANG_CXX11
  void set_mobile_url(::std::string&& value);
  #endif
  void set_mobile_url(const char* value);
  void set_mobile_url(const char* value, size_t size);
  ::std::string* mutable_mobile_url();
  ::std::string* release_mobile_url();
  void set_allocated_mobile_url(::std::string* mobile_url);

  // optional string requirements = 17;
  bool has_requirements() const;
  void clear_requirements();
  static const int kRequirementsFieldNumber = 17;
  const ::std::string& requirements() const;
  void set_requirements(const ::std::string& value);
  #if LANG_CXX11
  void set_requirements(::std::string&& value);
  #endif
  void set_requirements(const char* value);
  void set_requirements(const char* value, size_t size);
  ::std::string* mutable_requirements();
  ::std::string* release_requirements();
  void set_allocated_requirements(::std::string* requirements);

  // optional string id = 18;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 18;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string categoryIds = 22;
  bool has_categoryids() const;
  void clear_categoryids();
  static const int kCategoryIdsFieldNumber = 22;
  const ::std::string& categoryids() const;
  void set_categoryids(const ::std::string& value);
  #if LANG_CXX11
  void set_categoryids(::std::string&& value);
  #endif
  void set_categoryids(const char* value);
  void set_categoryids(const char* value, size_t size);
  ::std::string* mutable_categoryids();
  ::std::string* release_categoryids();
  void set_allocated_categoryids(::std::string* categoryids);

  // optional .ru.mail.go.webbase.blobs.AppCategory category = 6;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 6;
  const ::ru::mail::go::webbase::blobs::AppCategory& category() const;
  ::ru::mail::go::webbase::blobs::AppCategory* mutable_category();
  ::ru::mail::go::webbase::blobs::AppCategory* release_category();
  void set_allocated_category(::ru::mail::go::webbase::blobs::AppCategory* category);

  // optional .ru.mail.go.webbase.blobs.AppDeveloper developer = 14;
  bool has_developer() const;
  void clear_developer();
  static const int kDeveloperFieldNumber = 14;
  const ::ru::mail::go::webbase::blobs::AppDeveloper& developer() const;
  ::ru::mail::go::webbase::blobs::AppDeveloper* mutable_developer();
  ::ru::mail::go::webbase::blobs::AppDeveloper* release_developer();
  void set_allocated_developer(::ru::mail::go::webbase::blobs::AppDeveloper* developer);

  // required double rate = 12;
  bool has_rate() const;
  void clear_rate();
  static const int kRateFieldNumber = 12;
  double rate() const;
  void set_rate(double value);

  // required double max_rate = 13;
  bool has_max_rate() const;
  void clear_max_rate();
  static const int kMaxRateFieldNumber = 13;
  double max_rate() const;
  void set_max_rate(double value);

  // required uint32 platform = 2;
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 2;
  ::google::protobuf::uint32 platform() const;
  void set_platform(::google::protobuf::uint32 value);

  // required bool is_free = 7;
  bool has_is_free() const;
  void clear_is_free();
  static const int kIsFreeFieldNumber = 7;
  bool is_free() const;
  void set_is_free(bool value);

  // optional bool is_banned = 21;
  bool has_is_banned() const;
  void clear_is_banned();
  static const int kIsBannedFieldNumber = 21;
  bool is_banned() const;
  void set_is_banned(bool value);

  // optional bool paid_content = 23;
  bool has_paid_content() const;
  void clear_paid_content();
  static const int kPaidContentFieldNumber = 23;
  bool paid_content() const;
  void set_paid_content(bool value);

  // optional bool is_top_dev = 24;
  bool has_is_top_dev() const;
  void clear_is_top_dev();
  static const int kIsTopDevFieldNumber = 24;
  bool is_top_dev() const;
  void set_is_top_dev(bool value);

  // optional uint64 rub_mask = 20;
  bool has_rub_mask() const;
  void clear_rub_mask();
  static const int kRubMaskFieldNumber = 20;
  ::google::protobuf::uint64 rub_mask() const;
  void set_rub_mask(::google::protobuf::uint64 value);

  // optional uint32 reviewers = 19;
  bool has_reviewers() const;
  void clear_reviewers();
  static const int kReviewersFieldNumber = 19;
  ::google::protobuf::uint32 reviewers() const;
  void set_reviewers(::google::protobuf::uint32 value);

  // optional bool is_editor_choice = 25;
  bool has_is_editor_choice() const;
  void clear_is_editor_choice();
  static const int kIsEditorChoiceFieldNumber = 25;
  bool is_editor_choice() const;
  void set_is_editor_choice(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.AppProperties)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_platform();
  void clear_has_platform();
  void set_has_version();
  void clear_has_version();
  void set_has_updated();
  void clear_has_updated();
  void set_has_price();
  void clear_has_price();
  void set_has_category();
  void clear_has_category();
  void set_has_is_free();
  void clear_has_is_free();
  void set_has_age();
  void clear_has_age();
  void set_has_age_reason();
  void clear_has_age_reason();
  void set_has_size();
  void clear_has_size();
  void set_has_description();
  void clear_has_description();
  void set_has_rate();
  void clear_has_rate();
  void set_has_max_rate();
  void clear_has_max_rate();
  void set_has_developer();
  void clear_has_developer();
  void set_has_url();
  void clear_has_url();
  void set_has_mobile_url();
  void clear_has_mobile_url();
  void set_has_requirements();
  void clear_has_requirements();
  void set_has_id();
  void clear_has_id();
  void set_has_reviewers();
  void clear_has_reviewers();
  void set_has_rub_mask();
  void clear_has_rub_mask();
  void set_has_is_banned();
  void clear_has_is_banned();
  void set_has_categoryids();
  void clear_has_categoryids();
  void set_has_paid_content();
  void clear_has_paid_content();
  void set_has_is_top_dev();
  void clear_has_is_top_dev();
  void set_has_is_editor_choice();
  void clear_has_is_editor_choice();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr updated_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::internal::ArenaStringPtr age_;
  ::google::protobuf::internal::ArenaStringPtr age_reason_;
  ::google::protobuf::internal::ArenaStringPtr size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr mobile_url_;
  ::google::protobuf::internal::ArenaStringPtr requirements_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr categoryids_;
  ::ru::mail::go::webbase::blobs::AppCategory* category_;
  ::ru::mail::go::webbase::blobs::AppDeveloper* developer_;
  double rate_;
  double max_rate_;
  ::google::protobuf::uint32 platform_;
  bool is_free_;
  bool is_banned_;
  bool paid_content_;
  bool is_top_dev_;
  ::google::protobuf::uint64 rub_mask_;
  ::google::protobuf::uint32 reviewers_;
  bool is_editor_choice_;
  friend struct protobuf_additive_5fapp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.AppImage) */ {
 public:
  AppImage();
  virtual ~AppImage();

  AppImage(const AppImage& from);

  inline AppImage& operator=(const AppImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppImage(AppImage&& from) noexcept
    : AppImage() {
    *this = ::std::move(from);
  }

  inline AppImage& operator=(AppImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppImage& default_instance();

  static inline const AppImage* internal_default_instance() {
    return reinterpret_cast<const AppImage*>(
               &_AppImage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AppImage* other);
  friend void swap(AppImage& a, AppImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppImage* New() const PROTOBUF_FINAL { return New(NULL); }

  AppImage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppImage& from);
  void MergeFrom(const AppImage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
  bool has_thumb() const;
  void clear_thumb();
  static const int kThumbFieldNumber = 1;
  const ::ru::mail::go::webbase::parsing::img::Thumb& thumb() const;
  ::ru::mail::go::webbase::parsing::img::Thumb* mutable_thumb();
  ::ru::mail::go::webbase::parsing::img::Thumb* release_thumb();
  void set_allocated_thumb(::ru::mail::go::webbase::parsing::img::Thumb* thumb);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.AppImage)
 private:
  void set_has_thumb();
  void clear_has_thumb();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::webbase::parsing::img::Thumb* thumb_;
  friend struct protobuf_additive_5fapp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppDataWrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.AppDataWrapper) */ {
 public:
  AppDataWrapper();
  virtual ~AppDataWrapper();

  AppDataWrapper(const AppDataWrapper& from);

  inline AppDataWrapper& operator=(const AppDataWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppDataWrapper(AppDataWrapper&& from) noexcept
    : AppDataWrapper() {
    *this = ::std::move(from);
  }

  inline AppDataWrapper& operator=(AppDataWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppDataWrapper& default_instance();

  static inline const AppDataWrapper* internal_default_instance() {
    return reinterpret_cast<const AppDataWrapper*>(
               &_AppDataWrapper_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AppDataWrapper* other);
  friend void swap(AppDataWrapper& a, AppDataWrapper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppDataWrapper* New() const PROTOBUF_FINAL { return New(NULL); }

  AppDataWrapper* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppDataWrapper& from);
  void MergeFrom(const AppDataWrapper& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppDataWrapper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string image_url = 2;
  bool has_image_url() const;
  void clear_image_url();
  static const int kImageUrlFieldNumber = 2;
  const ::std::string& image_url() const;
  void set_image_url(const ::std::string& value);
  #if LANG_CXX11
  void set_image_url(::std::string&& value);
  #endif
  void set_image_url(const char* value);
  void set_image_url(const char* value, size_t size);
  ::std::string* mutable_image_url();
  ::std::string* release_image_url();
  void set_allocated_image_url(::std::string* image_url);

  // optional string base64_img = 7;
  bool has_base64_img() const;
  void clear_base64_img();
  static const int kBase64ImgFieldNumber = 7;
  const ::std::string& base64_img() const;
  void set_base64_img(const ::std::string& value);
  #if LANG_CXX11
  void set_base64_img(::std::string&& value);
  #endif
  void set_base64_img(const char* value);
  void set_base64_img(const char* value, size_t size);
  ::std::string* mutable_base64_img();
  ::std::string* release_base64_img();
  void set_allocated_base64_img(::std::string* base64_img);

  // optional string img_bkgrnd = 8;
  bool has_img_bkgrnd() const;
  void clear_img_bkgrnd();
  static const int kImgBkgrndFieldNumber = 8;
  const ::std::string& img_bkgrnd() const;
  void set_img_bkgrnd(const ::std::string& value);
  #if LANG_CXX11
  void set_img_bkgrnd(::std::string&& value);
  #endif
  void set_img_bkgrnd(const char* value);
  void set_img_bkgrnd(const char* value, size_t size);
  ::std::string* mutable_img_bkgrnd();
  ::std::string* release_img_bkgrnd();
  void set_allocated_img_bkgrnd(::std::string* img_bkgrnd);

  // optional string reco_srch_key = 9;
  bool has_reco_srch_key() const;
  void clear_reco_srch_key();
  static const int kRecoSrchKeyFieldNumber = 9;
  const ::std::string& reco_srch_key() const;
  void set_reco_srch_key(const ::std::string& value);
  #if LANG_CXX11
  void set_reco_srch_key(::std::string&& value);
  #endif
  void set_reco_srch_key(const char* value);
  void set_reco_srch_key(const char* value, size_t size);
  ::std::string* mutable_reco_srch_key();
  ::std::string* release_reco_srch_key();
  void set_allocated_reco_srch_key(::std::string* reco_srch_key);

  // required .ru.mail.go.webbase.blobs.AppProperties properties = 1;
  bool has_properties() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::AppProperties& properties() const;
  ::ru::mail::go::webbase::blobs::AppProperties* mutable_properties();
  ::ru::mail::go::webbase::blobs::AppProperties* release_properties();
  void set_allocated_properties(::ru::mail::go::webbase::blobs::AppProperties* properties);

  // optional .ru.mail.go.webbase.blobs.AppImage image = 3;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::ru::mail::go::webbase::blobs::AppImage& image() const;
  ::ru::mail::go::webbase::blobs::AppImage* mutable_image();
  ::ru::mail::go::webbase::blobs::AppImage* release_image();
  void set_allocated_image(::ru::mail::go::webbase::blobs::AppImage* image);

  // optional uint64 brsq2 = 4;
  bool has_brsq2() const;
  void clear_brsq2();
  static const int kBrsq2FieldNumber = 4;
  ::google::protobuf::uint64 brsq2() const;
  void set_brsq2(::google::protobuf::uint64 value);

  // optional uint64 uruq2 = 5;
  bool has_uruq2() const;
  void clear_uruq2();
  static const int kUruq2FieldNumber = 5;
  ::google::protobuf::uint64 uruq2() const;
  void set_uruq2(::google::protobuf::uint64 value);

  // optional bool is_top = 6;
  bool has_is_top() const;
  void clear_is_top();
  static const int kIsTopFieldNumber = 6;
  bool is_top() const;
  void set_is_top(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.AppDataWrapper)
 private:
  void set_has_properties();
  void clear_has_properties();
  void set_has_image_url();
  void clear_has_image_url();
  void set_has_image();
  void clear_has_image();
  void set_has_brsq2();
  void clear_has_brsq2();
  void set_has_uruq2();
  void clear_has_uruq2();
  void set_has_is_top();
  void clear_has_is_top();
  void set_has_base64_img();
  void clear_has_base64_img();
  void set_has_img_bkgrnd();
  void clear_has_img_bkgrnd();
  void set_has_reco_srch_key();
  void clear_has_reco_srch_key();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr image_url_;
  ::google::protobuf::internal::ArenaStringPtr base64_img_;
  ::google::protobuf::internal::ArenaStringPtr img_bkgrnd_;
  ::google::protobuf::internal::ArenaStringPtr reco_srch_key_;
  ::ru::mail::go::webbase::blobs::AppProperties* properties_;
  ::ru::mail::go::webbase::blobs::AppImage* image_;
  ::google::protobuf::uint64 brsq2_;
  ::google::protobuf::uint64 uruq2_;
  bool is_top_;
  friend struct protobuf_additive_5fapp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppImageWrapper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.webbase.blobs.AppImageWrapper) */ {
 public:
  AppImageWrapper();
  virtual ~AppImageWrapper();

  AppImageWrapper(const AppImageWrapper& from);

  inline AppImageWrapper& operator=(const AppImageWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppImageWrapper(AppImageWrapper&& from) noexcept
    : AppImageWrapper() {
    *this = ::std::move(from);
  }

  inline AppImageWrapper& operator=(AppImageWrapper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppImageWrapper& default_instance();

  static inline const AppImageWrapper* internal_default_instance() {
    return reinterpret_cast<const AppImageWrapper*>(
               &_AppImageWrapper_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(AppImageWrapper* other);
  friend void swap(AppImageWrapper& a, AppImageWrapper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppImageWrapper* New() const PROTOBUF_FINAL { return New(NULL); }

  AppImageWrapper* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppImageWrapper& from);
  void MergeFrom(const AppImageWrapper& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppImageWrapper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string base64_img = 3;
  bool has_base64_img() const;
  void clear_base64_img();
  static const int kBase64ImgFieldNumber = 3;
  const ::std::string& base64_img() const;
  void set_base64_img(const ::std::string& value);
  #if LANG_CXX11
  void set_base64_img(::std::string&& value);
  #endif
  void set_base64_img(const char* value);
  void set_base64_img(const char* value, size_t size);
  ::std::string* mutable_base64_img();
  ::std::string* release_base64_img();
  void set_allocated_base64_img(::std::string* base64_img);

  // required .ru.mail.go.webbase.blobs.AppImage image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::ru::mail::go::webbase::blobs::AppImage& image() const;
  ::ru::mail::go::webbase::blobs::AppImage* mutable_image();
  ::ru::mail::go::webbase::blobs::AppImage* release_image();
  void set_allocated_image(::ru::mail::go::webbase::blobs::AppImage* image);

  // @@protoc_insertion_point(class_scope:ru.mail.go.webbase.blobs.AppImageWrapper)
 private:
  void set_has_image();
  void clear_has_image();
  void set_has_url();
  void clear_has_url();
  void set_has_base64_img();
  void clear_has_base64_img();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr base64_img_;
  ::ru::mail::go::webbase::blobs::AppImage* image_;
  friend struct protobuf_additive_5fapp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppDeveloper

// optional string name = 1;
inline bool AppDeveloper::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppDeveloper::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppDeveloper::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppDeveloper::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AppDeveloper::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDeveloper.name)
  return name_.GetNoArena();
}
inline void AppDeveloper::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppDeveloper.name)
}
#if LANG_CXX11
inline void AppDeveloper::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppDeveloper.name)
}
#endif
inline void AppDeveloper::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppDeveloper.name)
}
inline void AppDeveloper::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppDeveloper.name)
}
inline ::std::string* AppDeveloper::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppDeveloper.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppDeveloper::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppDeveloper.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppDeveloper::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppDeveloper.name)
}

// optional string url = 2;
inline bool AppDeveloper::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppDeveloper::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppDeveloper::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppDeveloper::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& AppDeveloper::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDeveloper.url)
  return url_.GetNoArena();
}
inline void AppDeveloper::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppDeveloper.url)
}
#if LANG_CXX11
inline void AppDeveloper::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppDeveloper.url)
}
#endif
inline void AppDeveloper::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppDeveloper.url)
}
inline void AppDeveloper::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppDeveloper.url)
}
inline ::std::string* AppDeveloper::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppDeveloper.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppDeveloper::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppDeveloper.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppDeveloper::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppDeveloper.url)
}

// optional string support_url = 3;
inline bool AppDeveloper::has_support_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppDeveloper::set_has_support_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppDeveloper::clear_has_support_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppDeveloper::clear_support_url() {
  support_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_support_url();
}
inline const ::std::string& AppDeveloper::support_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDeveloper.support_url)
  return support_url_.GetNoArena();
}
inline void AppDeveloper::set_support_url(const ::std::string& value) {
  set_has_support_url();
  support_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppDeveloper.support_url)
}
#if LANG_CXX11
inline void AppDeveloper::set_support_url(::std::string&& value) {
  set_has_support_url();
  support_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppDeveloper.support_url)
}
#endif
inline void AppDeveloper::set_support_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_support_url();
  support_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppDeveloper.support_url)
}
inline void AppDeveloper::set_support_url(const char* value, size_t size) {
  set_has_support_url();
  support_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppDeveloper.support_url)
}
inline ::std::string* AppDeveloper::mutable_support_url() {
  set_has_support_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppDeveloper.support_url)
  return support_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppDeveloper::release_support_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppDeveloper.support_url)
  clear_has_support_url();
  return support_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppDeveloper::set_allocated_support_url(::std::string* support_url) {
  if (support_url != NULL) {
    set_has_support_url();
  } else {
    clear_has_support_url();
  }
  support_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), support_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppDeveloper.support_url)
}

// -------------------------------------------------------------------

// AppCategory

// repeated string name = 1;
inline int AppCategory::name_size() const {
  return name_.size();
}
inline void AppCategory::clear_name() {
  name_.Clear();
}
inline const ::std::string& AppCategory::name(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppCategory.name)
  return name_.Get(index);
}
inline ::std::string* AppCategory::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppCategory.name)
  return name_.Mutable(index);
}
inline void AppCategory::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppCategory.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AppCategory::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppCategory.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AppCategory::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppCategory.name)
}
inline void AppCategory::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppCategory.name)
}
inline ::std::string* AppCategory::add_name() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.webbase.blobs.AppCategory.name)
  return name_.Add();
}
inline void AppCategory::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.AppCategory.name)
}
#if LANG_CXX11
inline void AppCategory::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.webbase.blobs.AppCategory.name)
}
#endif
inline void AppCategory::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.webbase.blobs.AppCategory.name)
}
inline void AppCategory::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.webbase.blobs.AppCategory.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AppCategory::name() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.webbase.blobs.AppCategory.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AppCategory::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.webbase.blobs.AppCategory.name)
  return &name_;
}

// -------------------------------------------------------------------

// AppParsed

// required string title = 1;
inline bool AppParsed::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppParsed::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppParsed::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppParsed::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& AppParsed::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.title)
  return title_.GetNoArena();
}
inline void AppParsed::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.title)
}
#if LANG_CXX11
inline void AppParsed::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.title)
}
#endif
inline void AppParsed::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.title)
}
inline void AppParsed::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.title)
}
inline ::std::string* AppParsed::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.title)
}

// required uint32 platform = 2;
inline bool AppParsed::has_platform() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AppParsed::set_has_platform() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AppParsed::clear_has_platform() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AppParsed::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 AppParsed::platform() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.platform)
  return platform_;
}
inline void AppParsed::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.platform)
}

// optional string version = 3;
inline bool AppParsed::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppParsed::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppParsed::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppParsed::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& AppParsed::version() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.version)
  return version_.GetNoArena();
}
inline void AppParsed::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.version)
}
#if LANG_CXX11
inline void AppParsed::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.version)
}
#endif
inline void AppParsed::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.version)
}
inline void AppParsed::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.version)
}
inline ::std::string* AppParsed::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_version() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.version)
}

// optional string updated = 4;
inline bool AppParsed::has_updated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppParsed::set_has_updated() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppParsed::clear_has_updated() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppParsed::clear_updated() {
  updated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_updated();
}
inline const ::std::string& AppParsed::updated() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.updated)
  return updated_.GetNoArena();
}
inline void AppParsed::set_updated(const ::std::string& value) {
  set_has_updated();
  updated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.updated)
}
#if LANG_CXX11
inline void AppParsed::set_updated(::std::string&& value) {
  set_has_updated();
  updated_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.updated)
}
#endif
inline void AppParsed::set_updated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_updated();
  updated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.updated)
}
inline void AppParsed::set_updated(const char* value, size_t size) {
  set_has_updated();
  updated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.updated)
}
inline ::std::string* AppParsed::mutable_updated() {
  set_has_updated();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.updated)
  return updated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_updated() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.updated)
  clear_has_updated();
  return updated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_updated(::std::string* updated) {
  if (updated != NULL) {
    set_has_updated();
  } else {
    clear_has_updated();
  }
  updated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updated);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.updated)
}

// required string price = 5;
inline bool AppParsed::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppParsed::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppParsed::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppParsed::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price();
}
inline const ::std::string& AppParsed::price() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.price)
  return price_.GetNoArena();
}
inline void AppParsed::set_price(const ::std::string& value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.price)
}
#if LANG_CXX11
inline void AppParsed::set_price(::std::string&& value) {
  set_has_price();
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.price)
}
#endif
inline void AppParsed::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.price)
}
inline void AppParsed::set_price(const char* value, size_t size) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.price)
}
inline ::std::string* AppParsed::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_price() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.price)
  clear_has_price();
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.price)
}

// optional .ru.mail.go.webbase.blobs.AppCategory category = 6;
inline bool AppParsed::has_category() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AppParsed::set_has_category() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AppParsed::clear_has_category() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AppParsed::clear_category() {
  if (category_ != NULL) category_->::ru::mail::go::webbase::blobs::AppCategory::Clear();
  clear_has_category();
}
inline const ::ru::mail::go::webbase::blobs::AppCategory& AppParsed::category() const {
  const ::ru::mail::go::webbase::blobs::AppCategory* p = category_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.category)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::AppCategory*>(
      &::ru::mail::go::webbase::blobs::_AppCategory_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::AppCategory* AppParsed::mutable_category() {
  set_has_category();
  if (category_ == NULL) {
    category_ = new ::ru::mail::go::webbase::blobs::AppCategory;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.category)
  return category_;
}
inline ::ru::mail::go::webbase::blobs::AppCategory* AppParsed::release_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.category)
  clear_has_category();
  ::ru::mail::go::webbase::blobs::AppCategory* temp = category_;
  category_ = NULL;
  return temp;
}
inline void AppParsed::set_allocated_category(::ru::mail::go::webbase::blobs::AppCategory* category) {
  delete category_;
  category_ = category;
  if (category) {
    set_has_category();
  } else {
    clear_has_category();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.category)
}

// required bool is_free = 7;
inline bool AppParsed::has_is_free() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AppParsed::set_has_is_free() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AppParsed::clear_has_is_free() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AppParsed::clear_is_free() {
  is_free_ = false;
  clear_has_is_free();
}
inline bool AppParsed::is_free() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.is_free)
  return is_free_;
}
inline void AppParsed::set_is_free(bool value) {
  set_has_is_free();
  is_free_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.is_free)
}

// optional string age = 8;
inline bool AppParsed::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppParsed::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppParsed::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppParsed::clear_age() {
  age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_age();
}
inline const ::std::string& AppParsed::age() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.age)
  return age_.GetNoArena();
}
inline void AppParsed::set_age(const ::std::string& value) {
  set_has_age();
  age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.age)
}
#if LANG_CXX11
inline void AppParsed::set_age(::std::string&& value) {
  set_has_age();
  age_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.age)
}
#endif
inline void AppParsed::set_age(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_age();
  age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.age)
}
inline void AppParsed::set_age(const char* value, size_t size) {
  set_has_age();
  age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.age)
}
inline ::std::string* AppParsed::mutable_age() {
  set_has_age();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.age)
  return age_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_age() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.age)
  clear_has_age();
  return age_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_age(::std::string* age) {
  if (age != NULL) {
    set_has_age();
  } else {
    clear_has_age();
  }
  age_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), age);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.age)
}

// optional string age_reason = 9;
inline bool AppParsed::has_age_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppParsed::set_has_age_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppParsed::clear_has_age_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppParsed::clear_age_reason() {
  age_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_age_reason();
}
inline const ::std::string& AppParsed::age_reason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.age_reason)
  return age_reason_.GetNoArena();
}
inline void AppParsed::set_age_reason(const ::std::string& value) {
  set_has_age_reason();
  age_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.age_reason)
}
#if LANG_CXX11
inline void AppParsed::set_age_reason(::std::string&& value) {
  set_has_age_reason();
  age_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.age_reason)
}
#endif
inline void AppParsed::set_age_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_age_reason();
  age_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.age_reason)
}
inline void AppParsed::set_age_reason(const char* value, size_t size) {
  set_has_age_reason();
  age_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.age_reason)
}
inline ::std::string* AppParsed::mutable_age_reason() {
  set_has_age_reason();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.age_reason)
  return age_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_age_reason() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.age_reason)
  clear_has_age_reason();
  return age_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_age_reason(::std::string* age_reason) {
  if (age_reason != NULL) {
    set_has_age_reason();
  } else {
    clear_has_age_reason();
  }
  age_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), age_reason);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.age_reason)
}

// optional string size = 10;
inline bool AppParsed::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppParsed::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppParsed::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppParsed::clear_size() {
  size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_size();
}
inline const ::std::string& AppParsed::size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.size)
  return size_.GetNoArena();
}
inline void AppParsed::set_size(const ::std::string& value) {
  set_has_size();
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.size)
}
#if LANG_CXX11
inline void AppParsed::set_size(::std::string&& value) {
  set_has_size();
  size_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.size)
}
#endif
inline void AppParsed::set_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_size();
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.size)
}
inline void AppParsed::set_size(const char* value, size_t size) {
  set_has_size();
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.size)
}
inline ::std::string* AppParsed::mutable_size() {
  set_has_size();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.size)
  return size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_size() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.size)
  clear_has_size();
  return size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_size(::std::string* size) {
  if (size != NULL) {
    set_has_size();
  } else {
    clear_has_size();
  }
  size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), size);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.size)
}

// required .ru.mail.go.webbase.parsing.img.Thumb thumb = 11;
inline bool AppParsed::has_thumb() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AppParsed::set_has_thumb() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AppParsed::clear_has_thumb() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AppParsed::clear_thumb() {
  if (thumb_ != NULL) thumb_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_thumb();
}
inline const ::ru::mail::go::webbase::parsing::img::Thumb& AppParsed::thumb() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = thumb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.thumb)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
inline ::ru::mail::go::webbase::parsing::img::Thumb* AppParsed::mutable_thumb() {
  set_has_thumb();
  if (thumb_ == NULL) {
    thumb_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.thumb)
  return thumb_;
}
inline ::ru::mail::go::webbase::parsing::img::Thumb* AppParsed::release_thumb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.thumb)
  clear_has_thumb();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = thumb_;
  thumb_ = NULL;
  return temp;
}
inline void AppParsed::set_allocated_thumb(::ru::mail::go::webbase::parsing::img::Thumb* thumb) {
  delete thumb_;
  thumb_ = thumb;
  if (thumb) {
    set_has_thumb();
  } else {
    clear_has_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.thumb)
}

// required string description = 12;
inline bool AppParsed::has_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AppParsed::set_has_description() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AppParsed::clear_has_description() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AppParsed::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& AppParsed::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.description)
  return description_.GetNoArena();
}
inline void AppParsed::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.description)
}
#if LANG_CXX11
inline void AppParsed::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.description)
}
#endif
inline void AppParsed::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.description)
}
inline void AppParsed::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.description)
}
inline ::std::string* AppParsed::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.description)
}

// required double rate = 13;
inline bool AppParsed::has_rate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AppParsed::set_has_rate() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AppParsed::clear_has_rate() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AppParsed::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline double AppParsed::rate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.rate)
  return rate_;
}
inline void AppParsed::set_rate(double value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.rate)
}

// required double max_rate = 14;
inline bool AppParsed::has_max_rate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AppParsed::set_has_max_rate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AppParsed::clear_has_max_rate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AppParsed::clear_max_rate() {
  max_rate_ = 0;
  clear_has_max_rate();
}
inline double AppParsed::max_rate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.max_rate)
  return max_rate_;
}
inline void AppParsed::set_max_rate(double value) {
  set_has_max_rate();
  max_rate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.max_rate)
}

// optional .ru.mail.go.webbase.blobs.AppDeveloper developer = 15;
inline bool AppParsed::has_developer() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AppParsed::set_has_developer() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AppParsed::clear_has_developer() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AppParsed::clear_developer() {
  if (developer_ != NULL) developer_->::ru::mail::go::webbase::blobs::AppDeveloper::Clear();
  clear_has_developer();
}
inline const ::ru::mail::go::webbase::blobs::AppDeveloper& AppParsed::developer() const {
  const ::ru::mail::go::webbase::blobs::AppDeveloper* p = developer_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.developer)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::AppDeveloper*>(
      &::ru::mail::go::webbase::blobs::_AppDeveloper_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::AppDeveloper* AppParsed::mutable_developer() {
  set_has_developer();
  if (developer_ == NULL) {
    developer_ = new ::ru::mail::go::webbase::blobs::AppDeveloper;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.developer)
  return developer_;
}
inline ::ru::mail::go::webbase::blobs::AppDeveloper* AppParsed::release_developer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.developer)
  clear_has_developer();
  ::ru::mail::go::webbase::blobs::AppDeveloper* temp = developer_;
  developer_ = NULL;
  return temp;
}
inline void AppParsed::set_allocated_developer(::ru::mail::go::webbase::blobs::AppDeveloper* developer) {
  delete developer_;
  developer_ = developer;
  if (developer) {
    set_has_developer();
  } else {
    clear_has_developer();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.developer)
}

// required string url = 16;
inline bool AppParsed::has_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AppParsed::set_has_url() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AppParsed::clear_has_url() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AppParsed::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& AppParsed::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.url)
  return url_.GetNoArena();
}
inline void AppParsed::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.url)
}
#if LANG_CXX11
inline void AppParsed::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.url)
}
#endif
inline void AppParsed::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.url)
}
inline void AppParsed::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.url)
}
inline ::std::string* AppParsed::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.url)
}

// required string mobile_url = 17;
inline bool AppParsed::has_mobile_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AppParsed::set_has_mobile_url() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AppParsed::clear_has_mobile_url() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AppParsed::clear_mobile_url() {
  mobile_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile_url();
}
inline const ::std::string& AppParsed::mobile_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.mobile_url)
  return mobile_url_.GetNoArena();
}
inline void AppParsed::set_mobile_url(const ::std::string& value) {
  set_has_mobile_url();
  mobile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.mobile_url)
}
#if LANG_CXX11
inline void AppParsed::set_mobile_url(::std::string&& value) {
  set_has_mobile_url();
  mobile_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.mobile_url)
}
#endif
inline void AppParsed::set_mobile_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile_url();
  mobile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.mobile_url)
}
inline void AppParsed::set_mobile_url(const char* value, size_t size) {
  set_has_mobile_url();
  mobile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.mobile_url)
}
inline ::std::string* AppParsed::mutable_mobile_url() {
  set_has_mobile_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.mobile_url)
  return mobile_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_mobile_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.mobile_url)
  clear_has_mobile_url();
  return mobile_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_mobile_url(::std::string* mobile_url) {
  if (mobile_url != NULL) {
    set_has_mobile_url();
  } else {
    clear_has_mobile_url();
  }
  mobile_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.mobile_url)
}

// optional string requirements = 18;
inline bool AppParsed::has_requirements() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AppParsed::set_has_requirements() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AppParsed::clear_has_requirements() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AppParsed::clear_requirements() {
  requirements_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requirements();
}
inline const ::std::string& AppParsed::requirements() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.requirements)
  return requirements_.GetNoArena();
}
inline void AppParsed::set_requirements(const ::std::string& value) {
  set_has_requirements();
  requirements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.requirements)
}
#if LANG_CXX11
inline void AppParsed::set_requirements(::std::string&& value) {
  set_has_requirements();
  requirements_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.requirements)
}
#endif
inline void AppParsed::set_requirements(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_requirements();
  requirements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.requirements)
}
inline void AppParsed::set_requirements(const char* value, size_t size) {
  set_has_requirements();
  requirements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.requirements)
}
inline ::std::string* AppParsed::mutable_requirements() {
  set_has_requirements();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.requirements)
  return requirements_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_requirements() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.requirements)
  clear_has_requirements();
  return requirements_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_requirements(::std::string* requirements) {
  if (requirements != NULL) {
    set_has_requirements();
  } else {
    clear_has_requirements();
  }
  requirements_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requirements);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.requirements)
}

// optional string id = 19;
inline bool AppParsed::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AppParsed::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AppParsed::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AppParsed::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& AppParsed::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.id)
  return id_.GetNoArena();
}
inline void AppParsed::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.id)
}
#if LANG_CXX11
inline void AppParsed::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.id)
}
#endif
inline void AppParsed::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.id)
}
inline void AppParsed::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.id)
}
inline ::std::string* AppParsed::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.id)
}

// optional string reviewers = 20;
inline bool AppParsed::has_reviewers() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AppParsed::set_has_reviewers() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AppParsed::clear_has_reviewers() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AppParsed::clear_reviewers() {
  reviewers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reviewers();
}
inline const ::std::string& AppParsed::reviewers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppParsed.reviewers)
  return reviewers_.GetNoArena();
}
inline void AppParsed::set_reviewers(const ::std::string& value) {
  set_has_reviewers();
  reviewers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppParsed.reviewers)
}
#if LANG_CXX11
inline void AppParsed::set_reviewers(::std::string&& value) {
  set_has_reviewers();
  reviewers_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppParsed.reviewers)
}
#endif
inline void AppParsed::set_reviewers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reviewers();
  reviewers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppParsed.reviewers)
}
inline void AppParsed::set_reviewers(const char* value, size_t size) {
  set_has_reviewers();
  reviewers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppParsed.reviewers)
}
inline ::std::string* AppParsed::mutable_reviewers() {
  set_has_reviewers();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppParsed.reviewers)
  return reviewers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppParsed::release_reviewers() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppParsed.reviewers)
  clear_has_reviewers();
  return reviewers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppParsed::set_allocated_reviewers(::std::string* reviewers) {
  if (reviewers != NULL) {
    set_has_reviewers();
  } else {
    clear_has_reviewers();
  }
  reviewers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reviewers);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppParsed.reviewers)
}

// -------------------------------------------------------------------

// AppProperties

// required string title = 1;
inline bool AppProperties::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppProperties::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppProperties::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppProperties::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& AppProperties::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.title)
  return title_.GetNoArena();
}
inline void AppProperties::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.title)
}
#if LANG_CXX11
inline void AppProperties::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.title)
}
#endif
inline void AppProperties::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.title)
}
inline void AppProperties::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.title)
}
inline ::std::string* AppProperties::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.title)
}

// required uint32 platform = 2;
inline bool AppProperties::has_platform() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AppProperties::set_has_platform() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AppProperties::clear_has_platform() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AppProperties::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 AppProperties::platform() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.platform)
  return platform_;
}
inline void AppProperties::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.platform)
}

// optional string version = 3;
inline bool AppProperties::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppProperties::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppProperties::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppProperties::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& AppProperties::version() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.version)
  return version_.GetNoArena();
}
inline void AppProperties::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.version)
}
#if LANG_CXX11
inline void AppProperties::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.version)
}
#endif
inline void AppProperties::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.version)
}
inline void AppProperties::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.version)
}
inline ::std::string* AppProperties::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_version() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.version)
}

// optional string updated = 4;
inline bool AppProperties::has_updated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppProperties::set_has_updated() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppProperties::clear_has_updated() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppProperties::clear_updated() {
  updated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_updated();
}
inline const ::std::string& AppProperties::updated() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.updated)
  return updated_.GetNoArena();
}
inline void AppProperties::set_updated(const ::std::string& value) {
  set_has_updated();
  updated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.updated)
}
#if LANG_CXX11
inline void AppProperties::set_updated(::std::string&& value) {
  set_has_updated();
  updated_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.updated)
}
#endif
inline void AppProperties::set_updated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_updated();
  updated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.updated)
}
inline void AppProperties::set_updated(const char* value, size_t size) {
  set_has_updated();
  updated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.updated)
}
inline ::std::string* AppProperties::mutable_updated() {
  set_has_updated();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.updated)
  return updated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_updated() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.updated)
  clear_has_updated();
  return updated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_updated(::std::string* updated) {
  if (updated != NULL) {
    set_has_updated();
  } else {
    clear_has_updated();
  }
  updated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updated);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.updated)
}

// required string price = 5;
inline bool AppProperties::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppProperties::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppProperties::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppProperties::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price();
}
inline const ::std::string& AppProperties::price() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.price)
  return price_.GetNoArena();
}
inline void AppProperties::set_price(const ::std::string& value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.price)
}
#if LANG_CXX11
inline void AppProperties::set_price(::std::string&& value) {
  set_has_price();
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.price)
}
#endif
inline void AppProperties::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.price)
}
inline void AppProperties::set_price(const char* value, size_t size) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.price)
}
inline ::std::string* AppProperties::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_price() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.price)
  clear_has_price();
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.price)
}

// optional .ru.mail.go.webbase.blobs.AppCategory category = 6;
inline bool AppProperties::has_category() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AppProperties::set_has_category() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AppProperties::clear_has_category() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AppProperties::clear_category() {
  if (category_ != NULL) category_->::ru::mail::go::webbase::blobs::AppCategory::Clear();
  clear_has_category();
}
inline const ::ru::mail::go::webbase::blobs::AppCategory& AppProperties::category() const {
  const ::ru::mail::go::webbase::blobs::AppCategory* p = category_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.category)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::AppCategory*>(
      &::ru::mail::go::webbase::blobs::_AppCategory_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::AppCategory* AppProperties::mutable_category() {
  set_has_category();
  if (category_ == NULL) {
    category_ = new ::ru::mail::go::webbase::blobs::AppCategory;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.category)
  return category_;
}
inline ::ru::mail::go::webbase::blobs::AppCategory* AppProperties::release_category() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.category)
  clear_has_category();
  ::ru::mail::go::webbase::blobs::AppCategory* temp = category_;
  category_ = NULL;
  return temp;
}
inline void AppProperties::set_allocated_category(::ru::mail::go::webbase::blobs::AppCategory* category) {
  delete category_;
  category_ = category;
  if (category) {
    set_has_category();
  } else {
    clear_has_category();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.category)
}

// required bool is_free = 7;
inline bool AppProperties::has_is_free() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AppProperties::set_has_is_free() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AppProperties::clear_has_is_free() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AppProperties::clear_is_free() {
  is_free_ = false;
  clear_has_is_free();
}
inline bool AppProperties::is_free() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.is_free)
  return is_free_;
}
inline void AppProperties::set_is_free(bool value) {
  set_has_is_free();
  is_free_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.is_free)
}

// optional string age = 8;
inline bool AppProperties::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppProperties::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppProperties::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppProperties::clear_age() {
  age_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_age();
}
inline const ::std::string& AppProperties::age() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.age)
  return age_.GetNoArena();
}
inline void AppProperties::set_age(const ::std::string& value) {
  set_has_age();
  age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.age)
}
#if LANG_CXX11
inline void AppProperties::set_age(::std::string&& value) {
  set_has_age();
  age_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.age)
}
#endif
inline void AppProperties::set_age(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_age();
  age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.age)
}
inline void AppProperties::set_age(const char* value, size_t size) {
  set_has_age();
  age_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.age)
}
inline ::std::string* AppProperties::mutable_age() {
  set_has_age();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.age)
  return age_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_age() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.age)
  clear_has_age();
  return age_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_age(::std::string* age) {
  if (age != NULL) {
    set_has_age();
  } else {
    clear_has_age();
  }
  age_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), age);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.age)
}

// optional string age_reason = 9;
inline bool AppProperties::has_age_reason() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppProperties::set_has_age_reason() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppProperties::clear_has_age_reason() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppProperties::clear_age_reason() {
  age_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_age_reason();
}
inline const ::std::string& AppProperties::age_reason() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.age_reason)
  return age_reason_.GetNoArena();
}
inline void AppProperties::set_age_reason(const ::std::string& value) {
  set_has_age_reason();
  age_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.age_reason)
}
#if LANG_CXX11
inline void AppProperties::set_age_reason(::std::string&& value) {
  set_has_age_reason();
  age_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.age_reason)
}
#endif
inline void AppProperties::set_age_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_age_reason();
  age_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.age_reason)
}
inline void AppProperties::set_age_reason(const char* value, size_t size) {
  set_has_age_reason();
  age_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.age_reason)
}
inline ::std::string* AppProperties::mutable_age_reason() {
  set_has_age_reason();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.age_reason)
  return age_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_age_reason() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.age_reason)
  clear_has_age_reason();
  return age_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_age_reason(::std::string* age_reason) {
  if (age_reason != NULL) {
    set_has_age_reason();
  } else {
    clear_has_age_reason();
  }
  age_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), age_reason);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.age_reason)
}

// optional string size = 10;
inline bool AppProperties::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppProperties::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppProperties::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppProperties::clear_size() {
  size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_size();
}
inline const ::std::string& AppProperties::size() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.size)
  return size_.GetNoArena();
}
inline void AppProperties::set_size(const ::std::string& value) {
  set_has_size();
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.size)
}
#if LANG_CXX11
inline void AppProperties::set_size(::std::string&& value) {
  set_has_size();
  size_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.size)
}
#endif
inline void AppProperties::set_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_size();
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.size)
}
inline void AppProperties::set_size(const char* value, size_t size) {
  set_has_size();
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.size)
}
inline ::std::string* AppProperties::mutable_size() {
  set_has_size();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.size)
  return size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_size() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.size)
  clear_has_size();
  return size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_size(::std::string* size) {
  if (size != NULL) {
    set_has_size();
  } else {
    clear_has_size();
  }
  size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), size);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.size)
}

// required string description = 11;
inline bool AppProperties::has_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AppProperties::set_has_description() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AppProperties::clear_has_description() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AppProperties::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& AppProperties::description() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.description)
  return description_.GetNoArena();
}
inline void AppProperties::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.description)
}
#if LANG_CXX11
inline void AppProperties::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.description)
}
#endif
inline void AppProperties::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.description)
}
inline void AppProperties::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.description)
}
inline ::std::string* AppProperties::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_description() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.description)
}

// required double rate = 12;
inline bool AppProperties::has_rate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AppProperties::set_has_rate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AppProperties::clear_has_rate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AppProperties::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline double AppProperties::rate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.rate)
  return rate_;
}
inline void AppProperties::set_rate(double value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.rate)
}

// required double max_rate = 13;
inline bool AppProperties::has_max_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AppProperties::set_has_max_rate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AppProperties::clear_has_max_rate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AppProperties::clear_max_rate() {
  max_rate_ = 0;
  clear_has_max_rate();
}
inline double AppProperties::max_rate() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.max_rate)
  return max_rate_;
}
inline void AppProperties::set_max_rate(double value) {
  set_has_max_rate();
  max_rate_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.max_rate)
}

// optional .ru.mail.go.webbase.blobs.AppDeveloper developer = 14;
inline bool AppProperties::has_developer() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AppProperties::set_has_developer() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AppProperties::clear_has_developer() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AppProperties::clear_developer() {
  if (developer_ != NULL) developer_->::ru::mail::go::webbase::blobs::AppDeveloper::Clear();
  clear_has_developer();
}
inline const ::ru::mail::go::webbase::blobs::AppDeveloper& AppProperties::developer() const {
  const ::ru::mail::go::webbase::blobs::AppDeveloper* p = developer_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.developer)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::AppDeveloper*>(
      &::ru::mail::go::webbase::blobs::_AppDeveloper_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::AppDeveloper* AppProperties::mutable_developer() {
  set_has_developer();
  if (developer_ == NULL) {
    developer_ = new ::ru::mail::go::webbase::blobs::AppDeveloper;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.developer)
  return developer_;
}
inline ::ru::mail::go::webbase::blobs::AppDeveloper* AppProperties::release_developer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.developer)
  clear_has_developer();
  ::ru::mail::go::webbase::blobs::AppDeveloper* temp = developer_;
  developer_ = NULL;
  return temp;
}
inline void AppProperties::set_allocated_developer(::ru::mail::go::webbase::blobs::AppDeveloper* developer) {
  delete developer_;
  developer_ = developer;
  if (developer) {
    set_has_developer();
  } else {
    clear_has_developer();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.developer)
}

// required string url = 15;
inline bool AppProperties::has_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AppProperties::set_has_url() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AppProperties::clear_has_url() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AppProperties::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& AppProperties::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.url)
  return url_.GetNoArena();
}
inline void AppProperties::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.url)
}
#if LANG_CXX11
inline void AppProperties::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.url)
}
#endif
inline void AppProperties::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.url)
}
inline void AppProperties::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.url)
}
inline ::std::string* AppProperties::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.url)
}

// required string mobile_url = 16;
inline bool AppProperties::has_mobile_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AppProperties::set_has_mobile_url() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AppProperties::clear_has_mobile_url() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AppProperties::clear_mobile_url() {
  mobile_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mobile_url();
}
inline const ::std::string& AppProperties::mobile_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.mobile_url)
  return mobile_url_.GetNoArena();
}
inline void AppProperties::set_mobile_url(const ::std::string& value) {
  set_has_mobile_url();
  mobile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.mobile_url)
}
#if LANG_CXX11
inline void AppProperties::set_mobile_url(::std::string&& value) {
  set_has_mobile_url();
  mobile_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.mobile_url)
}
#endif
inline void AppProperties::set_mobile_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mobile_url();
  mobile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.mobile_url)
}
inline void AppProperties::set_mobile_url(const char* value, size_t size) {
  set_has_mobile_url();
  mobile_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.mobile_url)
}
inline ::std::string* AppProperties::mutable_mobile_url() {
  set_has_mobile_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.mobile_url)
  return mobile_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_mobile_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.mobile_url)
  clear_has_mobile_url();
  return mobile_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_mobile_url(::std::string* mobile_url) {
  if (mobile_url != NULL) {
    set_has_mobile_url();
  } else {
    clear_has_mobile_url();
  }
  mobile_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mobile_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.mobile_url)
}

// optional string requirements = 17;
inline bool AppProperties::has_requirements() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AppProperties::set_has_requirements() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AppProperties::clear_has_requirements() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AppProperties::clear_requirements() {
  requirements_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requirements();
}
inline const ::std::string& AppProperties::requirements() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.requirements)
  return requirements_.GetNoArena();
}
inline void AppProperties::set_requirements(const ::std::string& value) {
  set_has_requirements();
  requirements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.requirements)
}
#if LANG_CXX11
inline void AppProperties::set_requirements(::std::string&& value) {
  set_has_requirements();
  requirements_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.requirements)
}
#endif
inline void AppProperties::set_requirements(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_requirements();
  requirements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.requirements)
}
inline void AppProperties::set_requirements(const char* value, size_t size) {
  set_has_requirements();
  requirements_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.requirements)
}
inline ::std::string* AppProperties::mutable_requirements() {
  set_has_requirements();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.requirements)
  return requirements_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_requirements() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.requirements)
  clear_has_requirements();
  return requirements_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_requirements(::std::string* requirements) {
  if (requirements != NULL) {
    set_has_requirements();
  } else {
    clear_has_requirements();
  }
  requirements_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requirements);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.requirements)
}

// optional string id = 18;
inline bool AppProperties::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AppProperties::set_has_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AppProperties::clear_has_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AppProperties::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& AppProperties::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.id)
  return id_.GetNoArena();
}
inline void AppProperties::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.id)
}
#if LANG_CXX11
inline void AppProperties::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.id)
}
#endif
inline void AppProperties::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.id)
}
inline void AppProperties::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.id)
}
inline ::std::string* AppProperties::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.id)
}

// optional uint32 reviewers = 19;
inline bool AppProperties::has_reviewers() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void AppProperties::set_has_reviewers() {
  _has_bits_[0] |= 0x00800000u;
}
inline void AppProperties::clear_has_reviewers() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void AppProperties::clear_reviewers() {
  reviewers_ = 0u;
  clear_has_reviewers();
}
inline ::google::protobuf::uint32 AppProperties::reviewers() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.reviewers)
  return reviewers_;
}
inline void AppProperties::set_reviewers(::google::protobuf::uint32 value) {
  set_has_reviewers();
  reviewers_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.reviewers)
}

// optional uint64 rub_mask = 20;
inline bool AppProperties::has_rub_mask() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void AppProperties::set_has_rub_mask() {
  _has_bits_[0] |= 0x00400000u;
}
inline void AppProperties::clear_has_rub_mask() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void AppProperties::clear_rub_mask() {
  rub_mask_ = GOOGLE_ULONGLONG(0);
  clear_has_rub_mask();
}
inline ::google::protobuf::uint64 AppProperties::rub_mask() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.rub_mask)
  return rub_mask_;
}
inline void AppProperties::set_rub_mask(::google::protobuf::uint64 value) {
  set_has_rub_mask();
  rub_mask_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.rub_mask)
}

// optional bool is_banned = 21;
inline bool AppProperties::has_is_banned() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AppProperties::set_has_is_banned() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AppProperties::clear_has_is_banned() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AppProperties::clear_is_banned() {
  is_banned_ = false;
  clear_has_is_banned();
}
inline bool AppProperties::is_banned() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.is_banned)
  return is_banned_;
}
inline void AppProperties::set_is_banned(bool value) {
  set_has_is_banned();
  is_banned_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.is_banned)
}

// optional string categoryIds = 22;
inline bool AppProperties::has_categoryids() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AppProperties::set_has_categoryids() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AppProperties::clear_has_categoryids() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AppProperties::clear_categoryids() {
  categoryids_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_categoryids();
}
inline const ::std::string& AppProperties::categoryids() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.categoryIds)
  return categoryids_.GetNoArena();
}
inline void AppProperties::set_categoryids(const ::std::string& value) {
  set_has_categoryids();
  categoryids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.categoryIds)
}
#if LANG_CXX11
inline void AppProperties::set_categoryids(::std::string&& value) {
  set_has_categoryids();
  categoryids_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppProperties.categoryIds)
}
#endif
inline void AppProperties::set_categoryids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_categoryids();
  categoryids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppProperties.categoryIds)
}
inline void AppProperties::set_categoryids(const char* value, size_t size) {
  set_has_categoryids();
  categoryids_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppProperties.categoryIds)
}
inline ::std::string* AppProperties::mutable_categoryids() {
  set_has_categoryids();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppProperties.categoryIds)
  return categoryids_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppProperties::release_categoryids() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppProperties.categoryIds)
  clear_has_categoryids();
  return categoryids_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppProperties::set_allocated_categoryids(::std::string* categoryids) {
  if (categoryids != NULL) {
    set_has_categoryids();
  } else {
    clear_has_categoryids();
  }
  categoryids_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), categoryids);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppProperties.categoryIds)
}

// optional bool paid_content = 23;
inline bool AppProperties::has_paid_content() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AppProperties::set_has_paid_content() {
  _has_bits_[0] |= 0x00100000u;
}
inline void AppProperties::clear_has_paid_content() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void AppProperties::clear_paid_content() {
  paid_content_ = false;
  clear_has_paid_content();
}
inline bool AppProperties::paid_content() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.paid_content)
  return paid_content_;
}
inline void AppProperties::set_paid_content(bool value) {
  set_has_paid_content();
  paid_content_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.paid_content)
}

// optional bool is_top_dev = 24;
inline bool AppProperties::has_is_top_dev() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AppProperties::set_has_is_top_dev() {
  _has_bits_[0] |= 0x00200000u;
}
inline void AppProperties::clear_has_is_top_dev() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void AppProperties::clear_is_top_dev() {
  is_top_dev_ = false;
  clear_has_is_top_dev();
}
inline bool AppProperties::is_top_dev() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.is_top_dev)
  return is_top_dev_;
}
inline void AppProperties::set_is_top_dev(bool value) {
  set_has_is_top_dev();
  is_top_dev_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.is_top_dev)
}

// optional bool is_editor_choice = 25;
inline bool AppProperties::has_is_editor_choice() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void AppProperties::set_has_is_editor_choice() {
  _has_bits_[0] |= 0x01000000u;
}
inline void AppProperties::clear_has_is_editor_choice() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void AppProperties::clear_is_editor_choice() {
  is_editor_choice_ = false;
  clear_has_is_editor_choice();
}
inline bool AppProperties::is_editor_choice() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppProperties.is_editor_choice)
  return is_editor_choice_;
}
inline void AppProperties::set_is_editor_choice(bool value) {
  set_has_is_editor_choice();
  is_editor_choice_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppProperties.is_editor_choice)
}

// -------------------------------------------------------------------

// AppImage

// required .ru.mail.go.webbase.parsing.img.Thumb thumb = 1;
inline bool AppImage::has_thumb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppImage::set_has_thumb() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppImage::clear_has_thumb() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppImage::clear_thumb() {
  if (thumb_ != NULL) thumb_->::ru::mail::go::webbase::parsing::img::Thumb::Clear();
  clear_has_thumb();
}
inline const ::ru::mail::go::webbase::parsing::img::Thumb& AppImage::thumb() const {
  const ::ru::mail::go::webbase::parsing::img::Thumb* p = thumb_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppImage.thumb)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::parsing::img::Thumb*>(
      &::ru::mail::go::webbase::parsing::img::_Thumb_default_instance_);
}
inline ::ru::mail::go::webbase::parsing::img::Thumb* AppImage::mutable_thumb() {
  set_has_thumb();
  if (thumb_ == NULL) {
    thumb_ = new ::ru::mail::go::webbase::parsing::img::Thumb;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppImage.thumb)
  return thumb_;
}
inline ::ru::mail::go::webbase::parsing::img::Thumb* AppImage::release_thumb() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppImage.thumb)
  clear_has_thumb();
  ::ru::mail::go::webbase::parsing::img::Thumb* temp = thumb_;
  thumb_ = NULL;
  return temp;
}
inline void AppImage::set_allocated_thumb(::ru::mail::go::webbase::parsing::img::Thumb* thumb) {
  delete thumb_;
  thumb_ = thumb;
  if (thumb) {
    set_has_thumb();
  } else {
    clear_has_thumb();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppImage.thumb)
}

// -------------------------------------------------------------------

// AppDataWrapper

// required .ru.mail.go.webbase.blobs.AppProperties properties = 1;
inline bool AppDataWrapper::has_properties() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppDataWrapper::set_has_properties() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppDataWrapper::clear_has_properties() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppDataWrapper::clear_properties() {
  if (properties_ != NULL) properties_->::ru::mail::go::webbase::blobs::AppProperties::Clear();
  clear_has_properties();
}
inline const ::ru::mail::go::webbase::blobs::AppProperties& AppDataWrapper::properties() const {
  const ::ru::mail::go::webbase::blobs::AppProperties* p = properties_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDataWrapper.properties)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::AppProperties*>(
      &::ru::mail::go::webbase::blobs::_AppProperties_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::AppProperties* AppDataWrapper::mutable_properties() {
  set_has_properties();
  if (properties_ == NULL) {
    properties_ = new ::ru::mail::go::webbase::blobs::AppProperties;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppDataWrapper.properties)
  return properties_;
}
inline ::ru::mail::go::webbase::blobs::AppProperties* AppDataWrapper::release_properties() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppDataWrapper.properties)
  clear_has_properties();
  ::ru::mail::go::webbase::blobs::AppProperties* temp = properties_;
  properties_ = NULL;
  return temp;
}
inline void AppDataWrapper::set_allocated_properties(::ru::mail::go::webbase::blobs::AppProperties* properties) {
  delete properties_;
  properties_ = properties;
  if (properties) {
    set_has_properties();
  } else {
    clear_has_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppDataWrapper.properties)
}

// required string image_url = 2;
inline bool AppDataWrapper::has_image_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppDataWrapper::set_has_image_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppDataWrapper::clear_has_image_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppDataWrapper::clear_image_url() {
  image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_url();
}
inline const ::std::string& AppDataWrapper::image_url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDataWrapper.image_url)
  return image_url_.GetNoArena();
}
inline void AppDataWrapper::set_image_url(const ::std::string& value) {
  set_has_image_url();
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppDataWrapper.image_url)
}
#if LANG_CXX11
inline void AppDataWrapper::set_image_url(::std::string&& value) {
  set_has_image_url();
  image_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppDataWrapper.image_url)
}
#endif
inline void AppDataWrapper::set_image_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image_url();
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppDataWrapper.image_url)
}
inline void AppDataWrapper::set_image_url(const char* value, size_t size) {
  set_has_image_url();
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppDataWrapper.image_url)
}
inline ::std::string* AppDataWrapper::mutable_image_url() {
  set_has_image_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppDataWrapper.image_url)
  return image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppDataWrapper::release_image_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppDataWrapper.image_url)
  clear_has_image_url();
  return image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppDataWrapper::set_allocated_image_url(::std::string* image_url) {
  if (image_url != NULL) {
    set_has_image_url();
  } else {
    clear_has_image_url();
  }
  image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppDataWrapper.image_url)
}

// optional .ru.mail.go.webbase.blobs.AppImage image = 3;
inline bool AppDataWrapper::has_image() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppDataWrapper::set_has_image() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppDataWrapper::clear_has_image() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppDataWrapper::clear_image() {
  if (image_ != NULL) image_->::ru::mail::go::webbase::blobs::AppImage::Clear();
  clear_has_image();
}
inline const ::ru::mail::go::webbase::blobs::AppImage& AppDataWrapper::image() const {
  const ::ru::mail::go::webbase::blobs::AppImage* p = image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDataWrapper.image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::AppImage*>(
      &::ru::mail::go::webbase::blobs::_AppImage_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::AppImage* AppDataWrapper::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::ru::mail::go::webbase::blobs::AppImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppDataWrapper.image)
  return image_;
}
inline ::ru::mail::go::webbase::blobs::AppImage* AppDataWrapper::release_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppDataWrapper.image)
  clear_has_image();
  ::ru::mail::go::webbase::blobs::AppImage* temp = image_;
  image_ = NULL;
  return temp;
}
inline void AppDataWrapper::set_allocated_image(::ru::mail::go::webbase::blobs::AppImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppDataWrapper.image)
}

// optional uint64 brsq2 = 4;
inline bool AppDataWrapper::has_brsq2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppDataWrapper::set_has_brsq2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppDataWrapper::clear_has_brsq2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppDataWrapper::clear_brsq2() {
  brsq2_ = GOOGLE_ULONGLONG(0);
  clear_has_brsq2();
}
inline ::google::protobuf::uint64 AppDataWrapper::brsq2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDataWrapper.brsq2)
  return brsq2_;
}
inline void AppDataWrapper::set_brsq2(::google::protobuf::uint64 value) {
  set_has_brsq2();
  brsq2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppDataWrapper.brsq2)
}

// optional uint64 uruq2 = 5;
inline bool AppDataWrapper::has_uruq2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AppDataWrapper::set_has_uruq2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AppDataWrapper::clear_has_uruq2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AppDataWrapper::clear_uruq2() {
  uruq2_ = GOOGLE_ULONGLONG(0);
  clear_has_uruq2();
}
inline ::google::protobuf::uint64 AppDataWrapper::uruq2() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDataWrapper.uruq2)
  return uruq2_;
}
inline void AppDataWrapper::set_uruq2(::google::protobuf::uint64 value) {
  set_has_uruq2();
  uruq2_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppDataWrapper.uruq2)
}

// optional bool is_top = 6;
inline bool AppDataWrapper::has_is_top() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AppDataWrapper::set_has_is_top() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AppDataWrapper::clear_has_is_top() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AppDataWrapper::clear_is_top() {
  is_top_ = false;
  clear_has_is_top();
}
inline bool AppDataWrapper::is_top() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDataWrapper.is_top)
  return is_top_;
}
inline void AppDataWrapper::set_is_top(bool value) {
  set_has_is_top();
  is_top_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppDataWrapper.is_top)
}

// optional string base64_img = 7;
inline bool AppDataWrapper::has_base64_img() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppDataWrapper::set_has_base64_img() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppDataWrapper::clear_has_base64_img() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppDataWrapper::clear_base64_img() {
  base64_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base64_img();
}
inline const ::std::string& AppDataWrapper::base64_img() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDataWrapper.base64_img)
  return base64_img_.GetNoArena();
}
inline void AppDataWrapper::set_base64_img(const ::std::string& value) {
  set_has_base64_img();
  base64_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppDataWrapper.base64_img)
}
#if LANG_CXX11
inline void AppDataWrapper::set_base64_img(::std::string&& value) {
  set_has_base64_img();
  base64_img_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppDataWrapper.base64_img)
}
#endif
inline void AppDataWrapper::set_base64_img(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_base64_img();
  base64_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppDataWrapper.base64_img)
}
inline void AppDataWrapper::set_base64_img(const char* value, size_t size) {
  set_has_base64_img();
  base64_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppDataWrapper.base64_img)
}
inline ::std::string* AppDataWrapper::mutable_base64_img() {
  set_has_base64_img();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppDataWrapper.base64_img)
  return base64_img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppDataWrapper::release_base64_img() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppDataWrapper.base64_img)
  clear_has_base64_img();
  return base64_img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppDataWrapper::set_allocated_base64_img(::std::string* base64_img) {
  if (base64_img != NULL) {
    set_has_base64_img();
  } else {
    clear_has_base64_img();
  }
  base64_img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base64_img);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppDataWrapper.base64_img)
}

// optional string img_bkgrnd = 8;
inline bool AppDataWrapper::has_img_bkgrnd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppDataWrapper::set_has_img_bkgrnd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppDataWrapper::clear_has_img_bkgrnd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppDataWrapper::clear_img_bkgrnd() {
  img_bkgrnd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_bkgrnd();
}
inline const ::std::string& AppDataWrapper::img_bkgrnd() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDataWrapper.img_bkgrnd)
  return img_bkgrnd_.GetNoArena();
}
inline void AppDataWrapper::set_img_bkgrnd(const ::std::string& value) {
  set_has_img_bkgrnd();
  img_bkgrnd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppDataWrapper.img_bkgrnd)
}
#if LANG_CXX11
inline void AppDataWrapper::set_img_bkgrnd(::std::string&& value) {
  set_has_img_bkgrnd();
  img_bkgrnd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppDataWrapper.img_bkgrnd)
}
#endif
inline void AppDataWrapper::set_img_bkgrnd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img_bkgrnd();
  img_bkgrnd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppDataWrapper.img_bkgrnd)
}
inline void AppDataWrapper::set_img_bkgrnd(const char* value, size_t size) {
  set_has_img_bkgrnd();
  img_bkgrnd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppDataWrapper.img_bkgrnd)
}
inline ::std::string* AppDataWrapper::mutable_img_bkgrnd() {
  set_has_img_bkgrnd();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppDataWrapper.img_bkgrnd)
  return img_bkgrnd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppDataWrapper::release_img_bkgrnd() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppDataWrapper.img_bkgrnd)
  clear_has_img_bkgrnd();
  return img_bkgrnd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppDataWrapper::set_allocated_img_bkgrnd(::std::string* img_bkgrnd) {
  if (img_bkgrnd != NULL) {
    set_has_img_bkgrnd();
  } else {
    clear_has_img_bkgrnd();
  }
  img_bkgrnd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_bkgrnd);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppDataWrapper.img_bkgrnd)
}

// optional string reco_srch_key = 9;
inline bool AppDataWrapper::has_reco_srch_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppDataWrapper::set_has_reco_srch_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppDataWrapper::clear_has_reco_srch_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppDataWrapper::clear_reco_srch_key() {
  reco_srch_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reco_srch_key();
}
inline const ::std::string& AppDataWrapper::reco_srch_key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppDataWrapper.reco_srch_key)
  return reco_srch_key_.GetNoArena();
}
inline void AppDataWrapper::set_reco_srch_key(const ::std::string& value) {
  set_has_reco_srch_key();
  reco_srch_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppDataWrapper.reco_srch_key)
}
#if LANG_CXX11
inline void AppDataWrapper::set_reco_srch_key(::std::string&& value) {
  set_has_reco_srch_key();
  reco_srch_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppDataWrapper.reco_srch_key)
}
#endif
inline void AppDataWrapper::set_reco_srch_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reco_srch_key();
  reco_srch_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppDataWrapper.reco_srch_key)
}
inline void AppDataWrapper::set_reco_srch_key(const char* value, size_t size) {
  set_has_reco_srch_key();
  reco_srch_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppDataWrapper.reco_srch_key)
}
inline ::std::string* AppDataWrapper::mutable_reco_srch_key() {
  set_has_reco_srch_key();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppDataWrapper.reco_srch_key)
  return reco_srch_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppDataWrapper::release_reco_srch_key() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppDataWrapper.reco_srch_key)
  clear_has_reco_srch_key();
  return reco_srch_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppDataWrapper::set_allocated_reco_srch_key(::std::string* reco_srch_key) {
  if (reco_srch_key != NULL) {
    set_has_reco_srch_key();
  } else {
    clear_has_reco_srch_key();
  }
  reco_srch_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reco_srch_key);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppDataWrapper.reco_srch_key)
}

// -------------------------------------------------------------------

// AppImageWrapper

// required .ru.mail.go.webbase.blobs.AppImage image = 1;
inline bool AppImageWrapper::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppImageWrapper::set_has_image() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppImageWrapper::clear_has_image() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppImageWrapper::clear_image() {
  if (image_ != NULL) image_->::ru::mail::go::webbase::blobs::AppImage::Clear();
  clear_has_image();
}
inline const ::ru::mail::go::webbase::blobs::AppImage& AppImageWrapper::image() const {
  const ::ru::mail::go::webbase::blobs::AppImage* p = image_;
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppImageWrapper.image)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::webbase::blobs::AppImage*>(
      &::ru::mail::go::webbase::blobs::_AppImage_default_instance_);
}
inline ::ru::mail::go::webbase::blobs::AppImage* AppImageWrapper::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::ru::mail::go::webbase::blobs::AppImage;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppImageWrapper.image)
  return image_;
}
inline ::ru::mail::go::webbase::blobs::AppImage* AppImageWrapper::release_image() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppImageWrapper.image)
  clear_has_image();
  ::ru::mail::go::webbase::blobs::AppImage* temp = image_;
  image_ = NULL;
  return temp;
}
inline void AppImageWrapper::set_allocated_image(::ru::mail::go::webbase::blobs::AppImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppImageWrapper.image)
}

// required string url = 2;
inline bool AppImageWrapper::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppImageWrapper::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppImageWrapper::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppImageWrapper::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& AppImageWrapper::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppImageWrapper.url)
  return url_.GetNoArena();
}
inline void AppImageWrapper::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppImageWrapper.url)
}
#if LANG_CXX11
inline void AppImageWrapper::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppImageWrapper.url)
}
#endif
inline void AppImageWrapper::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppImageWrapper.url)
}
inline void AppImageWrapper::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppImageWrapper.url)
}
inline ::std::string* AppImageWrapper::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppImageWrapper.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppImageWrapper::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppImageWrapper.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppImageWrapper::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppImageWrapper.url)
}

// optional string base64_img = 3;
inline bool AppImageWrapper::has_base64_img() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppImageWrapper::set_has_base64_img() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppImageWrapper::clear_has_base64_img() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppImageWrapper::clear_base64_img() {
  base64_img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_base64_img();
}
inline const ::std::string& AppImageWrapper::base64_img() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.webbase.blobs.AppImageWrapper.base64_img)
  return base64_img_.GetNoArena();
}
inline void AppImageWrapper::set_base64_img(const ::std::string& value) {
  set_has_base64_img();
  base64_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.webbase.blobs.AppImageWrapper.base64_img)
}
#if LANG_CXX11
inline void AppImageWrapper::set_base64_img(::std::string&& value) {
  set_has_base64_img();
  base64_img_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.webbase.blobs.AppImageWrapper.base64_img)
}
#endif
inline void AppImageWrapper::set_base64_img(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_base64_img();
  base64_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.webbase.blobs.AppImageWrapper.base64_img)
}
inline void AppImageWrapper::set_base64_img(const char* value, size_t size) {
  set_has_base64_img();
  base64_img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.webbase.blobs.AppImageWrapper.base64_img)
}
inline ::std::string* AppImageWrapper::mutable_base64_img() {
  set_has_base64_img();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.webbase.blobs.AppImageWrapper.base64_img)
  return base64_img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppImageWrapper::release_base64_img() {
  // @@protoc_insertion_point(field_release:ru.mail.go.webbase.blobs.AppImageWrapper.base64_img)
  clear_has_base64_img();
  return base64_img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppImageWrapper::set_allocated_base64_img(::std::string* base64_img) {
  if (base64_img != NULL) {
    set_has_base64_img();
  } else {
    clear_has_base64_img();
  }
  base64_img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base64_img);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.webbase.blobs.AppImageWrapper.base64_img)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace blobs
}  // namespace webbase
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_additive_5fapp_2eproto__INCLUDED
