// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: advert.proto

#ifndef PROTOBUF_advert_2eproto__INCLUDED
#define PROTOBUF_advert_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace advert {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class AdvertAddress;
class AdvertAddressDefaultTypeInternal;
extern AdvertAddressDefaultTypeInternal _AdvertAddress_default_instance_;
class RichSitelink;
class RichSitelinkDefaultTypeInternal;
extern RichSitelinkDefaultTypeInternal _RichSitelink_default_instance_;
class RichSitelinks;
class RichSitelinksDefaultTypeInternal;
extern RichSitelinksDefaultTypeInternal _RichSitelinks_default_instance_;
}  // namespace advert
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace advert {

namespace protobuf_advert_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_advert_2eproto

// ===================================================================

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.advert.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const PROTOBUF_FINAL { return New(NULL); }

  Address* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string phone = 3;
  bool has_phone() const;
  void clear_phone();
  static const int kPhoneFieldNumber = 3;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // required string address = 4;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string schedule = 5;
  bool has_schedule() const;
  void clear_schedule();
  static const int kScheduleFieldNumber = 5;
  const ::std::string& schedule() const;
  void set_schedule(const ::std::string& value);
  #if LANG_CXX11
  void set_schedule(::std::string&& value);
  #endif
  void set_schedule(const char* value);
  void set_schedule(const char* value, size_t size);
  ::std::string* mutable_schedule();
  ::std::string* release_schedule();
  void set_allocated_schedule(::std::string* schedule);

  // required float lat = 1;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  float lat() const;
  void set_lat(float value);

  // required float lon = 2;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  float lon() const;
  void set_lon(float value);

  // optional int32 georegid = 6;
  bool has_georegid() const;
  void clear_georegid();
  static const int kGeoregidFieldNumber = 6;
  ::google::protobuf::int32 georegid() const;
  void set_georegid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.advert.Address)
 private:
  void set_has_lat();
  void clear_has_lat();
  void set_has_lon();
  void clear_has_lon();
  void set_has_phone();
  void clear_has_phone();
  void set_has_address();
  void clear_has_address();
  void set_has_schedule();
  void clear_has_schedule();
  void set_has_georegid();
  void clear_has_georegid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr schedule_;
  float lat_;
  float lon_;
  ::google::protobuf::int32 georegid_;
  friend struct protobuf_advert_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdvertAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.advert.AdvertAddress) */ {
 public:
  AdvertAddress();
  virtual ~AdvertAddress();

  AdvertAddress(const AdvertAddress& from);

  inline AdvertAddress& operator=(const AdvertAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdvertAddress(AdvertAddress&& from) noexcept
    : AdvertAddress() {
    *this = ::std::move(from);
  }

  inline AdvertAddress& operator=(AdvertAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvertAddress& default_instance();

  static inline const AdvertAddress* internal_default_instance() {
    return reinterpret_cast<const AdvertAddress*>(
               &_AdvertAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AdvertAddress* other);
  friend void swap(AdvertAddress& a, AdvertAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdvertAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  AdvertAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AdvertAddress& from);
  void MergeFrom(const AdvertAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AdvertAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.advert.Address address = 2;
  int address_size() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::ru::mail::go::advert::Address& address(int index) const;
  ::ru::mail::go::advert::Address* mutable_address(int index);
  ::ru::mail::go::advert::Address* add_address();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::advert::Address >*
      mutable_address();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::advert::Address >&
      address() const;

  // optional string apiResponse = 3;
  bool has_apiresponse() const;
  void clear_apiresponse();
  static const int kApiResponseFieldNumber = 3;
  const ::std::string& apiresponse() const;
  void set_apiresponse(const ::std::string& value);
  #if LANG_CXX11
  void set_apiresponse(::std::string&& value);
  #endif
  void set_apiresponse(const char* value);
  void set_apiresponse(const char* value, size_t size);
  ::std::string* mutable_apiresponse();
  ::std::string* release_apiresponse();
  void set_allocated_apiresponse(::std::string* apiresponse);

  // required uint64 ts = 1;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::google::protobuf::uint64 ts() const;
  void set_ts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.advert.AdvertAddress)
 private:
  void set_has_ts();
  void clear_has_ts();
  void set_has_apiresponse();
  void clear_has_apiresponse();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::advert::Address > address_;
  ::google::protobuf::internal::ArenaStringPtr apiresponse_;
  ::google::protobuf::uint64 ts_;
  friend struct protobuf_advert_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RichSitelink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.advert.RichSitelink) */ {
 public:
  RichSitelink();
  virtual ~RichSitelink();

  RichSitelink(const RichSitelink& from);

  inline RichSitelink& operator=(const RichSitelink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RichSitelink(RichSitelink&& from) noexcept
    : RichSitelink() {
    *this = ::std::move(from);
  }

  inline RichSitelink& operator=(RichSitelink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RichSitelink& default_instance();

  static inline const RichSitelink* internal_default_instance() {
    return reinterpret_cast<const RichSitelink*>(
               &_RichSitelink_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RichSitelink* other);
  friend void swap(RichSitelink& a, RichSitelink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RichSitelink* New() const PROTOBUF_FINAL { return New(NULL); }

  RichSitelink* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RichSitelink& from);
  void MergeFrom(const RichSitelink& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RichSitelink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string snippet = 3;
  bool has_snippet() const;
  void clear_snippet();
  static const int kSnippetFieldNumber = 3;
  const ::std::string& snippet() const;
  void set_snippet(const ::std::string& value);
  #if LANG_CXX11
  void set_snippet(::std::string&& value);
  #endif
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  ::std::string* mutable_snippet();
  ::std::string* release_snippet();
  void set_allocated_snippet(::std::string* snippet);

  // @@protoc_insertion_point(class_scope:ru.mail.go.advert.RichSitelink)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_title();
  void clear_has_title();
  void set_has_snippet();
  void clear_has_snippet();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr snippet_;
  friend struct protobuf_advert_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RichSitelinks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.advert.RichSitelinks) */ {
 public:
  RichSitelinks();
  virtual ~RichSitelinks();

  RichSitelinks(const RichSitelinks& from);

  inline RichSitelinks& operator=(const RichSitelinks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RichSitelinks(RichSitelinks&& from) noexcept
    : RichSitelinks() {
    *this = ::std::move(from);
  }

  inline RichSitelinks& operator=(RichSitelinks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RichSitelinks& default_instance();

  static inline const RichSitelinks* internal_default_instance() {
    return reinterpret_cast<const RichSitelinks*>(
               &_RichSitelinks_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RichSitelinks* other);
  friend void swap(RichSitelinks& a, RichSitelinks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RichSitelinks* New() const PROTOBUF_FINAL { return New(NULL); }

  RichSitelinks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RichSitelinks& from);
  void MergeFrom(const RichSitelinks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RichSitelinks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.advert.RichSitelink link = 2;
  int link_size() const;
  void clear_link();
  static const int kLinkFieldNumber = 2;
  const ::ru::mail::go::advert::RichSitelink& link(int index) const;
  ::ru::mail::go::advert::RichSitelink* mutable_link(int index);
  ::ru::mail::go::advert::RichSitelink* add_link();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::advert::RichSitelink >*
      mutable_link();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::advert::RichSitelink >&
      link() const;

  // required uint64 ts = 1;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 1;
  ::google::protobuf::uint64 ts() const;
  void set_ts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.advert.RichSitelinks)
 private:
  void set_has_ts();
  void clear_has_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::advert::RichSitelink > link_;
  ::google::protobuf::uint64 ts_;
  friend struct protobuf_advert_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Address

// required float lat = 1;
inline bool Address::has_lat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Address::set_has_lat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Address::clear_has_lat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Address::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline float Address::lat() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.Address.lat)
  return lat_;
}
inline void Address::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.Address.lat)
}

// required float lon = 2;
inline bool Address::has_lon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Address::set_has_lon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Address::clear_has_lon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Address::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline float Address::lon() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.Address.lon)
  return lon_;
}
inline void Address::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.Address.lon)
}

// required string phone = 3;
inline bool Address::has_phone() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Address::set_has_phone() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Address::clear_has_phone() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Address::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
inline const ::std::string& Address::phone() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.Address.phone)
  return phone_.GetNoArena();
}
inline void Address::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.Address.phone)
}
#if LANG_CXX11
inline void Address::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.advert.Address.phone)
}
#endif
inline void Address::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.advert.Address.phone)
}
inline void Address::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.advert.Address.phone)
}
inline ::std::string* Address::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.advert.Address.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_phone() {
  // @@protoc_insertion_point(field_release:ru.mail.go.advert.Address.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.advert.Address.phone)
}

// required string address = 4;
inline bool Address::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Address::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Address::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Address::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Address::address() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.Address.address)
  return address_.GetNoArena();
}
inline void Address::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.Address.address)
}
#if LANG_CXX11
inline void Address::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.advert.Address.address)
}
#endif
inline void Address::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.advert.Address.address)
}
inline void Address::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.advert.Address.address)
}
inline ::std::string* Address::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.advert.Address.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_address() {
  // @@protoc_insertion_point(field_release:ru.mail.go.advert.Address.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.advert.Address.address)
}

// optional string schedule = 5;
inline bool Address::has_schedule() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Address::set_has_schedule() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Address::clear_has_schedule() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Address::clear_schedule() {
  schedule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schedule();
}
inline const ::std::string& Address::schedule() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.Address.schedule)
  return schedule_.GetNoArena();
}
inline void Address::set_schedule(const ::std::string& value) {
  set_has_schedule();
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.Address.schedule)
}
#if LANG_CXX11
inline void Address::set_schedule(::std::string&& value) {
  set_has_schedule();
  schedule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.advert.Address.schedule)
}
#endif
inline void Address::set_schedule(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_schedule();
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.advert.Address.schedule)
}
inline void Address::set_schedule(const char* value, size_t size) {
  set_has_schedule();
  schedule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.advert.Address.schedule)
}
inline ::std::string* Address::mutable_schedule() {
  set_has_schedule();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.advert.Address.schedule)
  return schedule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Address::release_schedule() {
  // @@protoc_insertion_point(field_release:ru.mail.go.advert.Address.schedule)
  clear_has_schedule();
  return schedule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_schedule(::std::string* schedule) {
  if (schedule != NULL) {
    set_has_schedule();
  } else {
    clear_has_schedule();
  }
  schedule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schedule);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.advert.Address.schedule)
}

// optional int32 georegid = 6;
inline bool Address::has_georegid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Address::set_has_georegid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Address::clear_has_georegid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Address::clear_georegid() {
  georegid_ = 0;
  clear_has_georegid();
}
inline ::google::protobuf::int32 Address::georegid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.Address.georegid)
  return georegid_;
}
inline void Address::set_georegid(::google::protobuf::int32 value) {
  set_has_georegid();
  georegid_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.Address.georegid)
}

// -------------------------------------------------------------------

// AdvertAddress

// required uint64 ts = 1;
inline bool AdvertAddress::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdvertAddress::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdvertAddress::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdvertAddress::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
inline ::google::protobuf::uint64 AdvertAddress::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.AdvertAddress.ts)
  return ts_;
}
inline void AdvertAddress::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.AdvertAddress.ts)
}

// repeated .ru.mail.go.advert.Address address = 2;
inline int AdvertAddress::address_size() const {
  return address_.size();
}
inline void AdvertAddress::clear_address() {
  address_.Clear();
}
inline const ::ru::mail::go::advert::Address& AdvertAddress::address(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.AdvertAddress.address)
  return address_.Get(index);
}
inline ::ru::mail::go::advert::Address* AdvertAddress::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.advert.AdvertAddress.address)
  return address_.Mutable(index);
}
inline ::ru::mail::go::advert::Address* AdvertAddress::add_address() {
  // @@protoc_insertion_point(field_add:ru.mail.go.advert.AdvertAddress.address)
  return address_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::advert::Address >*
AdvertAddress::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.advert.AdvertAddress.address)
  return &address_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::advert::Address >&
AdvertAddress::address() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.advert.AdvertAddress.address)
  return address_;
}

// optional string apiResponse = 3;
inline bool AdvertAddress::has_apiresponse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdvertAddress::set_has_apiresponse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdvertAddress::clear_has_apiresponse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdvertAddress::clear_apiresponse() {
  apiresponse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_apiresponse();
}
inline const ::std::string& AdvertAddress::apiresponse() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.AdvertAddress.apiResponse)
  return apiresponse_.GetNoArena();
}
inline void AdvertAddress::set_apiresponse(const ::std::string& value) {
  set_has_apiresponse();
  apiresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.AdvertAddress.apiResponse)
}
#if LANG_CXX11
inline void AdvertAddress::set_apiresponse(::std::string&& value) {
  set_has_apiresponse();
  apiresponse_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.advert.AdvertAddress.apiResponse)
}
#endif
inline void AdvertAddress::set_apiresponse(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_apiresponse();
  apiresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.advert.AdvertAddress.apiResponse)
}
inline void AdvertAddress::set_apiresponse(const char* value, size_t size) {
  set_has_apiresponse();
  apiresponse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.advert.AdvertAddress.apiResponse)
}
inline ::std::string* AdvertAddress::mutable_apiresponse() {
  set_has_apiresponse();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.advert.AdvertAddress.apiResponse)
  return apiresponse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdvertAddress::release_apiresponse() {
  // @@protoc_insertion_point(field_release:ru.mail.go.advert.AdvertAddress.apiResponse)
  clear_has_apiresponse();
  return apiresponse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdvertAddress::set_allocated_apiresponse(::std::string* apiresponse) {
  if (apiresponse != NULL) {
    set_has_apiresponse();
  } else {
    clear_has_apiresponse();
  }
  apiresponse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apiresponse);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.advert.AdvertAddress.apiResponse)
}

// -------------------------------------------------------------------

// RichSitelink

// required string url = 1;
inline bool RichSitelink::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RichSitelink::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RichSitelink::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RichSitelink::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& RichSitelink::url() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.RichSitelink.url)
  return url_.GetNoArena();
}
inline void RichSitelink::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.RichSitelink.url)
}
#if LANG_CXX11
inline void RichSitelink::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.advert.RichSitelink.url)
}
#endif
inline void RichSitelink::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.advert.RichSitelink.url)
}
inline void RichSitelink::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.advert.RichSitelink.url)
}
inline ::std::string* RichSitelink::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.advert.RichSitelink.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RichSitelink::release_url() {
  // @@protoc_insertion_point(field_release:ru.mail.go.advert.RichSitelink.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RichSitelink::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.advert.RichSitelink.url)
}

// required string title = 2;
inline bool RichSitelink::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RichSitelink::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RichSitelink::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RichSitelink::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& RichSitelink::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.RichSitelink.title)
  return title_.GetNoArena();
}
inline void RichSitelink::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.RichSitelink.title)
}
#if LANG_CXX11
inline void RichSitelink::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.advert.RichSitelink.title)
}
#endif
inline void RichSitelink::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.advert.RichSitelink.title)
}
inline void RichSitelink::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.advert.RichSitelink.title)
}
inline ::std::string* RichSitelink::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.advert.RichSitelink.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RichSitelink::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.advert.RichSitelink.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RichSitelink::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.advert.RichSitelink.title)
}

// required string snippet = 3;
inline bool RichSitelink::has_snippet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RichSitelink::set_has_snippet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RichSitelink::clear_has_snippet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RichSitelink::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snippet();
}
inline const ::std::string& RichSitelink::snippet() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.RichSitelink.snippet)
  return snippet_.GetNoArena();
}
inline void RichSitelink::set_snippet(const ::std::string& value) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.RichSitelink.snippet)
}
#if LANG_CXX11
inline void RichSitelink::set_snippet(::std::string&& value) {
  set_has_snippet();
  snippet_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.advert.RichSitelink.snippet)
}
#endif
inline void RichSitelink::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.advert.RichSitelink.snippet)
}
inline void RichSitelink::set_snippet(const char* value, size_t size) {
  set_has_snippet();
  snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.advert.RichSitelink.snippet)
}
inline ::std::string* RichSitelink::mutable_snippet() {
  set_has_snippet();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.advert.RichSitelink.snippet)
  return snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RichSitelink::release_snippet() {
  // @@protoc_insertion_point(field_release:ru.mail.go.advert.RichSitelink.snippet)
  clear_has_snippet();
  return snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RichSitelink::set_allocated_snippet(::std::string* snippet) {
  if (snippet != NULL) {
    set_has_snippet();
  } else {
    clear_has_snippet();
  }
  snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.advert.RichSitelink.snippet)
}

// -------------------------------------------------------------------

// RichSitelinks

// required uint64 ts = 1;
inline bool RichSitelinks::has_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RichSitelinks::set_has_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RichSitelinks::clear_has_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RichSitelinks::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
inline ::google::protobuf::uint64 RichSitelinks::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.RichSitelinks.ts)
  return ts_;
}
inline void RichSitelinks::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.advert.RichSitelinks.ts)
}

// repeated .ru.mail.go.advert.RichSitelink link = 2;
inline int RichSitelinks::link_size() const {
  return link_.size();
}
inline void RichSitelinks::clear_link() {
  link_.Clear();
}
inline const ::ru::mail::go::advert::RichSitelink& RichSitelinks::link(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.advert.RichSitelinks.link)
  return link_.Get(index);
}
inline ::ru::mail::go::advert::RichSitelink* RichSitelinks::mutable_link(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.advert.RichSitelinks.link)
  return link_.Mutable(index);
}
inline ::ru::mail::go::advert::RichSitelink* RichSitelinks::add_link() {
  // @@protoc_insertion_point(field_add:ru.mail.go.advert.RichSitelinks.link)
  return link_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::advert::RichSitelink >*
RichSitelinks::mutable_link() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.advert.RichSitelinks.link)
  return &link_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::advert::RichSitelink >&
RichSitelinks::link() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.advert.RichSitelinks.link)
  return link_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace advert
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_advert_2eproto__INCLUDED
