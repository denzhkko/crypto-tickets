// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afisha_additive_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "afisha_additive_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace afisha {
namespace request {
class QueryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryInfo>
     _instance;
} _QueryInfo_default_instance_;

namespace protobuf_afisha_5fadditive_5frequest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, utf8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, health_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, discovery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, selected_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, cinema_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, movie_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, movie_country_rb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, movie_year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, rb_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, rb_city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, user_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, cinemas_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, movies_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, days_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryInfo, allowed_next_day_hours_),
  17,
  0,
  1,
  2,
  3,
  5,
  6,
  7,
  ~0u,
  8,
  9,
  10,
  11,
  12,
  4,
  13,
  14,
  15,
  16,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(QueryInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "afisha_additive_request.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::afisha::storage::protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  QueryInfo::_default_version_.DefaultConstruct();
  *QueryInfo::_default_version_.get_mutable() = ::std::string("1", 1);
  ::google::protobuf::internal::OnShutdownDestroyString(
      QueryInfo::_default_version_.get_mutable());
  _QueryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryInfo_default_instance_);_QueryInfo_default_instance_._instance.get_mutable()->user_location_ = const_cast< ::afisha::storage::GpsInfo*>(
      ::afisha::storage::GpsInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035afisha_additive_request.proto\022\016afisha."
      "request\032\035afisha_additive_storage.proto\"\262"
      "\003\n\tQueryInfo\022\022\n\004utf8\030\001 \001(\010:\004true\022\013\n\003qid\030"
      "\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\r\n\005query\030\004 \001(\t\022\022\n\007vers"
      "ion\030\005 \001(\t:\0011\022\033\n\014health_check\030\006 \001(\010:\005fals"
      "e\022\030\n\tdiscovery\030\007 \001(\010:\005false\022\027\n\014selected_"
      "day\030\010 \001(\r:\0010\022\022\n\ncinema_ids\030\t \003(\004\022\020\n\010movi"
      "e_id\030\n \001(\004\022\030\n\020movie_country_rb\030\013 \001(\r\022\022\n\n"
      "movie_year\030\014 \001(\r\022\017\n\007rb_code\030\r \001(\r\022\017\n\007rb_"
      "city\030\016 \001(\r\022.\n\ruser_location\030\017 \001(\0132\027.afis"
      "ha.storage.GpsInfo\022\025\n\rcinemas_limit\030\020 \001("
      "\r\022\024\n\014movies_limit\030\021 \001(\r\022\022\n\ndays_limit\030\022 "
      "\001(\r\022\036\n\026allowed_next_day_hours\030\023 \001(\r*r\n\tQ"
      "ueryType\022\r\n\tUNDEFINED\020\000\022\024\n\020CINEMA_AND_MO"
      "VIE\020\001\022\017\n\013CINEMA_ONLY\020\002\022\016\n\nMOVIE_ONLY\020\003\022\r"
      "\n\tDISCOVERY\020\004\022\020\n\014HEALTH_CHECK\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 631);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "afisha_additive_request.proto", &protobuf_RegisterTypes);
  ::afisha::storage::protobuf_afisha_5fadditive_5fstorage_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_afisha_5fadditive_5frequest_2eproto

const ::google::protobuf::EnumDescriptor* QueryType_descriptor() {
  protobuf_afisha_5fadditive_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5frequest_2eproto::file_level_enum_descriptors[0];
}
bool QueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> QueryInfo::_default_version_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryInfo::kUtf8FieldNumber;
const int QueryInfo::kQidFieldNumber;
const int QueryInfo::kIpFieldNumber;
const int QueryInfo::kQueryFieldNumber;
const int QueryInfo::kVersionFieldNumber;
const int QueryInfo::kHealthCheckFieldNumber;
const int QueryInfo::kDiscoveryFieldNumber;
const int QueryInfo::kSelectedDayFieldNumber;
const int QueryInfo::kCinemaIdsFieldNumber;
const int QueryInfo::kMovieIdFieldNumber;
const int QueryInfo::kMovieCountryRbFieldNumber;
const int QueryInfo::kMovieYearFieldNumber;
const int QueryInfo::kRbCodeFieldNumber;
const int QueryInfo::kRbCityFieldNumber;
const int QueryInfo::kUserLocationFieldNumber;
const int QueryInfo::kCinemasLimitFieldNumber;
const int QueryInfo::kMoviesLimitFieldNumber;
const int QueryInfo::kDaysLimitFieldNumber;
const int QueryInfo::kAllowedNextDayHoursFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryInfo::QueryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_afisha_5fadditive_5frequest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:afisha.request.QueryInfo)
}
QueryInfo::QueryInfo(const QueryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cinema_ids_(from.cinema_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qid()) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  version_.UnsafeSetDefault(&QueryInfo::_default_version_.get());
  if (from.has_version()) {
    version_.AssignWithDefault(&QueryInfo::_default_version_.get(), from.version_);
  }
  if (from.has_user_location()) {
    user_location_ = new ::afisha::storage::GpsInfo(*from.user_location_);
  } else {
    user_location_ = NULL;
  }
  ::memcpy(&health_check_, &from.health_check_,
    static_cast<size_t>(reinterpret_cast<char*>(&utf8_) -
    reinterpret_cast<char*>(&health_check_)) + sizeof(utf8_));
  // @@protoc_insertion_point(copy_constructor:afisha.request.QueryInfo)
}

void QueryInfo::SharedCtor() {
  _cached_size_ = 0;
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&QueryInfo::_default_version_.get());
  ::memset(&user_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowed_next_day_hours_) -
      reinterpret_cast<char*>(&user_location_)) + sizeof(allowed_next_day_hours_));
  utf8_ = true;
}

QueryInfo::~QueryInfo() {
  // @@protoc_insertion_point(destructor:afisha.request.QueryInfo)
  SharedDtor();
}

void QueryInfo::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&QueryInfo::_default_version_.get());
  if (this != internal_default_instance()) delete user_location_;
}

void QueryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryInfo::descriptor() {
  protobuf_afisha_5fadditive_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryInfo& QueryInfo::default_instance() {
  protobuf_afisha_5fadditive_5frequest_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryInfo* QueryInfo::New(::google::protobuf::Arena* arena) const {
  QueryInfo* n = new QueryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afisha.request.QueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cinema_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!qid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!query_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!version_.IsDefault(&QueryInfo::_default_version_.get()));
      (*version_.UnsafeRawStringPointer())->assign(*&QueryInfo::_default_version_.get());
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(user_location_ != NULL);
      user_location_->::afisha::storage::GpsInfo::Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&health_check_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_day_) -
        reinterpret_cast<char*>(&health_check_)) + sizeof(selected_day_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&movie_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&days_limit_) -
        reinterpret_cast<char*>(&movie_id_)) + sizeof(days_limit_));
  }
  if (cached_has_bits & 196608u) {
    allowed_next_day_hours_ = 0u;
    utf8_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:afisha.request.QueryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool utf8 = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_utf8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &utf8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string qid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.request.QueryInfo.qid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.request.QueryInfo.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.request.QueryInfo.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 5 [default = "1"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.request.QueryInfo.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool health_check = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_health_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &health_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool discovery = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_discovery();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discovery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 selected_day = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_selected_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 cinema_ids = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72u, input, this->mutable_cinema_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cinema_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 movie_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_movie_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &movie_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 movie_country_rb = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_movie_country_rb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movie_country_rb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 movie_year = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_movie_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movie_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rb_code = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_rb_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rb_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rb_city = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_rb_city();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rb_city_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .afisha.storage.GpsInfo user_location = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cinemas_limit = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_cinemas_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cinemas_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 movies_limit = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_movies_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movies_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 days_limit = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_days_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 allowed_next_day_hours = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_allowed_next_day_hours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allowed_next_day_hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:afisha.request.QueryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:afisha.request.QueryInfo)
  return false;
#undef DO_
}

void QueryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:afisha.request.QueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool utf8 = 1 [default = true];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->utf8(), output);
  }

  // optional string qid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.request.QueryInfo.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->qid(), output);
  }

  // optional string ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.request.QueryInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional string query = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.request.QueryInfo.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->query(), output);
  }

  // optional string version = 5 [default = "1"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.request.QueryInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  // optional bool health_check = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->health_check(), output);
  }

  // optional bool discovery = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->discovery(), output);
  }

  // optional uint32 selected_day = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->selected_day(), output);
  }

  // repeated uint64 cinema_ids = 9;
  for (int i = 0, n = this->cinema_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      9, this->cinema_ids(i), output);
  }

  // optional uint64 movie_id = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->movie_id(), output);
  }

  // optional uint32 movie_country_rb = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->movie_country_rb(), output);
  }

  // optional uint32 movie_year = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->movie_year(), output);
  }

  // optional uint32 rb_code = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->rb_code(), output);
  }

  // optional uint32 rb_city = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->rb_city(), output);
  }

  // optional .afisha.storage.GpsInfo user_location = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->user_location_, output);
  }

  // optional uint32 cinemas_limit = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->cinemas_limit(), output);
  }

  // optional uint32 movies_limit = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->movies_limit(), output);
  }

  // optional uint32 days_limit = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->days_limit(), output);
  }

  // optional uint32 allowed_next_day_hours = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->allowed_next_day_hours(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:afisha.request.QueryInfo)
}

::google::protobuf::uint8* QueryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:afisha.request.QueryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool utf8 = 1 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->utf8(), target);
  }

  // optional string qid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.request.QueryInfo.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->qid(), target);
  }

  // optional string ip = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.request.QueryInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional string query = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.request.QueryInfo.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->query(), target);
  }

  // optional string version = 5 [default = "1"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.request.QueryInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // optional bool health_check = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->health_check(), target);
  }

  // optional bool discovery = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->discovery(), target);
  }

  // optional uint32 selected_day = 8 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->selected_day(), target);
  }

  // repeated uint64 cinema_ids = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(9, this->cinema_ids_, target);

  // optional uint64 movie_id = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->movie_id(), target);
  }

  // optional uint32 movie_country_rb = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->movie_country_rb(), target);
  }

  // optional uint32 movie_year = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->movie_year(), target);
  }

  // optional uint32 rb_code = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->rb_code(), target);
  }

  // optional uint32 rb_city = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->rb_city(), target);
  }

  // optional .afisha.storage.GpsInfo user_location = 15;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->user_location_, deterministic, target);
  }

  // optional uint32 cinemas_limit = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->cinemas_limit(), target);
  }

  // optional uint32 movies_limit = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->movies_limit(), target);
  }

  // optional uint32 days_limit = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->days_limit(), target);
  }

  // optional uint32 allowed_next_day_hours = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->allowed_next_day_hours(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afisha.request.QueryInfo)
  return target;
}

size_t QueryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afisha.request.QueryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 cinema_ids = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->cinema_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cinema_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string qid = 2;
    if (has_qid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string query = 4;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // optional string version = 5 [default = "1"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .afisha.storage.GpsInfo user_location = 15;
    if (has_user_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_location_);
    }

    // optional bool health_check = 6 [default = false];
    if (has_health_check()) {
      total_size += 1 + 1;
    }

    // optional bool discovery = 7 [default = false];
    if (has_discovery()) {
      total_size += 1 + 1;
    }

    // optional uint32 selected_day = 8 [default = 0];
    if (has_selected_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_day());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 movie_id = 10;
    if (has_movie_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->movie_id());
    }

    // optional uint32 movie_country_rb = 11;
    if (has_movie_country_rb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movie_country_rb());
    }

    // optional uint32 movie_year = 12;
    if (has_movie_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movie_year());
    }

    // optional uint32 rb_code = 13;
    if (has_rb_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rb_code());
    }

    // optional uint32 rb_city = 14;
    if (has_rb_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rb_city());
    }

    // optional uint32 cinemas_limit = 16;
    if (has_cinemas_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cinemas_limit());
    }

    // optional uint32 movies_limit = 17;
    if (has_movies_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movies_limit());
    }

    // optional uint32 days_limit = 18;
    if (has_days_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days_limit());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional uint32 allowed_next_day_hours = 19;
    if (has_allowed_next_day_hours()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allowed_next_day_hours());
    }

    // optional bool utf8 = 1 [default = true];
    if (has_utf8()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:afisha.request.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:afisha.request.QueryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:afisha.request.QueryInfo)
    MergeFrom(*source);
  }
}

void QueryInfo::MergeFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afisha.request.QueryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cinema_ids_.MergeFrom(from.cinema_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qid();
      qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_query();
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_version();
      version_.AssignWithDefault(&QueryInfo::_default_version_.get(), from.version_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_user_location()->::afisha::storage::GpsInfo::MergeFrom(from.user_location());
    }
    if (cached_has_bits & 0x00000020u) {
      health_check_ = from.health_check_;
    }
    if (cached_has_bits & 0x00000040u) {
      discovery_ = from.discovery_;
    }
    if (cached_has_bits & 0x00000080u) {
      selected_day_ = from.selected_day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      movie_id_ = from.movie_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      movie_country_rb_ = from.movie_country_rb_;
    }
    if (cached_has_bits & 0x00000400u) {
      movie_year_ = from.movie_year_;
    }
    if (cached_has_bits & 0x00000800u) {
      rb_code_ = from.rb_code_;
    }
    if (cached_has_bits & 0x00001000u) {
      rb_city_ = from.rb_city_;
    }
    if (cached_has_bits & 0x00002000u) {
      cinemas_limit_ = from.cinemas_limit_;
    }
    if (cached_has_bits & 0x00004000u) {
      movies_limit_ = from.movies_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      days_limit_ = from.days_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      allowed_next_day_hours_ = from.allowed_next_day_hours_;
    }
    if (cached_has_bits & 0x00020000u) {
      utf8_ = from.utf8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:afisha.request.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryInfo::CopyFrom(const QueryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afisha.request.QueryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryInfo::IsInitialized() const {
  if (has_user_location()) {
    if (!this->user_location_->IsInitialized()) return false;
  }
  return true;
}

void QueryInfo::Swap(QueryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryInfo::InternalSwap(QueryInfo* other) {
  using std::swap;
  cinema_ids_.InternalSwap(&other->cinema_ids_);
  qid_.Swap(&other->qid_);
  ip_.Swap(&other->ip_);
  query_.Swap(&other->query_);
  version_.Swap(&other->version_);
  swap(user_location_, other->user_location_);
  swap(health_check_, other->health_check_);
  swap(discovery_, other->discovery_);
  swap(selected_day_, other->selected_day_);
  swap(movie_id_, other->movie_id_);
  swap(movie_country_rb_, other->movie_country_rb_);
  swap(movie_year_, other->movie_year_);
  swap(rb_code_, other->rb_code_);
  swap(rb_city_, other->rb_city_);
  swap(cinemas_limit_, other->cinemas_limit_);
  swap(movies_limit_, other->movies_limit_);
  swap(days_limit_, other->days_limit_);
  swap(allowed_next_day_hours_, other->allowed_next_day_hours_);
  swap(utf8_, other->utf8_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryInfo::GetMetadata() const {
  protobuf_afisha_5fadditive_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryInfo

// optional bool utf8 = 1 [default = true];
bool QueryInfo::has_utf8() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void QueryInfo::set_has_utf8() {
  _has_bits_[0] |= 0x00020000u;
}
void QueryInfo::clear_has_utf8() {
  _has_bits_[0] &= ~0x00020000u;
}
void QueryInfo::clear_utf8() {
  utf8_ = true;
  clear_has_utf8();
}
bool QueryInfo::utf8() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.utf8)
  return utf8_;
}
void QueryInfo::set_utf8(bool value) {
  set_has_utf8();
  utf8_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.utf8)
}

// optional string qid = 2;
bool QueryInfo::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryInfo::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryInfo::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryInfo::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
const ::std::string& QueryInfo::qid() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.qid)
  return qid_.GetNoArena();
}
void QueryInfo::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.qid)
}
#if LANG_CXX11
void QueryInfo::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.request.QueryInfo.qid)
}
#endif
void QueryInfo::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.request.QueryInfo.qid)
}
void QueryInfo::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.request.QueryInfo.qid)
}
::std::string* QueryInfo::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:afisha.request.QueryInfo.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryInfo::release_qid() {
  // @@protoc_insertion_point(field_release:afisha.request.QueryInfo.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryInfo::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:afisha.request.QueryInfo.qid)
}

// optional string ip = 3;
bool QueryInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& QueryInfo::ip() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.ip)
  return ip_.GetNoArena();
}
void QueryInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.ip)
}
#if LANG_CXX11
void QueryInfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.request.QueryInfo.ip)
}
#endif
void QueryInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.request.QueryInfo.ip)
}
void QueryInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.request.QueryInfo.ip)
}
::std::string* QueryInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:afisha.request.QueryInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryInfo::release_ip() {
  // @@protoc_insertion_point(field_release:afisha.request.QueryInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:afisha.request.QueryInfo.ip)
}

// optional string query = 4;
bool QueryInfo::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryInfo::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryInfo::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryInfo::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
const ::std::string& QueryInfo::query() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.query)
  return query_.GetNoArena();
}
void QueryInfo::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.query)
}
#if LANG_CXX11
void QueryInfo::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.request.QueryInfo.query)
}
#endif
void QueryInfo::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.request.QueryInfo.query)
}
void QueryInfo::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.request.QueryInfo.query)
}
::std::string* QueryInfo::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:afisha.request.QueryInfo.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryInfo::release_query() {
  // @@protoc_insertion_point(field_release:afisha.request.QueryInfo.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryInfo::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:afisha.request.QueryInfo.query)
}

// optional string version = 5 [default = "1"];
bool QueryInfo::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryInfo::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryInfo::clear_version() {
  version_.ClearToDefaultNoArena(&QueryInfo::_default_version_.get());
  clear_has_version();
}
const ::std::string& QueryInfo::version() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.version)
  return version_.GetNoArena();
}
void QueryInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&QueryInfo::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.version)
}
#if LANG_CXX11
void QueryInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &QueryInfo::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.request.QueryInfo.version)
}
#endif
void QueryInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&QueryInfo::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.request.QueryInfo.version)
}
void QueryInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&QueryInfo::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.request.QueryInfo.version)
}
::std::string* QueryInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:afisha.request.QueryInfo.version)
  return version_.MutableNoArena(&QueryInfo::_default_version_.get());
}
::std::string* QueryInfo::release_version() {
  // @@protoc_insertion_point(field_release:afisha.request.QueryInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&QueryInfo::_default_version_.get());
}
void QueryInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&QueryInfo::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:afisha.request.QueryInfo.version)
}

// optional bool health_check = 6 [default = false];
bool QueryInfo::has_health_check() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void QueryInfo::set_has_health_check() {
  _has_bits_[0] |= 0x00000020u;
}
void QueryInfo::clear_has_health_check() {
  _has_bits_[0] &= ~0x00000020u;
}
void QueryInfo::clear_health_check() {
  health_check_ = false;
  clear_has_health_check();
}
bool QueryInfo::health_check() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.health_check)
  return health_check_;
}
void QueryInfo::set_health_check(bool value) {
  set_has_health_check();
  health_check_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.health_check)
}

// optional bool discovery = 7 [default = false];
bool QueryInfo::has_discovery() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void QueryInfo::set_has_discovery() {
  _has_bits_[0] |= 0x00000040u;
}
void QueryInfo::clear_has_discovery() {
  _has_bits_[0] &= ~0x00000040u;
}
void QueryInfo::clear_discovery() {
  discovery_ = false;
  clear_has_discovery();
}
bool QueryInfo::discovery() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.discovery)
  return discovery_;
}
void QueryInfo::set_discovery(bool value) {
  set_has_discovery();
  discovery_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.discovery)
}

// optional uint32 selected_day = 8 [default = 0];
bool QueryInfo::has_selected_day() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void QueryInfo::set_has_selected_day() {
  _has_bits_[0] |= 0x00000080u;
}
void QueryInfo::clear_has_selected_day() {
  _has_bits_[0] &= ~0x00000080u;
}
void QueryInfo::clear_selected_day() {
  selected_day_ = 0u;
  clear_has_selected_day();
}
::google::protobuf::uint32 QueryInfo::selected_day() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.selected_day)
  return selected_day_;
}
void QueryInfo::set_selected_day(::google::protobuf::uint32 value) {
  set_has_selected_day();
  selected_day_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.selected_day)
}

// repeated uint64 cinema_ids = 9;
int QueryInfo::cinema_ids_size() const {
  return cinema_ids_.size();
}
void QueryInfo::clear_cinema_ids() {
  cinema_ids_.Clear();
}
::google::protobuf::uint64 QueryInfo::cinema_ids(int index) const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.cinema_ids)
  return cinema_ids_.Get(index);
}
void QueryInfo::set_cinema_ids(int index, ::google::protobuf::uint64 value) {
  cinema_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.cinema_ids)
}
void QueryInfo::add_cinema_ids(::google::protobuf::uint64 value) {
  cinema_ids_.Add(value);
  // @@protoc_insertion_point(field_add:afisha.request.QueryInfo.cinema_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
QueryInfo::cinema_ids() const {
  // @@protoc_insertion_point(field_list:afisha.request.QueryInfo.cinema_ids)
  return cinema_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
QueryInfo::mutable_cinema_ids() {
  // @@protoc_insertion_point(field_mutable_list:afisha.request.QueryInfo.cinema_ids)
  return &cinema_ids_;
}

// optional uint64 movie_id = 10;
bool QueryInfo::has_movie_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void QueryInfo::set_has_movie_id() {
  _has_bits_[0] |= 0x00000100u;
}
void QueryInfo::clear_has_movie_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void QueryInfo::clear_movie_id() {
  movie_id_ = GOOGLE_ULONGLONG(0);
  clear_has_movie_id();
}
::google::protobuf::uint64 QueryInfo::movie_id() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.movie_id)
  return movie_id_;
}
void QueryInfo::set_movie_id(::google::protobuf::uint64 value) {
  set_has_movie_id();
  movie_id_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.movie_id)
}

// optional uint32 movie_country_rb = 11;
bool QueryInfo::has_movie_country_rb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void QueryInfo::set_has_movie_country_rb() {
  _has_bits_[0] |= 0x00000200u;
}
void QueryInfo::clear_has_movie_country_rb() {
  _has_bits_[0] &= ~0x00000200u;
}
void QueryInfo::clear_movie_country_rb() {
  movie_country_rb_ = 0u;
  clear_has_movie_country_rb();
}
::google::protobuf::uint32 QueryInfo::movie_country_rb() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.movie_country_rb)
  return movie_country_rb_;
}
void QueryInfo::set_movie_country_rb(::google::protobuf::uint32 value) {
  set_has_movie_country_rb();
  movie_country_rb_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.movie_country_rb)
}

// optional uint32 movie_year = 12;
bool QueryInfo::has_movie_year() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void QueryInfo::set_has_movie_year() {
  _has_bits_[0] |= 0x00000400u;
}
void QueryInfo::clear_has_movie_year() {
  _has_bits_[0] &= ~0x00000400u;
}
void QueryInfo::clear_movie_year() {
  movie_year_ = 0u;
  clear_has_movie_year();
}
::google::protobuf::uint32 QueryInfo::movie_year() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.movie_year)
  return movie_year_;
}
void QueryInfo::set_movie_year(::google::protobuf::uint32 value) {
  set_has_movie_year();
  movie_year_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.movie_year)
}

// optional uint32 rb_code = 13;
bool QueryInfo::has_rb_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void QueryInfo::set_has_rb_code() {
  _has_bits_[0] |= 0x00000800u;
}
void QueryInfo::clear_has_rb_code() {
  _has_bits_[0] &= ~0x00000800u;
}
void QueryInfo::clear_rb_code() {
  rb_code_ = 0u;
  clear_has_rb_code();
}
::google::protobuf::uint32 QueryInfo::rb_code() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.rb_code)
  return rb_code_;
}
void QueryInfo::set_rb_code(::google::protobuf::uint32 value) {
  set_has_rb_code();
  rb_code_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.rb_code)
}

// optional uint32 rb_city = 14;
bool QueryInfo::has_rb_city() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void QueryInfo::set_has_rb_city() {
  _has_bits_[0] |= 0x00001000u;
}
void QueryInfo::clear_has_rb_city() {
  _has_bits_[0] &= ~0x00001000u;
}
void QueryInfo::clear_rb_city() {
  rb_city_ = 0u;
  clear_has_rb_city();
}
::google::protobuf::uint32 QueryInfo::rb_city() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.rb_city)
  return rb_city_;
}
void QueryInfo::set_rb_city(::google::protobuf::uint32 value) {
  set_has_rb_city();
  rb_city_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.rb_city)
}

// optional .afisha.storage.GpsInfo user_location = 15;
bool QueryInfo::has_user_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void QueryInfo::set_has_user_location() {
  _has_bits_[0] |= 0x00000010u;
}
void QueryInfo::clear_has_user_location() {
  _has_bits_[0] &= ~0x00000010u;
}
void QueryInfo::clear_user_location() {
  if (user_location_ != NULL) user_location_->::afisha::storage::GpsInfo::Clear();
  clear_has_user_location();
}
const ::afisha::storage::GpsInfo& QueryInfo::user_location() const {
  const ::afisha::storage::GpsInfo* p = user_location_;
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.user_location)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::GpsInfo*>(
      &::afisha::storage::_GpsInfo_default_instance_);
}
::afisha::storage::GpsInfo* QueryInfo::mutable_user_location() {
  set_has_user_location();
  if (user_location_ == NULL) {
    user_location_ = new ::afisha::storage::GpsInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.request.QueryInfo.user_location)
  return user_location_;
}
::afisha::storage::GpsInfo* QueryInfo::release_user_location() {
  // @@protoc_insertion_point(field_release:afisha.request.QueryInfo.user_location)
  clear_has_user_location();
  ::afisha::storage::GpsInfo* temp = user_location_;
  user_location_ = NULL;
  return temp;
}
void QueryInfo::set_allocated_user_location(::afisha::storage::GpsInfo* user_location) {
  delete user_location_;
  user_location_ = user_location;
  if (user_location) {
    set_has_user_location();
  } else {
    clear_has_user_location();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.request.QueryInfo.user_location)
}

// optional uint32 cinemas_limit = 16;
bool QueryInfo::has_cinemas_limit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void QueryInfo::set_has_cinemas_limit() {
  _has_bits_[0] |= 0x00002000u;
}
void QueryInfo::clear_has_cinemas_limit() {
  _has_bits_[0] &= ~0x00002000u;
}
void QueryInfo::clear_cinemas_limit() {
  cinemas_limit_ = 0u;
  clear_has_cinemas_limit();
}
::google::protobuf::uint32 QueryInfo::cinemas_limit() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.cinemas_limit)
  return cinemas_limit_;
}
void QueryInfo::set_cinemas_limit(::google::protobuf::uint32 value) {
  set_has_cinemas_limit();
  cinemas_limit_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.cinemas_limit)
}

// optional uint32 movies_limit = 17;
bool QueryInfo::has_movies_limit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void QueryInfo::set_has_movies_limit() {
  _has_bits_[0] |= 0x00004000u;
}
void QueryInfo::clear_has_movies_limit() {
  _has_bits_[0] &= ~0x00004000u;
}
void QueryInfo::clear_movies_limit() {
  movies_limit_ = 0u;
  clear_has_movies_limit();
}
::google::protobuf::uint32 QueryInfo::movies_limit() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.movies_limit)
  return movies_limit_;
}
void QueryInfo::set_movies_limit(::google::protobuf::uint32 value) {
  set_has_movies_limit();
  movies_limit_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.movies_limit)
}

// optional uint32 days_limit = 18;
bool QueryInfo::has_days_limit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void QueryInfo::set_has_days_limit() {
  _has_bits_[0] |= 0x00008000u;
}
void QueryInfo::clear_has_days_limit() {
  _has_bits_[0] &= ~0x00008000u;
}
void QueryInfo::clear_days_limit() {
  days_limit_ = 0u;
  clear_has_days_limit();
}
::google::protobuf::uint32 QueryInfo::days_limit() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.days_limit)
  return days_limit_;
}
void QueryInfo::set_days_limit(::google::protobuf::uint32 value) {
  set_has_days_limit();
  days_limit_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.days_limit)
}

// optional uint32 allowed_next_day_hours = 19;
bool QueryInfo::has_allowed_next_day_hours() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void QueryInfo::set_has_allowed_next_day_hours() {
  _has_bits_[0] |= 0x00010000u;
}
void QueryInfo::clear_has_allowed_next_day_hours() {
  _has_bits_[0] &= ~0x00010000u;
}
void QueryInfo::clear_allowed_next_day_hours() {
  allowed_next_day_hours_ = 0u;
  clear_has_allowed_next_day_hours();
}
::google::protobuf::uint32 QueryInfo::allowed_next_day_hours() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.allowed_next_day_hours)
  return allowed_next_day_hours_;
}
void QueryInfo::set_allowed_next_day_hours(::google::protobuf::uint32 value) {
  set_has_allowed_next_day_hours();
  allowed_next_day_hours_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.allowed_next_day_hours)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace afisha

// @@protoc_insertion_point(global_scope)
