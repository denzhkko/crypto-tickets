// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afisha_additive_request.proto

#ifndef PROTOBUF_afisha_5fadditive_5frequest_2eproto__INCLUDED
#define PROTOBUF_afisha_5fadditive_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "afisha_additive_storage.pb.h"
// @@protoc_insertion_point(includes)
namespace afisha {
namespace request {
class QueryInfo;
class QueryInfoDefaultTypeInternal;
extern QueryInfoDefaultTypeInternal _QueryInfo_default_instance_;
}  // namespace request
}  // namespace afisha

namespace afisha {
namespace request {

namespace protobuf_afisha_5fadditive_5frequest_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_afisha_5fadditive_5frequest_2eproto

enum QueryType {
  UNDEFINED = 0,
  CINEMA_AND_MOVIE = 1,
  CINEMA_ONLY = 2,
  MOVIE_ONLY = 3,
  DISCOVERY = 4,
  HEALTH_CHECK = 5
};
bool QueryType_IsValid(int value);
const QueryType QueryType_MIN = UNDEFINED;
const QueryType QueryType_MAX = HEALTH_CHECK;
const int QueryType_ARRAYSIZE = QueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryType_descriptor();
inline const ::std::string& QueryType_Name(QueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryType_descriptor(), value);
}
inline bool QueryType_Parse(
    const ::std::string& name, QueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryType>(
    QueryType_descriptor(), name, value);
}
// ===================================================================

class QueryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:afisha.request.QueryInfo) */ {
 public:
  QueryInfo();
  virtual ~QueryInfo();

  QueryInfo(const QueryInfo& from);

  inline QueryInfo& operator=(const QueryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryInfo(QueryInfo&& from) noexcept
    : QueryInfo() {
    *this = ::std::move(from);
  }

  inline QueryInfo& operator=(QueryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryInfo& default_instance();

  static inline const QueryInfo* internal_default_instance() {
    return reinterpret_cast<const QueryInfo*>(
               &_QueryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QueryInfo* other);
  friend void swap(QueryInfo& a, QueryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryInfo& from);
  void MergeFrom(const QueryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 cinema_ids = 9;
  int cinema_ids_size() const;
  void clear_cinema_ids();
  static const int kCinemaIdsFieldNumber = 9;
  ::google::protobuf::uint64 cinema_ids(int index) const;
  void set_cinema_ids(int index, ::google::protobuf::uint64 value);
  void add_cinema_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cinema_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cinema_ids();

  // optional string qid = 2;
  bool has_qid() const;
  void clear_qid();
  static const int kQidFieldNumber = 2;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // optional string ip = 3;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string query = 4;
  bool has_query() const;
  void clear_query();
  static const int kQueryFieldNumber = 4;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // optional string version = 5 [default = "1"];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .afisha.storage.GpsInfo user_location = 15;
  bool has_user_location() const;
  void clear_user_location();
  static const int kUserLocationFieldNumber = 15;
  const ::afisha::storage::GpsInfo& user_location() const;
  ::afisha::storage::GpsInfo* mutable_user_location();
  ::afisha::storage::GpsInfo* release_user_location();
  void set_allocated_user_location(::afisha::storage::GpsInfo* user_location);

  // optional bool health_check = 6 [default = false];
  bool has_health_check() const;
  void clear_health_check();
  static const int kHealthCheckFieldNumber = 6;
  bool health_check() const;
  void set_health_check(bool value);

  // optional bool discovery = 7 [default = false];
  bool has_discovery() const;
  void clear_discovery();
  static const int kDiscoveryFieldNumber = 7;
  bool discovery() const;
  void set_discovery(bool value);

  // optional uint32 selected_day = 8 [default = 0];
  bool has_selected_day() const;
  void clear_selected_day();
  static const int kSelectedDayFieldNumber = 8;
  ::google::protobuf::uint32 selected_day() const;
  void set_selected_day(::google::protobuf::uint32 value);

  // optional uint64 movie_id = 10;
  bool has_movie_id() const;
  void clear_movie_id();
  static const int kMovieIdFieldNumber = 10;
  ::google::protobuf::uint64 movie_id() const;
  void set_movie_id(::google::protobuf::uint64 value);

  // optional uint32 movie_country_rb = 11;
  bool has_movie_country_rb() const;
  void clear_movie_country_rb();
  static const int kMovieCountryRbFieldNumber = 11;
  ::google::protobuf::uint32 movie_country_rb() const;
  void set_movie_country_rb(::google::protobuf::uint32 value);

  // optional uint32 movie_year = 12;
  bool has_movie_year() const;
  void clear_movie_year();
  static const int kMovieYearFieldNumber = 12;
  ::google::protobuf::uint32 movie_year() const;
  void set_movie_year(::google::protobuf::uint32 value);

  // optional uint32 rb_code = 13;
  bool has_rb_code() const;
  void clear_rb_code();
  static const int kRbCodeFieldNumber = 13;
  ::google::protobuf::uint32 rb_code() const;
  void set_rb_code(::google::protobuf::uint32 value);

  // optional uint32 rb_city = 14;
  bool has_rb_city() const;
  void clear_rb_city();
  static const int kRbCityFieldNumber = 14;
  ::google::protobuf::uint32 rb_city() const;
  void set_rb_city(::google::protobuf::uint32 value);

  // optional uint32 cinemas_limit = 16;
  bool has_cinemas_limit() const;
  void clear_cinemas_limit();
  static const int kCinemasLimitFieldNumber = 16;
  ::google::protobuf::uint32 cinemas_limit() const;
  void set_cinemas_limit(::google::protobuf::uint32 value);

  // optional uint32 movies_limit = 17;
  bool has_movies_limit() const;
  void clear_movies_limit();
  static const int kMoviesLimitFieldNumber = 17;
  ::google::protobuf::uint32 movies_limit() const;
  void set_movies_limit(::google::protobuf::uint32 value);

  // optional uint32 days_limit = 18;
  bool has_days_limit() const;
  void clear_days_limit();
  static const int kDaysLimitFieldNumber = 18;
  ::google::protobuf::uint32 days_limit() const;
  void set_days_limit(::google::protobuf::uint32 value);

  // optional uint32 allowed_next_day_hours = 19;
  bool has_allowed_next_day_hours() const;
  void clear_allowed_next_day_hours();
  static const int kAllowedNextDayHoursFieldNumber = 19;
  ::google::protobuf::uint32 allowed_next_day_hours() const;
  void set_allowed_next_day_hours(::google::protobuf::uint32 value);

  // optional bool utf8 = 1 [default = true];
  bool has_utf8() const;
  void clear_utf8();
  static const int kUtf8FieldNumber = 1;
  bool utf8() const;
  void set_utf8(bool value);

  // @@protoc_insertion_point(class_scope:afisha.request.QueryInfo)
 private:
  void set_has_utf8();
  void clear_has_utf8();
  void set_has_qid();
  void clear_has_qid();
  void set_has_ip();
  void clear_has_ip();
  void set_has_query();
  void clear_has_query();
  void set_has_version();
  void clear_has_version();
  void set_has_health_check();
  void clear_has_health_check();
  void set_has_discovery();
  void clear_has_discovery();
  void set_has_selected_day();
  void clear_has_selected_day();
  void set_has_movie_id();
  void clear_has_movie_id();
  void set_has_movie_country_rb();
  void clear_has_movie_country_rb();
  void set_has_movie_year();
  void clear_has_movie_year();
  void set_has_rb_code();
  void clear_has_rb_code();
  void set_has_rb_city();
  void clear_has_rb_city();
  void set_has_user_location();
  void clear_has_user_location();
  void set_has_cinemas_limit();
  void clear_has_cinemas_limit();
  void set_has_movies_limit();
  void clear_has_movies_limit();
  void set_has_days_limit();
  void clear_has_days_limit();
  void set_has_allowed_next_day_hours();
  void clear_has_allowed_next_day_hours();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cinema_ids_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _default_version_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::afisha::storage::GpsInfo* user_location_;
  bool health_check_;
  bool discovery_;
  ::google::protobuf::uint32 selected_day_;
  ::google::protobuf::uint64 movie_id_;
  ::google::protobuf::uint32 movie_country_rb_;
  ::google::protobuf::uint32 movie_year_;
  ::google::protobuf::uint32 rb_code_;
  ::google::protobuf::uint32 rb_city_;
  ::google::protobuf::uint32 cinemas_limit_;
  ::google::protobuf::uint32 movies_limit_;
  ::google::protobuf::uint32 days_limit_;
  ::google::protobuf::uint32 allowed_next_day_hours_;
  bool utf8_;
  friend struct protobuf_afisha_5fadditive_5frequest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryInfo

// optional bool utf8 = 1 [default = true];
inline bool QueryInfo::has_utf8() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void QueryInfo::set_has_utf8() {
  _has_bits_[0] |= 0x00020000u;
}
inline void QueryInfo::clear_has_utf8() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void QueryInfo::clear_utf8() {
  utf8_ = true;
  clear_has_utf8();
}
inline bool QueryInfo::utf8() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.utf8)
  return utf8_;
}
inline void QueryInfo::set_utf8(bool value) {
  set_has_utf8();
  utf8_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.utf8)
}

// optional string qid = 2;
inline bool QueryInfo::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryInfo::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryInfo::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryInfo::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
inline const ::std::string& QueryInfo::qid() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.qid)
  return qid_.GetNoArena();
}
inline void QueryInfo::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.qid)
}
#if LANG_CXX11
inline void QueryInfo::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.request.QueryInfo.qid)
}
#endif
inline void QueryInfo::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.request.QueryInfo.qid)
}
inline void QueryInfo::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.request.QueryInfo.qid)
}
inline ::std::string* QueryInfo::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:afisha.request.QueryInfo.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryInfo::release_qid() {
  // @@protoc_insertion_point(field_release:afisha.request.QueryInfo.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryInfo::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:afisha.request.QueryInfo.qid)
}

// optional string ip = 3;
inline bool QueryInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& QueryInfo::ip() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.ip)
  return ip_.GetNoArena();
}
inline void QueryInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.ip)
}
#if LANG_CXX11
inline void QueryInfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.request.QueryInfo.ip)
}
#endif
inline void QueryInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.request.QueryInfo.ip)
}
inline void QueryInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.request.QueryInfo.ip)
}
inline ::std::string* QueryInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:afisha.request.QueryInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryInfo::release_ip() {
  // @@protoc_insertion_point(field_release:afisha.request.QueryInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:afisha.request.QueryInfo.ip)
}

// optional string query = 4;
inline bool QueryInfo::has_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryInfo::set_has_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryInfo::clear_has_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryInfo::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query();
}
inline const ::std::string& QueryInfo::query() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.query)
  return query_.GetNoArena();
}
inline void QueryInfo::set_query(const ::std::string& value) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.query)
}
#if LANG_CXX11
inline void QueryInfo::set_query(::std::string&& value) {
  set_has_query();
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.request.QueryInfo.query)
}
#endif
inline void QueryInfo::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.request.QueryInfo.query)
}
inline void QueryInfo::set_query(const char* value, size_t size) {
  set_has_query();
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.request.QueryInfo.query)
}
inline ::std::string* QueryInfo::mutable_query() {
  set_has_query();
  // @@protoc_insertion_point(field_mutable:afisha.request.QueryInfo.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryInfo::release_query() {
  // @@protoc_insertion_point(field_release:afisha.request.QueryInfo.query)
  clear_has_query();
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryInfo::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    set_has_query();
  } else {
    clear_has_query();
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:afisha.request.QueryInfo.query)
}

// optional string version = 5 [default = "1"];
inline bool QueryInfo::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryInfo::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryInfo::clear_version() {
  version_.ClearToDefaultNoArena(&QueryInfo::_default_version_.get());
  clear_has_version();
}
inline const ::std::string& QueryInfo::version() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.version)
  return version_.GetNoArena();
}
inline void QueryInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&QueryInfo::_default_version_.get(), value);
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.version)
}
#if LANG_CXX11
inline void QueryInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &QueryInfo::_default_version_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.request.QueryInfo.version)
}
#endif
inline void QueryInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&QueryInfo::_default_version_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.request.QueryInfo.version)
}
inline void QueryInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&QueryInfo::_default_version_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.request.QueryInfo.version)
}
inline ::std::string* QueryInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:afisha.request.QueryInfo.version)
  return version_.MutableNoArena(&QueryInfo::_default_version_.get());
}
inline ::std::string* QueryInfo::release_version() {
  // @@protoc_insertion_point(field_release:afisha.request.QueryInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&QueryInfo::_default_version_.get());
}
inline void QueryInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&QueryInfo::_default_version_.get(), version);
  // @@protoc_insertion_point(field_set_allocated:afisha.request.QueryInfo.version)
}

// optional bool health_check = 6 [default = false];
inline bool QueryInfo::has_health_check() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryInfo::set_has_health_check() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryInfo::clear_has_health_check() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryInfo::clear_health_check() {
  health_check_ = false;
  clear_has_health_check();
}
inline bool QueryInfo::health_check() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.health_check)
  return health_check_;
}
inline void QueryInfo::set_health_check(bool value) {
  set_has_health_check();
  health_check_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.health_check)
}

// optional bool discovery = 7 [default = false];
inline bool QueryInfo::has_discovery() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryInfo::set_has_discovery() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryInfo::clear_has_discovery() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryInfo::clear_discovery() {
  discovery_ = false;
  clear_has_discovery();
}
inline bool QueryInfo::discovery() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.discovery)
  return discovery_;
}
inline void QueryInfo::set_discovery(bool value) {
  set_has_discovery();
  discovery_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.discovery)
}

// optional uint32 selected_day = 8 [default = 0];
inline bool QueryInfo::has_selected_day() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QueryInfo::set_has_selected_day() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QueryInfo::clear_has_selected_day() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QueryInfo::clear_selected_day() {
  selected_day_ = 0u;
  clear_has_selected_day();
}
inline ::google::protobuf::uint32 QueryInfo::selected_day() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.selected_day)
  return selected_day_;
}
inline void QueryInfo::set_selected_day(::google::protobuf::uint32 value) {
  set_has_selected_day();
  selected_day_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.selected_day)
}

// repeated uint64 cinema_ids = 9;
inline int QueryInfo::cinema_ids_size() const {
  return cinema_ids_.size();
}
inline void QueryInfo::clear_cinema_ids() {
  cinema_ids_.Clear();
}
inline ::google::protobuf::uint64 QueryInfo::cinema_ids(int index) const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.cinema_ids)
  return cinema_ids_.Get(index);
}
inline void QueryInfo::set_cinema_ids(int index, ::google::protobuf::uint64 value) {
  cinema_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.cinema_ids)
}
inline void QueryInfo::add_cinema_ids(::google::protobuf::uint64 value) {
  cinema_ids_.Add(value);
  // @@protoc_insertion_point(field_add:afisha.request.QueryInfo.cinema_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
QueryInfo::cinema_ids() const {
  // @@protoc_insertion_point(field_list:afisha.request.QueryInfo.cinema_ids)
  return cinema_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
QueryInfo::mutable_cinema_ids() {
  // @@protoc_insertion_point(field_mutable_list:afisha.request.QueryInfo.cinema_ids)
  return &cinema_ids_;
}

// optional uint64 movie_id = 10;
inline bool QueryInfo::has_movie_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QueryInfo::set_has_movie_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QueryInfo::clear_has_movie_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QueryInfo::clear_movie_id() {
  movie_id_ = GOOGLE_ULONGLONG(0);
  clear_has_movie_id();
}
inline ::google::protobuf::uint64 QueryInfo::movie_id() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.movie_id)
  return movie_id_;
}
inline void QueryInfo::set_movie_id(::google::protobuf::uint64 value) {
  set_has_movie_id();
  movie_id_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.movie_id)
}

// optional uint32 movie_country_rb = 11;
inline bool QueryInfo::has_movie_country_rb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QueryInfo::set_has_movie_country_rb() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QueryInfo::clear_has_movie_country_rb() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QueryInfo::clear_movie_country_rb() {
  movie_country_rb_ = 0u;
  clear_has_movie_country_rb();
}
inline ::google::protobuf::uint32 QueryInfo::movie_country_rb() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.movie_country_rb)
  return movie_country_rb_;
}
inline void QueryInfo::set_movie_country_rb(::google::protobuf::uint32 value) {
  set_has_movie_country_rb();
  movie_country_rb_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.movie_country_rb)
}

// optional uint32 movie_year = 12;
inline bool QueryInfo::has_movie_year() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QueryInfo::set_has_movie_year() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QueryInfo::clear_has_movie_year() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QueryInfo::clear_movie_year() {
  movie_year_ = 0u;
  clear_has_movie_year();
}
inline ::google::protobuf::uint32 QueryInfo::movie_year() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.movie_year)
  return movie_year_;
}
inline void QueryInfo::set_movie_year(::google::protobuf::uint32 value) {
  set_has_movie_year();
  movie_year_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.movie_year)
}

// optional uint32 rb_code = 13;
inline bool QueryInfo::has_rb_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QueryInfo::set_has_rb_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QueryInfo::clear_has_rb_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QueryInfo::clear_rb_code() {
  rb_code_ = 0u;
  clear_has_rb_code();
}
inline ::google::protobuf::uint32 QueryInfo::rb_code() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.rb_code)
  return rb_code_;
}
inline void QueryInfo::set_rb_code(::google::protobuf::uint32 value) {
  set_has_rb_code();
  rb_code_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.rb_code)
}

// optional uint32 rb_city = 14;
inline bool QueryInfo::has_rb_city() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QueryInfo::set_has_rb_city() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QueryInfo::clear_has_rb_city() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QueryInfo::clear_rb_city() {
  rb_city_ = 0u;
  clear_has_rb_city();
}
inline ::google::protobuf::uint32 QueryInfo::rb_city() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.rb_city)
  return rb_city_;
}
inline void QueryInfo::set_rb_city(::google::protobuf::uint32 value) {
  set_has_rb_city();
  rb_city_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.rb_city)
}

// optional .afisha.storage.GpsInfo user_location = 15;
inline bool QueryInfo::has_user_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryInfo::set_has_user_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryInfo::clear_has_user_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryInfo::clear_user_location() {
  if (user_location_ != NULL) user_location_->::afisha::storage::GpsInfo::Clear();
  clear_has_user_location();
}
inline const ::afisha::storage::GpsInfo& QueryInfo::user_location() const {
  const ::afisha::storage::GpsInfo* p = user_location_;
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.user_location)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::GpsInfo*>(
      &::afisha::storage::_GpsInfo_default_instance_);
}
inline ::afisha::storage::GpsInfo* QueryInfo::mutable_user_location() {
  set_has_user_location();
  if (user_location_ == NULL) {
    user_location_ = new ::afisha::storage::GpsInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.request.QueryInfo.user_location)
  return user_location_;
}
inline ::afisha::storage::GpsInfo* QueryInfo::release_user_location() {
  // @@protoc_insertion_point(field_release:afisha.request.QueryInfo.user_location)
  clear_has_user_location();
  ::afisha::storage::GpsInfo* temp = user_location_;
  user_location_ = NULL;
  return temp;
}
inline void QueryInfo::set_allocated_user_location(::afisha::storage::GpsInfo* user_location) {
  delete user_location_;
  user_location_ = user_location;
  if (user_location) {
    set_has_user_location();
  } else {
    clear_has_user_location();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.request.QueryInfo.user_location)
}

// optional uint32 cinemas_limit = 16;
inline bool QueryInfo::has_cinemas_limit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void QueryInfo::set_has_cinemas_limit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void QueryInfo::clear_has_cinemas_limit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void QueryInfo::clear_cinemas_limit() {
  cinemas_limit_ = 0u;
  clear_has_cinemas_limit();
}
inline ::google::protobuf::uint32 QueryInfo::cinemas_limit() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.cinemas_limit)
  return cinemas_limit_;
}
inline void QueryInfo::set_cinemas_limit(::google::protobuf::uint32 value) {
  set_has_cinemas_limit();
  cinemas_limit_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.cinemas_limit)
}

// optional uint32 movies_limit = 17;
inline bool QueryInfo::has_movies_limit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void QueryInfo::set_has_movies_limit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void QueryInfo::clear_has_movies_limit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void QueryInfo::clear_movies_limit() {
  movies_limit_ = 0u;
  clear_has_movies_limit();
}
inline ::google::protobuf::uint32 QueryInfo::movies_limit() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.movies_limit)
  return movies_limit_;
}
inline void QueryInfo::set_movies_limit(::google::protobuf::uint32 value) {
  set_has_movies_limit();
  movies_limit_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.movies_limit)
}

// optional uint32 days_limit = 18;
inline bool QueryInfo::has_days_limit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void QueryInfo::set_has_days_limit() {
  _has_bits_[0] |= 0x00008000u;
}
inline void QueryInfo::clear_has_days_limit() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void QueryInfo::clear_days_limit() {
  days_limit_ = 0u;
  clear_has_days_limit();
}
inline ::google::protobuf::uint32 QueryInfo::days_limit() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.days_limit)
  return days_limit_;
}
inline void QueryInfo::set_days_limit(::google::protobuf::uint32 value) {
  set_has_days_limit();
  days_limit_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.days_limit)
}

// optional uint32 allowed_next_day_hours = 19;
inline bool QueryInfo::has_allowed_next_day_hours() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void QueryInfo::set_has_allowed_next_day_hours() {
  _has_bits_[0] |= 0x00010000u;
}
inline void QueryInfo::clear_has_allowed_next_day_hours() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void QueryInfo::clear_allowed_next_day_hours() {
  allowed_next_day_hours_ = 0u;
  clear_has_allowed_next_day_hours();
}
inline ::google::protobuf::uint32 QueryInfo::allowed_next_day_hours() const {
  // @@protoc_insertion_point(field_get:afisha.request.QueryInfo.allowed_next_day_hours)
  return allowed_next_day_hours_;
}
inline void QueryInfo::set_allowed_next_day_hours(::google::protobuf::uint32 value) {
  set_has_allowed_next_day_hours();
  allowed_next_day_hours_ = value;
  // @@protoc_insertion_point(field_set:afisha.request.QueryInfo.allowed_next_day_hours)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace request
}  // namespace afisha

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::afisha::request::QueryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::afisha::request::QueryType>() {
  return ::afisha::request::QueryType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_afisha_5fadditive_5frequest_2eproto__INCLUDED
