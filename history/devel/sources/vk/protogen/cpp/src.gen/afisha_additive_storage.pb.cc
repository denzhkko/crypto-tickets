// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afisha_additive_storage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "afisha_additive_storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace afisha {
namespace storage {
class GpsInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GpsInfo>
     _instance;
} _GpsInfo_default_instance_;
class ActorInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ActorInfo>
     _instance;
} _ActorInfo_default_instance_;
class ImageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageInfo>
     _instance;
} _ImageInfo_default_instance_;
class FrameInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FrameInfo>
     _instance;
} _FrameInfo_default_instance_;
class GalleryImageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryImageInfo>
     _instance;
} _GalleryImageInfo_default_instance_;
class SeanceInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SeanceInfo>
     _instance;
} _SeanceInfo_default_instance_;
class MovieInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MovieInfo>
     _instance;
} _MovieInfo_default_instance_;
class TicketPriceInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TicketPriceInfo>
     _instance;
} _TicketPriceInfo_default_instance_;
class CinemaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CinemaInfo>
     _instance;
} _CinemaInfo_default_instance_;

namespace protobuf_afisha_5fadditive_5fstorage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, longitude_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorInfo, url_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, valkiria_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, valkiria_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, valkiria_height_),
  0,
  2,
  3,
  1,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameInfo, url_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImageInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImageInfo, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImageInfo, m_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImageInfo, tel_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImageInfo, touch_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryImageInfo, frame_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeanceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeanceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeanceInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeanceInfo, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeanceInfo, url_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, original_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, review_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, release_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, release_ru_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, m_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, tel_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, touch_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, gallery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, actors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, producers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, directors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, genres_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, countries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, gallery_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, review_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, ticket_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, kinopoisk_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, trailer_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, trailer_source_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, imdb_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, imdb_rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, mail_rating_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, mail_rating_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, mail_rating_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, mail_rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, age_restriction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MovieInfo, site_),
  17,
  0,
  1,
  28,
  2,
  3,
  4,
  18,
  19,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketPriceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketPriceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketPriceInfo, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketPriceInfo, max_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, rb_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, subways_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, phone_common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, phone_infobot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, map_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, schedule_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, ticket_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CinemaInfo, ticket_url_),
  10,
  0,
  1,
  11,
  2,
  8,
  ~0u,
  3,
  4,
  5,
  6,
  9,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(GpsInfo)},
  { 9, 16, sizeof(ActorInfo)},
  { 18, 29, sizeof(ImageInfo)},
  { 35, 42, sizeof(FrameInfo)},
  { 44, 54, sizeof(GalleryImageInfo)},
  { 59, 67, sizeof(SeanceInfo)},
  { 70, 110, sizeof(MovieInfo)},
  { 145, 152, sizeof(TicketPriceInfo)},
  { 154, 172, sizeof(CinemaInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GpsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActorInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SeanceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MovieInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TicketPriceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CinemaInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "afisha_additive_storage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GpsInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GpsInfo_default_instance_);_ActorInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ActorInfo_default_instance_);_ImageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageInfo_default_instance_);_FrameInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FrameInfo_default_instance_);_GalleryImageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryImageInfo_default_instance_);_SeanceInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SeanceInfo_default_instance_);_MovieInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MovieInfo_default_instance_);_TicketPriceInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TicketPriceInfo_default_instance_);_CinemaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CinemaInfo_default_instance_);_GalleryImageInfo_default_instance_._instance.get_mutable()->image_ = const_cast< ::afisha::storage::ImageInfo*>(
      ::afisha::storage::ImageInfo::internal_default_instance());
  _GalleryImageInfo_default_instance_._instance.get_mutable()->m_image_ = const_cast< ::afisha::storage::ImageInfo*>(
      ::afisha::storage::ImageInfo::internal_default_instance());
  _GalleryImageInfo_default_instance_._instance.get_mutable()->tel_image_ = const_cast< ::afisha::storage::ImageInfo*>(
      ::afisha::storage::ImageInfo::internal_default_instance());
  _GalleryImageInfo_default_instance_._instance.get_mutable()->touch_image_ = const_cast< ::afisha::storage::ImageInfo*>(
      ::afisha::storage::ImageInfo::internal_default_instance());
  _GalleryImageInfo_default_instance_._instance.get_mutable()->frame_ = const_cast< ::afisha::storage::FrameInfo*>(
      ::afisha::storage::FrameInfo::internal_default_instance());
  _MovieInfo_default_instance_._instance.get_mutable()->image_ = const_cast< ::afisha::storage::ImageInfo*>(
      ::afisha::storage::ImageInfo::internal_default_instance());
  _MovieInfo_default_instance_._instance.get_mutable()->m_image_ = const_cast< ::afisha::storage::ImageInfo*>(
      ::afisha::storage::ImageInfo::internal_default_instance());
  _MovieInfo_default_instance_._instance.get_mutable()->tel_image_ = const_cast< ::afisha::storage::ImageInfo*>(
      ::afisha::storage::ImageInfo::internal_default_instance());
  _MovieInfo_default_instance_._instance.get_mutable()->touch_image_ = const_cast< ::afisha::storage::ImageInfo*>(
      ::afisha::storage::ImageInfo::internal_default_instance());
  _CinemaInfo_default_instance_._instance.get_mutable()->location_ = const_cast< ::afisha::storage::GpsInfo*>(
      ::afisha::storage::GpsInfo::internal_default_instance());
  _CinemaInfo_default_instance_._instance.get_mutable()->ticket_price_ = const_cast< ::afisha::storage::TicketPriceInfo*>(
      ::afisha::storage::TicketPriceInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035afisha_additive_storage.proto\022\016afisha."
      "storage\".\n\007GpsInfo\022\020\n\010latitude\030\001 \002(\002\022\021\n\t"
      "longitude\030\002 \002(\002\"&\n\tActorInfo\022\014\n\004name\030\001 \002"
      "(\t\022\013\n\003url\030\002 \001(\t\"~\n\tImageInfo\022\013\n\003url\030\001 \001("
      "\t\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\024\n\014valk"
      "iria_url\030\004 \001(\t\022\026\n\016valkiria_width\030\005 \001(\r\022\027"
      "\n\017valkiria_height\030\006 \001(\r\"%\n\tFrameInfo\022\013\n\003"
      "img\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\"\360\001\n\020GalleryImageI"
      "nfo\022(\n\005image\030\001 \001(\0132\031.afisha.storage.Imag"
      "eInfo\022*\n\007m_image\030\002 \001(\0132\031.afisha.storage."
      "ImageInfo\022,\n\ttel_image\030\003 \001(\0132\031.afisha.st"
      "orage.ImageInfo\022.\n\013touch_image\030\004 \001(\0132\031.a"
      "fisha.storage.ImageInfo\022(\n\005frame\030\005 \001(\0132\031"
      ".afisha.storage.FrameInfo\"Q\n\nSeanceInfo\022"
      "(\n\004type\030\001 \002(\0162\032.afisha.storage.SeanceTyp"
      "e\022\014\n\004time\030\002 \002(\004\022\013\n\003url\030\003 \001(\t\"\360\006\n\tMovieIn"
      "fo\022\n\n\002id\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\013\n\003url\030\003 \002("
      "\t\022+\n\006status\030\004 \002(\0162\033.afisha.storage.Movie"
      "Status\022\025\n\roriginal_name\030\005 \001(\t\022\023\n\013descrip"
      "tion\030\006 \001(\t\022\016\n\006review\030\007 \001(\t\022\017\n\007release\030\010 "
      "\001(\004\022\022\n\nrelease_ru\030\t \001(\004\022(\n\005image\030\n \001(\0132\031"
      ".afisha.storage.ImageInfo\022*\n\007m_image\030! \001"
      "(\0132\031.afisha.storage.ImageInfo\022,\n\ttel_ima"
      "ge\030\" \001(\0132\031.afisha.storage.ImageInfo\022.\n\013t"
      "ouch_image\030# \001(\0132\031.afisha.storage.ImageI"
      "nfo\0221\n\007gallery\030\013 \003(\0132 .afisha.storage.Ga"
      "lleryImageInfo\022)\n\006actors\030\014 \003(\0132\031.afisha."
      "storage.ActorInfo\022\021\n\tproducers\030\r \003(\t\022\021\n\t"
      "directors\030\016 \003(\t\022\016\n\006genres\030\017 \003(\t\022\021\n\tcount"
      "ries\030\020 \003(\t\022\023\n\013gallery_url\030\021 \001(\t\022\022\n\nrevie"
      "w_url\030\022 \001(\t\022\022\n\nticket_url\030\023 \001(\t\022\025\n\rkinop"
      "oisk_url\030\024 \001(\t\022\023\n\013trailer_url\030\025 \001(\t\022\032\n\022t"
      "railer_source_url\030\026 \001(\t\022\020\n\010imdb_url\030\027 \001("
      "\t\022\020\n\010duration\030\030 \001(\r\022\023\n\013imdb_rating\030\031 \001(\002"
      "\022\031\n\021mail_rating_count\030\032 \001(\005\022\027\n\017mail_rati"
      "ng_min\030\033 \001(\002\022\027\n\017mail_rating_max\030\034 \001(\002\022\023\n"
      "\013mail_rating\030\035 \001(\002\022\027\n\017age_restriction\030\036 "
      "\001(\r\022\014\n\004year\030\037 \001(\005\022\014\n\004site\030  \001(\t\"+\n\017Ticke"
      "tPriceInfo\022\013\n\003min\030\001 \002(\r\022\013\n\003max\030\002 \002(\r\"\260\002\n"
      "\nCinemaInfo\022\n\n\002id\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\013\n"
      "\003url\030\003 \002(\t\022\017\n\007rb_code\030\004 \002(\r\022\017\n\007address\030\005"
      " \002(\t\022)\n\010location\030\006 \002(\0132\027.afisha.storage."
      "GpsInfo\022\017\n\007subways\030\007 \003(\t\022\024\n\014phone_common"
      "\030\010 \001(\t\022\025\n\rphone_infobot\030\t \001(\t\022\017\n\007map_url"
      "\030\n \001(\t\022\024\n\014schedule_url\030\013 \001(\t\0225\n\014ticket_p"
      "rice\030\014 \001(\0132\037.afisha.storage.TicketPriceI"
      "nfo\022\022\n\nticket_url\030\r \001(\t*%\n\nSeanceType\022\n\n"
      "\006NORMAL\020\001\022\013\n\007TYPE_3D\020\002*0\n\013MovieStatus\022\010\n"
      "\004PAST\020\001\022\013\n\007PRESENT\020\002\022\n\n\006FUTURE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1952);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "afisha_additive_storage.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_afisha_5fadditive_5fstorage_2eproto

const ::google::protobuf::EnumDescriptor* SeanceType_descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_enum_descriptors[0];
}
bool SeanceType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MovieStatus_descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_enum_descriptors[1];
}
bool MovieStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpsInfo::kLatitudeFieldNumber;
const int GpsInfo::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpsInfo::GpsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:afisha.storage.GpsInfo)
}
GpsInfo::GpsInfo(const GpsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:afisha.storage.GpsInfo)
}

void GpsInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

GpsInfo::~GpsInfo() {
  // @@protoc_insertion_point(destructor:afisha.storage.GpsInfo)
  SharedDtor();
}

void GpsInfo::SharedDtor() {
}

void GpsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpsInfo::descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GpsInfo& GpsInfo::default_instance() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

GpsInfo* GpsInfo::New(::google::protobuf::Arena* arena) const {
  GpsInfo* n = new GpsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GpsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afisha.storage.GpsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GpsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:afisha.storage.GpsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:afisha.storage.GpsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:afisha.storage.GpsInfo)
  return false;
#undef DO_
}

void GpsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:afisha.storage.GpsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->latitude(), output);
  }

  // required float longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:afisha.storage.GpsInfo)
}

::google::protobuf::uint8* GpsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:afisha.storage.GpsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->latitude(), target);
  }

  // required float longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afisha.storage.GpsInfo)
  return target;
}

size_t GpsInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:afisha.storage.GpsInfo)
  size_t total_size = 0;

  if (has_latitude()) {
    // required float latitude = 1;
    total_size += 1 + 4;
  }

  if (has_longitude()) {
    // required float longitude = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t GpsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afisha.storage.GpsInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float latitude = 1;
    total_size += 1 + 4;

    // required float longitude = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:afisha.storage.GpsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GpsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GpsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:afisha.storage.GpsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:afisha.storage.GpsInfo)
    MergeFrom(*source);
  }
}

void GpsInfo::MergeFrom(const GpsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afisha.storage.GpsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GpsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:afisha.storage.GpsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsInfo::CopyFrom(const GpsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afisha.storage.GpsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GpsInfo::Swap(GpsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpsInfo::InternalSwap(GpsInfo* other) {
  using std::swap;
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GpsInfo::GetMetadata() const {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GpsInfo

// required float latitude = 1;
bool GpsInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GpsInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
void GpsInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void GpsInfo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
float GpsInfo::latitude() const {
  // @@protoc_insertion_point(field_get:afisha.storage.GpsInfo.latitude)
  return latitude_;
}
void GpsInfo::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.GpsInfo.latitude)
}

// required float longitude = 2;
bool GpsInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GpsInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void GpsInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void GpsInfo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
float GpsInfo::longitude() const {
  // @@protoc_insertion_point(field_get:afisha.storage.GpsInfo.longitude)
  return longitude_;
}
void GpsInfo::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.GpsInfo.longitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActorInfo::kNameFieldNumber;
const int ActorInfo::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActorInfo::ActorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:afisha.storage.ActorInfo)
}
ActorInfo::ActorInfo(const ActorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:afisha.storage.ActorInfo)
}

void ActorInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ActorInfo::~ActorInfo() {
  // @@protoc_insertion_point(destructor:afisha.storage.ActorInfo)
  SharedDtor();
}

void ActorInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorInfo::descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActorInfo& ActorInfo::default_instance() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActorInfo* ActorInfo::New(::google::protobuf::Arena* arena) const {
  ActorInfo* n = new ActorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afisha.storage.ActorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:afisha.storage.ActorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.ActorInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.ActorInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:afisha.storage.ActorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:afisha.storage.ActorInfo)
  return false;
#undef DO_
}

void ActorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:afisha.storage.ActorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.ActorInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.ActorInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:afisha.storage.ActorInfo)
}

::google::protobuf::uint8* ActorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:afisha.storage.ActorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.ActorInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.ActorInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afisha.storage.ActorInfo)
  return target;
}

size_t ActorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afisha.storage.ActorInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // optional string url = 2;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:afisha.storage.ActorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ActorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:afisha.storage.ActorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:afisha.storage.ActorInfo)
    MergeFrom(*source);
  }
}

void ActorInfo::MergeFrom(const ActorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afisha.storage.ActorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
}

void ActorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:afisha.storage.ActorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorInfo::CopyFrom(const ActorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afisha.storage.ActorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ActorInfo::Swap(ActorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActorInfo::InternalSwap(ActorInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActorInfo::GetMetadata() const {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActorInfo

// required string name = 1;
bool ActorInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActorInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ActorInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActorInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ActorInfo::name() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ActorInfo.name)
  return name_.GetNoArena();
}
void ActorInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.ActorInfo.name)
}
#if LANG_CXX11
void ActorInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.ActorInfo.name)
}
#endif
void ActorInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.ActorInfo.name)
}
void ActorInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.ActorInfo.name)
}
::std::string* ActorInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:afisha.storage.ActorInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActorInfo::release_name() {
  // @@protoc_insertion_point(field_release:afisha.storage.ActorInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActorInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.ActorInfo.name)
}

// optional string url = 2;
bool ActorInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActorInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void ActorInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActorInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ActorInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ActorInfo.url)
  return url_.GetNoArena();
}
void ActorInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.ActorInfo.url)
}
#if LANG_CXX11
void ActorInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.ActorInfo.url)
}
#endif
void ActorInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.ActorInfo.url)
}
void ActorInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.ActorInfo.url)
}
::std::string* ActorInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.ActorInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ActorInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.ActorInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ActorInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.ActorInfo.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageInfo::kUrlFieldNumber;
const int ImageInfo::kWidthFieldNumber;
const int ImageInfo::kHeightFieldNumber;
const int ImageInfo::kValkiriaUrlFieldNumber;
const int ImageInfo::kValkiriaWidthFieldNumber;
const int ImageInfo::kValkiriaHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageInfo::ImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:afisha.storage.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  valkiria_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_valkiria_url()) {
    valkiria_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valkiria_url_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&valkiria_height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(valkiria_height_));
  // @@protoc_insertion_point(copy_constructor:afisha.storage.ImageInfo)
}

void ImageInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valkiria_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valkiria_height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(valkiria_height_));
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:afisha.storage.ImageInfo)
  SharedDtor();
}

void ImageInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  valkiria_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageInfo::descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageInfo& ImageInfo::default_instance() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageInfo* ImageInfo::New(::google::protobuf::Arena* arena) const {
  ImageInfo* n = new ImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afisha.storage.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!valkiria_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*valkiria_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&valkiria_height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(valkiria_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:afisha.storage.ImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.ImageInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string valkiria_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valkiria_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->valkiria_url().data(), static_cast<int>(this->valkiria_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.ImageInfo.valkiria_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 valkiria_width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_valkiria_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valkiria_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 valkiria_height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_valkiria_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valkiria_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:afisha.storage.ImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:afisha.storage.ImageInfo)
  return false;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:afisha.storage.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.ImageInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional string valkiria_url = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->valkiria_url().data(), static_cast<int>(this->valkiria_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.ImageInfo.valkiria_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->valkiria_url(), output);
  }

  // optional uint32 valkiria_width = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->valkiria_width(), output);
  }

  // optional uint32 valkiria_height = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->valkiria_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:afisha.storage.ImageInfo)
}

::google::protobuf::uint8* ImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:afisha.storage.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.ImageInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional string valkiria_url = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->valkiria_url().data(), static_cast<int>(this->valkiria_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.ImageInfo.valkiria_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->valkiria_url(), target);
  }

  // optional uint32 valkiria_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->valkiria_width(), target);
  }

  // optional uint32 valkiria_height = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->valkiria_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afisha.storage.ImageInfo)
  return target;
}

size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afisha.storage.ImageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string valkiria_url = 4;
    if (has_valkiria_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valkiria_url());
    }

    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 valkiria_width = 5;
    if (has_valkiria_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valkiria_width());
    }

    // optional uint32 valkiria_height = 6;
    if (has_valkiria_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valkiria_height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:afisha.storage.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:afisha.storage.ImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:afisha.storage.ImageInfo)
    MergeFrom(*source);
  }
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afisha.storage.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_valkiria_url();
      valkiria_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.valkiria_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      valkiria_width_ = from.valkiria_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      valkiria_height_ = from.valkiria_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:afisha.storage.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afisha.storage.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  return true;
}

void ImageInfo::Swap(ImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  valkiria_url_.Swap(&other->valkiria_url_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(valkiria_width_, other->valkiria_width_);
  swap(valkiria_height_, other->valkiria_height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageInfo::GetMetadata() const {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageInfo

// optional string url = 1;
bool ImageInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& ImageInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.url)
  return url_.GetNoArena();
}
void ImageInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.url)
}
#if LANG_CXX11
void ImageInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.ImageInfo.url)
}
#endif
void ImageInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.ImageInfo.url)
}
void ImageInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.ImageInfo.url)
}
::std::string* ImageInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.ImageInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.ImageInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.ImageInfo.url)
}

// optional uint32 width = 2;
bool ImageInfo::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageInfo::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageInfo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 ImageInfo::width() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.width)
  return width_;
}
void ImageInfo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.width)
}

// optional uint32 height = 3;
bool ImageInfo::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageInfo::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageInfo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 ImageInfo::height() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.height)
  return height_;
}
void ImageInfo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.height)
}

// optional string valkiria_url = 4;
bool ImageInfo::has_valkiria_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageInfo::set_has_valkiria_url() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageInfo::clear_has_valkiria_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageInfo::clear_valkiria_url() {
  valkiria_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_valkiria_url();
}
const ::std::string& ImageInfo::valkiria_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.valkiria_url)
  return valkiria_url_.GetNoArena();
}
void ImageInfo::set_valkiria_url(const ::std::string& value) {
  set_has_valkiria_url();
  valkiria_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.valkiria_url)
}
#if LANG_CXX11
void ImageInfo::set_valkiria_url(::std::string&& value) {
  set_has_valkiria_url();
  valkiria_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.ImageInfo.valkiria_url)
}
#endif
void ImageInfo::set_valkiria_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_valkiria_url();
  valkiria_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.ImageInfo.valkiria_url)
}
void ImageInfo::set_valkiria_url(const char* value, size_t size) {
  set_has_valkiria_url();
  valkiria_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.ImageInfo.valkiria_url)
}
::std::string* ImageInfo::mutable_valkiria_url() {
  set_has_valkiria_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.ImageInfo.valkiria_url)
  return valkiria_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_valkiria_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.ImageInfo.valkiria_url)
  clear_has_valkiria_url();
  return valkiria_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_valkiria_url(::std::string* valkiria_url) {
  if (valkiria_url != NULL) {
    set_has_valkiria_url();
  } else {
    clear_has_valkiria_url();
  }
  valkiria_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valkiria_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.ImageInfo.valkiria_url)
}

// optional uint32 valkiria_width = 5;
bool ImageInfo::has_valkiria_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageInfo::set_has_valkiria_width() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageInfo::clear_has_valkiria_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageInfo::clear_valkiria_width() {
  valkiria_width_ = 0u;
  clear_has_valkiria_width();
}
::google::protobuf::uint32 ImageInfo::valkiria_width() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.valkiria_width)
  return valkiria_width_;
}
void ImageInfo::set_valkiria_width(::google::protobuf::uint32 value) {
  set_has_valkiria_width();
  valkiria_width_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.valkiria_width)
}

// optional uint32 valkiria_height = 6;
bool ImageInfo::has_valkiria_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageInfo::set_has_valkiria_height() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageInfo::clear_has_valkiria_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageInfo::clear_valkiria_height() {
  valkiria_height_ = 0u;
  clear_has_valkiria_height();
}
::google::protobuf::uint32 ImageInfo::valkiria_height() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.valkiria_height)
  return valkiria_height_;
}
void ImageInfo::set_valkiria_height(::google::protobuf::uint32 value) {
  set_has_valkiria_height();
  valkiria_height_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.valkiria_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameInfo::kImgFieldNumber;
const int FrameInfo::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameInfo::FrameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:afisha.storage.FrameInfo)
}
FrameInfo::FrameInfo(const FrameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_img()) {
    img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:afisha.storage.FrameInfo)
}

void FrameInfo::SharedCtor() {
  _cached_size_ = 0;
  img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FrameInfo::~FrameInfo() {
  // @@protoc_insertion_point(destructor:afisha.storage.FrameInfo)
  SharedDtor();
}

void FrameInfo::SharedDtor() {
  img_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameInfo::descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameInfo& FrameInfo::default_instance() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameInfo* FrameInfo::New(::google::protobuf::Arena* arena) const {
  FrameInfo* n = new FrameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afisha.storage.FrameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!img_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*img_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:afisha.storage.FrameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string img = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img().data(), static_cast<int>(this->img().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.FrameInfo.img");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.FrameInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:afisha.storage.FrameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:afisha.storage.FrameInfo)
  return false;
#undef DO_
}

void FrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:afisha.storage.FrameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string img = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img().data(), static_cast<int>(this->img().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.FrameInfo.img");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->img(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.FrameInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:afisha.storage.FrameInfo)
}

::google::protobuf::uint8* FrameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:afisha.storage.FrameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string img = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img().data(), static_cast<int>(this->img().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.FrameInfo.img");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->img(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.FrameInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afisha.storage.FrameInfo)
  return target;
}

size_t FrameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afisha.storage.FrameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string img = 1;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:afisha.storage.FrameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:afisha.storage.FrameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:afisha.storage.FrameInfo)
    MergeFrom(*source);
  }
}

void FrameInfo::MergeFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afisha.storage.FrameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_img();
      img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
}

void FrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:afisha.storage.FrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameInfo::CopyFrom(const FrameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afisha.storage.FrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameInfo::IsInitialized() const {
  return true;
}

void FrameInfo::Swap(FrameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameInfo::InternalSwap(FrameInfo* other) {
  using std::swap;
  img_.Swap(&other->img_);
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameInfo::GetMetadata() const {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameInfo

// optional string img = 1;
bool FrameInfo::has_img() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameInfo::set_has_img() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameInfo::clear_has_img() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameInfo::clear_img() {
  img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img();
}
const ::std::string& FrameInfo::img() const {
  // @@protoc_insertion_point(field_get:afisha.storage.FrameInfo.img)
  return img_.GetNoArena();
}
void FrameInfo::set_img(const ::std::string& value) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.FrameInfo.img)
}
#if LANG_CXX11
void FrameInfo::set_img(::std::string&& value) {
  set_has_img();
  img_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.FrameInfo.img)
}
#endif
void FrameInfo::set_img(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.FrameInfo.img)
}
void FrameInfo::set_img(const char* value, size_t size) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.FrameInfo.img)
}
::std::string* FrameInfo::mutable_img() {
  set_has_img();
  // @@protoc_insertion_point(field_mutable:afisha.storage.FrameInfo.img)
  return img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameInfo::release_img() {
  // @@protoc_insertion_point(field_release:afisha.storage.FrameInfo.img)
  clear_has_img();
  return img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameInfo::set_allocated_img(::std::string* img) {
  if (img != NULL) {
    set_has_img();
  } else {
    clear_has_img();
  }
  img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.FrameInfo.img)
}

// optional string url = 2;
bool FrameInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& FrameInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.FrameInfo.url)
  return url_.GetNoArena();
}
void FrameInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.FrameInfo.url)
}
#if LANG_CXX11
void FrameInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.FrameInfo.url)
}
#endif
void FrameInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.FrameInfo.url)
}
void FrameInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.FrameInfo.url)
}
::std::string* FrameInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.FrameInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.FrameInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.FrameInfo.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryImageInfo::kImageFieldNumber;
const int GalleryImageInfo::kMImageFieldNumber;
const int GalleryImageInfo::kTelImageFieldNumber;
const int GalleryImageInfo::kTouchImageFieldNumber;
const int GalleryImageInfo::kFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryImageInfo::GalleryImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:afisha.storage.GalleryImageInfo)
}
GalleryImageInfo::GalleryImageInfo(const GalleryImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image()) {
    image_ = new ::afisha::storage::ImageInfo(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_m_image()) {
    m_image_ = new ::afisha::storage::ImageInfo(*from.m_image_);
  } else {
    m_image_ = NULL;
  }
  if (from.has_tel_image()) {
    tel_image_ = new ::afisha::storage::ImageInfo(*from.tel_image_);
  } else {
    tel_image_ = NULL;
  }
  if (from.has_touch_image()) {
    touch_image_ = new ::afisha::storage::ImageInfo(*from.touch_image_);
  } else {
    touch_image_ = NULL;
  }
  if (from.has_frame()) {
    frame_ = new ::afisha::storage::FrameInfo(*from.frame_);
  } else {
    frame_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:afisha.storage.GalleryImageInfo)
}

void GalleryImageInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&image_)) + sizeof(frame_));
}

GalleryImageInfo::~GalleryImageInfo() {
  // @@protoc_insertion_point(destructor:afisha.storage.GalleryImageInfo)
  SharedDtor();
}

void GalleryImageInfo::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete m_image_;
  if (this != internal_default_instance()) delete tel_image_;
  if (this != internal_default_instance()) delete touch_image_;
  if (this != internal_default_instance()) delete frame_;
}

void GalleryImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryImageInfo::descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryImageInfo& GalleryImageInfo::default_instance() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryImageInfo* GalleryImageInfo::New(::google::protobuf::Arena* arena) const {
  GalleryImageInfo* n = new GalleryImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afisha.storage.GalleryImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(image_ != NULL);
      image_->::afisha::storage::ImageInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(m_image_ != NULL);
      m_image_->::afisha::storage::ImageInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tel_image_ != NULL);
      tel_image_->::afisha::storage::ImageInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(touch_image_ != NULL);
      touch_image_->::afisha::storage::ImageInfo::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(frame_ != NULL);
      frame_->::afisha::storage::FrameInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GalleryImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:afisha.storage.GalleryImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .afisha.storage.ImageInfo image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .afisha.storage.ImageInfo m_image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .afisha.storage.ImageInfo tel_image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tel_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .afisha.storage.ImageInfo touch_image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_touch_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .afisha.storage.FrameInfo frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:afisha.storage.GalleryImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:afisha.storage.GalleryImageInfo)
  return false;
#undef DO_
}

void GalleryImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:afisha.storage.GalleryImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .afisha.storage.ImageInfo image = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_, output);
  }

  // optional .afisha.storage.ImageInfo m_image = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->m_image_, output);
  }

  // optional .afisha.storage.ImageInfo tel_image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tel_image_, output);
  }

  // optional .afisha.storage.ImageInfo touch_image = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->touch_image_, output);
  }

  // optional .afisha.storage.FrameInfo frame = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->frame_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:afisha.storage.GalleryImageInfo)
}

::google::protobuf::uint8* GalleryImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:afisha.storage.GalleryImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .afisha.storage.ImageInfo image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->image_, deterministic, target);
  }

  // optional .afisha.storage.ImageInfo m_image = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->m_image_, deterministic, target);
  }

  // optional .afisha.storage.ImageInfo tel_image = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->tel_image_, deterministic, target);
  }

  // optional .afisha.storage.ImageInfo touch_image = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->touch_image_, deterministic, target);
  }

  // optional .afisha.storage.FrameInfo frame = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->frame_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afisha.storage.GalleryImageInfo)
  return target;
}

size_t GalleryImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afisha.storage.GalleryImageInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .afisha.storage.ImageInfo image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_);
    }

    // optional .afisha.storage.ImageInfo m_image = 2;
    if (has_m_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->m_image_);
    }

    // optional .afisha.storage.ImageInfo tel_image = 3;
    if (has_tel_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tel_image_);
    }

    // optional .afisha.storage.ImageInfo touch_image = 4;
    if (has_touch_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->touch_image_);
    }

    // optional .afisha.storage.FrameInfo frame = 5;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->frame_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:afisha.storage.GalleryImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:afisha.storage.GalleryImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:afisha.storage.GalleryImageInfo)
    MergeFrom(*source);
  }
}

void GalleryImageInfo::MergeFrom(const GalleryImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afisha.storage.GalleryImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_image()->::afisha::storage::ImageInfo::MergeFrom(from.image());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_m_image()->::afisha::storage::ImageInfo::MergeFrom(from.m_image());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_tel_image()->::afisha::storage::ImageInfo::MergeFrom(from.tel_image());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_touch_image()->::afisha::storage::ImageInfo::MergeFrom(from.touch_image());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_frame()->::afisha::storage::FrameInfo::MergeFrom(from.frame());
    }
  }
}

void GalleryImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:afisha.storage.GalleryImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryImageInfo::CopyFrom(const GalleryImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afisha.storage.GalleryImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryImageInfo::IsInitialized() const {
  return true;
}

void GalleryImageInfo::Swap(GalleryImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryImageInfo::InternalSwap(GalleryImageInfo* other) {
  using std::swap;
  swap(image_, other->image_);
  swap(m_image_, other->m_image_);
  swap(tel_image_, other->tel_image_);
  swap(touch_image_, other->touch_image_);
  swap(frame_, other->frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryImageInfo::GetMetadata() const {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryImageInfo

// optional .afisha.storage.ImageInfo image = 1;
bool GalleryImageInfo::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GalleryImageInfo::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
void GalleryImageInfo::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
void GalleryImageInfo::clear_image() {
  if (image_ != NULL) image_->::afisha::storage::ImageInfo::Clear();
  clear_has_image();
}
const ::afisha::storage::ImageInfo& GalleryImageInfo::image() const {
  const ::afisha::storage::ImageInfo* p = image_;
  // @@protoc_insertion_point(field_get:afisha.storage.GalleryImageInfo.image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
::afisha::storage::ImageInfo* GalleryImageInfo::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.GalleryImageInfo.image)
  return image_;
}
::afisha::storage::ImageInfo* GalleryImageInfo::release_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.GalleryImageInfo.image)
  clear_has_image();
  ::afisha::storage::ImageInfo* temp = image_;
  image_ = NULL;
  return temp;
}
void GalleryImageInfo::set_allocated_image(::afisha::storage::ImageInfo* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.GalleryImageInfo.image)
}

// optional .afisha.storage.ImageInfo m_image = 2;
bool GalleryImageInfo::has_m_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GalleryImageInfo::set_has_m_image() {
  _has_bits_[0] |= 0x00000002u;
}
void GalleryImageInfo::clear_has_m_image() {
  _has_bits_[0] &= ~0x00000002u;
}
void GalleryImageInfo::clear_m_image() {
  if (m_image_ != NULL) m_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_m_image();
}
const ::afisha::storage::ImageInfo& GalleryImageInfo::m_image() const {
  const ::afisha::storage::ImageInfo* p = m_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.GalleryImageInfo.m_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
::afisha::storage::ImageInfo* GalleryImageInfo::mutable_m_image() {
  set_has_m_image();
  if (m_image_ == NULL) {
    m_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.GalleryImageInfo.m_image)
  return m_image_;
}
::afisha::storage::ImageInfo* GalleryImageInfo::release_m_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.GalleryImageInfo.m_image)
  clear_has_m_image();
  ::afisha::storage::ImageInfo* temp = m_image_;
  m_image_ = NULL;
  return temp;
}
void GalleryImageInfo::set_allocated_m_image(::afisha::storage::ImageInfo* m_image) {
  delete m_image_;
  m_image_ = m_image;
  if (m_image) {
    set_has_m_image();
  } else {
    clear_has_m_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.GalleryImageInfo.m_image)
}

// optional .afisha.storage.ImageInfo tel_image = 3;
bool GalleryImageInfo::has_tel_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GalleryImageInfo::set_has_tel_image() {
  _has_bits_[0] |= 0x00000004u;
}
void GalleryImageInfo::clear_has_tel_image() {
  _has_bits_[0] &= ~0x00000004u;
}
void GalleryImageInfo::clear_tel_image() {
  if (tel_image_ != NULL) tel_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_tel_image();
}
const ::afisha::storage::ImageInfo& GalleryImageInfo::tel_image() const {
  const ::afisha::storage::ImageInfo* p = tel_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.GalleryImageInfo.tel_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
::afisha::storage::ImageInfo* GalleryImageInfo::mutable_tel_image() {
  set_has_tel_image();
  if (tel_image_ == NULL) {
    tel_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.GalleryImageInfo.tel_image)
  return tel_image_;
}
::afisha::storage::ImageInfo* GalleryImageInfo::release_tel_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.GalleryImageInfo.tel_image)
  clear_has_tel_image();
  ::afisha::storage::ImageInfo* temp = tel_image_;
  tel_image_ = NULL;
  return temp;
}
void GalleryImageInfo::set_allocated_tel_image(::afisha::storage::ImageInfo* tel_image) {
  delete tel_image_;
  tel_image_ = tel_image;
  if (tel_image) {
    set_has_tel_image();
  } else {
    clear_has_tel_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.GalleryImageInfo.tel_image)
}

// optional .afisha.storage.ImageInfo touch_image = 4;
bool GalleryImageInfo::has_touch_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GalleryImageInfo::set_has_touch_image() {
  _has_bits_[0] |= 0x00000008u;
}
void GalleryImageInfo::clear_has_touch_image() {
  _has_bits_[0] &= ~0x00000008u;
}
void GalleryImageInfo::clear_touch_image() {
  if (touch_image_ != NULL) touch_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_touch_image();
}
const ::afisha::storage::ImageInfo& GalleryImageInfo::touch_image() const {
  const ::afisha::storage::ImageInfo* p = touch_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.GalleryImageInfo.touch_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
::afisha::storage::ImageInfo* GalleryImageInfo::mutable_touch_image() {
  set_has_touch_image();
  if (touch_image_ == NULL) {
    touch_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.GalleryImageInfo.touch_image)
  return touch_image_;
}
::afisha::storage::ImageInfo* GalleryImageInfo::release_touch_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.GalleryImageInfo.touch_image)
  clear_has_touch_image();
  ::afisha::storage::ImageInfo* temp = touch_image_;
  touch_image_ = NULL;
  return temp;
}
void GalleryImageInfo::set_allocated_touch_image(::afisha::storage::ImageInfo* touch_image) {
  delete touch_image_;
  touch_image_ = touch_image;
  if (touch_image) {
    set_has_touch_image();
  } else {
    clear_has_touch_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.GalleryImageInfo.touch_image)
}

// optional .afisha.storage.FrameInfo frame = 5;
bool GalleryImageInfo::has_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GalleryImageInfo::set_has_frame() {
  _has_bits_[0] |= 0x00000010u;
}
void GalleryImageInfo::clear_has_frame() {
  _has_bits_[0] &= ~0x00000010u;
}
void GalleryImageInfo::clear_frame() {
  if (frame_ != NULL) frame_->::afisha::storage::FrameInfo::Clear();
  clear_has_frame();
}
const ::afisha::storage::FrameInfo& GalleryImageInfo::frame() const {
  const ::afisha::storage::FrameInfo* p = frame_;
  // @@protoc_insertion_point(field_get:afisha.storage.GalleryImageInfo.frame)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::FrameInfo*>(
      &::afisha::storage::_FrameInfo_default_instance_);
}
::afisha::storage::FrameInfo* GalleryImageInfo::mutable_frame() {
  set_has_frame();
  if (frame_ == NULL) {
    frame_ = new ::afisha::storage::FrameInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.GalleryImageInfo.frame)
  return frame_;
}
::afisha::storage::FrameInfo* GalleryImageInfo::release_frame() {
  // @@protoc_insertion_point(field_release:afisha.storage.GalleryImageInfo.frame)
  clear_has_frame();
  ::afisha::storage::FrameInfo* temp = frame_;
  frame_ = NULL;
  return temp;
}
void GalleryImageInfo::set_allocated_frame(::afisha::storage::FrameInfo* frame) {
  delete frame_;
  frame_ = frame;
  if (frame) {
    set_has_frame();
  } else {
    clear_has_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.GalleryImageInfo.frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeanceInfo::kTypeFieldNumber;
const int SeanceInfo::kTimeFieldNumber;
const int SeanceInfo::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeanceInfo::SeanceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:afisha.storage.SeanceInfo)
}
SeanceInfo::SeanceInfo(const SeanceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:afisha.storage.SeanceInfo)
}

void SeanceInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
}

SeanceInfo::~SeanceInfo() {
  // @@protoc_insertion_point(destructor:afisha.storage.SeanceInfo)
  SharedDtor();
}

void SeanceInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SeanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeanceInfo::descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeanceInfo& SeanceInfo::default_instance() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

SeanceInfo* SeanceInfo::New(::google::protobuf::Arena* arena) const {
  SeanceInfo* n = new SeanceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeanceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afisha.storage.SeanceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    time_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SeanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:afisha.storage.SeanceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .afisha.storage.SeanceType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::afisha::storage::SeanceType_IsValid(value)) {
            set_type(static_cast< ::afisha::storage::SeanceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.SeanceInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:afisha.storage.SeanceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:afisha.storage.SeanceInfo)
  return false;
#undef DO_
}

void SeanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:afisha.storage.SeanceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .afisha.storage.SeanceType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.SeanceInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:afisha.storage.SeanceInfo)
}

::google::protobuf::uint8* SeanceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:afisha.storage.SeanceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .afisha.storage.SeanceType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.SeanceInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afisha.storage.SeanceInfo)
  return target;
}

size_t SeanceInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:afisha.storage.SeanceInfo)
  size_t total_size = 0;

  if (has_time()) {
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_type()) {
    // required .afisha.storage.SeanceType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t SeanceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afisha.storage.SeanceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required .afisha.storage.SeanceType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string url = 3;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:afisha.storage.SeanceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SeanceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeanceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:afisha.storage.SeanceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:afisha.storage.SeanceInfo)
    MergeFrom(*source);
  }
}

void SeanceInfo::MergeFrom(const SeanceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afisha.storage.SeanceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SeanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:afisha.storage.SeanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeanceInfo::CopyFrom(const SeanceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afisha.storage.SeanceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void SeanceInfo::Swap(SeanceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeanceInfo::InternalSwap(SeanceInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(time_, other->time_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeanceInfo::GetMetadata() const {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeanceInfo

// required .afisha.storage.SeanceType type = 1;
bool SeanceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SeanceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SeanceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SeanceInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
::afisha::storage::SeanceType SeanceInfo::type() const {
  // @@protoc_insertion_point(field_get:afisha.storage.SeanceInfo.type)
  return static_cast< ::afisha::storage::SeanceType >(type_);
}
void SeanceInfo::set_type(::afisha::storage::SeanceType value) {
  assert(::afisha::storage::SeanceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.SeanceInfo.type)
}

// required uint64 time = 2;
bool SeanceInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SeanceInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SeanceInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SeanceInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 SeanceInfo::time() const {
  // @@protoc_insertion_point(field_get:afisha.storage.SeanceInfo.time)
  return time_;
}
void SeanceInfo::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.SeanceInfo.time)
}

// optional string url = 3;
bool SeanceInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SeanceInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void SeanceInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void SeanceInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& SeanceInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.SeanceInfo.url)
  return url_.GetNoArena();
}
void SeanceInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.SeanceInfo.url)
}
#if LANG_CXX11
void SeanceInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.SeanceInfo.url)
}
#endif
void SeanceInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.SeanceInfo.url)
}
void SeanceInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.SeanceInfo.url)
}
::std::string* SeanceInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.SeanceInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SeanceInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.SeanceInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SeanceInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.SeanceInfo.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MovieInfo::kIdFieldNumber;
const int MovieInfo::kNameFieldNumber;
const int MovieInfo::kUrlFieldNumber;
const int MovieInfo::kStatusFieldNumber;
const int MovieInfo::kOriginalNameFieldNumber;
const int MovieInfo::kDescriptionFieldNumber;
const int MovieInfo::kReviewFieldNumber;
const int MovieInfo::kReleaseFieldNumber;
const int MovieInfo::kReleaseRuFieldNumber;
const int MovieInfo::kImageFieldNumber;
const int MovieInfo::kMImageFieldNumber;
const int MovieInfo::kTelImageFieldNumber;
const int MovieInfo::kTouchImageFieldNumber;
const int MovieInfo::kGalleryFieldNumber;
const int MovieInfo::kActorsFieldNumber;
const int MovieInfo::kProducersFieldNumber;
const int MovieInfo::kDirectorsFieldNumber;
const int MovieInfo::kGenresFieldNumber;
const int MovieInfo::kCountriesFieldNumber;
const int MovieInfo::kGalleryUrlFieldNumber;
const int MovieInfo::kReviewUrlFieldNumber;
const int MovieInfo::kTicketUrlFieldNumber;
const int MovieInfo::kKinopoiskUrlFieldNumber;
const int MovieInfo::kTrailerUrlFieldNumber;
const int MovieInfo::kTrailerSourceUrlFieldNumber;
const int MovieInfo::kImdbUrlFieldNumber;
const int MovieInfo::kDurationFieldNumber;
const int MovieInfo::kImdbRatingFieldNumber;
const int MovieInfo::kMailRatingCountFieldNumber;
const int MovieInfo::kMailRatingMinFieldNumber;
const int MovieInfo::kMailRatingMaxFieldNumber;
const int MovieInfo::kMailRatingFieldNumber;
const int MovieInfo::kAgeRestrictionFieldNumber;
const int MovieInfo::kYearFieldNumber;
const int MovieInfo::kSiteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MovieInfo::MovieInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:afisha.storage.MovieInfo)
}
MovieInfo::MovieInfo(const MovieInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gallery_(from.gallery_),
      actors_(from.actors_),
      producers_(from.producers_),
      directors_(from.directors_),
      genres_(from.genres_),
      countries_(from.countries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  original_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_name()) {
    original_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  review_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_review()) {
    review_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.review_);
  }
  gallery_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gallery_url()) {
    gallery_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gallery_url_);
  }
  review_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_review_url()) {
    review_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.review_url_);
  }
  ticket_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket_url()) {
    ticket_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_url_);
  }
  kinopoisk_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kinopoisk_url()) {
    kinopoisk_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kinopoisk_url_);
  }
  trailer_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trailer_url()) {
    trailer_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trailer_url_);
  }
  trailer_source_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trailer_source_url()) {
    trailer_source_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trailer_source_url_);
  }
  imdb_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imdb_url()) {
    imdb_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imdb_url_);
  }
  site_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_site()) {
    site_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_);
  }
  if (from.has_image()) {
    image_ = new ::afisha::storage::ImageInfo(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_m_image()) {
    m_image_ = new ::afisha::storage::ImageInfo(*from.m_image_);
  } else {
    m_image_ = NULL;
  }
  if (from.has_tel_image()) {
    tel_image_ = new ::afisha::storage::ImageInfo(*from.tel_image_);
  } else {
    tel_image_ = NULL;
  }
  if (from.has_touch_image()) {
    touch_image_ = new ::afisha::storage::ImageInfo(*from.touch_image_);
  } else {
    touch_image_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:afisha.storage.MovieInfo)
}

void MovieInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  review_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gallery_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  review_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kinopoisk_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trailer_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trailer_source_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imdb_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&image_)) + sizeof(year_));
  status_ = 1;
}

MovieInfo::~MovieInfo() {
  // @@protoc_insertion_point(destructor:afisha.storage.MovieInfo)
  SharedDtor();
}

void MovieInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  review_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gallery_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  review_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kinopoisk_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trailer_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trailer_source_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imdb_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete m_image_;
  if (this != internal_default_instance()) delete tel_image_;
  if (this != internal_default_instance()) delete touch_image_;
}

void MovieInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MovieInfo::descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MovieInfo& MovieInfo::default_instance() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MovieInfo* MovieInfo::New(::google::protobuf::Arena* arena) const {
  MovieInfo* n = new MovieInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MovieInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afisha.storage.MovieInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gallery_.Clear();
  actors_.Clear();
  producers_.Clear();
  directors_.Clear();
  genres_.Clear();
  countries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!original_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*original_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!review_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*review_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!gallery_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gallery_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!review_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*review_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!ticket_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!kinopoisk_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*kinopoisk_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!trailer_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trailer_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!trailer_source_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trailer_source_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(!imdb_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imdb_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(!site_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*site_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(image_ != NULL);
      image_->::afisha::storage::ImageInfo::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(m_image_ != NULL);
      m_image_->::afisha::storage::ImageInfo::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(tel_image_ != NULL);
      tel_image_->::afisha::storage::ImageInfo::Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(touch_image_ != NULL);
    touch_image_->::afisha::storage::ImageInfo::Clear();
  }
  if (cached_has_bits & 16646144u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mail_rating_min_) -
        reinterpret_cast<char*>(&id_)) + sizeof(mail_rating_min_));
  }
  if (cached_has_bits & 520093696u) {
    ::memset(&mail_rating_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&year_) -
        reinterpret_cast<char*>(&mail_rating_max_)) + sizeof(year_));
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MovieInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:afisha.storage.MovieInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .afisha.storage.MovieStatus status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::afisha::storage::MovieStatus_IsValid(value)) {
            set_status(static_cast< ::afisha::storage::MovieStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string original_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->original_name().data(), static_cast<int>(this->original_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.original_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string review = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_review()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->review().data(), static_cast<int>(this->review().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.review");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 release = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_release();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &release_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 release_ru = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_release_ru();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &release_ru_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .afisha.storage.ImageInfo image = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .afisha.storage.GalleryImageInfo gallery = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gallery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .afisha.storage.ActorInfo actors = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string producers = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_producers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->producers(this->producers_size() - 1).data(),
            static_cast<int>(this->producers(this->producers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.producers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string directors = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_directors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->directors(this->directors_size() - 1).data(),
            static_cast<int>(this->directors(this->directors_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.directors");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string genres = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_genres()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->genres(this->genres_size() - 1).data(),
            static_cast<int>(this->genres(this->genres_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.genres");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string countries = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_countries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->countries(this->countries_size() - 1).data(),
            static_cast<int>(this->countries(this->countries_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.countries");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gallery_url = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gallery_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gallery_url().data(), static_cast<int>(this->gallery_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.gallery_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string review_url = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_review_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->review_url().data(), static_cast<int>(this->review_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.review_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ticket_url = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket_url().data(), static_cast<int>(this->ticket_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.ticket_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string kinopoisk_url = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kinopoisk_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kinopoisk_url().data(), static_cast<int>(this->kinopoisk_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.kinopoisk_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trailer_url = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trailer_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trailer_url().data(), static_cast<int>(this->trailer_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.trailer_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trailer_source_url = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trailer_source_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trailer_source_url().data(), static_cast<int>(this->trailer_source_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.trailer_source_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string imdb_url = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imdb_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imdb_url().data(), static_cast<int>(this->imdb_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.imdb_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float imdb_rating = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {
          set_has_imdb_rating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imdb_rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mail_rating_count = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_mail_rating_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_rating_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mail_rating_min = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {
          set_has_mail_rating_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mail_rating_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mail_rating_max = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {
          set_has_mail_rating_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mail_rating_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mail_rating = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {
          set_has_mail_rating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mail_rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 age_restriction = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_age_restriction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_restriction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string site = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site().data(), static_cast<int>(this->site().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.MovieInfo.site");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .afisha.storage.ImageInfo m_image = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .afisha.storage.ImageInfo tel_image = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tel_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .afisha.storage.ImageInfo touch_image = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_touch_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:afisha.storage.MovieInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:afisha.storage.MovieInfo)
  return false;
#undef DO_
}

void MovieInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:afisha.storage.MovieInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // required .afisha.storage.MovieStatus status = 4;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional string original_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_name().data(), static_cast<int>(this->original_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.original_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->original_name(), output);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional string review = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->review().data(), static_cast<int>(this->review().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.review");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->review(), output);
  }

  // optional uint64 release = 8;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->release(), output);
  }

  // optional uint64 release_ru = 9;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->release_ru(), output);
  }

  // optional .afisha.storage.ImageInfo image = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->image_, output);
  }

  // repeated .afisha.storage.GalleryImageInfo gallery = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gallery_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->gallery(static_cast<int>(i)), output);
  }

  // repeated .afisha.storage.ActorInfo actors = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->actors(static_cast<int>(i)), output);
  }

  // repeated string producers = 13;
  for (int i = 0, n = this->producers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->producers(i).data(), static_cast<int>(this->producers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.producers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->producers(i), output);
  }

  // repeated string directors = 14;
  for (int i = 0, n = this->directors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->directors(i).data(), static_cast<int>(this->directors(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.directors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->directors(i), output);
  }

  // repeated string genres = 15;
  for (int i = 0, n = this->genres_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genres(i).data(), static_cast<int>(this->genres(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.genres");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->genres(i), output);
  }

  // repeated string countries = 16;
  for (int i = 0, n = this->countries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countries(i).data(), static_cast<int>(this->countries(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.countries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->countries(i), output);
  }

  // optional string gallery_url = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gallery_url().data(), static_cast<int>(this->gallery_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.gallery_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->gallery_url(), output);
  }

  // optional string review_url = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->review_url().data(), static_cast<int>(this->review_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.review_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->review_url(), output);
  }

  // optional string ticket_url = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket_url().data(), static_cast<int>(this->ticket_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.ticket_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->ticket_url(), output);
  }

  // optional string kinopoisk_url = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kinopoisk_url().data(), static_cast<int>(this->kinopoisk_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.kinopoisk_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->kinopoisk_url(), output);
  }

  // optional string trailer_url = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trailer_url().data(), static_cast<int>(this->trailer_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.trailer_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->trailer_url(), output);
  }

  // optional string trailer_source_url = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trailer_source_url().data(), static_cast<int>(this->trailer_source_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.trailer_source_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->trailer_source_url(), output);
  }

  // optional string imdb_url = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imdb_url().data(), static_cast<int>(this->imdb_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.imdb_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->imdb_url(), output);
  }

  // optional uint32 duration = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->duration(), output);
  }

  // optional float imdb_rating = 25;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->imdb_rating(), output);
  }

  // optional int32 mail_rating_count = 26;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->mail_rating_count(), output);
  }

  // optional float mail_rating_min = 27;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->mail_rating_min(), output);
  }

  // optional float mail_rating_max = 28;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->mail_rating_max(), output);
  }

  // optional float mail_rating = 29;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->mail_rating(), output);
  }

  // optional uint32 age_restriction = 30;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->age_restriction(), output);
  }

  // optional int32 year = 31;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->year(), output);
  }

  // optional string site = 32;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site().data(), static_cast<int>(this->site().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.site");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->site(), output);
  }

  // optional .afisha.storage.ImageInfo m_image = 33;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->m_image_, output);
  }

  // optional .afisha.storage.ImageInfo tel_image = 34;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->tel_image_, output);
  }

  // optional .afisha.storage.ImageInfo touch_image = 35;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->touch_image_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:afisha.storage.MovieInfo)
}

::google::protobuf::uint8* MovieInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:afisha.storage.MovieInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // required .afisha.storage.MovieStatus status = 4;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional string original_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_name().data(), static_cast<int>(this->original_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.original_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->original_name(), target);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional string review = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->review().data(), static_cast<int>(this->review().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.review");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->review(), target);
  }

  // optional uint64 release = 8;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->release(), target);
  }

  // optional uint64 release_ru = 9;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->release_ru(), target);
  }

  // optional .afisha.storage.ImageInfo image = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->image_, deterministic, target);
  }

  // repeated .afisha.storage.GalleryImageInfo gallery = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gallery_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->gallery(static_cast<int>(i)), deterministic, target);
  }

  // repeated .afisha.storage.ActorInfo actors = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->actors(static_cast<int>(i)), deterministic, target);
  }

  // repeated string producers = 13;
  for (int i = 0, n = this->producers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->producers(i).data(), static_cast<int>(this->producers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.producers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->producers(i), target);
  }

  // repeated string directors = 14;
  for (int i = 0, n = this->directors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->directors(i).data(), static_cast<int>(this->directors(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.directors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->directors(i), target);
  }

  // repeated string genres = 15;
  for (int i = 0, n = this->genres_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genres(i).data(), static_cast<int>(this->genres(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.genres");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->genres(i), target);
  }

  // repeated string countries = 16;
  for (int i = 0, n = this->countries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->countries(i).data(), static_cast<int>(this->countries(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.countries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->countries(i), target);
  }

  // optional string gallery_url = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gallery_url().data(), static_cast<int>(this->gallery_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.gallery_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->gallery_url(), target);
  }

  // optional string review_url = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->review_url().data(), static_cast<int>(this->review_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.review_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->review_url(), target);
  }

  // optional string ticket_url = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket_url().data(), static_cast<int>(this->ticket_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.ticket_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->ticket_url(), target);
  }

  // optional string kinopoisk_url = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kinopoisk_url().data(), static_cast<int>(this->kinopoisk_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.kinopoisk_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->kinopoisk_url(), target);
  }

  // optional string trailer_url = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trailer_url().data(), static_cast<int>(this->trailer_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.trailer_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->trailer_url(), target);
  }

  // optional string trailer_source_url = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trailer_source_url().data(), static_cast<int>(this->trailer_source_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.trailer_source_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->trailer_source_url(), target);
  }

  // optional string imdb_url = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imdb_url().data(), static_cast<int>(this->imdb_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.imdb_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->imdb_url(), target);
  }

  // optional uint32 duration = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->duration(), target);
  }

  // optional float imdb_rating = 25;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->imdb_rating(), target);
  }

  // optional int32 mail_rating_count = 26;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->mail_rating_count(), target);
  }

  // optional float mail_rating_min = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->mail_rating_min(), target);
  }

  // optional float mail_rating_max = 28;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->mail_rating_max(), target);
  }

  // optional float mail_rating = 29;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->mail_rating(), target);
  }

  // optional uint32 age_restriction = 30;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->age_restriction(), target);
  }

  // optional int32 year = 31;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->year(), target);
  }

  // optional string site = 32;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site().data(), static_cast<int>(this->site().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.MovieInfo.site");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->site(), target);
  }

  // optional .afisha.storage.ImageInfo m_image = 33;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->m_image_, deterministic, target);
  }

  // optional .afisha.storage.ImageInfo tel_image = 34;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->tel_image_, deterministic, target);
  }

  // optional .afisha.storage.ImageInfo touch_image = 35;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->touch_image_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afisha.storage.MovieInfo)
  return target;
}

size_t MovieInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:afisha.storage.MovieInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_url()) {
    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_status()) {
    // required .afisha.storage.MovieStatus status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t MovieInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afisha.storage.MovieInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x10020003) ^ 0x10020003) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required .afisha.storage.MovieStatus status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .afisha.storage.GalleryImageInfo gallery = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->gallery_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gallery(static_cast<int>(i)));
    }
  }

  // repeated .afisha.storage.ActorInfo actors = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->actors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actors(static_cast<int>(i)));
    }
  }

  // repeated string producers = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->producers_size());
  for (int i = 0, n = this->producers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->producers(i));
  }

  // repeated string directors = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->directors_size());
  for (int i = 0, n = this->directors_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->directors(i));
  }

  // repeated string genres = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->genres_size());
  for (int i = 0, n = this->genres_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->genres(i));
  }

  // repeated string countries = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->countries_size());
  for (int i = 0, n = this->countries_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->countries(i));
  }

  if (_has_bits_[0 / 32] & 252u) {
    // optional string original_name = 5;
    if (has_original_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_name());
    }

    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string review = 7;
    if (has_review()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->review());
    }

    // optional string gallery_url = 17;
    if (has_gallery_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gallery_url());
    }

    // optional string review_url = 18;
    if (has_review_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->review_url());
    }

    // optional string ticket_url = 19;
    if (has_ticket_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket_url());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string kinopoisk_url = 20;
    if (has_kinopoisk_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kinopoisk_url());
    }

    // optional string trailer_url = 21;
    if (has_trailer_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trailer_url());
    }

    // optional string trailer_source_url = 22;
    if (has_trailer_source_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trailer_source_url());
    }

    // optional string imdb_url = 23;
    if (has_imdb_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imdb_url());
    }

    // optional string site = 32;
    if (has_site()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site());
    }

    // optional .afisha.storage.ImageInfo image = 10;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_);
    }

    // optional .afisha.storage.ImageInfo m_image = 33;
    if (has_m_image()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->m_image_);
    }

    // optional .afisha.storage.ImageInfo tel_image = 34;
    if (has_tel_image()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tel_image_);
    }

  }
  // optional .afisha.storage.ImageInfo touch_image = 35;
  if (has_touch_image()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->touch_image_);
  }

  if (_has_bits_[16 / 32] & 16515072u) {
    // optional uint64 release = 8;
    if (has_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->release());
    }

    // optional uint64 release_ru = 9;
    if (has_release_ru()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->release_ru());
    }

    // optional uint32 duration = 24;
    if (has_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional float imdb_rating = 25;
    if (has_imdb_rating()) {
      total_size += 2 + 4;
    }

    // optional int32 mail_rating_count = 26;
    if (has_mail_rating_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_rating_count());
    }

    // optional float mail_rating_min = 27;
    if (has_mail_rating_min()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional float mail_rating_max = 28;
    if (has_mail_rating_max()) {
      total_size += 2 + 4;
    }

    // optional float mail_rating = 29;
    if (has_mail_rating()) {
      total_size += 2 + 4;
    }

    // optional uint32 age_restriction = 30;
    if (has_age_restriction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age_restriction());
    }

    // optional int32 year = 31;
    if (has_year()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MovieInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:afisha.storage.MovieInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MovieInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MovieInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:afisha.storage.MovieInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:afisha.storage.MovieInfo)
    MergeFrom(*source);
  }
}

void MovieInfo::MergeFrom(const MovieInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afisha.storage.MovieInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gallery_.MergeFrom(from.gallery_);
  actors_.MergeFrom(from.actors_);
  producers_.MergeFrom(from.producers_);
  directors_.MergeFrom(from.directors_);
  genres_.MergeFrom(from.genres_);
  countries_.MergeFrom(from.countries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_original_name();
      original_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_review();
      review_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.review_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_gallery_url();
      gallery_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gallery_url_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_review_url();
      review_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.review_url_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_ticket_url();
      ticket_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_url_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_kinopoisk_url();
      kinopoisk_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kinopoisk_url_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_trailer_url();
      trailer_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trailer_url_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_trailer_source_url();
      trailer_source_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trailer_source_url_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_imdb_url();
      imdb_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imdb_url_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_site();
      site_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.site_);
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_image()->::afisha::storage::ImageInfo::MergeFrom(from.image());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_m_image()->::afisha::storage::ImageInfo::MergeFrom(from.m_image());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_tel_image()->::afisha::storage::ImageInfo::MergeFrom(from.tel_image());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_touch_image()->::afisha::storage::ImageInfo::MergeFrom(from.touch_image());
    }
    if (cached_has_bits & 0x00020000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00040000u) {
      release_ = from.release_;
    }
    if (cached_has_bits & 0x00080000u) {
      release_ru_ = from.release_ru_;
    }
    if (cached_has_bits & 0x00100000u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00200000u) {
      imdb_rating_ = from.imdb_rating_;
    }
    if (cached_has_bits & 0x00400000u) {
      mail_rating_count_ = from.mail_rating_count_;
    }
    if (cached_has_bits & 0x00800000u) {
      mail_rating_min_ = from.mail_rating_min_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 520093696u) {
    if (cached_has_bits & 0x01000000u) {
      mail_rating_max_ = from.mail_rating_max_;
    }
    if (cached_has_bits & 0x02000000u) {
      mail_rating_ = from.mail_rating_;
    }
    if (cached_has_bits & 0x04000000u) {
      age_restriction_ = from.age_restriction_;
    }
    if (cached_has_bits & 0x08000000u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x10000000u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MovieInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:afisha.storage.MovieInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieInfo::CopyFrom(const MovieInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afisha.storage.MovieInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x10020003) != 0x10020003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->actors())) return false;
  return true;
}

void MovieInfo::Swap(MovieInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MovieInfo::InternalSwap(MovieInfo* other) {
  using std::swap;
  gallery_.InternalSwap(&other->gallery_);
  actors_.InternalSwap(&other->actors_);
  producers_.InternalSwap(&other->producers_);
  directors_.InternalSwap(&other->directors_);
  genres_.InternalSwap(&other->genres_);
  countries_.InternalSwap(&other->countries_);
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  original_name_.Swap(&other->original_name_);
  description_.Swap(&other->description_);
  review_.Swap(&other->review_);
  gallery_url_.Swap(&other->gallery_url_);
  review_url_.Swap(&other->review_url_);
  ticket_url_.Swap(&other->ticket_url_);
  kinopoisk_url_.Swap(&other->kinopoisk_url_);
  trailer_url_.Swap(&other->trailer_url_);
  trailer_source_url_.Swap(&other->trailer_source_url_);
  imdb_url_.Swap(&other->imdb_url_);
  site_.Swap(&other->site_);
  swap(image_, other->image_);
  swap(m_image_, other->m_image_);
  swap(tel_image_, other->tel_image_);
  swap(touch_image_, other->touch_image_);
  swap(id_, other->id_);
  swap(release_, other->release_);
  swap(release_ru_, other->release_ru_);
  swap(duration_, other->duration_);
  swap(imdb_rating_, other->imdb_rating_);
  swap(mail_rating_count_, other->mail_rating_count_);
  swap(mail_rating_min_, other->mail_rating_min_);
  swap(mail_rating_max_, other->mail_rating_max_);
  swap(mail_rating_, other->mail_rating_);
  swap(age_restriction_, other->age_restriction_);
  swap(year_, other->year_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MovieInfo::GetMetadata() const {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MovieInfo

// required uint64 id = 1;
bool MovieInfo::has_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void MovieInfo::set_has_id() {
  _has_bits_[0] |= 0x00020000u;
}
void MovieInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void MovieInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 MovieInfo::id() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.id)
  return id_;
}
void MovieInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.id)
}

// required string name = 2;
bool MovieInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MovieInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MovieInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MovieInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& MovieInfo::name() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.name)
  return name_.GetNoArena();
}
void MovieInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.name)
}
#if LANG_CXX11
void MovieInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.name)
}
#endif
void MovieInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.name)
}
void MovieInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.name)
}
::std::string* MovieInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_name() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.name)
}

// required string url = 3;
bool MovieInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MovieInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void MovieInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void MovieInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& MovieInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.url)
  return url_.GetNoArena();
}
void MovieInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.url)
}
#if LANG_CXX11
void MovieInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.url)
}
#endif
void MovieInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.url)
}
void MovieInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.url)
}
::std::string* MovieInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.url)
}

// required .afisha.storage.MovieStatus status = 4;
bool MovieInfo::has_status() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void MovieInfo::set_has_status() {
  _has_bits_[0] |= 0x10000000u;
}
void MovieInfo::clear_has_status() {
  _has_bits_[0] &= ~0x10000000u;
}
void MovieInfo::clear_status() {
  status_ = 1;
  clear_has_status();
}
::afisha::storage::MovieStatus MovieInfo::status() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.status)
  return static_cast< ::afisha::storage::MovieStatus >(status_);
}
void MovieInfo::set_status(::afisha::storage::MovieStatus value) {
  assert(::afisha::storage::MovieStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.status)
}

// optional string original_name = 5;
bool MovieInfo::has_original_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MovieInfo::set_has_original_name() {
  _has_bits_[0] |= 0x00000004u;
}
void MovieInfo::clear_has_original_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void MovieInfo::clear_original_name() {
  original_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_name();
}
const ::std::string& MovieInfo::original_name() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.original_name)
  return original_name_.GetNoArena();
}
void MovieInfo::set_original_name(const ::std::string& value) {
  set_has_original_name();
  original_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.original_name)
}
#if LANG_CXX11
void MovieInfo::set_original_name(::std::string&& value) {
  set_has_original_name();
  original_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.original_name)
}
#endif
void MovieInfo::set_original_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_name();
  original_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.original_name)
}
void MovieInfo::set_original_name(const char* value, size_t size) {
  set_has_original_name();
  original_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.original_name)
}
::std::string* MovieInfo::mutable_original_name() {
  set_has_original_name();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.original_name)
  return original_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_original_name() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.original_name)
  clear_has_original_name();
  return original_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_original_name(::std::string* original_name) {
  if (original_name != NULL) {
    set_has_original_name();
  } else {
    clear_has_original_name();
  }
  original_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_name);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.original_name)
}

// optional string description = 6;
bool MovieInfo::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MovieInfo::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
void MovieInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
void MovieInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& MovieInfo::description() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.description)
  return description_.GetNoArena();
}
void MovieInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.description)
}
#if LANG_CXX11
void MovieInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.description)
}
#endif
void MovieInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.description)
}
void MovieInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.description)
}
::std::string* MovieInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_description() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.description)
}

// optional string review = 7;
bool MovieInfo::has_review() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MovieInfo::set_has_review() {
  _has_bits_[0] |= 0x00000010u;
}
void MovieInfo::clear_has_review() {
  _has_bits_[0] &= ~0x00000010u;
}
void MovieInfo::clear_review() {
  review_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_review();
}
const ::std::string& MovieInfo::review() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.review)
  return review_.GetNoArena();
}
void MovieInfo::set_review(const ::std::string& value) {
  set_has_review();
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.review)
}
#if LANG_CXX11
void MovieInfo::set_review(::std::string&& value) {
  set_has_review();
  review_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.review)
}
#endif
void MovieInfo::set_review(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_review();
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.review)
}
void MovieInfo::set_review(const char* value, size_t size) {
  set_has_review();
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.review)
}
::std::string* MovieInfo::mutable_review() {
  set_has_review();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.review)
  return review_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_review() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.review)
  clear_has_review();
  return review_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_review(::std::string* review) {
  if (review != NULL) {
    set_has_review();
  } else {
    clear_has_review();
  }
  review_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), review);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.review)
}

// optional uint64 release = 8;
bool MovieInfo::has_release() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void MovieInfo::set_has_release() {
  _has_bits_[0] |= 0x00040000u;
}
void MovieInfo::clear_has_release() {
  _has_bits_[0] &= ~0x00040000u;
}
void MovieInfo::clear_release() {
  release_ = GOOGLE_ULONGLONG(0);
  clear_has_release();
}
::google::protobuf::uint64 MovieInfo::release() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.release)
  return release_;
}
void MovieInfo::set_release(::google::protobuf::uint64 value) {
  set_has_release();
  release_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.release)
}

// optional uint64 release_ru = 9;
bool MovieInfo::has_release_ru() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void MovieInfo::set_has_release_ru() {
  _has_bits_[0] |= 0x00080000u;
}
void MovieInfo::clear_has_release_ru() {
  _has_bits_[0] &= ~0x00080000u;
}
void MovieInfo::clear_release_ru() {
  release_ru_ = GOOGLE_ULONGLONG(0);
  clear_has_release_ru();
}
::google::protobuf::uint64 MovieInfo::release_ru() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.release_ru)
  return release_ru_;
}
void MovieInfo::set_release_ru(::google::protobuf::uint64 value) {
  set_has_release_ru();
  release_ru_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.release_ru)
}

// optional .afisha.storage.ImageInfo image = 10;
bool MovieInfo::has_image() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MovieInfo::set_has_image() {
  _has_bits_[0] |= 0x00002000u;
}
void MovieInfo::clear_has_image() {
  _has_bits_[0] &= ~0x00002000u;
}
void MovieInfo::clear_image() {
  if (image_ != NULL) image_->::afisha::storage::ImageInfo::Clear();
  clear_has_image();
}
const ::afisha::storage::ImageInfo& MovieInfo::image() const {
  const ::afisha::storage::ImageInfo* p = image_;
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
::afisha::storage::ImageInfo* MovieInfo::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.image)
  return image_;
}
::afisha::storage::ImageInfo* MovieInfo::release_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.image)
  clear_has_image();
  ::afisha::storage::ImageInfo* temp = image_;
  image_ = NULL;
  return temp;
}
void MovieInfo::set_allocated_image(::afisha::storage::ImageInfo* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.image)
}

// optional .afisha.storage.ImageInfo m_image = 33;
bool MovieInfo::has_m_image() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void MovieInfo::set_has_m_image() {
  _has_bits_[0] |= 0x00004000u;
}
void MovieInfo::clear_has_m_image() {
  _has_bits_[0] &= ~0x00004000u;
}
void MovieInfo::clear_m_image() {
  if (m_image_ != NULL) m_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_m_image();
}
const ::afisha::storage::ImageInfo& MovieInfo::m_image() const {
  const ::afisha::storage::ImageInfo* p = m_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.m_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
::afisha::storage::ImageInfo* MovieInfo::mutable_m_image() {
  set_has_m_image();
  if (m_image_ == NULL) {
    m_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.m_image)
  return m_image_;
}
::afisha::storage::ImageInfo* MovieInfo::release_m_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.m_image)
  clear_has_m_image();
  ::afisha::storage::ImageInfo* temp = m_image_;
  m_image_ = NULL;
  return temp;
}
void MovieInfo::set_allocated_m_image(::afisha::storage::ImageInfo* m_image) {
  delete m_image_;
  m_image_ = m_image;
  if (m_image) {
    set_has_m_image();
  } else {
    clear_has_m_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.m_image)
}

// optional .afisha.storage.ImageInfo tel_image = 34;
bool MovieInfo::has_tel_image() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void MovieInfo::set_has_tel_image() {
  _has_bits_[0] |= 0x00008000u;
}
void MovieInfo::clear_has_tel_image() {
  _has_bits_[0] &= ~0x00008000u;
}
void MovieInfo::clear_tel_image() {
  if (tel_image_ != NULL) tel_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_tel_image();
}
const ::afisha::storage::ImageInfo& MovieInfo::tel_image() const {
  const ::afisha::storage::ImageInfo* p = tel_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.tel_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
::afisha::storage::ImageInfo* MovieInfo::mutable_tel_image() {
  set_has_tel_image();
  if (tel_image_ == NULL) {
    tel_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.tel_image)
  return tel_image_;
}
::afisha::storage::ImageInfo* MovieInfo::release_tel_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.tel_image)
  clear_has_tel_image();
  ::afisha::storage::ImageInfo* temp = tel_image_;
  tel_image_ = NULL;
  return temp;
}
void MovieInfo::set_allocated_tel_image(::afisha::storage::ImageInfo* tel_image) {
  delete tel_image_;
  tel_image_ = tel_image;
  if (tel_image) {
    set_has_tel_image();
  } else {
    clear_has_tel_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.tel_image)
}

// optional .afisha.storage.ImageInfo touch_image = 35;
bool MovieInfo::has_touch_image() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void MovieInfo::set_has_touch_image() {
  _has_bits_[0] |= 0x00010000u;
}
void MovieInfo::clear_has_touch_image() {
  _has_bits_[0] &= ~0x00010000u;
}
void MovieInfo::clear_touch_image() {
  if (touch_image_ != NULL) touch_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_touch_image();
}
const ::afisha::storage::ImageInfo& MovieInfo::touch_image() const {
  const ::afisha::storage::ImageInfo* p = touch_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.touch_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
::afisha::storage::ImageInfo* MovieInfo::mutable_touch_image() {
  set_has_touch_image();
  if (touch_image_ == NULL) {
    touch_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.touch_image)
  return touch_image_;
}
::afisha::storage::ImageInfo* MovieInfo::release_touch_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.touch_image)
  clear_has_touch_image();
  ::afisha::storage::ImageInfo* temp = touch_image_;
  touch_image_ = NULL;
  return temp;
}
void MovieInfo::set_allocated_touch_image(::afisha::storage::ImageInfo* touch_image) {
  delete touch_image_;
  touch_image_ = touch_image;
  if (touch_image) {
    set_has_touch_image();
  } else {
    clear_has_touch_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.touch_image)
}

// repeated .afisha.storage.GalleryImageInfo gallery = 11;
int MovieInfo::gallery_size() const {
  return gallery_.size();
}
void MovieInfo::clear_gallery() {
  gallery_.Clear();
}
const ::afisha::storage::GalleryImageInfo& MovieInfo::gallery(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.gallery)
  return gallery_.Get(index);
}
::afisha::storage::GalleryImageInfo* MovieInfo::mutable_gallery(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.gallery)
  return gallery_.Mutable(index);
}
::afisha::storage::GalleryImageInfo* MovieInfo::add_gallery() {
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.gallery)
  return gallery_.Add();
}
::google::protobuf::RepeatedPtrField< ::afisha::storage::GalleryImageInfo >*
MovieInfo::mutable_gallery() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.gallery)
  return &gallery_;
}
const ::google::protobuf::RepeatedPtrField< ::afisha::storage::GalleryImageInfo >&
MovieInfo::gallery() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.gallery)
  return gallery_;
}

// repeated .afisha.storage.ActorInfo actors = 12;
int MovieInfo::actors_size() const {
  return actors_.size();
}
void MovieInfo::clear_actors() {
  actors_.Clear();
}
const ::afisha::storage::ActorInfo& MovieInfo::actors(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.actors)
  return actors_.Get(index);
}
::afisha::storage::ActorInfo* MovieInfo::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.actors)
  return actors_.Mutable(index);
}
::afisha::storage::ActorInfo* MovieInfo::add_actors() {
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.actors)
  return actors_.Add();
}
::google::protobuf::RepeatedPtrField< ::afisha::storage::ActorInfo >*
MovieInfo::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.actors)
  return &actors_;
}
const ::google::protobuf::RepeatedPtrField< ::afisha::storage::ActorInfo >&
MovieInfo::actors() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.actors)
  return actors_;
}

// repeated string producers = 13;
int MovieInfo::producers_size() const {
  return producers_.size();
}
void MovieInfo::clear_producers() {
  producers_.Clear();
}
const ::std::string& MovieInfo::producers(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.producers)
  return producers_.Get(index);
}
::std::string* MovieInfo::mutable_producers(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.producers)
  return producers_.Mutable(index);
}
void MovieInfo::set_producers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.producers)
  producers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MovieInfo::set_producers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.producers)
  producers_.Mutable(index)->assign(std::move(value));
}
#endif
void MovieInfo::set_producers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  producers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.producers)
}
void MovieInfo::set_producers(int index, const char* value, size_t size) {
  producers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.producers)
}
::std::string* MovieInfo::add_producers() {
  // @@protoc_insertion_point(field_add_mutable:afisha.storage.MovieInfo.producers)
  return producers_.Add();
}
void MovieInfo::add_producers(const ::std::string& value) {
  producers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.producers)
}
#if LANG_CXX11
void MovieInfo::add_producers(::std::string&& value) {
  producers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.producers)
}
#endif
void MovieInfo::add_producers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  producers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afisha.storage.MovieInfo.producers)
}
void MovieInfo::add_producers(const char* value, size_t size) {
  producers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afisha.storage.MovieInfo.producers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MovieInfo::producers() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.producers)
  return producers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MovieInfo::mutable_producers() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.producers)
  return &producers_;
}

// repeated string directors = 14;
int MovieInfo::directors_size() const {
  return directors_.size();
}
void MovieInfo::clear_directors() {
  directors_.Clear();
}
const ::std::string& MovieInfo::directors(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.directors)
  return directors_.Get(index);
}
::std::string* MovieInfo::mutable_directors(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.directors)
  return directors_.Mutable(index);
}
void MovieInfo::set_directors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.directors)
  directors_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MovieInfo::set_directors(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.directors)
  directors_.Mutable(index)->assign(std::move(value));
}
#endif
void MovieInfo::set_directors(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  directors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.directors)
}
void MovieInfo::set_directors(int index, const char* value, size_t size) {
  directors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.directors)
}
::std::string* MovieInfo::add_directors() {
  // @@protoc_insertion_point(field_add_mutable:afisha.storage.MovieInfo.directors)
  return directors_.Add();
}
void MovieInfo::add_directors(const ::std::string& value) {
  directors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.directors)
}
#if LANG_CXX11
void MovieInfo::add_directors(::std::string&& value) {
  directors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.directors)
}
#endif
void MovieInfo::add_directors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  directors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afisha.storage.MovieInfo.directors)
}
void MovieInfo::add_directors(const char* value, size_t size) {
  directors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afisha.storage.MovieInfo.directors)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MovieInfo::directors() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.directors)
  return directors_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MovieInfo::mutable_directors() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.directors)
  return &directors_;
}

// repeated string genres = 15;
int MovieInfo::genres_size() const {
  return genres_.size();
}
void MovieInfo::clear_genres() {
  genres_.Clear();
}
const ::std::string& MovieInfo::genres(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.genres)
  return genres_.Get(index);
}
::std::string* MovieInfo::mutable_genres(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.genres)
  return genres_.Mutable(index);
}
void MovieInfo::set_genres(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.genres)
  genres_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MovieInfo::set_genres(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.genres)
  genres_.Mutable(index)->assign(std::move(value));
}
#endif
void MovieInfo::set_genres(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  genres_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.genres)
}
void MovieInfo::set_genres(int index, const char* value, size_t size) {
  genres_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.genres)
}
::std::string* MovieInfo::add_genres() {
  // @@protoc_insertion_point(field_add_mutable:afisha.storage.MovieInfo.genres)
  return genres_.Add();
}
void MovieInfo::add_genres(const ::std::string& value) {
  genres_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.genres)
}
#if LANG_CXX11
void MovieInfo::add_genres(::std::string&& value) {
  genres_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.genres)
}
#endif
void MovieInfo::add_genres(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  genres_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afisha.storage.MovieInfo.genres)
}
void MovieInfo::add_genres(const char* value, size_t size) {
  genres_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afisha.storage.MovieInfo.genres)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MovieInfo::genres() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.genres)
  return genres_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MovieInfo::mutable_genres() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.genres)
  return &genres_;
}

// repeated string countries = 16;
int MovieInfo::countries_size() const {
  return countries_.size();
}
void MovieInfo::clear_countries() {
  countries_.Clear();
}
const ::std::string& MovieInfo::countries(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.countries)
  return countries_.Get(index);
}
::std::string* MovieInfo::mutable_countries(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.countries)
  return countries_.Mutable(index);
}
void MovieInfo::set_countries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.countries)
  countries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void MovieInfo::set_countries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.countries)
  countries_.Mutable(index)->assign(std::move(value));
}
#endif
void MovieInfo::set_countries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  countries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.countries)
}
void MovieInfo::set_countries(int index, const char* value, size_t size) {
  countries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.countries)
}
::std::string* MovieInfo::add_countries() {
  // @@protoc_insertion_point(field_add_mutable:afisha.storage.MovieInfo.countries)
  return countries_.Add();
}
void MovieInfo::add_countries(const ::std::string& value) {
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.countries)
}
#if LANG_CXX11
void MovieInfo::add_countries(::std::string&& value) {
  countries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.countries)
}
#endif
void MovieInfo::add_countries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afisha.storage.MovieInfo.countries)
}
void MovieInfo::add_countries(const char* value, size_t size) {
  countries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afisha.storage.MovieInfo.countries)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MovieInfo::countries() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.countries)
  return countries_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MovieInfo::mutable_countries() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.countries)
  return &countries_;
}

// optional string gallery_url = 17;
bool MovieInfo::has_gallery_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MovieInfo::set_has_gallery_url() {
  _has_bits_[0] |= 0x00000020u;
}
void MovieInfo::clear_has_gallery_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void MovieInfo::clear_gallery_url() {
  gallery_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gallery_url();
}
const ::std::string& MovieInfo::gallery_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.gallery_url)
  return gallery_url_.GetNoArena();
}
void MovieInfo::set_gallery_url(const ::std::string& value) {
  set_has_gallery_url();
  gallery_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.gallery_url)
}
#if LANG_CXX11
void MovieInfo::set_gallery_url(::std::string&& value) {
  set_has_gallery_url();
  gallery_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.gallery_url)
}
#endif
void MovieInfo::set_gallery_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gallery_url();
  gallery_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.gallery_url)
}
void MovieInfo::set_gallery_url(const char* value, size_t size) {
  set_has_gallery_url();
  gallery_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.gallery_url)
}
::std::string* MovieInfo::mutable_gallery_url() {
  set_has_gallery_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.gallery_url)
  return gallery_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_gallery_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.gallery_url)
  clear_has_gallery_url();
  return gallery_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_gallery_url(::std::string* gallery_url) {
  if (gallery_url != NULL) {
    set_has_gallery_url();
  } else {
    clear_has_gallery_url();
  }
  gallery_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gallery_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.gallery_url)
}

// optional string review_url = 18;
bool MovieInfo::has_review_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MovieInfo::set_has_review_url() {
  _has_bits_[0] |= 0x00000040u;
}
void MovieInfo::clear_has_review_url() {
  _has_bits_[0] &= ~0x00000040u;
}
void MovieInfo::clear_review_url() {
  review_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_review_url();
}
const ::std::string& MovieInfo::review_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.review_url)
  return review_url_.GetNoArena();
}
void MovieInfo::set_review_url(const ::std::string& value) {
  set_has_review_url();
  review_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.review_url)
}
#if LANG_CXX11
void MovieInfo::set_review_url(::std::string&& value) {
  set_has_review_url();
  review_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.review_url)
}
#endif
void MovieInfo::set_review_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_review_url();
  review_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.review_url)
}
void MovieInfo::set_review_url(const char* value, size_t size) {
  set_has_review_url();
  review_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.review_url)
}
::std::string* MovieInfo::mutable_review_url() {
  set_has_review_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.review_url)
  return review_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_review_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.review_url)
  clear_has_review_url();
  return review_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_review_url(::std::string* review_url) {
  if (review_url != NULL) {
    set_has_review_url();
  } else {
    clear_has_review_url();
  }
  review_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), review_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.review_url)
}

// optional string ticket_url = 19;
bool MovieInfo::has_ticket_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MovieInfo::set_has_ticket_url() {
  _has_bits_[0] |= 0x00000080u;
}
void MovieInfo::clear_has_ticket_url() {
  _has_bits_[0] &= ~0x00000080u;
}
void MovieInfo::clear_ticket_url() {
  ticket_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket_url();
}
const ::std::string& MovieInfo::ticket_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.ticket_url)
  return ticket_url_.GetNoArena();
}
void MovieInfo::set_ticket_url(const ::std::string& value) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.ticket_url)
}
#if LANG_CXX11
void MovieInfo::set_ticket_url(::std::string&& value) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.ticket_url)
}
#endif
void MovieInfo::set_ticket_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.ticket_url)
}
void MovieInfo::set_ticket_url(const char* value, size_t size) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.ticket_url)
}
::std::string* MovieInfo::mutable_ticket_url() {
  set_has_ticket_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.ticket_url)
  return ticket_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_ticket_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.ticket_url)
  clear_has_ticket_url();
  return ticket_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_ticket_url(::std::string* ticket_url) {
  if (ticket_url != NULL) {
    set_has_ticket_url();
  } else {
    clear_has_ticket_url();
  }
  ticket_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.ticket_url)
}

// optional string kinopoisk_url = 20;
bool MovieInfo::has_kinopoisk_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MovieInfo::set_has_kinopoisk_url() {
  _has_bits_[0] |= 0x00000100u;
}
void MovieInfo::clear_has_kinopoisk_url() {
  _has_bits_[0] &= ~0x00000100u;
}
void MovieInfo::clear_kinopoisk_url() {
  kinopoisk_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kinopoisk_url();
}
const ::std::string& MovieInfo::kinopoisk_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.kinopoisk_url)
  return kinopoisk_url_.GetNoArena();
}
void MovieInfo::set_kinopoisk_url(const ::std::string& value) {
  set_has_kinopoisk_url();
  kinopoisk_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.kinopoisk_url)
}
#if LANG_CXX11
void MovieInfo::set_kinopoisk_url(::std::string&& value) {
  set_has_kinopoisk_url();
  kinopoisk_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.kinopoisk_url)
}
#endif
void MovieInfo::set_kinopoisk_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kinopoisk_url();
  kinopoisk_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.kinopoisk_url)
}
void MovieInfo::set_kinopoisk_url(const char* value, size_t size) {
  set_has_kinopoisk_url();
  kinopoisk_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.kinopoisk_url)
}
::std::string* MovieInfo::mutable_kinopoisk_url() {
  set_has_kinopoisk_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.kinopoisk_url)
  return kinopoisk_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_kinopoisk_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.kinopoisk_url)
  clear_has_kinopoisk_url();
  return kinopoisk_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_kinopoisk_url(::std::string* kinopoisk_url) {
  if (kinopoisk_url != NULL) {
    set_has_kinopoisk_url();
  } else {
    clear_has_kinopoisk_url();
  }
  kinopoisk_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kinopoisk_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.kinopoisk_url)
}

// optional string trailer_url = 21;
bool MovieInfo::has_trailer_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MovieInfo::set_has_trailer_url() {
  _has_bits_[0] |= 0x00000200u;
}
void MovieInfo::clear_has_trailer_url() {
  _has_bits_[0] &= ~0x00000200u;
}
void MovieInfo::clear_trailer_url() {
  trailer_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trailer_url();
}
const ::std::string& MovieInfo::trailer_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.trailer_url)
  return trailer_url_.GetNoArena();
}
void MovieInfo::set_trailer_url(const ::std::string& value) {
  set_has_trailer_url();
  trailer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.trailer_url)
}
#if LANG_CXX11
void MovieInfo::set_trailer_url(::std::string&& value) {
  set_has_trailer_url();
  trailer_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.trailer_url)
}
#endif
void MovieInfo::set_trailer_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trailer_url();
  trailer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.trailer_url)
}
void MovieInfo::set_trailer_url(const char* value, size_t size) {
  set_has_trailer_url();
  trailer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.trailer_url)
}
::std::string* MovieInfo::mutable_trailer_url() {
  set_has_trailer_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.trailer_url)
  return trailer_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_trailer_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.trailer_url)
  clear_has_trailer_url();
  return trailer_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_trailer_url(::std::string* trailer_url) {
  if (trailer_url != NULL) {
    set_has_trailer_url();
  } else {
    clear_has_trailer_url();
  }
  trailer_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trailer_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.trailer_url)
}

// optional string trailer_source_url = 22;
bool MovieInfo::has_trailer_source_url() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MovieInfo::set_has_trailer_source_url() {
  _has_bits_[0] |= 0x00000400u;
}
void MovieInfo::clear_has_trailer_source_url() {
  _has_bits_[0] &= ~0x00000400u;
}
void MovieInfo::clear_trailer_source_url() {
  trailer_source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trailer_source_url();
}
const ::std::string& MovieInfo::trailer_source_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.trailer_source_url)
  return trailer_source_url_.GetNoArena();
}
void MovieInfo::set_trailer_source_url(const ::std::string& value) {
  set_has_trailer_source_url();
  trailer_source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.trailer_source_url)
}
#if LANG_CXX11
void MovieInfo::set_trailer_source_url(::std::string&& value) {
  set_has_trailer_source_url();
  trailer_source_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.trailer_source_url)
}
#endif
void MovieInfo::set_trailer_source_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trailer_source_url();
  trailer_source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.trailer_source_url)
}
void MovieInfo::set_trailer_source_url(const char* value, size_t size) {
  set_has_trailer_source_url();
  trailer_source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.trailer_source_url)
}
::std::string* MovieInfo::mutable_trailer_source_url() {
  set_has_trailer_source_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.trailer_source_url)
  return trailer_source_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_trailer_source_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.trailer_source_url)
  clear_has_trailer_source_url();
  return trailer_source_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_trailer_source_url(::std::string* trailer_source_url) {
  if (trailer_source_url != NULL) {
    set_has_trailer_source_url();
  } else {
    clear_has_trailer_source_url();
  }
  trailer_source_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trailer_source_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.trailer_source_url)
}

// optional string imdb_url = 23;
bool MovieInfo::has_imdb_url() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MovieInfo::set_has_imdb_url() {
  _has_bits_[0] |= 0x00000800u;
}
void MovieInfo::clear_has_imdb_url() {
  _has_bits_[0] &= ~0x00000800u;
}
void MovieInfo::clear_imdb_url() {
  imdb_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imdb_url();
}
const ::std::string& MovieInfo::imdb_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.imdb_url)
  return imdb_url_.GetNoArena();
}
void MovieInfo::set_imdb_url(const ::std::string& value) {
  set_has_imdb_url();
  imdb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.imdb_url)
}
#if LANG_CXX11
void MovieInfo::set_imdb_url(::std::string&& value) {
  set_has_imdb_url();
  imdb_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.imdb_url)
}
#endif
void MovieInfo::set_imdb_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imdb_url();
  imdb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.imdb_url)
}
void MovieInfo::set_imdb_url(const char* value, size_t size) {
  set_has_imdb_url();
  imdb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.imdb_url)
}
::std::string* MovieInfo::mutable_imdb_url() {
  set_has_imdb_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.imdb_url)
  return imdb_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_imdb_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.imdb_url)
  clear_has_imdb_url();
  return imdb_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_imdb_url(::std::string* imdb_url) {
  if (imdb_url != NULL) {
    set_has_imdb_url();
  } else {
    clear_has_imdb_url();
  }
  imdb_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imdb_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.imdb_url)
}

// optional uint32 duration = 24;
bool MovieInfo::has_duration() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void MovieInfo::set_has_duration() {
  _has_bits_[0] |= 0x00100000u;
}
void MovieInfo::clear_has_duration() {
  _has_bits_[0] &= ~0x00100000u;
}
void MovieInfo::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 MovieInfo::duration() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.duration)
  return duration_;
}
void MovieInfo::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.duration)
}

// optional float imdb_rating = 25;
bool MovieInfo::has_imdb_rating() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void MovieInfo::set_has_imdb_rating() {
  _has_bits_[0] |= 0x00200000u;
}
void MovieInfo::clear_has_imdb_rating() {
  _has_bits_[0] &= ~0x00200000u;
}
void MovieInfo::clear_imdb_rating() {
  imdb_rating_ = 0;
  clear_has_imdb_rating();
}
float MovieInfo::imdb_rating() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.imdb_rating)
  return imdb_rating_;
}
void MovieInfo::set_imdb_rating(float value) {
  set_has_imdb_rating();
  imdb_rating_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.imdb_rating)
}

// optional int32 mail_rating_count = 26;
bool MovieInfo::has_mail_rating_count() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void MovieInfo::set_has_mail_rating_count() {
  _has_bits_[0] |= 0x00400000u;
}
void MovieInfo::clear_has_mail_rating_count() {
  _has_bits_[0] &= ~0x00400000u;
}
void MovieInfo::clear_mail_rating_count() {
  mail_rating_count_ = 0;
  clear_has_mail_rating_count();
}
::google::protobuf::int32 MovieInfo::mail_rating_count() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.mail_rating_count)
  return mail_rating_count_;
}
void MovieInfo::set_mail_rating_count(::google::protobuf::int32 value) {
  set_has_mail_rating_count();
  mail_rating_count_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.mail_rating_count)
}

// optional float mail_rating_min = 27;
bool MovieInfo::has_mail_rating_min() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void MovieInfo::set_has_mail_rating_min() {
  _has_bits_[0] |= 0x00800000u;
}
void MovieInfo::clear_has_mail_rating_min() {
  _has_bits_[0] &= ~0x00800000u;
}
void MovieInfo::clear_mail_rating_min() {
  mail_rating_min_ = 0;
  clear_has_mail_rating_min();
}
float MovieInfo::mail_rating_min() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.mail_rating_min)
  return mail_rating_min_;
}
void MovieInfo::set_mail_rating_min(float value) {
  set_has_mail_rating_min();
  mail_rating_min_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.mail_rating_min)
}

// optional float mail_rating_max = 28;
bool MovieInfo::has_mail_rating_max() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void MovieInfo::set_has_mail_rating_max() {
  _has_bits_[0] |= 0x01000000u;
}
void MovieInfo::clear_has_mail_rating_max() {
  _has_bits_[0] &= ~0x01000000u;
}
void MovieInfo::clear_mail_rating_max() {
  mail_rating_max_ = 0;
  clear_has_mail_rating_max();
}
float MovieInfo::mail_rating_max() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.mail_rating_max)
  return mail_rating_max_;
}
void MovieInfo::set_mail_rating_max(float value) {
  set_has_mail_rating_max();
  mail_rating_max_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.mail_rating_max)
}

// optional float mail_rating = 29;
bool MovieInfo::has_mail_rating() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void MovieInfo::set_has_mail_rating() {
  _has_bits_[0] |= 0x02000000u;
}
void MovieInfo::clear_has_mail_rating() {
  _has_bits_[0] &= ~0x02000000u;
}
void MovieInfo::clear_mail_rating() {
  mail_rating_ = 0;
  clear_has_mail_rating();
}
float MovieInfo::mail_rating() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.mail_rating)
  return mail_rating_;
}
void MovieInfo::set_mail_rating(float value) {
  set_has_mail_rating();
  mail_rating_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.mail_rating)
}

// optional uint32 age_restriction = 30;
bool MovieInfo::has_age_restriction() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void MovieInfo::set_has_age_restriction() {
  _has_bits_[0] |= 0x04000000u;
}
void MovieInfo::clear_has_age_restriction() {
  _has_bits_[0] &= ~0x04000000u;
}
void MovieInfo::clear_age_restriction() {
  age_restriction_ = 0u;
  clear_has_age_restriction();
}
::google::protobuf::uint32 MovieInfo::age_restriction() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.age_restriction)
  return age_restriction_;
}
void MovieInfo::set_age_restriction(::google::protobuf::uint32 value) {
  set_has_age_restriction();
  age_restriction_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.age_restriction)
}

// optional int32 year = 31;
bool MovieInfo::has_year() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void MovieInfo::set_has_year() {
  _has_bits_[0] |= 0x08000000u;
}
void MovieInfo::clear_has_year() {
  _has_bits_[0] &= ~0x08000000u;
}
void MovieInfo::clear_year() {
  year_ = 0;
  clear_has_year();
}
::google::protobuf::int32 MovieInfo::year() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.year)
  return year_;
}
void MovieInfo::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.year)
}

// optional string site = 32;
bool MovieInfo::has_site() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MovieInfo::set_has_site() {
  _has_bits_[0] |= 0x00001000u;
}
void MovieInfo::clear_has_site() {
  _has_bits_[0] &= ~0x00001000u;
}
void MovieInfo::clear_site() {
  site_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site();
}
const ::std::string& MovieInfo::site() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.site)
  return site_.GetNoArena();
}
void MovieInfo::set_site(const ::std::string& value) {
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.site)
}
#if LANG_CXX11
void MovieInfo::set_site(::std::string&& value) {
  set_has_site();
  site_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.site)
}
#endif
void MovieInfo::set_site(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.site)
}
void MovieInfo::set_site(const char* value, size_t size) {
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.site)
}
::std::string* MovieInfo::mutable_site() {
  set_has_site();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.site)
  return site_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MovieInfo::release_site() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.site)
  clear_has_site();
  return site_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MovieInfo::set_allocated_site(::std::string* site) {
  if (site != NULL) {
    set_has_site();
  } else {
    clear_has_site();
  }
  site_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.site)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TicketPriceInfo::kMinFieldNumber;
const int TicketPriceInfo::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TicketPriceInfo::TicketPriceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:afisha.storage.TicketPriceInfo)
}
TicketPriceInfo::TicketPriceInfo(const TicketPriceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:afisha.storage.TicketPriceInfo)
}

void TicketPriceInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

TicketPriceInfo::~TicketPriceInfo() {
  // @@protoc_insertion_point(destructor:afisha.storage.TicketPriceInfo)
  SharedDtor();
}

void TicketPriceInfo::SharedDtor() {
}

void TicketPriceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketPriceInfo::descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TicketPriceInfo& TicketPriceInfo::default_instance() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

TicketPriceInfo* TicketPriceInfo::New(::google::protobuf::Arena* arena) const {
  TicketPriceInfo* n = new TicketPriceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TicketPriceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afisha.storage.TicketPriceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TicketPriceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:afisha.storage.TicketPriceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:afisha.storage.TicketPriceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:afisha.storage.TicketPriceInfo)
  return false;
#undef DO_
}

void TicketPriceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:afisha.storage.TicketPriceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min(), output);
  }

  // required uint32 max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:afisha.storage.TicketPriceInfo)
}

::google::protobuf::uint8* TicketPriceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:afisha.storage.TicketPriceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min(), target);
  }

  // required uint32 max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afisha.storage.TicketPriceInfo)
  return target;
}

size_t TicketPriceInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:afisha.storage.TicketPriceInfo)
  size_t total_size = 0;

  if (has_min()) {
    // required uint32 min = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min());
  }

  if (has_max()) {
    // required uint32 max = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max());
  }

  return total_size;
}
size_t TicketPriceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afisha.storage.TicketPriceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 min = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min());

    // required uint32 max = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketPriceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:afisha.storage.TicketPriceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TicketPriceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TicketPriceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:afisha.storage.TicketPriceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:afisha.storage.TicketPriceInfo)
    MergeFrom(*source);
  }
}

void TicketPriceInfo::MergeFrom(const TicketPriceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afisha.storage.TicketPriceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TicketPriceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:afisha.storage.TicketPriceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketPriceInfo::CopyFrom(const TicketPriceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afisha.storage.TicketPriceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketPriceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TicketPriceInfo::Swap(TicketPriceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TicketPriceInfo::InternalSwap(TicketPriceInfo* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TicketPriceInfo::GetMetadata() const {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TicketPriceInfo

// required uint32 min = 1;
bool TicketPriceInfo::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TicketPriceInfo::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
void TicketPriceInfo::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void TicketPriceInfo::clear_min() {
  min_ = 0u;
  clear_has_min();
}
::google::protobuf::uint32 TicketPriceInfo::min() const {
  // @@protoc_insertion_point(field_get:afisha.storage.TicketPriceInfo.min)
  return min_;
}
void TicketPriceInfo::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.TicketPriceInfo.min)
}

// required uint32 max = 2;
bool TicketPriceInfo::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TicketPriceInfo::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
void TicketPriceInfo::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void TicketPriceInfo::clear_max() {
  max_ = 0u;
  clear_has_max();
}
::google::protobuf::uint32 TicketPriceInfo::max() const {
  // @@protoc_insertion_point(field_get:afisha.storage.TicketPriceInfo.max)
  return max_;
}
void TicketPriceInfo::set_max(::google::protobuf::uint32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.TicketPriceInfo.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CinemaInfo::kIdFieldNumber;
const int CinemaInfo::kNameFieldNumber;
const int CinemaInfo::kUrlFieldNumber;
const int CinemaInfo::kRbCodeFieldNumber;
const int CinemaInfo::kAddressFieldNumber;
const int CinemaInfo::kLocationFieldNumber;
const int CinemaInfo::kSubwaysFieldNumber;
const int CinemaInfo::kPhoneCommonFieldNumber;
const int CinemaInfo::kPhoneInfobotFieldNumber;
const int CinemaInfo::kMapUrlFieldNumber;
const int CinemaInfo::kScheduleUrlFieldNumber;
const int CinemaInfo::kTicketPriceFieldNumber;
const int CinemaInfo::kTicketUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CinemaInfo::CinemaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:afisha.storage.CinemaInfo)
}
CinemaInfo::CinemaInfo(const CinemaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      subways_(from.subways_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  phone_common_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phone_common()) {
    phone_common_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_common_);
  }
  phone_infobot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phone_infobot()) {
    phone_infobot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_infobot_);
  }
  map_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_url()) {
    map_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_url_);
  }
  schedule_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_schedule_url()) {
    schedule_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedule_url_);
  }
  ticket_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket_url()) {
    ticket_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_url_);
  }
  if (from.has_location()) {
    location_ = new ::afisha::storage::GpsInfo(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_ticket_price()) {
    ticket_price_ = new ::afisha::storage::TicketPriceInfo(*from.ticket_price_);
  } else {
    ticket_price_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rb_code_) -
    reinterpret_cast<char*>(&id_)) + sizeof(rb_code_));
  // @@protoc_insertion_point(copy_constructor:afisha.storage.CinemaInfo)
}

void CinemaInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_common_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_infobot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rb_code_) -
      reinterpret_cast<char*>(&location_)) + sizeof(rb_code_));
}

CinemaInfo::~CinemaInfo() {
  // @@protoc_insertion_point(destructor:afisha.storage.CinemaInfo)
  SharedDtor();
}

void CinemaInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_common_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_infobot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedule_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ticket_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete ticket_price_;
}

void CinemaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CinemaInfo::descriptor() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CinemaInfo& CinemaInfo::default_instance() {
  protobuf_afisha_5fadditive_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CinemaInfo* CinemaInfo::New(::google::protobuf::Arena* arena) const {
  CinemaInfo* n = new CinemaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CinemaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:afisha.storage.CinemaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subways_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!phone_common_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phone_common_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!phone_infobot_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phone_infobot_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!map_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!schedule_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*schedule_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!ticket_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ticket_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::afisha::storage::GpsInfo::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(ticket_price_ != NULL);
      ticket_price_->::afisha::storage::TicketPriceInfo::Clear();
    }
  }
  if (cached_has_bits & 3072u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rb_code_) -
        reinterpret_cast<char*>(&id_)) + sizeof(rb_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CinemaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:afisha.storage.CinemaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.CinemaInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.CinemaInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 rb_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_rb_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rb_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.CinemaInfo.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .afisha.storage.GpsInfo location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string subways = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subways()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subways(this->subways_size() - 1).data(),
            static_cast<int>(this->subways(this->subways_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.CinemaInfo.subways");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phone_common = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_common()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone_common().data(), static_cast<int>(this->phone_common().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.CinemaInfo.phone_common");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phone_infobot = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_infobot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone_infobot().data(), static_cast<int>(this->phone_infobot().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.CinemaInfo.phone_infobot");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_url = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_url().data(), static_cast<int>(this->map_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.CinemaInfo.map_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string schedule_url = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_schedule_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->schedule_url().data(), static_cast<int>(this->schedule_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.CinemaInfo.schedule_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .afisha.storage.TicketPriceInfo ticket_price = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ticket_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ticket_url = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ticket_url().data(), static_cast<int>(this->ticket_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "afisha.storage.CinemaInfo.ticket_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:afisha.storage.CinemaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:afisha.storage.CinemaInfo)
  return false;
#undef DO_
}

void CinemaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:afisha.storage.CinemaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // required uint32 rb_code = 4;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rb_code(), output);
  }

  // required string address = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->address(), output);
  }

  // required .afisha.storage.GpsInfo location = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->location_, output);
  }

  // repeated string subways = 7;
  for (int i = 0, n = this->subways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subways(i).data(), static_cast<int>(this->subways(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.subways");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->subways(i), output);
  }

  // optional string phone_common = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone_common().data(), static_cast<int>(this->phone_common().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.phone_common");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->phone_common(), output);
  }

  // optional string phone_infobot = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone_infobot().data(), static_cast<int>(this->phone_infobot().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.phone_infobot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->phone_infobot(), output);
  }

  // optional string map_url = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_url().data(), static_cast<int>(this->map_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.map_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->map_url(), output);
  }

  // optional string schedule_url = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schedule_url().data(), static_cast<int>(this->schedule_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.schedule_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->schedule_url(), output);
  }

  // optional .afisha.storage.TicketPriceInfo ticket_price = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->ticket_price_, output);
  }

  // optional string ticket_url = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket_url().data(), static_cast<int>(this->ticket_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.ticket_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ticket_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:afisha.storage.CinemaInfo)
}

::google::protobuf::uint8* CinemaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:afisha.storage.CinemaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // required uint32 rb_code = 4;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rb_code(), target);
  }

  // required string address = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->address(), target);
  }

  // required .afisha.storage.GpsInfo location = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->location_, deterministic, target);
  }

  // repeated string subways = 7;
  for (int i = 0, n = this->subways_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subways(i).data(), static_cast<int>(this->subways(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.subways");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->subways(i), target);
  }

  // optional string phone_common = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone_common().data(), static_cast<int>(this->phone_common().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.phone_common");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->phone_common(), target);
  }

  // optional string phone_infobot = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone_infobot().data(), static_cast<int>(this->phone_infobot().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.phone_infobot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->phone_infobot(), target);
  }

  // optional string map_url = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_url().data(), static_cast<int>(this->map_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.map_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->map_url(), target);
  }

  // optional string schedule_url = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->schedule_url().data(), static_cast<int>(this->schedule_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.schedule_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->schedule_url(), target);
  }

  // optional .afisha.storage.TicketPriceInfo ticket_price = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->ticket_price_, deterministic, target);
  }

  // optional string ticket_url = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ticket_url().data(), static_cast<int>(this->ticket_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "afisha.storage.CinemaInfo.ticket_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ticket_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afisha.storage.CinemaInfo)
  return target;
}

size_t CinemaInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:afisha.storage.CinemaInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_url()) {
    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_address()) {
    // required string address = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_location()) {
    // required .afisha.storage.GpsInfo location = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_rb_code()) {
    // required uint32 rb_code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rb_code());
  }

  return total_size;
}
size_t CinemaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afisha.storage.CinemaInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000d07) ^ 0x00000d07) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string url = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required string address = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required .afisha.storage.GpsInfo location = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);

    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required uint32 rb_code = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rb_code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string subways = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subways_size());
  for (int i = 0, n = this->subways_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subways(i));
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional string phone_common = 8;
    if (has_phone_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_common());
    }

    // optional string phone_infobot = 9;
    if (has_phone_infobot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_infobot());
    }

    // optional string map_url = 10;
    if (has_map_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_url());
    }

    // optional string schedule_url = 11;
    if (has_schedule_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->schedule_url());
    }

    // optional string ticket_url = 13;
    if (has_ticket_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket_url());
    }

  }
  // optional .afisha.storage.TicketPriceInfo ticket_price = 12;
  if (has_ticket_price()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ticket_price_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CinemaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:afisha.storage.CinemaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CinemaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CinemaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:afisha.storage.CinemaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:afisha.storage.CinemaInfo)
    MergeFrom(*source);
  }
}

void CinemaInfo::MergeFrom(const CinemaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afisha.storage.CinemaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subways_.MergeFrom(from.subways_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_phone_common();
      phone_common_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_common_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_phone_infobot();
      phone_infobot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_infobot_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_map_url();
      map_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_url_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_schedule_url();
      schedule_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.schedule_url_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_ticket_url();
      ticket_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_url_);
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_location()->::afisha::storage::GpsInfo::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_ticket_price()->::afisha::storage::TicketPriceInfo::MergeFrom(from.ticket_price());
    }
    if (cached_has_bits & 0x00000400u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000800u) {
      rb_code_ = from.rb_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CinemaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:afisha.storage.CinemaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CinemaInfo::CopyFrom(const CinemaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afisha.storage.CinemaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CinemaInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000d07) != 0x00000d07) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_ticket_price()) {
    if (!this->ticket_price_->IsInitialized()) return false;
  }
  return true;
}

void CinemaInfo::Swap(CinemaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CinemaInfo::InternalSwap(CinemaInfo* other) {
  using std::swap;
  subways_.InternalSwap(&other->subways_);
  name_.Swap(&other->name_);
  url_.Swap(&other->url_);
  address_.Swap(&other->address_);
  phone_common_.Swap(&other->phone_common_);
  phone_infobot_.Swap(&other->phone_infobot_);
  map_url_.Swap(&other->map_url_);
  schedule_url_.Swap(&other->schedule_url_);
  ticket_url_.Swap(&other->ticket_url_);
  swap(location_, other->location_);
  swap(ticket_price_, other->ticket_price_);
  swap(id_, other->id_);
  swap(rb_code_, other->rb_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CinemaInfo::GetMetadata() const {
  protobuf_afisha_5fadditive_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_afisha_5fadditive_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CinemaInfo

// required uint64 id = 1;
bool CinemaInfo::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CinemaInfo::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CinemaInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CinemaInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CinemaInfo::id() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.id)
  return id_;
}
void CinemaInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.id)
}

// required string name = 2;
bool CinemaInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CinemaInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CinemaInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CinemaInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CinemaInfo::name() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.name)
  return name_.GetNoArena();
}
void CinemaInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.name)
}
#if LANG_CXX11
void CinemaInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.name)
}
#endif
void CinemaInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.name)
}
void CinemaInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.name)
}
::std::string* CinemaInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CinemaInfo::release_name() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CinemaInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.name)
}

// required string url = 3;
bool CinemaInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CinemaInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void CinemaInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void CinemaInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CinemaInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.url)
  return url_.GetNoArena();
}
void CinemaInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.url)
}
#if LANG_CXX11
void CinemaInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.url)
}
#endif
void CinemaInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.url)
}
void CinemaInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.url)
}
::std::string* CinemaInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CinemaInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CinemaInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.url)
}

// required uint32 rb_code = 4;
bool CinemaInfo::has_rb_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CinemaInfo::set_has_rb_code() {
  _has_bits_[0] |= 0x00000800u;
}
void CinemaInfo::clear_has_rb_code() {
  _has_bits_[0] &= ~0x00000800u;
}
void CinemaInfo::clear_rb_code() {
  rb_code_ = 0u;
  clear_has_rb_code();
}
::google::protobuf::uint32 CinemaInfo::rb_code() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.rb_code)
  return rb_code_;
}
void CinemaInfo::set_rb_code(::google::protobuf::uint32 value) {
  set_has_rb_code();
  rb_code_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.rb_code)
}

// required string address = 5;
bool CinemaInfo::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CinemaInfo::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
void CinemaInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
void CinemaInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& CinemaInfo::address() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.address)
  return address_.GetNoArena();
}
void CinemaInfo::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.address)
}
#if LANG_CXX11
void CinemaInfo::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.address)
}
#endif
void CinemaInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.address)
}
void CinemaInfo::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.address)
}
::std::string* CinemaInfo::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CinemaInfo::release_address() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CinemaInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.address)
}

// required .afisha.storage.GpsInfo location = 6;
bool CinemaInfo::has_location() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CinemaInfo::set_has_location() {
  _has_bits_[0] |= 0x00000100u;
}
void CinemaInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000100u;
}
void CinemaInfo::clear_location() {
  if (location_ != NULL) location_->::afisha::storage::GpsInfo::Clear();
  clear_has_location();
}
const ::afisha::storage::GpsInfo& CinemaInfo::location() const {
  const ::afisha::storage::GpsInfo* p = location_;
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.location)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::GpsInfo*>(
      &::afisha::storage::_GpsInfo_default_instance_);
}
::afisha::storage::GpsInfo* CinemaInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::afisha::storage::GpsInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.location)
  return location_;
}
::afisha::storage::GpsInfo* CinemaInfo::release_location() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.location)
  clear_has_location();
  ::afisha::storage::GpsInfo* temp = location_;
  location_ = NULL;
  return temp;
}
void CinemaInfo::set_allocated_location(::afisha::storage::GpsInfo* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.location)
}

// repeated string subways = 7;
int CinemaInfo::subways_size() const {
  return subways_.size();
}
void CinemaInfo::clear_subways() {
  subways_.Clear();
}
const ::std::string& CinemaInfo::subways(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.subways)
  return subways_.Get(index);
}
::std::string* CinemaInfo::mutable_subways(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.subways)
  return subways_.Mutable(index);
}
void CinemaInfo::set_subways(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.subways)
  subways_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CinemaInfo::set_subways(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.subways)
  subways_.Mutable(index)->assign(std::move(value));
}
#endif
void CinemaInfo::set_subways(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subways_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.subways)
}
void CinemaInfo::set_subways(int index, const char* value, size_t size) {
  subways_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.subways)
}
::std::string* CinemaInfo::add_subways() {
  // @@protoc_insertion_point(field_add_mutable:afisha.storage.CinemaInfo.subways)
  return subways_.Add();
}
void CinemaInfo::add_subways(const ::std::string& value) {
  subways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afisha.storage.CinemaInfo.subways)
}
#if LANG_CXX11
void CinemaInfo::add_subways(::std::string&& value) {
  subways_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afisha.storage.CinemaInfo.subways)
}
#endif
void CinemaInfo::add_subways(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afisha.storage.CinemaInfo.subways)
}
void CinemaInfo::add_subways(const char* value, size_t size) {
  subways_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afisha.storage.CinemaInfo.subways)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CinemaInfo::subways() const {
  // @@protoc_insertion_point(field_list:afisha.storage.CinemaInfo.subways)
  return subways_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CinemaInfo::mutable_subways() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.CinemaInfo.subways)
  return &subways_;
}

// optional string phone_common = 8;
bool CinemaInfo::has_phone_common() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CinemaInfo::set_has_phone_common() {
  _has_bits_[0] |= 0x00000008u;
}
void CinemaInfo::clear_has_phone_common() {
  _has_bits_[0] &= ~0x00000008u;
}
void CinemaInfo::clear_phone_common() {
  phone_common_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone_common();
}
const ::std::string& CinemaInfo::phone_common() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.phone_common)
  return phone_common_.GetNoArena();
}
void CinemaInfo::set_phone_common(const ::std::string& value) {
  set_has_phone_common();
  phone_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.phone_common)
}
#if LANG_CXX11
void CinemaInfo::set_phone_common(::std::string&& value) {
  set_has_phone_common();
  phone_common_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.phone_common)
}
#endif
void CinemaInfo::set_phone_common(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone_common();
  phone_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.phone_common)
}
void CinemaInfo::set_phone_common(const char* value, size_t size) {
  set_has_phone_common();
  phone_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.phone_common)
}
::std::string* CinemaInfo::mutable_phone_common() {
  set_has_phone_common();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.phone_common)
  return phone_common_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CinemaInfo::release_phone_common() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.phone_common)
  clear_has_phone_common();
  return phone_common_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CinemaInfo::set_allocated_phone_common(::std::string* phone_common) {
  if (phone_common != NULL) {
    set_has_phone_common();
  } else {
    clear_has_phone_common();
  }
  phone_common_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_common);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.phone_common)
}

// optional string phone_infobot = 9;
bool CinemaInfo::has_phone_infobot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CinemaInfo::set_has_phone_infobot() {
  _has_bits_[0] |= 0x00000010u;
}
void CinemaInfo::clear_has_phone_infobot() {
  _has_bits_[0] &= ~0x00000010u;
}
void CinemaInfo::clear_phone_infobot() {
  phone_infobot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone_infobot();
}
const ::std::string& CinemaInfo::phone_infobot() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.phone_infobot)
  return phone_infobot_.GetNoArena();
}
void CinemaInfo::set_phone_infobot(const ::std::string& value) {
  set_has_phone_infobot();
  phone_infobot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.phone_infobot)
}
#if LANG_CXX11
void CinemaInfo::set_phone_infobot(::std::string&& value) {
  set_has_phone_infobot();
  phone_infobot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.phone_infobot)
}
#endif
void CinemaInfo::set_phone_infobot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone_infobot();
  phone_infobot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.phone_infobot)
}
void CinemaInfo::set_phone_infobot(const char* value, size_t size) {
  set_has_phone_infobot();
  phone_infobot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.phone_infobot)
}
::std::string* CinemaInfo::mutable_phone_infobot() {
  set_has_phone_infobot();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.phone_infobot)
  return phone_infobot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CinemaInfo::release_phone_infobot() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.phone_infobot)
  clear_has_phone_infobot();
  return phone_infobot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CinemaInfo::set_allocated_phone_infobot(::std::string* phone_infobot) {
  if (phone_infobot != NULL) {
    set_has_phone_infobot();
  } else {
    clear_has_phone_infobot();
  }
  phone_infobot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_infobot);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.phone_infobot)
}

// optional string map_url = 10;
bool CinemaInfo::has_map_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CinemaInfo::set_has_map_url() {
  _has_bits_[0] |= 0x00000020u;
}
void CinemaInfo::clear_has_map_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void CinemaInfo::clear_map_url() {
  map_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_url();
}
const ::std::string& CinemaInfo::map_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.map_url)
  return map_url_.GetNoArena();
}
void CinemaInfo::set_map_url(const ::std::string& value) {
  set_has_map_url();
  map_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.map_url)
}
#if LANG_CXX11
void CinemaInfo::set_map_url(::std::string&& value) {
  set_has_map_url();
  map_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.map_url)
}
#endif
void CinemaInfo::set_map_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_url();
  map_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.map_url)
}
void CinemaInfo::set_map_url(const char* value, size_t size) {
  set_has_map_url();
  map_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.map_url)
}
::std::string* CinemaInfo::mutable_map_url() {
  set_has_map_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.map_url)
  return map_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CinemaInfo::release_map_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.map_url)
  clear_has_map_url();
  return map_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CinemaInfo::set_allocated_map_url(::std::string* map_url) {
  if (map_url != NULL) {
    set_has_map_url();
  } else {
    clear_has_map_url();
  }
  map_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.map_url)
}

// optional string schedule_url = 11;
bool CinemaInfo::has_schedule_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CinemaInfo::set_has_schedule_url() {
  _has_bits_[0] |= 0x00000040u;
}
void CinemaInfo::clear_has_schedule_url() {
  _has_bits_[0] &= ~0x00000040u;
}
void CinemaInfo::clear_schedule_url() {
  schedule_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schedule_url();
}
const ::std::string& CinemaInfo::schedule_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.schedule_url)
  return schedule_url_.GetNoArena();
}
void CinemaInfo::set_schedule_url(const ::std::string& value) {
  set_has_schedule_url();
  schedule_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.schedule_url)
}
#if LANG_CXX11
void CinemaInfo::set_schedule_url(::std::string&& value) {
  set_has_schedule_url();
  schedule_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.schedule_url)
}
#endif
void CinemaInfo::set_schedule_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_schedule_url();
  schedule_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.schedule_url)
}
void CinemaInfo::set_schedule_url(const char* value, size_t size) {
  set_has_schedule_url();
  schedule_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.schedule_url)
}
::std::string* CinemaInfo::mutable_schedule_url() {
  set_has_schedule_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.schedule_url)
  return schedule_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CinemaInfo::release_schedule_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.schedule_url)
  clear_has_schedule_url();
  return schedule_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CinemaInfo::set_allocated_schedule_url(::std::string* schedule_url) {
  if (schedule_url != NULL) {
    set_has_schedule_url();
  } else {
    clear_has_schedule_url();
  }
  schedule_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schedule_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.schedule_url)
}

// optional .afisha.storage.TicketPriceInfo ticket_price = 12;
bool CinemaInfo::has_ticket_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CinemaInfo::set_has_ticket_price() {
  _has_bits_[0] |= 0x00000200u;
}
void CinemaInfo::clear_has_ticket_price() {
  _has_bits_[0] &= ~0x00000200u;
}
void CinemaInfo::clear_ticket_price() {
  if (ticket_price_ != NULL) ticket_price_->::afisha::storage::TicketPriceInfo::Clear();
  clear_has_ticket_price();
}
const ::afisha::storage::TicketPriceInfo& CinemaInfo::ticket_price() const {
  const ::afisha::storage::TicketPriceInfo* p = ticket_price_;
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.ticket_price)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::TicketPriceInfo*>(
      &::afisha::storage::_TicketPriceInfo_default_instance_);
}
::afisha::storage::TicketPriceInfo* CinemaInfo::mutable_ticket_price() {
  set_has_ticket_price();
  if (ticket_price_ == NULL) {
    ticket_price_ = new ::afisha::storage::TicketPriceInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.ticket_price)
  return ticket_price_;
}
::afisha::storage::TicketPriceInfo* CinemaInfo::release_ticket_price() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.ticket_price)
  clear_has_ticket_price();
  ::afisha::storage::TicketPriceInfo* temp = ticket_price_;
  ticket_price_ = NULL;
  return temp;
}
void CinemaInfo::set_allocated_ticket_price(::afisha::storage::TicketPriceInfo* ticket_price) {
  delete ticket_price_;
  ticket_price_ = ticket_price;
  if (ticket_price) {
    set_has_ticket_price();
  } else {
    clear_has_ticket_price();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.ticket_price)
}

// optional string ticket_url = 13;
bool CinemaInfo::has_ticket_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CinemaInfo::set_has_ticket_url() {
  _has_bits_[0] |= 0x00000080u;
}
void CinemaInfo::clear_has_ticket_url() {
  _has_bits_[0] &= ~0x00000080u;
}
void CinemaInfo::clear_ticket_url() {
  ticket_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket_url();
}
const ::std::string& CinemaInfo::ticket_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.ticket_url)
  return ticket_url_.GetNoArena();
}
void CinemaInfo::set_ticket_url(const ::std::string& value) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.ticket_url)
}
#if LANG_CXX11
void CinemaInfo::set_ticket_url(::std::string&& value) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.ticket_url)
}
#endif
void CinemaInfo::set_ticket_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.ticket_url)
}
void CinemaInfo::set_ticket_url(const char* value, size_t size) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.ticket_url)
}
::std::string* CinemaInfo::mutable_ticket_url() {
  set_has_ticket_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.ticket_url)
  return ticket_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CinemaInfo::release_ticket_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.ticket_url)
  clear_has_ticket_url();
  return ticket_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CinemaInfo::set_allocated_ticket_url(::std::string* ticket_url) {
  if (ticket_url != NULL) {
    set_has_ticket_url();
  } else {
    clear_has_ticket_url();
  }
  ticket_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.ticket_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace storage
}  // namespace afisha

// @@protoc_insertion_point(global_scope)
