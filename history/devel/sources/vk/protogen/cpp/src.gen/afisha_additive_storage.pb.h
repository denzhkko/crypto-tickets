// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: afisha_additive_storage.proto

#ifndef PROTOBUF_afisha_5fadditive_5fstorage_2eproto__INCLUDED
#define PROTOBUF_afisha_5fadditive_5fstorage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace afisha {
namespace storage {
class ActorInfo;
class ActorInfoDefaultTypeInternal;
extern ActorInfoDefaultTypeInternal _ActorInfo_default_instance_;
class CinemaInfo;
class CinemaInfoDefaultTypeInternal;
extern CinemaInfoDefaultTypeInternal _CinemaInfo_default_instance_;
class FrameInfo;
class FrameInfoDefaultTypeInternal;
extern FrameInfoDefaultTypeInternal _FrameInfo_default_instance_;
class GalleryImageInfo;
class GalleryImageInfoDefaultTypeInternal;
extern GalleryImageInfoDefaultTypeInternal _GalleryImageInfo_default_instance_;
class GpsInfo;
class GpsInfoDefaultTypeInternal;
extern GpsInfoDefaultTypeInternal _GpsInfo_default_instance_;
class ImageInfo;
class ImageInfoDefaultTypeInternal;
extern ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
class MovieInfo;
class MovieInfoDefaultTypeInternal;
extern MovieInfoDefaultTypeInternal _MovieInfo_default_instance_;
class SeanceInfo;
class SeanceInfoDefaultTypeInternal;
extern SeanceInfoDefaultTypeInternal _SeanceInfo_default_instance_;
class TicketPriceInfo;
class TicketPriceInfoDefaultTypeInternal;
extern TicketPriceInfoDefaultTypeInternal _TicketPriceInfo_default_instance_;
}  // namespace storage
}  // namespace afisha

namespace afisha {
namespace storage {

namespace protobuf_afisha_5fadditive_5fstorage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_afisha_5fadditive_5fstorage_2eproto

enum SeanceType {
  NORMAL = 1,
  TYPE_3D = 2
};
bool SeanceType_IsValid(int value);
const SeanceType SeanceType_MIN = NORMAL;
const SeanceType SeanceType_MAX = TYPE_3D;
const int SeanceType_ARRAYSIZE = SeanceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SeanceType_descriptor();
inline const ::std::string& SeanceType_Name(SeanceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SeanceType_descriptor(), value);
}
inline bool SeanceType_Parse(
    const ::std::string& name, SeanceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeanceType>(
    SeanceType_descriptor(), name, value);
}
enum MovieStatus {
  PAST = 1,
  PRESENT = 2,
  FUTURE = 3
};
bool MovieStatus_IsValid(int value);
const MovieStatus MovieStatus_MIN = PAST;
const MovieStatus MovieStatus_MAX = FUTURE;
const int MovieStatus_ARRAYSIZE = MovieStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MovieStatus_descriptor();
inline const ::std::string& MovieStatus_Name(MovieStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MovieStatus_descriptor(), value);
}
inline bool MovieStatus_Parse(
    const ::std::string& name, MovieStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MovieStatus>(
    MovieStatus_descriptor(), name, value);
}
// ===================================================================

class GpsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:afisha.storage.GpsInfo) */ {
 public:
  GpsInfo();
  virtual ~GpsInfo();

  GpsInfo(const GpsInfo& from);

  inline GpsInfo& operator=(const GpsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GpsInfo(GpsInfo&& from) noexcept
    : GpsInfo() {
    *this = ::std::move(from);
  }

  inline GpsInfo& operator=(GpsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GpsInfo& default_instance();

  static inline const GpsInfo* internal_default_instance() {
    return reinterpret_cast<const GpsInfo*>(
               &_GpsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GpsInfo* other);
  friend void swap(GpsInfo& a, GpsInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GpsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GpsInfo& from);
  void MergeFrom(const GpsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GpsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float latitude = 1;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  float latitude() const;
  void set_latitude(float value);

  // required float longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  float longitude() const;
  void set_longitude(float value);

  // @@protoc_insertion_point(class_scope:afisha.storage.GpsInfo)
 private:
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float latitude_;
  float longitude_;
  friend struct protobuf_afisha_5fadditive_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActorInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:afisha.storage.ActorInfo) */ {
 public:
  ActorInfo();
  virtual ~ActorInfo();

  ActorInfo(const ActorInfo& from);

  inline ActorInfo& operator=(const ActorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActorInfo(ActorInfo&& from) noexcept
    : ActorInfo() {
    *this = ::std::move(from);
  }

  inline ActorInfo& operator=(ActorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActorInfo& default_instance();

  static inline const ActorInfo* internal_default_instance() {
    return reinterpret_cast<const ActorInfo*>(
               &_ActorInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ActorInfo* other);
  friend void swap(ActorInfo& a, ActorInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActorInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ActorInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActorInfo& from);
  void MergeFrom(const ActorInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActorInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:afisha.storage.ActorInfo)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_afisha_5fadditive_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:afisha.storage.ImageInfo) */ {
 public:
  ImageInfo();
  virtual ~ImageInfo();

  ImageInfo(const ImageInfo& from);

  inline ImageInfo& operator=(const ImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageInfo(ImageInfo&& from) noexcept
    : ImageInfo() {
    *this = ::std::move(from);
  }

  inline ImageInfo& operator=(ImageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageInfo& default_instance();

  static inline const ImageInfo* internal_default_instance() {
    return reinterpret_cast<const ImageInfo*>(
               &_ImageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ImageInfo* other);
  friend void swap(ImageInfo& a, ImageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageInfo& from);
  void MergeFrom(const ImageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string valkiria_url = 4;
  bool has_valkiria_url() const;
  void clear_valkiria_url();
  static const int kValkiriaUrlFieldNumber = 4;
  const ::std::string& valkiria_url() const;
  void set_valkiria_url(const ::std::string& value);
  #if LANG_CXX11
  void set_valkiria_url(::std::string&& value);
  #endif
  void set_valkiria_url(const char* value);
  void set_valkiria_url(const char* value, size_t size);
  ::std::string* mutable_valkiria_url();
  ::std::string* release_valkiria_url();
  void set_allocated_valkiria_url(::std::string* valkiria_url);

  // optional uint32 width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 valkiria_width = 5;
  bool has_valkiria_width() const;
  void clear_valkiria_width();
  static const int kValkiriaWidthFieldNumber = 5;
  ::google::protobuf::uint32 valkiria_width() const;
  void set_valkiria_width(::google::protobuf::uint32 value);

  // optional uint32 valkiria_height = 6;
  bool has_valkiria_height() const;
  void clear_valkiria_height();
  static const int kValkiriaHeightFieldNumber = 6;
  ::google::protobuf::uint32 valkiria_height() const;
  void set_valkiria_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:afisha.storage.ImageInfo)
 private:
  void set_has_url();
  void clear_has_url();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_valkiria_url();
  void clear_has_valkiria_url();
  void set_has_valkiria_width();
  void clear_has_valkiria_width();
  void set_has_valkiria_height();
  void clear_has_valkiria_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr valkiria_url_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 valkiria_width_;
  ::google::protobuf::uint32 valkiria_height_;
  friend struct protobuf_afisha_5fadditive_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FrameInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:afisha.storage.FrameInfo) */ {
 public:
  FrameInfo();
  virtual ~FrameInfo();

  FrameInfo(const FrameInfo& from);

  inline FrameInfo& operator=(const FrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameInfo(FrameInfo&& from) noexcept
    : FrameInfo() {
    *this = ::std::move(from);
  }

  inline FrameInfo& operator=(FrameInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameInfo& default_instance();

  static inline const FrameInfo* internal_default_instance() {
    return reinterpret_cast<const FrameInfo*>(
               &_FrameInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FrameInfo* other);
  friend void swap(FrameInfo& a, FrameInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FrameInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FrameInfo& from);
  void MergeFrom(const FrameInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FrameInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string img = 1;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 1;
  const ::std::string& img() const;
  void set_img(const ::std::string& value);
  #if LANG_CXX11
  void set_img(::std::string&& value);
  #endif
  void set_img(const char* value);
  void set_img(const char* value, size_t size);
  ::std::string* mutable_img();
  ::std::string* release_img();
  void set_allocated_img(::std::string* img);

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:afisha.storage.FrameInfo)
 private:
  void set_has_img();
  void clear_has_img();
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr img_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_afisha_5fadditive_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GalleryImageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:afisha.storage.GalleryImageInfo) */ {
 public:
  GalleryImageInfo();
  virtual ~GalleryImageInfo();

  GalleryImageInfo(const GalleryImageInfo& from);

  inline GalleryImageInfo& operator=(const GalleryImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GalleryImageInfo(GalleryImageInfo&& from) noexcept
    : GalleryImageInfo() {
    *this = ::std::move(from);
  }

  inline GalleryImageInfo& operator=(GalleryImageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GalleryImageInfo& default_instance();

  static inline const GalleryImageInfo* internal_default_instance() {
    return reinterpret_cast<const GalleryImageInfo*>(
               &_GalleryImageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GalleryImageInfo* other);
  friend void swap(GalleryImageInfo& a, GalleryImageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GalleryImageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GalleryImageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GalleryImageInfo& from);
  void MergeFrom(const GalleryImageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GalleryImageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .afisha.storage.ImageInfo image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::afisha::storage::ImageInfo& image() const;
  ::afisha::storage::ImageInfo* mutable_image();
  ::afisha::storage::ImageInfo* release_image();
  void set_allocated_image(::afisha::storage::ImageInfo* image);

  // optional .afisha.storage.ImageInfo m_image = 2;
  bool has_m_image() const;
  void clear_m_image();
  static const int kMImageFieldNumber = 2;
  const ::afisha::storage::ImageInfo& m_image() const;
  ::afisha::storage::ImageInfo* mutable_m_image();
  ::afisha::storage::ImageInfo* release_m_image();
  void set_allocated_m_image(::afisha::storage::ImageInfo* m_image);

  // optional .afisha.storage.ImageInfo tel_image = 3;
  bool has_tel_image() const;
  void clear_tel_image();
  static const int kTelImageFieldNumber = 3;
  const ::afisha::storage::ImageInfo& tel_image() const;
  ::afisha::storage::ImageInfo* mutable_tel_image();
  ::afisha::storage::ImageInfo* release_tel_image();
  void set_allocated_tel_image(::afisha::storage::ImageInfo* tel_image);

  // optional .afisha.storage.ImageInfo touch_image = 4;
  bool has_touch_image() const;
  void clear_touch_image();
  static const int kTouchImageFieldNumber = 4;
  const ::afisha::storage::ImageInfo& touch_image() const;
  ::afisha::storage::ImageInfo* mutable_touch_image();
  ::afisha::storage::ImageInfo* release_touch_image();
  void set_allocated_touch_image(::afisha::storage::ImageInfo* touch_image);

  // optional .afisha.storage.FrameInfo frame = 5;
  bool has_frame() const;
  void clear_frame();
  static const int kFrameFieldNumber = 5;
  const ::afisha::storage::FrameInfo& frame() const;
  ::afisha::storage::FrameInfo* mutable_frame();
  ::afisha::storage::FrameInfo* release_frame();
  void set_allocated_frame(::afisha::storage::FrameInfo* frame);

  // @@protoc_insertion_point(class_scope:afisha.storage.GalleryImageInfo)
 private:
  void set_has_image();
  void clear_has_image();
  void set_has_m_image();
  void clear_has_m_image();
  void set_has_tel_image();
  void clear_has_tel_image();
  void set_has_touch_image();
  void clear_has_touch_image();
  void set_has_frame();
  void clear_has_frame();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::afisha::storage::ImageInfo* image_;
  ::afisha::storage::ImageInfo* m_image_;
  ::afisha::storage::ImageInfo* tel_image_;
  ::afisha::storage::ImageInfo* touch_image_;
  ::afisha::storage::FrameInfo* frame_;
  friend struct protobuf_afisha_5fadditive_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeanceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:afisha.storage.SeanceInfo) */ {
 public:
  SeanceInfo();
  virtual ~SeanceInfo();

  SeanceInfo(const SeanceInfo& from);

  inline SeanceInfo& operator=(const SeanceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeanceInfo(SeanceInfo&& from) noexcept
    : SeanceInfo() {
    *this = ::std::move(from);
  }

  inline SeanceInfo& operator=(SeanceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeanceInfo& default_instance();

  static inline const SeanceInfo* internal_default_instance() {
    return reinterpret_cast<const SeanceInfo*>(
               &_SeanceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SeanceInfo* other);
  friend void swap(SeanceInfo& a, SeanceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeanceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SeanceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeanceInfo& from);
  void MergeFrom(const SeanceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeanceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required uint64 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // required .afisha.storage.SeanceType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::afisha::storage::SeanceType type() const;
  void set_type(::afisha::storage::SeanceType value);

  // @@protoc_insertion_point(class_scope:afisha.storage.SeanceInfo)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();
  void set_has_url();
  void clear_has_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint64 time_;
  int type_;
  friend struct protobuf_afisha_5fadditive_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MovieInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:afisha.storage.MovieInfo) */ {
 public:
  MovieInfo();
  virtual ~MovieInfo();

  MovieInfo(const MovieInfo& from);

  inline MovieInfo& operator=(const MovieInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MovieInfo(MovieInfo&& from) noexcept
    : MovieInfo() {
    *this = ::std::move(from);
  }

  inline MovieInfo& operator=(MovieInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MovieInfo& default_instance();

  static inline const MovieInfo* internal_default_instance() {
    return reinterpret_cast<const MovieInfo*>(
               &_MovieInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MovieInfo* other);
  friend void swap(MovieInfo& a, MovieInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MovieInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MovieInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MovieInfo& from);
  void MergeFrom(const MovieInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MovieInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .afisha.storage.GalleryImageInfo gallery = 11;
  int gallery_size() const;
  void clear_gallery();
  static const int kGalleryFieldNumber = 11;
  const ::afisha::storage::GalleryImageInfo& gallery(int index) const;
  ::afisha::storage::GalleryImageInfo* mutable_gallery(int index);
  ::afisha::storage::GalleryImageInfo* add_gallery();
  ::google::protobuf::RepeatedPtrField< ::afisha::storage::GalleryImageInfo >*
      mutable_gallery();
  const ::google::protobuf::RepeatedPtrField< ::afisha::storage::GalleryImageInfo >&
      gallery() const;

  // repeated .afisha.storage.ActorInfo actors = 12;
  int actors_size() const;
  void clear_actors();
  static const int kActorsFieldNumber = 12;
  const ::afisha::storage::ActorInfo& actors(int index) const;
  ::afisha::storage::ActorInfo* mutable_actors(int index);
  ::afisha::storage::ActorInfo* add_actors();
  ::google::protobuf::RepeatedPtrField< ::afisha::storage::ActorInfo >*
      mutable_actors();
  const ::google::protobuf::RepeatedPtrField< ::afisha::storage::ActorInfo >&
      actors() const;

  // repeated string producers = 13;
  int producers_size() const;
  void clear_producers();
  static const int kProducersFieldNumber = 13;
  const ::std::string& producers(int index) const;
  ::std::string* mutable_producers(int index);
  void set_producers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_producers(int index, ::std::string&& value);
  #endif
  void set_producers(int index, const char* value);
  void set_producers(int index, const char* value, size_t size);
  ::std::string* add_producers();
  void add_producers(const ::std::string& value);
  #if LANG_CXX11
  void add_producers(::std::string&& value);
  #endif
  void add_producers(const char* value);
  void add_producers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& producers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_producers();

  // repeated string directors = 14;
  int directors_size() const;
  void clear_directors();
  static const int kDirectorsFieldNumber = 14;
  const ::std::string& directors(int index) const;
  ::std::string* mutable_directors(int index);
  void set_directors(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_directors(int index, ::std::string&& value);
  #endif
  void set_directors(int index, const char* value);
  void set_directors(int index, const char* value, size_t size);
  ::std::string* add_directors();
  void add_directors(const ::std::string& value);
  #if LANG_CXX11
  void add_directors(::std::string&& value);
  #endif
  void add_directors(const char* value);
  void add_directors(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& directors() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_directors();

  // repeated string genres = 15;
  int genres_size() const;
  void clear_genres();
  static const int kGenresFieldNumber = 15;
  const ::std::string& genres(int index) const;
  ::std::string* mutable_genres(int index);
  void set_genres(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_genres(int index, ::std::string&& value);
  #endif
  void set_genres(int index, const char* value);
  void set_genres(int index, const char* value, size_t size);
  ::std::string* add_genres();
  void add_genres(const ::std::string& value);
  #if LANG_CXX11
  void add_genres(::std::string&& value);
  #endif
  void add_genres(const char* value);
  void add_genres(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& genres() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_genres();

  // repeated string countries = 16;
  int countries_size() const;
  void clear_countries();
  static const int kCountriesFieldNumber = 16;
  const ::std::string& countries(int index) const;
  ::std::string* mutable_countries(int index);
  void set_countries(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_countries(int index, ::std::string&& value);
  #endif
  void set_countries(int index, const char* value);
  void set_countries(int index, const char* value, size_t size);
  ::std::string* add_countries();
  void add_countries(const ::std::string& value);
  #if LANG_CXX11
  void add_countries(::std::string&& value);
  #endif
  void add_countries(const char* value);
  void add_countries(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& countries() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_countries();

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string original_name = 5;
  bool has_original_name() const;
  void clear_original_name();
  static const int kOriginalNameFieldNumber = 5;
  const ::std::string& original_name() const;
  void set_original_name(const ::std::string& value);
  #if LANG_CXX11
  void set_original_name(::std::string&& value);
  #endif
  void set_original_name(const char* value);
  void set_original_name(const char* value, size_t size);
  ::std::string* mutable_original_name();
  ::std::string* release_original_name();
  void set_allocated_original_name(::std::string* original_name);

  // optional string description = 6;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional string review = 7;
  bool has_review() const;
  void clear_review();
  static const int kReviewFieldNumber = 7;
  const ::std::string& review() const;
  void set_review(const ::std::string& value);
  #if LANG_CXX11
  void set_review(::std::string&& value);
  #endif
  void set_review(const char* value);
  void set_review(const char* value, size_t size);
  ::std::string* mutable_review();
  ::std::string* release_review();
  void set_allocated_review(::std::string* review);

  // optional string gallery_url = 17;
  bool has_gallery_url() const;
  void clear_gallery_url();
  static const int kGalleryUrlFieldNumber = 17;
  const ::std::string& gallery_url() const;
  void set_gallery_url(const ::std::string& value);
  #if LANG_CXX11
  void set_gallery_url(::std::string&& value);
  #endif
  void set_gallery_url(const char* value);
  void set_gallery_url(const char* value, size_t size);
  ::std::string* mutable_gallery_url();
  ::std::string* release_gallery_url();
  void set_allocated_gallery_url(::std::string* gallery_url);

  // optional string review_url = 18;
  bool has_review_url() const;
  void clear_review_url();
  static const int kReviewUrlFieldNumber = 18;
  const ::std::string& review_url() const;
  void set_review_url(const ::std::string& value);
  #if LANG_CXX11
  void set_review_url(::std::string&& value);
  #endif
  void set_review_url(const char* value);
  void set_review_url(const char* value, size_t size);
  ::std::string* mutable_review_url();
  ::std::string* release_review_url();
  void set_allocated_review_url(::std::string* review_url);

  // optional string ticket_url = 19;
  bool has_ticket_url() const;
  void clear_ticket_url();
  static const int kTicketUrlFieldNumber = 19;
  const ::std::string& ticket_url() const;
  void set_ticket_url(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket_url(::std::string&& value);
  #endif
  void set_ticket_url(const char* value);
  void set_ticket_url(const char* value, size_t size);
  ::std::string* mutable_ticket_url();
  ::std::string* release_ticket_url();
  void set_allocated_ticket_url(::std::string* ticket_url);

  // optional string kinopoisk_url = 20;
  bool has_kinopoisk_url() const;
  void clear_kinopoisk_url();
  static const int kKinopoiskUrlFieldNumber = 20;
  const ::std::string& kinopoisk_url() const;
  void set_kinopoisk_url(const ::std::string& value);
  #if LANG_CXX11
  void set_kinopoisk_url(::std::string&& value);
  #endif
  void set_kinopoisk_url(const char* value);
  void set_kinopoisk_url(const char* value, size_t size);
  ::std::string* mutable_kinopoisk_url();
  ::std::string* release_kinopoisk_url();
  void set_allocated_kinopoisk_url(::std::string* kinopoisk_url);

  // optional string trailer_url = 21;
  bool has_trailer_url() const;
  void clear_trailer_url();
  static const int kTrailerUrlFieldNumber = 21;
  const ::std::string& trailer_url() const;
  void set_trailer_url(const ::std::string& value);
  #if LANG_CXX11
  void set_trailer_url(::std::string&& value);
  #endif
  void set_trailer_url(const char* value);
  void set_trailer_url(const char* value, size_t size);
  ::std::string* mutable_trailer_url();
  ::std::string* release_trailer_url();
  void set_allocated_trailer_url(::std::string* trailer_url);

  // optional string trailer_source_url = 22;
  bool has_trailer_source_url() const;
  void clear_trailer_source_url();
  static const int kTrailerSourceUrlFieldNumber = 22;
  const ::std::string& trailer_source_url() const;
  void set_trailer_source_url(const ::std::string& value);
  #if LANG_CXX11
  void set_trailer_source_url(::std::string&& value);
  #endif
  void set_trailer_source_url(const char* value);
  void set_trailer_source_url(const char* value, size_t size);
  ::std::string* mutable_trailer_source_url();
  ::std::string* release_trailer_source_url();
  void set_allocated_trailer_source_url(::std::string* trailer_source_url);

  // optional string imdb_url = 23;
  bool has_imdb_url() const;
  void clear_imdb_url();
  static const int kImdbUrlFieldNumber = 23;
  const ::std::string& imdb_url() const;
  void set_imdb_url(const ::std::string& value);
  #if LANG_CXX11
  void set_imdb_url(::std::string&& value);
  #endif
  void set_imdb_url(const char* value);
  void set_imdb_url(const char* value, size_t size);
  ::std::string* mutable_imdb_url();
  ::std::string* release_imdb_url();
  void set_allocated_imdb_url(::std::string* imdb_url);

  // optional string site = 32;
  bool has_site() const;
  void clear_site();
  static const int kSiteFieldNumber = 32;
  const ::std::string& site() const;
  void set_site(const ::std::string& value);
  #if LANG_CXX11
  void set_site(::std::string&& value);
  #endif
  void set_site(const char* value);
  void set_site(const char* value, size_t size);
  ::std::string* mutable_site();
  ::std::string* release_site();
  void set_allocated_site(::std::string* site);

  // optional .afisha.storage.ImageInfo image = 10;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 10;
  const ::afisha::storage::ImageInfo& image() const;
  ::afisha::storage::ImageInfo* mutable_image();
  ::afisha::storage::ImageInfo* release_image();
  void set_allocated_image(::afisha::storage::ImageInfo* image);

  // optional .afisha.storage.ImageInfo m_image = 33;
  bool has_m_image() const;
  void clear_m_image();
  static const int kMImageFieldNumber = 33;
  const ::afisha::storage::ImageInfo& m_image() const;
  ::afisha::storage::ImageInfo* mutable_m_image();
  ::afisha::storage::ImageInfo* release_m_image();
  void set_allocated_m_image(::afisha::storage::ImageInfo* m_image);

  // optional .afisha.storage.ImageInfo tel_image = 34;
  bool has_tel_image() const;
  void clear_tel_image();
  static const int kTelImageFieldNumber = 34;
  const ::afisha::storage::ImageInfo& tel_image() const;
  ::afisha::storage::ImageInfo* mutable_tel_image();
  ::afisha::storage::ImageInfo* release_tel_image();
  void set_allocated_tel_image(::afisha::storage::ImageInfo* tel_image);

  // optional .afisha.storage.ImageInfo touch_image = 35;
  bool has_touch_image() const;
  void clear_touch_image();
  static const int kTouchImageFieldNumber = 35;
  const ::afisha::storage::ImageInfo& touch_image() const;
  ::afisha::storage::ImageInfo* mutable_touch_image();
  ::afisha::storage::ImageInfo* release_touch_image();
  void set_allocated_touch_image(::afisha::storage::ImageInfo* touch_image);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint64 release = 8;
  bool has_release() const;
  void clear_release();
  static const int kReleaseFieldNumber = 8;
  ::google::protobuf::uint64 release() const;
  void set_release(::google::protobuf::uint64 value);

  // optional uint64 release_ru = 9;
  bool has_release_ru() const;
  void clear_release_ru();
  static const int kReleaseRuFieldNumber = 9;
  ::google::protobuf::uint64 release_ru() const;
  void set_release_ru(::google::protobuf::uint64 value);

  // optional uint32 duration = 24;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 24;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional float imdb_rating = 25;
  bool has_imdb_rating() const;
  void clear_imdb_rating();
  static const int kImdbRatingFieldNumber = 25;
  float imdb_rating() const;
  void set_imdb_rating(float value);

  // optional int32 mail_rating_count = 26;
  bool has_mail_rating_count() const;
  void clear_mail_rating_count();
  static const int kMailRatingCountFieldNumber = 26;
  ::google::protobuf::int32 mail_rating_count() const;
  void set_mail_rating_count(::google::protobuf::int32 value);

  // optional float mail_rating_min = 27;
  bool has_mail_rating_min() const;
  void clear_mail_rating_min();
  static const int kMailRatingMinFieldNumber = 27;
  float mail_rating_min() const;
  void set_mail_rating_min(float value);

  // optional float mail_rating_max = 28;
  bool has_mail_rating_max() const;
  void clear_mail_rating_max();
  static const int kMailRatingMaxFieldNumber = 28;
  float mail_rating_max() const;
  void set_mail_rating_max(float value);

  // optional float mail_rating = 29;
  bool has_mail_rating() const;
  void clear_mail_rating();
  static const int kMailRatingFieldNumber = 29;
  float mail_rating() const;
  void set_mail_rating(float value);

  // optional uint32 age_restriction = 30;
  bool has_age_restriction() const;
  void clear_age_restriction();
  static const int kAgeRestrictionFieldNumber = 30;
  ::google::protobuf::uint32 age_restriction() const;
  void set_age_restriction(::google::protobuf::uint32 value);

  // optional int32 year = 31;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 31;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // required .afisha.storage.MovieStatus status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::afisha::storage::MovieStatus status() const;
  void set_status(::afisha::storage::MovieStatus value);

  // @@protoc_insertion_point(class_scope:afisha.storage.MovieInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_url();
  void clear_has_url();
  void set_has_status();
  void clear_has_status();
  void set_has_original_name();
  void clear_has_original_name();
  void set_has_description();
  void clear_has_description();
  void set_has_review();
  void clear_has_review();
  void set_has_release();
  void clear_has_release();
  void set_has_release_ru();
  void clear_has_release_ru();
  void set_has_image();
  void clear_has_image();
  void set_has_m_image();
  void clear_has_m_image();
  void set_has_tel_image();
  void clear_has_tel_image();
  void set_has_touch_image();
  void clear_has_touch_image();
  void set_has_gallery_url();
  void clear_has_gallery_url();
  void set_has_review_url();
  void clear_has_review_url();
  void set_has_ticket_url();
  void clear_has_ticket_url();
  void set_has_kinopoisk_url();
  void clear_has_kinopoisk_url();
  void set_has_trailer_url();
  void clear_has_trailer_url();
  void set_has_trailer_source_url();
  void clear_has_trailer_source_url();
  void set_has_imdb_url();
  void clear_has_imdb_url();
  void set_has_duration();
  void clear_has_duration();
  void set_has_imdb_rating();
  void clear_has_imdb_rating();
  void set_has_mail_rating_count();
  void clear_has_mail_rating_count();
  void set_has_mail_rating_min();
  void clear_has_mail_rating_min();
  void set_has_mail_rating_max();
  void clear_has_mail_rating_max();
  void set_has_mail_rating();
  void clear_has_mail_rating();
  void set_has_age_restriction();
  void clear_has_age_restriction();
  void set_has_year();
  void clear_has_year();
  void set_has_site();
  void clear_has_site();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::afisha::storage::GalleryImageInfo > gallery_;
  ::google::protobuf::RepeatedPtrField< ::afisha::storage::ActorInfo > actors_;
  ::google::protobuf::RepeatedPtrField< ::std::string> producers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> directors_;
  ::google::protobuf::RepeatedPtrField< ::std::string> genres_;
  ::google::protobuf::RepeatedPtrField< ::std::string> countries_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr original_name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr review_;
  ::google::protobuf::internal::ArenaStringPtr gallery_url_;
  ::google::protobuf::internal::ArenaStringPtr review_url_;
  ::google::protobuf::internal::ArenaStringPtr ticket_url_;
  ::google::protobuf::internal::ArenaStringPtr kinopoisk_url_;
  ::google::protobuf::internal::ArenaStringPtr trailer_url_;
  ::google::protobuf::internal::ArenaStringPtr trailer_source_url_;
  ::google::protobuf::internal::ArenaStringPtr imdb_url_;
  ::google::protobuf::internal::ArenaStringPtr site_;
  ::afisha::storage::ImageInfo* image_;
  ::afisha::storage::ImageInfo* m_image_;
  ::afisha::storage::ImageInfo* tel_image_;
  ::afisha::storage::ImageInfo* touch_image_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 release_;
  ::google::protobuf::uint64 release_ru_;
  ::google::protobuf::uint32 duration_;
  float imdb_rating_;
  ::google::protobuf::int32 mail_rating_count_;
  float mail_rating_min_;
  float mail_rating_max_;
  float mail_rating_;
  ::google::protobuf::uint32 age_restriction_;
  ::google::protobuf::int32 year_;
  int status_;
  friend struct protobuf_afisha_5fadditive_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TicketPriceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:afisha.storage.TicketPriceInfo) */ {
 public:
  TicketPriceInfo();
  virtual ~TicketPriceInfo();

  TicketPriceInfo(const TicketPriceInfo& from);

  inline TicketPriceInfo& operator=(const TicketPriceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TicketPriceInfo(TicketPriceInfo&& from) noexcept
    : TicketPriceInfo() {
    *this = ::std::move(from);
  }

  inline TicketPriceInfo& operator=(TicketPriceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TicketPriceInfo& default_instance();

  static inline const TicketPriceInfo* internal_default_instance() {
    return reinterpret_cast<const TicketPriceInfo*>(
               &_TicketPriceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TicketPriceInfo* other);
  friend void swap(TicketPriceInfo& a, TicketPriceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TicketPriceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TicketPriceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TicketPriceInfo& from);
  void MergeFrom(const TicketPriceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TicketPriceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  ::google::protobuf::uint32 min() const;
  void set_min(::google::protobuf::uint32 value);

  // required uint32 max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  ::google::protobuf::uint32 max() const;
  void set_max(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:afisha.storage.TicketPriceInfo)
 private:
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 max_;
  friend struct protobuf_afisha_5fadditive_5fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CinemaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:afisha.storage.CinemaInfo) */ {
 public:
  CinemaInfo();
  virtual ~CinemaInfo();

  CinemaInfo(const CinemaInfo& from);

  inline CinemaInfo& operator=(const CinemaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CinemaInfo(CinemaInfo&& from) noexcept
    : CinemaInfo() {
    *this = ::std::move(from);
  }

  inline CinemaInfo& operator=(CinemaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CinemaInfo& default_instance();

  static inline const CinemaInfo* internal_default_instance() {
    return reinterpret_cast<const CinemaInfo*>(
               &_CinemaInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CinemaInfo* other);
  friend void swap(CinemaInfo& a, CinemaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CinemaInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CinemaInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CinemaInfo& from);
  void MergeFrom(const CinemaInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CinemaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string subways = 7;
  int subways_size() const;
  void clear_subways();
  static const int kSubwaysFieldNumber = 7;
  const ::std::string& subways(int index) const;
  ::std::string* mutable_subways(int index);
  void set_subways(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subways(int index, ::std::string&& value);
  #endif
  void set_subways(int index, const char* value);
  void set_subways(int index, const char* value, size_t size);
  ::std::string* add_subways();
  void add_subways(const ::std::string& value);
  #if LANG_CXX11
  void add_subways(::std::string&& value);
  #endif
  void add_subways(const char* value);
  void add_subways(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subways() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subways();

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // required string address = 5;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string phone_common = 8;
  bool has_phone_common() const;
  void clear_phone_common();
  static const int kPhoneCommonFieldNumber = 8;
  const ::std::string& phone_common() const;
  void set_phone_common(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_common(::std::string&& value);
  #endif
  void set_phone_common(const char* value);
  void set_phone_common(const char* value, size_t size);
  ::std::string* mutable_phone_common();
  ::std::string* release_phone_common();
  void set_allocated_phone_common(::std::string* phone_common);

  // optional string phone_infobot = 9;
  bool has_phone_infobot() const;
  void clear_phone_infobot();
  static const int kPhoneInfobotFieldNumber = 9;
  const ::std::string& phone_infobot() const;
  void set_phone_infobot(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_infobot(::std::string&& value);
  #endif
  void set_phone_infobot(const char* value);
  void set_phone_infobot(const char* value, size_t size);
  ::std::string* mutable_phone_infobot();
  ::std::string* release_phone_infobot();
  void set_allocated_phone_infobot(::std::string* phone_infobot);

  // optional string map_url = 10;
  bool has_map_url() const;
  void clear_map_url();
  static const int kMapUrlFieldNumber = 10;
  const ::std::string& map_url() const;
  void set_map_url(const ::std::string& value);
  #if LANG_CXX11
  void set_map_url(::std::string&& value);
  #endif
  void set_map_url(const char* value);
  void set_map_url(const char* value, size_t size);
  ::std::string* mutable_map_url();
  ::std::string* release_map_url();
  void set_allocated_map_url(::std::string* map_url);

  // optional string schedule_url = 11;
  bool has_schedule_url() const;
  void clear_schedule_url();
  static const int kScheduleUrlFieldNumber = 11;
  const ::std::string& schedule_url() const;
  void set_schedule_url(const ::std::string& value);
  #if LANG_CXX11
  void set_schedule_url(::std::string&& value);
  #endif
  void set_schedule_url(const char* value);
  void set_schedule_url(const char* value, size_t size);
  ::std::string* mutable_schedule_url();
  ::std::string* release_schedule_url();
  void set_allocated_schedule_url(::std::string* schedule_url);

  // optional string ticket_url = 13;
  bool has_ticket_url() const;
  void clear_ticket_url();
  static const int kTicketUrlFieldNumber = 13;
  const ::std::string& ticket_url() const;
  void set_ticket_url(const ::std::string& value);
  #if LANG_CXX11
  void set_ticket_url(::std::string&& value);
  #endif
  void set_ticket_url(const char* value);
  void set_ticket_url(const char* value, size_t size);
  ::std::string* mutable_ticket_url();
  ::std::string* release_ticket_url();
  void set_allocated_ticket_url(::std::string* ticket_url);

  // required .afisha.storage.GpsInfo location = 6;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 6;
  const ::afisha::storage::GpsInfo& location() const;
  ::afisha::storage::GpsInfo* mutable_location();
  ::afisha::storage::GpsInfo* release_location();
  void set_allocated_location(::afisha::storage::GpsInfo* location);

  // optional .afisha.storage.TicketPriceInfo ticket_price = 12;
  bool has_ticket_price() const;
  void clear_ticket_price();
  static const int kTicketPriceFieldNumber = 12;
  const ::afisha::storage::TicketPriceInfo& ticket_price() const;
  ::afisha::storage::TicketPriceInfo* mutable_ticket_price();
  ::afisha::storage::TicketPriceInfo* release_ticket_price();
  void set_allocated_ticket_price(::afisha::storage::TicketPriceInfo* ticket_price);

  // required uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required uint32 rb_code = 4;
  bool has_rb_code() const;
  void clear_rb_code();
  static const int kRbCodeFieldNumber = 4;
  ::google::protobuf::uint32 rb_code() const;
  void set_rb_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:afisha.storage.CinemaInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_url();
  void clear_has_url();
  void set_has_rb_code();
  void clear_has_rb_code();
  void set_has_address();
  void clear_has_address();
  void set_has_location();
  void clear_has_location();
  void set_has_phone_common();
  void clear_has_phone_common();
  void set_has_phone_infobot();
  void clear_has_phone_infobot();
  void set_has_map_url();
  void clear_has_map_url();
  void set_has_schedule_url();
  void clear_has_schedule_url();
  void set_has_ticket_price();
  void clear_has_ticket_price();
  void set_has_ticket_url();
  void clear_has_ticket_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subways_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr phone_common_;
  ::google::protobuf::internal::ArenaStringPtr phone_infobot_;
  ::google::protobuf::internal::ArenaStringPtr map_url_;
  ::google::protobuf::internal::ArenaStringPtr schedule_url_;
  ::google::protobuf::internal::ArenaStringPtr ticket_url_;
  ::afisha::storage::GpsInfo* location_;
  ::afisha::storage::TicketPriceInfo* ticket_price_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 rb_code_;
  friend struct protobuf_afisha_5fadditive_5fstorage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GpsInfo

// required float latitude = 1;
inline bool GpsInfo::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpsInfo::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GpsInfo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GpsInfo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float GpsInfo::latitude() const {
  // @@protoc_insertion_point(field_get:afisha.storage.GpsInfo.latitude)
  return latitude_;
}
inline void GpsInfo::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.GpsInfo.latitude)
}

// required float longitude = 2;
inline bool GpsInfo::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpsInfo::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GpsInfo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GpsInfo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float GpsInfo::longitude() const {
  // @@protoc_insertion_point(field_get:afisha.storage.GpsInfo.longitude)
  return longitude_;
}
inline void GpsInfo::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.GpsInfo.longitude)
}

// -------------------------------------------------------------------

// ActorInfo

// required string name = 1;
inline bool ActorInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActorInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActorInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActorInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ActorInfo::name() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ActorInfo.name)
  return name_.GetNoArena();
}
inline void ActorInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.ActorInfo.name)
}
#if LANG_CXX11
inline void ActorInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.ActorInfo.name)
}
#endif
inline void ActorInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.ActorInfo.name)
}
inline void ActorInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.ActorInfo.name)
}
inline ::std::string* ActorInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:afisha.storage.ActorInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActorInfo::release_name() {
  // @@protoc_insertion_point(field_release:afisha.storage.ActorInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActorInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.ActorInfo.name)
}

// optional string url = 2;
inline bool ActorInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActorInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActorInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActorInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ActorInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ActorInfo.url)
  return url_.GetNoArena();
}
inline void ActorInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.ActorInfo.url)
}
#if LANG_CXX11
inline void ActorInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.ActorInfo.url)
}
#endif
inline void ActorInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.ActorInfo.url)
}
inline void ActorInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.ActorInfo.url)
}
inline ::std::string* ActorInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.ActorInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActorInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.ActorInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActorInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.ActorInfo.url)
}

// -------------------------------------------------------------------

// ImageInfo

// optional string url = 1;
inline bool ImageInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ImageInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.url)
  return url_.GetNoArena();
}
inline void ImageInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.url)
}
#if LANG_CXX11
inline void ImageInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.ImageInfo.url)
}
#endif
inline void ImageInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.ImageInfo.url)
}
inline void ImageInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.ImageInfo.url)
}
inline ::std::string* ImageInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.ImageInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.ImageInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.ImageInfo.url)
}

// optional uint32 width = 2;
inline bool ImageInfo::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageInfo::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageInfo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 ImageInfo::width() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.width)
  return width_;
}
inline void ImageInfo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.width)
}

// optional uint32 height = 3;
inline bool ImageInfo::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageInfo::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageInfo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 ImageInfo::height() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.height)
  return height_;
}
inline void ImageInfo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.height)
}

// optional string valkiria_url = 4;
inline bool ImageInfo::has_valkiria_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageInfo::set_has_valkiria_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageInfo::clear_has_valkiria_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageInfo::clear_valkiria_url() {
  valkiria_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_valkiria_url();
}
inline const ::std::string& ImageInfo::valkiria_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.valkiria_url)
  return valkiria_url_.GetNoArena();
}
inline void ImageInfo::set_valkiria_url(const ::std::string& value) {
  set_has_valkiria_url();
  valkiria_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.valkiria_url)
}
#if LANG_CXX11
inline void ImageInfo::set_valkiria_url(::std::string&& value) {
  set_has_valkiria_url();
  valkiria_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.ImageInfo.valkiria_url)
}
#endif
inline void ImageInfo::set_valkiria_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_valkiria_url();
  valkiria_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.ImageInfo.valkiria_url)
}
inline void ImageInfo::set_valkiria_url(const char* value, size_t size) {
  set_has_valkiria_url();
  valkiria_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.ImageInfo.valkiria_url)
}
inline ::std::string* ImageInfo::mutable_valkiria_url() {
  set_has_valkiria_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.ImageInfo.valkiria_url)
  return valkiria_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageInfo::release_valkiria_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.ImageInfo.valkiria_url)
  clear_has_valkiria_url();
  return valkiria_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageInfo::set_allocated_valkiria_url(::std::string* valkiria_url) {
  if (valkiria_url != NULL) {
    set_has_valkiria_url();
  } else {
    clear_has_valkiria_url();
  }
  valkiria_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valkiria_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.ImageInfo.valkiria_url)
}

// optional uint32 valkiria_width = 5;
inline bool ImageInfo::has_valkiria_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageInfo::set_has_valkiria_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageInfo::clear_has_valkiria_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageInfo::clear_valkiria_width() {
  valkiria_width_ = 0u;
  clear_has_valkiria_width();
}
inline ::google::protobuf::uint32 ImageInfo::valkiria_width() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.valkiria_width)
  return valkiria_width_;
}
inline void ImageInfo::set_valkiria_width(::google::protobuf::uint32 value) {
  set_has_valkiria_width();
  valkiria_width_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.valkiria_width)
}

// optional uint32 valkiria_height = 6;
inline bool ImageInfo::has_valkiria_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageInfo::set_has_valkiria_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageInfo::clear_has_valkiria_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageInfo::clear_valkiria_height() {
  valkiria_height_ = 0u;
  clear_has_valkiria_height();
}
inline ::google::protobuf::uint32 ImageInfo::valkiria_height() const {
  // @@protoc_insertion_point(field_get:afisha.storage.ImageInfo.valkiria_height)
  return valkiria_height_;
}
inline void ImageInfo::set_valkiria_height(::google::protobuf::uint32 value) {
  set_has_valkiria_height();
  valkiria_height_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.ImageInfo.valkiria_height)
}

// -------------------------------------------------------------------

// FrameInfo

// optional string img = 1;
inline bool FrameInfo::has_img() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameInfo::set_has_img() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameInfo::clear_has_img() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameInfo::clear_img() {
  img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img();
}
inline const ::std::string& FrameInfo::img() const {
  // @@protoc_insertion_point(field_get:afisha.storage.FrameInfo.img)
  return img_.GetNoArena();
}
inline void FrameInfo::set_img(const ::std::string& value) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.FrameInfo.img)
}
#if LANG_CXX11
inline void FrameInfo::set_img(::std::string&& value) {
  set_has_img();
  img_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.FrameInfo.img)
}
#endif
inline void FrameInfo::set_img(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.FrameInfo.img)
}
inline void FrameInfo::set_img(const char* value, size_t size) {
  set_has_img();
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.FrameInfo.img)
}
inline ::std::string* FrameInfo::mutable_img() {
  set_has_img();
  // @@protoc_insertion_point(field_mutable:afisha.storage.FrameInfo.img)
  return img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameInfo::release_img() {
  // @@protoc_insertion_point(field_release:afisha.storage.FrameInfo.img)
  clear_has_img();
  return img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameInfo::set_allocated_img(::std::string* img) {
  if (img != NULL) {
    set_has_img();
  } else {
    clear_has_img();
  }
  img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.FrameInfo.img)
}

// optional string url = 2;
inline bool FrameInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& FrameInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.FrameInfo.url)
  return url_.GetNoArena();
}
inline void FrameInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.FrameInfo.url)
}
#if LANG_CXX11
inline void FrameInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.FrameInfo.url)
}
#endif
inline void FrameInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.FrameInfo.url)
}
inline void FrameInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.FrameInfo.url)
}
inline ::std::string* FrameInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.FrameInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.FrameInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.FrameInfo.url)
}

// -------------------------------------------------------------------

// GalleryImageInfo

// optional .afisha.storage.ImageInfo image = 1;
inline bool GalleryImageInfo::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GalleryImageInfo::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GalleryImageInfo::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GalleryImageInfo::clear_image() {
  if (image_ != NULL) image_->::afisha::storage::ImageInfo::Clear();
  clear_has_image();
}
inline const ::afisha::storage::ImageInfo& GalleryImageInfo::image() const {
  const ::afisha::storage::ImageInfo* p = image_;
  // @@protoc_insertion_point(field_get:afisha.storage.GalleryImageInfo.image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
inline ::afisha::storage::ImageInfo* GalleryImageInfo::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.GalleryImageInfo.image)
  return image_;
}
inline ::afisha::storage::ImageInfo* GalleryImageInfo::release_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.GalleryImageInfo.image)
  clear_has_image();
  ::afisha::storage::ImageInfo* temp = image_;
  image_ = NULL;
  return temp;
}
inline void GalleryImageInfo::set_allocated_image(::afisha::storage::ImageInfo* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.GalleryImageInfo.image)
}

// optional .afisha.storage.ImageInfo m_image = 2;
inline bool GalleryImageInfo::has_m_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GalleryImageInfo::set_has_m_image() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GalleryImageInfo::clear_has_m_image() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GalleryImageInfo::clear_m_image() {
  if (m_image_ != NULL) m_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_m_image();
}
inline const ::afisha::storage::ImageInfo& GalleryImageInfo::m_image() const {
  const ::afisha::storage::ImageInfo* p = m_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.GalleryImageInfo.m_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
inline ::afisha::storage::ImageInfo* GalleryImageInfo::mutable_m_image() {
  set_has_m_image();
  if (m_image_ == NULL) {
    m_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.GalleryImageInfo.m_image)
  return m_image_;
}
inline ::afisha::storage::ImageInfo* GalleryImageInfo::release_m_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.GalleryImageInfo.m_image)
  clear_has_m_image();
  ::afisha::storage::ImageInfo* temp = m_image_;
  m_image_ = NULL;
  return temp;
}
inline void GalleryImageInfo::set_allocated_m_image(::afisha::storage::ImageInfo* m_image) {
  delete m_image_;
  m_image_ = m_image;
  if (m_image) {
    set_has_m_image();
  } else {
    clear_has_m_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.GalleryImageInfo.m_image)
}

// optional .afisha.storage.ImageInfo tel_image = 3;
inline bool GalleryImageInfo::has_tel_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GalleryImageInfo::set_has_tel_image() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GalleryImageInfo::clear_has_tel_image() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GalleryImageInfo::clear_tel_image() {
  if (tel_image_ != NULL) tel_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_tel_image();
}
inline const ::afisha::storage::ImageInfo& GalleryImageInfo::tel_image() const {
  const ::afisha::storage::ImageInfo* p = tel_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.GalleryImageInfo.tel_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
inline ::afisha::storage::ImageInfo* GalleryImageInfo::mutable_tel_image() {
  set_has_tel_image();
  if (tel_image_ == NULL) {
    tel_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.GalleryImageInfo.tel_image)
  return tel_image_;
}
inline ::afisha::storage::ImageInfo* GalleryImageInfo::release_tel_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.GalleryImageInfo.tel_image)
  clear_has_tel_image();
  ::afisha::storage::ImageInfo* temp = tel_image_;
  tel_image_ = NULL;
  return temp;
}
inline void GalleryImageInfo::set_allocated_tel_image(::afisha::storage::ImageInfo* tel_image) {
  delete tel_image_;
  tel_image_ = tel_image;
  if (tel_image) {
    set_has_tel_image();
  } else {
    clear_has_tel_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.GalleryImageInfo.tel_image)
}

// optional .afisha.storage.ImageInfo touch_image = 4;
inline bool GalleryImageInfo::has_touch_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GalleryImageInfo::set_has_touch_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GalleryImageInfo::clear_has_touch_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GalleryImageInfo::clear_touch_image() {
  if (touch_image_ != NULL) touch_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_touch_image();
}
inline const ::afisha::storage::ImageInfo& GalleryImageInfo::touch_image() const {
  const ::afisha::storage::ImageInfo* p = touch_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.GalleryImageInfo.touch_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
inline ::afisha::storage::ImageInfo* GalleryImageInfo::mutable_touch_image() {
  set_has_touch_image();
  if (touch_image_ == NULL) {
    touch_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.GalleryImageInfo.touch_image)
  return touch_image_;
}
inline ::afisha::storage::ImageInfo* GalleryImageInfo::release_touch_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.GalleryImageInfo.touch_image)
  clear_has_touch_image();
  ::afisha::storage::ImageInfo* temp = touch_image_;
  touch_image_ = NULL;
  return temp;
}
inline void GalleryImageInfo::set_allocated_touch_image(::afisha::storage::ImageInfo* touch_image) {
  delete touch_image_;
  touch_image_ = touch_image;
  if (touch_image) {
    set_has_touch_image();
  } else {
    clear_has_touch_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.GalleryImageInfo.touch_image)
}

// optional .afisha.storage.FrameInfo frame = 5;
inline bool GalleryImageInfo::has_frame() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GalleryImageInfo::set_has_frame() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GalleryImageInfo::clear_has_frame() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GalleryImageInfo::clear_frame() {
  if (frame_ != NULL) frame_->::afisha::storage::FrameInfo::Clear();
  clear_has_frame();
}
inline const ::afisha::storage::FrameInfo& GalleryImageInfo::frame() const {
  const ::afisha::storage::FrameInfo* p = frame_;
  // @@protoc_insertion_point(field_get:afisha.storage.GalleryImageInfo.frame)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::FrameInfo*>(
      &::afisha::storage::_FrameInfo_default_instance_);
}
inline ::afisha::storage::FrameInfo* GalleryImageInfo::mutable_frame() {
  set_has_frame();
  if (frame_ == NULL) {
    frame_ = new ::afisha::storage::FrameInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.GalleryImageInfo.frame)
  return frame_;
}
inline ::afisha::storage::FrameInfo* GalleryImageInfo::release_frame() {
  // @@protoc_insertion_point(field_release:afisha.storage.GalleryImageInfo.frame)
  clear_has_frame();
  ::afisha::storage::FrameInfo* temp = frame_;
  frame_ = NULL;
  return temp;
}
inline void GalleryImageInfo::set_allocated_frame(::afisha::storage::FrameInfo* frame) {
  delete frame_;
  frame_ = frame;
  if (frame) {
    set_has_frame();
  } else {
    clear_has_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.GalleryImageInfo.frame)
}

// -------------------------------------------------------------------

// SeanceInfo

// required .afisha.storage.SeanceType type = 1;
inline bool SeanceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SeanceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SeanceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SeanceInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::afisha::storage::SeanceType SeanceInfo::type() const {
  // @@protoc_insertion_point(field_get:afisha.storage.SeanceInfo.type)
  return static_cast< ::afisha::storage::SeanceType >(type_);
}
inline void SeanceInfo::set_type(::afisha::storage::SeanceType value) {
  assert(::afisha::storage::SeanceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.SeanceInfo.type)
}

// required uint64 time = 2;
inline bool SeanceInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SeanceInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SeanceInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SeanceInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 SeanceInfo::time() const {
  // @@protoc_insertion_point(field_get:afisha.storage.SeanceInfo.time)
  return time_;
}
inline void SeanceInfo::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.SeanceInfo.time)
}

// optional string url = 3;
inline bool SeanceInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeanceInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeanceInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeanceInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& SeanceInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.SeanceInfo.url)
  return url_.GetNoArena();
}
inline void SeanceInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.SeanceInfo.url)
}
#if LANG_CXX11
inline void SeanceInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.SeanceInfo.url)
}
#endif
inline void SeanceInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.SeanceInfo.url)
}
inline void SeanceInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.SeanceInfo.url)
}
inline ::std::string* SeanceInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.SeanceInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeanceInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.SeanceInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeanceInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.SeanceInfo.url)
}

// -------------------------------------------------------------------

// MovieInfo

// required uint64 id = 1;
inline bool MovieInfo::has_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MovieInfo::set_has_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MovieInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MovieInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 MovieInfo::id() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.id)
  return id_;
}
inline void MovieInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.id)
}

// required string name = 2;
inline bool MovieInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MovieInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MovieInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MovieInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MovieInfo::name() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.name)
  return name_.GetNoArena();
}
inline void MovieInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.name)
}
#if LANG_CXX11
inline void MovieInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.name)
}
#endif
inline void MovieInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.name)
}
inline void MovieInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.name)
}
inline ::std::string* MovieInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_name() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.name)
}

// required string url = 3;
inline bool MovieInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MovieInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MovieInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MovieInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& MovieInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.url)
  return url_.GetNoArena();
}
inline void MovieInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.url)
}
#if LANG_CXX11
inline void MovieInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.url)
}
#endif
inline void MovieInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.url)
}
inline void MovieInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.url)
}
inline ::std::string* MovieInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.url)
}

// required .afisha.storage.MovieStatus status = 4;
inline bool MovieInfo::has_status() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void MovieInfo::set_has_status() {
  _has_bits_[0] |= 0x10000000u;
}
inline void MovieInfo::clear_has_status() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void MovieInfo::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::afisha::storage::MovieStatus MovieInfo::status() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.status)
  return static_cast< ::afisha::storage::MovieStatus >(status_);
}
inline void MovieInfo::set_status(::afisha::storage::MovieStatus value) {
  assert(::afisha::storage::MovieStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.status)
}

// optional string original_name = 5;
inline bool MovieInfo::has_original_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MovieInfo::set_has_original_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MovieInfo::clear_has_original_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MovieInfo::clear_original_name() {
  original_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_original_name();
}
inline const ::std::string& MovieInfo::original_name() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.original_name)
  return original_name_.GetNoArena();
}
inline void MovieInfo::set_original_name(const ::std::string& value) {
  set_has_original_name();
  original_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.original_name)
}
#if LANG_CXX11
inline void MovieInfo::set_original_name(::std::string&& value) {
  set_has_original_name();
  original_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.original_name)
}
#endif
inline void MovieInfo::set_original_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_original_name();
  original_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.original_name)
}
inline void MovieInfo::set_original_name(const char* value, size_t size) {
  set_has_original_name();
  original_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.original_name)
}
inline ::std::string* MovieInfo::mutable_original_name() {
  set_has_original_name();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.original_name)
  return original_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_original_name() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.original_name)
  clear_has_original_name();
  return original_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_original_name(::std::string* original_name) {
  if (original_name != NULL) {
    set_has_original_name();
  } else {
    clear_has_original_name();
  }
  original_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_name);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.original_name)
}

// optional string description = 6;
inline bool MovieInfo::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MovieInfo::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MovieInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MovieInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& MovieInfo::description() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.description)
  return description_.GetNoArena();
}
inline void MovieInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.description)
}
#if LANG_CXX11
inline void MovieInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.description)
}
#endif
inline void MovieInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.description)
}
inline void MovieInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.description)
}
inline ::std::string* MovieInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_description() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.description)
}

// optional string review = 7;
inline bool MovieInfo::has_review() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MovieInfo::set_has_review() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MovieInfo::clear_has_review() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MovieInfo::clear_review() {
  review_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_review();
}
inline const ::std::string& MovieInfo::review() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.review)
  return review_.GetNoArena();
}
inline void MovieInfo::set_review(const ::std::string& value) {
  set_has_review();
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.review)
}
#if LANG_CXX11
inline void MovieInfo::set_review(::std::string&& value) {
  set_has_review();
  review_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.review)
}
#endif
inline void MovieInfo::set_review(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_review();
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.review)
}
inline void MovieInfo::set_review(const char* value, size_t size) {
  set_has_review();
  review_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.review)
}
inline ::std::string* MovieInfo::mutable_review() {
  set_has_review();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.review)
  return review_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_review() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.review)
  clear_has_review();
  return review_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_review(::std::string* review) {
  if (review != NULL) {
    set_has_review();
  } else {
    clear_has_review();
  }
  review_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), review);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.review)
}

// optional uint64 release = 8;
inline bool MovieInfo::has_release() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MovieInfo::set_has_release() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MovieInfo::clear_has_release() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MovieInfo::clear_release() {
  release_ = GOOGLE_ULONGLONG(0);
  clear_has_release();
}
inline ::google::protobuf::uint64 MovieInfo::release() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.release)
  return release_;
}
inline void MovieInfo::set_release(::google::protobuf::uint64 value) {
  set_has_release();
  release_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.release)
}

// optional uint64 release_ru = 9;
inline bool MovieInfo::has_release_ru() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MovieInfo::set_has_release_ru() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MovieInfo::clear_has_release_ru() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MovieInfo::clear_release_ru() {
  release_ru_ = GOOGLE_ULONGLONG(0);
  clear_has_release_ru();
}
inline ::google::protobuf::uint64 MovieInfo::release_ru() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.release_ru)
  return release_ru_;
}
inline void MovieInfo::set_release_ru(::google::protobuf::uint64 value) {
  set_has_release_ru();
  release_ru_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.release_ru)
}

// optional .afisha.storage.ImageInfo image = 10;
inline bool MovieInfo::has_image() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MovieInfo::set_has_image() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MovieInfo::clear_has_image() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MovieInfo::clear_image() {
  if (image_ != NULL) image_->::afisha::storage::ImageInfo::Clear();
  clear_has_image();
}
inline const ::afisha::storage::ImageInfo& MovieInfo::image() const {
  const ::afisha::storage::ImageInfo* p = image_;
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
inline ::afisha::storage::ImageInfo* MovieInfo::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.image)
  return image_;
}
inline ::afisha::storage::ImageInfo* MovieInfo::release_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.image)
  clear_has_image();
  ::afisha::storage::ImageInfo* temp = image_;
  image_ = NULL;
  return temp;
}
inline void MovieInfo::set_allocated_image(::afisha::storage::ImageInfo* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.image)
}

// optional .afisha.storage.ImageInfo m_image = 33;
inline bool MovieInfo::has_m_image() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MovieInfo::set_has_m_image() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MovieInfo::clear_has_m_image() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MovieInfo::clear_m_image() {
  if (m_image_ != NULL) m_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_m_image();
}
inline const ::afisha::storage::ImageInfo& MovieInfo::m_image() const {
  const ::afisha::storage::ImageInfo* p = m_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.m_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
inline ::afisha::storage::ImageInfo* MovieInfo::mutable_m_image() {
  set_has_m_image();
  if (m_image_ == NULL) {
    m_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.m_image)
  return m_image_;
}
inline ::afisha::storage::ImageInfo* MovieInfo::release_m_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.m_image)
  clear_has_m_image();
  ::afisha::storage::ImageInfo* temp = m_image_;
  m_image_ = NULL;
  return temp;
}
inline void MovieInfo::set_allocated_m_image(::afisha::storage::ImageInfo* m_image) {
  delete m_image_;
  m_image_ = m_image;
  if (m_image) {
    set_has_m_image();
  } else {
    clear_has_m_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.m_image)
}

// optional .afisha.storage.ImageInfo tel_image = 34;
inline bool MovieInfo::has_tel_image() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MovieInfo::set_has_tel_image() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MovieInfo::clear_has_tel_image() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MovieInfo::clear_tel_image() {
  if (tel_image_ != NULL) tel_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_tel_image();
}
inline const ::afisha::storage::ImageInfo& MovieInfo::tel_image() const {
  const ::afisha::storage::ImageInfo* p = tel_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.tel_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
inline ::afisha::storage::ImageInfo* MovieInfo::mutable_tel_image() {
  set_has_tel_image();
  if (tel_image_ == NULL) {
    tel_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.tel_image)
  return tel_image_;
}
inline ::afisha::storage::ImageInfo* MovieInfo::release_tel_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.tel_image)
  clear_has_tel_image();
  ::afisha::storage::ImageInfo* temp = tel_image_;
  tel_image_ = NULL;
  return temp;
}
inline void MovieInfo::set_allocated_tel_image(::afisha::storage::ImageInfo* tel_image) {
  delete tel_image_;
  tel_image_ = tel_image;
  if (tel_image) {
    set_has_tel_image();
  } else {
    clear_has_tel_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.tel_image)
}

// optional .afisha.storage.ImageInfo touch_image = 35;
inline bool MovieInfo::has_touch_image() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MovieInfo::set_has_touch_image() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MovieInfo::clear_has_touch_image() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MovieInfo::clear_touch_image() {
  if (touch_image_ != NULL) touch_image_->::afisha::storage::ImageInfo::Clear();
  clear_has_touch_image();
}
inline const ::afisha::storage::ImageInfo& MovieInfo::touch_image() const {
  const ::afisha::storage::ImageInfo* p = touch_image_;
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.touch_image)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::ImageInfo*>(
      &::afisha::storage::_ImageInfo_default_instance_);
}
inline ::afisha::storage::ImageInfo* MovieInfo::mutable_touch_image() {
  set_has_touch_image();
  if (touch_image_ == NULL) {
    touch_image_ = new ::afisha::storage::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.touch_image)
  return touch_image_;
}
inline ::afisha::storage::ImageInfo* MovieInfo::release_touch_image() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.touch_image)
  clear_has_touch_image();
  ::afisha::storage::ImageInfo* temp = touch_image_;
  touch_image_ = NULL;
  return temp;
}
inline void MovieInfo::set_allocated_touch_image(::afisha::storage::ImageInfo* touch_image) {
  delete touch_image_;
  touch_image_ = touch_image;
  if (touch_image) {
    set_has_touch_image();
  } else {
    clear_has_touch_image();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.touch_image)
}

// repeated .afisha.storage.GalleryImageInfo gallery = 11;
inline int MovieInfo::gallery_size() const {
  return gallery_.size();
}
inline void MovieInfo::clear_gallery() {
  gallery_.Clear();
}
inline const ::afisha::storage::GalleryImageInfo& MovieInfo::gallery(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.gallery)
  return gallery_.Get(index);
}
inline ::afisha::storage::GalleryImageInfo* MovieInfo::mutable_gallery(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.gallery)
  return gallery_.Mutable(index);
}
inline ::afisha::storage::GalleryImageInfo* MovieInfo::add_gallery() {
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.gallery)
  return gallery_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::afisha::storage::GalleryImageInfo >*
MovieInfo::mutable_gallery() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.gallery)
  return &gallery_;
}
inline const ::google::protobuf::RepeatedPtrField< ::afisha::storage::GalleryImageInfo >&
MovieInfo::gallery() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.gallery)
  return gallery_;
}

// repeated .afisha.storage.ActorInfo actors = 12;
inline int MovieInfo::actors_size() const {
  return actors_.size();
}
inline void MovieInfo::clear_actors() {
  actors_.Clear();
}
inline const ::afisha::storage::ActorInfo& MovieInfo::actors(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.actors)
  return actors_.Get(index);
}
inline ::afisha::storage::ActorInfo* MovieInfo::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.actors)
  return actors_.Mutable(index);
}
inline ::afisha::storage::ActorInfo* MovieInfo::add_actors() {
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.actors)
  return actors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::afisha::storage::ActorInfo >*
MovieInfo::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.actors)
  return &actors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::afisha::storage::ActorInfo >&
MovieInfo::actors() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.actors)
  return actors_;
}

// repeated string producers = 13;
inline int MovieInfo::producers_size() const {
  return producers_.size();
}
inline void MovieInfo::clear_producers() {
  producers_.Clear();
}
inline const ::std::string& MovieInfo::producers(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.producers)
  return producers_.Get(index);
}
inline ::std::string* MovieInfo::mutable_producers(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.producers)
  return producers_.Mutable(index);
}
inline void MovieInfo::set_producers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.producers)
  producers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MovieInfo::set_producers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.producers)
  producers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MovieInfo::set_producers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  producers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.producers)
}
inline void MovieInfo::set_producers(int index, const char* value, size_t size) {
  producers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.producers)
}
inline ::std::string* MovieInfo::add_producers() {
  // @@protoc_insertion_point(field_add_mutable:afisha.storage.MovieInfo.producers)
  return producers_.Add();
}
inline void MovieInfo::add_producers(const ::std::string& value) {
  producers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.producers)
}
#if LANG_CXX11
inline void MovieInfo::add_producers(::std::string&& value) {
  producers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.producers)
}
#endif
inline void MovieInfo::add_producers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  producers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afisha.storage.MovieInfo.producers)
}
inline void MovieInfo::add_producers(const char* value, size_t size) {
  producers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afisha.storage.MovieInfo.producers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MovieInfo::producers() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.producers)
  return producers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MovieInfo::mutable_producers() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.producers)
  return &producers_;
}

// repeated string directors = 14;
inline int MovieInfo::directors_size() const {
  return directors_.size();
}
inline void MovieInfo::clear_directors() {
  directors_.Clear();
}
inline const ::std::string& MovieInfo::directors(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.directors)
  return directors_.Get(index);
}
inline ::std::string* MovieInfo::mutable_directors(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.directors)
  return directors_.Mutable(index);
}
inline void MovieInfo::set_directors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.directors)
  directors_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MovieInfo::set_directors(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.directors)
  directors_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MovieInfo::set_directors(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  directors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.directors)
}
inline void MovieInfo::set_directors(int index, const char* value, size_t size) {
  directors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.directors)
}
inline ::std::string* MovieInfo::add_directors() {
  // @@protoc_insertion_point(field_add_mutable:afisha.storage.MovieInfo.directors)
  return directors_.Add();
}
inline void MovieInfo::add_directors(const ::std::string& value) {
  directors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.directors)
}
#if LANG_CXX11
inline void MovieInfo::add_directors(::std::string&& value) {
  directors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.directors)
}
#endif
inline void MovieInfo::add_directors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  directors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afisha.storage.MovieInfo.directors)
}
inline void MovieInfo::add_directors(const char* value, size_t size) {
  directors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afisha.storage.MovieInfo.directors)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MovieInfo::directors() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.directors)
  return directors_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MovieInfo::mutable_directors() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.directors)
  return &directors_;
}

// repeated string genres = 15;
inline int MovieInfo::genres_size() const {
  return genres_.size();
}
inline void MovieInfo::clear_genres() {
  genres_.Clear();
}
inline const ::std::string& MovieInfo::genres(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.genres)
  return genres_.Get(index);
}
inline ::std::string* MovieInfo::mutable_genres(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.genres)
  return genres_.Mutable(index);
}
inline void MovieInfo::set_genres(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.genres)
  genres_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MovieInfo::set_genres(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.genres)
  genres_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MovieInfo::set_genres(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  genres_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.genres)
}
inline void MovieInfo::set_genres(int index, const char* value, size_t size) {
  genres_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.genres)
}
inline ::std::string* MovieInfo::add_genres() {
  // @@protoc_insertion_point(field_add_mutable:afisha.storage.MovieInfo.genres)
  return genres_.Add();
}
inline void MovieInfo::add_genres(const ::std::string& value) {
  genres_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.genres)
}
#if LANG_CXX11
inline void MovieInfo::add_genres(::std::string&& value) {
  genres_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.genres)
}
#endif
inline void MovieInfo::add_genres(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  genres_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afisha.storage.MovieInfo.genres)
}
inline void MovieInfo::add_genres(const char* value, size_t size) {
  genres_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afisha.storage.MovieInfo.genres)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MovieInfo::genres() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.genres)
  return genres_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MovieInfo::mutable_genres() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.genres)
  return &genres_;
}

// repeated string countries = 16;
inline int MovieInfo::countries_size() const {
  return countries_.size();
}
inline void MovieInfo::clear_countries() {
  countries_.Clear();
}
inline const ::std::string& MovieInfo::countries(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.countries)
  return countries_.Get(index);
}
inline ::std::string* MovieInfo::mutable_countries(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.countries)
  return countries_.Mutable(index);
}
inline void MovieInfo::set_countries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.countries)
  countries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MovieInfo::set_countries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.countries)
  countries_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MovieInfo::set_countries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  countries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.countries)
}
inline void MovieInfo::set_countries(int index, const char* value, size_t size) {
  countries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.countries)
}
inline ::std::string* MovieInfo::add_countries() {
  // @@protoc_insertion_point(field_add_mutable:afisha.storage.MovieInfo.countries)
  return countries_.Add();
}
inline void MovieInfo::add_countries(const ::std::string& value) {
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.countries)
}
#if LANG_CXX11
inline void MovieInfo::add_countries(::std::string&& value) {
  countries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afisha.storage.MovieInfo.countries)
}
#endif
inline void MovieInfo::add_countries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  countries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afisha.storage.MovieInfo.countries)
}
inline void MovieInfo::add_countries(const char* value, size_t size) {
  countries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afisha.storage.MovieInfo.countries)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MovieInfo::countries() const {
  // @@protoc_insertion_point(field_list:afisha.storage.MovieInfo.countries)
  return countries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MovieInfo::mutable_countries() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.MovieInfo.countries)
  return &countries_;
}

// optional string gallery_url = 17;
inline bool MovieInfo::has_gallery_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MovieInfo::set_has_gallery_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MovieInfo::clear_has_gallery_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MovieInfo::clear_gallery_url() {
  gallery_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gallery_url();
}
inline const ::std::string& MovieInfo::gallery_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.gallery_url)
  return gallery_url_.GetNoArena();
}
inline void MovieInfo::set_gallery_url(const ::std::string& value) {
  set_has_gallery_url();
  gallery_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.gallery_url)
}
#if LANG_CXX11
inline void MovieInfo::set_gallery_url(::std::string&& value) {
  set_has_gallery_url();
  gallery_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.gallery_url)
}
#endif
inline void MovieInfo::set_gallery_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gallery_url();
  gallery_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.gallery_url)
}
inline void MovieInfo::set_gallery_url(const char* value, size_t size) {
  set_has_gallery_url();
  gallery_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.gallery_url)
}
inline ::std::string* MovieInfo::mutable_gallery_url() {
  set_has_gallery_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.gallery_url)
  return gallery_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_gallery_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.gallery_url)
  clear_has_gallery_url();
  return gallery_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_gallery_url(::std::string* gallery_url) {
  if (gallery_url != NULL) {
    set_has_gallery_url();
  } else {
    clear_has_gallery_url();
  }
  gallery_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gallery_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.gallery_url)
}

// optional string review_url = 18;
inline bool MovieInfo::has_review_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MovieInfo::set_has_review_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MovieInfo::clear_has_review_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MovieInfo::clear_review_url() {
  review_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_review_url();
}
inline const ::std::string& MovieInfo::review_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.review_url)
  return review_url_.GetNoArena();
}
inline void MovieInfo::set_review_url(const ::std::string& value) {
  set_has_review_url();
  review_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.review_url)
}
#if LANG_CXX11
inline void MovieInfo::set_review_url(::std::string&& value) {
  set_has_review_url();
  review_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.review_url)
}
#endif
inline void MovieInfo::set_review_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_review_url();
  review_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.review_url)
}
inline void MovieInfo::set_review_url(const char* value, size_t size) {
  set_has_review_url();
  review_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.review_url)
}
inline ::std::string* MovieInfo::mutable_review_url() {
  set_has_review_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.review_url)
  return review_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_review_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.review_url)
  clear_has_review_url();
  return review_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_review_url(::std::string* review_url) {
  if (review_url != NULL) {
    set_has_review_url();
  } else {
    clear_has_review_url();
  }
  review_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), review_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.review_url)
}

// optional string ticket_url = 19;
inline bool MovieInfo::has_ticket_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MovieInfo::set_has_ticket_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MovieInfo::clear_has_ticket_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MovieInfo::clear_ticket_url() {
  ticket_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket_url();
}
inline const ::std::string& MovieInfo::ticket_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.ticket_url)
  return ticket_url_.GetNoArena();
}
inline void MovieInfo::set_ticket_url(const ::std::string& value) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.ticket_url)
}
#if LANG_CXX11
inline void MovieInfo::set_ticket_url(::std::string&& value) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.ticket_url)
}
#endif
inline void MovieInfo::set_ticket_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.ticket_url)
}
inline void MovieInfo::set_ticket_url(const char* value, size_t size) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.ticket_url)
}
inline ::std::string* MovieInfo::mutable_ticket_url() {
  set_has_ticket_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.ticket_url)
  return ticket_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_ticket_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.ticket_url)
  clear_has_ticket_url();
  return ticket_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_ticket_url(::std::string* ticket_url) {
  if (ticket_url != NULL) {
    set_has_ticket_url();
  } else {
    clear_has_ticket_url();
  }
  ticket_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.ticket_url)
}

// optional string kinopoisk_url = 20;
inline bool MovieInfo::has_kinopoisk_url() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MovieInfo::set_has_kinopoisk_url() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MovieInfo::clear_has_kinopoisk_url() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MovieInfo::clear_kinopoisk_url() {
  kinopoisk_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kinopoisk_url();
}
inline const ::std::string& MovieInfo::kinopoisk_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.kinopoisk_url)
  return kinopoisk_url_.GetNoArena();
}
inline void MovieInfo::set_kinopoisk_url(const ::std::string& value) {
  set_has_kinopoisk_url();
  kinopoisk_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.kinopoisk_url)
}
#if LANG_CXX11
inline void MovieInfo::set_kinopoisk_url(::std::string&& value) {
  set_has_kinopoisk_url();
  kinopoisk_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.kinopoisk_url)
}
#endif
inline void MovieInfo::set_kinopoisk_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kinopoisk_url();
  kinopoisk_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.kinopoisk_url)
}
inline void MovieInfo::set_kinopoisk_url(const char* value, size_t size) {
  set_has_kinopoisk_url();
  kinopoisk_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.kinopoisk_url)
}
inline ::std::string* MovieInfo::mutable_kinopoisk_url() {
  set_has_kinopoisk_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.kinopoisk_url)
  return kinopoisk_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_kinopoisk_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.kinopoisk_url)
  clear_has_kinopoisk_url();
  return kinopoisk_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_kinopoisk_url(::std::string* kinopoisk_url) {
  if (kinopoisk_url != NULL) {
    set_has_kinopoisk_url();
  } else {
    clear_has_kinopoisk_url();
  }
  kinopoisk_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kinopoisk_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.kinopoisk_url)
}

// optional string trailer_url = 21;
inline bool MovieInfo::has_trailer_url() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MovieInfo::set_has_trailer_url() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MovieInfo::clear_has_trailer_url() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MovieInfo::clear_trailer_url() {
  trailer_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trailer_url();
}
inline const ::std::string& MovieInfo::trailer_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.trailer_url)
  return trailer_url_.GetNoArena();
}
inline void MovieInfo::set_trailer_url(const ::std::string& value) {
  set_has_trailer_url();
  trailer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.trailer_url)
}
#if LANG_CXX11
inline void MovieInfo::set_trailer_url(::std::string&& value) {
  set_has_trailer_url();
  trailer_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.trailer_url)
}
#endif
inline void MovieInfo::set_trailer_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trailer_url();
  trailer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.trailer_url)
}
inline void MovieInfo::set_trailer_url(const char* value, size_t size) {
  set_has_trailer_url();
  trailer_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.trailer_url)
}
inline ::std::string* MovieInfo::mutable_trailer_url() {
  set_has_trailer_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.trailer_url)
  return trailer_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_trailer_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.trailer_url)
  clear_has_trailer_url();
  return trailer_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_trailer_url(::std::string* trailer_url) {
  if (trailer_url != NULL) {
    set_has_trailer_url();
  } else {
    clear_has_trailer_url();
  }
  trailer_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trailer_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.trailer_url)
}

// optional string trailer_source_url = 22;
inline bool MovieInfo::has_trailer_source_url() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MovieInfo::set_has_trailer_source_url() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MovieInfo::clear_has_trailer_source_url() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MovieInfo::clear_trailer_source_url() {
  trailer_source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trailer_source_url();
}
inline const ::std::string& MovieInfo::trailer_source_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.trailer_source_url)
  return trailer_source_url_.GetNoArena();
}
inline void MovieInfo::set_trailer_source_url(const ::std::string& value) {
  set_has_trailer_source_url();
  trailer_source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.trailer_source_url)
}
#if LANG_CXX11
inline void MovieInfo::set_trailer_source_url(::std::string&& value) {
  set_has_trailer_source_url();
  trailer_source_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.trailer_source_url)
}
#endif
inline void MovieInfo::set_trailer_source_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trailer_source_url();
  trailer_source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.trailer_source_url)
}
inline void MovieInfo::set_trailer_source_url(const char* value, size_t size) {
  set_has_trailer_source_url();
  trailer_source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.trailer_source_url)
}
inline ::std::string* MovieInfo::mutable_trailer_source_url() {
  set_has_trailer_source_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.trailer_source_url)
  return trailer_source_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_trailer_source_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.trailer_source_url)
  clear_has_trailer_source_url();
  return trailer_source_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_trailer_source_url(::std::string* trailer_source_url) {
  if (trailer_source_url != NULL) {
    set_has_trailer_source_url();
  } else {
    clear_has_trailer_source_url();
  }
  trailer_source_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trailer_source_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.trailer_source_url)
}

// optional string imdb_url = 23;
inline bool MovieInfo::has_imdb_url() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MovieInfo::set_has_imdb_url() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MovieInfo::clear_has_imdb_url() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MovieInfo::clear_imdb_url() {
  imdb_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imdb_url();
}
inline const ::std::string& MovieInfo::imdb_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.imdb_url)
  return imdb_url_.GetNoArena();
}
inline void MovieInfo::set_imdb_url(const ::std::string& value) {
  set_has_imdb_url();
  imdb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.imdb_url)
}
#if LANG_CXX11
inline void MovieInfo::set_imdb_url(::std::string&& value) {
  set_has_imdb_url();
  imdb_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.imdb_url)
}
#endif
inline void MovieInfo::set_imdb_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imdb_url();
  imdb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.imdb_url)
}
inline void MovieInfo::set_imdb_url(const char* value, size_t size) {
  set_has_imdb_url();
  imdb_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.imdb_url)
}
inline ::std::string* MovieInfo::mutable_imdb_url() {
  set_has_imdb_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.imdb_url)
  return imdb_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_imdb_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.imdb_url)
  clear_has_imdb_url();
  return imdb_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_imdb_url(::std::string* imdb_url) {
  if (imdb_url != NULL) {
    set_has_imdb_url();
  } else {
    clear_has_imdb_url();
  }
  imdb_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imdb_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.imdb_url)
}

// optional uint32 duration = 24;
inline bool MovieInfo::has_duration() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MovieInfo::set_has_duration() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MovieInfo::clear_has_duration() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MovieInfo::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 MovieInfo::duration() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.duration)
  return duration_;
}
inline void MovieInfo::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.duration)
}

// optional float imdb_rating = 25;
inline bool MovieInfo::has_imdb_rating() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MovieInfo::set_has_imdb_rating() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MovieInfo::clear_has_imdb_rating() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MovieInfo::clear_imdb_rating() {
  imdb_rating_ = 0;
  clear_has_imdb_rating();
}
inline float MovieInfo::imdb_rating() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.imdb_rating)
  return imdb_rating_;
}
inline void MovieInfo::set_imdb_rating(float value) {
  set_has_imdb_rating();
  imdb_rating_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.imdb_rating)
}

// optional int32 mail_rating_count = 26;
inline bool MovieInfo::has_mail_rating_count() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MovieInfo::set_has_mail_rating_count() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MovieInfo::clear_has_mail_rating_count() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MovieInfo::clear_mail_rating_count() {
  mail_rating_count_ = 0;
  clear_has_mail_rating_count();
}
inline ::google::protobuf::int32 MovieInfo::mail_rating_count() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.mail_rating_count)
  return mail_rating_count_;
}
inline void MovieInfo::set_mail_rating_count(::google::protobuf::int32 value) {
  set_has_mail_rating_count();
  mail_rating_count_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.mail_rating_count)
}

// optional float mail_rating_min = 27;
inline bool MovieInfo::has_mail_rating_min() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MovieInfo::set_has_mail_rating_min() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MovieInfo::clear_has_mail_rating_min() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MovieInfo::clear_mail_rating_min() {
  mail_rating_min_ = 0;
  clear_has_mail_rating_min();
}
inline float MovieInfo::mail_rating_min() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.mail_rating_min)
  return mail_rating_min_;
}
inline void MovieInfo::set_mail_rating_min(float value) {
  set_has_mail_rating_min();
  mail_rating_min_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.mail_rating_min)
}

// optional float mail_rating_max = 28;
inline bool MovieInfo::has_mail_rating_max() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MovieInfo::set_has_mail_rating_max() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MovieInfo::clear_has_mail_rating_max() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MovieInfo::clear_mail_rating_max() {
  mail_rating_max_ = 0;
  clear_has_mail_rating_max();
}
inline float MovieInfo::mail_rating_max() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.mail_rating_max)
  return mail_rating_max_;
}
inline void MovieInfo::set_mail_rating_max(float value) {
  set_has_mail_rating_max();
  mail_rating_max_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.mail_rating_max)
}

// optional float mail_rating = 29;
inline bool MovieInfo::has_mail_rating() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MovieInfo::set_has_mail_rating() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MovieInfo::clear_has_mail_rating() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MovieInfo::clear_mail_rating() {
  mail_rating_ = 0;
  clear_has_mail_rating();
}
inline float MovieInfo::mail_rating() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.mail_rating)
  return mail_rating_;
}
inline void MovieInfo::set_mail_rating(float value) {
  set_has_mail_rating();
  mail_rating_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.mail_rating)
}

// optional uint32 age_restriction = 30;
inline bool MovieInfo::has_age_restriction() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MovieInfo::set_has_age_restriction() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MovieInfo::clear_has_age_restriction() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MovieInfo::clear_age_restriction() {
  age_restriction_ = 0u;
  clear_has_age_restriction();
}
inline ::google::protobuf::uint32 MovieInfo::age_restriction() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.age_restriction)
  return age_restriction_;
}
inline void MovieInfo::set_age_restriction(::google::protobuf::uint32 value) {
  set_has_age_restriction();
  age_restriction_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.age_restriction)
}

// optional int32 year = 31;
inline bool MovieInfo::has_year() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void MovieInfo::set_has_year() {
  _has_bits_[0] |= 0x08000000u;
}
inline void MovieInfo::clear_has_year() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void MovieInfo::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 MovieInfo::year() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.year)
  return year_;
}
inline void MovieInfo::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.year)
}

// optional string site = 32;
inline bool MovieInfo::has_site() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MovieInfo::set_has_site() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MovieInfo::clear_has_site() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MovieInfo::clear_site() {
  site_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_site();
}
inline const ::std::string& MovieInfo::site() const {
  // @@protoc_insertion_point(field_get:afisha.storage.MovieInfo.site)
  return site_.GetNoArena();
}
inline void MovieInfo::set_site(const ::std::string& value) {
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.MovieInfo.site)
}
#if LANG_CXX11
inline void MovieInfo::set_site(::std::string&& value) {
  set_has_site();
  site_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.MovieInfo.site)
}
#endif
inline void MovieInfo::set_site(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.MovieInfo.site)
}
inline void MovieInfo::set_site(const char* value, size_t size) {
  set_has_site();
  site_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.MovieInfo.site)
}
inline ::std::string* MovieInfo::mutable_site() {
  set_has_site();
  // @@protoc_insertion_point(field_mutable:afisha.storage.MovieInfo.site)
  return site_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MovieInfo::release_site() {
  // @@protoc_insertion_point(field_release:afisha.storage.MovieInfo.site)
  clear_has_site();
  return site_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MovieInfo::set_allocated_site(::std::string* site) {
  if (site != NULL) {
    set_has_site();
  } else {
    clear_has_site();
  }
  site_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), site);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.MovieInfo.site)
}

// -------------------------------------------------------------------

// TicketPriceInfo

// required uint32 min = 1;
inline bool TicketPriceInfo::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TicketPriceInfo::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TicketPriceInfo::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TicketPriceInfo::clear_min() {
  min_ = 0u;
  clear_has_min();
}
inline ::google::protobuf::uint32 TicketPriceInfo::min() const {
  // @@protoc_insertion_point(field_get:afisha.storage.TicketPriceInfo.min)
  return min_;
}
inline void TicketPriceInfo::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.TicketPriceInfo.min)
}

// required uint32 max = 2;
inline bool TicketPriceInfo::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TicketPriceInfo::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TicketPriceInfo::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TicketPriceInfo::clear_max() {
  max_ = 0u;
  clear_has_max();
}
inline ::google::protobuf::uint32 TicketPriceInfo::max() const {
  // @@protoc_insertion_point(field_get:afisha.storage.TicketPriceInfo.max)
  return max_;
}
inline void TicketPriceInfo::set_max(::google::protobuf::uint32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.TicketPriceInfo.max)
}

// -------------------------------------------------------------------

// CinemaInfo

// required uint64 id = 1;
inline bool CinemaInfo::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CinemaInfo::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CinemaInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CinemaInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CinemaInfo::id() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.id)
  return id_;
}
inline void CinemaInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.id)
}

// required string name = 2;
inline bool CinemaInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CinemaInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CinemaInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CinemaInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CinemaInfo::name() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.name)
  return name_.GetNoArena();
}
inline void CinemaInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.name)
}
#if LANG_CXX11
inline void CinemaInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.name)
}
#endif
inline void CinemaInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.name)
}
inline void CinemaInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.name)
}
inline ::std::string* CinemaInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CinemaInfo::release_name() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CinemaInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.name)
}

// required string url = 3;
inline bool CinemaInfo::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CinemaInfo::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CinemaInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CinemaInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& CinemaInfo::url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.url)
  return url_.GetNoArena();
}
inline void CinemaInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.url)
}
#if LANG_CXX11
inline void CinemaInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.url)
}
#endif
inline void CinemaInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.url)
}
inline void CinemaInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.url)
}
inline ::std::string* CinemaInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CinemaInfo::release_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CinemaInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.url)
}

// required uint32 rb_code = 4;
inline bool CinemaInfo::has_rb_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CinemaInfo::set_has_rb_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CinemaInfo::clear_has_rb_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CinemaInfo::clear_rb_code() {
  rb_code_ = 0u;
  clear_has_rb_code();
}
inline ::google::protobuf::uint32 CinemaInfo::rb_code() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.rb_code)
  return rb_code_;
}
inline void CinemaInfo::set_rb_code(::google::protobuf::uint32 value) {
  set_has_rb_code();
  rb_code_ = value;
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.rb_code)
}

// required string address = 5;
inline bool CinemaInfo::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CinemaInfo::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CinemaInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CinemaInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& CinemaInfo::address() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.address)
  return address_.GetNoArena();
}
inline void CinemaInfo::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.address)
}
#if LANG_CXX11
inline void CinemaInfo::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.address)
}
#endif
inline void CinemaInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.address)
}
inline void CinemaInfo::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.address)
}
inline ::std::string* CinemaInfo::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CinemaInfo::release_address() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CinemaInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.address)
}

// required .afisha.storage.GpsInfo location = 6;
inline bool CinemaInfo::has_location() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CinemaInfo::set_has_location() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CinemaInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CinemaInfo::clear_location() {
  if (location_ != NULL) location_->::afisha::storage::GpsInfo::Clear();
  clear_has_location();
}
inline const ::afisha::storage::GpsInfo& CinemaInfo::location() const {
  const ::afisha::storage::GpsInfo* p = location_;
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.location)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::GpsInfo*>(
      &::afisha::storage::_GpsInfo_default_instance_);
}
inline ::afisha::storage::GpsInfo* CinemaInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::afisha::storage::GpsInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.location)
  return location_;
}
inline ::afisha::storage::GpsInfo* CinemaInfo::release_location() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.location)
  clear_has_location();
  ::afisha::storage::GpsInfo* temp = location_;
  location_ = NULL;
  return temp;
}
inline void CinemaInfo::set_allocated_location(::afisha::storage::GpsInfo* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.location)
}

// repeated string subways = 7;
inline int CinemaInfo::subways_size() const {
  return subways_.size();
}
inline void CinemaInfo::clear_subways() {
  subways_.Clear();
}
inline const ::std::string& CinemaInfo::subways(int index) const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.subways)
  return subways_.Get(index);
}
inline ::std::string* CinemaInfo::mutable_subways(int index) {
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.subways)
  return subways_.Mutable(index);
}
inline void CinemaInfo::set_subways(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.subways)
  subways_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CinemaInfo::set_subways(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.subways)
  subways_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CinemaInfo::set_subways(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subways_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.subways)
}
inline void CinemaInfo::set_subways(int index, const char* value, size_t size) {
  subways_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.subways)
}
inline ::std::string* CinemaInfo::add_subways() {
  // @@protoc_insertion_point(field_add_mutable:afisha.storage.CinemaInfo.subways)
  return subways_.Add();
}
inline void CinemaInfo::add_subways(const ::std::string& value) {
  subways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:afisha.storage.CinemaInfo.subways)
}
#if LANG_CXX11
inline void CinemaInfo::add_subways(::std::string&& value) {
  subways_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:afisha.storage.CinemaInfo.subways)
}
#endif
inline void CinemaInfo::add_subways(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subways_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:afisha.storage.CinemaInfo.subways)
}
inline void CinemaInfo::add_subways(const char* value, size_t size) {
  subways_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:afisha.storage.CinemaInfo.subways)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CinemaInfo::subways() const {
  // @@protoc_insertion_point(field_list:afisha.storage.CinemaInfo.subways)
  return subways_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CinemaInfo::mutable_subways() {
  // @@protoc_insertion_point(field_mutable_list:afisha.storage.CinemaInfo.subways)
  return &subways_;
}

// optional string phone_common = 8;
inline bool CinemaInfo::has_phone_common() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CinemaInfo::set_has_phone_common() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CinemaInfo::clear_has_phone_common() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CinemaInfo::clear_phone_common() {
  phone_common_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone_common();
}
inline const ::std::string& CinemaInfo::phone_common() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.phone_common)
  return phone_common_.GetNoArena();
}
inline void CinemaInfo::set_phone_common(const ::std::string& value) {
  set_has_phone_common();
  phone_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.phone_common)
}
#if LANG_CXX11
inline void CinemaInfo::set_phone_common(::std::string&& value) {
  set_has_phone_common();
  phone_common_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.phone_common)
}
#endif
inline void CinemaInfo::set_phone_common(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone_common();
  phone_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.phone_common)
}
inline void CinemaInfo::set_phone_common(const char* value, size_t size) {
  set_has_phone_common();
  phone_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.phone_common)
}
inline ::std::string* CinemaInfo::mutable_phone_common() {
  set_has_phone_common();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.phone_common)
  return phone_common_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CinemaInfo::release_phone_common() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.phone_common)
  clear_has_phone_common();
  return phone_common_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CinemaInfo::set_allocated_phone_common(::std::string* phone_common) {
  if (phone_common != NULL) {
    set_has_phone_common();
  } else {
    clear_has_phone_common();
  }
  phone_common_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_common);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.phone_common)
}

// optional string phone_infobot = 9;
inline bool CinemaInfo::has_phone_infobot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CinemaInfo::set_has_phone_infobot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CinemaInfo::clear_has_phone_infobot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CinemaInfo::clear_phone_infobot() {
  phone_infobot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone_infobot();
}
inline const ::std::string& CinemaInfo::phone_infobot() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.phone_infobot)
  return phone_infobot_.GetNoArena();
}
inline void CinemaInfo::set_phone_infobot(const ::std::string& value) {
  set_has_phone_infobot();
  phone_infobot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.phone_infobot)
}
#if LANG_CXX11
inline void CinemaInfo::set_phone_infobot(::std::string&& value) {
  set_has_phone_infobot();
  phone_infobot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.phone_infobot)
}
#endif
inline void CinemaInfo::set_phone_infobot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone_infobot();
  phone_infobot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.phone_infobot)
}
inline void CinemaInfo::set_phone_infobot(const char* value, size_t size) {
  set_has_phone_infobot();
  phone_infobot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.phone_infobot)
}
inline ::std::string* CinemaInfo::mutable_phone_infobot() {
  set_has_phone_infobot();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.phone_infobot)
  return phone_infobot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CinemaInfo::release_phone_infobot() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.phone_infobot)
  clear_has_phone_infobot();
  return phone_infobot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CinemaInfo::set_allocated_phone_infobot(::std::string* phone_infobot) {
  if (phone_infobot != NULL) {
    set_has_phone_infobot();
  } else {
    clear_has_phone_infobot();
  }
  phone_infobot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_infobot);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.phone_infobot)
}

// optional string map_url = 10;
inline bool CinemaInfo::has_map_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CinemaInfo::set_has_map_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CinemaInfo::clear_has_map_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CinemaInfo::clear_map_url() {
  map_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_url();
}
inline const ::std::string& CinemaInfo::map_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.map_url)
  return map_url_.GetNoArena();
}
inline void CinemaInfo::set_map_url(const ::std::string& value) {
  set_has_map_url();
  map_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.map_url)
}
#if LANG_CXX11
inline void CinemaInfo::set_map_url(::std::string&& value) {
  set_has_map_url();
  map_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.map_url)
}
#endif
inline void CinemaInfo::set_map_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_url();
  map_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.map_url)
}
inline void CinemaInfo::set_map_url(const char* value, size_t size) {
  set_has_map_url();
  map_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.map_url)
}
inline ::std::string* CinemaInfo::mutable_map_url() {
  set_has_map_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.map_url)
  return map_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CinemaInfo::release_map_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.map_url)
  clear_has_map_url();
  return map_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CinemaInfo::set_allocated_map_url(::std::string* map_url) {
  if (map_url != NULL) {
    set_has_map_url();
  } else {
    clear_has_map_url();
  }
  map_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.map_url)
}

// optional string schedule_url = 11;
inline bool CinemaInfo::has_schedule_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CinemaInfo::set_has_schedule_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CinemaInfo::clear_has_schedule_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CinemaInfo::clear_schedule_url() {
  schedule_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schedule_url();
}
inline const ::std::string& CinemaInfo::schedule_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.schedule_url)
  return schedule_url_.GetNoArena();
}
inline void CinemaInfo::set_schedule_url(const ::std::string& value) {
  set_has_schedule_url();
  schedule_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.schedule_url)
}
#if LANG_CXX11
inline void CinemaInfo::set_schedule_url(::std::string&& value) {
  set_has_schedule_url();
  schedule_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.schedule_url)
}
#endif
inline void CinemaInfo::set_schedule_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_schedule_url();
  schedule_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.schedule_url)
}
inline void CinemaInfo::set_schedule_url(const char* value, size_t size) {
  set_has_schedule_url();
  schedule_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.schedule_url)
}
inline ::std::string* CinemaInfo::mutable_schedule_url() {
  set_has_schedule_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.schedule_url)
  return schedule_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CinemaInfo::release_schedule_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.schedule_url)
  clear_has_schedule_url();
  return schedule_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CinemaInfo::set_allocated_schedule_url(::std::string* schedule_url) {
  if (schedule_url != NULL) {
    set_has_schedule_url();
  } else {
    clear_has_schedule_url();
  }
  schedule_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schedule_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.schedule_url)
}

// optional .afisha.storage.TicketPriceInfo ticket_price = 12;
inline bool CinemaInfo::has_ticket_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CinemaInfo::set_has_ticket_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CinemaInfo::clear_has_ticket_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CinemaInfo::clear_ticket_price() {
  if (ticket_price_ != NULL) ticket_price_->::afisha::storage::TicketPriceInfo::Clear();
  clear_has_ticket_price();
}
inline const ::afisha::storage::TicketPriceInfo& CinemaInfo::ticket_price() const {
  const ::afisha::storage::TicketPriceInfo* p = ticket_price_;
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.ticket_price)
  return p != NULL ? *p : *reinterpret_cast<const ::afisha::storage::TicketPriceInfo*>(
      &::afisha::storage::_TicketPriceInfo_default_instance_);
}
inline ::afisha::storage::TicketPriceInfo* CinemaInfo::mutable_ticket_price() {
  set_has_ticket_price();
  if (ticket_price_ == NULL) {
    ticket_price_ = new ::afisha::storage::TicketPriceInfo;
  }
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.ticket_price)
  return ticket_price_;
}
inline ::afisha::storage::TicketPriceInfo* CinemaInfo::release_ticket_price() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.ticket_price)
  clear_has_ticket_price();
  ::afisha::storage::TicketPriceInfo* temp = ticket_price_;
  ticket_price_ = NULL;
  return temp;
}
inline void CinemaInfo::set_allocated_ticket_price(::afisha::storage::TicketPriceInfo* ticket_price) {
  delete ticket_price_;
  ticket_price_ = ticket_price;
  if (ticket_price) {
    set_has_ticket_price();
  } else {
    clear_has_ticket_price();
  }
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.ticket_price)
}

// optional string ticket_url = 13;
inline bool CinemaInfo::has_ticket_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CinemaInfo::set_has_ticket_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CinemaInfo::clear_has_ticket_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CinemaInfo::clear_ticket_url() {
  ticket_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket_url();
}
inline const ::std::string& CinemaInfo::ticket_url() const {
  // @@protoc_insertion_point(field_get:afisha.storage.CinemaInfo.ticket_url)
  return ticket_url_.GetNoArena();
}
inline void CinemaInfo::set_ticket_url(const ::std::string& value) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:afisha.storage.CinemaInfo.ticket_url)
}
#if LANG_CXX11
inline void CinemaInfo::set_ticket_url(::std::string&& value) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:afisha.storage.CinemaInfo.ticket_url)
}
#endif
inline void CinemaInfo::set_ticket_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:afisha.storage.CinemaInfo.ticket_url)
}
inline void CinemaInfo::set_ticket_url(const char* value, size_t size) {
  set_has_ticket_url();
  ticket_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:afisha.storage.CinemaInfo.ticket_url)
}
inline ::std::string* CinemaInfo::mutable_ticket_url() {
  set_has_ticket_url();
  // @@protoc_insertion_point(field_mutable:afisha.storage.CinemaInfo.ticket_url)
  return ticket_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CinemaInfo::release_ticket_url() {
  // @@protoc_insertion_point(field_release:afisha.storage.CinemaInfo.ticket_url)
  clear_has_ticket_url();
  return ticket_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CinemaInfo::set_allocated_ticket_url(::std::string* ticket_url) {
  if (ticket_url != NULL) {
    set_has_ticket_url();
  } else {
    clear_has_ticket_url();
  }
  ticket_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket_url);
  // @@protoc_insertion_point(field_set_allocated:afisha.storage.CinemaInfo.ticket_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace storage
}  // namespace afisha

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::afisha::storage::SeanceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::afisha::storage::SeanceType>() {
  return ::afisha::storage::SeanceType_descriptor();
}
template <> struct is_proto_enum< ::afisha::storage::MovieStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::afisha::storage::MovieStatus>() {
  return ::afisha::storage::MovieStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_afisha_5fadditive_5fstorage_2eproto__INCLUDED
