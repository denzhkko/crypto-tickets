// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: antifraud.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "antifraud.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace anti_fraud {
class EmulatedFeatures_EmulatedFeatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EmulatedFeatures_EmulatedFeature>
     _instance;
} _EmulatedFeatures_EmulatedFeature_default_instance_;
class EmulatedFeaturesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EmulatedFeatures>
     _instance;
} _EmulatedFeatures_default_instance_;
class CheckRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CheckRecord>
     _instance;
} _CheckRecord_default_instance_;
class UpdateRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UpdateRecord>
     _instance;
} _UpdateRecord_default_instance_;
class DumpRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DumpRecord>
     _instance;
} _DumpRecord_default_instance_;
class LogRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogRecord>
     _instance;
} _LogRecord_default_instance_;
class RecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Record>
     _instance;
} _Record_default_instance_;
class TransactionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transaction>
     _instance;
} _Transaction_default_instance_;

namespace protobuf_antifraud_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmulatedFeatures_EmulatedFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmulatedFeatures_EmulatedFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmulatedFeatures_EmulatedFeature, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmulatedFeatures_EmulatedFeature, val_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmulatedFeatures, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmulatedFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmulatedFeatures, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmulatedFeatures, is_fraud_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmulatedFeatures, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmulatedFeatures, features_),
  0,
  2,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, record_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, merchant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, trans_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, deposit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, ip_country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, vid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, order_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, ip_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, dmr_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, card_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, exp_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, holder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, bank_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRecord, beneficiary_id_),
  17,
  0,
  1,
  2,
  18,
  19,
  20,
  21,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, record_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, merchant_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, trans_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, cvv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, i3ds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, is3ds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, auth_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, acquirer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, acquirer_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, eci_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, txn_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, af_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecord, af_code_),
  9,
  0,
  1,
  2,
  10,
  11,
  12,
  13,
  3,
  4,
  5,
  14,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, trans_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, internal_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, card_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, auth_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, txn_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, light_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, vid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, dmr_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, af_bpc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, af_mail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, i3ds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpRecord, body_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  16,
  17,
  8,
  9,
  10,
  11,
  12,
  18,
  13,
  14,
  19,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, qid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, log_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, check_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, update_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, body_),
  0,
  4,
  5,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, trans_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, log_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, dump_record_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, trans_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, card_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, auth_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, txn_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, ip_country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, card_country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, light_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, vid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, dmr_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, af_bpc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, af_mail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, i3ds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, bank_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, beneficiary_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, exp_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, holder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, af_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, check_body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, update_body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, dump_body_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  24,
  25,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  26,
  14,
  15,
  27,
  16,
  28,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(EmulatedFeatures_EmulatedFeature)},
  { 9, 18, sizeof(EmulatedFeatures)},
  { 22, 49, sizeof(CheckRecord)},
  { 71, 91, sizeof(UpdateRecord)},
  { 106, 131, sizeof(DumpRecord)},
  { 151, 162, sizeof(LogRecord)},
  { 168, 176, sizeof(Record)},
  { 179, 213, sizeof(Transaction)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmulatedFeatures_EmulatedFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmulatedFeatures_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DumpRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transaction_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "antifraud.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _EmulatedFeatures_EmulatedFeature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EmulatedFeatures_EmulatedFeature_default_instance_);_EmulatedFeatures_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EmulatedFeatures_default_instance_);_CheckRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CheckRecord_default_instance_);_UpdateRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UpdateRecord_default_instance_);_DumpRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DumpRecord_default_instance_);_LogRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogRecord_default_instance_);_Record_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Record_default_instance_);_Transaction_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transaction_default_instance_);_LogRecord_default_instance_._instance.get_mutable()->check_record_ = const_cast< ::ru::mail::go::anti_fraud::CheckRecord*>(
      ::ru::mail::go::anti_fraud::CheckRecord::internal_default_instance());
  _LogRecord_default_instance_._instance.get_mutable()->update_record_ = const_cast< ::ru::mail::go::anti_fraud::UpdateRecord*>(
      ::ru::mail::go::anti_fraud::UpdateRecord::internal_default_instance());
  _Record_default_instance_._instance.get_mutable()->log_record_ = const_cast< ::ru::mail::go::anti_fraud::LogRecord*>(
      ::ru::mail::go::anti_fraud::LogRecord::internal_default_instance());
  _Record_default_instance_._instance.get_mutable()->dump_record_ = const_cast< ::ru::mail::go::anti_fraud::DumpRecord*>(
      ::ru::mail::go::anti_fraud::DumpRecord::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017antifraud.proto\022\025ru.mail.go.anti_fraud"
      "\"\270\001\n\020EmulatedFeatures\022\n\n\002id\030\001 \002(\t\022\020\n\010is_"
      "fraud\030\002 \002(\010\022\016\n\006status\030\003 \002(\t\022I\n\010features\030"
      "\004 \003(\01327.ru.mail.go.anti_fraud.EmulatedFe"
      "atures.EmulatedFeature\032+\n\017EmulatedFeatur"
      "e\022\013\n\003key\030\001 \002(\r\022\013\n\003val\030\002 \001(\r\"\221\003\n\013CheckRec"
      "ord\022\021\n\trecord_ts\030\001 \002(\004\022\023\n\013merchant_id\030\002 "
      "\002(\t\022\021\n\tclient_id\030\003 \002(\t\022\020\n\010trans_id\030\004 \002(\t"
      "\022\020\n\010currency\030\005 \002(\r\022\017\n\007deposit\030\006 \001(\r\022\n\n\002t"
      "s\030\007 \002(\004\022\016\n\006amount\030\010 \002(\004\022\n\n\002ip\030\t \002(\t\022\022\n\ni"
      "p_country\030\n \001(\t\022\013\n\003vid\030\013 \001(\t\022\020\n\010order_id"
      "\030\014 \001(\t\022\021\n\tip_region\030\r \001(\t\022\017\n\007dmr_uid\030\016 \001"
      "(\t\022\017\n\007card_id\030\017 \002(\t\022\023\n\013card_number\030\020 \002(\t"
      "\022\020\n\010exp_date\030\021 \002(\t\022\016\n\006holder\030\022 \002(\t\022\017\n\007co"
      "untry\030\023 \001(\t\022\021\n\tbank_name\030\024 \001(\t\022\017\n\007user_i"
      "d\030\025 \002(\t\022\026\n\016beneficiary_id\030\026 \001(\t\"\225\002\n\014Upda"
      "teRecord\022\021\n\trecord_ts\030\001 \002(\004\022\023\n\013merchant_"
      "id\030\002 \002(\t\022\021\n\tclient_id\030\003 \002(\t\022\020\n\010trans_id\030"
      "\004 \002(\t\022\016\n\006status\030\005 \002(\r\022\013\n\003cvv\030\006 \001(\r\022\014\n\004i3"
      "ds\030\007 \001(\r\022\r\n\005is3ds\030\010 \001(\r\022\021\n\tauth_code\030\t \001"
      "(\t\022\020\n\010acquirer\030\n \001(\t\022\025\n\racquirer_code\030\013 "
      "\001(\t\022\013\n\003eci\030\014 \001(\r\022\022\n\ntxn_status\030\r \001(\t\022\020\n\010"
      "af_level\030\016 \001(\t\022\017\n\007af_code\030\017 \001(\t\"\331\002\n\nDump"
      "Record\022\020\n\010trans_id\030\001 \002(\t\022\023\n\013internal_id\030"
      "\002 \002(\t\022\023\n\013card_number\030\003 \002(\t\022\017\n\007card_id\030\004 "
      "\002(\t\022\021\n\tauth_code\030\005 \002(\t\022\022\n\ntxn_status\030\006 \002"
      "(\t\022\017\n\007user_id\030\007 \002(\t\022\021\n\tclient_id\030\010 \002(\t\022\016"
      "\n\006amount\030\t \002(\004\022\n\n\002ts\030\n \002(\004\022\n\n\002ip\030\013 \002(\t\022\014"
      "\n\004nick\030\014 \002(\t\022\020\n\010light_id\030\r \002(\t\022\013\n\003vid\030\016 "
      "\002(\t\022\017\n\007dmr_uid\030\017 \002(\t\022\020\n\010currency\030\020 \002(\r\022\016"
      "\n\006af_bpc\030\021 \002(\t\022\017\n\007af_mail\030\022 \002(\t\022\014\n\004i3ds\030"
      "\023 \002(\r\022\014\n\004body\030\024 \002(\t\"\214\002\n\tLogRecord\022\013\n\003qid"
      "\030\001 \002(\t\022\016\n\006log_ts\030\002 \002(\004\0229\n\004type\030\003 \002(\0162+.r"
      "u.mail.go.anti_fraud.LogRecord.RecordTyp"
      "e\0228\n\014check_record\030\004 \001(\0132\".ru.mail.go.ant"
      "i_fraud.CheckRecord\022:\n\rupdate_record\030\005 \001"
      "(\0132#.ru.mail.go.anti_fraud.UpdateRecord\022"
      "\014\n\004body\030\006 \002(\t\"#\n\nRecordType\022\t\n\005CHECK\020\000\022\n"
      "\n\006UPDATE\020\001\"\210\001\n\006Record\022\020\n\010trans_id\030\001 \002(\t\022"
      "4\n\nlog_record\030\002 \001(\0132 .ru.mail.go.anti_fr"
      "aud.LogRecord\0226\n\013dump_record\030\003 \001(\0132!.ru."
      "mail.go.anti_fraud.DumpRecord\"\213\004\n\013Transa"
      "ction\022\020\n\010trans_id\030\001 \002(\t\022\023\n\013card_number\030\002"
      " \002(\t\022\017\n\007card_id\030\003 \002(\t\022\021\n\tauth_code\030\004 \001(\t"
      "\022\022\n\ntxn_status\030\005 \002(\t\022\017\n\007user_id\030\006 \002(\t\022\021\n"
      "\tclient_id\030\007 \002(\t\022\016\n\006amount\030\010 \002(\004\022\n\n\002ts\030\t"
      " \002(\004\022\n\n\002ip\030\n \002(\t\022\022\n\nip_country\030\013 \001(\t\022\024\n\014"
      "card_country\030\014 \001(\t\022\014\n\004nick\030\r \001(\t\022\020\n\010ligh"
      "t_id\030\016 \001(\t\022\013\n\003vid\030\017 \001(\t\022\017\n\007dmr_uid\030\020 \001(\t"
      "\022\020\n\010currency\030\021 \002(\r\022\016\n\006af_bpc\030\022 \001(\t\022\017\n\007af"
      "_mail\030\023 \001(\t\022\014\n\004i3ds\030\024 \001(\r\022\021\n\tbank_name\030\025"
      " \001(\t\022\016\n\006status\030\026 \001(\r\022\026\n\016beneficiary_id\030\027"
      " \001(\t\022\020\n\010exp_date\030\030 \001(\t\022\016\n\006holder\030\031 \001(\t\022\017"
      "\n\007af_code\030\032 \001(\t\022\022\n\ncheck_body\030\033 \001(\t\022\023\n\013u"
      "pdate_body\030\034 \001(\t\022\021\n\tdump_body\030\035 \001(\tB\013B\tA"
      "ntiFraud"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "antifraud.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_antifraud_2eproto

const ::google::protobuf::EnumDescriptor* LogRecord_RecordType_descriptor() {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_enum_descriptors[0];
}
bool LogRecord_RecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LogRecord_RecordType LogRecord::CHECK;
const LogRecord_RecordType LogRecord::UPDATE;
const LogRecord_RecordType LogRecord::RecordType_MIN;
const LogRecord_RecordType LogRecord::RecordType_MAX;
const int LogRecord::RecordType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmulatedFeatures_EmulatedFeature::kKeyFieldNumber;
const int EmulatedFeatures_EmulatedFeature::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmulatedFeatures_EmulatedFeature::EmulatedFeatures_EmulatedFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_antifraud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
}
EmulatedFeatures_EmulatedFeature::EmulatedFeatures_EmulatedFeature(const EmulatedFeatures_EmulatedFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&key_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
}

void EmulatedFeatures_EmulatedFeature::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&key_)) + sizeof(val_));
}

EmulatedFeatures_EmulatedFeature::~EmulatedFeatures_EmulatedFeature() {
  // @@protoc_insertion_point(destructor:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  SharedDtor();
}

void EmulatedFeatures_EmulatedFeature::SharedDtor() {
}

void EmulatedFeatures_EmulatedFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmulatedFeatures_EmulatedFeature::descriptor() {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmulatedFeatures_EmulatedFeature& EmulatedFeatures_EmulatedFeature::default_instance() {
  protobuf_antifraud_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmulatedFeatures_EmulatedFeature* EmulatedFeatures_EmulatedFeature::New(::google::protobuf::Arena* arena) const {
  EmulatedFeatures_EmulatedFeature* n = new EmulatedFeatures_EmulatedFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmulatedFeatures_EmulatedFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&val_) -
        reinterpret_cast<char*>(&key_)) + sizeof(val_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmulatedFeatures_EmulatedFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 val = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_val();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  return false;
#undef DO_
}

void EmulatedFeatures_EmulatedFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional uint32 val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
}

::google::protobuf::uint8* EmulatedFeatures_EmulatedFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional uint32 val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  return target;
}

size_t EmulatedFeatures_EmulatedFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }
  // optional uint32 val = 2;
  if (has_val()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->val());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmulatedFeatures_EmulatedFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const EmulatedFeatures_EmulatedFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmulatedFeatures_EmulatedFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
    MergeFrom(*source);
  }
}

void EmulatedFeatures_EmulatedFeature::MergeFrom(const EmulatedFeatures_EmulatedFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      val_ = from.val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmulatedFeatures_EmulatedFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmulatedFeatures_EmulatedFeature::CopyFrom(const EmulatedFeatures_EmulatedFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmulatedFeatures_EmulatedFeature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EmulatedFeatures_EmulatedFeature::Swap(EmulatedFeatures_EmulatedFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmulatedFeatures_EmulatedFeature::InternalSwap(EmulatedFeatures_EmulatedFeature* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(val_, other->val_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmulatedFeatures_EmulatedFeature::GetMetadata() const {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmulatedFeatures_EmulatedFeature

// required uint32 key = 1;
bool EmulatedFeatures_EmulatedFeature::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmulatedFeatures_EmulatedFeature::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void EmulatedFeatures_EmulatedFeature::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmulatedFeatures_EmulatedFeature::clear_key() {
  key_ = 0u;
  clear_has_key();
}
::google::protobuf::uint32 EmulatedFeatures_EmulatedFeature::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature.key)
  return key_;
}
void EmulatedFeatures_EmulatedFeature::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature.key)
}

// optional uint32 val = 2;
bool EmulatedFeatures_EmulatedFeature::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmulatedFeatures_EmulatedFeature::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
void EmulatedFeatures_EmulatedFeature::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmulatedFeatures_EmulatedFeature::clear_val() {
  val_ = 0u;
  clear_has_val();
}
::google::protobuf::uint32 EmulatedFeatures_EmulatedFeature::val() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature.val)
  return val_;
}
void EmulatedFeatures_EmulatedFeature::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmulatedFeatures::kIdFieldNumber;
const int EmulatedFeatures::kIsFraudFieldNumber;
const int EmulatedFeatures::kStatusFieldNumber;
const int EmulatedFeatures::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmulatedFeatures::EmulatedFeatures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_antifraud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.anti_fraud.EmulatedFeatures)
}
EmulatedFeatures::EmulatedFeatures(const EmulatedFeatures& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_status()) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  is_fraud_ = from.is_fraud_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.anti_fraud.EmulatedFeatures)
}

void EmulatedFeatures::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_fraud_ = false;
}

EmulatedFeatures::~EmulatedFeatures() {
  // @@protoc_insertion_point(destructor:ru.mail.go.anti_fraud.EmulatedFeatures)
  SharedDtor();
}

void EmulatedFeatures::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmulatedFeatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmulatedFeatures::descriptor() {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmulatedFeatures& EmulatedFeatures::default_instance() {
  protobuf_antifraud_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmulatedFeatures* EmulatedFeatures::New(::google::protobuf::Arena* arena) const {
  EmulatedFeatures* n = new EmulatedFeatures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmulatedFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.anti_fraud.EmulatedFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!status_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*status_.UnsafeRawStringPointer())->clear();
    }
  }
  is_fraud_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmulatedFeatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.anti_fraud.EmulatedFeatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.EmulatedFeatures.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_fraud = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_fraud();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fraud_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.EmulatedFeatures.status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature features = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.anti_fraud.EmulatedFeatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.anti_fraud.EmulatedFeatures)
  return false;
#undef DO_
}

void EmulatedFeatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.anti_fraud.EmulatedFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.EmulatedFeatures.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required bool is_fraud = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_fraud(), output);
  }

  // required string status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.EmulatedFeatures.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->status(), output);
  }

  // repeated .ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature features = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->features(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.anti_fraud.EmulatedFeatures)
}

::google::protobuf::uint8* EmulatedFeatures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.anti_fraud.EmulatedFeatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.EmulatedFeatures.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required bool is_fraud = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_fraud(), target);
  }

  // required string status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.EmulatedFeatures.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->status(), target);
  }

  // repeated .ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature features = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->features(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.anti_fraud.EmulatedFeatures)
  return target;
}

size_t EmulatedFeatures::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.anti_fraud.EmulatedFeatures)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_status()) {
    // required string status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  if (has_is_fraud()) {
    // required bool is_fraud = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t EmulatedFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.anti_fraud.EmulatedFeatures)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());

    // required bool is_fraud = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature features = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->features(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmulatedFeatures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.anti_fraud.EmulatedFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  const EmulatedFeatures* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmulatedFeatures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.anti_fraud.EmulatedFeatures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.anti_fraud.EmulatedFeatures)
    MergeFrom(*source);
  }
}

void EmulatedFeatures::MergeFrom(const EmulatedFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.anti_fraud.EmulatedFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_status();
      status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
    }
    if (cached_has_bits & 0x00000004u) {
      is_fraud_ = from.is_fraud_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EmulatedFeatures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.anti_fraud.EmulatedFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmulatedFeatures::CopyFrom(const EmulatedFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.anti_fraud.EmulatedFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmulatedFeatures::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->features())) return false;
  return true;
}

void EmulatedFeatures::Swap(EmulatedFeatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmulatedFeatures::InternalSwap(EmulatedFeatures* other) {
  using std::swap;
  features_.InternalSwap(&other->features_);
  id_.Swap(&other->id_);
  status_.Swap(&other->status_);
  swap(is_fraud_, other->is_fraud_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmulatedFeatures::GetMetadata() const {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmulatedFeatures

// required string id = 1;
bool EmulatedFeatures::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EmulatedFeatures::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EmulatedFeatures::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EmulatedFeatures::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& EmulatedFeatures::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.id)
  return id_.GetNoArena();
}
void EmulatedFeatures::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.EmulatedFeatures.id)
}
#if LANG_CXX11
void EmulatedFeatures::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.EmulatedFeatures.id)
}
#endif
void EmulatedFeatures::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.EmulatedFeatures.id)
}
void EmulatedFeatures::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.EmulatedFeatures.id)
}
::std::string* EmulatedFeatures::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.EmulatedFeatures.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmulatedFeatures::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.EmulatedFeatures.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmulatedFeatures::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.EmulatedFeatures.id)
}

// required bool is_fraud = 2;
bool EmulatedFeatures::has_is_fraud() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EmulatedFeatures::set_has_is_fraud() {
  _has_bits_[0] |= 0x00000004u;
}
void EmulatedFeatures::clear_has_is_fraud() {
  _has_bits_[0] &= ~0x00000004u;
}
void EmulatedFeatures::clear_is_fraud() {
  is_fraud_ = false;
  clear_has_is_fraud();
}
bool EmulatedFeatures::is_fraud() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.is_fraud)
  return is_fraud_;
}
void EmulatedFeatures::set_is_fraud(bool value) {
  set_has_is_fraud();
  is_fraud_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.EmulatedFeatures.is_fraud)
}

// required string status = 3;
bool EmulatedFeatures::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EmulatedFeatures::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void EmulatedFeatures::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void EmulatedFeatures::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
const ::std::string& EmulatedFeatures::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.status)
  return status_.GetNoArena();
}
void EmulatedFeatures::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.EmulatedFeatures.status)
}
#if LANG_CXX11
void EmulatedFeatures::set_status(::std::string&& value) {
  set_has_status();
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.EmulatedFeatures.status)
}
#endif
void EmulatedFeatures::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.EmulatedFeatures.status)
}
void EmulatedFeatures::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.EmulatedFeatures.status)
}
::std::string* EmulatedFeatures::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.EmulatedFeatures.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmulatedFeatures::release_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.EmulatedFeatures.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmulatedFeatures::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.EmulatedFeatures.status)
}

// repeated .ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature features = 4;
int EmulatedFeatures::features_size() const {
  return features_.size();
}
void EmulatedFeatures::clear_features() {
  features_.Clear();
}
const ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature& EmulatedFeatures::features(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.features)
  return features_.Get(index);
}
::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature* EmulatedFeatures::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.EmulatedFeatures.features)
  return features_.Mutable(index);
}
::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature* EmulatedFeatures::add_features() {
  // @@protoc_insertion_point(field_add:ru.mail.go.anti_fraud.EmulatedFeatures.features)
  return features_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature >*
EmulatedFeatures::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.anti_fraud.EmulatedFeatures.features)
  return &features_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature >&
EmulatedFeatures::features() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.anti_fraud.EmulatedFeatures.features)
  return features_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckRecord::kRecordTsFieldNumber;
const int CheckRecord::kMerchantIdFieldNumber;
const int CheckRecord::kClientIdFieldNumber;
const int CheckRecord::kTransIdFieldNumber;
const int CheckRecord::kCurrencyFieldNumber;
const int CheckRecord::kDepositFieldNumber;
const int CheckRecord::kTsFieldNumber;
const int CheckRecord::kAmountFieldNumber;
const int CheckRecord::kIpFieldNumber;
const int CheckRecord::kIpCountryFieldNumber;
const int CheckRecord::kVidFieldNumber;
const int CheckRecord::kOrderIdFieldNumber;
const int CheckRecord::kIpRegionFieldNumber;
const int CheckRecord::kDmrUidFieldNumber;
const int CheckRecord::kCardIdFieldNumber;
const int CheckRecord::kCardNumberFieldNumber;
const int CheckRecord::kExpDateFieldNumber;
const int CheckRecord::kHolderFieldNumber;
const int CheckRecord::kCountryFieldNumber;
const int CheckRecord::kBankNameFieldNumber;
const int CheckRecord::kUserIdFieldNumber;
const int CheckRecord::kBeneficiaryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckRecord::CheckRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_antifraud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.anti_fraud.CheckRecord)
}
CheckRecord::CheckRecord(const CheckRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  merchant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_merchant_id()) {
    merchant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merchant_id_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  trans_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trans_id()) {
    trans_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ip_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_country()) {
    ip_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_);
  }
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vid()) {
    vid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_);
  }
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_order_id()) {
    order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
  }
  ip_region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_region()) {
    ip_region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_region_);
  }
  dmr_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dmr_uid()) {
    dmr_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dmr_uid_);
  }
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_id()) {
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
  card_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_number()) {
    card_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_number_);
  }
  exp_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exp_date()) {
    exp_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exp_date_);
  }
  holder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_holder()) {
    holder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.holder_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  bank_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bank_name()) {
    bank_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_name_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  beneficiary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_beneficiary_id()) {
    beneficiary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.beneficiary_id_);
  }
  ::memcpy(&record_ts_, &from.record_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&record_ts_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.anti_fraud.CheckRecord)
}

void CheckRecord::SharedCtor() {
  _cached_size_ = 0;
  merchant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trans_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dmr_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  holder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beneficiary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&record_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&record_ts_)) + sizeof(amount_));
}

CheckRecord::~CheckRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.anti_fraud.CheckRecord)
  SharedDtor();
}

void CheckRecord::SharedDtor() {
  merchant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trans_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dmr_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  holder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beneficiary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckRecord::descriptor() {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckRecord& CheckRecord::default_instance() {
  protobuf_antifraud_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckRecord* CheckRecord::New(::google::protobuf::Arena* arena) const {
  CheckRecord* n = new CheckRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.anti_fraud.CheckRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!merchant_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*merchant_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!trans_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trans_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!ip_country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_country_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!vid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!order_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*order_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!ip_region_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_region_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!dmr_uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dmr_uid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!card_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!card_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_number_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(!exp_date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*exp_date_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(!holder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*holder_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(!country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(!bank_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bank_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(!user_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(!beneficiary_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*beneficiary_id_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 4063232u) {
    ::memset(&record_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amount_) -
        reinterpret_cast<char*>(&record_ts_)) + sizeof(amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.anti_fraud.CheckRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 record_ts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_record_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string merchant_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchant_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->merchant_id().data(), static_cast<int>(this->merchant_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.merchant_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string client_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string trans_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trans_id().data(), static_cast<int>(this->trans_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.trans_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 currency = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deposit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_deposit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deposit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 amount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ip = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_country = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_country().data(), static_cast<int>(this->ip_country().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.ip_country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vid().data(), static_cast<int>(this->vid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.vid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string order_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), static_cast<int>(this->order_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.order_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_region = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_region().data(), static_cast<int>(this->ip_region().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.ip_region");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dmr_uid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dmr_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dmr_uid().data(), static_cast<int>(this->dmr_uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.dmr_uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string card_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), static_cast<int>(this->card_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.card_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string card_number = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_number().data(), static_cast<int>(this->card_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.card_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string exp_date = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exp_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exp_date().data(), static_cast<int>(this->exp_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.exp_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string holder = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_holder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->holder().data(), static_cast<int>(this->holder().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.holder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), static_cast<int>(this->country().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bank_name = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bank_name().data(), static_cast<int>(this->bank_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.bank_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.user_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string beneficiary_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beneficiary_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->beneficiary_id().data(), static_cast<int>(this->beneficiary_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.CheckRecord.beneficiary_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.anti_fraud.CheckRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.anti_fraud.CheckRecord)
  return false;
#undef DO_
}

void CheckRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.anti_fraud.CheckRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 record_ts = 1;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->record_ts(), output);
  }

  // required string merchant_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merchant_id().data(), static_cast<int>(this->merchant_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.merchant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->merchant_id(), output);
  }

  // required string client_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_id(), output);
  }

  // required string trans_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.trans_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->trans_id(), output);
  }

  // required uint32 currency = 5;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->currency(), output);
  }

  // optional uint32 deposit = 6;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deposit(), output);
  }

  // required uint64 ts = 7;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->ts(), output);
  }

  // required uint64 amount = 8;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->amount(), output);
  }

  // required string ip = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ip(), output);
  }

  // optional string ip_country = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country().data(), static_cast<int>(this->ip_country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.ip_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ip_country(), output);
  }

  // optional string vid = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.vid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->vid(), output);
  }

  // optional string order_id = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->order_id(), output);
  }

  // optional string ip_region = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_region().data(), static_cast<int>(this->ip_region().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.ip_region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ip_region(), output);
  }

  // optional string dmr_uid = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dmr_uid().data(), static_cast<int>(this->dmr_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.dmr_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->dmr_uid(), output);
  }

  // required string card_id = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), static_cast<int>(this->card_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->card_id(), output);
  }

  // required string card_number = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_number().data(), static_cast<int>(this->card_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.card_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->card_number(), output);
  }

  // required string exp_date = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exp_date().data(), static_cast<int>(this->exp_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.exp_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->exp_date(), output);
  }

  // required string holder = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->holder().data(), static_cast<int>(this->holder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.holder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->holder(), output);
  }

  // optional string country = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->country(), output);
  }

  // optional string bank_name = 20;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bank_name().data(), static_cast<int>(this->bank_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.bank_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->bank_name(), output);
  }

  // required string user_id = 21;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->user_id(), output);
  }

  // optional string beneficiary_id = 22;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->beneficiary_id().data(), static_cast<int>(this->beneficiary_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.beneficiary_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->beneficiary_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.anti_fraud.CheckRecord)
}

::google::protobuf::uint8* CheckRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.anti_fraud.CheckRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 record_ts = 1;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->record_ts(), target);
  }

  // required string merchant_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merchant_id().data(), static_cast<int>(this->merchant_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.merchant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->merchant_id(), target);
  }

  // required string client_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_id(), target);
  }

  // required string trans_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.trans_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->trans_id(), target);
  }

  // required uint32 currency = 5;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->currency(), target);
  }

  // optional uint32 deposit = 6;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deposit(), target);
  }

  // required uint64 ts = 7;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->ts(), target);
  }

  // required uint64 amount = 8;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->amount(), target);
  }

  // required string ip = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ip(), target);
  }

  // optional string ip_country = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country().data(), static_cast<int>(this->ip_country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.ip_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ip_country(), target);
  }

  // optional string vid = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.vid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->vid(), target);
  }

  // optional string order_id = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), static_cast<int>(this->order_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->order_id(), target);
  }

  // optional string ip_region = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_region().data(), static_cast<int>(this->ip_region().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.ip_region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ip_region(), target);
  }

  // optional string dmr_uid = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dmr_uid().data(), static_cast<int>(this->dmr_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.dmr_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->dmr_uid(), target);
  }

  // required string card_id = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), static_cast<int>(this->card_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->card_id(), target);
  }

  // required string card_number = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_number().data(), static_cast<int>(this->card_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.card_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->card_number(), target);
  }

  // required string exp_date = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exp_date().data(), static_cast<int>(this->exp_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.exp_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->exp_date(), target);
  }

  // required string holder = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->holder().data(), static_cast<int>(this->holder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.holder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->holder(), target);
  }

  // optional string country = 19;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->country(), target);
  }

  // optional string bank_name = 20;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bank_name().data(), static_cast<int>(this->bank_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.bank_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->bank_name(), target);
  }

  // required string user_id = 21;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->user_id(), target);
  }

  // optional string beneficiary_id = 22;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->beneficiary_id().data(), static_cast<int>(this->beneficiary_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.CheckRecord.beneficiary_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->beneficiary_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.anti_fraud.CheckRecord)
  return target;
}

size_t CheckRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.anti_fraud.CheckRecord)
  size_t total_size = 0;

  if (has_merchant_id()) {
    // required string merchant_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merchant_id());
  }

  if (has_client_id()) {
    // required string client_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  if (has_trans_id()) {
    // required string trans_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trans_id());
  }

  if (has_ip()) {
    // required string ip = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_card_id()) {
    // required string card_id = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());
  }

  if (has_card_number()) {
    // required string card_number = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_number());
  }

  if (has_exp_date()) {
    // required string exp_date = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exp_date());
  }

  if (has_holder()) {
    // required string holder = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->holder());
  }

  if (has_user_id()) {
    // required string user_id = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_record_ts()) {
    // required uint64 record_ts = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_ts());
  }

  if (has_currency()) {
    // required uint32 currency = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currency());
  }

  if (has_ts()) {
    // required uint64 ts = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());
  }

  if (has_amount()) {
    // required uint64 amount = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  return total_size;
}
size_t CheckRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.anti_fraud.CheckRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00369e0f) ^ 0x00369e0f) == 0) {  // All required fields are present.
    // required string merchant_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merchant_id());

    // required string client_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());

    // required string trans_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trans_id());

    // required string ip = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required string card_id = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());

    // required string card_number = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_number());

    // required string exp_date = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exp_date());

    // required string holder = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->holder());

    // required string user_id = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required uint64 record_ts = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_ts());

    // required uint32 currency = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currency());

    // required uint64 ts = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());

    // required uint64 amount = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional string ip_country = 10;
    if (has_ip_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_country());
    }

    // optional string vid = 11;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid());
    }

    // optional string order_id = 12;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional string ip_region = 13;
    if (has_ip_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_region());
    }

  }
  // optional string dmr_uid = 14;
  if (has_dmr_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dmr_uid());
  }

  if (_has_bits_[8 / 32] & 24576u) {
    // optional string country = 19;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string bank_name = 20;
    if (has_bank_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_name());
    }

  }
  // optional string beneficiary_id = 22;
  if (has_beneficiary_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->beneficiary_id());
  }

  // optional uint32 deposit = 6;
  if (has_deposit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deposit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.anti_fraud.CheckRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.anti_fraud.CheckRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.anti_fraud.CheckRecord)
    MergeFrom(*source);
  }
}

void CheckRecord::MergeFrom(const CheckRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.anti_fraud.CheckRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_merchant_id();
      merchant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merchant_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_trans_id();
      trans_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_ip_country();
      ip_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_vid();
      vid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_ip_region();
      ip_region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_region_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_dmr_uid();
      dmr_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dmr_uid_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_card_id();
      card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_card_number();
      card_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_number_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_exp_date();
      exp_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exp_date_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_holder();
      holder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.holder_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_bank_name();
      bank_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_name_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_beneficiary_id();
      beneficiary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.beneficiary_id_);
    }
    if (cached_has_bits & 0x00020000u) {
      record_ts_ = from.record_ts_;
    }
    if (cached_has_bits & 0x00040000u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00080000u) {
      deposit_ = from.deposit_;
    }
    if (cached_has_bits & 0x00100000u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00200000u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.anti_fraud.CheckRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRecord::CopyFrom(const CheckRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.anti_fraud.CheckRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00369e0f) != 0x00369e0f) return false;
  return true;
}

void CheckRecord::Swap(CheckRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckRecord::InternalSwap(CheckRecord* other) {
  using std::swap;
  merchant_id_.Swap(&other->merchant_id_);
  client_id_.Swap(&other->client_id_);
  trans_id_.Swap(&other->trans_id_);
  ip_.Swap(&other->ip_);
  ip_country_.Swap(&other->ip_country_);
  vid_.Swap(&other->vid_);
  order_id_.Swap(&other->order_id_);
  ip_region_.Swap(&other->ip_region_);
  dmr_uid_.Swap(&other->dmr_uid_);
  card_id_.Swap(&other->card_id_);
  card_number_.Swap(&other->card_number_);
  exp_date_.Swap(&other->exp_date_);
  holder_.Swap(&other->holder_);
  country_.Swap(&other->country_);
  bank_name_.Swap(&other->bank_name_);
  user_id_.Swap(&other->user_id_);
  beneficiary_id_.Swap(&other->beneficiary_id_);
  swap(record_ts_, other->record_ts_);
  swap(currency_, other->currency_);
  swap(deposit_, other->deposit_);
  swap(ts_, other->ts_);
  swap(amount_, other->amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckRecord::GetMetadata() const {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckRecord

// required uint64 record_ts = 1;
bool CheckRecord::has_record_ts() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CheckRecord::set_has_record_ts() {
  _has_bits_[0] |= 0x00020000u;
}
void CheckRecord::clear_has_record_ts() {
  _has_bits_[0] &= ~0x00020000u;
}
void CheckRecord::clear_record_ts() {
  record_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_record_ts();
}
::google::protobuf::uint64 CheckRecord::record_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.record_ts)
  return record_ts_;
}
void CheckRecord::set_record_ts(::google::protobuf::uint64 value) {
  set_has_record_ts();
  record_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.record_ts)
}

// required string merchant_id = 2;
bool CheckRecord::has_merchant_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckRecord::set_has_merchant_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckRecord::clear_has_merchant_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckRecord::clear_merchant_id() {
  merchant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_merchant_id();
}
const ::std::string& CheckRecord::merchant_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
  return merchant_id_.GetNoArena();
}
void CheckRecord::set_merchant_id(const ::std::string& value) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
}
#if LANG_CXX11
void CheckRecord::set_merchant_id(::std::string&& value) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
}
#endif
void CheckRecord::set_merchant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
}
void CheckRecord::set_merchant_id(const char* value, size_t size) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
}
::std::string* CheckRecord::mutable_merchant_id() {
  set_has_merchant_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
  return merchant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_merchant_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
  clear_has_merchant_id();
  return merchant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_merchant_id(::std::string* merchant_id) {
  if (merchant_id != NULL) {
    set_has_merchant_id();
  } else {
    clear_has_merchant_id();
  }
  merchant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merchant_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
}

// required string client_id = 3;
bool CheckRecord::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckRecord::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckRecord::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckRecord::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
const ::std::string& CheckRecord::client_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.client_id)
  return client_id_.GetNoArena();
}
void CheckRecord::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.client_id)
}
#if LANG_CXX11
void CheckRecord::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.client_id)
}
#endif
void CheckRecord::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.client_id)
}
void CheckRecord::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.client_id)
}
::std::string* CheckRecord::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_client_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.client_id)
}

// required string trans_id = 4;
bool CheckRecord::has_trans_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CheckRecord::set_has_trans_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CheckRecord::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CheckRecord::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trans_id();
}
const ::std::string& CheckRecord::trans_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.trans_id)
  return trans_id_.GetNoArena();
}
void CheckRecord::set_trans_id(const ::std::string& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.trans_id)
}
#if LANG_CXX11
void CheckRecord::set_trans_id(::std::string&& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.trans_id)
}
#endif
void CheckRecord::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.trans_id)
}
void CheckRecord::set_trans_id(const char* value, size_t size) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.trans_id)
}
::std::string* CheckRecord::mutable_trans_id() {
  set_has_trans_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_trans_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.trans_id)
  clear_has_trans_id();
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != NULL) {
    set_has_trans_id();
  } else {
    clear_has_trans_id();
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.trans_id)
}

// required uint32 currency = 5;
bool CheckRecord::has_currency() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CheckRecord::set_has_currency() {
  _has_bits_[0] |= 0x00040000u;
}
void CheckRecord::clear_has_currency() {
  _has_bits_[0] &= ~0x00040000u;
}
void CheckRecord::clear_currency() {
  currency_ = 0u;
  clear_has_currency();
}
::google::protobuf::uint32 CheckRecord::currency() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.currency)
  return currency_;
}
void CheckRecord::set_currency(::google::protobuf::uint32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.currency)
}

// optional uint32 deposit = 6;
bool CheckRecord::has_deposit() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CheckRecord::set_has_deposit() {
  _has_bits_[0] |= 0x00080000u;
}
void CheckRecord::clear_has_deposit() {
  _has_bits_[0] &= ~0x00080000u;
}
void CheckRecord::clear_deposit() {
  deposit_ = 0u;
  clear_has_deposit();
}
::google::protobuf::uint32 CheckRecord::deposit() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.deposit)
  return deposit_;
}
void CheckRecord::set_deposit(::google::protobuf::uint32 value) {
  set_has_deposit();
  deposit_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.deposit)
}

// required uint64 ts = 7;
bool CheckRecord::has_ts() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CheckRecord::set_has_ts() {
  _has_bits_[0] |= 0x00100000u;
}
void CheckRecord::clear_has_ts() {
  _has_bits_[0] &= ~0x00100000u;
}
void CheckRecord::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
::google::protobuf::uint64 CheckRecord::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.ts)
  return ts_;
}
void CheckRecord::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.ts)
}

// required uint64 amount = 8;
bool CheckRecord::has_amount() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CheckRecord::set_has_amount() {
  _has_bits_[0] |= 0x00200000u;
}
void CheckRecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00200000u;
}
void CheckRecord::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
::google::protobuf::uint64 CheckRecord::amount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.amount)
  return amount_;
}
void CheckRecord::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.amount)
}

// required string ip = 9;
bool CheckRecord::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CheckRecord::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void CheckRecord::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void CheckRecord::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& CheckRecord::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.ip)
  return ip_.GetNoArena();
}
void CheckRecord::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.ip)
}
#if LANG_CXX11
void CheckRecord::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.ip)
}
#endif
void CheckRecord::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.ip)
}
void CheckRecord::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.ip)
}
::std::string* CheckRecord::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.ip)
}

// optional string ip_country = 10;
bool CheckRecord::has_ip_country() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CheckRecord::set_has_ip_country() {
  _has_bits_[0] |= 0x00000010u;
}
void CheckRecord::clear_has_ip_country() {
  _has_bits_[0] &= ~0x00000010u;
}
void CheckRecord::clear_ip_country() {
  ip_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_country();
}
const ::std::string& CheckRecord::ip_country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.ip_country)
  return ip_country_.GetNoArena();
}
void CheckRecord::set_ip_country(const ::std::string& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.ip_country)
}
#if LANG_CXX11
void CheckRecord::set_ip_country(::std::string&& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.ip_country)
}
#endif
void CheckRecord::set_ip_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.ip_country)
}
void CheckRecord::set_ip_country(const char* value, size_t size) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.ip_country)
}
::std::string* CheckRecord::mutable_ip_country() {
  set_has_ip_country();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.ip_country)
  return ip_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_ip_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.ip_country)
  clear_has_ip_country();
  return ip_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_ip_country(::std::string* ip_country) {
  if (ip_country != NULL) {
    set_has_ip_country();
  } else {
    clear_has_ip_country();
  }
  ip_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_country);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.ip_country)
}

// optional string vid = 11;
bool CheckRecord::has_vid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CheckRecord::set_has_vid() {
  _has_bits_[0] |= 0x00000020u;
}
void CheckRecord::clear_has_vid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CheckRecord::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
const ::std::string& CheckRecord::vid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.vid)
  return vid_.GetNoArena();
}
void CheckRecord::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.vid)
}
#if LANG_CXX11
void CheckRecord::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.vid)
}
#endif
void CheckRecord::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.vid)
}
void CheckRecord::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.vid)
}
::std::string* CheckRecord::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_vid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.vid)
}

// optional string order_id = 12;
bool CheckRecord::has_order_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CheckRecord::set_has_order_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CheckRecord::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CheckRecord::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
const ::std::string& CheckRecord::order_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.order_id)
  return order_id_.GetNoArena();
}
void CheckRecord::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.order_id)
}
#if LANG_CXX11
void CheckRecord::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.order_id)
}
#endif
void CheckRecord::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.order_id)
}
void CheckRecord::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.order_id)
}
::std::string* CheckRecord::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_order_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.order_id)
  clear_has_order_id();
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.order_id)
}

// optional string ip_region = 13;
bool CheckRecord::has_ip_region() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CheckRecord::set_has_ip_region() {
  _has_bits_[0] |= 0x00000080u;
}
void CheckRecord::clear_has_ip_region() {
  _has_bits_[0] &= ~0x00000080u;
}
void CheckRecord::clear_ip_region() {
  ip_region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_region();
}
const ::std::string& CheckRecord::ip_region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.ip_region)
  return ip_region_.GetNoArena();
}
void CheckRecord::set_ip_region(const ::std::string& value) {
  set_has_ip_region();
  ip_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.ip_region)
}
#if LANG_CXX11
void CheckRecord::set_ip_region(::std::string&& value) {
  set_has_ip_region();
  ip_region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.ip_region)
}
#endif
void CheckRecord::set_ip_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_region();
  ip_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.ip_region)
}
void CheckRecord::set_ip_region(const char* value, size_t size) {
  set_has_ip_region();
  ip_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.ip_region)
}
::std::string* CheckRecord::mutable_ip_region() {
  set_has_ip_region();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.ip_region)
  return ip_region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_ip_region() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.ip_region)
  clear_has_ip_region();
  return ip_region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_ip_region(::std::string* ip_region) {
  if (ip_region != NULL) {
    set_has_ip_region();
  } else {
    clear_has_ip_region();
  }
  ip_region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_region);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.ip_region)
}

// optional string dmr_uid = 14;
bool CheckRecord::has_dmr_uid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CheckRecord::set_has_dmr_uid() {
  _has_bits_[0] |= 0x00000100u;
}
void CheckRecord::clear_has_dmr_uid() {
  _has_bits_[0] &= ~0x00000100u;
}
void CheckRecord::clear_dmr_uid() {
  dmr_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dmr_uid();
}
const ::std::string& CheckRecord::dmr_uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
  return dmr_uid_.GetNoArena();
}
void CheckRecord::set_dmr_uid(const ::std::string& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
}
#if LANG_CXX11
void CheckRecord::set_dmr_uid(::std::string&& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
}
#endif
void CheckRecord::set_dmr_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
}
void CheckRecord::set_dmr_uid(const char* value, size_t size) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
}
::std::string* CheckRecord::mutable_dmr_uid() {
  set_has_dmr_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
  return dmr_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_dmr_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
  clear_has_dmr_uid();
  return dmr_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_dmr_uid(::std::string* dmr_uid) {
  if (dmr_uid != NULL) {
    set_has_dmr_uid();
  } else {
    clear_has_dmr_uid();
  }
  dmr_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dmr_uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
}

// required string card_id = 15;
bool CheckRecord::has_card_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CheckRecord::set_has_card_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CheckRecord::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CheckRecord::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
const ::std::string& CheckRecord::card_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.card_id)
  return card_id_.GetNoArena();
}
void CheckRecord::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.card_id)
}
#if LANG_CXX11
void CheckRecord::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.card_id)
}
#endif
void CheckRecord::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.card_id)
}
void CheckRecord::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.card_id)
}
::std::string* CheckRecord::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_card_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.card_id)
}

// required string card_number = 16;
bool CheckRecord::has_card_number() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CheckRecord::set_has_card_number() {
  _has_bits_[0] |= 0x00000400u;
}
void CheckRecord::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000400u;
}
void CheckRecord::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_number();
}
const ::std::string& CheckRecord::card_number() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.card_number)
  return card_number_.GetNoArena();
}
void CheckRecord::set_card_number(const ::std::string& value) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.card_number)
}
#if LANG_CXX11
void CheckRecord::set_card_number(::std::string&& value) {
  set_has_card_number();
  card_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.card_number)
}
#endif
void CheckRecord::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.card_number)
}
void CheckRecord::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.card_number)
}
::std::string* CheckRecord::mutable_card_number() {
  set_has_card_number();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_card_number() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.card_number)
  clear_has_card_number();
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    set_has_card_number();
  } else {
    clear_has_card_number();
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.card_number)
}

// required string exp_date = 17;
bool CheckRecord::has_exp_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CheckRecord::set_has_exp_date() {
  _has_bits_[0] |= 0x00000800u;
}
void CheckRecord::clear_has_exp_date() {
  _has_bits_[0] &= ~0x00000800u;
}
void CheckRecord::clear_exp_date() {
  exp_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exp_date();
}
const ::std::string& CheckRecord::exp_date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.exp_date)
  return exp_date_.GetNoArena();
}
void CheckRecord::set_exp_date(const ::std::string& value) {
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.exp_date)
}
#if LANG_CXX11
void CheckRecord::set_exp_date(::std::string&& value) {
  set_has_exp_date();
  exp_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.exp_date)
}
#endif
void CheckRecord::set_exp_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.exp_date)
}
void CheckRecord::set_exp_date(const char* value, size_t size) {
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.exp_date)
}
::std::string* CheckRecord::mutable_exp_date() {
  set_has_exp_date();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.exp_date)
  return exp_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_exp_date() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.exp_date)
  clear_has_exp_date();
  return exp_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_exp_date(::std::string* exp_date) {
  if (exp_date != NULL) {
    set_has_exp_date();
  } else {
    clear_has_exp_date();
  }
  exp_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_date);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.exp_date)
}

// required string holder = 18;
bool CheckRecord::has_holder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CheckRecord::set_has_holder() {
  _has_bits_[0] |= 0x00001000u;
}
void CheckRecord::clear_has_holder() {
  _has_bits_[0] &= ~0x00001000u;
}
void CheckRecord::clear_holder() {
  holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holder();
}
const ::std::string& CheckRecord::holder() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.holder)
  return holder_.GetNoArena();
}
void CheckRecord::set_holder(const ::std::string& value) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.holder)
}
#if LANG_CXX11
void CheckRecord::set_holder(::std::string&& value) {
  set_has_holder();
  holder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.holder)
}
#endif
void CheckRecord::set_holder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.holder)
}
void CheckRecord::set_holder(const char* value, size_t size) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.holder)
}
::std::string* CheckRecord::mutable_holder() {
  set_has_holder();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.holder)
  return holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_holder() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.holder)
  clear_has_holder();
  return holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_holder(::std::string* holder) {
  if (holder != NULL) {
    set_has_holder();
  } else {
    clear_has_holder();
  }
  holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holder);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.holder)
}

// optional string country = 19;
bool CheckRecord::has_country() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CheckRecord::set_has_country() {
  _has_bits_[0] |= 0x00002000u;
}
void CheckRecord::clear_has_country() {
  _has_bits_[0] &= ~0x00002000u;
}
void CheckRecord::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
const ::std::string& CheckRecord::country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.country)
  return country_.GetNoArena();
}
void CheckRecord::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.country)
}
#if LANG_CXX11
void CheckRecord::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.country)
}
#endif
void CheckRecord::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.country)
}
void CheckRecord::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.country)
}
::std::string* CheckRecord::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.country)
}

// optional string bank_name = 20;
bool CheckRecord::has_bank_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CheckRecord::set_has_bank_name() {
  _has_bits_[0] |= 0x00004000u;
}
void CheckRecord::clear_has_bank_name() {
  _has_bits_[0] &= ~0x00004000u;
}
void CheckRecord::clear_bank_name() {
  bank_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bank_name();
}
const ::std::string& CheckRecord::bank_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.bank_name)
  return bank_name_.GetNoArena();
}
void CheckRecord::set_bank_name(const ::std::string& value) {
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.bank_name)
}
#if LANG_CXX11
void CheckRecord::set_bank_name(::std::string&& value) {
  set_has_bank_name();
  bank_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.bank_name)
}
#endif
void CheckRecord::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.bank_name)
}
void CheckRecord::set_bank_name(const char* value, size_t size) {
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.bank_name)
}
::std::string* CheckRecord::mutable_bank_name() {
  set_has_bank_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.bank_name)
  return bank_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_bank_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.bank_name)
  clear_has_bank_name();
  return bank_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_bank_name(::std::string* bank_name) {
  if (bank_name != NULL) {
    set_has_bank_name();
  } else {
    clear_has_bank_name();
  }
  bank_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.bank_name)
}

// required string user_id = 21;
bool CheckRecord::has_user_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CheckRecord::set_has_user_id() {
  _has_bits_[0] |= 0x00008000u;
}
void CheckRecord::clear_has_user_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void CheckRecord::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& CheckRecord::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.user_id)
  return user_id_.GetNoArena();
}
void CheckRecord::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.user_id)
}
#if LANG_CXX11
void CheckRecord::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.user_id)
}
#endif
void CheckRecord::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.user_id)
}
void CheckRecord::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.user_id)
}
::std::string* CheckRecord::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_user_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.user_id)
}

// optional string beneficiary_id = 22;
bool CheckRecord::has_beneficiary_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CheckRecord::set_has_beneficiary_id() {
  _has_bits_[0] |= 0x00010000u;
}
void CheckRecord::clear_has_beneficiary_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void CheckRecord::clear_beneficiary_id() {
  beneficiary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_beneficiary_id();
}
const ::std::string& CheckRecord::beneficiary_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
  return beneficiary_id_.GetNoArena();
}
void CheckRecord::set_beneficiary_id(const ::std::string& value) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
}
#if LANG_CXX11
void CheckRecord::set_beneficiary_id(::std::string&& value) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
}
#endif
void CheckRecord::set_beneficiary_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
}
void CheckRecord::set_beneficiary_id(const char* value, size_t size) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
}
::std::string* CheckRecord::mutable_beneficiary_id() {
  set_has_beneficiary_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
  return beneficiary_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckRecord::release_beneficiary_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
  clear_has_beneficiary_id();
  return beneficiary_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckRecord::set_allocated_beneficiary_id(::std::string* beneficiary_id) {
  if (beneficiary_id != NULL) {
    set_has_beneficiary_id();
  } else {
    clear_has_beneficiary_id();
  }
  beneficiary_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beneficiary_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRecord::kRecordTsFieldNumber;
const int UpdateRecord::kMerchantIdFieldNumber;
const int UpdateRecord::kClientIdFieldNumber;
const int UpdateRecord::kTransIdFieldNumber;
const int UpdateRecord::kStatusFieldNumber;
const int UpdateRecord::kCvvFieldNumber;
const int UpdateRecord::kI3DsFieldNumber;
const int UpdateRecord::kIs3DsFieldNumber;
const int UpdateRecord::kAuthCodeFieldNumber;
const int UpdateRecord::kAcquirerFieldNumber;
const int UpdateRecord::kAcquirerCodeFieldNumber;
const int UpdateRecord::kEciFieldNumber;
const int UpdateRecord::kTxnStatusFieldNumber;
const int UpdateRecord::kAfLevelFieldNumber;
const int UpdateRecord::kAfCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRecord::UpdateRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_antifraud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.anti_fraud.UpdateRecord)
}
UpdateRecord::UpdateRecord(const UpdateRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  merchant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_merchant_id()) {
    merchant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merchant_id_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  trans_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trans_id()) {
    trans_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
  }
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_code()) {
    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  acquirer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_acquirer()) {
    acquirer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acquirer_);
  }
  acquirer_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_acquirer_code()) {
    acquirer_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acquirer_code_);
  }
  txn_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_txn_status()) {
    txn_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_status_);
  }
  af_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_af_level()) {
    af_level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_level_);
  }
  af_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_af_code()) {
    af_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_code_);
  }
  ::memcpy(&record_ts_, &from.record_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&eci_) -
    reinterpret_cast<char*>(&record_ts_)) + sizeof(eci_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.anti_fraud.UpdateRecord)
}

void UpdateRecord::SharedCtor() {
  _cached_size_ = 0;
  merchant_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trans_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acquirer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acquirer_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&record_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eci_) -
      reinterpret_cast<char*>(&record_ts_)) + sizeof(eci_));
}

UpdateRecord::~UpdateRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.anti_fraud.UpdateRecord)
  SharedDtor();
}

void UpdateRecord::SharedDtor() {
  merchant_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trans_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acquirer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acquirer_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdateRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRecord::descriptor() {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateRecord& UpdateRecord::default_instance() {
  protobuf_antifraud_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateRecord* UpdateRecord::New(::google::protobuf::Arena* arena) const {
  UpdateRecord* n = new UpdateRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.anti_fraud.UpdateRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!merchant_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*merchant_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!trans_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trans_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!auth_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*auth_code_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!acquirer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*acquirer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!acquirer_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*acquirer_code_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!txn_status_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*txn_status_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!af_level_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*af_level_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(!af_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*af_code_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 32256u) {
    ::memset(&record_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eci_) -
        reinterpret_cast<char*>(&record_ts_)) + sizeof(eci_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.anti_fraud.UpdateRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 record_ts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_record_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string merchant_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merchant_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->merchant_id().data(), static_cast<int>(this->merchant_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.UpdateRecord.merchant_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string client_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.UpdateRecord.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string trans_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trans_id().data(), static_cast<int>(this->trans_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.UpdateRecord.trans_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cvv = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_cvv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cvv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 i3ds = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_i3ds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &i3ds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 is3ds = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is3ds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is3ds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string auth_code = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_code().data(), static_cast<int>(this->auth_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.UpdateRecord.auth_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string acquirer = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acquirer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acquirer().data(), static_cast<int>(this->acquirer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.UpdateRecord.acquirer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string acquirer_code = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acquirer_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acquirer_code().data(), static_cast<int>(this->acquirer_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.UpdateRecord.acquirer_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eci = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_eci();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eci_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string txn_status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->txn_status().data(), static_cast<int>(this->txn_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.UpdateRecord.txn_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string af_level = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_af_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->af_level().data(), static_cast<int>(this->af_level().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.UpdateRecord.af_level");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string af_code = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_af_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->af_code().data(), static_cast<int>(this->af_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.UpdateRecord.af_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.anti_fraud.UpdateRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.anti_fraud.UpdateRecord)
  return false;
#undef DO_
}

void UpdateRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.anti_fraud.UpdateRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 record_ts = 1;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->record_ts(), output);
  }

  // required string merchant_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merchant_id().data(), static_cast<int>(this->merchant_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.merchant_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->merchant_id(), output);
  }

  // required string client_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_id(), output);
  }

  // required string trans_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.trans_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->trans_id(), output);
  }

  // required uint32 status = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // optional uint32 cvv = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cvv(), output);
  }

  // optional uint32 i3ds = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->i3ds(), output);
  }

  // optional uint32 is3ds = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->is3ds(), output);
  }

  // optional string auth_code = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.auth_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->auth_code(), output);
  }

  // optional string acquirer = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acquirer().data(), static_cast<int>(this->acquirer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.acquirer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->acquirer(), output);
  }

  // optional string acquirer_code = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acquirer_code().data(), static_cast<int>(this->acquirer_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.acquirer_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->acquirer_code(), output);
  }

  // optional uint32 eci = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->eci(), output);
  }

  // optional string txn_status = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txn_status().data(), static_cast<int>(this->txn_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.txn_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->txn_status(), output);
  }

  // optional string af_level = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_level().data(), static_cast<int>(this->af_level().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.af_level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->af_level(), output);
  }

  // optional string af_code = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_code().data(), static_cast<int>(this->af_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.af_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->af_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.anti_fraud.UpdateRecord)
}

::google::protobuf::uint8* UpdateRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.anti_fraud.UpdateRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 record_ts = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->record_ts(), target);
  }

  // required string merchant_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->merchant_id().data(), static_cast<int>(this->merchant_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.merchant_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->merchant_id(), target);
  }

  // required string client_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_id(), target);
  }

  // required string trans_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.trans_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->trans_id(), target);
  }

  // required uint32 status = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // optional uint32 cvv = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cvv(), target);
  }

  // optional uint32 i3ds = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->i3ds(), target);
  }

  // optional uint32 is3ds = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->is3ds(), target);
  }

  // optional string auth_code = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.auth_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->auth_code(), target);
  }

  // optional string acquirer = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acquirer().data(), static_cast<int>(this->acquirer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.acquirer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->acquirer(), target);
  }

  // optional string acquirer_code = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acquirer_code().data(), static_cast<int>(this->acquirer_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.acquirer_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->acquirer_code(), target);
  }

  // optional uint32 eci = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->eci(), target);
  }

  // optional string txn_status = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txn_status().data(), static_cast<int>(this->txn_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.txn_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->txn_status(), target);
  }

  // optional string af_level = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_level().data(), static_cast<int>(this->af_level().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.af_level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->af_level(), target);
  }

  // optional string af_code = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_code().data(), static_cast<int>(this->af_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.UpdateRecord.af_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->af_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.anti_fraud.UpdateRecord)
  return target;
}

size_t UpdateRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.anti_fraud.UpdateRecord)
  size_t total_size = 0;

  if (has_merchant_id()) {
    // required string merchant_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merchant_id());
  }

  if (has_client_id()) {
    // required string client_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  if (has_trans_id()) {
    // required string trans_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trans_id());
  }

  if (has_record_ts()) {
    // required uint64 record_ts = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_ts());
  }

  if (has_status()) {
    // required uint32 status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
size_t UpdateRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.anti_fraud.UpdateRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000607) ^ 0x00000607) == 0) {  // All required fields are present.
    // required string merchant_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merchant_id());

    // required string client_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());

    // required string trans_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trans_id());

    // required uint64 record_ts = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_ts());

    // required uint32 status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 248u) {
    // optional string auth_code = 9;
    if (has_auth_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_code());
    }

    // optional string acquirer = 10;
    if (has_acquirer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acquirer());
    }

    // optional string acquirer_code = 11;
    if (has_acquirer_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acquirer_code());
    }

    // optional string txn_status = 13;
    if (has_txn_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txn_status());
    }

    // optional string af_level = 14;
    if (has_af_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->af_level());
    }

  }
  // optional string af_code = 15;
  if (has_af_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->af_code());
  }

  if (_has_bits_[8 / 32] & 30720u) {
    // optional uint32 cvv = 6;
    if (has_cvv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cvv());
    }

    // optional uint32 i3ds = 7;
    if (has_i3ds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->i3ds());
    }

    // optional uint32 is3ds = 8;
    if (has_is3ds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is3ds());
    }

    // optional uint32 eci = 12;
    if (has_eci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eci());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.anti_fraud.UpdateRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.anti_fraud.UpdateRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.anti_fraud.UpdateRecord)
    MergeFrom(*source);
  }
}

void UpdateRecord::MergeFrom(const UpdateRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.anti_fraud.UpdateRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_merchant_id();
      merchant_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merchant_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_trans_id();
      trans_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_auth_code();
      auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_acquirer();
      acquirer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acquirer_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_acquirer_code();
      acquirer_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.acquirer_code_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_txn_status();
      txn_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_status_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_af_level();
      af_level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_level_);
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_af_code();
      af_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_code_);
    }
    if (cached_has_bits & 0x00000200u) {
      record_ts_ = from.record_ts_;
    }
    if (cached_has_bits & 0x00000400u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000800u) {
      cvv_ = from.cvv_;
    }
    if (cached_has_bits & 0x00001000u) {
      i3ds_ = from.i3ds_;
    }
    if (cached_has_bits & 0x00002000u) {
      is3ds_ = from.is3ds_;
    }
    if (cached_has_bits & 0x00004000u) {
      eci_ = from.eci_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.anti_fraud.UpdateRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRecord::CopyFrom(const UpdateRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.anti_fraud.UpdateRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000607) != 0x00000607) return false;
  return true;
}

void UpdateRecord::Swap(UpdateRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRecord::InternalSwap(UpdateRecord* other) {
  using std::swap;
  merchant_id_.Swap(&other->merchant_id_);
  client_id_.Swap(&other->client_id_);
  trans_id_.Swap(&other->trans_id_);
  auth_code_.Swap(&other->auth_code_);
  acquirer_.Swap(&other->acquirer_);
  acquirer_code_.Swap(&other->acquirer_code_);
  txn_status_.Swap(&other->txn_status_);
  af_level_.Swap(&other->af_level_);
  af_code_.Swap(&other->af_code_);
  swap(record_ts_, other->record_ts_);
  swap(status_, other->status_);
  swap(cvv_, other->cvv_);
  swap(i3ds_, other->i3ds_);
  swap(is3ds_, other->is3ds_);
  swap(eci_, other->eci_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRecord::GetMetadata() const {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateRecord

// required uint64 record_ts = 1;
bool UpdateRecord::has_record_ts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UpdateRecord::set_has_record_ts() {
  _has_bits_[0] |= 0x00000200u;
}
void UpdateRecord::clear_has_record_ts() {
  _has_bits_[0] &= ~0x00000200u;
}
void UpdateRecord::clear_record_ts() {
  record_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_record_ts();
}
::google::protobuf::uint64 UpdateRecord::record_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.record_ts)
  return record_ts_;
}
void UpdateRecord::set_record_ts(::google::protobuf::uint64 value) {
  set_has_record_ts();
  record_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.record_ts)
}

// required string merchant_id = 2;
bool UpdateRecord::has_merchant_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateRecord::set_has_merchant_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateRecord::clear_has_merchant_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateRecord::clear_merchant_id() {
  merchant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_merchant_id();
}
const ::std::string& UpdateRecord::merchant_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
  return merchant_id_.GetNoArena();
}
void UpdateRecord::set_merchant_id(const ::std::string& value) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
}
#if LANG_CXX11
void UpdateRecord::set_merchant_id(::std::string&& value) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
}
#endif
void UpdateRecord::set_merchant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
}
void UpdateRecord::set_merchant_id(const char* value, size_t size) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
}
::std::string* UpdateRecord::mutable_merchant_id() {
  set_has_merchant_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
  return merchant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRecord::release_merchant_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
  clear_has_merchant_id();
  return merchant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRecord::set_allocated_merchant_id(::std::string* merchant_id) {
  if (merchant_id != NULL) {
    set_has_merchant_id();
  } else {
    clear_has_merchant_id();
  }
  merchant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merchant_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
}

// required string client_id = 3;
bool UpdateRecord::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdateRecord::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdateRecord::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdateRecord::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
const ::std::string& UpdateRecord::client_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.client_id)
  return client_id_.GetNoArena();
}
void UpdateRecord::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.client_id)
}
#if LANG_CXX11
void UpdateRecord::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.client_id)
}
#endif
void UpdateRecord::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.client_id)
}
void UpdateRecord::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.client_id)
}
::std::string* UpdateRecord::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRecord::release_client_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRecord::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.client_id)
}

// required string trans_id = 4;
bool UpdateRecord::has_trans_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UpdateRecord::set_has_trans_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UpdateRecord::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UpdateRecord::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trans_id();
}
const ::std::string& UpdateRecord::trans_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
  return trans_id_.GetNoArena();
}
void UpdateRecord::set_trans_id(const ::std::string& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
}
#if LANG_CXX11
void UpdateRecord::set_trans_id(::std::string&& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
}
#endif
void UpdateRecord::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
}
void UpdateRecord::set_trans_id(const char* value, size_t size) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
}
::std::string* UpdateRecord::mutable_trans_id() {
  set_has_trans_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRecord::release_trans_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
  clear_has_trans_id();
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRecord::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != NULL) {
    set_has_trans_id();
  } else {
    clear_has_trans_id();
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
}

// required uint32 status = 5;
bool UpdateRecord::has_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UpdateRecord::set_has_status() {
  _has_bits_[0] |= 0x00000400u;
}
void UpdateRecord::clear_has_status() {
  _has_bits_[0] &= ~0x00000400u;
}
void UpdateRecord::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 UpdateRecord::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.status)
  return status_;
}
void UpdateRecord::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.status)
}

// optional uint32 cvv = 6;
bool UpdateRecord::has_cvv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UpdateRecord::set_has_cvv() {
  _has_bits_[0] |= 0x00000800u;
}
void UpdateRecord::clear_has_cvv() {
  _has_bits_[0] &= ~0x00000800u;
}
void UpdateRecord::clear_cvv() {
  cvv_ = 0u;
  clear_has_cvv();
}
::google::protobuf::uint32 UpdateRecord::cvv() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.cvv)
  return cvv_;
}
void UpdateRecord::set_cvv(::google::protobuf::uint32 value) {
  set_has_cvv();
  cvv_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.cvv)
}

// optional uint32 i3ds = 7;
bool UpdateRecord::has_i3ds() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UpdateRecord::set_has_i3ds() {
  _has_bits_[0] |= 0x00001000u;
}
void UpdateRecord::clear_has_i3ds() {
  _has_bits_[0] &= ~0x00001000u;
}
void UpdateRecord::clear_i3ds() {
  i3ds_ = 0u;
  clear_has_i3ds();
}
::google::protobuf::uint32 UpdateRecord::i3ds() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.i3ds)
  return i3ds_;
}
void UpdateRecord::set_i3ds(::google::protobuf::uint32 value) {
  set_has_i3ds();
  i3ds_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.i3ds)
}

// optional uint32 is3ds = 8;
bool UpdateRecord::has_is3ds() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void UpdateRecord::set_has_is3ds() {
  _has_bits_[0] |= 0x00002000u;
}
void UpdateRecord::clear_has_is3ds() {
  _has_bits_[0] &= ~0x00002000u;
}
void UpdateRecord::clear_is3ds() {
  is3ds_ = 0u;
  clear_has_is3ds();
}
::google::protobuf::uint32 UpdateRecord::is3ds() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.is3ds)
  return is3ds_;
}
void UpdateRecord::set_is3ds(::google::protobuf::uint32 value) {
  set_has_is3ds();
  is3ds_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.is3ds)
}

// optional string auth_code = 9;
bool UpdateRecord::has_auth_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UpdateRecord::set_has_auth_code() {
  _has_bits_[0] |= 0x00000008u;
}
void UpdateRecord::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void UpdateRecord::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_code();
}
const ::std::string& UpdateRecord::auth_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
  return auth_code_.GetNoArena();
}
void UpdateRecord::set_auth_code(const ::std::string& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
}
#if LANG_CXX11
void UpdateRecord::set_auth_code(::std::string&& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
}
#endif
void UpdateRecord::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
}
void UpdateRecord::set_auth_code(const char* value, size_t size) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
}
::std::string* UpdateRecord::mutable_auth_code() {
  set_has_auth_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRecord::release_auth_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
  clear_has_auth_code();
  return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRecord::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != NULL) {
    set_has_auth_code();
  } else {
    clear_has_auth_code();
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
}

// optional string acquirer = 10;
bool UpdateRecord::has_acquirer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UpdateRecord::set_has_acquirer() {
  _has_bits_[0] |= 0x00000010u;
}
void UpdateRecord::clear_has_acquirer() {
  _has_bits_[0] &= ~0x00000010u;
}
void UpdateRecord::clear_acquirer() {
  acquirer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acquirer();
}
const ::std::string& UpdateRecord::acquirer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
  return acquirer_.GetNoArena();
}
void UpdateRecord::set_acquirer(const ::std::string& value) {
  set_has_acquirer();
  acquirer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
}
#if LANG_CXX11
void UpdateRecord::set_acquirer(::std::string&& value) {
  set_has_acquirer();
  acquirer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
}
#endif
void UpdateRecord::set_acquirer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_acquirer();
  acquirer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
}
void UpdateRecord::set_acquirer(const char* value, size_t size) {
  set_has_acquirer();
  acquirer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
}
::std::string* UpdateRecord::mutable_acquirer() {
  set_has_acquirer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
  return acquirer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRecord::release_acquirer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
  clear_has_acquirer();
  return acquirer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRecord::set_allocated_acquirer(::std::string* acquirer) {
  if (acquirer != NULL) {
    set_has_acquirer();
  } else {
    clear_has_acquirer();
  }
  acquirer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acquirer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
}

// optional string acquirer_code = 11;
bool UpdateRecord::has_acquirer_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UpdateRecord::set_has_acquirer_code() {
  _has_bits_[0] |= 0x00000020u;
}
void UpdateRecord::clear_has_acquirer_code() {
  _has_bits_[0] &= ~0x00000020u;
}
void UpdateRecord::clear_acquirer_code() {
  acquirer_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acquirer_code();
}
const ::std::string& UpdateRecord::acquirer_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
  return acquirer_code_.GetNoArena();
}
void UpdateRecord::set_acquirer_code(const ::std::string& value) {
  set_has_acquirer_code();
  acquirer_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
}
#if LANG_CXX11
void UpdateRecord::set_acquirer_code(::std::string&& value) {
  set_has_acquirer_code();
  acquirer_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
}
#endif
void UpdateRecord::set_acquirer_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_acquirer_code();
  acquirer_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
}
void UpdateRecord::set_acquirer_code(const char* value, size_t size) {
  set_has_acquirer_code();
  acquirer_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
}
::std::string* UpdateRecord::mutable_acquirer_code() {
  set_has_acquirer_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
  return acquirer_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRecord::release_acquirer_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
  clear_has_acquirer_code();
  return acquirer_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRecord::set_allocated_acquirer_code(::std::string* acquirer_code) {
  if (acquirer_code != NULL) {
    set_has_acquirer_code();
  } else {
    clear_has_acquirer_code();
  }
  acquirer_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acquirer_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
}

// optional uint32 eci = 12;
bool UpdateRecord::has_eci() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UpdateRecord::set_has_eci() {
  _has_bits_[0] |= 0x00004000u;
}
void UpdateRecord::clear_has_eci() {
  _has_bits_[0] &= ~0x00004000u;
}
void UpdateRecord::clear_eci() {
  eci_ = 0u;
  clear_has_eci();
}
::google::protobuf::uint32 UpdateRecord::eci() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.eci)
  return eci_;
}
void UpdateRecord::set_eci(::google::protobuf::uint32 value) {
  set_has_eci();
  eci_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.eci)
}

// optional string txn_status = 13;
bool UpdateRecord::has_txn_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UpdateRecord::set_has_txn_status() {
  _has_bits_[0] |= 0x00000040u;
}
void UpdateRecord::clear_has_txn_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void UpdateRecord::clear_txn_status() {
  txn_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txn_status();
}
const ::std::string& UpdateRecord::txn_status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
  return txn_status_.GetNoArena();
}
void UpdateRecord::set_txn_status(const ::std::string& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
}
#if LANG_CXX11
void UpdateRecord::set_txn_status(::std::string&& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
}
#endif
void UpdateRecord::set_txn_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
}
void UpdateRecord::set_txn_status(const char* value, size_t size) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
}
::std::string* UpdateRecord::mutable_txn_status() {
  set_has_txn_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
  return txn_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRecord::release_txn_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
  clear_has_txn_status();
  return txn_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRecord::set_allocated_txn_status(::std::string* txn_status) {
  if (txn_status != NULL) {
    set_has_txn_status();
  } else {
    clear_has_txn_status();
  }
  txn_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
}

// optional string af_level = 14;
bool UpdateRecord::has_af_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UpdateRecord::set_has_af_level() {
  _has_bits_[0] |= 0x00000080u;
}
void UpdateRecord::clear_has_af_level() {
  _has_bits_[0] &= ~0x00000080u;
}
void UpdateRecord::clear_af_level() {
  af_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_level();
}
const ::std::string& UpdateRecord::af_level() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.af_level)
  return af_level_.GetNoArena();
}
void UpdateRecord::set_af_level(const ::std::string& value) {
  set_has_af_level();
  af_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.af_level)
}
#if LANG_CXX11
void UpdateRecord::set_af_level(::std::string&& value) {
  set_has_af_level();
  af_level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.af_level)
}
#endif
void UpdateRecord::set_af_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_level();
  af_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.af_level)
}
void UpdateRecord::set_af_level(const char* value, size_t size) {
  set_has_af_level();
  af_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.af_level)
}
::std::string* UpdateRecord::mutable_af_level() {
  set_has_af_level();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.af_level)
  return af_level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRecord::release_af_level() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.af_level)
  clear_has_af_level();
  return af_level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRecord::set_allocated_af_level(::std::string* af_level) {
  if (af_level != NULL) {
    set_has_af_level();
  } else {
    clear_has_af_level();
  }
  af_level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_level);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.af_level)
}

// optional string af_code = 15;
bool UpdateRecord::has_af_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UpdateRecord::set_has_af_code() {
  _has_bits_[0] |= 0x00000100u;
}
void UpdateRecord::clear_has_af_code() {
  _has_bits_[0] &= ~0x00000100u;
}
void UpdateRecord::clear_af_code() {
  af_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_code();
}
const ::std::string& UpdateRecord::af_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.af_code)
  return af_code_.GetNoArena();
}
void UpdateRecord::set_af_code(const ::std::string& value) {
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.af_code)
}
#if LANG_CXX11
void UpdateRecord::set_af_code(::std::string&& value) {
  set_has_af_code();
  af_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.af_code)
}
#endif
void UpdateRecord::set_af_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.af_code)
}
void UpdateRecord::set_af_code(const char* value, size_t size) {
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.af_code)
}
::std::string* UpdateRecord::mutable_af_code() {
  set_has_af_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.af_code)
  return af_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateRecord::release_af_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.af_code)
  clear_has_af_code();
  return af_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateRecord::set_allocated_af_code(::std::string* af_code) {
  if (af_code != NULL) {
    set_has_af_code();
  } else {
    clear_has_af_code();
  }
  af_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.af_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpRecord::kTransIdFieldNumber;
const int DumpRecord::kInternalIdFieldNumber;
const int DumpRecord::kCardNumberFieldNumber;
const int DumpRecord::kCardIdFieldNumber;
const int DumpRecord::kAuthCodeFieldNumber;
const int DumpRecord::kTxnStatusFieldNumber;
const int DumpRecord::kUserIdFieldNumber;
const int DumpRecord::kClientIdFieldNumber;
const int DumpRecord::kAmountFieldNumber;
const int DumpRecord::kTsFieldNumber;
const int DumpRecord::kIpFieldNumber;
const int DumpRecord::kNickFieldNumber;
const int DumpRecord::kLightIdFieldNumber;
const int DumpRecord::kVidFieldNumber;
const int DumpRecord::kDmrUidFieldNumber;
const int DumpRecord::kCurrencyFieldNumber;
const int DumpRecord::kAfBpcFieldNumber;
const int DumpRecord::kAfMailFieldNumber;
const int DumpRecord::kI3DsFieldNumber;
const int DumpRecord::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpRecord::DumpRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_antifraud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.anti_fraud.DumpRecord)
}
DumpRecord::DumpRecord(const DumpRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trans_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trans_id()) {
    trans_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
  }
  internal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_internal_id()) {
    internal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_id_);
  }
  card_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_number()) {
    card_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_number_);
  }
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_id()) {
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_code()) {
    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  txn_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_txn_status()) {
    txn_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_status_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_light_id()) {
    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vid()) {
    vid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_);
  }
  dmr_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dmr_uid()) {
    dmr_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dmr_uid_);
  }
  af_bpc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_af_bpc()) {
    af_bpc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_bpc_);
  }
  af_mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_af_mail()) {
    af_mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_mail_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&i3ds_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(i3ds_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.anti_fraud.DumpRecord)
}

void DumpRecord::SharedCtor() {
  _cached_size_ = 0;
  trans_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dmr_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_bpc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&i3ds_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(i3ds_));
}

DumpRecord::~DumpRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.anti_fraud.DumpRecord)
  SharedDtor();
}

void DumpRecord::SharedDtor() {
  trans_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  internal_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  light_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dmr_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_bpc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_mail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DumpRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpRecord::descriptor() {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DumpRecord& DumpRecord::default_instance() {
  protobuf_antifraud_2eproto::InitDefaults();
  return *internal_default_instance();
}

DumpRecord* DumpRecord::New(::google::protobuf::Arena* arena) const {
  DumpRecord* n = new DumpRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DumpRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.anti_fraud.DumpRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!trans_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trans_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!internal_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*internal_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!card_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_number_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!card_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!auth_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*auth_code_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!txn_status_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*txn_status_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!user_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nick_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!light_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*light_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(!vid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(!dmr_uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dmr_uid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(!af_bpc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*af_bpc_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(!af_mail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*af_mail_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 983040u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&i3ds_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(i3ds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DumpRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.anti_fraud.DumpRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string trans_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trans_id().data(), static_cast<int>(this->trans_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.trans_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string internal_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->internal_id().data(), static_cast<int>(this->internal_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.internal_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string card_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_number().data(), static_cast<int>(this->card_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.card_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string card_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), static_cast<int>(this->card_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.card_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string auth_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_code().data(), static_cast<int>(this->auth_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.auth_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string txn_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->txn_status().data(), static_cast<int>(this->txn_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.txn_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.user_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string client_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 amount = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ip = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nick = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), static_cast<int>(this->nick().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string light_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_light_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->light_id().data(), static_cast<int>(this->light_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.light_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string vid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vid().data(), static_cast<int>(this->vid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.vid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string dmr_uid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dmr_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dmr_uid().data(), static_cast<int>(this->dmr_uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.dmr_uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 currency = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string af_bpc = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_af_bpc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->af_bpc().data(), static_cast<int>(this->af_bpc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.af_bpc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string af_mail = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_af_mail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->af_mail().data(), static_cast<int>(this->af_mail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.af_mail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 i3ds = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_i3ds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &i3ds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string body = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), static_cast<int>(this->body().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.DumpRecord.body");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.anti_fraud.DumpRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.anti_fraud.DumpRecord)
  return false;
#undef DO_
}

void DumpRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.anti_fraud.DumpRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string trans_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.trans_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trans_id(), output);
  }

  // required string internal_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->internal_id().data(), static_cast<int>(this->internal_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.internal_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->internal_id(), output);
  }

  // required string card_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_number().data(), static_cast<int>(this->card_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.card_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->card_number(), output);
  }

  // required string card_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), static_cast<int>(this->card_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->card_id(), output);
  }

  // required string auth_code = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.auth_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->auth_code(), output);
  }

  // required string txn_status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txn_status().data(), static_cast<int>(this->txn_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.txn_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->txn_status(), output);
  }

  // required string user_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->user_id(), output);
  }

  // required string client_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->client_id(), output);
  }

  // required uint64 amount = 9;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->amount(), output);
  }

  // required uint64 ts = 10;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ts(), output);
  }

  // required string ip = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->ip(), output);
  }

  // required string nick = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->nick(), output);
  }

  // required string light_id = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.light_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->light_id(), output);
  }

  // required string vid = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.vid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->vid(), output);
  }

  // required string dmr_uid = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dmr_uid().data(), static_cast<int>(this->dmr_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.dmr_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->dmr_uid(), output);
  }

  // required uint32 currency = 16;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->currency(), output);
  }

  // required string af_bpc = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_bpc().data(), static_cast<int>(this->af_bpc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.af_bpc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->af_bpc(), output);
  }

  // required string af_mail = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_mail().data(), static_cast<int>(this->af_mail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.af_mail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->af_mail(), output);
  }

  // required uint32 i3ds = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->i3ds(), output);
  }

  // required string body = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.anti_fraud.DumpRecord)
}

::google::protobuf::uint8* DumpRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.anti_fraud.DumpRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string trans_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.trans_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trans_id(), target);
  }

  // required string internal_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->internal_id().data(), static_cast<int>(this->internal_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.internal_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->internal_id(), target);
  }

  // required string card_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_number().data(), static_cast<int>(this->card_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.card_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->card_number(), target);
  }

  // required string card_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), static_cast<int>(this->card_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->card_id(), target);
  }

  // required string auth_code = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.auth_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->auth_code(), target);
  }

  // required string txn_status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txn_status().data(), static_cast<int>(this->txn_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.txn_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->txn_status(), target);
  }

  // required string user_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->user_id(), target);
  }

  // required string client_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->client_id(), target);
  }

  // required uint64 amount = 9;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->amount(), target);
  }

  // required uint64 ts = 10;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ts(), target);
  }

  // required string ip = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ip(), target);
  }

  // required string nick = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->nick(), target);
  }

  // required string light_id = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.light_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->light_id(), target);
  }

  // required string vid = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.vid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->vid(), target);
  }

  // required string dmr_uid = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dmr_uid().data(), static_cast<int>(this->dmr_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.dmr_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->dmr_uid(), target);
  }

  // required uint32 currency = 16;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->currency(), target);
  }

  // required string af_bpc = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_bpc().data(), static_cast<int>(this->af_bpc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.af_bpc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->af_bpc(), target);
  }

  // required string af_mail = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_mail().data(), static_cast<int>(this->af_mail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.af_mail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->af_mail(), target);
  }

  // required uint32 i3ds = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->i3ds(), target);
  }

  // required string body = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.DumpRecord.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.anti_fraud.DumpRecord)
  return target;
}

size_t DumpRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.anti_fraud.DumpRecord)
  size_t total_size = 0;

  if (has_trans_id()) {
    // required string trans_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trans_id());
  }

  if (has_internal_id()) {
    // required string internal_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_id());
  }

  if (has_card_number()) {
    // required string card_number = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_number());
  }

  if (has_card_id()) {
    // required string card_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());
  }

  if (has_auth_code()) {
    // required string auth_code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_code());
  }

  if (has_txn_status()) {
    // required string txn_status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_status());
  }

  if (has_user_id()) {
    // required string user_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_client_id()) {
    // required string client_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  if (has_ip()) {
    // required string ip = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_nick()) {
    // required string nick = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  if (has_light_id()) {
    // required string light_id = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->light_id());
  }

  if (has_vid()) {
    // required string vid = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vid());
  }

  if (has_dmr_uid()) {
    // required string dmr_uid = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dmr_uid());
  }

  if (has_af_bpc()) {
    // required string af_bpc = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->af_bpc());
  }

  if (has_af_mail()) {
    // required string af_mail = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->af_mail());
  }

  if (has_body()) {
    // required string body = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  if (has_amount()) {
    // required uint64 amount = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  if (has_ts()) {
    // required uint64 ts = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());
  }

  if (has_currency()) {
    // required uint32 currency = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currency());
  }

  if (has_i3ds()) {
    // required uint32 i3ds = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->i3ds());
  }

  return total_size;
}
size_t DumpRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.anti_fraud.DumpRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000fffff) ^ 0x000fffff) == 0) {  // All required fields are present.
    // required string trans_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trans_id());

    // required string internal_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->internal_id());

    // required string card_number = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_number());

    // required string card_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());

    // required string auth_code = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_code());

    // required string txn_status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_status());

    // required string user_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string client_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());

    // required string ip = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required string nick = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());

    // required string light_id = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->light_id());

    // required string vid = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vid());

    // required string dmr_uid = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dmr_uid());

    // required string af_bpc = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->af_bpc());

    // required string af_mail = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->af_mail());

    // required string body = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());

    // required uint64 amount = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());

    // required uint64 ts = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());

    // required uint32 currency = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currency());

    // required uint32 i3ds = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->i3ds());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.anti_fraud.DumpRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DumpRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.anti_fraud.DumpRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.anti_fraud.DumpRecord)
    MergeFrom(*source);
  }
}

void DumpRecord::MergeFrom(const DumpRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.anti_fraud.DumpRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_trans_id();
      trans_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_internal_id();
      internal_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.internal_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_card_number();
      card_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_number_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_card_id();
      card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_auth_code();
      auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_txn_status();
      txn_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_status_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_nick();
      nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_light_id();
      light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_vid();
      vid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_dmr_uid();
      dmr_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dmr_uid_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_af_bpc();
      af_bpc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_bpc_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_af_mail();
      af_mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_mail_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00020000u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x00040000u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00080000u) {
      i3ds_ = from.i3ds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DumpRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.anti_fraud.DumpRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpRecord::CopyFrom(const DumpRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.anti_fraud.DumpRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fffff) != 0x000fffff) return false;
  return true;
}

void DumpRecord::Swap(DumpRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpRecord::InternalSwap(DumpRecord* other) {
  using std::swap;
  trans_id_.Swap(&other->trans_id_);
  internal_id_.Swap(&other->internal_id_);
  card_number_.Swap(&other->card_number_);
  card_id_.Swap(&other->card_id_);
  auth_code_.Swap(&other->auth_code_);
  txn_status_.Swap(&other->txn_status_);
  user_id_.Swap(&other->user_id_);
  client_id_.Swap(&other->client_id_);
  ip_.Swap(&other->ip_);
  nick_.Swap(&other->nick_);
  light_id_.Swap(&other->light_id_);
  vid_.Swap(&other->vid_);
  dmr_uid_.Swap(&other->dmr_uid_);
  af_bpc_.Swap(&other->af_bpc_);
  af_mail_.Swap(&other->af_mail_);
  body_.Swap(&other->body_);
  swap(amount_, other->amount_);
  swap(ts_, other->ts_);
  swap(currency_, other->currency_);
  swap(i3ds_, other->i3ds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DumpRecord::GetMetadata() const {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DumpRecord

// required string trans_id = 1;
bool DumpRecord::has_trans_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DumpRecord::set_has_trans_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DumpRecord::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DumpRecord::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trans_id();
}
const ::std::string& DumpRecord::trans_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.trans_id)
  return trans_id_.GetNoArena();
}
void DumpRecord::set_trans_id(const ::std::string& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.trans_id)
}
#if LANG_CXX11
void DumpRecord::set_trans_id(::std::string&& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.trans_id)
}
#endif
void DumpRecord::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.trans_id)
}
void DumpRecord::set_trans_id(const char* value, size_t size) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.trans_id)
}
::std::string* DumpRecord::mutable_trans_id() {
  set_has_trans_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_trans_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.trans_id)
  clear_has_trans_id();
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != NULL) {
    set_has_trans_id();
  } else {
    clear_has_trans_id();
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.trans_id)
}

// required string internal_id = 2;
bool DumpRecord::has_internal_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DumpRecord::set_has_internal_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DumpRecord::clear_has_internal_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DumpRecord::clear_internal_id() {
  internal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_internal_id();
}
const ::std::string& DumpRecord::internal_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.internal_id)
  return internal_id_.GetNoArena();
}
void DumpRecord::set_internal_id(const ::std::string& value) {
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.internal_id)
}
#if LANG_CXX11
void DumpRecord::set_internal_id(::std::string&& value) {
  set_has_internal_id();
  internal_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.internal_id)
}
#endif
void DumpRecord::set_internal_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.internal_id)
}
void DumpRecord::set_internal_id(const char* value, size_t size) {
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.internal_id)
}
::std::string* DumpRecord::mutable_internal_id() {
  set_has_internal_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.internal_id)
  return internal_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_internal_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.internal_id)
  clear_has_internal_id();
  return internal_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_internal_id(::std::string* internal_id) {
  if (internal_id != NULL) {
    set_has_internal_id();
  } else {
    clear_has_internal_id();
  }
  internal_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.internal_id)
}

// required string card_number = 3;
bool DumpRecord::has_card_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DumpRecord::set_has_card_number() {
  _has_bits_[0] |= 0x00000004u;
}
void DumpRecord::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000004u;
}
void DumpRecord::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_number();
}
const ::std::string& DumpRecord::card_number() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.card_number)
  return card_number_.GetNoArena();
}
void DumpRecord::set_card_number(const ::std::string& value) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.card_number)
}
#if LANG_CXX11
void DumpRecord::set_card_number(::std::string&& value) {
  set_has_card_number();
  card_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.card_number)
}
#endif
void DumpRecord::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.card_number)
}
void DumpRecord::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.card_number)
}
::std::string* DumpRecord::mutable_card_number() {
  set_has_card_number();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_card_number() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.card_number)
  clear_has_card_number();
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    set_has_card_number();
  } else {
    clear_has_card_number();
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.card_number)
}

// required string card_id = 4;
bool DumpRecord::has_card_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DumpRecord::set_has_card_id() {
  _has_bits_[0] |= 0x00000008u;
}
void DumpRecord::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void DumpRecord::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
const ::std::string& DumpRecord::card_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.card_id)
  return card_id_.GetNoArena();
}
void DumpRecord::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.card_id)
}
#if LANG_CXX11
void DumpRecord::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.card_id)
}
#endif
void DumpRecord::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.card_id)
}
void DumpRecord::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.card_id)
}
::std::string* DumpRecord::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_card_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.card_id)
}

// required string auth_code = 5;
bool DumpRecord::has_auth_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DumpRecord::set_has_auth_code() {
  _has_bits_[0] |= 0x00000010u;
}
void DumpRecord::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void DumpRecord::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_code();
}
const ::std::string& DumpRecord::auth_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.auth_code)
  return auth_code_.GetNoArena();
}
void DumpRecord::set_auth_code(const ::std::string& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.auth_code)
}
#if LANG_CXX11
void DumpRecord::set_auth_code(::std::string&& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.auth_code)
}
#endif
void DumpRecord::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.auth_code)
}
void DumpRecord::set_auth_code(const char* value, size_t size) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.auth_code)
}
::std::string* DumpRecord::mutable_auth_code() {
  set_has_auth_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_auth_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.auth_code)
  clear_has_auth_code();
  return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != NULL) {
    set_has_auth_code();
  } else {
    clear_has_auth_code();
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.auth_code)
}

// required string txn_status = 6;
bool DumpRecord::has_txn_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DumpRecord::set_has_txn_status() {
  _has_bits_[0] |= 0x00000020u;
}
void DumpRecord::clear_has_txn_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void DumpRecord::clear_txn_status() {
  txn_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txn_status();
}
const ::std::string& DumpRecord::txn_status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.txn_status)
  return txn_status_.GetNoArena();
}
void DumpRecord::set_txn_status(const ::std::string& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.txn_status)
}
#if LANG_CXX11
void DumpRecord::set_txn_status(::std::string&& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.txn_status)
}
#endif
void DumpRecord::set_txn_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.txn_status)
}
void DumpRecord::set_txn_status(const char* value, size_t size) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.txn_status)
}
::std::string* DumpRecord::mutable_txn_status() {
  set_has_txn_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.txn_status)
  return txn_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_txn_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.txn_status)
  clear_has_txn_status();
  return txn_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_txn_status(::std::string* txn_status) {
  if (txn_status != NULL) {
    set_has_txn_status();
  } else {
    clear_has_txn_status();
  }
  txn_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.txn_status)
}

// required string user_id = 7;
bool DumpRecord::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DumpRecord::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
void DumpRecord::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void DumpRecord::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& DumpRecord::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.user_id)
  return user_id_.GetNoArena();
}
void DumpRecord::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.user_id)
}
#if LANG_CXX11
void DumpRecord::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.user_id)
}
#endif
void DumpRecord::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.user_id)
}
void DumpRecord::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.user_id)
}
::std::string* DumpRecord::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_user_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.user_id)
}

// required string client_id = 8;
bool DumpRecord::has_client_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DumpRecord::set_has_client_id() {
  _has_bits_[0] |= 0x00000080u;
}
void DumpRecord::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void DumpRecord::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
const ::std::string& DumpRecord::client_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.client_id)
  return client_id_.GetNoArena();
}
void DumpRecord::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.client_id)
}
#if LANG_CXX11
void DumpRecord::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.client_id)
}
#endif
void DumpRecord::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.client_id)
}
void DumpRecord::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.client_id)
}
::std::string* DumpRecord::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_client_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.client_id)
}

// required uint64 amount = 9;
bool DumpRecord::has_amount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DumpRecord::set_has_amount() {
  _has_bits_[0] |= 0x00010000u;
}
void DumpRecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00010000u;
}
void DumpRecord::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
::google::protobuf::uint64 DumpRecord::amount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.amount)
  return amount_;
}
void DumpRecord::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.amount)
}

// required uint64 ts = 10;
bool DumpRecord::has_ts() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DumpRecord::set_has_ts() {
  _has_bits_[0] |= 0x00020000u;
}
void DumpRecord::clear_has_ts() {
  _has_bits_[0] &= ~0x00020000u;
}
void DumpRecord::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
::google::protobuf::uint64 DumpRecord::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.ts)
  return ts_;
}
void DumpRecord::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.ts)
}

// required string ip = 11;
bool DumpRecord::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DumpRecord::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
void DumpRecord::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
void DumpRecord::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& DumpRecord::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.ip)
  return ip_.GetNoArena();
}
void DumpRecord::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.ip)
}
#if LANG_CXX11
void DumpRecord::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.ip)
}
#endif
void DumpRecord::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.ip)
}
void DumpRecord::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.ip)
}
::std::string* DumpRecord::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.ip)
}

// required string nick = 12;
bool DumpRecord::has_nick() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DumpRecord::set_has_nick() {
  _has_bits_[0] |= 0x00000200u;
}
void DumpRecord::clear_has_nick() {
  _has_bits_[0] &= ~0x00000200u;
}
void DumpRecord::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick();
}
const ::std::string& DumpRecord::nick() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.nick)
  return nick_.GetNoArena();
}
void DumpRecord::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.nick)
}
#if LANG_CXX11
void DumpRecord::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.nick)
}
#endif
void DumpRecord::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.nick)
}
void DumpRecord::set_nick(const char* value, size_t size) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.nick)
}
::std::string* DumpRecord::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_nick() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.nick)
  clear_has_nick();
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.nick)
}

// required string light_id = 13;
bool DumpRecord::has_light_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DumpRecord::set_has_light_id() {
  _has_bits_[0] |= 0x00000400u;
}
void DumpRecord::clear_has_light_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void DumpRecord::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_light_id();
}
const ::std::string& DumpRecord::light_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.light_id)
  return light_id_.GetNoArena();
}
void DumpRecord::set_light_id(const ::std::string& value) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.light_id)
}
#if LANG_CXX11
void DumpRecord::set_light_id(::std::string&& value) {
  set_has_light_id();
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.light_id)
}
#endif
void DumpRecord::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.light_id)
}
void DumpRecord::set_light_id(const char* value, size_t size) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.light_id)
}
::std::string* DumpRecord::mutable_light_id() {
  set_has_light_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_light_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.light_id)
  clear_has_light_id();
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    set_has_light_id();
  } else {
    clear_has_light_id();
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.light_id)
}

// required string vid = 14;
bool DumpRecord::has_vid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DumpRecord::set_has_vid() {
  _has_bits_[0] |= 0x00000800u;
}
void DumpRecord::clear_has_vid() {
  _has_bits_[0] &= ~0x00000800u;
}
void DumpRecord::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
const ::std::string& DumpRecord::vid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.vid)
  return vid_.GetNoArena();
}
void DumpRecord::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.vid)
}
#if LANG_CXX11
void DumpRecord::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.vid)
}
#endif
void DumpRecord::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.vid)
}
void DumpRecord::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.vid)
}
::std::string* DumpRecord::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_vid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.vid)
}

// required string dmr_uid = 15;
bool DumpRecord::has_dmr_uid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DumpRecord::set_has_dmr_uid() {
  _has_bits_[0] |= 0x00001000u;
}
void DumpRecord::clear_has_dmr_uid() {
  _has_bits_[0] &= ~0x00001000u;
}
void DumpRecord::clear_dmr_uid() {
  dmr_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dmr_uid();
}
const ::std::string& DumpRecord::dmr_uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
  return dmr_uid_.GetNoArena();
}
void DumpRecord::set_dmr_uid(const ::std::string& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
}
#if LANG_CXX11
void DumpRecord::set_dmr_uid(::std::string&& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
}
#endif
void DumpRecord::set_dmr_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
}
void DumpRecord::set_dmr_uid(const char* value, size_t size) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
}
::std::string* DumpRecord::mutable_dmr_uid() {
  set_has_dmr_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
  return dmr_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_dmr_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
  clear_has_dmr_uid();
  return dmr_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_dmr_uid(::std::string* dmr_uid) {
  if (dmr_uid != NULL) {
    set_has_dmr_uid();
  } else {
    clear_has_dmr_uid();
  }
  dmr_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dmr_uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
}

// required uint32 currency = 16;
bool DumpRecord::has_currency() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DumpRecord::set_has_currency() {
  _has_bits_[0] |= 0x00040000u;
}
void DumpRecord::clear_has_currency() {
  _has_bits_[0] &= ~0x00040000u;
}
void DumpRecord::clear_currency() {
  currency_ = 0u;
  clear_has_currency();
}
::google::protobuf::uint32 DumpRecord::currency() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.currency)
  return currency_;
}
void DumpRecord::set_currency(::google::protobuf::uint32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.currency)
}

// required string af_bpc = 17;
bool DumpRecord::has_af_bpc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DumpRecord::set_has_af_bpc() {
  _has_bits_[0] |= 0x00002000u;
}
void DumpRecord::clear_has_af_bpc() {
  _has_bits_[0] &= ~0x00002000u;
}
void DumpRecord::clear_af_bpc() {
  af_bpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_bpc();
}
const ::std::string& DumpRecord::af_bpc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
  return af_bpc_.GetNoArena();
}
void DumpRecord::set_af_bpc(const ::std::string& value) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
}
#if LANG_CXX11
void DumpRecord::set_af_bpc(::std::string&& value) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
}
#endif
void DumpRecord::set_af_bpc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
}
void DumpRecord::set_af_bpc(const char* value, size_t size) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
}
::std::string* DumpRecord::mutable_af_bpc() {
  set_has_af_bpc();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
  return af_bpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_af_bpc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
  clear_has_af_bpc();
  return af_bpc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_af_bpc(::std::string* af_bpc) {
  if (af_bpc != NULL) {
    set_has_af_bpc();
  } else {
    clear_has_af_bpc();
  }
  af_bpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_bpc);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
}

// required string af_mail = 18;
bool DumpRecord::has_af_mail() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DumpRecord::set_has_af_mail() {
  _has_bits_[0] |= 0x00004000u;
}
void DumpRecord::clear_has_af_mail() {
  _has_bits_[0] &= ~0x00004000u;
}
void DumpRecord::clear_af_mail() {
  af_mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_mail();
}
const ::std::string& DumpRecord::af_mail() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.af_mail)
  return af_mail_.GetNoArena();
}
void DumpRecord::set_af_mail(const ::std::string& value) {
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.af_mail)
}
#if LANG_CXX11
void DumpRecord::set_af_mail(::std::string&& value) {
  set_has_af_mail();
  af_mail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.af_mail)
}
#endif
void DumpRecord::set_af_mail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.af_mail)
}
void DumpRecord::set_af_mail(const char* value, size_t size) {
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.af_mail)
}
::std::string* DumpRecord::mutable_af_mail() {
  set_has_af_mail();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.af_mail)
  return af_mail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_af_mail() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.af_mail)
  clear_has_af_mail();
  return af_mail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_af_mail(::std::string* af_mail) {
  if (af_mail != NULL) {
    set_has_af_mail();
  } else {
    clear_has_af_mail();
  }
  af_mail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_mail);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.af_mail)
}

// required uint32 i3ds = 19;
bool DumpRecord::has_i3ds() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DumpRecord::set_has_i3ds() {
  _has_bits_[0] |= 0x00080000u;
}
void DumpRecord::clear_has_i3ds() {
  _has_bits_[0] &= ~0x00080000u;
}
void DumpRecord::clear_i3ds() {
  i3ds_ = 0u;
  clear_has_i3ds();
}
::google::protobuf::uint32 DumpRecord::i3ds() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.i3ds)
  return i3ds_;
}
void DumpRecord::set_i3ds(::google::protobuf::uint32 value) {
  set_has_i3ds();
  i3ds_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.i3ds)
}

// required string body = 20;
bool DumpRecord::has_body() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DumpRecord::set_has_body() {
  _has_bits_[0] |= 0x00008000u;
}
void DumpRecord::clear_has_body() {
  _has_bits_[0] &= ~0x00008000u;
}
void DumpRecord::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& DumpRecord::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.body)
  return body_.GetNoArena();
}
void DumpRecord::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.body)
}
#if LANG_CXX11
void DumpRecord::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.body)
}
#endif
void DumpRecord::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.body)
}
void DumpRecord::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.body)
}
::std::string* DumpRecord::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DumpRecord::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DumpRecord::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRecord::kQidFieldNumber;
const int LogRecord::kLogTsFieldNumber;
const int LogRecord::kTypeFieldNumber;
const int LogRecord::kCheckRecordFieldNumber;
const int LogRecord::kUpdateRecordFieldNumber;
const int LogRecord::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRecord::LogRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_antifraud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.anti_fraud.LogRecord)
}
LogRecord::LogRecord(const LogRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qid()) {
    qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_check_record()) {
    check_record_ = new ::ru::mail::go::anti_fraud::CheckRecord(*from.check_record_);
  } else {
    check_record_ = NULL;
  }
  if (from.has_update_record()) {
    update_record_ = new ::ru::mail::go::anti_fraud::UpdateRecord(*from.update_record_);
  } else {
    update_record_ = NULL;
  }
  ::memcpy(&log_ts_, &from.log_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&log_ts_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.anti_fraud.LogRecord)
}

void LogRecord::SharedCtor() {
  _cached_size_ = 0;
  qid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&check_record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&check_record_)) + sizeof(type_));
}

LogRecord::~LogRecord() {
  // @@protoc_insertion_point(destructor:ru.mail.go.anti_fraud.LogRecord)
  SharedDtor();
}

void LogRecord::SharedDtor() {
  qid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete check_record_;
  if (this != internal_default_instance()) delete update_record_;
}

void LogRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecord::descriptor() {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogRecord& LogRecord::default_instance() {
  protobuf_antifraud_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogRecord* LogRecord::New(::google::protobuf::Arena* arena) const {
  LogRecord* n = new LogRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.anti_fraud.LogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!qid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(check_record_ != NULL);
      check_record_->::ru::mail::go::anti_fraud::CheckRecord::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(update_record_ != NULL);
      update_record_->::ru::mail::go::anti_fraud::UpdateRecord::Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&log_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&log_ts_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.anti_fraud.LogRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string qid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->qid().data(), static_cast<int>(this->qid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.LogRecord.qid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 log_ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_log_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.anti_fraud.LogRecord.RecordType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::anti_fraud::LogRecord_RecordType_IsValid(value)) {
            set_type(static_cast< ::ru::mail::go::anti_fraud::LogRecord_RecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.anti_fraud.CheckRecord check_record = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_check_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.anti_fraud.UpdateRecord update_record = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string body = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), static_cast<int>(this->body().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.LogRecord.body");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.anti_fraud.LogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.anti_fraud.LogRecord)
  return false;
#undef DO_
}

void LogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.anti_fraud.LogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string qid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.LogRecord.qid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qid(), output);
  }

  // required uint64 log_ts = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->log_ts(), output);
  }

  // required .ru.mail.go.anti_fraud.LogRecord.RecordType type = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .ru.mail.go.anti_fraud.CheckRecord check_record = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->check_record_, output);
  }

  // optional .ru.mail.go.anti_fraud.UpdateRecord update_record = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->update_record_, output);
  }

  // required string body = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.LogRecord.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.anti_fraud.LogRecord)
}

::google::protobuf::uint8* LogRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.anti_fraud.LogRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string qid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->qid().data(), static_cast<int>(this->qid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.LogRecord.qid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qid(), target);
  }

  // required uint64 log_ts = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->log_ts(), target);
  }

  // required .ru.mail.go.anti_fraud.LogRecord.RecordType type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .ru.mail.go.anti_fraud.CheckRecord check_record = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->check_record_, deterministic, target);
  }

  // optional .ru.mail.go.anti_fraud.UpdateRecord update_record = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->update_record_, deterministic, target);
  }

  // required string body = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.LogRecord.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.anti_fraud.LogRecord)
  return target;
}

size_t LogRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.anti_fraud.LogRecord)
  size_t total_size = 0;

  if (has_qid()) {
    // required string qid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());
  }

  if (has_body()) {
    // required string body = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  if (has_log_ts()) {
    // required uint64 log_ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->log_ts());
  }

  if (has_type()) {
    // required .ru.mail.go.anti_fraud.LogRecord.RecordType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t LogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.anti_fraud.LogRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000033) ^ 0x00000033) == 0) {  // All required fields are present.
    // required string qid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->qid());

    // required string body = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());

    // required uint64 log_ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->log_ts());

    // required .ru.mail.go.anti_fraud.LogRecord.RecordType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional .ru.mail.go.anti_fraud.CheckRecord check_record = 4;
    if (has_check_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->check_record_);
    }

    // optional .ru.mail.go.anti_fraud.UpdateRecord update_record = 5;
    if (has_update_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_record_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.anti_fraud.LogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.anti_fraud.LogRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.anti_fraud.LogRecord)
    MergeFrom(*source);
  }
}

void LogRecord::MergeFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.anti_fraud.LogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qid();
      qid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_check_record()->::ru::mail::go::anti_fraud::CheckRecord::MergeFrom(from.check_record());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_update_record()->::ru::mail::go::anti_fraud::UpdateRecord::MergeFrom(from.update_record());
    }
    if (cached_has_bits & 0x00000010u) {
      log_ts_ = from.log_ts_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.anti_fraud.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecord::CopyFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.anti_fraud.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;
  if (has_check_record()) {
    if (!this->check_record_->IsInitialized()) return false;
  }
  if (has_update_record()) {
    if (!this->update_record_->IsInitialized()) return false;
  }
  return true;
}

void LogRecord::Swap(LogRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRecord::InternalSwap(LogRecord* other) {
  using std::swap;
  qid_.Swap(&other->qid_);
  body_.Swap(&other->body_);
  swap(check_record_, other->check_record_);
  swap(update_record_, other->update_record_);
  swap(log_ts_, other->log_ts_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRecord::GetMetadata() const {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRecord

// required string qid = 1;
bool LogRecord::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogRecord::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
void LogRecord::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogRecord::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
const ::std::string& LogRecord::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.qid)
  return qid_.GetNoArena();
}
void LogRecord::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.LogRecord.qid)
}
#if LANG_CXX11
void LogRecord::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.LogRecord.qid)
}
#endif
void LogRecord::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.LogRecord.qid)
}
void LogRecord::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.LogRecord.qid)
}
::std::string* LogRecord::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.LogRecord.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRecord::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.LogRecord.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRecord::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.LogRecord.qid)
}

// required uint64 log_ts = 2;
bool LogRecord::has_log_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LogRecord::set_has_log_ts() {
  _has_bits_[0] |= 0x00000010u;
}
void LogRecord::clear_has_log_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
void LogRecord::clear_log_ts() {
  log_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_log_ts();
}
::google::protobuf::uint64 LogRecord::log_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.log_ts)
  return log_ts_;
}
void LogRecord::set_log_ts(::google::protobuf::uint64 value) {
  set_has_log_ts();
  log_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.LogRecord.log_ts)
}

// required .ru.mail.go.anti_fraud.LogRecord.RecordType type = 3;
bool LogRecord::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LogRecord::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void LogRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void LogRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ru::mail::go::anti_fraud::LogRecord_RecordType LogRecord::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.type)
  return static_cast< ::ru::mail::go::anti_fraud::LogRecord_RecordType >(type_);
}
void LogRecord::set_type(::ru::mail::go::anti_fraud::LogRecord_RecordType value) {
  assert(::ru::mail::go::anti_fraud::LogRecord_RecordType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.LogRecord.type)
}

// optional .ru.mail.go.anti_fraud.CheckRecord check_record = 4;
bool LogRecord::has_check_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogRecord::set_has_check_record() {
  _has_bits_[0] |= 0x00000004u;
}
void LogRecord::clear_has_check_record() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogRecord::clear_check_record() {
  if (check_record_ != NULL) check_record_->::ru::mail::go::anti_fraud::CheckRecord::Clear();
  clear_has_check_record();
}
const ::ru::mail::go::anti_fraud::CheckRecord& LogRecord::check_record() const {
  const ::ru::mail::go::anti_fraud::CheckRecord* p = check_record_;
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.check_record)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::anti_fraud::CheckRecord*>(
      &::ru::mail::go::anti_fraud::_CheckRecord_default_instance_);
}
::ru::mail::go::anti_fraud::CheckRecord* LogRecord::mutable_check_record() {
  set_has_check_record();
  if (check_record_ == NULL) {
    check_record_ = new ::ru::mail::go::anti_fraud::CheckRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.LogRecord.check_record)
  return check_record_;
}
::ru::mail::go::anti_fraud::CheckRecord* LogRecord::release_check_record() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.LogRecord.check_record)
  clear_has_check_record();
  ::ru::mail::go::anti_fraud::CheckRecord* temp = check_record_;
  check_record_ = NULL;
  return temp;
}
void LogRecord::set_allocated_check_record(::ru::mail::go::anti_fraud::CheckRecord* check_record) {
  delete check_record_;
  check_record_ = check_record;
  if (check_record) {
    set_has_check_record();
  } else {
    clear_has_check_record();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.LogRecord.check_record)
}

// optional .ru.mail.go.anti_fraud.UpdateRecord update_record = 5;
bool LogRecord::has_update_record() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LogRecord::set_has_update_record() {
  _has_bits_[0] |= 0x00000008u;
}
void LogRecord::clear_has_update_record() {
  _has_bits_[0] &= ~0x00000008u;
}
void LogRecord::clear_update_record() {
  if (update_record_ != NULL) update_record_->::ru::mail::go::anti_fraud::UpdateRecord::Clear();
  clear_has_update_record();
}
const ::ru::mail::go::anti_fraud::UpdateRecord& LogRecord::update_record() const {
  const ::ru::mail::go::anti_fraud::UpdateRecord* p = update_record_;
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.update_record)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::anti_fraud::UpdateRecord*>(
      &::ru::mail::go::anti_fraud::_UpdateRecord_default_instance_);
}
::ru::mail::go::anti_fraud::UpdateRecord* LogRecord::mutable_update_record() {
  set_has_update_record();
  if (update_record_ == NULL) {
    update_record_ = new ::ru::mail::go::anti_fraud::UpdateRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.LogRecord.update_record)
  return update_record_;
}
::ru::mail::go::anti_fraud::UpdateRecord* LogRecord::release_update_record() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.LogRecord.update_record)
  clear_has_update_record();
  ::ru::mail::go::anti_fraud::UpdateRecord* temp = update_record_;
  update_record_ = NULL;
  return temp;
}
void LogRecord::set_allocated_update_record(::ru::mail::go::anti_fraud::UpdateRecord* update_record) {
  delete update_record_;
  update_record_ = update_record;
  if (update_record) {
    set_has_update_record();
  } else {
    clear_has_update_record();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.LogRecord.update_record)
}

// required string body = 6;
bool LogRecord::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogRecord::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
void LogRecord::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogRecord::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& LogRecord::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.body)
  return body_.GetNoArena();
}
void LogRecord::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.LogRecord.body)
}
#if LANG_CXX11
void LogRecord::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.LogRecord.body)
}
#endif
void LogRecord::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.LogRecord.body)
}
void LogRecord::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.LogRecord.body)
}
::std::string* LogRecord::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.LogRecord.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRecord::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.LogRecord.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRecord::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.LogRecord.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kTransIdFieldNumber;
const int Record::kLogRecordFieldNumber;
const int Record::kDumpRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_antifraud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.anti_fraud.Record)
}
Record::Record(const Record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trans_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trans_id()) {
    trans_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
  }
  if (from.has_log_record()) {
    log_record_ = new ::ru::mail::go::anti_fraud::LogRecord(*from.log_record_);
  } else {
    log_record_ = NULL;
  }
  if (from.has_dump_record()) {
    dump_record_ = new ::ru::mail::go::anti_fraud::DumpRecord(*from.dump_record_);
  } else {
    dump_record_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.anti_fraud.Record)
}

void Record::SharedCtor() {
  _cached_size_ = 0;
  trans_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dump_record_) -
      reinterpret_cast<char*>(&log_record_)) + sizeof(dump_record_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:ru.mail.go.anti_fraud.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  trans_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_record_;
  if (this != internal_default_instance()) delete dump_record_;
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Record& Record::default_instance() {
  protobuf_antifraud_2eproto::InitDefaults();
  return *internal_default_instance();
}

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.anti_fraud.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!trans_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trans_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(log_record_ != NULL);
      log_record_->::ru::mail::go::anti_fraud::LogRecord::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dump_record_ != NULL);
      dump_record_->::ru::mail::go::anti_fraud::DumpRecord::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.anti_fraud.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string trans_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trans_id().data(), static_cast<int>(this->trans_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Record.trans_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.anti_fraud.LogRecord log_record = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.anti_fraud.DumpRecord dump_record = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dump_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.anti_fraud.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.anti_fraud.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.anti_fraud.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string trans_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Record.trans_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trans_id(), output);
  }

  // optional .ru.mail.go.anti_fraud.LogRecord log_record = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->log_record_, output);
  }

  // optional .ru.mail.go.anti_fraud.DumpRecord dump_record = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dump_record_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.anti_fraud.Record)
}

::google::protobuf::uint8* Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.anti_fraud.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string trans_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Record.trans_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trans_id(), target);
  }

  // optional .ru.mail.go.anti_fraud.LogRecord log_record = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->log_record_, deterministic, target);
  }

  // optional .ru.mail.go.anti_fraud.DumpRecord dump_record = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->dump_record_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.anti_fraud.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.anti_fraud.Record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string trans_id = 1;
  if (has_trans_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trans_id());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .ru.mail.go.anti_fraud.LogRecord log_record = 2;
    if (has_log_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->log_record_);
    }

    // optional .ru.mail.go.anti_fraud.DumpRecord dump_record = 3;
    if (has_dump_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dump_record_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.anti_fraud.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const Record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.anti_fraud.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.anti_fraud.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.anti_fraud.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_trans_id();
      trans_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_log_record()->::ru::mail::go::anti_fraud::LogRecord::MergeFrom(from.log_record());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dump_record()->::ru::mail::go::anti_fraud::DumpRecord::MergeFrom(from.dump_record());
    }
  }
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.anti_fraud.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.anti_fraud.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_log_record()) {
    if (!this->log_record_->IsInitialized()) return false;
  }
  if (has_dump_record()) {
    if (!this->dump_record_->IsInitialized()) return false;
  }
  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  using std::swap;
  trans_id_.Swap(&other->trans_id_);
  swap(log_record_, other->log_record_);
  swap(dump_record_, other->dump_record_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record

// required string trans_id = 1;
bool Record::has_trans_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Record::set_has_trans_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Record::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Record::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trans_id();
}
const ::std::string& Record::trans_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Record.trans_id)
  return trans_id_.GetNoArena();
}
void Record::set_trans_id(const ::std::string& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Record.trans_id)
}
#if LANG_CXX11
void Record::set_trans_id(::std::string&& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Record.trans_id)
}
#endif
void Record::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Record.trans_id)
}
void Record::set_trans_id(const char* value, size_t size) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Record.trans_id)
}
::std::string* Record::mutable_trans_id() {
  set_has_trans_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Record.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Record::release_trans_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Record.trans_id)
  clear_has_trans_id();
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Record::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != NULL) {
    set_has_trans_id();
  } else {
    clear_has_trans_id();
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Record.trans_id)
}

// optional .ru.mail.go.anti_fraud.LogRecord log_record = 2;
bool Record::has_log_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Record::set_has_log_record() {
  _has_bits_[0] |= 0x00000002u;
}
void Record::clear_has_log_record() {
  _has_bits_[0] &= ~0x00000002u;
}
void Record::clear_log_record() {
  if (log_record_ != NULL) log_record_->::ru::mail::go::anti_fraud::LogRecord::Clear();
  clear_has_log_record();
}
const ::ru::mail::go::anti_fraud::LogRecord& Record::log_record() const {
  const ::ru::mail::go::anti_fraud::LogRecord* p = log_record_;
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Record.log_record)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::anti_fraud::LogRecord*>(
      &::ru::mail::go::anti_fraud::_LogRecord_default_instance_);
}
::ru::mail::go::anti_fraud::LogRecord* Record::mutable_log_record() {
  set_has_log_record();
  if (log_record_ == NULL) {
    log_record_ = new ::ru::mail::go::anti_fraud::LogRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Record.log_record)
  return log_record_;
}
::ru::mail::go::anti_fraud::LogRecord* Record::release_log_record() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Record.log_record)
  clear_has_log_record();
  ::ru::mail::go::anti_fraud::LogRecord* temp = log_record_;
  log_record_ = NULL;
  return temp;
}
void Record::set_allocated_log_record(::ru::mail::go::anti_fraud::LogRecord* log_record) {
  delete log_record_;
  log_record_ = log_record;
  if (log_record) {
    set_has_log_record();
  } else {
    clear_has_log_record();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Record.log_record)
}

// optional .ru.mail.go.anti_fraud.DumpRecord dump_record = 3;
bool Record::has_dump_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Record::set_has_dump_record() {
  _has_bits_[0] |= 0x00000004u;
}
void Record::clear_has_dump_record() {
  _has_bits_[0] &= ~0x00000004u;
}
void Record::clear_dump_record() {
  if (dump_record_ != NULL) dump_record_->::ru::mail::go::anti_fraud::DumpRecord::Clear();
  clear_has_dump_record();
}
const ::ru::mail::go::anti_fraud::DumpRecord& Record::dump_record() const {
  const ::ru::mail::go::anti_fraud::DumpRecord* p = dump_record_;
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Record.dump_record)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::anti_fraud::DumpRecord*>(
      &::ru::mail::go::anti_fraud::_DumpRecord_default_instance_);
}
::ru::mail::go::anti_fraud::DumpRecord* Record::mutable_dump_record() {
  set_has_dump_record();
  if (dump_record_ == NULL) {
    dump_record_ = new ::ru::mail::go::anti_fraud::DumpRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Record.dump_record)
  return dump_record_;
}
::ru::mail::go::anti_fraud::DumpRecord* Record::release_dump_record() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Record.dump_record)
  clear_has_dump_record();
  ::ru::mail::go::anti_fraud::DumpRecord* temp = dump_record_;
  dump_record_ = NULL;
  return temp;
}
void Record::set_allocated_dump_record(::ru::mail::go::anti_fraud::DumpRecord* dump_record) {
  delete dump_record_;
  dump_record_ = dump_record;
  if (dump_record) {
    set_has_dump_record();
  } else {
    clear_has_dump_record();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Record.dump_record)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kTransIdFieldNumber;
const int Transaction::kCardNumberFieldNumber;
const int Transaction::kCardIdFieldNumber;
const int Transaction::kAuthCodeFieldNumber;
const int Transaction::kTxnStatusFieldNumber;
const int Transaction::kUserIdFieldNumber;
const int Transaction::kClientIdFieldNumber;
const int Transaction::kAmountFieldNumber;
const int Transaction::kTsFieldNumber;
const int Transaction::kIpFieldNumber;
const int Transaction::kIpCountryFieldNumber;
const int Transaction::kCardCountryFieldNumber;
const int Transaction::kNickFieldNumber;
const int Transaction::kLightIdFieldNumber;
const int Transaction::kVidFieldNumber;
const int Transaction::kDmrUidFieldNumber;
const int Transaction::kCurrencyFieldNumber;
const int Transaction::kAfBpcFieldNumber;
const int Transaction::kAfMailFieldNumber;
const int Transaction::kI3DsFieldNumber;
const int Transaction::kBankNameFieldNumber;
const int Transaction::kStatusFieldNumber;
const int Transaction::kBeneficiaryIdFieldNumber;
const int Transaction::kExpDateFieldNumber;
const int Transaction::kHolderFieldNumber;
const int Transaction::kAfCodeFieldNumber;
const int Transaction::kCheckBodyFieldNumber;
const int Transaction::kUpdateBodyFieldNumber;
const int Transaction::kDumpBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_antifraud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.anti_fraud.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trans_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trans_id()) {
    trans_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
  }
  card_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_number()) {
    card_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_number_);
  }
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_id()) {
    card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
  }
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_code()) {
    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  txn_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_txn_status()) {
    txn_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_status_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_id()) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ip_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip_country()) {
    ip_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_);
  }
  card_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_card_country()) {
    card_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_country_);
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_light_id()) {
    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vid()) {
    vid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_);
  }
  dmr_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dmr_uid()) {
    dmr_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dmr_uid_);
  }
  af_bpc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_af_bpc()) {
    af_bpc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_bpc_);
  }
  af_mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_af_mail()) {
    af_mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_mail_);
  }
  bank_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bank_name()) {
    bank_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_name_);
  }
  beneficiary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_beneficiary_id()) {
    beneficiary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.beneficiary_id_);
  }
  exp_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exp_date()) {
    exp_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exp_date_);
  }
  holder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_holder()) {
    holder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.holder_);
  }
  af_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_af_code()) {
    af_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_code_);
  }
  check_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_check_body()) {
    check_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.check_body_);
  }
  update_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_body()) {
    update_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_body_);
  }
  dump_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dump_body()) {
    dump_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_body_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.anti_fraud.Transaction)
}

void Transaction::SharedCtor() {
  _cached_size_ = 0;
  trans_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dmr_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_bpc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beneficiary_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  holder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  check_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(status_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:ru.mail.go.anti_fraud.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  trans_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  light_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dmr_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_bpc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_mail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beneficiary_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  holder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  af_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  check_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transaction& Transaction::default_instance() {
  protobuf_antifraud_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.anti_fraud.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!trans_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*trans_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!card_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_number_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!card_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!auth_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*auth_code_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!txn_status_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*txn_status_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!user_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!client_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*client_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!ip_country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ip_country_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!card_country_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*card_country_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!nick_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nick_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(!light_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*light_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(!vid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(!dmr_uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dmr_uid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(!af_bpc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*af_bpc_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(!af_mail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*af_mail_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(!bank_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bank_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(!beneficiary_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*beneficiary_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(!exp_date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*exp_date_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(!holder_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*holder_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(!af_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*af_code_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(!check_body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*check_body_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(!update_body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*update_body_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(!dump_body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dump_body_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 520093696u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.anti_fraud.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string trans_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trans_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trans_id().data(), static_cast<int>(this->trans_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.trans_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string card_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_number().data(), static_cast<int>(this->card_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.card_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string card_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), static_cast<int>(this->card_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.card_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string auth_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_code().data(), static_cast<int>(this->auth_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.auth_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string txn_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txn_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->txn_status().data(), static_cast<int>(this->txn_status().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.txn_status");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string user_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.user_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string client_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.client_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 amount = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ts = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string ip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip_country = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_country().data(), static_cast<int>(this->ip_country().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.ip_country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string card_country = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_country().data(), static_cast<int>(this->card_country().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.card_country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nick = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), static_cast<int>(this->nick().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string light_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_light_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->light_id().data(), static_cast<int>(this->light_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.light_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vid().data(), static_cast<int>(this->vid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.vid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dmr_uid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dmr_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dmr_uid().data(), static_cast<int>(this->dmr_uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.dmr_uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 currency = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_currency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string af_bpc = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_af_bpc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->af_bpc().data(), static_cast<int>(this->af_bpc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.af_bpc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string af_mail = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_af_mail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->af_mail().data(), static_cast<int>(this->af_mail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.af_mail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 i3ds = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_i3ds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &i3ds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bank_name = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bank_name().data(), static_cast<int>(this->bank_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.bank_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string beneficiary_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beneficiary_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->beneficiary_id().data(), static_cast<int>(this->beneficiary_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.beneficiary_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exp_date = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exp_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exp_date().data(), static_cast<int>(this->exp_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.exp_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string holder = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_holder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->holder().data(), static_cast<int>(this->holder().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.holder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string af_code = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_af_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->af_code().data(), static_cast<int>(this->af_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.af_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string check_body = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_check_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->check_body().data(), static_cast<int>(this->check_body().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.check_body");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string update_body = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->update_body().data(), static_cast<int>(this->update_body().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.update_body");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dump_body = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dump_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dump_body().data(), static_cast<int>(this->dump_body().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.anti_fraud.Transaction.dump_body");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.anti_fraud.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.anti_fraud.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.anti_fraud.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string trans_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.trans_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trans_id(), output);
  }

  // required string card_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_number().data(), static_cast<int>(this->card_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.card_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->card_number(), output);
  }

  // required string card_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), static_cast<int>(this->card_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->card_id(), output);
  }

  // optional string auth_code = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.auth_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->auth_code(), output);
  }

  // required string txn_status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txn_status().data(), static_cast<int>(this->txn_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.txn_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->txn_status(), output);
  }

  // required string user_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_id(), output);
  }

  // required string client_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->client_id(), output);
  }

  // required uint64 amount = 8;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->amount(), output);
  }

  // required uint64 ts = 9;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ts(), output);
  }

  // required string ip = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ip(), output);
  }

  // optional string ip_country = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country().data(), static_cast<int>(this->ip_country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.ip_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->ip_country(), output);
  }

  // optional string card_country = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_country().data(), static_cast<int>(this->card_country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.card_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->card_country(), output);
  }

  // optional string nick = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->nick(), output);
  }

  // optional string light_id = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.light_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->light_id(), output);
  }

  // optional string vid = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.vid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->vid(), output);
  }

  // optional string dmr_uid = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dmr_uid().data(), static_cast<int>(this->dmr_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.dmr_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->dmr_uid(), output);
  }

  // required uint32 currency = 17;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->currency(), output);
  }

  // optional string af_bpc = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_bpc().data(), static_cast<int>(this->af_bpc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.af_bpc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->af_bpc(), output);
  }

  // optional string af_mail = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_mail().data(), static_cast<int>(this->af_mail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.af_mail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->af_mail(), output);
  }

  // optional uint32 i3ds = 20;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->i3ds(), output);
  }

  // optional string bank_name = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bank_name().data(), static_cast<int>(this->bank_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.bank_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->bank_name(), output);
  }

  // optional uint32 status = 22;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->status(), output);
  }

  // optional string beneficiary_id = 23;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->beneficiary_id().data(), static_cast<int>(this->beneficiary_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.beneficiary_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->beneficiary_id(), output);
  }

  // optional string exp_date = 24;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exp_date().data(), static_cast<int>(this->exp_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.exp_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->exp_date(), output);
  }

  // optional string holder = 25;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->holder().data(), static_cast<int>(this->holder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.holder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->holder(), output);
  }

  // optional string af_code = 26;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_code().data(), static_cast<int>(this->af_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.af_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->af_code(), output);
  }

  // optional string check_body = 27;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->check_body().data(), static_cast<int>(this->check_body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.check_body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->check_body(), output);
  }

  // optional string update_body = 28;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->update_body().data(), static_cast<int>(this->update_body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.update_body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->update_body(), output);
  }

  // optional string dump_body = 29;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dump_body().data(), static_cast<int>(this->dump_body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.dump_body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->dump_body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.anti_fraud.Transaction)
}

::google::protobuf::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.anti_fraud.Transaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string trans_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trans_id().data(), static_cast<int>(this->trans_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.trans_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trans_id(), target);
  }

  // required string card_number = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_number().data(), static_cast<int>(this->card_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.card_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->card_number(), target);
  }

  // required string card_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), static_cast<int>(this->card_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->card_id(), target);
  }

  // optional string auth_code = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.auth_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->auth_code(), target);
  }

  // required string txn_status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->txn_status().data(), static_cast<int>(this->txn_status().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.txn_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->txn_status(), target);
  }

  // required string user_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_id(), target);
  }

  // required string client_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->client_id(), target);
  }

  // required uint64 amount = 8;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->amount(), target);
  }

  // required uint64 ts = 9;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ts(), target);
  }

  // required string ip = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ip(), target);
  }

  // optional string ip_country = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_country().data(), static_cast<int>(this->ip_country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.ip_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ip_country(), target);
  }

  // optional string card_country = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_country().data(), static_cast<int>(this->card_country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.card_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->card_country(), target);
  }

  // optional string nick = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->nick(), target);
  }

  // optional string light_id = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.light_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->light_id(), target);
  }

  // optional string vid = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.vid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->vid(), target);
  }

  // optional string dmr_uid = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dmr_uid().data(), static_cast<int>(this->dmr_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.dmr_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->dmr_uid(), target);
  }

  // required uint32 currency = 17;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->currency(), target);
  }

  // optional string af_bpc = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_bpc().data(), static_cast<int>(this->af_bpc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.af_bpc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->af_bpc(), target);
  }

  // optional string af_mail = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_mail().data(), static_cast<int>(this->af_mail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.af_mail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->af_mail(), target);
  }

  // optional uint32 i3ds = 20;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->i3ds(), target);
  }

  // optional string bank_name = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bank_name().data(), static_cast<int>(this->bank_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.bank_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->bank_name(), target);
  }

  // optional uint32 status = 22;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->status(), target);
  }

  // optional string beneficiary_id = 23;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->beneficiary_id().data(), static_cast<int>(this->beneficiary_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.beneficiary_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->beneficiary_id(), target);
  }

  // optional string exp_date = 24;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exp_date().data(), static_cast<int>(this->exp_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.exp_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->exp_date(), target);
  }

  // optional string holder = 25;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->holder().data(), static_cast<int>(this->holder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.holder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->holder(), target);
  }

  // optional string af_code = 26;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->af_code().data(), static_cast<int>(this->af_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.af_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->af_code(), target);
  }

  // optional string check_body = 27;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->check_body().data(), static_cast<int>(this->check_body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.check_body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->check_body(), target);
  }

  // optional string update_body = 28;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->update_body().data(), static_cast<int>(this->update_body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.update_body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->update_body(), target);
  }

  // optional string dump_body = 29;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dump_body().data(), static_cast<int>(this->dump_body().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.anti_fraud.Transaction.dump_body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->dump_body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.anti_fraud.Transaction)
  return target;
}

size_t Transaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.anti_fraud.Transaction)
  size_t total_size = 0;

  if (has_trans_id()) {
    // required string trans_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trans_id());
  }

  if (has_card_number()) {
    // required string card_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_number());
  }

  if (has_card_id()) {
    // required string card_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());
  }

  if (has_txn_status()) {
    // required string txn_status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_status());
  }

  if (has_user_id()) {
    // required string user_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_client_id()) {
    // required string client_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  if (has_ip()) {
    // required string ip = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_amount()) {
    // required uint64 amount = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  if (has_ts()) {
    // required uint64 ts = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());
  }

  if (has_currency()) {
    // required uint32 currency = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currency());
  }

  return total_size;
}
size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.anti_fraud.Transaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x070000f7) ^ 0x070000f7) == 0) {  // All required fields are present.
    // required string trans_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trans_id());

    // required string card_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_number());

    // required string card_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());

    // required string txn_status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->txn_status());

    // required string user_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string client_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());

    // required string ip = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required uint64 amount = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());

    // required uint64 ts = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ts());

    // required uint32 currency = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->currency());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string auth_code = 4;
  if (has_auth_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_code());
  }

  if (_has_bits_[8 / 32] & 65280u) {
    // optional string ip_country = 11;
    if (has_ip_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_country());
    }

    // optional string card_country = 12;
    if (has_card_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_country());
    }

    // optional string nick = 13;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional string light_id = 14;
    if (has_light_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->light_id());
    }

    // optional string vid = 15;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid());
    }

    // optional string dmr_uid = 16;
    if (has_dmr_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dmr_uid());
    }

    // optional string af_bpc = 18;
    if (has_af_bpc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->af_bpc());
    }

    // optional string af_mail = 19;
    if (has_af_mail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->af_mail());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional string bank_name = 21;
    if (has_bank_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_name());
    }

    // optional string beneficiary_id = 23;
    if (has_beneficiary_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beneficiary_id());
    }

    // optional string exp_date = 24;
    if (has_exp_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exp_date());
    }

    // optional string holder = 25;
    if (has_holder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->holder());
    }

    // optional string af_code = 26;
    if (has_af_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->af_code());
    }

    // optional string check_body = 27;
    if (has_check_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->check_body());
    }

    // optional string update_body = 28;
    if (has_update_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_body());
    }

    // optional string dump_body = 29;
    if (has_dump_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dump_body());
    }

  }
  if (_has_bits_[24 / 32] & 402653184u) {
    // optional uint32 i3ds = 20;
    if (has_i3ds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->i3ds());
    }

    // optional uint32 status = 22;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.anti_fraud.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.anti_fraud.Transaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.anti_fraud.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.anti_fraud.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_trans_id();
      trans_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trans_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_card_number();
      card_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_number_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_card_id();
      card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_auth_code();
      auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_txn_status();
      txn_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txn_status_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_client_id();
      client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_ip_country();
      ip_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_country_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_card_country();
      card_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_country_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_nick();
      nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_light_id();
      light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_vid();
      vid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_dmr_uid();
      dmr_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dmr_uid_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_af_bpc();
      af_bpc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_bpc_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_af_mail();
      af_mail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_mail_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      set_has_bank_name();
      bank_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_name_);
    }
    if (cached_has_bits & 0x00020000u) {
      set_has_beneficiary_id();
      beneficiary_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.beneficiary_id_);
    }
    if (cached_has_bits & 0x00040000u) {
      set_has_exp_date();
      exp_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exp_date_);
    }
    if (cached_has_bits & 0x00080000u) {
      set_has_holder();
      holder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.holder_);
    }
    if (cached_has_bits & 0x00100000u) {
      set_has_af_code();
      af_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.af_code_);
    }
    if (cached_has_bits & 0x00200000u) {
      set_has_check_body();
      check_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.check_body_);
    }
    if (cached_has_bits & 0x00400000u) {
      set_has_update_body();
      update_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_body_);
    }
    if (cached_has_bits & 0x00800000u) {
      set_has_dump_body();
      dump_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_body_);
    }
  }
  if (cached_has_bits & 520093696u) {
    if (cached_has_bits & 0x01000000u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x02000000u) {
      ts_ = from.ts_;
    }
    if (cached_has_bits & 0x04000000u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x08000000u) {
      i3ds_ = from.i3ds_;
    }
    if (cached_has_bits & 0x10000000u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.anti_fraud.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.anti_fraud.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x070000f7) != 0x070000f7) return false;
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  trans_id_.Swap(&other->trans_id_);
  card_number_.Swap(&other->card_number_);
  card_id_.Swap(&other->card_id_);
  auth_code_.Swap(&other->auth_code_);
  txn_status_.Swap(&other->txn_status_);
  user_id_.Swap(&other->user_id_);
  client_id_.Swap(&other->client_id_);
  ip_.Swap(&other->ip_);
  ip_country_.Swap(&other->ip_country_);
  card_country_.Swap(&other->card_country_);
  nick_.Swap(&other->nick_);
  light_id_.Swap(&other->light_id_);
  vid_.Swap(&other->vid_);
  dmr_uid_.Swap(&other->dmr_uid_);
  af_bpc_.Swap(&other->af_bpc_);
  af_mail_.Swap(&other->af_mail_);
  bank_name_.Swap(&other->bank_name_);
  beneficiary_id_.Swap(&other->beneficiary_id_);
  exp_date_.Swap(&other->exp_date_);
  holder_.Swap(&other->holder_);
  af_code_.Swap(&other->af_code_);
  check_body_.Swap(&other->check_body_);
  update_body_.Swap(&other->update_body_);
  dump_body_.Swap(&other->dump_body_);
  swap(amount_, other->amount_);
  swap(ts_, other->ts_);
  swap(currency_, other->currency_);
  swap(i3ds_, other->i3ds_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_antifraud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_antifraud_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

// required string trans_id = 1;
bool Transaction::has_trans_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transaction::set_has_trans_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Transaction::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transaction::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trans_id();
}
const ::std::string& Transaction::trans_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.trans_id)
  return trans_id_.GetNoArena();
}
void Transaction::set_trans_id(const ::std::string& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.trans_id)
}
#if LANG_CXX11
void Transaction::set_trans_id(::std::string&& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.trans_id)
}
#endif
void Transaction::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.trans_id)
}
void Transaction::set_trans_id(const char* value, size_t size) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.trans_id)
}
::std::string* Transaction::mutable_trans_id() {
  set_has_trans_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_trans_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.trans_id)
  clear_has_trans_id();
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != NULL) {
    set_has_trans_id();
  } else {
    clear_has_trans_id();
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.trans_id)
}

// required string card_number = 2;
bool Transaction::has_card_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transaction::set_has_card_number() {
  _has_bits_[0] |= 0x00000002u;
}
void Transaction::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transaction::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_number();
}
const ::std::string& Transaction::card_number() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.card_number)
  return card_number_.GetNoArena();
}
void Transaction::set_card_number(const ::std::string& value) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.card_number)
}
#if LANG_CXX11
void Transaction::set_card_number(::std::string&& value) {
  set_has_card_number();
  card_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.card_number)
}
#endif
void Transaction::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.card_number)
}
void Transaction::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.card_number)
}
::std::string* Transaction::mutable_card_number() {
  set_has_card_number();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_card_number() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.card_number)
  clear_has_card_number();
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    set_has_card_number();
  } else {
    clear_has_card_number();
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.card_number)
}

// required string card_id = 3;
bool Transaction::has_card_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transaction::set_has_card_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Transaction::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transaction::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
const ::std::string& Transaction::card_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.card_id)
  return card_id_.GetNoArena();
}
void Transaction::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.card_id)
}
#if LANG_CXX11
void Transaction::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.card_id)
}
#endif
void Transaction::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.card_id)
}
void Transaction::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.card_id)
}
::std::string* Transaction::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_card_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.card_id)
}

// optional string auth_code = 4;
bool Transaction::has_auth_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transaction::set_has_auth_code() {
  _has_bits_[0] |= 0x00000008u;
}
void Transaction::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transaction::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_code();
}
const ::std::string& Transaction::auth_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.auth_code)
  return auth_code_.GetNoArena();
}
void Transaction::set_auth_code(const ::std::string& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.auth_code)
}
#if LANG_CXX11
void Transaction::set_auth_code(::std::string&& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.auth_code)
}
#endif
void Transaction::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.auth_code)
}
void Transaction::set_auth_code(const char* value, size_t size) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.auth_code)
}
::std::string* Transaction::mutable_auth_code() {
  set_has_auth_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_auth_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.auth_code)
  clear_has_auth_code();
  return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != NULL) {
    set_has_auth_code();
  } else {
    clear_has_auth_code();
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.auth_code)
}

// required string txn_status = 5;
bool Transaction::has_txn_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transaction::set_has_txn_status() {
  _has_bits_[0] |= 0x00000010u;
}
void Transaction::clear_has_txn_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transaction::clear_txn_status() {
  txn_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txn_status();
}
const ::std::string& Transaction::txn_status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.txn_status)
  return txn_status_.GetNoArena();
}
void Transaction::set_txn_status(const ::std::string& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.txn_status)
}
#if LANG_CXX11
void Transaction::set_txn_status(::std::string&& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.txn_status)
}
#endif
void Transaction::set_txn_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.txn_status)
}
void Transaction::set_txn_status(const char* value, size_t size) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.txn_status)
}
::std::string* Transaction::mutable_txn_status() {
  set_has_txn_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.txn_status)
  return txn_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_txn_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.txn_status)
  clear_has_txn_status();
  return txn_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_txn_status(::std::string* txn_status) {
  if (txn_status != NULL) {
    set_has_txn_status();
  } else {
    clear_has_txn_status();
  }
  txn_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.txn_status)
}

// required string user_id = 6;
bool Transaction::has_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Transaction::set_has_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Transaction::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Transaction::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& Transaction::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.user_id)
  return user_id_.GetNoArena();
}
void Transaction::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.user_id)
}
#if LANG_CXX11
void Transaction::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.user_id)
}
#endif
void Transaction::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.user_id)
}
void Transaction::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.user_id)
}
::std::string* Transaction::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_user_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.user_id)
}

// required string client_id = 7;
bool Transaction::has_client_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Transaction::set_has_client_id() {
  _has_bits_[0] |= 0x00000040u;
}
void Transaction::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void Transaction::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
const ::std::string& Transaction::client_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.client_id)
  return client_id_.GetNoArena();
}
void Transaction::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.client_id)
}
#if LANG_CXX11
void Transaction::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.client_id)
}
#endif
void Transaction::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.client_id)
}
void Transaction::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.client_id)
}
::std::string* Transaction::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_client_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.client_id)
}

// required uint64 amount = 8;
bool Transaction::has_amount() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Transaction::set_has_amount() {
  _has_bits_[0] |= 0x01000000u;
}
void Transaction::clear_has_amount() {
  _has_bits_[0] &= ~0x01000000u;
}
void Transaction::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
::google::protobuf::uint64 Transaction::amount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.amount)
  return amount_;
}
void Transaction::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.amount)
}

// required uint64 ts = 9;
bool Transaction::has_ts() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Transaction::set_has_ts() {
  _has_bits_[0] |= 0x02000000u;
}
void Transaction::clear_has_ts() {
  _has_bits_[0] &= ~0x02000000u;
}
void Transaction::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
::google::protobuf::uint64 Transaction::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.ts)
  return ts_;
}
void Transaction::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.ts)
}

// required string ip = 10;
bool Transaction::has_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Transaction::set_has_ip() {
  _has_bits_[0] |= 0x00000080u;
}
void Transaction::clear_has_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
void Transaction::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& Transaction::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.ip)
  return ip_.GetNoArena();
}
void Transaction::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.ip)
}
#if LANG_CXX11
void Transaction::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.ip)
}
#endif
void Transaction::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.ip)
}
void Transaction::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.ip)
}
::std::string* Transaction::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.ip)
}

// optional string ip_country = 11;
bool Transaction::has_ip_country() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Transaction::set_has_ip_country() {
  _has_bits_[0] |= 0x00000100u;
}
void Transaction::clear_has_ip_country() {
  _has_bits_[0] &= ~0x00000100u;
}
void Transaction::clear_ip_country() {
  ip_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_country();
}
const ::std::string& Transaction::ip_country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.ip_country)
  return ip_country_.GetNoArena();
}
void Transaction::set_ip_country(const ::std::string& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.ip_country)
}
#if LANG_CXX11
void Transaction::set_ip_country(::std::string&& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.ip_country)
}
#endif
void Transaction::set_ip_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.ip_country)
}
void Transaction::set_ip_country(const char* value, size_t size) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.ip_country)
}
::std::string* Transaction::mutable_ip_country() {
  set_has_ip_country();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.ip_country)
  return ip_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_ip_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.ip_country)
  clear_has_ip_country();
  return ip_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_ip_country(::std::string* ip_country) {
  if (ip_country != NULL) {
    set_has_ip_country();
  } else {
    clear_has_ip_country();
  }
  ip_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_country);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.ip_country)
}

// optional string card_country = 12;
bool Transaction::has_card_country() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Transaction::set_has_card_country() {
  _has_bits_[0] |= 0x00000200u;
}
void Transaction::clear_has_card_country() {
  _has_bits_[0] &= ~0x00000200u;
}
void Transaction::clear_card_country() {
  card_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_country();
}
const ::std::string& Transaction::card_country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.card_country)
  return card_country_.GetNoArena();
}
void Transaction::set_card_country(const ::std::string& value) {
  set_has_card_country();
  card_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.card_country)
}
#if LANG_CXX11
void Transaction::set_card_country(::std::string&& value) {
  set_has_card_country();
  card_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.card_country)
}
#endif
void Transaction::set_card_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_country();
  card_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.card_country)
}
void Transaction::set_card_country(const char* value, size_t size) {
  set_has_card_country();
  card_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.card_country)
}
::std::string* Transaction::mutable_card_country() {
  set_has_card_country();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.card_country)
  return card_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_card_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.card_country)
  clear_has_card_country();
  return card_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_card_country(::std::string* card_country) {
  if (card_country != NULL) {
    set_has_card_country();
  } else {
    clear_has_card_country();
  }
  card_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_country);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.card_country)
}

// optional string nick = 13;
bool Transaction::has_nick() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Transaction::set_has_nick() {
  _has_bits_[0] |= 0x00000400u;
}
void Transaction::clear_has_nick() {
  _has_bits_[0] &= ~0x00000400u;
}
void Transaction::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick();
}
const ::std::string& Transaction::nick() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.nick)
  return nick_.GetNoArena();
}
void Transaction::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.nick)
}
#if LANG_CXX11
void Transaction::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.nick)
}
#endif
void Transaction::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.nick)
}
void Transaction::set_nick(const char* value, size_t size) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.nick)
}
::std::string* Transaction::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_nick() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.nick)
  clear_has_nick();
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.nick)
}

// optional string light_id = 14;
bool Transaction::has_light_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Transaction::set_has_light_id() {
  _has_bits_[0] |= 0x00000800u;
}
void Transaction::clear_has_light_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void Transaction::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_light_id();
}
const ::std::string& Transaction::light_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.light_id)
  return light_id_.GetNoArena();
}
void Transaction::set_light_id(const ::std::string& value) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.light_id)
}
#if LANG_CXX11
void Transaction::set_light_id(::std::string&& value) {
  set_has_light_id();
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.light_id)
}
#endif
void Transaction::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.light_id)
}
void Transaction::set_light_id(const char* value, size_t size) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.light_id)
}
::std::string* Transaction::mutable_light_id() {
  set_has_light_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_light_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.light_id)
  clear_has_light_id();
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    set_has_light_id();
  } else {
    clear_has_light_id();
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.light_id)
}

// optional string vid = 15;
bool Transaction::has_vid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Transaction::set_has_vid() {
  _has_bits_[0] |= 0x00001000u;
}
void Transaction::clear_has_vid() {
  _has_bits_[0] &= ~0x00001000u;
}
void Transaction::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
const ::std::string& Transaction::vid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.vid)
  return vid_.GetNoArena();
}
void Transaction::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.vid)
}
#if LANG_CXX11
void Transaction::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.vid)
}
#endif
void Transaction::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.vid)
}
void Transaction::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.vid)
}
::std::string* Transaction::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_vid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.vid)
}

// optional string dmr_uid = 16;
bool Transaction::has_dmr_uid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Transaction::set_has_dmr_uid() {
  _has_bits_[0] |= 0x00002000u;
}
void Transaction::clear_has_dmr_uid() {
  _has_bits_[0] &= ~0x00002000u;
}
void Transaction::clear_dmr_uid() {
  dmr_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dmr_uid();
}
const ::std::string& Transaction::dmr_uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.dmr_uid)
  return dmr_uid_.GetNoArena();
}
void Transaction::set_dmr_uid(const ::std::string& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.dmr_uid)
}
#if LANG_CXX11
void Transaction::set_dmr_uid(::std::string&& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.dmr_uid)
}
#endif
void Transaction::set_dmr_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.dmr_uid)
}
void Transaction::set_dmr_uid(const char* value, size_t size) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.dmr_uid)
}
::std::string* Transaction::mutable_dmr_uid() {
  set_has_dmr_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.dmr_uid)
  return dmr_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_dmr_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.dmr_uid)
  clear_has_dmr_uid();
  return dmr_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_dmr_uid(::std::string* dmr_uid) {
  if (dmr_uid != NULL) {
    set_has_dmr_uid();
  } else {
    clear_has_dmr_uid();
  }
  dmr_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dmr_uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.dmr_uid)
}

// required uint32 currency = 17;
bool Transaction::has_currency() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Transaction::set_has_currency() {
  _has_bits_[0] |= 0x04000000u;
}
void Transaction::clear_has_currency() {
  _has_bits_[0] &= ~0x04000000u;
}
void Transaction::clear_currency() {
  currency_ = 0u;
  clear_has_currency();
}
::google::protobuf::uint32 Transaction::currency() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.currency)
  return currency_;
}
void Transaction::set_currency(::google::protobuf::uint32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.currency)
}

// optional string af_bpc = 18;
bool Transaction::has_af_bpc() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Transaction::set_has_af_bpc() {
  _has_bits_[0] |= 0x00004000u;
}
void Transaction::clear_has_af_bpc() {
  _has_bits_[0] &= ~0x00004000u;
}
void Transaction::clear_af_bpc() {
  af_bpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_bpc();
}
const ::std::string& Transaction::af_bpc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.af_bpc)
  return af_bpc_.GetNoArena();
}
void Transaction::set_af_bpc(const ::std::string& value) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.af_bpc)
}
#if LANG_CXX11
void Transaction::set_af_bpc(::std::string&& value) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.af_bpc)
}
#endif
void Transaction::set_af_bpc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.af_bpc)
}
void Transaction::set_af_bpc(const char* value, size_t size) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.af_bpc)
}
::std::string* Transaction::mutable_af_bpc() {
  set_has_af_bpc();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.af_bpc)
  return af_bpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_af_bpc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.af_bpc)
  clear_has_af_bpc();
  return af_bpc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_af_bpc(::std::string* af_bpc) {
  if (af_bpc != NULL) {
    set_has_af_bpc();
  } else {
    clear_has_af_bpc();
  }
  af_bpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_bpc);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.af_bpc)
}

// optional string af_mail = 19;
bool Transaction::has_af_mail() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Transaction::set_has_af_mail() {
  _has_bits_[0] |= 0x00008000u;
}
void Transaction::clear_has_af_mail() {
  _has_bits_[0] &= ~0x00008000u;
}
void Transaction::clear_af_mail() {
  af_mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_mail();
}
const ::std::string& Transaction::af_mail() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.af_mail)
  return af_mail_.GetNoArena();
}
void Transaction::set_af_mail(const ::std::string& value) {
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.af_mail)
}
#if LANG_CXX11
void Transaction::set_af_mail(::std::string&& value) {
  set_has_af_mail();
  af_mail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.af_mail)
}
#endif
void Transaction::set_af_mail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.af_mail)
}
void Transaction::set_af_mail(const char* value, size_t size) {
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.af_mail)
}
::std::string* Transaction::mutable_af_mail() {
  set_has_af_mail();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.af_mail)
  return af_mail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_af_mail() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.af_mail)
  clear_has_af_mail();
  return af_mail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_af_mail(::std::string* af_mail) {
  if (af_mail != NULL) {
    set_has_af_mail();
  } else {
    clear_has_af_mail();
  }
  af_mail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_mail);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.af_mail)
}

// optional uint32 i3ds = 20;
bool Transaction::has_i3ds() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Transaction::set_has_i3ds() {
  _has_bits_[0] |= 0x08000000u;
}
void Transaction::clear_has_i3ds() {
  _has_bits_[0] &= ~0x08000000u;
}
void Transaction::clear_i3ds() {
  i3ds_ = 0u;
  clear_has_i3ds();
}
::google::protobuf::uint32 Transaction::i3ds() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.i3ds)
  return i3ds_;
}
void Transaction::set_i3ds(::google::protobuf::uint32 value) {
  set_has_i3ds();
  i3ds_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.i3ds)
}

// optional string bank_name = 21;
bool Transaction::has_bank_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Transaction::set_has_bank_name() {
  _has_bits_[0] |= 0x00010000u;
}
void Transaction::clear_has_bank_name() {
  _has_bits_[0] &= ~0x00010000u;
}
void Transaction::clear_bank_name() {
  bank_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bank_name();
}
const ::std::string& Transaction::bank_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.bank_name)
  return bank_name_.GetNoArena();
}
void Transaction::set_bank_name(const ::std::string& value) {
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.bank_name)
}
#if LANG_CXX11
void Transaction::set_bank_name(::std::string&& value) {
  set_has_bank_name();
  bank_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.bank_name)
}
#endif
void Transaction::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.bank_name)
}
void Transaction::set_bank_name(const char* value, size_t size) {
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.bank_name)
}
::std::string* Transaction::mutable_bank_name() {
  set_has_bank_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.bank_name)
  return bank_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_bank_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.bank_name)
  clear_has_bank_name();
  return bank_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_bank_name(::std::string* bank_name) {
  if (bank_name != NULL) {
    set_has_bank_name();
  } else {
    clear_has_bank_name();
  }
  bank_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.bank_name)
}

// optional uint32 status = 22;
bool Transaction::has_status() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Transaction::set_has_status() {
  _has_bits_[0] |= 0x10000000u;
}
void Transaction::clear_has_status() {
  _has_bits_[0] &= ~0x10000000u;
}
void Transaction::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 Transaction::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.status)
  return status_;
}
void Transaction::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.status)
}

// optional string beneficiary_id = 23;
bool Transaction::has_beneficiary_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Transaction::set_has_beneficiary_id() {
  _has_bits_[0] |= 0x00020000u;
}
void Transaction::clear_has_beneficiary_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void Transaction::clear_beneficiary_id() {
  beneficiary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_beneficiary_id();
}
const ::std::string& Transaction::beneficiary_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
  return beneficiary_id_.GetNoArena();
}
void Transaction::set_beneficiary_id(const ::std::string& value) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
}
#if LANG_CXX11
void Transaction::set_beneficiary_id(::std::string&& value) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
}
#endif
void Transaction::set_beneficiary_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
}
void Transaction::set_beneficiary_id(const char* value, size_t size) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
}
::std::string* Transaction::mutable_beneficiary_id() {
  set_has_beneficiary_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
  return beneficiary_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_beneficiary_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
  clear_has_beneficiary_id();
  return beneficiary_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_beneficiary_id(::std::string* beneficiary_id) {
  if (beneficiary_id != NULL) {
    set_has_beneficiary_id();
  } else {
    clear_has_beneficiary_id();
  }
  beneficiary_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beneficiary_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
}

// optional string exp_date = 24;
bool Transaction::has_exp_date() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Transaction::set_has_exp_date() {
  _has_bits_[0] |= 0x00040000u;
}
void Transaction::clear_has_exp_date() {
  _has_bits_[0] &= ~0x00040000u;
}
void Transaction::clear_exp_date() {
  exp_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exp_date();
}
const ::std::string& Transaction::exp_date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.exp_date)
  return exp_date_.GetNoArena();
}
void Transaction::set_exp_date(const ::std::string& value) {
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.exp_date)
}
#if LANG_CXX11
void Transaction::set_exp_date(::std::string&& value) {
  set_has_exp_date();
  exp_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.exp_date)
}
#endif
void Transaction::set_exp_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.exp_date)
}
void Transaction::set_exp_date(const char* value, size_t size) {
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.exp_date)
}
::std::string* Transaction::mutable_exp_date() {
  set_has_exp_date();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.exp_date)
  return exp_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_exp_date() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.exp_date)
  clear_has_exp_date();
  return exp_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_exp_date(::std::string* exp_date) {
  if (exp_date != NULL) {
    set_has_exp_date();
  } else {
    clear_has_exp_date();
  }
  exp_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_date);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.exp_date)
}

// optional string holder = 25;
bool Transaction::has_holder() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Transaction::set_has_holder() {
  _has_bits_[0] |= 0x00080000u;
}
void Transaction::clear_has_holder() {
  _has_bits_[0] &= ~0x00080000u;
}
void Transaction::clear_holder() {
  holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holder();
}
const ::std::string& Transaction::holder() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.holder)
  return holder_.GetNoArena();
}
void Transaction::set_holder(const ::std::string& value) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.holder)
}
#if LANG_CXX11
void Transaction::set_holder(::std::string&& value) {
  set_has_holder();
  holder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.holder)
}
#endif
void Transaction::set_holder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.holder)
}
void Transaction::set_holder(const char* value, size_t size) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.holder)
}
::std::string* Transaction::mutable_holder() {
  set_has_holder();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.holder)
  return holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_holder() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.holder)
  clear_has_holder();
  return holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_holder(::std::string* holder) {
  if (holder != NULL) {
    set_has_holder();
  } else {
    clear_has_holder();
  }
  holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holder);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.holder)
}

// optional string af_code = 26;
bool Transaction::has_af_code() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Transaction::set_has_af_code() {
  _has_bits_[0] |= 0x00100000u;
}
void Transaction::clear_has_af_code() {
  _has_bits_[0] &= ~0x00100000u;
}
void Transaction::clear_af_code() {
  af_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_code();
}
const ::std::string& Transaction::af_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.af_code)
  return af_code_.GetNoArena();
}
void Transaction::set_af_code(const ::std::string& value) {
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.af_code)
}
#if LANG_CXX11
void Transaction::set_af_code(::std::string&& value) {
  set_has_af_code();
  af_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.af_code)
}
#endif
void Transaction::set_af_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.af_code)
}
void Transaction::set_af_code(const char* value, size_t size) {
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.af_code)
}
::std::string* Transaction::mutable_af_code() {
  set_has_af_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.af_code)
  return af_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_af_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.af_code)
  clear_has_af_code();
  return af_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_af_code(::std::string* af_code) {
  if (af_code != NULL) {
    set_has_af_code();
  } else {
    clear_has_af_code();
  }
  af_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.af_code)
}

// optional string check_body = 27;
bool Transaction::has_check_body() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Transaction::set_has_check_body() {
  _has_bits_[0] |= 0x00200000u;
}
void Transaction::clear_has_check_body() {
  _has_bits_[0] &= ~0x00200000u;
}
void Transaction::clear_check_body() {
  check_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_check_body();
}
const ::std::string& Transaction::check_body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.check_body)
  return check_body_.GetNoArena();
}
void Transaction::set_check_body(const ::std::string& value) {
  set_has_check_body();
  check_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.check_body)
}
#if LANG_CXX11
void Transaction::set_check_body(::std::string&& value) {
  set_has_check_body();
  check_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.check_body)
}
#endif
void Transaction::set_check_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_check_body();
  check_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.check_body)
}
void Transaction::set_check_body(const char* value, size_t size) {
  set_has_check_body();
  check_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.check_body)
}
::std::string* Transaction::mutable_check_body() {
  set_has_check_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.check_body)
  return check_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_check_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.check_body)
  clear_has_check_body();
  return check_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_check_body(::std::string* check_body) {
  if (check_body != NULL) {
    set_has_check_body();
  } else {
    clear_has_check_body();
  }
  check_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), check_body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.check_body)
}

// optional string update_body = 28;
bool Transaction::has_update_body() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Transaction::set_has_update_body() {
  _has_bits_[0] |= 0x00400000u;
}
void Transaction::clear_has_update_body() {
  _has_bits_[0] &= ~0x00400000u;
}
void Transaction::clear_update_body() {
  update_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_update_body();
}
const ::std::string& Transaction::update_body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.update_body)
  return update_body_.GetNoArena();
}
void Transaction::set_update_body(const ::std::string& value) {
  set_has_update_body();
  update_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.update_body)
}
#if LANG_CXX11
void Transaction::set_update_body(::std::string&& value) {
  set_has_update_body();
  update_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.update_body)
}
#endif
void Transaction::set_update_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_update_body();
  update_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.update_body)
}
void Transaction::set_update_body(const char* value, size_t size) {
  set_has_update_body();
  update_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.update_body)
}
::std::string* Transaction::mutable_update_body() {
  set_has_update_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.update_body)
  return update_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_update_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.update_body)
  clear_has_update_body();
  return update_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_update_body(::std::string* update_body) {
  if (update_body != NULL) {
    set_has_update_body();
  } else {
    clear_has_update_body();
  }
  update_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.update_body)
}

// optional string dump_body = 29;
bool Transaction::has_dump_body() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Transaction::set_has_dump_body() {
  _has_bits_[0] |= 0x00800000u;
}
void Transaction::clear_has_dump_body() {
  _has_bits_[0] &= ~0x00800000u;
}
void Transaction::clear_dump_body() {
  dump_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dump_body();
}
const ::std::string& Transaction::dump_body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.dump_body)
  return dump_body_.GetNoArena();
}
void Transaction::set_dump_body(const ::std::string& value) {
  set_has_dump_body();
  dump_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.dump_body)
}
#if LANG_CXX11
void Transaction::set_dump_body(::std::string&& value) {
  set_has_dump_body();
  dump_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.dump_body)
}
#endif
void Transaction::set_dump_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dump_body();
  dump_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.dump_body)
}
void Transaction::set_dump_body(const char* value, size_t size) {
  set_has_dump_body();
  dump_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.dump_body)
}
::std::string* Transaction::mutable_dump_body() {
  set_has_dump_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.dump_body)
  return dump_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_dump_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.dump_body)
  clear_has_dump_body();
  return dump_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_dump_body(::std::string* dump_body) {
  if (dump_body != NULL) {
    set_has_dump_body();
  } else {
    clear_has_dump_body();
  }
  dump_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.dump_body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace anti_fraud
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
