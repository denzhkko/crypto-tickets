// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: antifraud.proto

#ifndef PROTOBUF_antifraud_2eproto__INCLUDED
#define PROTOBUF_antifraud_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace anti_fraud {
class CheckRecord;
class CheckRecordDefaultTypeInternal;
extern CheckRecordDefaultTypeInternal _CheckRecord_default_instance_;
class DumpRecord;
class DumpRecordDefaultTypeInternal;
extern DumpRecordDefaultTypeInternal _DumpRecord_default_instance_;
class EmulatedFeatures;
class EmulatedFeaturesDefaultTypeInternal;
extern EmulatedFeaturesDefaultTypeInternal _EmulatedFeatures_default_instance_;
class EmulatedFeatures_EmulatedFeature;
class EmulatedFeatures_EmulatedFeatureDefaultTypeInternal;
extern EmulatedFeatures_EmulatedFeatureDefaultTypeInternal _EmulatedFeatures_EmulatedFeature_default_instance_;
class LogRecord;
class LogRecordDefaultTypeInternal;
extern LogRecordDefaultTypeInternal _LogRecord_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class UpdateRecord;
class UpdateRecordDefaultTypeInternal;
extern UpdateRecordDefaultTypeInternal _UpdateRecord_default_instance_;
}  // namespace anti_fraud
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace anti_fraud {

namespace protobuf_antifraud_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_antifraud_2eproto

enum LogRecord_RecordType {
  LogRecord_RecordType_CHECK = 0,
  LogRecord_RecordType_UPDATE = 1
};
bool LogRecord_RecordType_IsValid(int value);
const LogRecord_RecordType LogRecord_RecordType_RecordType_MIN = LogRecord_RecordType_CHECK;
const LogRecord_RecordType LogRecord_RecordType_RecordType_MAX = LogRecord_RecordType_UPDATE;
const int LogRecord_RecordType_RecordType_ARRAYSIZE = LogRecord_RecordType_RecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogRecord_RecordType_descriptor();
inline const ::std::string& LogRecord_RecordType_Name(LogRecord_RecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogRecord_RecordType_descriptor(), value);
}
inline bool LogRecord_RecordType_Parse(
    const ::std::string& name, LogRecord_RecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogRecord_RecordType>(
    LogRecord_RecordType_descriptor(), name, value);
}
// ===================================================================

class EmulatedFeatures_EmulatedFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature) */ {
 public:
  EmulatedFeatures_EmulatedFeature();
  virtual ~EmulatedFeatures_EmulatedFeature();

  EmulatedFeatures_EmulatedFeature(const EmulatedFeatures_EmulatedFeature& from);

  inline EmulatedFeatures_EmulatedFeature& operator=(const EmulatedFeatures_EmulatedFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmulatedFeatures_EmulatedFeature(EmulatedFeatures_EmulatedFeature&& from) noexcept
    : EmulatedFeatures_EmulatedFeature() {
    *this = ::std::move(from);
  }

  inline EmulatedFeatures_EmulatedFeature& operator=(EmulatedFeatures_EmulatedFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmulatedFeatures_EmulatedFeature& default_instance();

  static inline const EmulatedFeatures_EmulatedFeature* internal_default_instance() {
    return reinterpret_cast<const EmulatedFeatures_EmulatedFeature*>(
               &_EmulatedFeatures_EmulatedFeature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EmulatedFeatures_EmulatedFeature* other);
  friend void swap(EmulatedFeatures_EmulatedFeature& a, EmulatedFeatures_EmulatedFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmulatedFeatures_EmulatedFeature* New() const PROTOBUF_FINAL { return New(NULL); }

  EmulatedFeatures_EmulatedFeature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmulatedFeatures_EmulatedFeature& from);
  void MergeFrom(const EmulatedFeatures_EmulatedFeature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmulatedFeatures_EmulatedFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::uint32 key() const;
  void set_key(::google::protobuf::uint32 value);

  // optional uint32 val = 2;
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 2;
  ::google::protobuf::uint32 val() const;
  void set_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_val();
  void clear_has_val();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 key_;
  ::google::protobuf::uint32 val_;
  friend struct protobuf_antifraud_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EmulatedFeatures : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.anti_fraud.EmulatedFeatures) */ {
 public:
  EmulatedFeatures();
  virtual ~EmulatedFeatures();

  EmulatedFeatures(const EmulatedFeatures& from);

  inline EmulatedFeatures& operator=(const EmulatedFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmulatedFeatures(EmulatedFeatures&& from) noexcept
    : EmulatedFeatures() {
    *this = ::std::move(from);
  }

  inline EmulatedFeatures& operator=(EmulatedFeatures&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmulatedFeatures& default_instance();

  static inline const EmulatedFeatures* internal_default_instance() {
    return reinterpret_cast<const EmulatedFeatures*>(
               &_EmulatedFeatures_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EmulatedFeatures* other);
  friend void swap(EmulatedFeatures& a, EmulatedFeatures& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmulatedFeatures* New() const PROTOBUF_FINAL { return New(NULL); }

  EmulatedFeatures* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmulatedFeatures& from);
  void MergeFrom(const EmulatedFeatures& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmulatedFeatures* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EmulatedFeatures_EmulatedFeature EmulatedFeature;

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature features = 4;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 4;
  const ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature& features(int index) const;
  ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature* mutable_features(int index);
  ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature* add_features();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature >*
      mutable_features();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature >&
      features() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // required bool is_fraud = 2;
  bool has_is_fraud() const;
  void clear_is_fraud();
  static const int kIsFraudFieldNumber = 2;
  bool is_fraud() const;
  void set_is_fraud(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.anti_fraud.EmulatedFeatures)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_is_fraud();
  void clear_has_is_fraud();
  void set_has_status();
  void clear_has_status();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature > features_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  bool is_fraud_;
  friend struct protobuf_antifraud_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.anti_fraud.CheckRecord) */ {
 public:
  CheckRecord();
  virtual ~CheckRecord();

  CheckRecord(const CheckRecord& from);

  inline CheckRecord& operator=(const CheckRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckRecord(CheckRecord&& from) noexcept
    : CheckRecord() {
    *this = ::std::move(from);
  }

  inline CheckRecord& operator=(CheckRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckRecord& default_instance();

  static inline const CheckRecord* internal_default_instance() {
    return reinterpret_cast<const CheckRecord*>(
               &_CheckRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CheckRecord* other);
  friend void swap(CheckRecord& a, CheckRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckRecord& from);
  void MergeFrom(const CheckRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string merchant_id = 2;
  bool has_merchant_id() const;
  void clear_merchant_id();
  static const int kMerchantIdFieldNumber = 2;
  const ::std::string& merchant_id() const;
  void set_merchant_id(const ::std::string& value);
  #if LANG_CXX11
  void set_merchant_id(::std::string&& value);
  #endif
  void set_merchant_id(const char* value);
  void set_merchant_id(const char* value, size_t size);
  ::std::string* mutable_merchant_id();
  ::std::string* release_merchant_id();
  void set_allocated_merchant_id(::std::string* merchant_id);

  // required string client_id = 3;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // required string trans_id = 4;
  bool has_trans_id() const;
  void clear_trans_id();
  static const int kTransIdFieldNumber = 4;
  const ::std::string& trans_id() const;
  void set_trans_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trans_id(::std::string&& value);
  #endif
  void set_trans_id(const char* value);
  void set_trans_id(const char* value, size_t size);
  ::std::string* mutable_trans_id();
  ::std::string* release_trans_id();
  void set_allocated_trans_id(::std::string* trans_id);

  // required string ip = 9;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 9;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string ip_country = 10;
  bool has_ip_country() const;
  void clear_ip_country();
  static const int kIpCountryFieldNumber = 10;
  const ::std::string& ip_country() const;
  void set_ip_country(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_country(::std::string&& value);
  #endif
  void set_ip_country(const char* value);
  void set_ip_country(const char* value, size_t size);
  ::std::string* mutable_ip_country();
  ::std::string* release_ip_country();
  void set_allocated_ip_country(::std::string* ip_country);

  // optional string vid = 11;
  bool has_vid() const;
  void clear_vid();
  static const int kVidFieldNumber = 11;
  const ::std::string& vid() const;
  void set_vid(const ::std::string& value);
  #if LANG_CXX11
  void set_vid(::std::string&& value);
  #endif
  void set_vid(const char* value);
  void set_vid(const char* value, size_t size);
  ::std::string* mutable_vid();
  ::std::string* release_vid();
  void set_allocated_vid(::std::string* vid);

  // optional string order_id = 12;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 12;
  const ::std::string& order_id() const;
  void set_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_order_id(::std::string&& value);
  #endif
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  ::std::string* mutable_order_id();
  ::std::string* release_order_id();
  void set_allocated_order_id(::std::string* order_id);

  // optional string ip_region = 13;
  bool has_ip_region() const;
  void clear_ip_region();
  static const int kIpRegionFieldNumber = 13;
  const ::std::string& ip_region() const;
  void set_ip_region(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_region(::std::string&& value);
  #endif
  void set_ip_region(const char* value);
  void set_ip_region(const char* value, size_t size);
  ::std::string* mutable_ip_region();
  ::std::string* release_ip_region();
  void set_allocated_ip_region(::std::string* ip_region);

  // optional string dmr_uid = 14;
  bool has_dmr_uid() const;
  void clear_dmr_uid();
  static const int kDmrUidFieldNumber = 14;
  const ::std::string& dmr_uid() const;
  void set_dmr_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_dmr_uid(::std::string&& value);
  #endif
  void set_dmr_uid(const char* value);
  void set_dmr_uid(const char* value, size_t size);
  ::std::string* mutable_dmr_uid();
  ::std::string* release_dmr_uid();
  void set_allocated_dmr_uid(::std::string* dmr_uid);

  // required string card_id = 15;
  bool has_card_id() const;
  void clear_card_id();
  static const int kCardIdFieldNumber = 15;
  const ::std::string& card_id() const;
  void set_card_id(const ::std::string& value);
  #if LANG_CXX11
  void set_card_id(::std::string&& value);
  #endif
  void set_card_id(const char* value);
  void set_card_id(const char* value, size_t size);
  ::std::string* mutable_card_id();
  ::std::string* release_card_id();
  void set_allocated_card_id(::std::string* card_id);

  // required string card_number = 16;
  bool has_card_number() const;
  void clear_card_number();
  static const int kCardNumberFieldNumber = 16;
  const ::std::string& card_number() const;
  void set_card_number(const ::std::string& value);
  #if LANG_CXX11
  void set_card_number(::std::string&& value);
  #endif
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  ::std::string* mutable_card_number();
  ::std::string* release_card_number();
  void set_allocated_card_number(::std::string* card_number);

  // required string exp_date = 17;
  bool has_exp_date() const;
  void clear_exp_date();
  static const int kExpDateFieldNumber = 17;
  const ::std::string& exp_date() const;
  void set_exp_date(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_date(::std::string&& value);
  #endif
  void set_exp_date(const char* value);
  void set_exp_date(const char* value, size_t size);
  ::std::string* mutable_exp_date();
  ::std::string* release_exp_date();
  void set_allocated_exp_date(::std::string* exp_date);

  // required string holder = 18;
  bool has_holder() const;
  void clear_holder();
  static const int kHolderFieldNumber = 18;
  const ::std::string& holder() const;
  void set_holder(const ::std::string& value);
  #if LANG_CXX11
  void set_holder(::std::string&& value);
  #endif
  void set_holder(const char* value);
  void set_holder(const char* value, size_t size);
  ::std::string* mutable_holder();
  ::std::string* release_holder();
  void set_allocated_holder(::std::string* holder);

  // optional string country = 19;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 19;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string bank_name = 20;
  bool has_bank_name() const;
  void clear_bank_name();
  static const int kBankNameFieldNumber = 20;
  const ::std::string& bank_name() const;
  void set_bank_name(const ::std::string& value);
  #if LANG_CXX11
  void set_bank_name(::std::string&& value);
  #endif
  void set_bank_name(const char* value);
  void set_bank_name(const char* value, size_t size);
  ::std::string* mutable_bank_name();
  ::std::string* release_bank_name();
  void set_allocated_bank_name(::std::string* bank_name);

  // required string user_id = 21;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 21;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string beneficiary_id = 22;
  bool has_beneficiary_id() const;
  void clear_beneficiary_id();
  static const int kBeneficiaryIdFieldNumber = 22;
  const ::std::string& beneficiary_id() const;
  void set_beneficiary_id(const ::std::string& value);
  #if LANG_CXX11
  void set_beneficiary_id(::std::string&& value);
  #endif
  void set_beneficiary_id(const char* value);
  void set_beneficiary_id(const char* value, size_t size);
  ::std::string* mutable_beneficiary_id();
  ::std::string* release_beneficiary_id();
  void set_allocated_beneficiary_id(::std::string* beneficiary_id);

  // required uint64 record_ts = 1;
  bool has_record_ts() const;
  void clear_record_ts();
  static const int kRecordTsFieldNumber = 1;
  ::google::protobuf::uint64 record_ts() const;
  void set_record_ts(::google::protobuf::uint64 value);

  // required uint32 currency = 5;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 5;
  ::google::protobuf::uint32 currency() const;
  void set_currency(::google::protobuf::uint32 value);

  // optional uint32 deposit = 6;
  bool has_deposit() const;
  void clear_deposit();
  static const int kDepositFieldNumber = 6;
  ::google::protobuf::uint32 deposit() const;
  void set_deposit(::google::protobuf::uint32 value);

  // required uint64 ts = 7;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 7;
  ::google::protobuf::uint64 ts() const;
  void set_ts(::google::protobuf::uint64 value);

  // required uint64 amount = 8;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 8;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.anti_fraud.CheckRecord)
 private:
  void set_has_record_ts();
  void clear_has_record_ts();
  void set_has_merchant_id();
  void clear_has_merchant_id();
  void set_has_client_id();
  void clear_has_client_id();
  void set_has_trans_id();
  void clear_has_trans_id();
  void set_has_currency();
  void clear_has_currency();
  void set_has_deposit();
  void clear_has_deposit();
  void set_has_ts();
  void clear_has_ts();
  void set_has_amount();
  void clear_has_amount();
  void set_has_ip();
  void clear_has_ip();
  void set_has_ip_country();
  void clear_has_ip_country();
  void set_has_vid();
  void clear_has_vid();
  void set_has_order_id();
  void clear_has_order_id();
  void set_has_ip_region();
  void clear_has_ip_region();
  void set_has_dmr_uid();
  void clear_has_dmr_uid();
  void set_has_card_id();
  void clear_has_card_id();
  void set_has_card_number();
  void clear_has_card_number();
  void set_has_exp_date();
  void clear_has_exp_date();
  void set_has_holder();
  void clear_has_holder();
  void set_has_country();
  void clear_has_country();
  void set_has_bank_name();
  void clear_has_bank_name();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_beneficiary_id();
  void clear_has_beneficiary_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr merchant_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr trans_id_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr ip_country_;
  ::google::protobuf::internal::ArenaStringPtr vid_;
  ::google::protobuf::internal::ArenaStringPtr order_id_;
  ::google::protobuf::internal::ArenaStringPtr ip_region_;
  ::google::protobuf::internal::ArenaStringPtr dmr_uid_;
  ::google::protobuf::internal::ArenaStringPtr card_id_;
  ::google::protobuf::internal::ArenaStringPtr card_number_;
  ::google::protobuf::internal::ArenaStringPtr exp_date_;
  ::google::protobuf::internal::ArenaStringPtr holder_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr bank_name_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr beneficiary_id_;
  ::google::protobuf::uint64 record_ts_;
  ::google::protobuf::uint32 currency_;
  ::google::protobuf::uint32 deposit_;
  ::google::protobuf::uint64 ts_;
  ::google::protobuf::uint64 amount_;
  friend struct protobuf_antifraud_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.anti_fraud.UpdateRecord) */ {
 public:
  UpdateRecord();
  virtual ~UpdateRecord();

  UpdateRecord(const UpdateRecord& from);

  inline UpdateRecord& operator=(const UpdateRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateRecord(UpdateRecord&& from) noexcept
    : UpdateRecord() {
    *this = ::std::move(from);
  }

  inline UpdateRecord& operator=(UpdateRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRecord& default_instance();

  static inline const UpdateRecord* internal_default_instance() {
    return reinterpret_cast<const UpdateRecord*>(
               &_UpdateRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UpdateRecord* other);
  friend void swap(UpdateRecord& a, UpdateRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateRecord& from);
  void MergeFrom(const UpdateRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string merchant_id = 2;
  bool has_merchant_id() const;
  void clear_merchant_id();
  static const int kMerchantIdFieldNumber = 2;
  const ::std::string& merchant_id() const;
  void set_merchant_id(const ::std::string& value);
  #if LANG_CXX11
  void set_merchant_id(::std::string&& value);
  #endif
  void set_merchant_id(const char* value);
  void set_merchant_id(const char* value, size_t size);
  ::std::string* mutable_merchant_id();
  ::std::string* release_merchant_id();
  void set_allocated_merchant_id(::std::string* merchant_id);

  // required string client_id = 3;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // required string trans_id = 4;
  bool has_trans_id() const;
  void clear_trans_id();
  static const int kTransIdFieldNumber = 4;
  const ::std::string& trans_id() const;
  void set_trans_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trans_id(::std::string&& value);
  #endif
  void set_trans_id(const char* value);
  void set_trans_id(const char* value, size_t size);
  ::std::string* mutable_trans_id();
  ::std::string* release_trans_id();
  void set_allocated_trans_id(::std::string* trans_id);

  // optional string auth_code = 9;
  bool has_auth_code() const;
  void clear_auth_code();
  static const int kAuthCodeFieldNumber = 9;
  const ::std::string& auth_code() const;
  void set_auth_code(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_code(::std::string&& value);
  #endif
  void set_auth_code(const char* value);
  void set_auth_code(const char* value, size_t size);
  ::std::string* mutable_auth_code();
  ::std::string* release_auth_code();
  void set_allocated_auth_code(::std::string* auth_code);

  // optional string acquirer = 10;
  bool has_acquirer() const;
  void clear_acquirer();
  static const int kAcquirerFieldNumber = 10;
  const ::std::string& acquirer() const;
  void set_acquirer(const ::std::string& value);
  #if LANG_CXX11
  void set_acquirer(::std::string&& value);
  #endif
  void set_acquirer(const char* value);
  void set_acquirer(const char* value, size_t size);
  ::std::string* mutable_acquirer();
  ::std::string* release_acquirer();
  void set_allocated_acquirer(::std::string* acquirer);

  // optional string acquirer_code = 11;
  bool has_acquirer_code() const;
  void clear_acquirer_code();
  static const int kAcquirerCodeFieldNumber = 11;
  const ::std::string& acquirer_code() const;
  void set_acquirer_code(const ::std::string& value);
  #if LANG_CXX11
  void set_acquirer_code(::std::string&& value);
  #endif
  void set_acquirer_code(const char* value);
  void set_acquirer_code(const char* value, size_t size);
  ::std::string* mutable_acquirer_code();
  ::std::string* release_acquirer_code();
  void set_allocated_acquirer_code(::std::string* acquirer_code);

  // optional string txn_status = 13;
  bool has_txn_status() const;
  void clear_txn_status();
  static const int kTxnStatusFieldNumber = 13;
  const ::std::string& txn_status() const;
  void set_txn_status(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_status(::std::string&& value);
  #endif
  void set_txn_status(const char* value);
  void set_txn_status(const char* value, size_t size);
  ::std::string* mutable_txn_status();
  ::std::string* release_txn_status();
  void set_allocated_txn_status(::std::string* txn_status);

  // optional string af_level = 14;
  bool has_af_level() const;
  void clear_af_level();
  static const int kAfLevelFieldNumber = 14;
  const ::std::string& af_level() const;
  void set_af_level(const ::std::string& value);
  #if LANG_CXX11
  void set_af_level(::std::string&& value);
  #endif
  void set_af_level(const char* value);
  void set_af_level(const char* value, size_t size);
  ::std::string* mutable_af_level();
  ::std::string* release_af_level();
  void set_allocated_af_level(::std::string* af_level);

  // optional string af_code = 15;
  bool has_af_code() const;
  void clear_af_code();
  static const int kAfCodeFieldNumber = 15;
  const ::std::string& af_code() const;
  void set_af_code(const ::std::string& value);
  #if LANG_CXX11
  void set_af_code(::std::string&& value);
  #endif
  void set_af_code(const char* value);
  void set_af_code(const char* value, size_t size);
  ::std::string* mutable_af_code();
  ::std::string* release_af_code();
  void set_allocated_af_code(::std::string* af_code);

  // required uint64 record_ts = 1;
  bool has_record_ts() const;
  void clear_record_ts();
  static const int kRecordTsFieldNumber = 1;
  ::google::protobuf::uint64 record_ts() const;
  void set_record_ts(::google::protobuf::uint64 value);

  // required uint32 status = 5;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 cvv = 6;
  bool has_cvv() const;
  void clear_cvv();
  static const int kCvvFieldNumber = 6;
  ::google::protobuf::uint32 cvv() const;
  void set_cvv(::google::protobuf::uint32 value);

  // optional uint32 i3ds = 7;
  bool has_i3ds() const;
  void clear_i3ds();
  static const int kI3DsFieldNumber = 7;
  ::google::protobuf::uint32 i3ds() const;
  void set_i3ds(::google::protobuf::uint32 value);

  // optional uint32 is3ds = 8;
  bool has_is3ds() const;
  void clear_is3ds();
  static const int kIs3DsFieldNumber = 8;
  ::google::protobuf::uint32 is3ds() const;
  void set_is3ds(::google::protobuf::uint32 value);

  // optional uint32 eci = 12;
  bool has_eci() const;
  void clear_eci();
  static const int kEciFieldNumber = 12;
  ::google::protobuf::uint32 eci() const;
  void set_eci(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.anti_fraud.UpdateRecord)
 private:
  void set_has_record_ts();
  void clear_has_record_ts();
  void set_has_merchant_id();
  void clear_has_merchant_id();
  void set_has_client_id();
  void clear_has_client_id();
  void set_has_trans_id();
  void clear_has_trans_id();
  void set_has_status();
  void clear_has_status();
  void set_has_cvv();
  void clear_has_cvv();
  void set_has_i3ds();
  void clear_has_i3ds();
  void set_has_is3ds();
  void clear_has_is3ds();
  void set_has_auth_code();
  void clear_has_auth_code();
  void set_has_acquirer();
  void clear_has_acquirer();
  void set_has_acquirer_code();
  void clear_has_acquirer_code();
  void set_has_eci();
  void clear_has_eci();
  void set_has_txn_status();
  void clear_has_txn_status();
  void set_has_af_level();
  void clear_has_af_level();
  void set_has_af_code();
  void clear_has_af_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr merchant_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr trans_id_;
  ::google::protobuf::internal::ArenaStringPtr auth_code_;
  ::google::protobuf::internal::ArenaStringPtr acquirer_;
  ::google::protobuf::internal::ArenaStringPtr acquirer_code_;
  ::google::protobuf::internal::ArenaStringPtr txn_status_;
  ::google::protobuf::internal::ArenaStringPtr af_level_;
  ::google::protobuf::internal::ArenaStringPtr af_code_;
  ::google::protobuf::uint64 record_ts_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 cvv_;
  ::google::protobuf::uint32 i3ds_;
  ::google::protobuf::uint32 is3ds_;
  ::google::protobuf::uint32 eci_;
  friend struct protobuf_antifraud_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DumpRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.anti_fraud.DumpRecord) */ {
 public:
  DumpRecord();
  virtual ~DumpRecord();

  DumpRecord(const DumpRecord& from);

  inline DumpRecord& operator=(const DumpRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DumpRecord(DumpRecord&& from) noexcept
    : DumpRecord() {
    *this = ::std::move(from);
  }

  inline DumpRecord& operator=(DumpRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DumpRecord& default_instance();

  static inline const DumpRecord* internal_default_instance() {
    return reinterpret_cast<const DumpRecord*>(
               &_DumpRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DumpRecord* other);
  friend void swap(DumpRecord& a, DumpRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DumpRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  DumpRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DumpRecord& from);
  void MergeFrom(const DumpRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DumpRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string trans_id = 1;
  bool has_trans_id() const;
  void clear_trans_id();
  static const int kTransIdFieldNumber = 1;
  const ::std::string& trans_id() const;
  void set_trans_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trans_id(::std::string&& value);
  #endif
  void set_trans_id(const char* value);
  void set_trans_id(const char* value, size_t size);
  ::std::string* mutable_trans_id();
  ::std::string* release_trans_id();
  void set_allocated_trans_id(::std::string* trans_id);

  // required string internal_id = 2;
  bool has_internal_id() const;
  void clear_internal_id();
  static const int kInternalIdFieldNumber = 2;
  const ::std::string& internal_id() const;
  void set_internal_id(const ::std::string& value);
  #if LANG_CXX11
  void set_internal_id(::std::string&& value);
  #endif
  void set_internal_id(const char* value);
  void set_internal_id(const char* value, size_t size);
  ::std::string* mutable_internal_id();
  ::std::string* release_internal_id();
  void set_allocated_internal_id(::std::string* internal_id);

  // required string card_number = 3;
  bool has_card_number() const;
  void clear_card_number();
  static const int kCardNumberFieldNumber = 3;
  const ::std::string& card_number() const;
  void set_card_number(const ::std::string& value);
  #if LANG_CXX11
  void set_card_number(::std::string&& value);
  #endif
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  ::std::string* mutable_card_number();
  ::std::string* release_card_number();
  void set_allocated_card_number(::std::string* card_number);

  // required string card_id = 4;
  bool has_card_id() const;
  void clear_card_id();
  static const int kCardIdFieldNumber = 4;
  const ::std::string& card_id() const;
  void set_card_id(const ::std::string& value);
  #if LANG_CXX11
  void set_card_id(::std::string&& value);
  #endif
  void set_card_id(const char* value);
  void set_card_id(const char* value, size_t size);
  ::std::string* mutable_card_id();
  ::std::string* release_card_id();
  void set_allocated_card_id(::std::string* card_id);

  // required string auth_code = 5;
  bool has_auth_code() const;
  void clear_auth_code();
  static const int kAuthCodeFieldNumber = 5;
  const ::std::string& auth_code() const;
  void set_auth_code(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_code(::std::string&& value);
  #endif
  void set_auth_code(const char* value);
  void set_auth_code(const char* value, size_t size);
  ::std::string* mutable_auth_code();
  ::std::string* release_auth_code();
  void set_allocated_auth_code(::std::string* auth_code);

  // required string txn_status = 6;
  bool has_txn_status() const;
  void clear_txn_status();
  static const int kTxnStatusFieldNumber = 6;
  const ::std::string& txn_status() const;
  void set_txn_status(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_status(::std::string&& value);
  #endif
  void set_txn_status(const char* value);
  void set_txn_status(const char* value, size_t size);
  ::std::string* mutable_txn_status();
  ::std::string* release_txn_status();
  void set_allocated_txn_status(::std::string* txn_status);

  // required string user_id = 7;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required string client_id = 8;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 8;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // required string ip = 11;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 11;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required string nick = 12;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 12;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // required string light_id = 13;
  bool has_light_id() const;
  void clear_light_id();
  static const int kLightIdFieldNumber = 13;
  const ::std::string& light_id() const;
  void set_light_id(const ::std::string& value);
  #if LANG_CXX11
  void set_light_id(::std::string&& value);
  #endif
  void set_light_id(const char* value);
  void set_light_id(const char* value, size_t size);
  ::std::string* mutable_light_id();
  ::std::string* release_light_id();
  void set_allocated_light_id(::std::string* light_id);

  // required string vid = 14;
  bool has_vid() const;
  void clear_vid();
  static const int kVidFieldNumber = 14;
  const ::std::string& vid() const;
  void set_vid(const ::std::string& value);
  #if LANG_CXX11
  void set_vid(::std::string&& value);
  #endif
  void set_vid(const char* value);
  void set_vid(const char* value, size_t size);
  ::std::string* mutable_vid();
  ::std::string* release_vid();
  void set_allocated_vid(::std::string* vid);

  // required string dmr_uid = 15;
  bool has_dmr_uid() const;
  void clear_dmr_uid();
  static const int kDmrUidFieldNumber = 15;
  const ::std::string& dmr_uid() const;
  void set_dmr_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_dmr_uid(::std::string&& value);
  #endif
  void set_dmr_uid(const char* value);
  void set_dmr_uid(const char* value, size_t size);
  ::std::string* mutable_dmr_uid();
  ::std::string* release_dmr_uid();
  void set_allocated_dmr_uid(::std::string* dmr_uid);

  // required string af_bpc = 17;
  bool has_af_bpc() const;
  void clear_af_bpc();
  static const int kAfBpcFieldNumber = 17;
  const ::std::string& af_bpc() const;
  void set_af_bpc(const ::std::string& value);
  #if LANG_CXX11
  void set_af_bpc(::std::string&& value);
  #endif
  void set_af_bpc(const char* value);
  void set_af_bpc(const char* value, size_t size);
  ::std::string* mutable_af_bpc();
  ::std::string* release_af_bpc();
  void set_allocated_af_bpc(::std::string* af_bpc);

  // required string af_mail = 18;
  bool has_af_mail() const;
  void clear_af_mail();
  static const int kAfMailFieldNumber = 18;
  const ::std::string& af_mail() const;
  void set_af_mail(const ::std::string& value);
  #if LANG_CXX11
  void set_af_mail(::std::string&& value);
  #endif
  void set_af_mail(const char* value);
  void set_af_mail(const char* value, size_t size);
  ::std::string* mutable_af_mail();
  ::std::string* release_af_mail();
  void set_allocated_af_mail(::std::string* af_mail);

  // required string body = 20;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 20;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // required uint64 amount = 9;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 9;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // required uint64 ts = 10;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 10;
  ::google::protobuf::uint64 ts() const;
  void set_ts(::google::protobuf::uint64 value);

  // required uint32 currency = 16;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 16;
  ::google::protobuf::uint32 currency() const;
  void set_currency(::google::protobuf::uint32 value);

  // required uint32 i3ds = 19;
  bool has_i3ds() const;
  void clear_i3ds();
  static const int kI3DsFieldNumber = 19;
  ::google::protobuf::uint32 i3ds() const;
  void set_i3ds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.anti_fraud.DumpRecord)
 private:
  void set_has_trans_id();
  void clear_has_trans_id();
  void set_has_internal_id();
  void clear_has_internal_id();
  void set_has_card_number();
  void clear_has_card_number();
  void set_has_card_id();
  void clear_has_card_id();
  void set_has_auth_code();
  void clear_has_auth_code();
  void set_has_txn_status();
  void clear_has_txn_status();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_client_id();
  void clear_has_client_id();
  void set_has_amount();
  void clear_has_amount();
  void set_has_ts();
  void clear_has_ts();
  void set_has_ip();
  void clear_has_ip();
  void set_has_nick();
  void clear_has_nick();
  void set_has_light_id();
  void clear_has_light_id();
  void set_has_vid();
  void clear_has_vid();
  void set_has_dmr_uid();
  void clear_has_dmr_uid();
  void set_has_currency();
  void clear_has_currency();
  void set_has_af_bpc();
  void clear_has_af_bpc();
  void set_has_af_mail();
  void clear_has_af_mail();
  void set_has_i3ds();
  void clear_has_i3ds();
  void set_has_body();
  void clear_has_body();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trans_id_;
  ::google::protobuf::internal::ArenaStringPtr internal_id_;
  ::google::protobuf::internal::ArenaStringPtr card_number_;
  ::google::protobuf::internal::ArenaStringPtr card_id_;
  ::google::protobuf::internal::ArenaStringPtr auth_code_;
  ::google::protobuf::internal::ArenaStringPtr txn_status_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr light_id_;
  ::google::protobuf::internal::ArenaStringPtr vid_;
  ::google::protobuf::internal::ArenaStringPtr dmr_uid_;
  ::google::protobuf::internal::ArenaStringPtr af_bpc_;
  ::google::protobuf::internal::ArenaStringPtr af_mail_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 ts_;
  ::google::protobuf::uint32 currency_;
  ::google::protobuf::uint32 i3ds_;
  friend struct protobuf_antifraud_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.anti_fraud.LogRecord) */ {
 public:
  LogRecord();
  virtual ~LogRecord();

  LogRecord(const LogRecord& from);

  inline LogRecord& operator=(const LogRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogRecord(LogRecord&& from) noexcept
    : LogRecord() {
    *this = ::std::move(from);
  }

  inline LogRecord& operator=(LogRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecord& default_instance();

  static inline const LogRecord* internal_default_instance() {
    return reinterpret_cast<const LogRecord*>(
               &_LogRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LogRecord* other);
  friend void swap(LogRecord& a, LogRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  LogRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogRecord& from);
  void MergeFrom(const LogRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LogRecord_RecordType RecordType;
  static const RecordType CHECK =
    LogRecord_RecordType_CHECK;
  static const RecordType UPDATE =
    LogRecord_RecordType_UPDATE;
  static inline bool RecordType_IsValid(int value) {
    return LogRecord_RecordType_IsValid(value);
  }
  static const RecordType RecordType_MIN =
    LogRecord_RecordType_RecordType_MIN;
  static const RecordType RecordType_MAX =
    LogRecord_RecordType_RecordType_MAX;
  static const int RecordType_ARRAYSIZE =
    LogRecord_RecordType_RecordType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RecordType_descriptor() {
    return LogRecord_RecordType_descriptor();
  }
  static inline const ::std::string& RecordType_Name(RecordType value) {
    return LogRecord_RecordType_Name(value);
  }
  static inline bool RecordType_Parse(const ::std::string& name,
      RecordType* value) {
    return LogRecord_RecordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string qid = 1;
  bool has_qid() const;
  void clear_qid();
  static const int kQidFieldNumber = 1;
  const ::std::string& qid() const;
  void set_qid(const ::std::string& value);
  #if LANG_CXX11
  void set_qid(::std::string&& value);
  #endif
  void set_qid(const char* value);
  void set_qid(const char* value, size_t size);
  ::std::string* mutable_qid();
  ::std::string* release_qid();
  void set_allocated_qid(::std::string* qid);

  // required string body = 6;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 6;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional .ru.mail.go.anti_fraud.CheckRecord check_record = 4;
  bool has_check_record() const;
  void clear_check_record();
  static const int kCheckRecordFieldNumber = 4;
  const ::ru::mail::go::anti_fraud::CheckRecord& check_record() const;
  ::ru::mail::go::anti_fraud::CheckRecord* mutable_check_record();
  ::ru::mail::go::anti_fraud::CheckRecord* release_check_record();
  void set_allocated_check_record(::ru::mail::go::anti_fraud::CheckRecord* check_record);

  // optional .ru.mail.go.anti_fraud.UpdateRecord update_record = 5;
  bool has_update_record() const;
  void clear_update_record();
  static const int kUpdateRecordFieldNumber = 5;
  const ::ru::mail::go::anti_fraud::UpdateRecord& update_record() const;
  ::ru::mail::go::anti_fraud::UpdateRecord* mutable_update_record();
  ::ru::mail::go::anti_fraud::UpdateRecord* release_update_record();
  void set_allocated_update_record(::ru::mail::go::anti_fraud::UpdateRecord* update_record);

  // required uint64 log_ts = 2;
  bool has_log_ts() const;
  void clear_log_ts();
  static const int kLogTsFieldNumber = 2;
  ::google::protobuf::uint64 log_ts() const;
  void set_log_ts(::google::protobuf::uint64 value);

  // required .ru.mail.go.anti_fraud.LogRecord.RecordType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ru::mail::go::anti_fraud::LogRecord_RecordType type() const;
  void set_type(::ru::mail::go::anti_fraud::LogRecord_RecordType value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.anti_fraud.LogRecord)
 private:
  void set_has_qid();
  void clear_has_qid();
  void set_has_log_ts();
  void clear_has_log_ts();
  void set_has_type();
  void clear_has_type();
  void set_has_check_record();
  void clear_has_check_record();
  void set_has_update_record();
  void clear_has_update_record();
  void set_has_body();
  void clear_has_body();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr qid_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::ru::mail::go::anti_fraud::CheckRecord* check_record_;
  ::ru::mail::go::anti_fraud::UpdateRecord* update_record_;
  ::google::protobuf::uint64 log_ts_;
  int type_;
  friend struct protobuf_antifraud_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.anti_fraud.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Record* other);
  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const PROTOBUF_FINAL { return New(NULL); }

  Record* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string trans_id = 1;
  bool has_trans_id() const;
  void clear_trans_id();
  static const int kTransIdFieldNumber = 1;
  const ::std::string& trans_id() const;
  void set_trans_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trans_id(::std::string&& value);
  #endif
  void set_trans_id(const char* value);
  void set_trans_id(const char* value, size_t size);
  ::std::string* mutable_trans_id();
  ::std::string* release_trans_id();
  void set_allocated_trans_id(::std::string* trans_id);

  // optional .ru.mail.go.anti_fraud.LogRecord log_record = 2;
  bool has_log_record() const;
  void clear_log_record();
  static const int kLogRecordFieldNumber = 2;
  const ::ru::mail::go::anti_fraud::LogRecord& log_record() const;
  ::ru::mail::go::anti_fraud::LogRecord* mutable_log_record();
  ::ru::mail::go::anti_fraud::LogRecord* release_log_record();
  void set_allocated_log_record(::ru::mail::go::anti_fraud::LogRecord* log_record);

  // optional .ru.mail.go.anti_fraud.DumpRecord dump_record = 3;
  bool has_dump_record() const;
  void clear_dump_record();
  static const int kDumpRecordFieldNumber = 3;
  const ::ru::mail::go::anti_fraud::DumpRecord& dump_record() const;
  ::ru::mail::go::anti_fraud::DumpRecord* mutable_dump_record();
  ::ru::mail::go::anti_fraud::DumpRecord* release_dump_record();
  void set_allocated_dump_record(::ru::mail::go::anti_fraud::DumpRecord* dump_record);

  // @@protoc_insertion_point(class_scope:ru.mail.go.anti_fraud.Record)
 private:
  void set_has_trans_id();
  void clear_has_trans_id();
  void set_has_log_record();
  void clear_has_log_record();
  void set_has_dump_record();
  void clear_has_dump_record();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trans_id_;
  ::ru::mail::go::anti_fraud::LogRecord* log_record_;
  ::ru::mail::go::anti_fraud::DumpRecord* dump_record_;
  friend struct protobuf_antifraud_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.anti_fraud.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const PROTOBUF_FINAL { return New(NULL); }

  Transaction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string trans_id = 1;
  bool has_trans_id() const;
  void clear_trans_id();
  static const int kTransIdFieldNumber = 1;
  const ::std::string& trans_id() const;
  void set_trans_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trans_id(::std::string&& value);
  #endif
  void set_trans_id(const char* value);
  void set_trans_id(const char* value, size_t size);
  ::std::string* mutable_trans_id();
  ::std::string* release_trans_id();
  void set_allocated_trans_id(::std::string* trans_id);

  // required string card_number = 2;
  bool has_card_number() const;
  void clear_card_number();
  static const int kCardNumberFieldNumber = 2;
  const ::std::string& card_number() const;
  void set_card_number(const ::std::string& value);
  #if LANG_CXX11
  void set_card_number(::std::string&& value);
  #endif
  void set_card_number(const char* value);
  void set_card_number(const char* value, size_t size);
  ::std::string* mutable_card_number();
  ::std::string* release_card_number();
  void set_allocated_card_number(::std::string* card_number);

  // required string card_id = 3;
  bool has_card_id() const;
  void clear_card_id();
  static const int kCardIdFieldNumber = 3;
  const ::std::string& card_id() const;
  void set_card_id(const ::std::string& value);
  #if LANG_CXX11
  void set_card_id(::std::string&& value);
  #endif
  void set_card_id(const char* value);
  void set_card_id(const char* value, size_t size);
  ::std::string* mutable_card_id();
  ::std::string* release_card_id();
  void set_allocated_card_id(::std::string* card_id);

  // optional string auth_code = 4;
  bool has_auth_code() const;
  void clear_auth_code();
  static const int kAuthCodeFieldNumber = 4;
  const ::std::string& auth_code() const;
  void set_auth_code(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_code(::std::string&& value);
  #endif
  void set_auth_code(const char* value);
  void set_auth_code(const char* value, size_t size);
  ::std::string* mutable_auth_code();
  ::std::string* release_auth_code();
  void set_allocated_auth_code(::std::string* auth_code);

  // required string txn_status = 5;
  bool has_txn_status() const;
  void clear_txn_status();
  static const int kTxnStatusFieldNumber = 5;
  const ::std::string& txn_status() const;
  void set_txn_status(const ::std::string& value);
  #if LANG_CXX11
  void set_txn_status(::std::string&& value);
  #endif
  void set_txn_status(const char* value);
  void set_txn_status(const char* value, size_t size);
  ::std::string* mutable_txn_status();
  ::std::string* release_txn_status();
  void set_allocated_txn_status(::std::string* txn_status);

  // required string user_id = 6;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 6;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required string client_id = 7;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 7;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // required string ip = 10;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 10;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string ip_country = 11;
  bool has_ip_country() const;
  void clear_ip_country();
  static const int kIpCountryFieldNumber = 11;
  const ::std::string& ip_country() const;
  void set_ip_country(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_country(::std::string&& value);
  #endif
  void set_ip_country(const char* value);
  void set_ip_country(const char* value, size_t size);
  ::std::string* mutable_ip_country();
  ::std::string* release_ip_country();
  void set_allocated_ip_country(::std::string* ip_country);

  // optional string card_country = 12;
  bool has_card_country() const;
  void clear_card_country();
  static const int kCardCountryFieldNumber = 12;
  const ::std::string& card_country() const;
  void set_card_country(const ::std::string& value);
  #if LANG_CXX11
  void set_card_country(::std::string&& value);
  #endif
  void set_card_country(const char* value);
  void set_card_country(const char* value, size_t size);
  ::std::string* mutable_card_country();
  ::std::string* release_card_country();
  void set_allocated_card_country(::std::string* card_country);

  // optional string nick = 13;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 13;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // optional string light_id = 14;
  bool has_light_id() const;
  void clear_light_id();
  static const int kLightIdFieldNumber = 14;
  const ::std::string& light_id() const;
  void set_light_id(const ::std::string& value);
  #if LANG_CXX11
  void set_light_id(::std::string&& value);
  #endif
  void set_light_id(const char* value);
  void set_light_id(const char* value, size_t size);
  ::std::string* mutable_light_id();
  ::std::string* release_light_id();
  void set_allocated_light_id(::std::string* light_id);

  // optional string vid = 15;
  bool has_vid() const;
  void clear_vid();
  static const int kVidFieldNumber = 15;
  const ::std::string& vid() const;
  void set_vid(const ::std::string& value);
  #if LANG_CXX11
  void set_vid(::std::string&& value);
  #endif
  void set_vid(const char* value);
  void set_vid(const char* value, size_t size);
  ::std::string* mutable_vid();
  ::std::string* release_vid();
  void set_allocated_vid(::std::string* vid);

  // optional string dmr_uid = 16;
  bool has_dmr_uid() const;
  void clear_dmr_uid();
  static const int kDmrUidFieldNumber = 16;
  const ::std::string& dmr_uid() const;
  void set_dmr_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_dmr_uid(::std::string&& value);
  #endif
  void set_dmr_uid(const char* value);
  void set_dmr_uid(const char* value, size_t size);
  ::std::string* mutable_dmr_uid();
  ::std::string* release_dmr_uid();
  void set_allocated_dmr_uid(::std::string* dmr_uid);

  // optional string af_bpc = 18;
  bool has_af_bpc() const;
  void clear_af_bpc();
  static const int kAfBpcFieldNumber = 18;
  const ::std::string& af_bpc() const;
  void set_af_bpc(const ::std::string& value);
  #if LANG_CXX11
  void set_af_bpc(::std::string&& value);
  #endif
  void set_af_bpc(const char* value);
  void set_af_bpc(const char* value, size_t size);
  ::std::string* mutable_af_bpc();
  ::std::string* release_af_bpc();
  void set_allocated_af_bpc(::std::string* af_bpc);

  // optional string af_mail = 19;
  bool has_af_mail() const;
  void clear_af_mail();
  static const int kAfMailFieldNumber = 19;
  const ::std::string& af_mail() const;
  void set_af_mail(const ::std::string& value);
  #if LANG_CXX11
  void set_af_mail(::std::string&& value);
  #endif
  void set_af_mail(const char* value);
  void set_af_mail(const char* value, size_t size);
  ::std::string* mutable_af_mail();
  ::std::string* release_af_mail();
  void set_allocated_af_mail(::std::string* af_mail);

  // optional string bank_name = 21;
  bool has_bank_name() const;
  void clear_bank_name();
  static const int kBankNameFieldNumber = 21;
  const ::std::string& bank_name() const;
  void set_bank_name(const ::std::string& value);
  #if LANG_CXX11
  void set_bank_name(::std::string&& value);
  #endif
  void set_bank_name(const char* value);
  void set_bank_name(const char* value, size_t size);
  ::std::string* mutable_bank_name();
  ::std::string* release_bank_name();
  void set_allocated_bank_name(::std::string* bank_name);

  // optional string beneficiary_id = 23;
  bool has_beneficiary_id() const;
  void clear_beneficiary_id();
  static const int kBeneficiaryIdFieldNumber = 23;
  const ::std::string& beneficiary_id() const;
  void set_beneficiary_id(const ::std::string& value);
  #if LANG_CXX11
  void set_beneficiary_id(::std::string&& value);
  #endif
  void set_beneficiary_id(const char* value);
  void set_beneficiary_id(const char* value, size_t size);
  ::std::string* mutable_beneficiary_id();
  ::std::string* release_beneficiary_id();
  void set_allocated_beneficiary_id(::std::string* beneficiary_id);

  // optional string exp_date = 24;
  bool has_exp_date() const;
  void clear_exp_date();
  static const int kExpDateFieldNumber = 24;
  const ::std::string& exp_date() const;
  void set_exp_date(const ::std::string& value);
  #if LANG_CXX11
  void set_exp_date(::std::string&& value);
  #endif
  void set_exp_date(const char* value);
  void set_exp_date(const char* value, size_t size);
  ::std::string* mutable_exp_date();
  ::std::string* release_exp_date();
  void set_allocated_exp_date(::std::string* exp_date);

  // optional string holder = 25;
  bool has_holder() const;
  void clear_holder();
  static const int kHolderFieldNumber = 25;
  const ::std::string& holder() const;
  void set_holder(const ::std::string& value);
  #if LANG_CXX11
  void set_holder(::std::string&& value);
  #endif
  void set_holder(const char* value);
  void set_holder(const char* value, size_t size);
  ::std::string* mutable_holder();
  ::std::string* release_holder();
  void set_allocated_holder(::std::string* holder);

  // optional string af_code = 26;
  bool has_af_code() const;
  void clear_af_code();
  static const int kAfCodeFieldNumber = 26;
  const ::std::string& af_code() const;
  void set_af_code(const ::std::string& value);
  #if LANG_CXX11
  void set_af_code(::std::string&& value);
  #endif
  void set_af_code(const char* value);
  void set_af_code(const char* value, size_t size);
  ::std::string* mutable_af_code();
  ::std::string* release_af_code();
  void set_allocated_af_code(::std::string* af_code);

  // optional string check_body = 27;
  bool has_check_body() const;
  void clear_check_body();
  static const int kCheckBodyFieldNumber = 27;
  const ::std::string& check_body() const;
  void set_check_body(const ::std::string& value);
  #if LANG_CXX11
  void set_check_body(::std::string&& value);
  #endif
  void set_check_body(const char* value);
  void set_check_body(const char* value, size_t size);
  ::std::string* mutable_check_body();
  ::std::string* release_check_body();
  void set_allocated_check_body(::std::string* check_body);

  // optional string update_body = 28;
  bool has_update_body() const;
  void clear_update_body();
  static const int kUpdateBodyFieldNumber = 28;
  const ::std::string& update_body() const;
  void set_update_body(const ::std::string& value);
  #if LANG_CXX11
  void set_update_body(::std::string&& value);
  #endif
  void set_update_body(const char* value);
  void set_update_body(const char* value, size_t size);
  ::std::string* mutable_update_body();
  ::std::string* release_update_body();
  void set_allocated_update_body(::std::string* update_body);

  // optional string dump_body = 29;
  bool has_dump_body() const;
  void clear_dump_body();
  static const int kDumpBodyFieldNumber = 29;
  const ::std::string& dump_body() const;
  void set_dump_body(const ::std::string& value);
  #if LANG_CXX11
  void set_dump_body(::std::string&& value);
  #endif
  void set_dump_body(const char* value);
  void set_dump_body(const char* value, size_t size);
  ::std::string* mutable_dump_body();
  ::std::string* release_dump_body();
  void set_allocated_dump_body(::std::string* dump_body);

  // required uint64 amount = 8;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 8;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // required uint64 ts = 9;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 9;
  ::google::protobuf::uint64 ts() const;
  void set_ts(::google::protobuf::uint64 value);

  // required uint32 currency = 17;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 17;
  ::google::protobuf::uint32 currency() const;
  void set_currency(::google::protobuf::uint32 value);

  // optional uint32 i3ds = 20;
  bool has_i3ds() const;
  void clear_i3ds();
  static const int kI3DsFieldNumber = 20;
  ::google::protobuf::uint32 i3ds() const;
  void set_i3ds(::google::protobuf::uint32 value);

  // optional uint32 status = 22;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 22;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.anti_fraud.Transaction)
 private:
  void set_has_trans_id();
  void clear_has_trans_id();
  void set_has_card_number();
  void clear_has_card_number();
  void set_has_card_id();
  void clear_has_card_id();
  void set_has_auth_code();
  void clear_has_auth_code();
  void set_has_txn_status();
  void clear_has_txn_status();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_client_id();
  void clear_has_client_id();
  void set_has_amount();
  void clear_has_amount();
  void set_has_ts();
  void clear_has_ts();
  void set_has_ip();
  void clear_has_ip();
  void set_has_ip_country();
  void clear_has_ip_country();
  void set_has_card_country();
  void clear_has_card_country();
  void set_has_nick();
  void clear_has_nick();
  void set_has_light_id();
  void clear_has_light_id();
  void set_has_vid();
  void clear_has_vid();
  void set_has_dmr_uid();
  void clear_has_dmr_uid();
  void set_has_currency();
  void clear_has_currency();
  void set_has_af_bpc();
  void clear_has_af_bpc();
  void set_has_af_mail();
  void clear_has_af_mail();
  void set_has_i3ds();
  void clear_has_i3ds();
  void set_has_bank_name();
  void clear_has_bank_name();
  void set_has_status();
  void clear_has_status();
  void set_has_beneficiary_id();
  void clear_has_beneficiary_id();
  void set_has_exp_date();
  void clear_has_exp_date();
  void set_has_holder();
  void clear_has_holder();
  void set_has_af_code();
  void clear_has_af_code();
  void set_has_check_body();
  void clear_has_check_body();
  void set_has_update_body();
  void clear_has_update_body();
  void set_has_dump_body();
  void clear_has_dump_body();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr trans_id_;
  ::google::protobuf::internal::ArenaStringPtr card_number_;
  ::google::protobuf::internal::ArenaStringPtr card_id_;
  ::google::protobuf::internal::ArenaStringPtr auth_code_;
  ::google::protobuf::internal::ArenaStringPtr txn_status_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr ip_country_;
  ::google::protobuf::internal::ArenaStringPtr card_country_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr light_id_;
  ::google::protobuf::internal::ArenaStringPtr vid_;
  ::google::protobuf::internal::ArenaStringPtr dmr_uid_;
  ::google::protobuf::internal::ArenaStringPtr af_bpc_;
  ::google::protobuf::internal::ArenaStringPtr af_mail_;
  ::google::protobuf::internal::ArenaStringPtr bank_name_;
  ::google::protobuf::internal::ArenaStringPtr beneficiary_id_;
  ::google::protobuf::internal::ArenaStringPtr exp_date_;
  ::google::protobuf::internal::ArenaStringPtr holder_;
  ::google::protobuf::internal::ArenaStringPtr af_code_;
  ::google::protobuf::internal::ArenaStringPtr check_body_;
  ::google::protobuf::internal::ArenaStringPtr update_body_;
  ::google::protobuf::internal::ArenaStringPtr dump_body_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 ts_;
  ::google::protobuf::uint32 currency_;
  ::google::protobuf::uint32 i3ds_;
  ::google::protobuf::uint32 status_;
  friend struct protobuf_antifraud_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmulatedFeatures_EmulatedFeature

// required uint32 key = 1;
inline bool EmulatedFeatures_EmulatedFeature::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmulatedFeatures_EmulatedFeature::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmulatedFeatures_EmulatedFeature::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmulatedFeatures_EmulatedFeature::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 EmulatedFeatures_EmulatedFeature::key() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature.key)
  return key_;
}
inline void EmulatedFeatures_EmulatedFeature::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature.key)
}

// optional uint32 val = 2;
inline bool EmulatedFeatures_EmulatedFeature::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmulatedFeatures_EmulatedFeature::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmulatedFeatures_EmulatedFeature::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmulatedFeatures_EmulatedFeature::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 EmulatedFeatures_EmulatedFeature::val() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature.val)
  return val_;
}
inline void EmulatedFeatures_EmulatedFeature::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature.val)
}

// -------------------------------------------------------------------

// EmulatedFeatures

// required string id = 1;
inline bool EmulatedFeatures::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmulatedFeatures::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmulatedFeatures::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmulatedFeatures::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& EmulatedFeatures::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.id)
  return id_.GetNoArena();
}
inline void EmulatedFeatures::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.EmulatedFeatures.id)
}
#if LANG_CXX11
inline void EmulatedFeatures::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.EmulatedFeatures.id)
}
#endif
inline void EmulatedFeatures::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.EmulatedFeatures.id)
}
inline void EmulatedFeatures::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.EmulatedFeatures.id)
}
inline ::std::string* EmulatedFeatures::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.EmulatedFeatures.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmulatedFeatures::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.EmulatedFeatures.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmulatedFeatures::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.EmulatedFeatures.id)
}

// required bool is_fraud = 2;
inline bool EmulatedFeatures::has_is_fraud() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmulatedFeatures::set_has_is_fraud() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmulatedFeatures::clear_has_is_fraud() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmulatedFeatures::clear_is_fraud() {
  is_fraud_ = false;
  clear_has_is_fraud();
}
inline bool EmulatedFeatures::is_fraud() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.is_fraud)
  return is_fraud_;
}
inline void EmulatedFeatures::set_is_fraud(bool value) {
  set_has_is_fraud();
  is_fraud_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.EmulatedFeatures.is_fraud)
}

// required string status = 3;
inline bool EmulatedFeatures::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmulatedFeatures::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmulatedFeatures::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmulatedFeatures::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
inline const ::std::string& EmulatedFeatures::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.status)
  return status_.GetNoArena();
}
inline void EmulatedFeatures::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.EmulatedFeatures.status)
}
#if LANG_CXX11
inline void EmulatedFeatures::set_status(::std::string&& value) {
  set_has_status();
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.EmulatedFeatures.status)
}
#endif
inline void EmulatedFeatures::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.EmulatedFeatures.status)
}
inline void EmulatedFeatures::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.EmulatedFeatures.status)
}
inline ::std::string* EmulatedFeatures::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.EmulatedFeatures.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmulatedFeatures::release_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.EmulatedFeatures.status)
  clear_has_status();
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmulatedFeatures::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.EmulatedFeatures.status)
}

// repeated .ru.mail.go.anti_fraud.EmulatedFeatures.EmulatedFeature features = 4;
inline int EmulatedFeatures::features_size() const {
  return features_.size();
}
inline void EmulatedFeatures::clear_features() {
  features_.Clear();
}
inline const ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature& EmulatedFeatures::features(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.EmulatedFeatures.features)
  return features_.Get(index);
}
inline ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature* EmulatedFeatures::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.EmulatedFeatures.features)
  return features_.Mutable(index);
}
inline ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature* EmulatedFeatures::add_features() {
  // @@protoc_insertion_point(field_add:ru.mail.go.anti_fraud.EmulatedFeatures.features)
  return features_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature >*
EmulatedFeatures::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.anti_fraud.EmulatedFeatures.features)
  return &features_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::anti_fraud::EmulatedFeatures_EmulatedFeature >&
EmulatedFeatures::features() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.anti_fraud.EmulatedFeatures.features)
  return features_;
}

// -------------------------------------------------------------------

// CheckRecord

// required uint64 record_ts = 1;
inline bool CheckRecord::has_record_ts() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CheckRecord::set_has_record_ts() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CheckRecord::clear_has_record_ts() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CheckRecord::clear_record_ts() {
  record_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_record_ts();
}
inline ::google::protobuf::uint64 CheckRecord::record_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.record_ts)
  return record_ts_;
}
inline void CheckRecord::set_record_ts(::google::protobuf::uint64 value) {
  set_has_record_ts();
  record_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.record_ts)
}

// required string merchant_id = 2;
inline bool CheckRecord::has_merchant_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckRecord::set_has_merchant_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckRecord::clear_has_merchant_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckRecord::clear_merchant_id() {
  merchant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_merchant_id();
}
inline const ::std::string& CheckRecord::merchant_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
  return merchant_id_.GetNoArena();
}
inline void CheckRecord::set_merchant_id(const ::std::string& value) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
}
#if LANG_CXX11
inline void CheckRecord::set_merchant_id(::std::string&& value) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
}
#endif
inline void CheckRecord::set_merchant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
}
inline void CheckRecord::set_merchant_id(const char* value, size_t size) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
}
inline ::std::string* CheckRecord::mutable_merchant_id() {
  set_has_merchant_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
  return merchant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_merchant_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
  clear_has_merchant_id();
  return merchant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_merchant_id(::std::string* merchant_id) {
  if (merchant_id != NULL) {
    set_has_merchant_id();
  } else {
    clear_has_merchant_id();
  }
  merchant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merchant_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.merchant_id)
}

// required string client_id = 3;
inline bool CheckRecord::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckRecord::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckRecord::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckRecord::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
inline const ::std::string& CheckRecord::client_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.client_id)
  return client_id_.GetNoArena();
}
inline void CheckRecord::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.client_id)
}
#if LANG_CXX11
inline void CheckRecord::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.client_id)
}
#endif
inline void CheckRecord::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.client_id)
}
inline void CheckRecord::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.client_id)
}
inline ::std::string* CheckRecord::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_client_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.client_id)
}

// required string trans_id = 4;
inline bool CheckRecord::has_trans_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckRecord::set_has_trans_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckRecord::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckRecord::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trans_id();
}
inline const ::std::string& CheckRecord::trans_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.trans_id)
  return trans_id_.GetNoArena();
}
inline void CheckRecord::set_trans_id(const ::std::string& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.trans_id)
}
#if LANG_CXX11
inline void CheckRecord::set_trans_id(::std::string&& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.trans_id)
}
#endif
inline void CheckRecord::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.trans_id)
}
inline void CheckRecord::set_trans_id(const char* value, size_t size) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.trans_id)
}
inline ::std::string* CheckRecord::mutable_trans_id() {
  set_has_trans_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_trans_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.trans_id)
  clear_has_trans_id();
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != NULL) {
    set_has_trans_id();
  } else {
    clear_has_trans_id();
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.trans_id)
}

// required uint32 currency = 5;
inline bool CheckRecord::has_currency() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CheckRecord::set_has_currency() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CheckRecord::clear_has_currency() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CheckRecord::clear_currency() {
  currency_ = 0u;
  clear_has_currency();
}
inline ::google::protobuf::uint32 CheckRecord::currency() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.currency)
  return currency_;
}
inline void CheckRecord::set_currency(::google::protobuf::uint32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.currency)
}

// optional uint32 deposit = 6;
inline bool CheckRecord::has_deposit() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CheckRecord::set_has_deposit() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CheckRecord::clear_has_deposit() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CheckRecord::clear_deposit() {
  deposit_ = 0u;
  clear_has_deposit();
}
inline ::google::protobuf::uint32 CheckRecord::deposit() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.deposit)
  return deposit_;
}
inline void CheckRecord::set_deposit(::google::protobuf::uint32 value) {
  set_has_deposit();
  deposit_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.deposit)
}

// required uint64 ts = 7;
inline bool CheckRecord::has_ts() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CheckRecord::set_has_ts() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CheckRecord::clear_has_ts() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CheckRecord::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
inline ::google::protobuf::uint64 CheckRecord::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.ts)
  return ts_;
}
inline void CheckRecord::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.ts)
}

// required uint64 amount = 8;
inline bool CheckRecord::has_amount() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CheckRecord::set_has_amount() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CheckRecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CheckRecord::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 CheckRecord::amount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.amount)
  return amount_;
}
inline void CheckRecord::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.amount)
}

// required string ip = 9;
inline bool CheckRecord::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckRecord::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckRecord::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckRecord::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& CheckRecord::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.ip)
  return ip_.GetNoArena();
}
inline void CheckRecord::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.ip)
}
#if LANG_CXX11
inline void CheckRecord::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.ip)
}
#endif
inline void CheckRecord::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.ip)
}
inline void CheckRecord::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.ip)
}
inline ::std::string* CheckRecord::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.ip)
}

// optional string ip_country = 10;
inline bool CheckRecord::has_ip_country() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckRecord::set_has_ip_country() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckRecord::clear_has_ip_country() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckRecord::clear_ip_country() {
  ip_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_country();
}
inline const ::std::string& CheckRecord::ip_country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.ip_country)
  return ip_country_.GetNoArena();
}
inline void CheckRecord::set_ip_country(const ::std::string& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.ip_country)
}
#if LANG_CXX11
inline void CheckRecord::set_ip_country(::std::string&& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.ip_country)
}
#endif
inline void CheckRecord::set_ip_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.ip_country)
}
inline void CheckRecord::set_ip_country(const char* value, size_t size) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.ip_country)
}
inline ::std::string* CheckRecord::mutable_ip_country() {
  set_has_ip_country();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.ip_country)
  return ip_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_ip_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.ip_country)
  clear_has_ip_country();
  return ip_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_ip_country(::std::string* ip_country) {
  if (ip_country != NULL) {
    set_has_ip_country();
  } else {
    clear_has_ip_country();
  }
  ip_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_country);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.ip_country)
}

// optional string vid = 11;
inline bool CheckRecord::has_vid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CheckRecord::set_has_vid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CheckRecord::clear_has_vid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CheckRecord::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
inline const ::std::string& CheckRecord::vid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.vid)
  return vid_.GetNoArena();
}
inline void CheckRecord::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.vid)
}
#if LANG_CXX11
inline void CheckRecord::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.vid)
}
#endif
inline void CheckRecord::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.vid)
}
inline void CheckRecord::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.vid)
}
inline ::std::string* CheckRecord::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_vid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.vid)
}

// optional string order_id = 12;
inline bool CheckRecord::has_order_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CheckRecord::set_has_order_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CheckRecord::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CheckRecord::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
inline const ::std::string& CheckRecord::order_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.order_id)
  return order_id_.GetNoArena();
}
inline void CheckRecord::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.order_id)
}
#if LANG_CXX11
inline void CheckRecord::set_order_id(::std::string&& value) {
  set_has_order_id();
  order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.order_id)
}
#endif
inline void CheckRecord::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.order_id)
}
inline void CheckRecord::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.order_id)
}
inline ::std::string* CheckRecord::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_order_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.order_id)
  clear_has_order_id();
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.order_id)
}

// optional string ip_region = 13;
inline bool CheckRecord::has_ip_region() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CheckRecord::set_has_ip_region() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CheckRecord::clear_has_ip_region() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CheckRecord::clear_ip_region() {
  ip_region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_region();
}
inline const ::std::string& CheckRecord::ip_region() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.ip_region)
  return ip_region_.GetNoArena();
}
inline void CheckRecord::set_ip_region(const ::std::string& value) {
  set_has_ip_region();
  ip_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.ip_region)
}
#if LANG_CXX11
inline void CheckRecord::set_ip_region(::std::string&& value) {
  set_has_ip_region();
  ip_region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.ip_region)
}
#endif
inline void CheckRecord::set_ip_region(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_region();
  ip_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.ip_region)
}
inline void CheckRecord::set_ip_region(const char* value, size_t size) {
  set_has_ip_region();
  ip_region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.ip_region)
}
inline ::std::string* CheckRecord::mutable_ip_region() {
  set_has_ip_region();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.ip_region)
  return ip_region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_ip_region() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.ip_region)
  clear_has_ip_region();
  return ip_region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_ip_region(::std::string* ip_region) {
  if (ip_region != NULL) {
    set_has_ip_region();
  } else {
    clear_has_ip_region();
  }
  ip_region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_region);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.ip_region)
}

// optional string dmr_uid = 14;
inline bool CheckRecord::has_dmr_uid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CheckRecord::set_has_dmr_uid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CheckRecord::clear_has_dmr_uid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CheckRecord::clear_dmr_uid() {
  dmr_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dmr_uid();
}
inline const ::std::string& CheckRecord::dmr_uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
  return dmr_uid_.GetNoArena();
}
inline void CheckRecord::set_dmr_uid(const ::std::string& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
}
#if LANG_CXX11
inline void CheckRecord::set_dmr_uid(::std::string&& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
}
#endif
inline void CheckRecord::set_dmr_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
}
inline void CheckRecord::set_dmr_uid(const char* value, size_t size) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
}
inline ::std::string* CheckRecord::mutable_dmr_uid() {
  set_has_dmr_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
  return dmr_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_dmr_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
  clear_has_dmr_uid();
  return dmr_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_dmr_uid(::std::string* dmr_uid) {
  if (dmr_uid != NULL) {
    set_has_dmr_uid();
  } else {
    clear_has_dmr_uid();
  }
  dmr_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dmr_uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.dmr_uid)
}

// required string card_id = 15;
inline bool CheckRecord::has_card_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CheckRecord::set_has_card_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CheckRecord::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CheckRecord::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
inline const ::std::string& CheckRecord::card_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.card_id)
  return card_id_.GetNoArena();
}
inline void CheckRecord::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.card_id)
}
#if LANG_CXX11
inline void CheckRecord::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.card_id)
}
#endif
inline void CheckRecord::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.card_id)
}
inline void CheckRecord::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.card_id)
}
inline ::std::string* CheckRecord::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_card_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.card_id)
}

// required string card_number = 16;
inline bool CheckRecord::has_card_number() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CheckRecord::set_has_card_number() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CheckRecord::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CheckRecord::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_number();
}
inline const ::std::string& CheckRecord::card_number() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.card_number)
  return card_number_.GetNoArena();
}
inline void CheckRecord::set_card_number(const ::std::string& value) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.card_number)
}
#if LANG_CXX11
inline void CheckRecord::set_card_number(::std::string&& value) {
  set_has_card_number();
  card_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.card_number)
}
#endif
inline void CheckRecord::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.card_number)
}
inline void CheckRecord::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.card_number)
}
inline ::std::string* CheckRecord::mutable_card_number() {
  set_has_card_number();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_card_number() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.card_number)
  clear_has_card_number();
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    set_has_card_number();
  } else {
    clear_has_card_number();
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.card_number)
}

// required string exp_date = 17;
inline bool CheckRecord::has_exp_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CheckRecord::set_has_exp_date() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CheckRecord::clear_has_exp_date() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CheckRecord::clear_exp_date() {
  exp_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exp_date();
}
inline const ::std::string& CheckRecord::exp_date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.exp_date)
  return exp_date_.GetNoArena();
}
inline void CheckRecord::set_exp_date(const ::std::string& value) {
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.exp_date)
}
#if LANG_CXX11
inline void CheckRecord::set_exp_date(::std::string&& value) {
  set_has_exp_date();
  exp_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.exp_date)
}
#endif
inline void CheckRecord::set_exp_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.exp_date)
}
inline void CheckRecord::set_exp_date(const char* value, size_t size) {
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.exp_date)
}
inline ::std::string* CheckRecord::mutable_exp_date() {
  set_has_exp_date();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.exp_date)
  return exp_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_exp_date() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.exp_date)
  clear_has_exp_date();
  return exp_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_exp_date(::std::string* exp_date) {
  if (exp_date != NULL) {
    set_has_exp_date();
  } else {
    clear_has_exp_date();
  }
  exp_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_date);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.exp_date)
}

// required string holder = 18;
inline bool CheckRecord::has_holder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CheckRecord::set_has_holder() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CheckRecord::clear_has_holder() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CheckRecord::clear_holder() {
  holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holder();
}
inline const ::std::string& CheckRecord::holder() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.holder)
  return holder_.GetNoArena();
}
inline void CheckRecord::set_holder(const ::std::string& value) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.holder)
}
#if LANG_CXX11
inline void CheckRecord::set_holder(::std::string&& value) {
  set_has_holder();
  holder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.holder)
}
#endif
inline void CheckRecord::set_holder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.holder)
}
inline void CheckRecord::set_holder(const char* value, size_t size) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.holder)
}
inline ::std::string* CheckRecord::mutable_holder() {
  set_has_holder();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.holder)
  return holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_holder() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.holder)
  clear_has_holder();
  return holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_holder(::std::string* holder) {
  if (holder != NULL) {
    set_has_holder();
  } else {
    clear_has_holder();
  }
  holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holder);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.holder)
}

// optional string country = 19;
inline bool CheckRecord::has_country() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CheckRecord::set_has_country() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CheckRecord::clear_has_country() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CheckRecord::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& CheckRecord::country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.country)
  return country_.GetNoArena();
}
inline void CheckRecord::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.country)
}
#if LANG_CXX11
inline void CheckRecord::set_country(::std::string&& value) {
  set_has_country();
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.country)
}
#endif
inline void CheckRecord::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.country)
}
inline void CheckRecord::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.country)
}
inline ::std::string* CheckRecord::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.country)
}

// optional string bank_name = 20;
inline bool CheckRecord::has_bank_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CheckRecord::set_has_bank_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CheckRecord::clear_has_bank_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CheckRecord::clear_bank_name() {
  bank_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bank_name();
}
inline const ::std::string& CheckRecord::bank_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.bank_name)
  return bank_name_.GetNoArena();
}
inline void CheckRecord::set_bank_name(const ::std::string& value) {
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.bank_name)
}
#if LANG_CXX11
inline void CheckRecord::set_bank_name(::std::string&& value) {
  set_has_bank_name();
  bank_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.bank_name)
}
#endif
inline void CheckRecord::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.bank_name)
}
inline void CheckRecord::set_bank_name(const char* value, size_t size) {
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.bank_name)
}
inline ::std::string* CheckRecord::mutable_bank_name() {
  set_has_bank_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.bank_name)
  return bank_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_bank_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.bank_name)
  clear_has_bank_name();
  return bank_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_bank_name(::std::string* bank_name) {
  if (bank_name != NULL) {
    set_has_bank_name();
  } else {
    clear_has_bank_name();
  }
  bank_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.bank_name)
}

// required string user_id = 21;
inline bool CheckRecord::has_user_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CheckRecord::set_has_user_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CheckRecord::clear_has_user_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CheckRecord::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& CheckRecord::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.user_id)
  return user_id_.GetNoArena();
}
inline void CheckRecord::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.user_id)
}
#if LANG_CXX11
inline void CheckRecord::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.user_id)
}
#endif
inline void CheckRecord::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.user_id)
}
inline void CheckRecord::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.user_id)
}
inline ::std::string* CheckRecord::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_user_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.user_id)
}

// optional string beneficiary_id = 22;
inline bool CheckRecord::has_beneficiary_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CheckRecord::set_has_beneficiary_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CheckRecord::clear_has_beneficiary_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CheckRecord::clear_beneficiary_id() {
  beneficiary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_beneficiary_id();
}
inline const ::std::string& CheckRecord::beneficiary_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
  return beneficiary_id_.GetNoArena();
}
inline void CheckRecord::set_beneficiary_id(const ::std::string& value) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
}
#if LANG_CXX11
inline void CheckRecord::set_beneficiary_id(::std::string&& value) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
}
#endif
inline void CheckRecord::set_beneficiary_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
}
inline void CheckRecord::set_beneficiary_id(const char* value, size_t size) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
}
inline ::std::string* CheckRecord::mutable_beneficiary_id() {
  set_has_beneficiary_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
  return beneficiary_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckRecord::release_beneficiary_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
  clear_has_beneficiary_id();
  return beneficiary_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckRecord::set_allocated_beneficiary_id(::std::string* beneficiary_id) {
  if (beneficiary_id != NULL) {
    set_has_beneficiary_id();
  } else {
    clear_has_beneficiary_id();
  }
  beneficiary_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beneficiary_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.CheckRecord.beneficiary_id)
}

// -------------------------------------------------------------------

// UpdateRecord

// required uint64 record_ts = 1;
inline bool UpdateRecord::has_record_ts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UpdateRecord::set_has_record_ts() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UpdateRecord::clear_has_record_ts() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UpdateRecord::clear_record_ts() {
  record_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_record_ts();
}
inline ::google::protobuf::uint64 UpdateRecord::record_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.record_ts)
  return record_ts_;
}
inline void UpdateRecord::set_record_ts(::google::protobuf::uint64 value) {
  set_has_record_ts();
  record_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.record_ts)
}

// required string merchant_id = 2;
inline bool UpdateRecord::has_merchant_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateRecord::set_has_merchant_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateRecord::clear_has_merchant_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateRecord::clear_merchant_id() {
  merchant_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_merchant_id();
}
inline const ::std::string& UpdateRecord::merchant_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
  return merchant_id_.GetNoArena();
}
inline void UpdateRecord::set_merchant_id(const ::std::string& value) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
}
#if LANG_CXX11
inline void UpdateRecord::set_merchant_id(::std::string&& value) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
}
#endif
inline void UpdateRecord::set_merchant_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
}
inline void UpdateRecord::set_merchant_id(const char* value, size_t size) {
  set_has_merchant_id();
  merchant_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
}
inline ::std::string* UpdateRecord::mutable_merchant_id() {
  set_has_merchant_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
  return merchant_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRecord::release_merchant_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
  clear_has_merchant_id();
  return merchant_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRecord::set_allocated_merchant_id(::std::string* merchant_id) {
  if (merchant_id != NULL) {
    set_has_merchant_id();
  } else {
    clear_has_merchant_id();
  }
  merchant_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merchant_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.merchant_id)
}

// required string client_id = 3;
inline bool UpdateRecord::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateRecord::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateRecord::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateRecord::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
inline const ::std::string& UpdateRecord::client_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.client_id)
  return client_id_.GetNoArena();
}
inline void UpdateRecord::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.client_id)
}
#if LANG_CXX11
inline void UpdateRecord::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.client_id)
}
#endif
inline void UpdateRecord::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.client_id)
}
inline void UpdateRecord::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.client_id)
}
inline ::std::string* UpdateRecord::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRecord::release_client_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRecord::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.client_id)
}

// required string trans_id = 4;
inline bool UpdateRecord::has_trans_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateRecord::set_has_trans_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateRecord::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateRecord::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trans_id();
}
inline const ::std::string& UpdateRecord::trans_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
  return trans_id_.GetNoArena();
}
inline void UpdateRecord::set_trans_id(const ::std::string& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
}
#if LANG_CXX11
inline void UpdateRecord::set_trans_id(::std::string&& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
}
#endif
inline void UpdateRecord::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
}
inline void UpdateRecord::set_trans_id(const char* value, size_t size) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
}
inline ::std::string* UpdateRecord::mutable_trans_id() {
  set_has_trans_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRecord::release_trans_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
  clear_has_trans_id();
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRecord::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != NULL) {
    set_has_trans_id();
  } else {
    clear_has_trans_id();
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.trans_id)
}

// required uint32 status = 5;
inline bool UpdateRecord::has_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UpdateRecord::set_has_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UpdateRecord::clear_has_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UpdateRecord::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 UpdateRecord::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.status)
  return status_;
}
inline void UpdateRecord::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.status)
}

// optional uint32 cvv = 6;
inline bool UpdateRecord::has_cvv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UpdateRecord::set_has_cvv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UpdateRecord::clear_has_cvv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UpdateRecord::clear_cvv() {
  cvv_ = 0u;
  clear_has_cvv();
}
inline ::google::protobuf::uint32 UpdateRecord::cvv() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.cvv)
  return cvv_;
}
inline void UpdateRecord::set_cvv(::google::protobuf::uint32 value) {
  set_has_cvv();
  cvv_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.cvv)
}

// optional uint32 i3ds = 7;
inline bool UpdateRecord::has_i3ds() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UpdateRecord::set_has_i3ds() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UpdateRecord::clear_has_i3ds() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UpdateRecord::clear_i3ds() {
  i3ds_ = 0u;
  clear_has_i3ds();
}
inline ::google::protobuf::uint32 UpdateRecord::i3ds() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.i3ds)
  return i3ds_;
}
inline void UpdateRecord::set_i3ds(::google::protobuf::uint32 value) {
  set_has_i3ds();
  i3ds_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.i3ds)
}

// optional uint32 is3ds = 8;
inline bool UpdateRecord::has_is3ds() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UpdateRecord::set_has_is3ds() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UpdateRecord::clear_has_is3ds() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UpdateRecord::clear_is3ds() {
  is3ds_ = 0u;
  clear_has_is3ds();
}
inline ::google::protobuf::uint32 UpdateRecord::is3ds() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.is3ds)
  return is3ds_;
}
inline void UpdateRecord::set_is3ds(::google::protobuf::uint32 value) {
  set_has_is3ds();
  is3ds_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.is3ds)
}

// optional string auth_code = 9;
inline bool UpdateRecord::has_auth_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateRecord::set_has_auth_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateRecord::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateRecord::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_code();
}
inline const ::std::string& UpdateRecord::auth_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
  return auth_code_.GetNoArena();
}
inline void UpdateRecord::set_auth_code(const ::std::string& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
}
#if LANG_CXX11
inline void UpdateRecord::set_auth_code(::std::string&& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
}
#endif
inline void UpdateRecord::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
}
inline void UpdateRecord::set_auth_code(const char* value, size_t size) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
}
inline ::std::string* UpdateRecord::mutable_auth_code() {
  set_has_auth_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRecord::release_auth_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
  clear_has_auth_code();
  return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRecord::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != NULL) {
    set_has_auth_code();
  } else {
    clear_has_auth_code();
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.auth_code)
}

// optional string acquirer = 10;
inline bool UpdateRecord::has_acquirer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateRecord::set_has_acquirer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateRecord::clear_has_acquirer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateRecord::clear_acquirer() {
  acquirer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acquirer();
}
inline const ::std::string& UpdateRecord::acquirer() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
  return acquirer_.GetNoArena();
}
inline void UpdateRecord::set_acquirer(const ::std::string& value) {
  set_has_acquirer();
  acquirer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
}
#if LANG_CXX11
inline void UpdateRecord::set_acquirer(::std::string&& value) {
  set_has_acquirer();
  acquirer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
}
#endif
inline void UpdateRecord::set_acquirer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_acquirer();
  acquirer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
}
inline void UpdateRecord::set_acquirer(const char* value, size_t size) {
  set_has_acquirer();
  acquirer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
}
inline ::std::string* UpdateRecord::mutable_acquirer() {
  set_has_acquirer();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
  return acquirer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRecord::release_acquirer() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
  clear_has_acquirer();
  return acquirer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRecord::set_allocated_acquirer(::std::string* acquirer) {
  if (acquirer != NULL) {
    set_has_acquirer();
  } else {
    clear_has_acquirer();
  }
  acquirer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acquirer);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.acquirer)
}

// optional string acquirer_code = 11;
inline bool UpdateRecord::has_acquirer_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateRecord::set_has_acquirer_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateRecord::clear_has_acquirer_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateRecord::clear_acquirer_code() {
  acquirer_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_acquirer_code();
}
inline const ::std::string& UpdateRecord::acquirer_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
  return acquirer_code_.GetNoArena();
}
inline void UpdateRecord::set_acquirer_code(const ::std::string& value) {
  set_has_acquirer_code();
  acquirer_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
}
#if LANG_CXX11
inline void UpdateRecord::set_acquirer_code(::std::string&& value) {
  set_has_acquirer_code();
  acquirer_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
}
#endif
inline void UpdateRecord::set_acquirer_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_acquirer_code();
  acquirer_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
}
inline void UpdateRecord::set_acquirer_code(const char* value, size_t size) {
  set_has_acquirer_code();
  acquirer_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
}
inline ::std::string* UpdateRecord::mutable_acquirer_code() {
  set_has_acquirer_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
  return acquirer_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRecord::release_acquirer_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
  clear_has_acquirer_code();
  return acquirer_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRecord::set_allocated_acquirer_code(::std::string* acquirer_code) {
  if (acquirer_code != NULL) {
    set_has_acquirer_code();
  } else {
    clear_has_acquirer_code();
  }
  acquirer_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), acquirer_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.acquirer_code)
}

// optional uint32 eci = 12;
inline bool UpdateRecord::has_eci() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UpdateRecord::set_has_eci() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UpdateRecord::clear_has_eci() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UpdateRecord::clear_eci() {
  eci_ = 0u;
  clear_has_eci();
}
inline ::google::protobuf::uint32 UpdateRecord::eci() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.eci)
  return eci_;
}
inline void UpdateRecord::set_eci(::google::protobuf::uint32 value) {
  set_has_eci();
  eci_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.eci)
}

// optional string txn_status = 13;
inline bool UpdateRecord::has_txn_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpdateRecord::set_has_txn_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpdateRecord::clear_has_txn_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpdateRecord::clear_txn_status() {
  txn_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txn_status();
}
inline const ::std::string& UpdateRecord::txn_status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
  return txn_status_.GetNoArena();
}
inline void UpdateRecord::set_txn_status(const ::std::string& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
}
#if LANG_CXX11
inline void UpdateRecord::set_txn_status(::std::string&& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
}
#endif
inline void UpdateRecord::set_txn_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
}
inline void UpdateRecord::set_txn_status(const char* value, size_t size) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
}
inline ::std::string* UpdateRecord::mutable_txn_status() {
  set_has_txn_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
  return txn_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRecord::release_txn_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
  clear_has_txn_status();
  return txn_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRecord::set_allocated_txn_status(::std::string* txn_status) {
  if (txn_status != NULL) {
    set_has_txn_status();
  } else {
    clear_has_txn_status();
  }
  txn_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.txn_status)
}

// optional string af_level = 14;
inline bool UpdateRecord::has_af_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UpdateRecord::set_has_af_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UpdateRecord::clear_has_af_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UpdateRecord::clear_af_level() {
  af_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_level();
}
inline const ::std::string& UpdateRecord::af_level() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.af_level)
  return af_level_.GetNoArena();
}
inline void UpdateRecord::set_af_level(const ::std::string& value) {
  set_has_af_level();
  af_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.af_level)
}
#if LANG_CXX11
inline void UpdateRecord::set_af_level(::std::string&& value) {
  set_has_af_level();
  af_level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.af_level)
}
#endif
inline void UpdateRecord::set_af_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_level();
  af_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.af_level)
}
inline void UpdateRecord::set_af_level(const char* value, size_t size) {
  set_has_af_level();
  af_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.af_level)
}
inline ::std::string* UpdateRecord::mutable_af_level() {
  set_has_af_level();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.af_level)
  return af_level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRecord::release_af_level() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.af_level)
  clear_has_af_level();
  return af_level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRecord::set_allocated_af_level(::std::string* af_level) {
  if (af_level != NULL) {
    set_has_af_level();
  } else {
    clear_has_af_level();
  }
  af_level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_level);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.af_level)
}

// optional string af_code = 15;
inline bool UpdateRecord::has_af_code() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UpdateRecord::set_has_af_code() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UpdateRecord::clear_has_af_code() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UpdateRecord::clear_af_code() {
  af_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_code();
}
inline const ::std::string& UpdateRecord::af_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.UpdateRecord.af_code)
  return af_code_.GetNoArena();
}
inline void UpdateRecord::set_af_code(const ::std::string& value) {
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.UpdateRecord.af_code)
}
#if LANG_CXX11
inline void UpdateRecord::set_af_code(::std::string&& value) {
  set_has_af_code();
  af_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.UpdateRecord.af_code)
}
#endif
inline void UpdateRecord::set_af_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.UpdateRecord.af_code)
}
inline void UpdateRecord::set_af_code(const char* value, size_t size) {
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.UpdateRecord.af_code)
}
inline ::std::string* UpdateRecord::mutable_af_code() {
  set_has_af_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.UpdateRecord.af_code)
  return af_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRecord::release_af_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.UpdateRecord.af_code)
  clear_has_af_code();
  return af_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRecord::set_allocated_af_code(::std::string* af_code) {
  if (af_code != NULL) {
    set_has_af_code();
  } else {
    clear_has_af_code();
  }
  af_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.UpdateRecord.af_code)
}

// -------------------------------------------------------------------

// DumpRecord

// required string trans_id = 1;
inline bool DumpRecord::has_trans_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DumpRecord::set_has_trans_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DumpRecord::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DumpRecord::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trans_id();
}
inline const ::std::string& DumpRecord::trans_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.trans_id)
  return trans_id_.GetNoArena();
}
inline void DumpRecord::set_trans_id(const ::std::string& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.trans_id)
}
#if LANG_CXX11
inline void DumpRecord::set_trans_id(::std::string&& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.trans_id)
}
#endif
inline void DumpRecord::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.trans_id)
}
inline void DumpRecord::set_trans_id(const char* value, size_t size) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.trans_id)
}
inline ::std::string* DumpRecord::mutable_trans_id() {
  set_has_trans_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_trans_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.trans_id)
  clear_has_trans_id();
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != NULL) {
    set_has_trans_id();
  } else {
    clear_has_trans_id();
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.trans_id)
}

// required string internal_id = 2;
inline bool DumpRecord::has_internal_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DumpRecord::set_has_internal_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DumpRecord::clear_has_internal_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DumpRecord::clear_internal_id() {
  internal_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_internal_id();
}
inline const ::std::string& DumpRecord::internal_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.internal_id)
  return internal_id_.GetNoArena();
}
inline void DumpRecord::set_internal_id(const ::std::string& value) {
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.internal_id)
}
#if LANG_CXX11
inline void DumpRecord::set_internal_id(::std::string&& value) {
  set_has_internal_id();
  internal_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.internal_id)
}
#endif
inline void DumpRecord::set_internal_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.internal_id)
}
inline void DumpRecord::set_internal_id(const char* value, size_t size) {
  set_has_internal_id();
  internal_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.internal_id)
}
inline ::std::string* DumpRecord::mutable_internal_id() {
  set_has_internal_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.internal_id)
  return internal_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_internal_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.internal_id)
  clear_has_internal_id();
  return internal_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_internal_id(::std::string* internal_id) {
  if (internal_id != NULL) {
    set_has_internal_id();
  } else {
    clear_has_internal_id();
  }
  internal_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), internal_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.internal_id)
}

// required string card_number = 3;
inline bool DumpRecord::has_card_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DumpRecord::set_has_card_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DumpRecord::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DumpRecord::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_number();
}
inline const ::std::string& DumpRecord::card_number() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.card_number)
  return card_number_.GetNoArena();
}
inline void DumpRecord::set_card_number(const ::std::string& value) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.card_number)
}
#if LANG_CXX11
inline void DumpRecord::set_card_number(::std::string&& value) {
  set_has_card_number();
  card_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.card_number)
}
#endif
inline void DumpRecord::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.card_number)
}
inline void DumpRecord::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.card_number)
}
inline ::std::string* DumpRecord::mutable_card_number() {
  set_has_card_number();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_card_number() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.card_number)
  clear_has_card_number();
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    set_has_card_number();
  } else {
    clear_has_card_number();
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.card_number)
}

// required string card_id = 4;
inline bool DumpRecord::has_card_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DumpRecord::set_has_card_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DumpRecord::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DumpRecord::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
inline const ::std::string& DumpRecord::card_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.card_id)
  return card_id_.GetNoArena();
}
inline void DumpRecord::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.card_id)
}
#if LANG_CXX11
inline void DumpRecord::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.card_id)
}
#endif
inline void DumpRecord::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.card_id)
}
inline void DumpRecord::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.card_id)
}
inline ::std::string* DumpRecord::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_card_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.card_id)
}

// required string auth_code = 5;
inline bool DumpRecord::has_auth_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DumpRecord::set_has_auth_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DumpRecord::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DumpRecord::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_code();
}
inline const ::std::string& DumpRecord::auth_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.auth_code)
  return auth_code_.GetNoArena();
}
inline void DumpRecord::set_auth_code(const ::std::string& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.auth_code)
}
#if LANG_CXX11
inline void DumpRecord::set_auth_code(::std::string&& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.auth_code)
}
#endif
inline void DumpRecord::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.auth_code)
}
inline void DumpRecord::set_auth_code(const char* value, size_t size) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.auth_code)
}
inline ::std::string* DumpRecord::mutable_auth_code() {
  set_has_auth_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_auth_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.auth_code)
  clear_has_auth_code();
  return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != NULL) {
    set_has_auth_code();
  } else {
    clear_has_auth_code();
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.auth_code)
}

// required string txn_status = 6;
inline bool DumpRecord::has_txn_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DumpRecord::set_has_txn_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DumpRecord::clear_has_txn_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DumpRecord::clear_txn_status() {
  txn_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txn_status();
}
inline const ::std::string& DumpRecord::txn_status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.txn_status)
  return txn_status_.GetNoArena();
}
inline void DumpRecord::set_txn_status(const ::std::string& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.txn_status)
}
#if LANG_CXX11
inline void DumpRecord::set_txn_status(::std::string&& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.txn_status)
}
#endif
inline void DumpRecord::set_txn_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.txn_status)
}
inline void DumpRecord::set_txn_status(const char* value, size_t size) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.txn_status)
}
inline ::std::string* DumpRecord::mutable_txn_status() {
  set_has_txn_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.txn_status)
  return txn_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_txn_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.txn_status)
  clear_has_txn_status();
  return txn_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_txn_status(::std::string* txn_status) {
  if (txn_status != NULL) {
    set_has_txn_status();
  } else {
    clear_has_txn_status();
  }
  txn_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.txn_status)
}

// required string user_id = 7;
inline bool DumpRecord::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DumpRecord::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DumpRecord::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DumpRecord::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& DumpRecord::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.user_id)
  return user_id_.GetNoArena();
}
inline void DumpRecord::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.user_id)
}
#if LANG_CXX11
inline void DumpRecord::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.user_id)
}
#endif
inline void DumpRecord::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.user_id)
}
inline void DumpRecord::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.user_id)
}
inline ::std::string* DumpRecord::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_user_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.user_id)
}

// required string client_id = 8;
inline bool DumpRecord::has_client_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DumpRecord::set_has_client_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DumpRecord::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DumpRecord::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
inline const ::std::string& DumpRecord::client_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.client_id)
  return client_id_.GetNoArena();
}
inline void DumpRecord::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.client_id)
}
#if LANG_CXX11
inline void DumpRecord::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.client_id)
}
#endif
inline void DumpRecord::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.client_id)
}
inline void DumpRecord::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.client_id)
}
inline ::std::string* DumpRecord::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_client_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.client_id)
}

// required uint64 amount = 9;
inline bool DumpRecord::has_amount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DumpRecord::set_has_amount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DumpRecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DumpRecord::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 DumpRecord::amount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.amount)
  return amount_;
}
inline void DumpRecord::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.amount)
}

// required uint64 ts = 10;
inline bool DumpRecord::has_ts() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DumpRecord::set_has_ts() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DumpRecord::clear_has_ts() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DumpRecord::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
inline ::google::protobuf::uint64 DumpRecord::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.ts)
  return ts_;
}
inline void DumpRecord::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.ts)
}

// required string ip = 11;
inline bool DumpRecord::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DumpRecord::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DumpRecord::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DumpRecord::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& DumpRecord::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.ip)
  return ip_.GetNoArena();
}
inline void DumpRecord::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.ip)
}
#if LANG_CXX11
inline void DumpRecord::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.ip)
}
#endif
inline void DumpRecord::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.ip)
}
inline void DumpRecord::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.ip)
}
inline ::std::string* DumpRecord::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.ip)
}

// required string nick = 12;
inline bool DumpRecord::has_nick() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DumpRecord::set_has_nick() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DumpRecord::clear_has_nick() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DumpRecord::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick();
}
inline const ::std::string& DumpRecord::nick() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.nick)
  return nick_.GetNoArena();
}
inline void DumpRecord::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.nick)
}
#if LANG_CXX11
inline void DumpRecord::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.nick)
}
#endif
inline void DumpRecord::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.nick)
}
inline void DumpRecord::set_nick(const char* value, size_t size) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.nick)
}
inline ::std::string* DumpRecord::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_nick() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.nick)
  clear_has_nick();
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.nick)
}

// required string light_id = 13;
inline bool DumpRecord::has_light_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DumpRecord::set_has_light_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DumpRecord::clear_has_light_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DumpRecord::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_light_id();
}
inline const ::std::string& DumpRecord::light_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.light_id)
  return light_id_.GetNoArena();
}
inline void DumpRecord::set_light_id(const ::std::string& value) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.light_id)
}
#if LANG_CXX11
inline void DumpRecord::set_light_id(::std::string&& value) {
  set_has_light_id();
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.light_id)
}
#endif
inline void DumpRecord::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.light_id)
}
inline void DumpRecord::set_light_id(const char* value, size_t size) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.light_id)
}
inline ::std::string* DumpRecord::mutable_light_id() {
  set_has_light_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_light_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.light_id)
  clear_has_light_id();
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    set_has_light_id();
  } else {
    clear_has_light_id();
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.light_id)
}

// required string vid = 14;
inline bool DumpRecord::has_vid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DumpRecord::set_has_vid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DumpRecord::clear_has_vid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DumpRecord::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
inline const ::std::string& DumpRecord::vid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.vid)
  return vid_.GetNoArena();
}
inline void DumpRecord::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.vid)
}
#if LANG_CXX11
inline void DumpRecord::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.vid)
}
#endif
inline void DumpRecord::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.vid)
}
inline void DumpRecord::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.vid)
}
inline ::std::string* DumpRecord::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_vid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.vid)
}

// required string dmr_uid = 15;
inline bool DumpRecord::has_dmr_uid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DumpRecord::set_has_dmr_uid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DumpRecord::clear_has_dmr_uid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DumpRecord::clear_dmr_uid() {
  dmr_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dmr_uid();
}
inline const ::std::string& DumpRecord::dmr_uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
  return dmr_uid_.GetNoArena();
}
inline void DumpRecord::set_dmr_uid(const ::std::string& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
}
#if LANG_CXX11
inline void DumpRecord::set_dmr_uid(::std::string&& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
}
#endif
inline void DumpRecord::set_dmr_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
}
inline void DumpRecord::set_dmr_uid(const char* value, size_t size) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
}
inline ::std::string* DumpRecord::mutable_dmr_uid() {
  set_has_dmr_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
  return dmr_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_dmr_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
  clear_has_dmr_uid();
  return dmr_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_dmr_uid(::std::string* dmr_uid) {
  if (dmr_uid != NULL) {
    set_has_dmr_uid();
  } else {
    clear_has_dmr_uid();
  }
  dmr_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dmr_uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.dmr_uid)
}

// required uint32 currency = 16;
inline bool DumpRecord::has_currency() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DumpRecord::set_has_currency() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DumpRecord::clear_has_currency() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DumpRecord::clear_currency() {
  currency_ = 0u;
  clear_has_currency();
}
inline ::google::protobuf::uint32 DumpRecord::currency() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.currency)
  return currency_;
}
inline void DumpRecord::set_currency(::google::protobuf::uint32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.currency)
}

// required string af_bpc = 17;
inline bool DumpRecord::has_af_bpc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DumpRecord::set_has_af_bpc() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DumpRecord::clear_has_af_bpc() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DumpRecord::clear_af_bpc() {
  af_bpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_bpc();
}
inline const ::std::string& DumpRecord::af_bpc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
  return af_bpc_.GetNoArena();
}
inline void DumpRecord::set_af_bpc(const ::std::string& value) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
}
#if LANG_CXX11
inline void DumpRecord::set_af_bpc(::std::string&& value) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
}
#endif
inline void DumpRecord::set_af_bpc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
}
inline void DumpRecord::set_af_bpc(const char* value, size_t size) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
}
inline ::std::string* DumpRecord::mutable_af_bpc() {
  set_has_af_bpc();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
  return af_bpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_af_bpc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
  clear_has_af_bpc();
  return af_bpc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_af_bpc(::std::string* af_bpc) {
  if (af_bpc != NULL) {
    set_has_af_bpc();
  } else {
    clear_has_af_bpc();
  }
  af_bpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_bpc);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.af_bpc)
}

// required string af_mail = 18;
inline bool DumpRecord::has_af_mail() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DumpRecord::set_has_af_mail() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DumpRecord::clear_has_af_mail() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DumpRecord::clear_af_mail() {
  af_mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_mail();
}
inline const ::std::string& DumpRecord::af_mail() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.af_mail)
  return af_mail_.GetNoArena();
}
inline void DumpRecord::set_af_mail(const ::std::string& value) {
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.af_mail)
}
#if LANG_CXX11
inline void DumpRecord::set_af_mail(::std::string&& value) {
  set_has_af_mail();
  af_mail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.af_mail)
}
#endif
inline void DumpRecord::set_af_mail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.af_mail)
}
inline void DumpRecord::set_af_mail(const char* value, size_t size) {
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.af_mail)
}
inline ::std::string* DumpRecord::mutable_af_mail() {
  set_has_af_mail();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.af_mail)
  return af_mail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_af_mail() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.af_mail)
  clear_has_af_mail();
  return af_mail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_af_mail(::std::string* af_mail) {
  if (af_mail != NULL) {
    set_has_af_mail();
  } else {
    clear_has_af_mail();
  }
  af_mail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_mail);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.af_mail)
}

// required uint32 i3ds = 19;
inline bool DumpRecord::has_i3ds() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DumpRecord::set_has_i3ds() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DumpRecord::clear_has_i3ds() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DumpRecord::clear_i3ds() {
  i3ds_ = 0u;
  clear_has_i3ds();
}
inline ::google::protobuf::uint32 DumpRecord::i3ds() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.i3ds)
  return i3ds_;
}
inline void DumpRecord::set_i3ds(::google::protobuf::uint32 value) {
  set_has_i3ds();
  i3ds_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.i3ds)
}

// required string body = 20;
inline bool DumpRecord::has_body() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DumpRecord::set_has_body() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DumpRecord::clear_has_body() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DumpRecord::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& DumpRecord::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.DumpRecord.body)
  return body_.GetNoArena();
}
inline void DumpRecord::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.DumpRecord.body)
}
#if LANG_CXX11
inline void DumpRecord::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.DumpRecord.body)
}
#endif
inline void DumpRecord::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.DumpRecord.body)
}
inline void DumpRecord::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.DumpRecord.body)
}
inline ::std::string* DumpRecord::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.DumpRecord.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DumpRecord::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.DumpRecord.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DumpRecord::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.DumpRecord.body)
}

// -------------------------------------------------------------------

// LogRecord

// required string qid = 1;
inline bool LogRecord::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRecord::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRecord::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRecord::clear_qid() {
  qid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qid();
}
inline const ::std::string& LogRecord::qid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.qid)
  return qid_.GetNoArena();
}
inline void LogRecord::set_qid(const ::std::string& value) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.LogRecord.qid)
}
#if LANG_CXX11
inline void LogRecord::set_qid(::std::string&& value) {
  set_has_qid();
  qid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.LogRecord.qid)
}
#endif
inline void LogRecord::set_qid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.LogRecord.qid)
}
inline void LogRecord::set_qid(const char* value, size_t size) {
  set_has_qid();
  qid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.LogRecord.qid)
}
inline ::std::string* LogRecord::mutable_qid() {
  set_has_qid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.LogRecord.qid)
  return qid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_qid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.LogRecord.qid)
  clear_has_qid();
  return qid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_qid(::std::string* qid) {
  if (qid != NULL) {
    set_has_qid();
  } else {
    clear_has_qid();
  }
  qid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.LogRecord.qid)
}

// required uint64 log_ts = 2;
inline bool LogRecord::has_log_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogRecord::set_has_log_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogRecord::clear_has_log_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogRecord::clear_log_ts() {
  log_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_log_ts();
}
inline ::google::protobuf::uint64 LogRecord::log_ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.log_ts)
  return log_ts_;
}
inline void LogRecord::set_log_ts(::google::protobuf::uint64 value) {
  set_has_log_ts();
  log_ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.LogRecord.log_ts)
}

// required .ru.mail.go.anti_fraud.LogRecord.RecordType type = 3;
inline bool LogRecord::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogRecord::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ru::mail::go::anti_fraud::LogRecord_RecordType LogRecord::type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.type)
  return static_cast< ::ru::mail::go::anti_fraud::LogRecord_RecordType >(type_);
}
inline void LogRecord::set_type(::ru::mail::go::anti_fraud::LogRecord_RecordType value) {
  assert(::ru::mail::go::anti_fraud::LogRecord_RecordType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.LogRecord.type)
}

// optional .ru.mail.go.anti_fraud.CheckRecord check_record = 4;
inline bool LogRecord::has_check_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRecord::set_has_check_record() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRecord::clear_has_check_record() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRecord::clear_check_record() {
  if (check_record_ != NULL) check_record_->::ru::mail::go::anti_fraud::CheckRecord::Clear();
  clear_has_check_record();
}
inline const ::ru::mail::go::anti_fraud::CheckRecord& LogRecord::check_record() const {
  const ::ru::mail::go::anti_fraud::CheckRecord* p = check_record_;
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.check_record)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::anti_fraud::CheckRecord*>(
      &::ru::mail::go::anti_fraud::_CheckRecord_default_instance_);
}
inline ::ru::mail::go::anti_fraud::CheckRecord* LogRecord::mutable_check_record() {
  set_has_check_record();
  if (check_record_ == NULL) {
    check_record_ = new ::ru::mail::go::anti_fraud::CheckRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.LogRecord.check_record)
  return check_record_;
}
inline ::ru::mail::go::anti_fraud::CheckRecord* LogRecord::release_check_record() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.LogRecord.check_record)
  clear_has_check_record();
  ::ru::mail::go::anti_fraud::CheckRecord* temp = check_record_;
  check_record_ = NULL;
  return temp;
}
inline void LogRecord::set_allocated_check_record(::ru::mail::go::anti_fraud::CheckRecord* check_record) {
  delete check_record_;
  check_record_ = check_record;
  if (check_record) {
    set_has_check_record();
  } else {
    clear_has_check_record();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.LogRecord.check_record)
}

// optional .ru.mail.go.anti_fraud.UpdateRecord update_record = 5;
inline bool LogRecord::has_update_record() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogRecord::set_has_update_record() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogRecord::clear_has_update_record() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogRecord::clear_update_record() {
  if (update_record_ != NULL) update_record_->::ru::mail::go::anti_fraud::UpdateRecord::Clear();
  clear_has_update_record();
}
inline const ::ru::mail::go::anti_fraud::UpdateRecord& LogRecord::update_record() const {
  const ::ru::mail::go::anti_fraud::UpdateRecord* p = update_record_;
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.update_record)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::anti_fraud::UpdateRecord*>(
      &::ru::mail::go::anti_fraud::_UpdateRecord_default_instance_);
}
inline ::ru::mail::go::anti_fraud::UpdateRecord* LogRecord::mutable_update_record() {
  set_has_update_record();
  if (update_record_ == NULL) {
    update_record_ = new ::ru::mail::go::anti_fraud::UpdateRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.LogRecord.update_record)
  return update_record_;
}
inline ::ru::mail::go::anti_fraud::UpdateRecord* LogRecord::release_update_record() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.LogRecord.update_record)
  clear_has_update_record();
  ::ru::mail::go::anti_fraud::UpdateRecord* temp = update_record_;
  update_record_ = NULL;
  return temp;
}
inline void LogRecord::set_allocated_update_record(::ru::mail::go::anti_fraud::UpdateRecord* update_record) {
  delete update_record_;
  update_record_ = update_record;
  if (update_record) {
    set_has_update_record();
  } else {
    clear_has_update_record();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.LogRecord.update_record)
}

// required string body = 6;
inline bool LogRecord::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRecord::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRecord::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRecord::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
inline const ::std::string& LogRecord::body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.LogRecord.body)
  return body_.GetNoArena();
}
inline void LogRecord::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.LogRecord.body)
}
#if LANG_CXX11
inline void LogRecord::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.LogRecord.body)
}
#endif
inline void LogRecord::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.LogRecord.body)
}
inline void LogRecord::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.LogRecord.body)
}
inline ::std::string* LogRecord::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.LogRecord.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecord::release_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.LogRecord.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecord::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.LogRecord.body)
}

// -------------------------------------------------------------------

// Record

// required string trans_id = 1;
inline bool Record::has_trans_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_trans_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trans_id();
}
inline const ::std::string& Record::trans_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Record.trans_id)
  return trans_id_.GetNoArena();
}
inline void Record::set_trans_id(const ::std::string& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Record.trans_id)
}
#if LANG_CXX11
inline void Record::set_trans_id(::std::string&& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Record.trans_id)
}
#endif
inline void Record::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Record.trans_id)
}
inline void Record::set_trans_id(const char* value, size_t size) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Record.trans_id)
}
inline ::std::string* Record::mutable_trans_id() {
  set_has_trans_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Record.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_trans_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Record.trans_id)
  clear_has_trans_id();
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != NULL) {
    set_has_trans_id();
  } else {
    clear_has_trans_id();
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Record.trans_id)
}

// optional .ru.mail.go.anti_fraud.LogRecord log_record = 2;
inline bool Record::has_log_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_log_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_log_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_log_record() {
  if (log_record_ != NULL) log_record_->::ru::mail::go::anti_fraud::LogRecord::Clear();
  clear_has_log_record();
}
inline const ::ru::mail::go::anti_fraud::LogRecord& Record::log_record() const {
  const ::ru::mail::go::anti_fraud::LogRecord* p = log_record_;
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Record.log_record)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::anti_fraud::LogRecord*>(
      &::ru::mail::go::anti_fraud::_LogRecord_default_instance_);
}
inline ::ru::mail::go::anti_fraud::LogRecord* Record::mutable_log_record() {
  set_has_log_record();
  if (log_record_ == NULL) {
    log_record_ = new ::ru::mail::go::anti_fraud::LogRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Record.log_record)
  return log_record_;
}
inline ::ru::mail::go::anti_fraud::LogRecord* Record::release_log_record() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Record.log_record)
  clear_has_log_record();
  ::ru::mail::go::anti_fraud::LogRecord* temp = log_record_;
  log_record_ = NULL;
  return temp;
}
inline void Record::set_allocated_log_record(::ru::mail::go::anti_fraud::LogRecord* log_record) {
  delete log_record_;
  log_record_ = log_record;
  if (log_record) {
    set_has_log_record();
  } else {
    clear_has_log_record();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Record.log_record)
}

// optional .ru.mail.go.anti_fraud.DumpRecord dump_record = 3;
inline bool Record::has_dump_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::set_has_dump_record() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Record::clear_has_dump_record() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Record::clear_dump_record() {
  if (dump_record_ != NULL) dump_record_->::ru::mail::go::anti_fraud::DumpRecord::Clear();
  clear_has_dump_record();
}
inline const ::ru::mail::go::anti_fraud::DumpRecord& Record::dump_record() const {
  const ::ru::mail::go::anti_fraud::DumpRecord* p = dump_record_;
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Record.dump_record)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::anti_fraud::DumpRecord*>(
      &::ru::mail::go::anti_fraud::_DumpRecord_default_instance_);
}
inline ::ru::mail::go::anti_fraud::DumpRecord* Record::mutable_dump_record() {
  set_has_dump_record();
  if (dump_record_ == NULL) {
    dump_record_ = new ::ru::mail::go::anti_fraud::DumpRecord;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Record.dump_record)
  return dump_record_;
}
inline ::ru::mail::go::anti_fraud::DumpRecord* Record::release_dump_record() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Record.dump_record)
  clear_has_dump_record();
  ::ru::mail::go::anti_fraud::DumpRecord* temp = dump_record_;
  dump_record_ = NULL;
  return temp;
}
inline void Record::set_allocated_dump_record(::ru::mail::go::anti_fraud::DumpRecord* dump_record) {
  delete dump_record_;
  dump_record_ = dump_record;
  if (dump_record) {
    set_has_dump_record();
  } else {
    clear_has_dump_record();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Record.dump_record)
}

// -------------------------------------------------------------------

// Transaction

// required string trans_id = 1;
inline bool Transaction::has_trans_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction::set_has_trans_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction::clear_has_trans_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction::clear_trans_id() {
  trans_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trans_id();
}
inline const ::std::string& Transaction::trans_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.trans_id)
  return trans_id_.GetNoArena();
}
inline void Transaction::set_trans_id(const ::std::string& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.trans_id)
}
#if LANG_CXX11
inline void Transaction::set_trans_id(::std::string&& value) {
  set_has_trans_id();
  trans_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.trans_id)
}
#endif
inline void Transaction::set_trans_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.trans_id)
}
inline void Transaction::set_trans_id(const char* value, size_t size) {
  set_has_trans_id();
  trans_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.trans_id)
}
inline ::std::string* Transaction::mutable_trans_id() {
  set_has_trans_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.trans_id)
  return trans_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_trans_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.trans_id)
  clear_has_trans_id();
  return trans_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_trans_id(::std::string* trans_id) {
  if (trans_id != NULL) {
    set_has_trans_id();
  } else {
    clear_has_trans_id();
  }
  trans_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trans_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.trans_id)
}

// required string card_number = 2;
inline bool Transaction::has_card_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction::set_has_card_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction::clear_card_number() {
  card_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_number();
}
inline const ::std::string& Transaction::card_number() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.card_number)
  return card_number_.GetNoArena();
}
inline void Transaction::set_card_number(const ::std::string& value) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.card_number)
}
#if LANG_CXX11
inline void Transaction::set_card_number(::std::string&& value) {
  set_has_card_number();
  card_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.card_number)
}
#endif
inline void Transaction::set_card_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.card_number)
}
inline void Transaction::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  card_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.card_number)
}
inline ::std::string* Transaction::mutable_card_number() {
  set_has_card_number();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.card_number)
  return card_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_card_number() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.card_number)
  clear_has_card_number();
  return card_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_card_number(::std::string* card_number) {
  if (card_number != NULL) {
    set_has_card_number();
  } else {
    clear_has_card_number();
  }
  card_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_number);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.card_number)
}

// required string card_id = 3;
inline bool Transaction::has_card_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transaction::set_has_card_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transaction::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transaction::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
inline const ::std::string& Transaction::card_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.card_id)
  return card_id_.GetNoArena();
}
inline void Transaction::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.card_id)
}
#if LANG_CXX11
inline void Transaction::set_card_id(::std::string&& value) {
  set_has_card_id();
  card_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.card_id)
}
#endif
inline void Transaction::set_card_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.card_id)
}
inline void Transaction::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.card_id)
}
inline ::std::string* Transaction::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_card_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.card_id)
}

// optional string auth_code = 4;
inline bool Transaction::has_auth_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transaction::set_has_auth_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transaction::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transaction::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_code();
}
inline const ::std::string& Transaction::auth_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.auth_code)
  return auth_code_.GetNoArena();
}
inline void Transaction::set_auth_code(const ::std::string& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.auth_code)
}
#if LANG_CXX11
inline void Transaction::set_auth_code(::std::string&& value) {
  set_has_auth_code();
  auth_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.auth_code)
}
#endif
inline void Transaction::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.auth_code)
}
inline void Transaction::set_auth_code(const char* value, size_t size) {
  set_has_auth_code();
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.auth_code)
}
inline ::std::string* Transaction::mutable_auth_code() {
  set_has_auth_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_auth_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.auth_code)
  clear_has_auth_code();
  return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != NULL) {
    set_has_auth_code();
  } else {
    clear_has_auth_code();
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.auth_code)
}

// required string txn_status = 5;
inline bool Transaction::has_txn_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transaction::set_has_txn_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transaction::clear_has_txn_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transaction::clear_txn_status() {
  txn_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txn_status();
}
inline const ::std::string& Transaction::txn_status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.txn_status)
  return txn_status_.GetNoArena();
}
inline void Transaction::set_txn_status(const ::std::string& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.txn_status)
}
#if LANG_CXX11
inline void Transaction::set_txn_status(::std::string&& value) {
  set_has_txn_status();
  txn_status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.txn_status)
}
#endif
inline void Transaction::set_txn_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.txn_status)
}
inline void Transaction::set_txn_status(const char* value, size_t size) {
  set_has_txn_status();
  txn_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.txn_status)
}
inline ::std::string* Transaction::mutable_txn_status() {
  set_has_txn_status();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.txn_status)
  return txn_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_txn_status() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.txn_status)
  clear_has_txn_status();
  return txn_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_txn_status(::std::string* txn_status) {
  if (txn_status != NULL) {
    set_has_txn_status();
  } else {
    clear_has_txn_status();
  }
  txn_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txn_status);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.txn_status)
}

// required string user_id = 6;
inline bool Transaction::has_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transaction::set_has_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transaction::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transaction::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& Transaction::user_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.user_id)
  return user_id_.GetNoArena();
}
inline void Transaction::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.user_id)
}
#if LANG_CXX11
inline void Transaction::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.user_id)
}
#endif
inline void Transaction::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.user_id)
}
inline void Transaction::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.user_id)
}
inline ::std::string* Transaction::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_user_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.user_id)
}

// required string client_id = 7;
inline bool Transaction::has_client_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transaction::set_has_client_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transaction::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transaction::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
inline const ::std::string& Transaction::client_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.client_id)
  return client_id_.GetNoArena();
}
inline void Transaction::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.client_id)
}
#if LANG_CXX11
inline void Transaction::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.client_id)
}
#endif
inline void Transaction::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.client_id)
}
inline void Transaction::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.client_id)
}
inline ::std::string* Transaction::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_client_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.client_id)
  clear_has_client_id();
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.client_id)
}

// required uint64 amount = 8;
inline bool Transaction::has_amount() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Transaction::set_has_amount() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Transaction::clear_has_amount() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Transaction::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 Transaction::amount() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.amount)
  return amount_;
}
inline void Transaction::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.amount)
}

// required uint64 ts = 9;
inline bool Transaction::has_ts() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Transaction::set_has_ts() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Transaction::clear_has_ts() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Transaction::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
inline ::google::protobuf::uint64 Transaction::ts() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.ts)
  return ts_;
}
inline void Transaction::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.ts)
}

// required string ip = 10;
inline bool Transaction::has_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transaction::set_has_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transaction::clear_has_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transaction::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& Transaction::ip() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.ip)
  return ip_.GetNoArena();
}
inline void Transaction::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.ip)
}
#if LANG_CXX11
inline void Transaction::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.ip)
}
#endif
inline void Transaction::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.ip)
}
inline void Transaction::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.ip)
}
inline ::std::string* Transaction::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_ip() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.ip)
}

// optional string ip_country = 11;
inline bool Transaction::has_ip_country() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transaction::set_has_ip_country() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transaction::clear_has_ip_country() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transaction::clear_ip_country() {
  ip_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_country();
}
inline const ::std::string& Transaction::ip_country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.ip_country)
  return ip_country_.GetNoArena();
}
inline void Transaction::set_ip_country(const ::std::string& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.ip_country)
}
#if LANG_CXX11
inline void Transaction::set_ip_country(::std::string&& value) {
  set_has_ip_country();
  ip_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.ip_country)
}
#endif
inline void Transaction::set_ip_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.ip_country)
}
inline void Transaction::set_ip_country(const char* value, size_t size) {
  set_has_ip_country();
  ip_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.ip_country)
}
inline ::std::string* Transaction::mutable_ip_country() {
  set_has_ip_country();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.ip_country)
  return ip_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_ip_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.ip_country)
  clear_has_ip_country();
  return ip_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_ip_country(::std::string* ip_country) {
  if (ip_country != NULL) {
    set_has_ip_country();
  } else {
    clear_has_ip_country();
  }
  ip_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_country);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.ip_country)
}

// optional string card_country = 12;
inline bool Transaction::has_card_country() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Transaction::set_has_card_country() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Transaction::clear_has_card_country() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Transaction::clear_card_country() {
  card_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_country();
}
inline const ::std::string& Transaction::card_country() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.card_country)
  return card_country_.GetNoArena();
}
inline void Transaction::set_card_country(const ::std::string& value) {
  set_has_card_country();
  card_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.card_country)
}
#if LANG_CXX11
inline void Transaction::set_card_country(::std::string&& value) {
  set_has_card_country();
  card_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.card_country)
}
#endif
inline void Transaction::set_card_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_card_country();
  card_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.card_country)
}
inline void Transaction::set_card_country(const char* value, size_t size) {
  set_has_card_country();
  card_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.card_country)
}
inline ::std::string* Transaction::mutable_card_country() {
  set_has_card_country();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.card_country)
  return card_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_card_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.card_country)
  clear_has_card_country();
  return card_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_card_country(::std::string* card_country) {
  if (card_country != NULL) {
    set_has_card_country();
  } else {
    clear_has_card_country();
  }
  card_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_country);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.card_country)
}

// optional string nick = 13;
inline bool Transaction::has_nick() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Transaction::set_has_nick() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Transaction::clear_has_nick() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Transaction::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick();
}
inline const ::std::string& Transaction::nick() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.nick)
  return nick_.GetNoArena();
}
inline void Transaction::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.nick)
}
#if LANG_CXX11
inline void Transaction::set_nick(::std::string&& value) {
  set_has_nick();
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.nick)
}
#endif
inline void Transaction::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.nick)
}
inline void Transaction::set_nick(const char* value, size_t size) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.nick)
}
inline ::std::string* Transaction::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_nick() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.nick)
  clear_has_nick();
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.nick)
}

// optional string light_id = 14;
inline bool Transaction::has_light_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Transaction::set_has_light_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Transaction::clear_has_light_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Transaction::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_light_id();
}
inline const ::std::string& Transaction::light_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.light_id)
  return light_id_.GetNoArena();
}
inline void Transaction::set_light_id(const ::std::string& value) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.light_id)
}
#if LANG_CXX11
inline void Transaction::set_light_id(::std::string&& value) {
  set_has_light_id();
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.light_id)
}
#endif
inline void Transaction::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.light_id)
}
inline void Transaction::set_light_id(const char* value, size_t size) {
  set_has_light_id();
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.light_id)
}
inline ::std::string* Transaction::mutable_light_id() {
  set_has_light_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_light_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.light_id)
  clear_has_light_id();
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    set_has_light_id();
  } else {
    clear_has_light_id();
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.light_id)
}

// optional string vid = 15;
inline bool Transaction::has_vid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Transaction::set_has_vid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Transaction::clear_has_vid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Transaction::clear_vid() {
  vid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid();
}
inline const ::std::string& Transaction::vid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.vid)
  return vid_.GetNoArena();
}
inline void Transaction::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.vid)
}
#if LANG_CXX11
inline void Transaction::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.vid)
}
#endif
inline void Transaction::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.vid)
}
inline void Transaction::set_vid(const char* value, size_t size) {
  set_has_vid();
  vid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.vid)
}
inline ::std::string* Transaction::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.vid)
  return vid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_vid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.vid)
  clear_has_vid();
  return vid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.vid)
}

// optional string dmr_uid = 16;
inline bool Transaction::has_dmr_uid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Transaction::set_has_dmr_uid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Transaction::clear_has_dmr_uid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Transaction::clear_dmr_uid() {
  dmr_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dmr_uid();
}
inline const ::std::string& Transaction::dmr_uid() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.dmr_uid)
  return dmr_uid_.GetNoArena();
}
inline void Transaction::set_dmr_uid(const ::std::string& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.dmr_uid)
}
#if LANG_CXX11
inline void Transaction::set_dmr_uid(::std::string&& value) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.dmr_uid)
}
#endif
inline void Transaction::set_dmr_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.dmr_uid)
}
inline void Transaction::set_dmr_uid(const char* value, size_t size) {
  set_has_dmr_uid();
  dmr_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.dmr_uid)
}
inline ::std::string* Transaction::mutable_dmr_uid() {
  set_has_dmr_uid();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.dmr_uid)
  return dmr_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_dmr_uid() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.dmr_uid)
  clear_has_dmr_uid();
  return dmr_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_dmr_uid(::std::string* dmr_uid) {
  if (dmr_uid != NULL) {
    set_has_dmr_uid();
  } else {
    clear_has_dmr_uid();
  }
  dmr_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dmr_uid);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.dmr_uid)
}

// required uint32 currency = 17;
inline bool Transaction::has_currency() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Transaction::set_has_currency() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Transaction::clear_has_currency() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Transaction::clear_currency() {
  currency_ = 0u;
  clear_has_currency();
}
inline ::google::protobuf::uint32 Transaction::currency() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.currency)
  return currency_;
}
inline void Transaction::set_currency(::google::protobuf::uint32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.currency)
}

// optional string af_bpc = 18;
inline bool Transaction::has_af_bpc() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Transaction::set_has_af_bpc() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Transaction::clear_has_af_bpc() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Transaction::clear_af_bpc() {
  af_bpc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_bpc();
}
inline const ::std::string& Transaction::af_bpc() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.af_bpc)
  return af_bpc_.GetNoArena();
}
inline void Transaction::set_af_bpc(const ::std::string& value) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.af_bpc)
}
#if LANG_CXX11
inline void Transaction::set_af_bpc(::std::string&& value) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.af_bpc)
}
#endif
inline void Transaction::set_af_bpc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.af_bpc)
}
inline void Transaction::set_af_bpc(const char* value, size_t size) {
  set_has_af_bpc();
  af_bpc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.af_bpc)
}
inline ::std::string* Transaction::mutable_af_bpc() {
  set_has_af_bpc();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.af_bpc)
  return af_bpc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_af_bpc() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.af_bpc)
  clear_has_af_bpc();
  return af_bpc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_af_bpc(::std::string* af_bpc) {
  if (af_bpc != NULL) {
    set_has_af_bpc();
  } else {
    clear_has_af_bpc();
  }
  af_bpc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_bpc);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.af_bpc)
}

// optional string af_mail = 19;
inline bool Transaction::has_af_mail() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Transaction::set_has_af_mail() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Transaction::clear_has_af_mail() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Transaction::clear_af_mail() {
  af_mail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_mail();
}
inline const ::std::string& Transaction::af_mail() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.af_mail)
  return af_mail_.GetNoArena();
}
inline void Transaction::set_af_mail(const ::std::string& value) {
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.af_mail)
}
#if LANG_CXX11
inline void Transaction::set_af_mail(::std::string&& value) {
  set_has_af_mail();
  af_mail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.af_mail)
}
#endif
inline void Transaction::set_af_mail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.af_mail)
}
inline void Transaction::set_af_mail(const char* value, size_t size) {
  set_has_af_mail();
  af_mail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.af_mail)
}
inline ::std::string* Transaction::mutable_af_mail() {
  set_has_af_mail();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.af_mail)
  return af_mail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_af_mail() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.af_mail)
  clear_has_af_mail();
  return af_mail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_af_mail(::std::string* af_mail) {
  if (af_mail != NULL) {
    set_has_af_mail();
  } else {
    clear_has_af_mail();
  }
  af_mail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_mail);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.af_mail)
}

// optional uint32 i3ds = 20;
inline bool Transaction::has_i3ds() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Transaction::set_has_i3ds() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Transaction::clear_has_i3ds() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Transaction::clear_i3ds() {
  i3ds_ = 0u;
  clear_has_i3ds();
}
inline ::google::protobuf::uint32 Transaction::i3ds() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.i3ds)
  return i3ds_;
}
inline void Transaction::set_i3ds(::google::protobuf::uint32 value) {
  set_has_i3ds();
  i3ds_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.i3ds)
}

// optional string bank_name = 21;
inline bool Transaction::has_bank_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Transaction::set_has_bank_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Transaction::clear_has_bank_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Transaction::clear_bank_name() {
  bank_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bank_name();
}
inline const ::std::string& Transaction::bank_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.bank_name)
  return bank_name_.GetNoArena();
}
inline void Transaction::set_bank_name(const ::std::string& value) {
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.bank_name)
}
#if LANG_CXX11
inline void Transaction::set_bank_name(::std::string&& value) {
  set_has_bank_name();
  bank_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.bank_name)
}
#endif
inline void Transaction::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.bank_name)
}
inline void Transaction::set_bank_name(const char* value, size_t size) {
  set_has_bank_name();
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.bank_name)
}
inline ::std::string* Transaction::mutable_bank_name() {
  set_has_bank_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.bank_name)
  return bank_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_bank_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.bank_name)
  clear_has_bank_name();
  return bank_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_bank_name(::std::string* bank_name) {
  if (bank_name != NULL) {
    set_has_bank_name();
  } else {
    clear_has_bank_name();
  }
  bank_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.bank_name)
}

// optional uint32 status = 22;
inline bool Transaction::has_status() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Transaction::set_has_status() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Transaction::clear_has_status() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Transaction::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 Transaction::status() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.status)
  return status_;
}
inline void Transaction::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.status)
}

// optional string beneficiary_id = 23;
inline bool Transaction::has_beneficiary_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Transaction::set_has_beneficiary_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Transaction::clear_has_beneficiary_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Transaction::clear_beneficiary_id() {
  beneficiary_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_beneficiary_id();
}
inline const ::std::string& Transaction::beneficiary_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
  return beneficiary_id_.GetNoArena();
}
inline void Transaction::set_beneficiary_id(const ::std::string& value) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
}
#if LANG_CXX11
inline void Transaction::set_beneficiary_id(::std::string&& value) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
}
#endif
inline void Transaction::set_beneficiary_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
}
inline void Transaction::set_beneficiary_id(const char* value, size_t size) {
  set_has_beneficiary_id();
  beneficiary_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
}
inline ::std::string* Transaction::mutable_beneficiary_id() {
  set_has_beneficiary_id();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
  return beneficiary_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_beneficiary_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
  clear_has_beneficiary_id();
  return beneficiary_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_beneficiary_id(::std::string* beneficiary_id) {
  if (beneficiary_id != NULL) {
    set_has_beneficiary_id();
  } else {
    clear_has_beneficiary_id();
  }
  beneficiary_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beneficiary_id);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.beneficiary_id)
}

// optional string exp_date = 24;
inline bool Transaction::has_exp_date() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Transaction::set_has_exp_date() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Transaction::clear_has_exp_date() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Transaction::clear_exp_date() {
  exp_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_exp_date();
}
inline const ::std::string& Transaction::exp_date() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.exp_date)
  return exp_date_.GetNoArena();
}
inline void Transaction::set_exp_date(const ::std::string& value) {
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.exp_date)
}
#if LANG_CXX11
inline void Transaction::set_exp_date(::std::string&& value) {
  set_has_exp_date();
  exp_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.exp_date)
}
#endif
inline void Transaction::set_exp_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.exp_date)
}
inline void Transaction::set_exp_date(const char* value, size_t size) {
  set_has_exp_date();
  exp_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.exp_date)
}
inline ::std::string* Transaction::mutable_exp_date() {
  set_has_exp_date();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.exp_date)
  return exp_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_exp_date() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.exp_date)
  clear_has_exp_date();
  return exp_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_exp_date(::std::string* exp_date) {
  if (exp_date != NULL) {
    set_has_exp_date();
  } else {
    clear_has_exp_date();
  }
  exp_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exp_date);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.exp_date)
}

// optional string holder = 25;
inline bool Transaction::has_holder() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Transaction::set_has_holder() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Transaction::clear_has_holder() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Transaction::clear_holder() {
  holder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_holder();
}
inline const ::std::string& Transaction::holder() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.holder)
  return holder_.GetNoArena();
}
inline void Transaction::set_holder(const ::std::string& value) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.holder)
}
#if LANG_CXX11
inline void Transaction::set_holder(::std::string&& value) {
  set_has_holder();
  holder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.holder)
}
#endif
inline void Transaction::set_holder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.holder)
}
inline void Transaction::set_holder(const char* value, size_t size) {
  set_has_holder();
  holder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.holder)
}
inline ::std::string* Transaction::mutable_holder() {
  set_has_holder();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.holder)
  return holder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_holder() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.holder)
  clear_has_holder();
  return holder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_holder(::std::string* holder) {
  if (holder != NULL) {
    set_has_holder();
  } else {
    clear_has_holder();
  }
  holder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), holder);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.holder)
}

// optional string af_code = 26;
inline bool Transaction::has_af_code() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Transaction::set_has_af_code() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Transaction::clear_has_af_code() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Transaction::clear_af_code() {
  af_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_af_code();
}
inline const ::std::string& Transaction::af_code() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.af_code)
  return af_code_.GetNoArena();
}
inline void Transaction::set_af_code(const ::std::string& value) {
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.af_code)
}
#if LANG_CXX11
inline void Transaction::set_af_code(::std::string&& value) {
  set_has_af_code();
  af_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.af_code)
}
#endif
inline void Transaction::set_af_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.af_code)
}
inline void Transaction::set_af_code(const char* value, size_t size) {
  set_has_af_code();
  af_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.af_code)
}
inline ::std::string* Transaction::mutable_af_code() {
  set_has_af_code();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.af_code)
  return af_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_af_code() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.af_code)
  clear_has_af_code();
  return af_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_af_code(::std::string* af_code) {
  if (af_code != NULL) {
    set_has_af_code();
  } else {
    clear_has_af_code();
  }
  af_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), af_code);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.af_code)
}

// optional string check_body = 27;
inline bool Transaction::has_check_body() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Transaction::set_has_check_body() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Transaction::clear_has_check_body() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Transaction::clear_check_body() {
  check_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_check_body();
}
inline const ::std::string& Transaction::check_body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.check_body)
  return check_body_.GetNoArena();
}
inline void Transaction::set_check_body(const ::std::string& value) {
  set_has_check_body();
  check_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.check_body)
}
#if LANG_CXX11
inline void Transaction::set_check_body(::std::string&& value) {
  set_has_check_body();
  check_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.check_body)
}
#endif
inline void Transaction::set_check_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_check_body();
  check_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.check_body)
}
inline void Transaction::set_check_body(const char* value, size_t size) {
  set_has_check_body();
  check_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.check_body)
}
inline ::std::string* Transaction::mutable_check_body() {
  set_has_check_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.check_body)
  return check_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_check_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.check_body)
  clear_has_check_body();
  return check_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_check_body(::std::string* check_body) {
  if (check_body != NULL) {
    set_has_check_body();
  } else {
    clear_has_check_body();
  }
  check_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), check_body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.check_body)
}

// optional string update_body = 28;
inline bool Transaction::has_update_body() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Transaction::set_has_update_body() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Transaction::clear_has_update_body() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Transaction::clear_update_body() {
  update_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_update_body();
}
inline const ::std::string& Transaction::update_body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.update_body)
  return update_body_.GetNoArena();
}
inline void Transaction::set_update_body(const ::std::string& value) {
  set_has_update_body();
  update_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.update_body)
}
#if LANG_CXX11
inline void Transaction::set_update_body(::std::string&& value) {
  set_has_update_body();
  update_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.update_body)
}
#endif
inline void Transaction::set_update_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_update_body();
  update_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.update_body)
}
inline void Transaction::set_update_body(const char* value, size_t size) {
  set_has_update_body();
  update_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.update_body)
}
inline ::std::string* Transaction::mutable_update_body() {
  set_has_update_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.update_body)
  return update_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_update_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.update_body)
  clear_has_update_body();
  return update_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_update_body(::std::string* update_body) {
  if (update_body != NULL) {
    set_has_update_body();
  } else {
    clear_has_update_body();
  }
  update_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.update_body)
}

// optional string dump_body = 29;
inline bool Transaction::has_dump_body() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Transaction::set_has_dump_body() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Transaction::clear_has_dump_body() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Transaction::clear_dump_body() {
  dump_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dump_body();
}
inline const ::std::string& Transaction::dump_body() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.anti_fraud.Transaction.dump_body)
  return dump_body_.GetNoArena();
}
inline void Transaction::set_dump_body(const ::std::string& value) {
  set_has_dump_body();
  dump_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.anti_fraud.Transaction.dump_body)
}
#if LANG_CXX11
inline void Transaction::set_dump_body(::std::string&& value) {
  set_has_dump_body();
  dump_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.anti_fraud.Transaction.dump_body)
}
#endif
inline void Transaction::set_dump_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dump_body();
  dump_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.anti_fraud.Transaction.dump_body)
}
inline void Transaction::set_dump_body(const char* value, size_t size) {
  set_has_dump_body();
  dump_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.anti_fraud.Transaction.dump_body)
}
inline ::std::string* Transaction::mutable_dump_body() {
  set_has_dump_body();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.anti_fraud.Transaction.dump_body)
  return dump_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_dump_body() {
  // @@protoc_insertion_point(field_release:ru.mail.go.anti_fraud.Transaction.dump_body)
  clear_has_dump_body();
  return dump_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_dump_body(::std::string* dump_body) {
  if (dump_body != NULL) {
    set_has_dump_body();
  } else {
    clear_has_dump_body();
  }
  dump_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_body);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.anti_fraud.Transaction.dump_body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace anti_fraud
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::anti_fraud::LogRecord_RecordType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::anti_fraud::LogRecord_RecordType>() {
  return ::ru::mail::go::anti_fraud::LogRecord_RecordType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_antifraud_2eproto__INCLUDED
