// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: articles.proto

#ifndef PROTOBUF_articles_2eproto__INCLUDED
#define PROTOBUF_articles_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class ArticleAttachment;
class ArticleAttachmentDefaultTypeInternal;
extern ArticleAttachmentDefaultTypeInternal _ArticleAttachment_default_instance_;
class ArticlesImportDoc;
class ArticlesImportDocDefaultTypeInternal;
extern ArticlesImportDocDefaultTypeInternal _ArticlesImportDoc_default_instance_;

namespace protobuf_articles_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_articles_2eproto

enum ArticleType {
  NONE = 0,
  DZEN = 1,
  OK = 2,
  VK = 3
};
bool ArticleType_IsValid(int value);
const ArticleType ArticleType_MIN = NONE;
const ArticleType ArticleType_MAX = VK;
const int ArticleType_ARRAYSIZE = ArticleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArticleType_descriptor();
inline const ::std::string& ArticleType_Name(ArticleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArticleType_descriptor(), value);
}
inline bool ArticleType_Parse(
    const ::std::string& name, ArticleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArticleType>(
    ArticleType_descriptor(), name, value);
}
// ===================================================================

class ArticleAttachment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArticleAttachment) */ {
 public:
  ArticleAttachment();
  virtual ~ArticleAttachment();

  ArticleAttachment(const ArticleAttachment& from);

  inline ArticleAttachment& operator=(const ArticleAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArticleAttachment(ArticleAttachment&& from) noexcept
    : ArticleAttachment() {
    *this = ::std::move(from);
  }

  inline ArticleAttachment& operator=(ArticleAttachment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArticleAttachment& default_instance();

  static inline const ArticleAttachment* internal_default_instance() {
    return reinterpret_cast<const ArticleAttachment*>(
               &_ArticleAttachment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ArticleAttachment* other);
  friend void swap(ArticleAttachment& a, ArticleAttachment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArticleAttachment* New() const PROTOBUF_FINAL { return New(NULL); }

  ArticleAttachment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ArticleAttachment& from);
  void MergeFrom(const ArticleAttachment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ArticleAttachment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value(int index) const;
  ::std::string* mutable_value(int index);
  void set_value(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_value(int index, ::std::string&& value);
  #endif
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  ::std::string* add_value();
  void add_value(const ::std::string& value);
  #if LANG_CXX11
  void add_value(::std::string&& value);
  #endif
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // optional string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:ArticleAttachment)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  friend struct protobuf_articles_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ArticlesImportDoc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArticlesImportDoc) */ {
 public:
  ArticlesImportDoc();
  virtual ~ArticlesImportDoc();

  ArticlesImportDoc(const ArticlesImportDoc& from);

  inline ArticlesImportDoc& operator=(const ArticlesImportDoc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArticlesImportDoc(ArticlesImportDoc&& from) noexcept
    : ArticlesImportDoc() {
    *this = ::std::move(from);
  }

  inline ArticlesImportDoc& operator=(ArticlesImportDoc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArticlesImportDoc& default_instance();

  static inline const ArticlesImportDoc* internal_default_instance() {
    return reinterpret_cast<const ArticlesImportDoc*>(
               &_ArticlesImportDoc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ArticlesImportDoc* other);
  friend void swap(ArticlesImportDoc& a, ArticlesImportDoc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArticlesImportDoc* New() const PROTOBUF_FINAL { return New(NULL); }

  ArticlesImportDoc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ArticlesImportDoc& from);
  void MergeFrom(const ArticlesImportDoc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ArticlesImportDoc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ArticleAttachment attaches = 27;
  int attaches_size() const;
  void clear_attaches();
  static const int kAttachesFieldNumber = 27;
  const ::ArticleAttachment& attaches(int index) const;
  ::ArticleAttachment* mutable_attaches(int index);
  ::ArticleAttachment* add_attaches();
  ::google::protobuf::RepeatedPtrField< ::ArticleAttachment >*
      mutable_attaches();
  const ::google::protobuf::RepeatedPtrField< ::ArticleAttachment >&
      attaches() const;

  // repeated string attachTypes = 30;
  int attachtypes_size() const;
  void clear_attachtypes();
  static const int kAttachTypesFieldNumber = 30;
  const ::std::string& attachtypes(int index) const;
  ::std::string* mutable_attachtypes(int index);
  void set_attachtypes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_attachtypes(int index, ::std::string&& value);
  #endif
  void set_attachtypes(int index, const char* value);
  void set_attachtypes(int index, const char* value, size_t size);
  ::std::string* add_attachtypes();
  void add_attachtypes(const ::std::string& value);
  #if LANG_CXX11
  void add_attachtypes(::std::string&& value);
  #endif
  void add_attachtypes(const char* value);
  void add_attachtypes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& attachtypes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attachtypes();

  // repeated string hashTags = 31;
  int hashtags_size() const;
  void clear_hashtags();
  static const int kHashTagsFieldNumber = 31;
  const ::std::string& hashtags(int index) const;
  ::std::string* mutable_hashtags(int index);
  void set_hashtags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hashtags(int index, ::std::string&& value);
  #endif
  void set_hashtags(int index, const char* value);
  void set_hashtags(int index, const char* value, size_t size);
  ::std::string* add_hashtags();
  void add_hashtags(const ::std::string& value);
  #if LANG_CXX11
  void add_hashtags(::std::string&& value);
  #endif
  void add_hashtags(const char* value);
  void add_hashtags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hashtags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hashtags();

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string mongoId = 2;
  bool has_mongoid() const;
  void clear_mongoid();
  static const int kMongoIdFieldNumber = 2;
  const ::std::string& mongoid() const;
  void set_mongoid(const ::std::string& value);
  #if LANG_CXX11
  void set_mongoid(::std::string&& value);
  #endif
  void set_mongoid(const char* value);
  void set_mongoid(const char* value, size_t size);
  ::std::string* mutable_mongoid();
  ::std::string* release_mongoid();
  void set_allocated_mongoid(::std::string* mongoid);

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string longUrl = 4;
  bool has_longurl() const;
  void clear_longurl();
  static const int kLongUrlFieldNumber = 4;
  const ::std::string& longurl() const;
  void set_longurl(const ::std::string& value);
  #if LANG_CXX11
  void set_longurl(::std::string&& value);
  #endif
  void set_longurl(const char* value);
  void set_longurl(const char* value, size_t size);
  ::std::string* mutable_longurl();
  ::std::string* release_longurl();
  void set_allocated_longurl(::std::string* longurl);

  // optional string mainImageUrl = 5;
  bool has_mainimageurl() const;
  void clear_mainimageurl();
  static const int kMainImageUrlFieldNumber = 5;
  const ::std::string& mainimageurl() const;
  void set_mainimageurl(const ::std::string& value);
  #if LANG_CXX11
  void set_mainimageurl(::std::string&& value);
  #endif
  void set_mainimageurl(const char* value);
  void set_mainimageurl(const char* value, size_t size);
  ::std::string* mutable_mainimageurl();
  ::std::string* release_mainimageurl();
  void set_allocated_mainimageurl(::std::string* mainimageurl);

  // optional string title = 6;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 6;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string content = 7;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 7;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string publisherId = 8;
  bool has_publisherid() const;
  void clear_publisherid();
  static const int kPublisherIdFieldNumber = 8;
  const ::std::string& publisherid() const;
  void set_publisherid(const ::std::string& value);
  #if LANG_CXX11
  void set_publisherid(::std::string&& value);
  #endif
  void set_publisherid(const char* value);
  void set_publisherid(const char* value, size_t size);
  ::std::string* mutable_publisherid();
  ::std::string* release_publisherid();
  void set_allocated_publisherid(::std::string* publisherid);

  // optional string publisherName = 9;
  bool has_publishername() const;
  void clear_publishername();
  static const int kPublisherNameFieldNumber = 9;
  const ::std::string& publishername() const;
  void set_publishername(const ::std::string& value);
  #if LANG_CXX11
  void set_publishername(::std::string&& value);
  #endif
  void set_publishername(const char* value);
  void set_publishername(const char* value, size_t size);
  ::std::string* mutable_publishername();
  ::std::string* release_publishername();
  void set_allocated_publishername(::std::string* publishername);

  // optional string publisherDesc = 10;
  bool has_publisherdesc() const;
  void clear_publisherdesc();
  static const int kPublisherDescFieldNumber = 10;
  const ::std::string& publisherdesc() const;
  void set_publisherdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_publisherdesc(::std::string&& value);
  #endif
  void set_publisherdesc(const char* value);
  void set_publisherdesc(const char* value, size_t size);
  ::std::string* mutable_publisherdesc();
  ::std::string* release_publisherdesc();
  void set_allocated_publisherdesc(::std::string* publisherdesc);

  // optional string certainGrade = 17;
  bool has_certaingrade() const;
  void clear_certaingrade();
  static const int kCertainGradeFieldNumber = 17;
  const ::std::string& certaingrade() const;
  void set_certaingrade(const ::std::string& value);
  #if LANG_CXX11
  void set_certaingrade(::std::string&& value);
  #endif
  void set_certaingrade(const char* value);
  void set_certaingrade(const char* value, size_t size);
  ::std::string* mutable_certaingrade();
  ::std::string* release_certaingrade();
  void set_allocated_certaingrade(::std::string* certaingrade);

  // optional string itemType = 18;
  bool has_itemtype() const;
  void clear_itemtype();
  static const int kItemTypeFieldNumber = 18;
  const ::std::string& itemtype() const;
  void set_itemtype(const ::std::string& value);
  #if LANG_CXX11
  void set_itemtype(::std::string&& value);
  #endif
  void set_itemtype(const char* value);
  void set_itemtype(const char* value, size_t size);
  ::std::string* mutable_itemtype();
  ::std::string* release_itemtype();
  void set_allocated_itemtype(::std::string* itemtype);

  // optional string itemId = 32;
  bool has_itemid() const;
  void clear_itemid();
  static const int kItemIdFieldNumber = 32;
  const ::std::string& itemid() const;
  void set_itemid(const ::std::string& value);
  #if LANG_CXX11
  void set_itemid(::std::string&& value);
  #endif
  void set_itemid(const char* value);
  void set_itemid(const char* value, size_t size);
  ::std::string* mutable_itemid();
  ::std::string* release_itemid();
  void set_allocated_itemid(::std::string* itemid);

  // optional uint64 publicationTime = 12;
  bool has_publicationtime() const;
  void clear_publicationtime();
  static const int kPublicationTimeFieldNumber = 12;
  ::google::protobuf::uint64 publicationtime() const;
  void set_publicationtime(::google::protobuf::uint64 value);

  // optional uint32 publisherSubscribers = 11;
  bool has_publishersubscribers() const;
  void clear_publishersubscribers();
  static const int kPublisherSubscribersFieldNumber = 11;
  ::google::protobuf::uint32 publishersubscribers() const;
  void set_publishersubscribers(::google::protobuf::uint32 value);

  // optional uint32 likesCnt = 14;
  bool has_likescnt() const;
  void clear_likescnt();
  static const int kLikesCntFieldNumber = 14;
  ::google::protobuf::uint32 likescnt() const;
  void set_likescnt(::google::protobuf::uint32 value);

  // optional uint64 viewsCnt = 13;
  bool has_viewscnt() const;
  void clear_viewscnt();
  static const int kViewsCntFieldNumber = 13;
  ::google::protobuf::uint64 viewscnt() const;
  void set_viewscnt(::google::protobuf::uint64 value);

  // optional uint32 dislikesCnt = 15;
  bool has_dislikescnt() const;
  void clear_dislikescnt();
  static const int kDislikesCntFieldNumber = 15;
  ::google::protobuf::uint32 dislikescnt() const;
  void set_dislikescnt(::google::protobuf::uint32 value);

  // optional uint32 commentsCnt = 16;
  bool has_commentscnt() const;
  void clear_commentscnt();
  static const int kCommentsCntFieldNumber = 16;
  ::google::protobuf::uint32 commentscnt() const;
  void set_commentscnt(::google::protobuf::uint32 value);

  // optional uint64 eventTimestamp = 20;
  bool has_eventtimestamp() const;
  void clear_eventtimestamp();
  static const int kEventTimestampFieldNumber = 20;
  ::google::protobuf::uint64 eventtimestamp() const;
  void set_eventtimestamp(::google::protobuf::uint64 value);

  // optional uint32 shares = 21;
  bool has_shares() const;
  void clear_shares();
  static const int kSharesFieldNumber = 21;
  ::google::protobuf::uint32 shares() const;
  void set_shares(::google::protobuf::uint32 value);

  // optional uint32 crClicks = 23;
  bool has_crclicks() const;
  void clear_crclicks();
  static const int kCrClicksFieldNumber = 23;
  ::google::protobuf::uint32 crclicks() const;
  void set_crclicks(::google::protobuf::uint32 value);

  // optional bool existInRecoSnapshot = 19;
  bool has_existinrecosnapshot() const;
  void clear_existinrecosnapshot();
  static const int kExistInRecoSnapshotFieldNumber = 19;
  bool existinrecosnapshot() const;
  void set_existinrecosnapshot(bool value);

  // optional bool verified = 22;
  bool has_verified() const;
  void clear_verified();
  static const int kVerifiedFieldNumber = 22;
  bool verified() const;
  void set_verified(bool value);

  // optional bool isDeleted = 29;
  bool has_isdeleted() const;
  void clear_isdeleted();
  static const int kIsDeletedFieldNumber = 29;
  bool isdeleted() const;
  void set_isdeleted(bool value);

  // optional uint32 crImps = 24;
  bool has_crimps() const;
  void clear_crimps();
  static const int kCrImpsFieldNumber = 24;
  ::google::protobuf::uint32 crimps() const;
  void set_crimps(::google::protobuf::uint32 value);

  // optional uint64 contentHash = 25;
  bool has_contenthash() const;
  void clear_contenthash();
  static const int kContentHashFieldNumber = 25;
  ::google::protobuf::uint64 contenthash() const;
  void set_contenthash(::google::protobuf::uint64 value);

  // optional double publisherQuality = 26;
  bool has_publisherquality() const;
  void clear_publisherquality();
  static const int kPublisherQualityFieldNumber = 26;
  double publisherquality() const;
  void set_publisherquality(double value);

  // optional .ArticleType type = 28;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 28;
  ::ArticleType type() const;
  void set_type(::ArticleType value);

  // @@protoc_insertion_point(class_scope:ArticlesImportDoc)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_mongoid();
  void clear_has_mongoid();
  void set_has_url();
  void clear_has_url();
  void set_has_longurl();
  void clear_has_longurl();
  void set_has_mainimageurl();
  void clear_has_mainimageurl();
  void set_has_title();
  void clear_has_title();
  void set_has_content();
  void clear_has_content();
  void set_has_publisherid();
  void clear_has_publisherid();
  void set_has_publishername();
  void clear_has_publishername();
  void set_has_publisherdesc();
  void clear_has_publisherdesc();
  void set_has_publishersubscribers();
  void clear_has_publishersubscribers();
  void set_has_publicationtime();
  void clear_has_publicationtime();
  void set_has_viewscnt();
  void clear_has_viewscnt();
  void set_has_likescnt();
  void clear_has_likescnt();
  void set_has_dislikescnt();
  void clear_has_dislikescnt();
  void set_has_commentscnt();
  void clear_has_commentscnt();
  void set_has_certaingrade();
  void clear_has_certaingrade();
  void set_has_itemtype();
  void clear_has_itemtype();
  void set_has_existinrecosnapshot();
  void clear_has_existinrecosnapshot();
  void set_has_shares();
  void clear_has_shares();
  void set_has_verified();
  void clear_has_verified();
  void set_has_eventtimestamp();
  void clear_has_eventtimestamp();
  void set_has_crclicks();
  void clear_has_crclicks();
  void set_has_crimps();
  void clear_has_crimps();
  void set_has_contenthash();
  void clear_has_contenthash();
  void set_has_publisherquality();
  void clear_has_publisherquality();
  void set_has_type();
  void clear_has_type();
  void set_has_isdeleted();
  void clear_has_isdeleted();
  void set_has_itemid();
  void clear_has_itemid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ArticleAttachment > attaches_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attachtypes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hashtags_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr mongoid_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr longurl_;
  ::google::protobuf::internal::ArenaStringPtr mainimageurl_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr publisherid_;
  ::google::protobuf::internal::ArenaStringPtr publishername_;
  ::google::protobuf::internal::ArenaStringPtr publisherdesc_;
  ::google::protobuf::internal::ArenaStringPtr certaingrade_;
  ::google::protobuf::internal::ArenaStringPtr itemtype_;
  ::google::protobuf::internal::ArenaStringPtr itemid_;
  ::google::protobuf::uint64 publicationtime_;
  ::google::protobuf::uint32 publishersubscribers_;
  ::google::protobuf::uint32 likescnt_;
  ::google::protobuf::uint64 viewscnt_;
  ::google::protobuf::uint32 dislikescnt_;
  ::google::protobuf::uint32 commentscnt_;
  ::google::protobuf::uint64 eventtimestamp_;
  ::google::protobuf::uint32 shares_;
  ::google::protobuf::uint32 crclicks_;
  bool existinrecosnapshot_;
  bool verified_;
  bool isdeleted_;
  ::google::protobuf::uint32 crimps_;
  ::google::protobuf::uint64 contenthash_;
  double publisherquality_;
  int type_;
  friend struct protobuf_articles_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArticleAttachment

// optional string type = 1;
inline bool ArticleAttachment::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArticleAttachment::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArticleAttachment::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArticleAttachment::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& ArticleAttachment::type() const {
  // @@protoc_insertion_point(field_get:ArticleAttachment.type)
  return type_.GetNoArena();
}
inline void ArticleAttachment::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticleAttachment.type)
}
#if LANG_CXX11
inline void ArticleAttachment::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticleAttachment.type)
}
#endif
inline void ArticleAttachment::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticleAttachment.type)
}
inline void ArticleAttachment::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticleAttachment.type)
}
inline ::std::string* ArticleAttachment::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ArticleAttachment.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticleAttachment::release_type() {
  // @@protoc_insertion_point(field_release:ArticleAttachment.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticleAttachment::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ArticleAttachment.type)
}

// repeated string value = 2;
inline int ArticleAttachment::value_size() const {
  return value_.size();
}
inline void ArticleAttachment::clear_value() {
  value_.Clear();
}
inline const ::std::string& ArticleAttachment::value(int index) const {
  // @@protoc_insertion_point(field_get:ArticleAttachment.value)
  return value_.Get(index);
}
inline ::std::string* ArticleAttachment::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:ArticleAttachment.value)
  return value_.Mutable(index);
}
inline void ArticleAttachment::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ArticleAttachment.value)
  value_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ArticleAttachment::set_value(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ArticleAttachment.value)
  value_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ArticleAttachment::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ArticleAttachment.value)
}
inline void ArticleAttachment::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ArticleAttachment.value)
}
inline ::std::string* ArticleAttachment::add_value() {
  // @@protoc_insertion_point(field_add_mutable:ArticleAttachment.value)
  return value_.Add();
}
inline void ArticleAttachment::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ArticleAttachment.value)
}
#if LANG_CXX11
inline void ArticleAttachment::add_value(::std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ArticleAttachment.value)
}
#endif
inline void ArticleAttachment::add_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ArticleAttachment.value)
}
inline void ArticleAttachment::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ArticleAttachment.value)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ArticleAttachment::value() const {
  // @@protoc_insertion_point(field_list:ArticleAttachment.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ArticleAttachment::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:ArticleAttachment.value)
  return &value_;
}

// -------------------------------------------------------------------

// ArticlesImportDoc

// optional string id = 1;
inline bool ArticlesImportDoc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArticlesImportDoc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArticlesImportDoc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArticlesImportDoc::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ArticlesImportDoc::id() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.id)
  return id_.GetNoArena();
}
inline void ArticlesImportDoc::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.id)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.id)
}
#endif
inline void ArticlesImportDoc::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.id)
}
inline void ArticlesImportDoc::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.id)
}
inline ::std::string* ArticlesImportDoc::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_id() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.id)
}

// optional string mongoId = 2;
inline bool ArticlesImportDoc::has_mongoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArticlesImportDoc::set_has_mongoid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArticlesImportDoc::clear_has_mongoid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArticlesImportDoc::clear_mongoid() {
  mongoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mongoid();
}
inline const ::std::string& ArticlesImportDoc::mongoid() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.mongoId)
  return mongoid_.GetNoArena();
}
inline void ArticlesImportDoc::set_mongoid(const ::std::string& value) {
  set_has_mongoid();
  mongoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.mongoId)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_mongoid(::std::string&& value) {
  set_has_mongoid();
  mongoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.mongoId)
}
#endif
inline void ArticlesImportDoc::set_mongoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mongoid();
  mongoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.mongoId)
}
inline void ArticlesImportDoc::set_mongoid(const char* value, size_t size) {
  set_has_mongoid();
  mongoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.mongoId)
}
inline ::std::string* ArticlesImportDoc::mutable_mongoid() {
  set_has_mongoid();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.mongoId)
  return mongoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_mongoid() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.mongoId)
  clear_has_mongoid();
  return mongoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_mongoid(::std::string* mongoid) {
  if (mongoid != NULL) {
    set_has_mongoid();
  } else {
    clear_has_mongoid();
  }
  mongoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mongoid);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.mongoId)
}

// optional string url = 3;
inline bool ArticlesImportDoc::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArticlesImportDoc::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArticlesImportDoc::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArticlesImportDoc::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& ArticlesImportDoc::url() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.url)
  return url_.GetNoArena();
}
inline void ArticlesImportDoc::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.url)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.url)
}
#endif
inline void ArticlesImportDoc::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.url)
}
inline void ArticlesImportDoc::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.url)
}
inline ::std::string* ArticlesImportDoc::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_url() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.url)
}

// optional string longUrl = 4;
inline bool ArticlesImportDoc::has_longurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArticlesImportDoc::set_has_longurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArticlesImportDoc::clear_has_longurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArticlesImportDoc::clear_longurl() {
  longurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_longurl();
}
inline const ::std::string& ArticlesImportDoc::longurl() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.longUrl)
  return longurl_.GetNoArena();
}
inline void ArticlesImportDoc::set_longurl(const ::std::string& value) {
  set_has_longurl();
  longurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.longUrl)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_longurl(::std::string&& value) {
  set_has_longurl();
  longurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.longUrl)
}
#endif
inline void ArticlesImportDoc::set_longurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_longurl();
  longurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.longUrl)
}
inline void ArticlesImportDoc::set_longurl(const char* value, size_t size) {
  set_has_longurl();
  longurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.longUrl)
}
inline ::std::string* ArticlesImportDoc::mutable_longurl() {
  set_has_longurl();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.longUrl)
  return longurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_longurl() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.longUrl)
  clear_has_longurl();
  return longurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_longurl(::std::string* longurl) {
  if (longurl != NULL) {
    set_has_longurl();
  } else {
    clear_has_longurl();
  }
  longurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), longurl);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.longUrl)
}

// optional string mainImageUrl = 5;
inline bool ArticlesImportDoc::has_mainimageurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArticlesImportDoc::set_has_mainimageurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArticlesImportDoc::clear_has_mainimageurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArticlesImportDoc::clear_mainimageurl() {
  mainimageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mainimageurl();
}
inline const ::std::string& ArticlesImportDoc::mainimageurl() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.mainImageUrl)
  return mainimageurl_.GetNoArena();
}
inline void ArticlesImportDoc::set_mainimageurl(const ::std::string& value) {
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.mainImageUrl)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_mainimageurl(::std::string&& value) {
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.mainImageUrl)
}
#endif
inline void ArticlesImportDoc::set_mainimageurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.mainImageUrl)
}
inline void ArticlesImportDoc::set_mainimageurl(const char* value, size_t size) {
  set_has_mainimageurl();
  mainimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.mainImageUrl)
}
inline ::std::string* ArticlesImportDoc::mutable_mainimageurl() {
  set_has_mainimageurl();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.mainImageUrl)
  return mainimageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_mainimageurl() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.mainImageUrl)
  clear_has_mainimageurl();
  return mainimageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_mainimageurl(::std::string* mainimageurl) {
  if (mainimageurl != NULL) {
    set_has_mainimageurl();
  } else {
    clear_has_mainimageurl();
  }
  mainimageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainimageurl);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.mainImageUrl)
}

// optional string title = 6;
inline bool ArticlesImportDoc::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArticlesImportDoc::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArticlesImportDoc::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArticlesImportDoc::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& ArticlesImportDoc::title() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.title)
  return title_.GetNoArena();
}
inline void ArticlesImportDoc::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.title)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.title)
}
#endif
inline void ArticlesImportDoc::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.title)
}
inline void ArticlesImportDoc::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.title)
}
inline ::std::string* ArticlesImportDoc::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_title() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.title)
}

// optional string content = 7;
inline bool ArticlesImportDoc::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArticlesImportDoc::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArticlesImportDoc::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArticlesImportDoc::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& ArticlesImportDoc::content() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.content)
  return content_.GetNoArena();
}
inline void ArticlesImportDoc::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.content)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.content)
}
#endif
inline void ArticlesImportDoc::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.content)
}
inline void ArticlesImportDoc::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.content)
}
inline ::std::string* ArticlesImportDoc::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_content() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.content)
}

// optional string publisherId = 8;
inline bool ArticlesImportDoc::has_publisherid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ArticlesImportDoc::set_has_publisherid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ArticlesImportDoc::clear_has_publisherid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ArticlesImportDoc::clear_publisherid() {
  publisherid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publisherid();
}
inline const ::std::string& ArticlesImportDoc::publisherid() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.publisherId)
  return publisherid_.GetNoArena();
}
inline void ArticlesImportDoc::set_publisherid(const ::std::string& value) {
  set_has_publisherid();
  publisherid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.publisherId)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_publisherid(::std::string&& value) {
  set_has_publisherid();
  publisherid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.publisherId)
}
#endif
inline void ArticlesImportDoc::set_publisherid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publisherid();
  publisherid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.publisherId)
}
inline void ArticlesImportDoc::set_publisherid(const char* value, size_t size) {
  set_has_publisherid();
  publisherid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.publisherId)
}
inline ::std::string* ArticlesImportDoc::mutable_publisherid() {
  set_has_publisherid();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.publisherId)
  return publisherid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_publisherid() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.publisherId)
  clear_has_publisherid();
  return publisherid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_publisherid(::std::string* publisherid) {
  if (publisherid != NULL) {
    set_has_publisherid();
  } else {
    clear_has_publisherid();
  }
  publisherid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisherid);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.publisherId)
}

// optional string publisherName = 9;
inline bool ArticlesImportDoc::has_publishername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArticlesImportDoc::set_has_publishername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArticlesImportDoc::clear_has_publishername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArticlesImportDoc::clear_publishername() {
  publishername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publishername();
}
inline const ::std::string& ArticlesImportDoc::publishername() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.publisherName)
  return publishername_.GetNoArena();
}
inline void ArticlesImportDoc::set_publishername(const ::std::string& value) {
  set_has_publishername();
  publishername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.publisherName)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_publishername(::std::string&& value) {
  set_has_publishername();
  publishername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.publisherName)
}
#endif
inline void ArticlesImportDoc::set_publishername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publishername();
  publishername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.publisherName)
}
inline void ArticlesImportDoc::set_publishername(const char* value, size_t size) {
  set_has_publishername();
  publishername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.publisherName)
}
inline ::std::string* ArticlesImportDoc::mutable_publishername() {
  set_has_publishername();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.publisherName)
  return publishername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_publishername() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.publisherName)
  clear_has_publishername();
  return publishername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_publishername(::std::string* publishername) {
  if (publishername != NULL) {
    set_has_publishername();
  } else {
    clear_has_publishername();
  }
  publishername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publishername);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.publisherName)
}

// optional string publisherDesc = 10;
inline bool ArticlesImportDoc::has_publisherdesc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ArticlesImportDoc::set_has_publisherdesc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ArticlesImportDoc::clear_has_publisherdesc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ArticlesImportDoc::clear_publisherdesc() {
  publisherdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publisherdesc();
}
inline const ::std::string& ArticlesImportDoc::publisherdesc() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.publisherDesc)
  return publisherdesc_.GetNoArena();
}
inline void ArticlesImportDoc::set_publisherdesc(const ::std::string& value) {
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.publisherDesc)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_publisherdesc(::std::string&& value) {
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.publisherDesc)
}
#endif
inline void ArticlesImportDoc::set_publisherdesc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.publisherDesc)
}
inline void ArticlesImportDoc::set_publisherdesc(const char* value, size_t size) {
  set_has_publisherdesc();
  publisherdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.publisherDesc)
}
inline ::std::string* ArticlesImportDoc::mutable_publisherdesc() {
  set_has_publisherdesc();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.publisherDesc)
  return publisherdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_publisherdesc() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.publisherDesc)
  clear_has_publisherdesc();
  return publisherdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_publisherdesc(::std::string* publisherdesc) {
  if (publisherdesc != NULL) {
    set_has_publisherdesc();
  } else {
    clear_has_publisherdesc();
  }
  publisherdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisherdesc);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.publisherDesc)
}

// optional uint32 publisherSubscribers = 11;
inline bool ArticlesImportDoc::has_publishersubscribers() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ArticlesImportDoc::set_has_publishersubscribers() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ArticlesImportDoc::clear_has_publishersubscribers() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ArticlesImportDoc::clear_publishersubscribers() {
  publishersubscribers_ = 0u;
  clear_has_publishersubscribers();
}
inline ::google::protobuf::uint32 ArticlesImportDoc::publishersubscribers() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.publisherSubscribers)
  return publishersubscribers_;
}
inline void ArticlesImportDoc::set_publishersubscribers(::google::protobuf::uint32 value) {
  set_has_publishersubscribers();
  publishersubscribers_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.publisherSubscribers)
}

// optional uint64 publicationTime = 12;
inline bool ArticlesImportDoc::has_publicationtime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ArticlesImportDoc::set_has_publicationtime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ArticlesImportDoc::clear_has_publicationtime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ArticlesImportDoc::clear_publicationtime() {
  publicationtime_ = GOOGLE_ULONGLONG(0);
  clear_has_publicationtime();
}
inline ::google::protobuf::uint64 ArticlesImportDoc::publicationtime() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.publicationTime)
  return publicationtime_;
}
inline void ArticlesImportDoc::set_publicationtime(::google::protobuf::uint64 value) {
  set_has_publicationtime();
  publicationtime_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.publicationTime)
}

// optional uint64 viewsCnt = 13;
inline bool ArticlesImportDoc::has_viewscnt() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ArticlesImportDoc::set_has_viewscnt() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ArticlesImportDoc::clear_has_viewscnt() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ArticlesImportDoc::clear_viewscnt() {
  viewscnt_ = GOOGLE_ULONGLONG(0);
  clear_has_viewscnt();
}
inline ::google::protobuf::uint64 ArticlesImportDoc::viewscnt() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.viewsCnt)
  return viewscnt_;
}
inline void ArticlesImportDoc::set_viewscnt(::google::protobuf::uint64 value) {
  set_has_viewscnt();
  viewscnt_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.viewsCnt)
}

// optional uint32 likesCnt = 14;
inline bool ArticlesImportDoc::has_likescnt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ArticlesImportDoc::set_has_likescnt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ArticlesImportDoc::clear_has_likescnt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ArticlesImportDoc::clear_likescnt() {
  likescnt_ = 0u;
  clear_has_likescnt();
}
inline ::google::protobuf::uint32 ArticlesImportDoc::likescnt() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.likesCnt)
  return likescnt_;
}
inline void ArticlesImportDoc::set_likescnt(::google::protobuf::uint32 value) {
  set_has_likescnt();
  likescnt_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.likesCnt)
}

// optional uint32 dislikesCnt = 15;
inline bool ArticlesImportDoc::has_dislikescnt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ArticlesImportDoc::set_has_dislikescnt() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ArticlesImportDoc::clear_has_dislikescnt() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ArticlesImportDoc::clear_dislikescnt() {
  dislikescnt_ = 0u;
  clear_has_dislikescnt();
}
inline ::google::protobuf::uint32 ArticlesImportDoc::dislikescnt() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.dislikesCnt)
  return dislikescnt_;
}
inline void ArticlesImportDoc::set_dislikescnt(::google::protobuf::uint32 value) {
  set_has_dislikescnt();
  dislikescnt_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.dislikesCnt)
}

// optional uint32 commentsCnt = 16;
inline bool ArticlesImportDoc::has_commentscnt() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ArticlesImportDoc::set_has_commentscnt() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ArticlesImportDoc::clear_has_commentscnt() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ArticlesImportDoc::clear_commentscnt() {
  commentscnt_ = 0u;
  clear_has_commentscnt();
}
inline ::google::protobuf::uint32 ArticlesImportDoc::commentscnt() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.commentsCnt)
  return commentscnt_;
}
inline void ArticlesImportDoc::set_commentscnt(::google::protobuf::uint32 value) {
  set_has_commentscnt();
  commentscnt_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.commentsCnt)
}

// optional string certainGrade = 17;
inline bool ArticlesImportDoc::has_certaingrade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ArticlesImportDoc::set_has_certaingrade() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ArticlesImportDoc::clear_has_certaingrade() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ArticlesImportDoc::clear_certaingrade() {
  certaingrade_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_certaingrade();
}
inline const ::std::string& ArticlesImportDoc::certaingrade() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.certainGrade)
  return certaingrade_.GetNoArena();
}
inline void ArticlesImportDoc::set_certaingrade(const ::std::string& value) {
  set_has_certaingrade();
  certaingrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.certainGrade)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_certaingrade(::std::string&& value) {
  set_has_certaingrade();
  certaingrade_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.certainGrade)
}
#endif
inline void ArticlesImportDoc::set_certaingrade(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_certaingrade();
  certaingrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.certainGrade)
}
inline void ArticlesImportDoc::set_certaingrade(const char* value, size_t size) {
  set_has_certaingrade();
  certaingrade_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.certainGrade)
}
inline ::std::string* ArticlesImportDoc::mutable_certaingrade() {
  set_has_certaingrade();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.certainGrade)
  return certaingrade_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_certaingrade() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.certainGrade)
  clear_has_certaingrade();
  return certaingrade_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_certaingrade(::std::string* certaingrade) {
  if (certaingrade != NULL) {
    set_has_certaingrade();
  } else {
    clear_has_certaingrade();
  }
  certaingrade_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certaingrade);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.certainGrade)
}

// optional string itemType = 18;
inline bool ArticlesImportDoc::has_itemtype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ArticlesImportDoc::set_has_itemtype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ArticlesImportDoc::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ArticlesImportDoc::clear_itemtype() {
  itemtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_itemtype();
}
inline const ::std::string& ArticlesImportDoc::itemtype() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.itemType)
  return itemtype_.GetNoArena();
}
inline void ArticlesImportDoc::set_itemtype(const ::std::string& value) {
  set_has_itemtype();
  itemtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.itemType)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_itemtype(::std::string&& value) {
  set_has_itemtype();
  itemtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.itemType)
}
#endif
inline void ArticlesImportDoc::set_itemtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_itemtype();
  itemtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.itemType)
}
inline void ArticlesImportDoc::set_itemtype(const char* value, size_t size) {
  set_has_itemtype();
  itemtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.itemType)
}
inline ::std::string* ArticlesImportDoc::mutable_itemtype() {
  set_has_itemtype();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.itemType)
  return itemtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_itemtype() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.itemType)
  clear_has_itemtype();
  return itemtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_itemtype(::std::string* itemtype) {
  if (itemtype != NULL) {
    set_has_itemtype();
  } else {
    clear_has_itemtype();
  }
  itemtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itemtype);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.itemType)
}

// optional bool existInRecoSnapshot = 19;
inline bool ArticlesImportDoc::has_existinrecosnapshot() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ArticlesImportDoc::set_has_existinrecosnapshot() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ArticlesImportDoc::clear_has_existinrecosnapshot() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ArticlesImportDoc::clear_existinrecosnapshot() {
  existinrecosnapshot_ = false;
  clear_has_existinrecosnapshot();
}
inline bool ArticlesImportDoc::existinrecosnapshot() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.existInRecoSnapshot)
  return existinrecosnapshot_;
}
inline void ArticlesImportDoc::set_existinrecosnapshot(bool value) {
  set_has_existinrecosnapshot();
  existinrecosnapshot_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.existInRecoSnapshot)
}

// optional uint32 shares = 21;
inline bool ArticlesImportDoc::has_shares() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ArticlesImportDoc::set_has_shares() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ArticlesImportDoc::clear_has_shares() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ArticlesImportDoc::clear_shares() {
  shares_ = 0u;
  clear_has_shares();
}
inline ::google::protobuf::uint32 ArticlesImportDoc::shares() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.shares)
  return shares_;
}
inline void ArticlesImportDoc::set_shares(::google::protobuf::uint32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.shares)
}

// optional bool verified = 22;
inline bool ArticlesImportDoc::has_verified() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ArticlesImportDoc::set_has_verified() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ArticlesImportDoc::clear_has_verified() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ArticlesImportDoc::clear_verified() {
  verified_ = false;
  clear_has_verified();
}
inline bool ArticlesImportDoc::verified() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.verified)
  return verified_;
}
inline void ArticlesImportDoc::set_verified(bool value) {
  set_has_verified();
  verified_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.verified)
}

// optional uint64 eventTimestamp = 20;
inline bool ArticlesImportDoc::has_eventtimestamp() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ArticlesImportDoc::set_has_eventtimestamp() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ArticlesImportDoc::clear_has_eventtimestamp() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ArticlesImportDoc::clear_eventtimestamp() {
  eventtimestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_eventtimestamp();
}
inline ::google::protobuf::uint64 ArticlesImportDoc::eventtimestamp() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.eventTimestamp)
  return eventtimestamp_;
}
inline void ArticlesImportDoc::set_eventtimestamp(::google::protobuf::uint64 value) {
  set_has_eventtimestamp();
  eventtimestamp_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.eventTimestamp)
}

// optional uint32 crClicks = 23;
inline bool ArticlesImportDoc::has_crclicks() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ArticlesImportDoc::set_has_crclicks() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ArticlesImportDoc::clear_has_crclicks() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ArticlesImportDoc::clear_crclicks() {
  crclicks_ = 0u;
  clear_has_crclicks();
}
inline ::google::protobuf::uint32 ArticlesImportDoc::crclicks() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.crClicks)
  return crclicks_;
}
inline void ArticlesImportDoc::set_crclicks(::google::protobuf::uint32 value) {
  set_has_crclicks();
  crclicks_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.crClicks)
}

// optional uint32 crImps = 24;
inline bool ArticlesImportDoc::has_crimps() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ArticlesImportDoc::set_has_crimps() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ArticlesImportDoc::clear_has_crimps() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ArticlesImportDoc::clear_crimps() {
  crimps_ = 0u;
  clear_has_crimps();
}
inline ::google::protobuf::uint32 ArticlesImportDoc::crimps() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.crImps)
  return crimps_;
}
inline void ArticlesImportDoc::set_crimps(::google::protobuf::uint32 value) {
  set_has_crimps();
  crimps_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.crImps)
}

// optional uint64 contentHash = 25;
inline bool ArticlesImportDoc::has_contenthash() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ArticlesImportDoc::set_has_contenthash() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ArticlesImportDoc::clear_has_contenthash() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ArticlesImportDoc::clear_contenthash() {
  contenthash_ = GOOGLE_ULONGLONG(0);
  clear_has_contenthash();
}
inline ::google::protobuf::uint64 ArticlesImportDoc::contenthash() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.contentHash)
  return contenthash_;
}
inline void ArticlesImportDoc::set_contenthash(::google::protobuf::uint64 value) {
  set_has_contenthash();
  contenthash_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.contentHash)
}

// optional double publisherQuality = 26;
inline bool ArticlesImportDoc::has_publisherquality() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ArticlesImportDoc::set_has_publisherquality() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ArticlesImportDoc::clear_has_publisherquality() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ArticlesImportDoc::clear_publisherquality() {
  publisherquality_ = 0;
  clear_has_publisherquality();
}
inline double ArticlesImportDoc::publisherquality() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.publisherQuality)
  return publisherquality_;
}
inline void ArticlesImportDoc::set_publisherquality(double value) {
  set_has_publisherquality();
  publisherquality_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.publisherQuality)
}

// repeated .ArticleAttachment attaches = 27;
inline int ArticlesImportDoc::attaches_size() const {
  return attaches_.size();
}
inline void ArticlesImportDoc::clear_attaches() {
  attaches_.Clear();
}
inline const ::ArticleAttachment& ArticlesImportDoc::attaches(int index) const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.attaches)
  return attaches_.Get(index);
}
inline ::ArticleAttachment* ArticlesImportDoc::mutable_attaches(int index) {
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.attaches)
  return attaches_.Mutable(index);
}
inline ::ArticleAttachment* ArticlesImportDoc::add_attaches() {
  // @@protoc_insertion_point(field_add:ArticlesImportDoc.attaches)
  return attaches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ArticleAttachment >*
ArticlesImportDoc::mutable_attaches() {
  // @@protoc_insertion_point(field_mutable_list:ArticlesImportDoc.attaches)
  return &attaches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ArticleAttachment >&
ArticlesImportDoc::attaches() const {
  // @@protoc_insertion_point(field_list:ArticlesImportDoc.attaches)
  return attaches_;
}

// optional .ArticleType type = 28;
inline bool ArticlesImportDoc::has_type() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ArticlesImportDoc::set_has_type() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ArticlesImportDoc::clear_has_type() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ArticlesImportDoc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ArticleType ArticlesImportDoc::type() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.type)
  return static_cast< ::ArticleType >(type_);
}
inline void ArticlesImportDoc::set_type(::ArticleType value) {
  assert(::ArticleType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.type)
}

// optional bool isDeleted = 29;
inline bool ArticlesImportDoc::has_isdeleted() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ArticlesImportDoc::set_has_isdeleted() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ArticlesImportDoc::clear_has_isdeleted() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ArticlesImportDoc::clear_isdeleted() {
  isdeleted_ = false;
  clear_has_isdeleted();
}
inline bool ArticlesImportDoc::isdeleted() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.isDeleted)
  return isdeleted_;
}
inline void ArticlesImportDoc::set_isdeleted(bool value) {
  set_has_isdeleted();
  isdeleted_ = value;
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.isDeleted)
}

// repeated string attachTypes = 30;
inline int ArticlesImportDoc::attachtypes_size() const {
  return attachtypes_.size();
}
inline void ArticlesImportDoc::clear_attachtypes() {
  attachtypes_.Clear();
}
inline const ::std::string& ArticlesImportDoc::attachtypes(int index) const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.attachTypes)
  return attachtypes_.Get(index);
}
inline ::std::string* ArticlesImportDoc::mutable_attachtypes(int index) {
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.attachTypes)
  return attachtypes_.Mutable(index);
}
inline void ArticlesImportDoc::set_attachtypes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.attachTypes)
  attachtypes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_attachtypes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.attachTypes)
  attachtypes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ArticlesImportDoc::set_attachtypes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  attachtypes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.attachTypes)
}
inline void ArticlesImportDoc::set_attachtypes(int index, const char* value, size_t size) {
  attachtypes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.attachTypes)
}
inline ::std::string* ArticlesImportDoc::add_attachtypes() {
  // @@protoc_insertion_point(field_add_mutable:ArticlesImportDoc.attachTypes)
  return attachtypes_.Add();
}
inline void ArticlesImportDoc::add_attachtypes(const ::std::string& value) {
  attachtypes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ArticlesImportDoc.attachTypes)
}
#if LANG_CXX11
inline void ArticlesImportDoc::add_attachtypes(::std::string&& value) {
  attachtypes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ArticlesImportDoc.attachTypes)
}
#endif
inline void ArticlesImportDoc::add_attachtypes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  attachtypes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ArticlesImportDoc.attachTypes)
}
inline void ArticlesImportDoc::add_attachtypes(const char* value, size_t size) {
  attachtypes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ArticlesImportDoc.attachTypes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ArticlesImportDoc::attachtypes() const {
  // @@protoc_insertion_point(field_list:ArticlesImportDoc.attachTypes)
  return attachtypes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ArticlesImportDoc::mutable_attachtypes() {
  // @@protoc_insertion_point(field_mutable_list:ArticlesImportDoc.attachTypes)
  return &attachtypes_;
}

// repeated string hashTags = 31;
inline int ArticlesImportDoc::hashtags_size() const {
  return hashtags_.size();
}
inline void ArticlesImportDoc::clear_hashtags() {
  hashtags_.Clear();
}
inline const ::std::string& ArticlesImportDoc::hashtags(int index) const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.hashTags)
  return hashtags_.Get(index);
}
inline ::std::string* ArticlesImportDoc::mutable_hashtags(int index) {
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.hashTags)
  return hashtags_.Mutable(index);
}
inline void ArticlesImportDoc::set_hashtags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.hashTags)
  hashtags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_hashtags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.hashTags)
  hashtags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ArticlesImportDoc::set_hashtags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.hashTags)
}
inline void ArticlesImportDoc::set_hashtags(int index, const char* value, size_t size) {
  hashtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.hashTags)
}
inline ::std::string* ArticlesImportDoc::add_hashtags() {
  // @@protoc_insertion_point(field_add_mutable:ArticlesImportDoc.hashTags)
  return hashtags_.Add();
}
inline void ArticlesImportDoc::add_hashtags(const ::std::string& value) {
  hashtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ArticlesImportDoc.hashTags)
}
#if LANG_CXX11
inline void ArticlesImportDoc::add_hashtags(::std::string&& value) {
  hashtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ArticlesImportDoc.hashTags)
}
#endif
inline void ArticlesImportDoc::add_hashtags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ArticlesImportDoc.hashTags)
}
inline void ArticlesImportDoc::add_hashtags(const char* value, size_t size) {
  hashtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ArticlesImportDoc.hashTags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ArticlesImportDoc::hashtags() const {
  // @@protoc_insertion_point(field_list:ArticlesImportDoc.hashTags)
  return hashtags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ArticlesImportDoc::mutable_hashtags() {
  // @@protoc_insertion_point(field_mutable_list:ArticlesImportDoc.hashTags)
  return &hashtags_;
}

// optional string itemId = 32;
inline bool ArticlesImportDoc::has_itemid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ArticlesImportDoc::set_has_itemid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ArticlesImportDoc::clear_has_itemid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ArticlesImportDoc::clear_itemid() {
  itemid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_itemid();
}
inline const ::std::string& ArticlesImportDoc::itemid() const {
  // @@protoc_insertion_point(field_get:ArticlesImportDoc.itemId)
  return itemid_.GetNoArena();
}
inline void ArticlesImportDoc::set_itemid(const ::std::string& value) {
  set_has_itemid();
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArticlesImportDoc.itemId)
}
#if LANG_CXX11
inline void ArticlesImportDoc::set_itemid(::std::string&& value) {
  set_has_itemid();
  itemid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArticlesImportDoc.itemId)
}
#endif
inline void ArticlesImportDoc::set_itemid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_itemid();
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArticlesImportDoc.itemId)
}
inline void ArticlesImportDoc::set_itemid(const char* value, size_t size) {
  set_has_itemid();
  itemid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArticlesImportDoc.itemId)
}
inline ::std::string* ArticlesImportDoc::mutable_itemid() {
  set_has_itemid();
  // @@protoc_insertion_point(field_mutable:ArticlesImportDoc.itemId)
  return itemid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArticlesImportDoc::release_itemid() {
  // @@protoc_insertion_point(field_release:ArticlesImportDoc.itemId)
  clear_has_itemid();
  return itemid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArticlesImportDoc::set_allocated_itemid(::std::string* itemid) {
  if (itemid != NULL) {
    set_has_itemid();
  } else {
    clear_has_itemid();
  }
  itemid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), itemid);
  // @@protoc_insertion_point(field_set_allocated:ArticlesImportDoc.itemId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ArticleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ArticleType>() {
  return ::ArticleType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_articles_2eproto__INCLUDED
