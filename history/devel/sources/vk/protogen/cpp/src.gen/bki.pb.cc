// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bki.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bki.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace mail {
namespace go {
namespace recommender {
namespace bki {
class ProfileIDDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfileID>
     _instance;
} _ProfileID_default_instance_;
class Profile_GeoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Profile_Geo>
     _instance;
} _Profile_Geo_default_instance_;
class Profile_GeoLocationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Profile_GeoLocation>
     _instance;
} _Profile_GeoLocation_default_instance_;
class Profile_SchoolDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Profile_School>
     _instance;
} _Profile_School_default_instance_;
class Profile_UniversityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Profile_University>
     _instance;
} _Profile_University_default_instance_;
class Profile_CareerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Profile_Career>
     _instance;
} _Profile_Career_default_instance_;
class Profile_FriendDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Profile_Friend>
     _instance;
} _Profile_Friend_default_instance_;
class ProfileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Profile>
     _instance;
} _Profile_default_instance_;
class ProfilesLinkDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProfilesLink>
     _instance;
} _ProfilesLink_default_instance_;
class GroupInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GroupInfo>
     _instance;
} _GroupInfo_default_instance_;

namespace protobuf_bki_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileID, provider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileID, id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Geo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Geo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Geo, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Geo, title_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_GeoLocation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_GeoLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_GeoLocation, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_GeoLocation, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_GeoLocation, city_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_School, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_School, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_School, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_School, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_School, year_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_School, year_to_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_University, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_University, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_University, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_University, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_University, year_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_University, year_to_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Career, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Career, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Career, company_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Career, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Career, year_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Career, year_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Career, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Career, company_group_id_),
  0,
  2,
  3,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Friend, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Friend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Friend, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Friend, namesakes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Friend, collegues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Friend, relatives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Friend, classmates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Friend, militarymates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile_Friend, roommates_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, first_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, last_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, middle_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, birth_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, birth_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, birth_year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, photo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, birth_place_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, current_place_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, skype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, last_seen_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, schools_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, universities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, career_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, interests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, friends_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, marital_status_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, platforms_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, friends_majority_place_),
  8,
  0,
  1,
  2,
  3,
  12,
  13,
  14,
  4,
  15,
  9,
  10,
  5,
  6,
  7,
  16,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  17,
  ~0u,
  ~0u,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, matched_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, matched_surname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, matched_birthday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, matched_birthyear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, matched_city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, matched_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, matched_sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfilesLink, match_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, members_),
  2,
  0,
  1,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(ProfileID)},
  { 9, 16, sizeof(Profile_Geo)},
  { 18, 26, sizeof(Profile_GeoLocation)},
  { 29, 38, sizeof(Profile_School)},
  { 42, 51, sizeof(Profile_University)},
  { 55, 66, sizeof(Profile_Career)},
  { 72, 84, sizeof(Profile_Friend)},
  { 91, 121, sizeof(Profile)},
  { 146, 161, sizeof(ProfilesLink)},
  { 171, 180, sizeof(GroupInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfileID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Profile_Geo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Profile_GeoLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Profile_School_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Profile_University_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Profile_Career_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Profile_Friend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Profile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProfilesLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GroupInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "bki.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProfileID_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfileID_default_instance_);_Profile_Geo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Profile_Geo_default_instance_);_Profile_GeoLocation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Profile_GeoLocation_default_instance_);_Profile_School_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Profile_School_default_instance_);_Profile_University_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Profile_University_default_instance_);_Profile_Career_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Profile_Career_default_instance_);_Profile_Friend_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Profile_Friend_default_instance_);_Profile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Profile_default_instance_);_ProfilesLink_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProfilesLink_default_instance_);_GroupInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GroupInfo_default_instance_);_Profile_GeoLocation_default_instance_._instance.get_mutable()->country_ = const_cast< ::ru::mail::go::recommender::bki::Profile_Geo*>(
      ::ru::mail::go::recommender::bki::Profile_Geo::internal_default_instance());
  _Profile_GeoLocation_default_instance_._instance.get_mutable()->region_ = const_cast< ::ru::mail::go::recommender::bki::Profile_Geo*>(
      ::ru::mail::go::recommender::bki::Profile_Geo::internal_default_instance());
  _Profile_GeoLocation_default_instance_._instance.get_mutable()->city_ = const_cast< ::ru::mail::go::recommender::bki::Profile_Geo*>(
      ::ru::mail::go::recommender::bki::Profile_Geo::internal_default_instance());
  _Profile_School_default_instance_._instance.get_mutable()->location_ = const_cast< ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      ::ru::mail::go::recommender::bki::Profile_GeoLocation::internal_default_instance());
  _Profile_University_default_instance_._instance.get_mutable()->location_ = const_cast< ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      ::ru::mail::go::recommender::bki::Profile_GeoLocation::internal_default_instance());
  _Profile_Career_default_instance_._instance.get_mutable()->location_ = const_cast< ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      ::ru::mail::go::recommender::bki::Profile_GeoLocation::internal_default_instance());
  _Profile_default_instance_._instance.get_mutable()->id_ = const_cast< ::ru::mail::go::recommender::bki::ProfileID*>(
      ::ru::mail::go::recommender::bki::ProfileID::internal_default_instance());
  _Profile_default_instance_._instance.get_mutable()->birth_place_ = const_cast< ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      ::ru::mail::go::recommender::bki::Profile_GeoLocation::internal_default_instance());
  _Profile_default_instance_._instance.get_mutable()->current_place_ = const_cast< ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      ::ru::mail::go::recommender::bki::Profile_GeoLocation::internal_default_instance());
  _Profile_default_instance_._instance.get_mutable()->friends_majority_place_ = const_cast< ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      ::ru::mail::go::recommender::bki::Profile_GeoLocation::internal_default_instance());
  _ProfilesLink_default_instance_._instance.get_mutable()->first_ = const_cast< ::ru::mail::go::recommender::bki::ProfileID*>(
      ::ru::mail::go::recommender::bki::ProfileID::internal_default_instance());
  _ProfilesLink_default_instance_._instance.get_mutable()->second_ = const_cast< ::ru::mail::go::recommender::bki::ProfileID*>(
      ::ru::mail::go::recommender::bki::ProfileID::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tbki.proto\022\032ru.mail.go.recommender.bki\""
      "}\n\tProfileID\022@\n\010provider\030\001 \002(\0162..ru.mail"
      ".go.recommender.bki.ProfileID.Provider\022\n"
      "\n\002id\030\002 \002(\003\"\"\n\010Provider\022\006\n\002VK\020\001\022\006\n\002OK\020\002\022\006"
      "\n\002MM\020\003\"\245\020\n\007Profile\0221\n\002id\030\001 \002(\0132%.ru.mail"
      ".go.recommender.bki.ProfileID\022\014\n\004link\030\003 "
      "\001(\t\022\022\n\nfirst_name\030\004 \001(\t\022\021\n\tlast_name\030\005 \001"
      "(\t\022\023\n\013middle_name\030\006 \001(\t\022\021\n\tbirth_day\030\007 \001"
      "(\005\022\023\n\013birth_month\030\010 \001(\005\022\022\n\nbirth_year\030\t "
      "\001(\005\022\r\n\005photo\030\n \001(\t\0224\n\003sex\030\013 \001(\0162\'.ru.mai"
      "l.go.recommender.bki.Profile.Sex\022D\n\013birt"
      "h_place\030\014 \001(\0132/.ru.mail.go.recommender.b"
      "ki.Profile.GeoLocation\022F\n\rcurrent_place\030"
      "\r \001(\0132/.ru.mail.go.recommender.bki.Profi"
      "le.GeoLocation\022\r\n\005phone\030\017 \001(\t\022\r\n\005email\030\020"
      " \001(\t\022\r\n\005skype\030\021 \001(\t\022\033\n\023last_seen_timesta"
      "mp\030\023 \001(\003\022;\n\007schools\030\024 \003(\0132*.ru.mail.go.r"
      "ecommender.bki.Profile.School\022D\n\014univers"
      "ities\030\025 \003(\0132..ru.mail.go.recommender.bki"
      ".Profile.University\022:\n\006career\030\026 \003(\0132*.ru"
      ".mail.go.recommender.bki.Profile.Career\022"
      "\021\n\tinterests\030\027 \003(\t\022;\n\007friends\030\030 \003(\0132*.ru"
      ".mail.go.recommender.bki.Profile.Friend\022"
      "N\n\023marital_status_type\030\031 \001(\01621.ru.mail.g"
      "o.recommender.bki.Profile.MaritalStatus\022"
      "D\n\016platforms_type\030\032 \003(\0162,.ru.mail.go.rec"
      "ommender.bki.Profile.Platform\022\016\n\006groups\030"
      "\033 \003(\005\022O\n\026friends_majority_place\030\034 \001(\0132/."
      "ru.mail.go.recommender.bki.Profile.GeoLo"
      "cation\032\'\n\003Geo\022\021\n\tregion_id\030\001 \001(\005\022\r\n\005titl"
      "e\030\002 \001(\t\032\267\001\n\013GeoLocation\0228\n\007country\030\001 \001(\013"
      "2\'.ru.mail.go.recommender.bki.Profile.Ge"
      "o\0227\n\006region\030\002 \001(\0132\'.ru.mail.go.recommend"
      "er.bki.Profile.Geo\0225\n\004city\030\003 \001(\0132\'.ru.ma"
      "il.go.recommender.bki.Profile.Geo\032}\n\006Sch"
      "ool\022\014\n\004name\030\001 \001(\t\022A\n\010location\030\002 \001(\0132/.ru"
      ".mail.go.recommender.bki.Profile.GeoLoca"
      "tion\022\021\n\tyear_from\030\003 \001(\005\022\017\n\007year_to\030\004 \001(\005"
      "\032\201\001\n\nUniversity\022\014\n\004name\030\001 \001(\t\022A\n\010locatio"
      "n\030\002 \001(\0132/.ru.mail.go.recommender.bki.Pro"
      "file.GeoLocation\022\021\n\tyear_from\030\003 \001(\005\022\017\n\007y"
      "ear_to\030\004 \001(\005\032\254\001\n\006Career\022\017\n\007company\030\001 \001(\t"
      "\022A\n\010location\030\002 \001(\0132/.ru.mail.go.recommen"
      "der.bki.Profile.GeoLocation\022\021\n\tyear_from"
      "\030\003 \001(\005\022\017\n\007year_to\030\004 \001(\005\022\020\n\010position\030\005 \001("
      "\t\022\030\n\020company_group_id\030\006 \001(\005\032\213\001\n\006Friend\022\n"
      "\n\002id\030\001 \002(\003\022\021\n\tnamesakes\030\002 \001(\010\022\021\n\tcollegu"
      "es\030\003 \001(\010\022\021\n\trelatives\030\004 \001(\010\022\022\n\nclassmate"
      "s\030\005 \001(\010\022\025\n\rmilitarymates\030\006 \001(\010\022\021\n\troomma"
      "tes\030\007 \001(\010\"(\n\003Sex\022\013\n\007UNKNOWN\020\000\022\n\n\006FEMALE\020"
      "\001\022\010\n\004MALE\020\002\"p\n\010Platform\022\017\n\013MOBILE_SITE\020\000"
      "\022\n\n\006IPHONE\020\001\022\010\n\004IPAD\020\002\022\013\n\007ANDROID\020\003\022\021\n\rW"
      "INDOWS_PHONE\020\004\022\016\n\nWINDOWS_10\020\005\022\r\n\tFULL_S"
      "ITE\020\006\"\177\n\rMaritalStatus\022\017\n\013NOT_MARRIED\020\000\022"
      "\017\n\013HAS_PARTNER\020\001\022\013\n\007ENGAGED\020\002\022\013\n\007MARRIED"
      "\020\003\022\017\n\013COMPLICATED\020\004\022\024\n\020IN_ACTIVE_SEARCH\020"
      "\005\022\013\n\007IN_LOVE\020\006\"\270\002\n\014ProfilesLink\0224\n\005first"
      "\030\001 \002(\0132%.ru.mail.go.recommender.bki.Prof"
      "ileID\0225\n\006second\030\002 \002(\0132%.ru.mail.go.recom"
      "mender.bki.ProfileID\022\024\n\014matched_name\030\003 \001"
      "(\010\022\027\n\017matched_surname\030\004 \001(\010\022\030\n\020matched_b"
      "irthday\030\005 \001(\010\022\031\n\021matched_birthyear\030\006 \001(\010"
      "\022\024\n\014matched_city\030\007 \001(\010\022\030\n\020matched_activi"
      "ty\030\010 \001(\010\022\023\n\013matched_sex\030\t \001(\010\022\022\n\nmatch_t"
      "ime\030\n \001(\003\"E\n\tGroupInfo\022\n\n\002id\030\001 \002(\005\022\r\n\005ti"
      "tle\030\002 \001(\t\022\014\n\004link\030\003 \001(\t\022\017\n\007members\030\004 \001(\005"
      "B\nB\010BKIBlobs"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bki.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_bki_2eproto

const ::google::protobuf::EnumDescriptor* ProfileID_Provider_descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_enum_descriptors[0];
}
bool ProfileID_Provider_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProfileID_Provider ProfileID::VK;
const ProfileID_Provider ProfileID::OK;
const ProfileID_Provider ProfileID::MM;
const ProfileID_Provider ProfileID::Provider_MIN;
const ProfileID_Provider ProfileID::Provider_MAX;
const int ProfileID::Provider_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Profile_Sex_descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_enum_descriptors[1];
}
bool Profile_Sex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Profile_Sex Profile::UNKNOWN;
const Profile_Sex Profile::FEMALE;
const Profile_Sex Profile::MALE;
const Profile_Sex Profile::Sex_MIN;
const Profile_Sex Profile::Sex_MAX;
const int Profile::Sex_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Profile_Platform_descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_enum_descriptors[2];
}
bool Profile_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Profile_Platform Profile::MOBILE_SITE;
const Profile_Platform Profile::IPHONE;
const Profile_Platform Profile::IPAD;
const Profile_Platform Profile::ANDROID;
const Profile_Platform Profile::WINDOWS_PHONE;
const Profile_Platform Profile::WINDOWS_10;
const Profile_Platform Profile::FULL_SITE;
const Profile_Platform Profile::Platform_MIN;
const Profile_Platform Profile::Platform_MAX;
const int Profile::Platform_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Profile_MaritalStatus_descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_enum_descriptors[3];
}
bool Profile_MaritalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Profile_MaritalStatus Profile::NOT_MARRIED;
const Profile_MaritalStatus Profile::HAS_PARTNER;
const Profile_MaritalStatus Profile::ENGAGED;
const Profile_MaritalStatus Profile::MARRIED;
const Profile_MaritalStatus Profile::COMPLICATED;
const Profile_MaritalStatus Profile::IN_ACTIVE_SEARCH;
const Profile_MaritalStatus Profile::IN_LOVE;
const Profile_MaritalStatus Profile::MaritalStatus_MIN;
const Profile_MaritalStatus Profile::MaritalStatus_MAX;
const int Profile::MaritalStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileID::kProviderFieldNumber;
const int ProfileID::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileID::ProfileID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.recommender.bki.ProfileID)
}
ProfileID::ProfileID(const ProfileID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&provider_) -
    reinterpret_cast<char*>(&id_)) + sizeof(provider_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.recommender.bki.ProfileID)
}

void ProfileID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  provider_ = 1;
}

ProfileID::~ProfileID() {
  // @@protoc_insertion_point(destructor:ru.mail.go.recommender.bki.ProfileID)
  SharedDtor();
}

void ProfileID::SharedDtor() {
}

void ProfileID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileID::descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfileID& ProfileID::default_instance() {
  protobuf_bki_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfileID* ProfileID::New(::google::protobuf::Arena* arena) const {
  ProfileID* n = new ProfileID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileID::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.recommender.bki.ProfileID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    id_ = GOOGLE_LONGLONG(0);
    provider_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProfileID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.recommender.bki.ProfileID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.recommender.bki.ProfileID.Provider provider = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::recommender::bki::ProfileID_Provider_IsValid(value)) {
            set_provider(static_cast< ::ru::mail::go::recommender::bki::ProfileID_Provider >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.recommender.bki.ProfileID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.recommender.bki.ProfileID)
  return false;
#undef DO_
}

void ProfileID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.recommender.bki.ProfileID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.recommender.bki.ProfileID.Provider provider = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->provider(), output);
  }

  // required int64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.recommender.bki.ProfileID)
}

::google::protobuf::uint8* ProfileID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.recommender.bki.ProfileID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.recommender.bki.ProfileID.Provider provider = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->provider(), target);
  }

  // required int64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.recommender.bki.ProfileID)
  return target;
}

size_t ProfileID::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.recommender.bki.ProfileID)
  size_t total_size = 0;

  if (has_id()) {
    // required int64 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_provider()) {
    // required .ru.mail.go.recommender.bki.ProfileID.Provider provider = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());
  }

  return total_size;
}
size_t ProfileID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.recommender.bki.ProfileID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required .ru.mail.go.recommender.bki.ProfileID.Provider provider = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.recommender.bki.ProfileID)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.recommender.bki.ProfileID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.recommender.bki.ProfileID)
    MergeFrom(*source);
  }
}

void ProfileID::MergeFrom(const ProfileID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.recommender.bki.ProfileID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      provider_ = from.provider_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfileID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.recommender.bki.ProfileID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileID::CopyFrom(const ProfileID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.recommender.bki.ProfileID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ProfileID::Swap(ProfileID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileID::InternalSwap(ProfileID* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(provider_, other->provider_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileID::GetMetadata() const {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileID

// required .ru.mail.go.recommender.bki.ProfileID.Provider provider = 1;
bool ProfileID::has_provider() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfileID::set_has_provider() {
  _has_bits_[0] |= 0x00000002u;
}
void ProfileID::clear_has_provider() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProfileID::clear_provider() {
  provider_ = 1;
  clear_has_provider();
}
::ru::mail::go::recommender::bki::ProfileID_Provider ProfileID::provider() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfileID.provider)
  return static_cast< ::ru::mail::go::recommender::bki::ProfileID_Provider >(provider_);
}
void ProfileID::set_provider(::ru::mail::go::recommender::bki::ProfileID_Provider value) {
  assert(::ru::mail::go::recommender::bki::ProfileID_Provider_IsValid(value));
  set_has_provider();
  provider_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfileID.provider)
}

// required int64 id = 2;
bool ProfileID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProfileID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ProfileID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProfileID::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 ProfileID::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfileID.id)
  return id_;
}
void ProfileID::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfileID.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profile_Geo::kRegionIdFieldNumber;
const int Profile_Geo::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profile_Geo::Profile_Geo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.recommender.bki.Profile.Geo)
}
Profile_Geo::Profile_Geo(const Profile_Geo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.recommender.bki.Profile.Geo)
}

void Profile_Geo::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_id_ = 0;
}

Profile_Geo::~Profile_Geo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.recommender.bki.Profile.Geo)
  SharedDtor();
}

void Profile_Geo::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Profile_Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile_Geo::descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Profile_Geo& Profile_Geo::default_instance() {
  protobuf_bki_2eproto::InitDefaults();
  return *internal_default_instance();
}

Profile_Geo* Profile_Geo::New(::google::protobuf::Arena* arena) const {
  Profile_Geo* n = new Profile_Geo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Profile_Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.recommender.bki.Profile.Geo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_title()) {
    GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*title_.UnsafeRawStringPointer())->clear();
  }
  region_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Profile_Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.recommender.bki.Profile.Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 region_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.Geo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.recommender.bki.Profile.Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.recommender.bki.Profile.Geo)
  return false;
#undef DO_
}

void Profile_Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.recommender.bki.Profile.Geo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 region_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->region_id(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.Geo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.recommender.bki.Profile.Geo)
}

::google::protobuf::uint8* Profile_Geo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.recommender.bki.Profile.Geo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 region_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->region_id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.Geo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.recommender.bki.Profile.Geo)
  return target;
}

size_t Profile_Geo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.recommender.bki.Profile.Geo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile_Geo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.recommender.bki.Profile.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile_Geo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Profile_Geo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.recommender.bki.Profile.Geo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.recommender.bki.Profile.Geo)
    MergeFrom(*source);
  }
}

void Profile_Geo::MergeFrom(const Profile_Geo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.recommender.bki.Profile.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      region_id_ = from.region_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Profile_Geo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.recommender.bki.Profile.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile_Geo::CopyFrom(const Profile_Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.recommender.bki.Profile.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile_Geo::IsInitialized() const {
  return true;
}

void Profile_Geo::Swap(Profile_Geo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profile_Geo::InternalSwap(Profile_Geo* other) {
  using std::swap;
  title_.Swap(&other->title_);
  swap(region_id_, other->region_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Profile_Geo::GetMetadata() const {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Profile_Geo

// optional int32 region_id = 1;
bool Profile_Geo::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Profile_Geo::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Profile_Geo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Profile_Geo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
::google::protobuf::int32 Profile_Geo::region_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Geo.region_id)
  return region_id_;
}
void Profile_Geo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Geo.region_id)
}

// optional string title = 2;
bool Profile_Geo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Profile_Geo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void Profile_Geo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void Profile_Geo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Profile_Geo::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Geo.title)
  return title_.GetNoArena();
}
void Profile_Geo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Geo.title)
}
#if LANG_CXX11
void Profile_Geo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.Geo.title)
}
#endif
void Profile_Geo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.Geo.title)
}
void Profile_Geo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.Geo.title)
}
::std::string* Profile_Geo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.Geo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile_Geo::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.Geo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile_Geo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.Geo.title)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profile_GeoLocation::kCountryFieldNumber;
const int Profile_GeoLocation::kRegionFieldNumber;
const int Profile_GeoLocation::kCityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profile_GeoLocation::Profile_GeoLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.recommender.bki.Profile.GeoLocation)
}
Profile_GeoLocation::Profile_GeoLocation(const Profile_GeoLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_country()) {
    country_ = new ::ru::mail::go::recommender::bki::Profile_Geo(*from.country_);
  } else {
    country_ = NULL;
  }
  if (from.has_region()) {
    region_ = new ::ru::mail::go::recommender::bki::Profile_Geo(*from.region_);
  } else {
    region_ = NULL;
  }
  if (from.has_city()) {
    city_ = new ::ru::mail::go::recommender::bki::Profile_Geo(*from.city_);
  } else {
    city_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.recommender.bki.Profile.GeoLocation)
}

void Profile_GeoLocation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&country_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_) -
      reinterpret_cast<char*>(&country_)) + sizeof(city_));
}

Profile_GeoLocation::~Profile_GeoLocation() {
  // @@protoc_insertion_point(destructor:ru.mail.go.recommender.bki.Profile.GeoLocation)
  SharedDtor();
}

void Profile_GeoLocation::SharedDtor() {
  if (this != internal_default_instance()) delete country_;
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete city_;
}

void Profile_GeoLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile_GeoLocation::descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Profile_GeoLocation& Profile_GeoLocation::default_instance() {
  protobuf_bki_2eproto::InitDefaults();
  return *internal_default_instance();
}

Profile_GeoLocation* Profile_GeoLocation::New(::google::protobuf::Arena* arena) const {
  Profile_GeoLocation* n = new Profile_GeoLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Profile_GeoLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.recommender.bki.Profile.GeoLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(country_ != NULL);
      country_->::ru::mail::go::recommender::bki::Profile_Geo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(region_ != NULL);
      region_->::ru::mail::go::recommender::bki::Profile_Geo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(city_ != NULL);
      city_->::ru::mail::go::recommender::bki::Profile_Geo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Profile_GeoLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.recommender.bki.Profile.GeoLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ru.mail.go.recommender.bki.Profile.Geo country = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_country()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.recommender.bki.Profile.Geo region = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.recommender.bki.Profile.Geo city = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.recommender.bki.Profile.GeoLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.recommender.bki.Profile.GeoLocation)
  return false;
#undef DO_
}

void Profile_GeoLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.recommender.bki.Profile.GeoLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.recommender.bki.Profile.Geo country = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->country_, output);
  }

  // optional .ru.mail.go.recommender.bki.Profile.Geo region = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_, output);
  }

  // optional .ru.mail.go.recommender.bki.Profile.Geo city = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->city_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.recommender.bki.Profile.GeoLocation)
}

::google::protobuf::uint8* Profile_GeoLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.recommender.bki.Profile.GeoLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ru.mail.go.recommender.bki.Profile.Geo country = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->country_, deterministic, target);
  }

  // optional .ru.mail.go.recommender.bki.Profile.Geo region = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_, deterministic, target);
  }

  // optional .ru.mail.go.recommender.bki.Profile.Geo city = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->city_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.recommender.bki.Profile.GeoLocation)
  return target;
}

size_t Profile_GeoLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.recommender.bki.Profile.GeoLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ru.mail.go.recommender.bki.Profile.Geo country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->country_);
    }

    // optional .ru.mail.go.recommender.bki.Profile.Geo region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->region_);
    }

    // optional .ru.mail.go.recommender.bki.Profile.Geo city = 3;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->city_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile_GeoLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.recommender.bki.Profile.GeoLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile_GeoLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Profile_GeoLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.recommender.bki.Profile.GeoLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.recommender.bki.Profile.GeoLocation)
    MergeFrom(*source);
  }
}

void Profile_GeoLocation::MergeFrom(const Profile_GeoLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.recommender.bki.Profile.GeoLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_country()->::ru::mail::go::recommender::bki::Profile_Geo::MergeFrom(from.country());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_region()->::ru::mail::go::recommender::bki::Profile_Geo::MergeFrom(from.region());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_city()->::ru::mail::go::recommender::bki::Profile_Geo::MergeFrom(from.city());
    }
  }
}

void Profile_GeoLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.recommender.bki.Profile.GeoLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile_GeoLocation::CopyFrom(const Profile_GeoLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.recommender.bki.Profile.GeoLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile_GeoLocation::IsInitialized() const {
  return true;
}

void Profile_GeoLocation::Swap(Profile_GeoLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profile_GeoLocation::InternalSwap(Profile_GeoLocation* other) {
  using std::swap;
  swap(country_, other->country_);
  swap(region_, other->region_);
  swap(city_, other->city_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Profile_GeoLocation::GetMetadata() const {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Profile_GeoLocation

// optional .ru.mail.go.recommender.bki.Profile.Geo country = 1;
bool Profile_GeoLocation::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Profile_GeoLocation::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
void Profile_GeoLocation::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
void Profile_GeoLocation::clear_country() {
  if (country_ != NULL) country_->::ru::mail::go::recommender::bki::Profile_Geo::Clear();
  clear_has_country();
}
const ::ru::mail::go::recommender::bki::Profile_Geo& Profile_GeoLocation::country() const {
  const ::ru::mail::go::recommender::bki::Profile_Geo* p = country_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.GeoLocation.country)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_Geo*>(
      &::ru::mail::go::recommender::bki::_Profile_Geo_default_instance_);
}
::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::mutable_country() {
  set_has_country();
  if (country_ == NULL) {
    country_ = new ::ru::mail::go::recommender::bki::Profile_Geo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.GeoLocation.country)
  return country_;
}
::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::release_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.GeoLocation.country)
  clear_has_country();
  ::ru::mail::go::recommender::bki::Profile_Geo* temp = country_;
  country_ = NULL;
  return temp;
}
void Profile_GeoLocation::set_allocated_country(::ru::mail::go::recommender::bki::Profile_Geo* country) {
  delete country_;
  country_ = country;
  if (country) {
    set_has_country();
  } else {
    clear_has_country();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.GeoLocation.country)
}

// optional .ru.mail.go.recommender.bki.Profile.Geo region = 2;
bool Profile_GeoLocation::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Profile_GeoLocation::set_has_region() {
  _has_bits_[0] |= 0x00000002u;
}
void Profile_GeoLocation::clear_has_region() {
  _has_bits_[0] &= ~0x00000002u;
}
void Profile_GeoLocation::clear_region() {
  if (region_ != NULL) region_->::ru::mail::go::recommender::bki::Profile_Geo::Clear();
  clear_has_region();
}
const ::ru::mail::go::recommender::bki::Profile_Geo& Profile_GeoLocation::region() const {
  const ::ru::mail::go::recommender::bki::Profile_Geo* p = region_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.GeoLocation.region)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_Geo*>(
      &::ru::mail::go::recommender::bki::_Profile_Geo_default_instance_);
}
::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::mutable_region() {
  set_has_region();
  if (region_ == NULL) {
    region_ = new ::ru::mail::go::recommender::bki::Profile_Geo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.GeoLocation.region)
  return region_;
}
::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::release_region() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.GeoLocation.region)
  clear_has_region();
  ::ru::mail::go::recommender::bki::Profile_Geo* temp = region_;
  region_ = NULL;
  return temp;
}
void Profile_GeoLocation::set_allocated_region(::ru::mail::go::recommender::bki::Profile_Geo* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.GeoLocation.region)
}

// optional .ru.mail.go.recommender.bki.Profile.Geo city = 3;
bool Profile_GeoLocation::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Profile_GeoLocation::set_has_city() {
  _has_bits_[0] |= 0x00000004u;
}
void Profile_GeoLocation::clear_has_city() {
  _has_bits_[0] &= ~0x00000004u;
}
void Profile_GeoLocation::clear_city() {
  if (city_ != NULL) city_->::ru::mail::go::recommender::bki::Profile_Geo::Clear();
  clear_has_city();
}
const ::ru::mail::go::recommender::bki::Profile_Geo& Profile_GeoLocation::city() const {
  const ::ru::mail::go::recommender::bki::Profile_Geo* p = city_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.GeoLocation.city)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_Geo*>(
      &::ru::mail::go::recommender::bki::_Profile_Geo_default_instance_);
}
::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::mutable_city() {
  set_has_city();
  if (city_ == NULL) {
    city_ = new ::ru::mail::go::recommender::bki::Profile_Geo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.GeoLocation.city)
  return city_;
}
::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::release_city() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.GeoLocation.city)
  clear_has_city();
  ::ru::mail::go::recommender::bki::Profile_Geo* temp = city_;
  city_ = NULL;
  return temp;
}
void Profile_GeoLocation::set_allocated_city(::ru::mail::go::recommender::bki::Profile_Geo* city) {
  delete city_;
  city_ = city;
  if (city) {
    set_has_city();
  } else {
    clear_has_city();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.GeoLocation.city)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profile_School::kNameFieldNumber;
const int Profile_School::kLocationFieldNumber;
const int Profile_School::kYearFromFieldNumber;
const int Profile_School::kYearToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profile_School::Profile_School()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.recommender.bki.Profile.School)
}
Profile_School::Profile_School(const Profile_School& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_location()) {
    location_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&year_from_, &from.year_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_to_) -
    reinterpret_cast<char*>(&year_from_)) + sizeof(year_to_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.recommender.bki.Profile.School)
}

void Profile_School::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_to_) -
      reinterpret_cast<char*>(&location_)) + sizeof(year_to_));
}

Profile_School::~Profile_School() {
  // @@protoc_insertion_point(destructor:ru.mail.go.recommender.bki.Profile.School)
  SharedDtor();
}

void Profile_School::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void Profile_School::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile_School::descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Profile_School& Profile_School::default_instance() {
  protobuf_bki_2eproto::InitDefaults();
  return *internal_default_instance();
}

Profile_School* Profile_School::New(::google::protobuf::Arena* arena) const {
  Profile_School* n = new Profile_School;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Profile_School::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.recommender.bki.Profile.School)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&year_from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&year_to_) -
        reinterpret_cast<char*>(&year_from_)) + sizeof(year_to_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Profile_School::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.recommender.bki.Profile.School)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.School.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year_from = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_year_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year_to = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_year_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.recommender.bki.Profile.School)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.recommender.bki.Profile.School)
  return false;
#undef DO_
}

void Profile_School::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.recommender.bki.Profile.School)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.School.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // optional int32 year_from = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->year_from(), output);
  }

  // optional int32 year_to = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->year_to(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.recommender.bki.Profile.School)
}

::google::protobuf::uint8* Profile_School::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.recommender.bki.Profile.School)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.School.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // optional int32 year_from = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->year_from(), target);
  }

  // optional int32 year_to = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->year_to(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.recommender.bki.Profile.School)
  return target;
}

size_t Profile_School::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.recommender.bki.Profile.School)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional int32 year_from = 3;
    if (has_year_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year_from());
    }

    // optional int32 year_to = 4;
    if (has_year_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year_to());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile_School::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.recommender.bki.Profile.School)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile_School* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Profile_School>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.recommender.bki.Profile.School)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.recommender.bki.Profile.School)
    MergeFrom(*source);
  }
}

void Profile_School::MergeFrom(const Profile_School& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.recommender.bki.Profile.School)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_location()->::ru::mail::go::recommender::bki::Profile_GeoLocation::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000004u) {
      year_from_ = from.year_from_;
    }
    if (cached_has_bits & 0x00000008u) {
      year_to_ = from.year_to_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Profile_School::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.recommender.bki.Profile.School)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile_School::CopyFrom(const Profile_School& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.recommender.bki.Profile.School)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile_School::IsInitialized() const {
  return true;
}

void Profile_School::Swap(Profile_School* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profile_School::InternalSwap(Profile_School* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(location_, other->location_);
  swap(year_from_, other->year_from_);
  swap(year_to_, other->year_to_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Profile_School::GetMetadata() const {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Profile_School

// optional string name = 1;
bool Profile_School::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Profile_School::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Profile_School::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Profile_School::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Profile_School::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.School.name)
  return name_.GetNoArena();
}
void Profile_School::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.School.name)
}
#if LANG_CXX11
void Profile_School::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.School.name)
}
#endif
void Profile_School::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.School.name)
}
void Profile_School::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.School.name)
}
::std::string* Profile_School::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.School.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile_School::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.School.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile_School::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.School.name)
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
bool Profile_School::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Profile_School::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
void Profile_School::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void Profile_School::clear_location() {
  if (location_ != NULL) location_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_location();
}
const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile_School::location() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = location_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.School.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_School::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.School.location)
  return location_;
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_School::release_location() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.School.location)
  clear_has_location();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void Profile_School::set_allocated_location(::ru::mail::go::recommender::bki::Profile_GeoLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.School.location)
}

// optional int32 year_from = 3;
bool Profile_School::has_year_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Profile_School::set_has_year_from() {
  _has_bits_[0] |= 0x00000004u;
}
void Profile_School::clear_has_year_from() {
  _has_bits_[0] &= ~0x00000004u;
}
void Profile_School::clear_year_from() {
  year_from_ = 0;
  clear_has_year_from();
}
::google::protobuf::int32 Profile_School::year_from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.School.year_from)
  return year_from_;
}
void Profile_School::set_year_from(::google::protobuf::int32 value) {
  set_has_year_from();
  year_from_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.School.year_from)
}

// optional int32 year_to = 4;
bool Profile_School::has_year_to() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Profile_School::set_has_year_to() {
  _has_bits_[0] |= 0x00000008u;
}
void Profile_School::clear_has_year_to() {
  _has_bits_[0] &= ~0x00000008u;
}
void Profile_School::clear_year_to() {
  year_to_ = 0;
  clear_has_year_to();
}
::google::protobuf::int32 Profile_School::year_to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.School.year_to)
  return year_to_;
}
void Profile_School::set_year_to(::google::protobuf::int32 value) {
  set_has_year_to();
  year_to_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.School.year_to)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profile_University::kNameFieldNumber;
const int Profile_University::kLocationFieldNumber;
const int Profile_University::kYearFromFieldNumber;
const int Profile_University::kYearToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profile_University::Profile_University()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.recommender.bki.Profile.University)
}
Profile_University::Profile_University(const Profile_University& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_location()) {
    location_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&year_from_, &from.year_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_to_) -
    reinterpret_cast<char*>(&year_from_)) + sizeof(year_to_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.recommender.bki.Profile.University)
}

void Profile_University::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_to_) -
      reinterpret_cast<char*>(&location_)) + sizeof(year_to_));
}

Profile_University::~Profile_University() {
  // @@protoc_insertion_point(destructor:ru.mail.go.recommender.bki.Profile.University)
  SharedDtor();
}

void Profile_University::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void Profile_University::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile_University::descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Profile_University& Profile_University::default_instance() {
  protobuf_bki_2eproto::InitDefaults();
  return *internal_default_instance();
}

Profile_University* Profile_University::New(::google::protobuf::Arena* arena) const {
  Profile_University* n = new Profile_University;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Profile_University::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.recommender.bki.Profile.University)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&year_from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&year_to_) -
        reinterpret_cast<char*>(&year_from_)) + sizeof(year_to_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Profile_University::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.recommender.bki.Profile.University)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.University.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year_from = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_year_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year_to = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_year_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.recommender.bki.Profile.University)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.recommender.bki.Profile.University)
  return false;
#undef DO_
}

void Profile_University::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.recommender.bki.Profile.University)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.University.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // optional int32 year_from = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->year_from(), output);
  }

  // optional int32 year_to = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->year_to(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.recommender.bki.Profile.University)
}

::google::protobuf::uint8* Profile_University::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.recommender.bki.Profile.University)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.University.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // optional int32 year_from = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->year_from(), target);
  }

  // optional int32 year_to = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->year_to(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.recommender.bki.Profile.University)
  return target;
}

size_t Profile_University::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.recommender.bki.Profile.University)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional int32 year_from = 3;
    if (has_year_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year_from());
    }

    // optional int32 year_to = 4;
    if (has_year_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year_to());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile_University::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.recommender.bki.Profile.University)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile_University* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Profile_University>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.recommender.bki.Profile.University)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.recommender.bki.Profile.University)
    MergeFrom(*source);
  }
}

void Profile_University::MergeFrom(const Profile_University& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.recommender.bki.Profile.University)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_location()->::ru::mail::go::recommender::bki::Profile_GeoLocation::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000004u) {
      year_from_ = from.year_from_;
    }
    if (cached_has_bits & 0x00000008u) {
      year_to_ = from.year_to_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Profile_University::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.recommender.bki.Profile.University)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile_University::CopyFrom(const Profile_University& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.recommender.bki.Profile.University)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile_University::IsInitialized() const {
  return true;
}

void Profile_University::Swap(Profile_University* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profile_University::InternalSwap(Profile_University* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(location_, other->location_);
  swap(year_from_, other->year_from_);
  swap(year_to_, other->year_to_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Profile_University::GetMetadata() const {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Profile_University

// optional string name = 1;
bool Profile_University::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Profile_University::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Profile_University::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Profile_University::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Profile_University::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.University.name)
  return name_.GetNoArena();
}
void Profile_University::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.University.name)
}
#if LANG_CXX11
void Profile_University::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.University.name)
}
#endif
void Profile_University::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.University.name)
}
void Profile_University::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.University.name)
}
::std::string* Profile_University::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.University.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile_University::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.University.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile_University::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.University.name)
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
bool Profile_University::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Profile_University::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
void Profile_University::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void Profile_University::clear_location() {
  if (location_ != NULL) location_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_location();
}
const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile_University::location() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = location_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.University.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_University::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.University.location)
  return location_;
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_University::release_location() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.University.location)
  clear_has_location();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void Profile_University::set_allocated_location(::ru::mail::go::recommender::bki::Profile_GeoLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.University.location)
}

// optional int32 year_from = 3;
bool Profile_University::has_year_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Profile_University::set_has_year_from() {
  _has_bits_[0] |= 0x00000004u;
}
void Profile_University::clear_has_year_from() {
  _has_bits_[0] &= ~0x00000004u;
}
void Profile_University::clear_year_from() {
  year_from_ = 0;
  clear_has_year_from();
}
::google::protobuf::int32 Profile_University::year_from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.University.year_from)
  return year_from_;
}
void Profile_University::set_year_from(::google::protobuf::int32 value) {
  set_has_year_from();
  year_from_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.University.year_from)
}

// optional int32 year_to = 4;
bool Profile_University::has_year_to() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Profile_University::set_has_year_to() {
  _has_bits_[0] |= 0x00000008u;
}
void Profile_University::clear_has_year_to() {
  _has_bits_[0] &= ~0x00000008u;
}
void Profile_University::clear_year_to() {
  year_to_ = 0;
  clear_has_year_to();
}
::google::protobuf::int32 Profile_University::year_to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.University.year_to)
  return year_to_;
}
void Profile_University::set_year_to(::google::protobuf::int32 value) {
  set_has_year_to();
  year_to_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.University.year_to)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profile_Career::kCompanyFieldNumber;
const int Profile_Career::kLocationFieldNumber;
const int Profile_Career::kYearFromFieldNumber;
const int Profile_Career::kYearToFieldNumber;
const int Profile_Career::kPositionFieldNumber;
const int Profile_Career::kCompanyGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profile_Career::Profile_Career()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.recommender.bki.Profile.Career)
}
Profile_Career::Profile_Career(const Profile_Career& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  company_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_company()) {
    company_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_);
  }
  position_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_position()) {
    position_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_);
  }
  if (from.has_location()) {
    location_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&year_from_, &from.year_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&company_group_id_) -
    reinterpret_cast<char*>(&year_from_)) + sizeof(company_group_id_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.recommender.bki.Profile.Career)
}

void Profile_Career::SharedCtor() {
  _cached_size_ = 0;
  company_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&company_group_id_) -
      reinterpret_cast<char*>(&location_)) + sizeof(company_group_id_));
}

Profile_Career::~Profile_Career() {
  // @@protoc_insertion_point(destructor:ru.mail.go.recommender.bki.Profile.Career)
  SharedDtor();
}

void Profile_Career::SharedDtor() {
  company_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void Profile_Career::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile_Career::descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Profile_Career& Profile_Career::default_instance() {
  protobuf_bki_2eproto::InitDefaults();
  return *internal_default_instance();
}

Profile_Career* Profile_Career::New(::google::protobuf::Arena* arena) const {
  Profile_Career* n = new Profile_Career;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Profile_Career::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.recommender.bki.Profile.Career)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!company_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*company_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!position_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*position_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&year_from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&company_group_id_) -
        reinterpret_cast<char*>(&year_from_)) + sizeof(company_group_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Profile_Career::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.recommender.bki.Profile.Career)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string company = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company().data(), static_cast<int>(this->company().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.Career.company");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year_from = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_year_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year_to = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_year_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), static_cast<int>(this->position().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.Career.position");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 company_group_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_company_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &company_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.recommender.bki.Profile.Career)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.recommender.bki.Profile.Career)
  return false;
#undef DO_
}

void Profile_Career::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.recommender.bki.Profile.Career)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string company = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company().data(), static_cast<int>(this->company().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.Career.company");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->company(), output);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // optional int32 year_from = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->year_from(), output);
  }

  // optional int32 year_to = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->year_to(), output);
  }

  // optional string position = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), static_cast<int>(this->position().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.Career.position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->position(), output);
  }

  // optional int32 company_group_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->company_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.recommender.bki.Profile.Career)
}

::google::protobuf::uint8* Profile_Career::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.recommender.bki.Profile.Career)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string company = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company().data(), static_cast<int>(this->company().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.Career.company");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->company(), target);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // optional int32 year_from = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->year_from(), target);
  }

  // optional int32 year_to = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->year_to(), target);
  }

  // optional string position = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), static_cast<int>(this->position().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.Career.position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->position(), target);
  }

  // optional int32 company_group_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->company_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.recommender.bki.Profile.Career)
  return target;
}

size_t Profile_Career::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.recommender.bki.Profile.Career)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string company = 1;
    if (has_company()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company());
    }

    // optional string position = 5;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional int32 year_from = 3;
    if (has_year_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year_from());
    }

    // optional int32 year_to = 4;
    if (has_year_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year_to());
    }

    // optional int32 company_group_id = 6;
    if (has_company_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->company_group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile_Career::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.recommender.bki.Profile.Career)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile_Career* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Profile_Career>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.recommender.bki.Profile.Career)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.recommender.bki.Profile.Career)
    MergeFrom(*source);
  }
}

void Profile_Career::MergeFrom(const Profile_Career& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.recommender.bki.Profile.Career)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_company();
      company_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_position();
      position_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_location()->::ru::mail::go::recommender::bki::Profile_GeoLocation::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000008u) {
      year_from_ = from.year_from_;
    }
    if (cached_has_bits & 0x00000010u) {
      year_to_ = from.year_to_;
    }
    if (cached_has_bits & 0x00000020u) {
      company_group_id_ = from.company_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Profile_Career::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.recommender.bki.Profile.Career)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile_Career::CopyFrom(const Profile_Career& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.recommender.bki.Profile.Career)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile_Career::IsInitialized() const {
  return true;
}

void Profile_Career::Swap(Profile_Career* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profile_Career::InternalSwap(Profile_Career* other) {
  using std::swap;
  company_.Swap(&other->company_);
  position_.Swap(&other->position_);
  swap(location_, other->location_);
  swap(year_from_, other->year_from_);
  swap(year_to_, other->year_to_);
  swap(company_group_id_, other->company_group_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Profile_Career::GetMetadata() const {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Profile_Career

// optional string company = 1;
bool Profile_Career::has_company() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Profile_Career::set_has_company() {
  _has_bits_[0] |= 0x00000001u;
}
void Profile_Career::clear_has_company() {
  _has_bits_[0] &= ~0x00000001u;
}
void Profile_Career::clear_company() {
  company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_company();
}
const ::std::string& Profile_Career::company() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.company)
  return company_.GetNoArena();
}
void Profile_Career::set_company(const ::std::string& value) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Career.company)
}
#if LANG_CXX11
void Profile_Career::set_company(::std::string&& value) {
  set_has_company();
  company_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.Career.company)
}
#endif
void Profile_Career::set_company(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.Career.company)
}
void Profile_Career::set_company(const char* value, size_t size) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.Career.company)
}
::std::string* Profile_Career::mutable_company() {
  set_has_company();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.Career.company)
  return company_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile_Career::release_company() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.Career.company)
  clear_has_company();
  return company_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile_Career::set_allocated_company(::std::string* company) {
  if (company != NULL) {
    set_has_company();
  } else {
    clear_has_company();
  }
  company_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.Career.company)
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
bool Profile_Career::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Profile_Career::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
void Profile_Career::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
void Profile_Career::clear_location() {
  if (location_ != NULL) location_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_location();
}
const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile_Career::location() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = location_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_Career::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.Career.location)
  return location_;
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_Career::release_location() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.Career.location)
  clear_has_location();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void Profile_Career::set_allocated_location(::ru::mail::go::recommender::bki::Profile_GeoLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.Career.location)
}

// optional int32 year_from = 3;
bool Profile_Career::has_year_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Profile_Career::set_has_year_from() {
  _has_bits_[0] |= 0x00000008u;
}
void Profile_Career::clear_has_year_from() {
  _has_bits_[0] &= ~0x00000008u;
}
void Profile_Career::clear_year_from() {
  year_from_ = 0;
  clear_has_year_from();
}
::google::protobuf::int32 Profile_Career::year_from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.year_from)
  return year_from_;
}
void Profile_Career::set_year_from(::google::protobuf::int32 value) {
  set_has_year_from();
  year_from_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Career.year_from)
}

// optional int32 year_to = 4;
bool Profile_Career::has_year_to() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Profile_Career::set_has_year_to() {
  _has_bits_[0] |= 0x00000010u;
}
void Profile_Career::clear_has_year_to() {
  _has_bits_[0] &= ~0x00000010u;
}
void Profile_Career::clear_year_to() {
  year_to_ = 0;
  clear_has_year_to();
}
::google::protobuf::int32 Profile_Career::year_to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.year_to)
  return year_to_;
}
void Profile_Career::set_year_to(::google::protobuf::int32 value) {
  set_has_year_to();
  year_to_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Career.year_to)
}

// optional string position = 5;
bool Profile_Career::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Profile_Career::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void Profile_Career::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void Profile_Career::clear_position() {
  position_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_position();
}
const ::std::string& Profile_Career::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.position)
  return position_.GetNoArena();
}
void Profile_Career::set_position(const ::std::string& value) {
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Career.position)
}
#if LANG_CXX11
void Profile_Career::set_position(::std::string&& value) {
  set_has_position();
  position_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.Career.position)
}
#endif
void Profile_Career::set_position(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.Career.position)
}
void Profile_Career::set_position(const char* value, size_t size) {
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.Career.position)
}
::std::string* Profile_Career::mutable_position() {
  set_has_position();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.Career.position)
  return position_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile_Career::release_position() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.Career.position)
  clear_has_position();
  return position_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile_Career::set_allocated_position(::std::string* position) {
  if (position != NULL) {
    set_has_position();
  } else {
    clear_has_position();
  }
  position_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), position);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.Career.position)
}

// optional int32 company_group_id = 6;
bool Profile_Career::has_company_group_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Profile_Career::set_has_company_group_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Profile_Career::clear_has_company_group_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Profile_Career::clear_company_group_id() {
  company_group_id_ = 0;
  clear_has_company_group_id();
}
::google::protobuf::int32 Profile_Career::company_group_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.company_group_id)
  return company_group_id_;
}
void Profile_Career::set_company_group_id(::google::protobuf::int32 value) {
  set_has_company_group_id();
  company_group_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Career.company_group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profile_Friend::kIdFieldNumber;
const int Profile_Friend::kNamesakesFieldNumber;
const int Profile_Friend::kColleguesFieldNumber;
const int Profile_Friend::kRelativesFieldNumber;
const int Profile_Friend::kClassmatesFieldNumber;
const int Profile_Friend::kMilitarymatesFieldNumber;
const int Profile_Friend::kRoommatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profile_Friend::Profile_Friend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.recommender.bki.Profile.Friend)
}
Profile_Friend::Profile_Friend(const Profile_Friend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&roommates_) -
    reinterpret_cast<char*>(&id_)) + sizeof(roommates_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.recommender.bki.Profile.Friend)
}

void Profile_Friend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roommates_) -
      reinterpret_cast<char*>(&id_)) + sizeof(roommates_));
}

Profile_Friend::~Profile_Friend() {
  // @@protoc_insertion_point(destructor:ru.mail.go.recommender.bki.Profile.Friend)
  SharedDtor();
}

void Profile_Friend::SharedDtor() {
}

void Profile_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile_Friend::descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Profile_Friend& Profile_Friend::default_instance() {
  protobuf_bki_2eproto::InitDefaults();
  return *internal_default_instance();
}

Profile_Friend* Profile_Friend::New(::google::protobuf::Arena* arena) const {
  Profile_Friend* n = new Profile_Friend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Profile_Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.recommender.bki.Profile.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roommates_) -
        reinterpret_cast<char*>(&id_)) + sizeof(roommates_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Profile_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.recommender.bki.Profile.Friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool namesakes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_namesakes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &namesakes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool collegues = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_collegues();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collegues_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool relatives = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_relatives();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool classmates = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_classmates();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &classmates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool militarymates = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_militarymates();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &militarymates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool roommates = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_roommates();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &roommates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.recommender.bki.Profile.Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.recommender.bki.Profile.Friend)
  return false;
#undef DO_
}

void Profile_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.recommender.bki.Profile.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bool namesakes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->namesakes(), output);
  }

  // optional bool collegues = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->collegues(), output);
  }

  // optional bool relatives = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->relatives(), output);
  }

  // optional bool classmates = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->classmates(), output);
  }

  // optional bool militarymates = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->militarymates(), output);
  }

  // optional bool roommates = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->roommates(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.recommender.bki.Profile.Friend)
}

::google::protobuf::uint8* Profile_Friend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.recommender.bki.Profile.Friend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bool namesakes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->namesakes(), target);
  }

  // optional bool collegues = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->collegues(), target);
  }

  // optional bool relatives = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->relatives(), target);
  }

  // optional bool classmates = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->classmates(), target);
  }

  // optional bool militarymates = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->militarymates(), target);
  }

  // optional bool roommates = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->roommates(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.recommender.bki.Profile.Friend)
  return target;
}

size_t Profile_Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.recommender.bki.Profile.Friend)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional bool namesakes = 2;
    if (has_namesakes()) {
      total_size += 1 + 1;
    }

    // optional bool collegues = 3;
    if (has_collegues()) {
      total_size += 1 + 1;
    }

    // optional bool relatives = 4;
    if (has_relatives()) {
      total_size += 1 + 1;
    }

    // optional bool classmates = 5;
    if (has_classmates()) {
      total_size += 1 + 1;
    }

    // optional bool militarymates = 6;
    if (has_militarymates()) {
      total_size += 1 + 1;
    }

    // optional bool roommates = 7;
    if (has_roommates()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile_Friend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.recommender.bki.Profile.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile_Friend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Profile_Friend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.recommender.bki.Profile.Friend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.recommender.bki.Profile.Friend)
    MergeFrom(*source);
  }
}

void Profile_Friend::MergeFrom(const Profile_Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.recommender.bki.Profile.Friend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      namesakes_ = from.namesakes_;
    }
    if (cached_has_bits & 0x00000004u) {
      collegues_ = from.collegues_;
    }
    if (cached_has_bits & 0x00000008u) {
      relatives_ = from.relatives_;
    }
    if (cached_has_bits & 0x00000010u) {
      classmates_ = from.classmates_;
    }
    if (cached_has_bits & 0x00000020u) {
      militarymates_ = from.militarymates_;
    }
    if (cached_has_bits & 0x00000040u) {
      roommates_ = from.roommates_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Profile_Friend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.recommender.bki.Profile.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile_Friend::CopyFrom(const Profile_Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.recommender.bki.Profile.Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Profile_Friend::Swap(Profile_Friend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profile_Friend::InternalSwap(Profile_Friend* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(namesakes_, other->namesakes_);
  swap(collegues_, other->collegues_);
  swap(relatives_, other->relatives_);
  swap(classmates_, other->classmates_);
  swap(militarymates_, other->militarymates_);
  swap(roommates_, other->roommates_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Profile_Friend::GetMetadata() const {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Profile_Friend

// required int64 id = 1;
bool Profile_Friend::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Profile_Friend::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Profile_Friend::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Profile_Friend::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 Profile_Friend::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.id)
  return id_;
}
void Profile_Friend::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.id)
}

// optional bool namesakes = 2;
bool Profile_Friend::has_namesakes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Profile_Friend::set_has_namesakes() {
  _has_bits_[0] |= 0x00000002u;
}
void Profile_Friend::clear_has_namesakes() {
  _has_bits_[0] &= ~0x00000002u;
}
void Profile_Friend::clear_namesakes() {
  namesakes_ = false;
  clear_has_namesakes();
}
bool Profile_Friend::namesakes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.namesakes)
  return namesakes_;
}
void Profile_Friend::set_namesakes(bool value) {
  set_has_namesakes();
  namesakes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.namesakes)
}

// optional bool collegues = 3;
bool Profile_Friend::has_collegues() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Profile_Friend::set_has_collegues() {
  _has_bits_[0] |= 0x00000004u;
}
void Profile_Friend::clear_has_collegues() {
  _has_bits_[0] &= ~0x00000004u;
}
void Profile_Friend::clear_collegues() {
  collegues_ = false;
  clear_has_collegues();
}
bool Profile_Friend::collegues() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.collegues)
  return collegues_;
}
void Profile_Friend::set_collegues(bool value) {
  set_has_collegues();
  collegues_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.collegues)
}

// optional bool relatives = 4;
bool Profile_Friend::has_relatives() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Profile_Friend::set_has_relatives() {
  _has_bits_[0] |= 0x00000008u;
}
void Profile_Friend::clear_has_relatives() {
  _has_bits_[0] &= ~0x00000008u;
}
void Profile_Friend::clear_relatives() {
  relatives_ = false;
  clear_has_relatives();
}
bool Profile_Friend::relatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.relatives)
  return relatives_;
}
void Profile_Friend::set_relatives(bool value) {
  set_has_relatives();
  relatives_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.relatives)
}

// optional bool classmates = 5;
bool Profile_Friend::has_classmates() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Profile_Friend::set_has_classmates() {
  _has_bits_[0] |= 0x00000010u;
}
void Profile_Friend::clear_has_classmates() {
  _has_bits_[0] &= ~0x00000010u;
}
void Profile_Friend::clear_classmates() {
  classmates_ = false;
  clear_has_classmates();
}
bool Profile_Friend::classmates() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.classmates)
  return classmates_;
}
void Profile_Friend::set_classmates(bool value) {
  set_has_classmates();
  classmates_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.classmates)
}

// optional bool militarymates = 6;
bool Profile_Friend::has_militarymates() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Profile_Friend::set_has_militarymates() {
  _has_bits_[0] |= 0x00000020u;
}
void Profile_Friend::clear_has_militarymates() {
  _has_bits_[0] &= ~0x00000020u;
}
void Profile_Friend::clear_militarymates() {
  militarymates_ = false;
  clear_has_militarymates();
}
bool Profile_Friend::militarymates() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.militarymates)
  return militarymates_;
}
void Profile_Friend::set_militarymates(bool value) {
  set_has_militarymates();
  militarymates_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.militarymates)
}

// optional bool roommates = 7;
bool Profile_Friend::has_roommates() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Profile_Friend::set_has_roommates() {
  _has_bits_[0] |= 0x00000040u;
}
void Profile_Friend::clear_has_roommates() {
  _has_bits_[0] &= ~0x00000040u;
}
void Profile_Friend::clear_roommates() {
  roommates_ = false;
  clear_has_roommates();
}
bool Profile_Friend::roommates() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.roommates)
  return roommates_;
}
void Profile_Friend::set_roommates(bool value) {
  set_has_roommates();
  roommates_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.roommates)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Profile::kIdFieldNumber;
const int Profile::kLinkFieldNumber;
const int Profile::kFirstNameFieldNumber;
const int Profile::kLastNameFieldNumber;
const int Profile::kMiddleNameFieldNumber;
const int Profile::kBirthDayFieldNumber;
const int Profile::kBirthMonthFieldNumber;
const int Profile::kBirthYearFieldNumber;
const int Profile::kPhotoFieldNumber;
const int Profile::kSexFieldNumber;
const int Profile::kBirthPlaceFieldNumber;
const int Profile::kCurrentPlaceFieldNumber;
const int Profile::kPhoneFieldNumber;
const int Profile::kEmailFieldNumber;
const int Profile::kSkypeFieldNumber;
const int Profile::kLastSeenTimestampFieldNumber;
const int Profile::kSchoolsFieldNumber;
const int Profile::kUniversitiesFieldNumber;
const int Profile::kCareerFieldNumber;
const int Profile::kInterestsFieldNumber;
const int Profile::kFriendsFieldNumber;
const int Profile::kMaritalStatusTypeFieldNumber;
const int Profile::kPlatformsTypeFieldNumber;
const int Profile::kGroupsFieldNumber;
const int Profile::kFriendsMajorityPlaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Profile::Profile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.recommender.bki.Profile)
}
Profile::Profile(const Profile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      schools_(from.schools_),
      universities_(from.universities_),
      career_(from.career_),
      interests_(from.interests_),
      friends_(from.friends_),
      platforms_type_(from.platforms_type_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link()) {
    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  first_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_first_name()) {
    first_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_name_);
  }
  last_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_name()) {
    last_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_name_);
  }
  middle_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_middle_name()) {
    middle_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.middle_name_);
  }
  photo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_photo()) {
    photo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_);
  }
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phone()) {
    phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  skype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_skype()) {
    skype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skype_);
  }
  if (from.has_id()) {
    id_ = new ::ru::mail::go::recommender::bki::ProfileID(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_birth_place()) {
    birth_place_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation(*from.birth_place_);
  } else {
    birth_place_ = NULL;
  }
  if (from.has_current_place()) {
    current_place_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation(*from.current_place_);
  } else {
    current_place_ = NULL;
  }
  if (from.has_friends_majority_place()) {
    friends_majority_place_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation(*from.friends_majority_place_);
  } else {
    friends_majority_place_ = NULL;
  }
  ::memcpy(&birth_day_, &from.birth_day_,
    static_cast<size_t>(reinterpret_cast<char*>(&marital_status_type_) -
    reinterpret_cast<char*>(&birth_day_)) + sizeof(marital_status_type_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.recommender.bki.Profile)
}

void Profile::SharedCtor() {
  _cached_size_ = 0;
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  middle_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&marital_status_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(marital_status_type_));
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:ru.mail.go.recommender.bki.Profile)
  SharedDtor();
}

void Profile::SharedDtor() {
  link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  middle_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  photo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete birth_place_;
  if (this != internal_default_instance()) delete current_place_;
  if (this != internal_default_instance()) delete friends_majority_place_;
}

void Profile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile::descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Profile& Profile::default_instance() {
  protobuf_bki_2eproto::InitDefaults();
  return *internal_default_instance();
}

Profile* Profile::New(::google::protobuf::Arena* arena) const {
  Profile* n = new Profile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.recommender.bki.Profile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schools_.Clear();
  universities_.Clear();
  career_.Clear();
  interests_.Clear();
  friends_.Clear();
  platforms_type_.Clear();
  groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!link_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*link_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!first_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*first_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!last_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*last_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!middle_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*middle_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!photo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*photo_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!phone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phone_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!email_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*email_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!skype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*skype_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::ru::mail::go::recommender::bki::ProfileID::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(birth_place_ != NULL);
      birth_place_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(current_place_ != NULL);
      current_place_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(friends_majority_place_ != NULL);
      friends_majority_place_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
    }
  }
  if (cached_has_bits & 61440u) {
    ::memset(&birth_day_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sex_) -
        reinterpret_cast<char*>(&birth_day_)) + sizeof(sex_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&last_seen_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&marital_status_type_) -
        reinterpret_cast<char*>(&last_seen_timestamp_)) + sizeof(marital_status_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Profile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.recommender.bki.Profile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.recommender.bki.ProfileID id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string link = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link().data(), static_cast<int>(this->link().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string first_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first_name().data(), static_cast<int>(this->first_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.first_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_name().data(), static_cast<int>(this->last_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.last_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string middle_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_middle_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->middle_name().data(), static_cast<int>(this->middle_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.middle_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 birth_day = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_birth_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birth_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 birth_month = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_birth_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birth_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 birth_year = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_birth_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birth_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string photo = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_photo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->photo().data(), static_cast<int>(this->photo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.photo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.recommender.bki.Profile.Sex sex = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::recommender::bki::Profile_Sex_IsValid(value)) {
            set_sex(static_cast< ::ru::mail::go::recommender::bki::Profile_Sex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.recommender.bki.Profile.GeoLocation birth_place = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_birth_place()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.recommender.bki.Profile.GeoLocation current_place = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_place()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phone = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), static_cast<int>(this->phone().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.phone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.email");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string skype = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skype().data(), static_cast<int>(this->skype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.skype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_seen_timestamp = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_last_seen_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_seen_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.recommender.bki.Profile.School schools = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schools()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.recommender.bki.Profile.University universities = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_universities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.recommender.bki.Profile.Career career = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_career()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string interests = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_interests()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interests(this->interests_size() - 1).data(),
            static_cast<int>(this->interests(this->interests_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.Profile.interests");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.recommender.bki.Profile.Friend friends = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.recommender.bki.Profile.MaritalStatus marital_status_type = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::recommender::bki::Profile_MaritalStatus_IsValid(value)) {
            set_marital_status_type(static_cast< ::ru::mail::go::recommender::bki::Profile_MaritalStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                25, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ru.mail.go.recommender.bki.Profile.Platform platforms_type = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::mail::go::recommender::bki::Profile_Platform_IsValid(value)) {
            add_platforms_type(static_cast< ::ru::mail::go::recommender::bki::Profile_Platform >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                26, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 26,
                 ::ru::mail::go::recommender::bki::Profile_Platform_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_platforms_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 groups = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 216u, input, this->mutable_groups())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_groups())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ru.mail.go.recommender.bki.Profile.GeoLocation friends_majority_place = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends_majority_place()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.recommender.bki.Profile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.recommender.bki.Profile)
  return false;
#undef DO_
}

void Profile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.recommender.bki.Profile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.recommender.bki.ProfileID id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional string link = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->link(), output);
  }

  // optional string first_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_name().data(), static_cast<int>(this->first_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.first_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->first_name(), output);
  }

  // optional string last_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_name().data(), static_cast<int>(this->last_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.last_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->last_name(), output);
  }

  // optional string middle_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->middle_name().data(), static_cast<int>(this->middle_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.middle_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->middle_name(), output);
  }

  // optional int32 birth_day = 7;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->birth_day(), output);
  }

  // optional int32 birth_month = 8;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->birth_month(), output);
  }

  // optional int32 birth_year = 9;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->birth_year(), output);
  }

  // optional string photo = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->photo().data(), static_cast<int>(this->photo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.photo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->photo(), output);
  }

  // optional .ru.mail.go.recommender.bki.Profile.Sex sex = 11;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->sex(), output);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation birth_place = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->birth_place_, output);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation current_place = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->current_place_, output);
  }

  // optional string phone = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->phone(), output);
  }

  // optional string email = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->email(), output);
  }

  // optional string skype = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skype().data(), static_cast<int>(this->skype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.skype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->skype(), output);
  }

  // optional int64 last_seen_timestamp = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->last_seen_timestamp(), output);
  }

  // repeated .ru.mail.go.recommender.bki.Profile.School schools = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schools_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->schools(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.recommender.bki.Profile.University universities = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->universities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->universities(static_cast<int>(i)), output);
  }

  // repeated .ru.mail.go.recommender.bki.Profile.Career career = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->career_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->career(static_cast<int>(i)), output);
  }

  // repeated string interests = 23;
  for (int i = 0, n = this->interests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interests(i).data(), static_cast<int>(this->interests(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.interests");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->interests(i), output);
  }

  // repeated .ru.mail.go.recommender.bki.Profile.Friend friends = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->friends(static_cast<int>(i)), output);
  }

  // optional .ru.mail.go.recommender.bki.Profile.MaritalStatus marital_status_type = 25;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->marital_status_type(), output);
  }

  // repeated .ru.mail.go.recommender.bki.Profile.Platform platforms_type = 26;
  for (int i = 0, n = this->platforms_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->platforms_type(i), output);
  }

  // repeated int32 groups = 27;
  for (int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      27, this->groups(i), output);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation friends_majority_place = 28;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->friends_majority_place_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.recommender.bki.Profile)
}

::google::protobuf::uint8* Profile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.recommender.bki.Profile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.recommender.bki.ProfileID id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional string link = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->link(), target);
  }

  // optional string first_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_name().data(), static_cast<int>(this->first_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.first_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->first_name(), target);
  }

  // optional string last_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_name().data(), static_cast<int>(this->last_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.last_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->last_name(), target);
  }

  // optional string middle_name = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->middle_name().data(), static_cast<int>(this->middle_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.middle_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->middle_name(), target);
  }

  // optional int32 birth_day = 7;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->birth_day(), target);
  }

  // optional int32 birth_month = 8;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->birth_month(), target);
  }

  // optional int32 birth_year = 9;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->birth_year(), target);
  }

  // optional string photo = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->photo().data(), static_cast<int>(this->photo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.photo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->photo(), target);
  }

  // optional .ru.mail.go.recommender.bki.Profile.Sex sex = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->sex(), target);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation birth_place = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->birth_place_, deterministic, target);
  }

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation current_place = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->current_place_, deterministic, target);
  }

  // optional string phone = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), static_cast<int>(this->phone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->phone(), target);
  }

  // optional string email = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->email(), target);
  }

  // optional string skype = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skype().data(), static_cast<int>(this->skype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.skype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->skype(), target);
  }

  // optional int64 last_seen_timestamp = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->last_seen_timestamp(), target);
  }

  // repeated .ru.mail.go.recommender.bki.Profile.School schools = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schools_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->schools(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.recommender.bki.Profile.University universities = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->universities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->universities(static_cast<int>(i)), deterministic, target);
  }

  // repeated .ru.mail.go.recommender.bki.Profile.Career career = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->career_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->career(static_cast<int>(i)), deterministic, target);
  }

  // repeated string interests = 23;
  for (int i = 0, n = this->interests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interests(i).data(), static_cast<int>(this->interests(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.Profile.interests");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(23, this->interests(i), target);
  }

  // repeated .ru.mail.go.recommender.bki.Profile.Friend friends = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->friends_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->friends(static_cast<int>(i)), deterministic, target);
  }

  // optional .ru.mail.go.recommender.bki.Profile.MaritalStatus marital_status_type = 25;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->marital_status_type(), target);
  }

  // repeated .ru.mail.go.recommender.bki.Profile.Platform platforms_type = 26;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    26, this->platforms_type_, target);

  // repeated int32 groups = 27;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(27, this->groups_, target);

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation friends_majority_place = 28;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->friends_majority_place_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.recommender.bki.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.recommender.bki.Profile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ru.mail.go.recommender.bki.ProfileID id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }
  // repeated .ru.mail.go.recommender.bki.Profile.School schools = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->schools_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schools(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.recommender.bki.Profile.University universities = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->universities_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->universities(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.recommender.bki.Profile.Career career = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->career_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->career(static_cast<int>(i)));
    }
  }

  // repeated string interests = 23;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->interests_size());
  for (int i = 0, n = this->interests_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->interests(i));
  }

  // repeated .ru.mail.go.recommender.bki.Profile.Friend friends = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->friends_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends(static_cast<int>(i)));
    }
  }

  // repeated .ru.mail.go.recommender.bki.Profile.Platform platforms_type = 26;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->platforms_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->platforms_type(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated int32 groups = 27;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->groups_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->groups_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string link = 3;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link());
    }

    // optional string first_name = 4;
    if (has_first_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_name());
    }

    // optional string last_name = 5;
    if (has_last_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_name());
    }

    // optional string middle_name = 6;
    if (has_middle_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->middle_name());
    }

    // optional string photo = 10;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->photo());
    }

    // optional string phone = 15;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string email = 16;
    if (has_email()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string skype = 17;
    if (has_skype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skype());
    }

  }
  if (_has_bits_[8 / 32] & 65024u) {
    // optional .ru.mail.go.recommender.bki.Profile.GeoLocation birth_place = 12;
    if (has_birth_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->birth_place_);
    }

    // optional .ru.mail.go.recommender.bki.Profile.GeoLocation current_place = 13;
    if (has_current_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->current_place_);
    }

    // optional .ru.mail.go.recommender.bki.Profile.GeoLocation friends_majority_place = 28;
    if (has_friends_majority_place()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->friends_majority_place_);
    }

    // optional int32 birth_day = 7;
    if (has_birth_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birth_day());
    }

    // optional int32 birth_month = 8;
    if (has_birth_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birth_month());
    }

    // optional int32 birth_year = 9;
    if (has_birth_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birth_year());
    }

    // optional .ru.mail.go.recommender.bki.Profile.Sex sex = 11;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional int64 last_seen_timestamp = 19;
    if (has_last_seen_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_seen_timestamp());
    }

    // optional .ru.mail.go.recommender.bki.Profile.MaritalStatus marital_status_type = 25;
    if (has_marital_status_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->marital_status_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.recommender.bki.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  const Profile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Profile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.recommender.bki.Profile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.recommender.bki.Profile)
    MergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.recommender.bki.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schools_.MergeFrom(from.schools_);
  universities_.MergeFrom(from.universities_);
  career_.MergeFrom(from.career_);
  interests_.MergeFrom(from.interests_);
  friends_.MergeFrom(from.friends_);
  platforms_type_.MergeFrom(from.platforms_type_);
  groups_.MergeFrom(from.groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_link();
      link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_first_name();
      first_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_last_name();
      last_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_middle_name();
      middle_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.middle_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_photo();
      photo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.photo_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_phone();
      phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phone_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_skype();
      skype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skype_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_id()->::ru::mail::go::recommender::bki::ProfileID::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_birth_place()->::ru::mail::go::recommender::bki::Profile_GeoLocation::MergeFrom(from.birth_place());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_current_place()->::ru::mail::go::recommender::bki::Profile_GeoLocation::MergeFrom(from.current_place());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_friends_majority_place()->::ru::mail::go::recommender::bki::Profile_GeoLocation::MergeFrom(from.friends_majority_place());
    }
    if (cached_has_bits & 0x00001000u) {
      birth_day_ = from.birth_day_;
    }
    if (cached_has_bits & 0x00002000u) {
      birth_month_ = from.birth_month_;
    }
    if (cached_has_bits & 0x00004000u) {
      birth_year_ = from.birth_year_;
    }
    if (cached_has_bits & 0x00008000u) {
      sex_ = from.sex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      last_seen_timestamp_ = from.last_seen_timestamp_;
    }
    if (cached_has_bits & 0x00020000u) {
      marital_status_type_ = from.marital_status_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Profile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.recommender.bki.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.recommender.bki.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->friends())) return false;
  if (has_id()) {
    if (!this->id_->IsInitialized()) return false;
  }
  return true;
}

void Profile::Swap(Profile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Profile::InternalSwap(Profile* other) {
  using std::swap;
  schools_.InternalSwap(&other->schools_);
  universities_.InternalSwap(&other->universities_);
  career_.InternalSwap(&other->career_);
  interests_.InternalSwap(&other->interests_);
  friends_.InternalSwap(&other->friends_);
  platforms_type_.InternalSwap(&other->platforms_type_);
  groups_.InternalSwap(&other->groups_);
  link_.Swap(&other->link_);
  first_name_.Swap(&other->first_name_);
  last_name_.Swap(&other->last_name_);
  middle_name_.Swap(&other->middle_name_);
  photo_.Swap(&other->photo_);
  phone_.Swap(&other->phone_);
  email_.Swap(&other->email_);
  skype_.Swap(&other->skype_);
  swap(id_, other->id_);
  swap(birth_place_, other->birth_place_);
  swap(current_place_, other->current_place_);
  swap(friends_majority_place_, other->friends_majority_place_);
  swap(birth_day_, other->birth_day_);
  swap(birth_month_, other->birth_month_);
  swap(birth_year_, other->birth_year_);
  swap(sex_, other->sex_);
  swap(last_seen_timestamp_, other->last_seen_timestamp_);
  swap(marital_status_type_, other->marital_status_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Profile::GetMetadata() const {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Profile

// required .ru.mail.go.recommender.bki.ProfileID id = 1;
bool Profile::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Profile::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
void Profile::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void Profile::clear_id() {
  if (id_ != NULL) id_->::ru::mail::go::recommender::bki::ProfileID::Clear();
  clear_has_id();
}
const ::ru::mail::go::recommender::bki::ProfileID& Profile::id() const {
  const ::ru::mail::go::recommender::bki::ProfileID* p = id_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::ProfileID*>(
      &::ru::mail::go::recommender::bki::_ProfileID_default_instance_);
}
::ru::mail::go::recommender::bki::ProfileID* Profile::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::ru::mail::go::recommender::bki::ProfileID;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.id)
  return id_;
}
::ru::mail::go::recommender::bki::ProfileID* Profile::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.id)
  clear_has_id();
  ::ru::mail::go::recommender::bki::ProfileID* temp = id_;
  id_ = NULL;
  return temp;
}
void Profile::set_allocated_id(::ru::mail::go::recommender::bki::ProfileID* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.id)
}

// optional string link = 3;
bool Profile::has_link() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Profile::set_has_link() {
  _has_bits_[0] |= 0x00000001u;
}
void Profile::clear_has_link() {
  _has_bits_[0] &= ~0x00000001u;
}
void Profile::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
const ::std::string& Profile::link() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.link)
  return link_.GetNoArena();
}
void Profile::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.link)
}
#if LANG_CXX11
void Profile::set_link(::std::string&& value) {
  set_has_link();
  link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.link)
}
#endif
void Profile::set_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.link)
}
void Profile::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.link)
}
::std::string* Profile::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_link() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.link)
  clear_has_link();
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.link)
}

// optional string first_name = 4;
bool Profile::has_first_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Profile::set_has_first_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Profile::clear_has_first_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Profile::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_name();
}
const ::std::string& Profile::first_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.first_name)
  return first_name_.GetNoArena();
}
void Profile::set_first_name(const ::std::string& value) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.first_name)
}
#if LANG_CXX11
void Profile::set_first_name(::std::string&& value) {
  set_has_first_name();
  first_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.first_name)
}
#endif
void Profile::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.first_name)
}
void Profile::set_first_name(const char* value, size_t size) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.first_name)
}
::std::string* Profile::mutable_first_name() {
  set_has_first_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.first_name)
  return first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_first_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.first_name)
  clear_has_first_name();
  return first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_first_name(::std::string* first_name) {
  if (first_name != NULL) {
    set_has_first_name();
  } else {
    clear_has_first_name();
  }
  first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.first_name)
}

// optional string last_name = 5;
bool Profile::has_last_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Profile::set_has_last_name() {
  _has_bits_[0] |= 0x00000004u;
}
void Profile::clear_has_last_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void Profile::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_name();
}
const ::std::string& Profile::last_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.last_name)
  return last_name_.GetNoArena();
}
void Profile::set_last_name(const ::std::string& value) {
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.last_name)
}
#if LANG_CXX11
void Profile::set_last_name(::std::string&& value) {
  set_has_last_name();
  last_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.last_name)
}
#endif
void Profile::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.last_name)
}
void Profile::set_last_name(const char* value, size_t size) {
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.last_name)
}
::std::string* Profile::mutable_last_name() {
  set_has_last_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.last_name)
  return last_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_last_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.last_name)
  clear_has_last_name();
  return last_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_last_name(::std::string* last_name) {
  if (last_name != NULL) {
    set_has_last_name();
  } else {
    clear_has_last_name();
  }
  last_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.last_name)
}

// optional string middle_name = 6;
bool Profile::has_middle_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Profile::set_has_middle_name() {
  _has_bits_[0] |= 0x00000008u;
}
void Profile::clear_has_middle_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void Profile::clear_middle_name() {
  middle_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_middle_name();
}
const ::std::string& Profile::middle_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.middle_name)
  return middle_name_.GetNoArena();
}
void Profile::set_middle_name(const ::std::string& value) {
  set_has_middle_name();
  middle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.middle_name)
}
#if LANG_CXX11
void Profile::set_middle_name(::std::string&& value) {
  set_has_middle_name();
  middle_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.middle_name)
}
#endif
void Profile::set_middle_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_middle_name();
  middle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.middle_name)
}
void Profile::set_middle_name(const char* value, size_t size) {
  set_has_middle_name();
  middle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.middle_name)
}
::std::string* Profile::mutable_middle_name() {
  set_has_middle_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.middle_name)
  return middle_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_middle_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.middle_name)
  clear_has_middle_name();
  return middle_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_middle_name(::std::string* middle_name) {
  if (middle_name != NULL) {
    set_has_middle_name();
  } else {
    clear_has_middle_name();
  }
  middle_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), middle_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.middle_name)
}

// optional int32 birth_day = 7;
bool Profile::has_birth_day() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Profile::set_has_birth_day() {
  _has_bits_[0] |= 0x00001000u;
}
void Profile::clear_has_birth_day() {
  _has_bits_[0] &= ~0x00001000u;
}
void Profile::clear_birth_day() {
  birth_day_ = 0;
  clear_has_birth_day();
}
::google::protobuf::int32 Profile::birth_day() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.birth_day)
  return birth_day_;
}
void Profile::set_birth_day(::google::protobuf::int32 value) {
  set_has_birth_day();
  birth_day_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.birth_day)
}

// optional int32 birth_month = 8;
bool Profile::has_birth_month() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Profile::set_has_birth_month() {
  _has_bits_[0] |= 0x00002000u;
}
void Profile::clear_has_birth_month() {
  _has_bits_[0] &= ~0x00002000u;
}
void Profile::clear_birth_month() {
  birth_month_ = 0;
  clear_has_birth_month();
}
::google::protobuf::int32 Profile::birth_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.birth_month)
  return birth_month_;
}
void Profile::set_birth_month(::google::protobuf::int32 value) {
  set_has_birth_month();
  birth_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.birth_month)
}

// optional int32 birth_year = 9;
bool Profile::has_birth_year() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Profile::set_has_birth_year() {
  _has_bits_[0] |= 0x00004000u;
}
void Profile::clear_has_birth_year() {
  _has_bits_[0] &= ~0x00004000u;
}
void Profile::clear_birth_year() {
  birth_year_ = 0;
  clear_has_birth_year();
}
::google::protobuf::int32 Profile::birth_year() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.birth_year)
  return birth_year_;
}
void Profile::set_birth_year(::google::protobuf::int32 value) {
  set_has_birth_year();
  birth_year_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.birth_year)
}

// optional string photo = 10;
bool Profile::has_photo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Profile::set_has_photo() {
  _has_bits_[0] |= 0x00000010u;
}
void Profile::clear_has_photo() {
  _has_bits_[0] &= ~0x00000010u;
}
void Profile::clear_photo() {
  photo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_photo();
}
const ::std::string& Profile::photo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.photo)
  return photo_.GetNoArena();
}
void Profile::set_photo(const ::std::string& value) {
  set_has_photo();
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.photo)
}
#if LANG_CXX11
void Profile::set_photo(::std::string&& value) {
  set_has_photo();
  photo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.photo)
}
#endif
void Profile::set_photo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_photo();
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.photo)
}
void Profile::set_photo(const char* value, size_t size) {
  set_has_photo();
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.photo)
}
::std::string* Profile::mutable_photo() {
  set_has_photo();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.photo)
  return photo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_photo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.photo)
  clear_has_photo();
  return photo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_photo(::std::string* photo) {
  if (photo != NULL) {
    set_has_photo();
  } else {
    clear_has_photo();
  }
  photo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.photo)
}

// optional .ru.mail.go.recommender.bki.Profile.Sex sex = 11;
bool Profile::has_sex() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Profile::set_has_sex() {
  _has_bits_[0] |= 0x00008000u;
}
void Profile::clear_has_sex() {
  _has_bits_[0] &= ~0x00008000u;
}
void Profile::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
::ru::mail::go::recommender::bki::Profile_Sex Profile::sex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.sex)
  return static_cast< ::ru::mail::go::recommender::bki::Profile_Sex >(sex_);
}
void Profile::set_sex(::ru::mail::go::recommender::bki::Profile_Sex value) {
  assert(::ru::mail::go::recommender::bki::Profile_Sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.sex)
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation birth_place = 12;
bool Profile::has_birth_place() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Profile::set_has_birth_place() {
  _has_bits_[0] |= 0x00000200u;
}
void Profile::clear_has_birth_place() {
  _has_bits_[0] &= ~0x00000200u;
}
void Profile::clear_birth_place() {
  if (birth_place_ != NULL) birth_place_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_birth_place();
}
const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile::birth_place() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = birth_place_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.birth_place)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::mutable_birth_place() {
  set_has_birth_place();
  if (birth_place_ == NULL) {
    birth_place_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.birth_place)
  return birth_place_;
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::release_birth_place() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.birth_place)
  clear_has_birth_place();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = birth_place_;
  birth_place_ = NULL;
  return temp;
}
void Profile::set_allocated_birth_place(::ru::mail::go::recommender::bki::Profile_GeoLocation* birth_place) {
  delete birth_place_;
  birth_place_ = birth_place;
  if (birth_place) {
    set_has_birth_place();
  } else {
    clear_has_birth_place();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.birth_place)
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation current_place = 13;
bool Profile::has_current_place() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Profile::set_has_current_place() {
  _has_bits_[0] |= 0x00000400u;
}
void Profile::clear_has_current_place() {
  _has_bits_[0] &= ~0x00000400u;
}
void Profile::clear_current_place() {
  if (current_place_ != NULL) current_place_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_current_place();
}
const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile::current_place() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = current_place_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.current_place)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::mutable_current_place() {
  set_has_current_place();
  if (current_place_ == NULL) {
    current_place_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.current_place)
  return current_place_;
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::release_current_place() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.current_place)
  clear_has_current_place();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = current_place_;
  current_place_ = NULL;
  return temp;
}
void Profile::set_allocated_current_place(::ru::mail::go::recommender::bki::Profile_GeoLocation* current_place) {
  delete current_place_;
  current_place_ = current_place;
  if (current_place) {
    set_has_current_place();
  } else {
    clear_has_current_place();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.current_place)
}

// optional string phone = 15;
bool Profile::has_phone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Profile::set_has_phone() {
  _has_bits_[0] |= 0x00000020u;
}
void Profile::clear_has_phone() {
  _has_bits_[0] &= ~0x00000020u;
}
void Profile::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
const ::std::string& Profile::phone() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.phone)
  return phone_.GetNoArena();
}
void Profile::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.phone)
}
#if LANG_CXX11
void Profile::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.phone)
}
#endif
void Profile::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.phone)
}
void Profile::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.phone)
}
::std::string* Profile::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_phone() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.phone)
}

// optional string email = 16;
bool Profile::has_email() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Profile::set_has_email() {
  _has_bits_[0] |= 0x00000040u;
}
void Profile::clear_has_email() {
  _has_bits_[0] &= ~0x00000040u;
}
void Profile::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
const ::std::string& Profile::email() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.email)
  return email_.GetNoArena();
}
void Profile::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.email)
}
#if LANG_CXX11
void Profile::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.email)
}
#endif
void Profile::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.email)
}
void Profile::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.email)
}
::std::string* Profile::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_email() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.email)
}

// optional string skype = 17;
bool Profile::has_skype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Profile::set_has_skype() {
  _has_bits_[0] |= 0x00000080u;
}
void Profile::clear_has_skype() {
  _has_bits_[0] &= ~0x00000080u;
}
void Profile::clear_skype() {
  skype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_skype();
}
const ::std::string& Profile::skype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.skype)
  return skype_.GetNoArena();
}
void Profile::set_skype(const ::std::string& value) {
  set_has_skype();
  skype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.skype)
}
#if LANG_CXX11
void Profile::set_skype(::std::string&& value) {
  set_has_skype();
  skype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.skype)
}
#endif
void Profile::set_skype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_skype();
  skype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.skype)
}
void Profile::set_skype(const char* value, size_t size) {
  set_has_skype();
  skype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.skype)
}
::std::string* Profile::mutable_skype() {
  set_has_skype();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.skype)
  return skype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Profile::release_skype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.skype)
  clear_has_skype();
  return skype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Profile::set_allocated_skype(::std::string* skype) {
  if (skype != NULL) {
    set_has_skype();
  } else {
    clear_has_skype();
  }
  skype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skype);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.skype)
}

// optional int64 last_seen_timestamp = 19;
bool Profile::has_last_seen_timestamp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Profile::set_has_last_seen_timestamp() {
  _has_bits_[0] |= 0x00010000u;
}
void Profile::clear_has_last_seen_timestamp() {
  _has_bits_[0] &= ~0x00010000u;
}
void Profile::clear_last_seen_timestamp() {
  last_seen_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_seen_timestamp();
}
::google::protobuf::int64 Profile::last_seen_timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.last_seen_timestamp)
  return last_seen_timestamp_;
}
void Profile::set_last_seen_timestamp(::google::protobuf::int64 value) {
  set_has_last_seen_timestamp();
  last_seen_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.last_seen_timestamp)
}

// repeated .ru.mail.go.recommender.bki.Profile.School schools = 20;
int Profile::schools_size() const {
  return schools_.size();
}
void Profile::clear_schools() {
  schools_.Clear();
}
const ::ru::mail::go::recommender::bki::Profile_School& Profile::schools(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.schools)
  return schools_.Get(index);
}
::ru::mail::go::recommender::bki::Profile_School* Profile::mutable_schools(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.schools)
  return schools_.Mutable(index);
}
::ru::mail::go::recommender::bki::Profile_School* Profile::add_schools() {
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.schools)
  return schools_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_School >*
Profile::mutable_schools() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.schools)
  return &schools_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_School >&
Profile::schools() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.schools)
  return schools_;
}

// repeated .ru.mail.go.recommender.bki.Profile.University universities = 21;
int Profile::universities_size() const {
  return universities_.size();
}
void Profile::clear_universities() {
  universities_.Clear();
}
const ::ru::mail::go::recommender::bki::Profile_University& Profile::universities(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.universities)
  return universities_.Get(index);
}
::ru::mail::go::recommender::bki::Profile_University* Profile::mutable_universities(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.universities)
  return universities_.Mutable(index);
}
::ru::mail::go::recommender::bki::Profile_University* Profile::add_universities() {
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.universities)
  return universities_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_University >*
Profile::mutable_universities() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.universities)
  return &universities_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_University >&
Profile::universities() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.universities)
  return universities_;
}

// repeated .ru.mail.go.recommender.bki.Profile.Career career = 22;
int Profile::career_size() const {
  return career_.size();
}
void Profile::clear_career() {
  career_.Clear();
}
const ::ru::mail::go::recommender::bki::Profile_Career& Profile::career(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.career)
  return career_.Get(index);
}
::ru::mail::go::recommender::bki::Profile_Career* Profile::mutable_career(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.career)
  return career_.Mutable(index);
}
::ru::mail::go::recommender::bki::Profile_Career* Profile::add_career() {
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.career)
  return career_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Career >*
Profile::mutable_career() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.career)
  return &career_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Career >&
Profile::career() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.career)
  return career_;
}

// repeated string interests = 23;
int Profile::interests_size() const {
  return interests_.size();
}
void Profile::clear_interests() {
  interests_.Clear();
}
const ::std::string& Profile::interests(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.interests)
  return interests_.Get(index);
}
::std::string* Profile::mutable_interests(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.interests)
  return interests_.Mutable(index);
}
void Profile::set_interests(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.interests)
  interests_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Profile::set_interests(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.interests)
  interests_.Mutable(index)->assign(std::move(value));
}
#endif
void Profile::set_interests(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  interests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.interests)
}
void Profile::set_interests(int index, const char* value, size_t size) {
  interests_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.interests)
}
::std::string* Profile::add_interests() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.recommender.bki.Profile.interests)
  return interests_.Add();
}
void Profile::add_interests(const ::std::string& value) {
  interests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.interests)
}
#if LANG_CXX11
void Profile::add_interests(::std::string&& value) {
  interests_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.interests)
}
#endif
void Profile::add_interests(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  interests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.recommender.bki.Profile.interests)
}
void Profile::add_interests(const char* value, size_t size) {
  interests_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.recommender.bki.Profile.interests)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Profile::interests() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.interests)
  return interests_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Profile::mutable_interests() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.interests)
  return &interests_;
}

// repeated .ru.mail.go.recommender.bki.Profile.Friend friends = 24;
int Profile::friends_size() const {
  return friends_.size();
}
void Profile::clear_friends() {
  friends_.Clear();
}
const ::ru::mail::go::recommender::bki::Profile_Friend& Profile::friends(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.friends)
  return friends_.Get(index);
}
::ru::mail::go::recommender::bki::Profile_Friend* Profile::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.friends)
  return friends_.Mutable(index);
}
::ru::mail::go::recommender::bki::Profile_Friend* Profile::add_friends() {
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.friends)
  return friends_.Add();
}
::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Friend >*
Profile::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.friends)
  return &friends_;
}
const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Friend >&
Profile::friends() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.friends)
  return friends_;
}

// optional .ru.mail.go.recommender.bki.Profile.MaritalStatus marital_status_type = 25;
bool Profile::has_marital_status_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Profile::set_has_marital_status_type() {
  _has_bits_[0] |= 0x00020000u;
}
void Profile::clear_has_marital_status_type() {
  _has_bits_[0] &= ~0x00020000u;
}
void Profile::clear_marital_status_type() {
  marital_status_type_ = 0;
  clear_has_marital_status_type();
}
::ru::mail::go::recommender::bki::Profile_MaritalStatus Profile::marital_status_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.marital_status_type)
  return static_cast< ::ru::mail::go::recommender::bki::Profile_MaritalStatus >(marital_status_type_);
}
void Profile::set_marital_status_type(::ru::mail::go::recommender::bki::Profile_MaritalStatus value) {
  assert(::ru::mail::go::recommender::bki::Profile_MaritalStatus_IsValid(value));
  set_has_marital_status_type();
  marital_status_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.marital_status_type)
}

// repeated .ru.mail.go.recommender.bki.Profile.Platform platforms_type = 26;
int Profile::platforms_type_size() const {
  return platforms_type_.size();
}
void Profile::clear_platforms_type() {
  platforms_type_.Clear();
}
::ru::mail::go::recommender::bki::Profile_Platform Profile::platforms_type(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.platforms_type)
  return static_cast< ::ru::mail::go::recommender::bki::Profile_Platform >(platforms_type_.Get(index));
}
void Profile::set_platforms_type(int index, ::ru::mail::go::recommender::bki::Profile_Platform value) {
  assert(::ru::mail::go::recommender::bki::Profile_Platform_IsValid(value));
  platforms_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.platforms_type)
}
void Profile::add_platforms_type(::ru::mail::go::recommender::bki::Profile_Platform value) {
  assert(::ru::mail::go::recommender::bki::Profile_Platform_IsValid(value));
  platforms_type_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.platforms_type)
}
const ::google::protobuf::RepeatedField<int>&
Profile::platforms_type() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.platforms_type)
  return platforms_type_;
}
::google::protobuf::RepeatedField<int>*
Profile::mutable_platforms_type() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.platforms_type)
  return &platforms_type_;
}

// repeated int32 groups = 27;
int Profile::groups_size() const {
  return groups_.size();
}
void Profile::clear_groups() {
  groups_.Clear();
}
::google::protobuf::int32 Profile::groups(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.groups)
  return groups_.Get(index);
}
void Profile::set_groups(int index, ::google::protobuf::int32 value) {
  groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.groups)
}
void Profile::add_groups(::google::protobuf::int32 value) {
  groups_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.groups)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Profile::groups() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.groups)
  return groups_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Profile::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.groups)
  return &groups_;
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation friends_majority_place = 28;
bool Profile::has_friends_majority_place() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Profile::set_has_friends_majority_place() {
  _has_bits_[0] |= 0x00000800u;
}
void Profile::clear_has_friends_majority_place() {
  _has_bits_[0] &= ~0x00000800u;
}
void Profile::clear_friends_majority_place() {
  if (friends_majority_place_ != NULL) friends_majority_place_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_friends_majority_place();
}
const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile::friends_majority_place() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = friends_majority_place_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.friends_majority_place)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::mutable_friends_majority_place() {
  set_has_friends_majority_place();
  if (friends_majority_place_ == NULL) {
    friends_majority_place_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.friends_majority_place)
  return friends_majority_place_;
}
::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::release_friends_majority_place() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.friends_majority_place)
  clear_has_friends_majority_place();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = friends_majority_place_;
  friends_majority_place_ = NULL;
  return temp;
}
void Profile::set_allocated_friends_majority_place(::ru::mail::go::recommender::bki::Profile_GeoLocation* friends_majority_place) {
  delete friends_majority_place_;
  friends_majority_place_ = friends_majority_place;
  if (friends_majority_place) {
    set_has_friends_majority_place();
  } else {
    clear_has_friends_majority_place();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.friends_majority_place)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfilesLink::kFirstFieldNumber;
const int ProfilesLink::kSecondFieldNumber;
const int ProfilesLink::kMatchedNameFieldNumber;
const int ProfilesLink::kMatchedSurnameFieldNumber;
const int ProfilesLink::kMatchedBirthdayFieldNumber;
const int ProfilesLink::kMatchedBirthyearFieldNumber;
const int ProfilesLink::kMatchedCityFieldNumber;
const int ProfilesLink::kMatchedActivityFieldNumber;
const int ProfilesLink::kMatchedSexFieldNumber;
const int ProfilesLink::kMatchTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfilesLink::ProfilesLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.recommender.bki.ProfilesLink)
}
ProfilesLink::ProfilesLink(const ProfilesLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_first()) {
    first_ = new ::ru::mail::go::recommender::bki::ProfileID(*from.first_);
  } else {
    first_ = NULL;
  }
  if (from.has_second()) {
    second_ = new ::ru::mail::go::recommender::bki::ProfileID(*from.second_);
  } else {
    second_ = NULL;
  }
  ::memcpy(&matched_name_, &from.matched_name_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_time_) -
    reinterpret_cast<char*>(&matched_name_)) + sizeof(match_time_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.recommender.bki.ProfilesLink)
}

void ProfilesLink::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_time_) -
      reinterpret_cast<char*>(&first_)) + sizeof(match_time_));
}

ProfilesLink::~ProfilesLink() {
  // @@protoc_insertion_point(destructor:ru.mail.go.recommender.bki.ProfilesLink)
  SharedDtor();
}

void ProfilesLink::SharedDtor() {
  if (this != internal_default_instance()) delete first_;
  if (this != internal_default_instance()) delete second_;
}

void ProfilesLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfilesLink::descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProfilesLink& ProfilesLink::default_instance() {
  protobuf_bki_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProfilesLink* ProfilesLink::New(::google::protobuf::Arena* arena) const {
  ProfilesLink* n = new ProfilesLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfilesLink::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.recommender.bki.ProfilesLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(first_ != NULL);
      first_->::ru::mail::go::recommender::bki::ProfileID::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(second_ != NULL);
      second_->::ru::mail::go::recommender::bki::ProfileID::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&matched_name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matched_activity_) -
        reinterpret_cast<char*>(&matched_name_)) + sizeof(matched_activity_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&matched_sex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_time_) -
        reinterpret_cast<char*>(&matched_sex_)) + sizeof(match_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProfilesLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.recommender.bki.ProfilesLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.mail.go.recommender.bki.ProfileID first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ru.mail.go.recommender.bki.ProfileID second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_second()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool matched_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_matched_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matched_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool matched_surname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_matched_surname();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matched_surname_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool matched_birthday = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_matched_birthday();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matched_birthday_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool matched_birthyear = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_matched_birthyear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matched_birthyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool matched_city = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_matched_city();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matched_city_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool matched_activity = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_matched_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matched_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool matched_sex = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_matched_sex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matched_sex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 match_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_match_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &match_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.recommender.bki.ProfilesLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.recommender.bki.ProfilesLink)
  return false;
#undef DO_
}

void ProfilesLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.recommender.bki.ProfilesLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.recommender.bki.ProfileID first = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->first_, output);
  }

  // required .ru.mail.go.recommender.bki.ProfileID second = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->second_, output);
  }

  // optional bool matched_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->matched_name(), output);
  }

  // optional bool matched_surname = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->matched_surname(), output);
  }

  // optional bool matched_birthday = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->matched_birthday(), output);
  }

  // optional bool matched_birthyear = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->matched_birthyear(), output);
  }

  // optional bool matched_city = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->matched_city(), output);
  }

  // optional bool matched_activity = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->matched_activity(), output);
  }

  // optional bool matched_sex = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->matched_sex(), output);
  }

  // optional int64 match_time = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->match_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.recommender.bki.ProfilesLink)
}

::google::protobuf::uint8* ProfilesLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.recommender.bki.ProfilesLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ru.mail.go.recommender.bki.ProfileID first = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->first_, deterministic, target);
  }

  // required .ru.mail.go.recommender.bki.ProfileID second = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->second_, deterministic, target);
  }

  // optional bool matched_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->matched_name(), target);
  }

  // optional bool matched_surname = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->matched_surname(), target);
  }

  // optional bool matched_birthday = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->matched_birthday(), target);
  }

  // optional bool matched_birthyear = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->matched_birthyear(), target);
  }

  // optional bool matched_city = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->matched_city(), target);
  }

  // optional bool matched_activity = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->matched_activity(), target);
  }

  // optional bool matched_sex = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->matched_sex(), target);
  }

  // optional int64 match_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->match_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.recommender.bki.ProfilesLink)
  return target;
}

size_t ProfilesLink::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ru.mail.go.recommender.bki.ProfilesLink)
  size_t total_size = 0;

  if (has_first()) {
    // required .ru.mail.go.recommender.bki.ProfileID first = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->first_);
  }

  if (has_second()) {
    // required .ru.mail.go.recommender.bki.ProfileID second = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->second_);
  }

  return total_size;
}
size_t ProfilesLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.recommender.bki.ProfilesLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ru.mail.go.recommender.bki.ProfileID first = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->first_);

    // required .ru.mail.go.recommender.bki.ProfileID second = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->second_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional bool matched_name = 3;
    if (has_matched_name()) {
      total_size += 1 + 1;
    }

    // optional bool matched_surname = 4;
    if (has_matched_surname()) {
      total_size += 1 + 1;
    }

    // optional bool matched_birthday = 5;
    if (has_matched_birthday()) {
      total_size += 1 + 1;
    }

    // optional bool matched_birthyear = 6;
    if (has_matched_birthyear()) {
      total_size += 1 + 1;
    }

    // optional bool matched_city = 7;
    if (has_matched_city()) {
      total_size += 1 + 1;
    }

    // optional bool matched_activity = 8;
    if (has_matched_activity()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool matched_sex = 9;
    if (has_matched_sex()) {
      total_size += 1 + 1;
    }

    // optional int64 match_time = 10;
    if (has_match_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->match_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfilesLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.recommender.bki.ProfilesLink)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfilesLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfilesLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.recommender.bki.ProfilesLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.recommender.bki.ProfilesLink)
    MergeFrom(*source);
  }
}

void ProfilesLink::MergeFrom(const ProfilesLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.recommender.bki.ProfilesLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_first()->::ru::mail::go::recommender::bki::ProfileID::MergeFrom(from.first());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_second()->::ru::mail::go::recommender::bki::ProfileID::MergeFrom(from.second());
    }
    if (cached_has_bits & 0x00000004u) {
      matched_name_ = from.matched_name_;
    }
    if (cached_has_bits & 0x00000008u) {
      matched_surname_ = from.matched_surname_;
    }
    if (cached_has_bits & 0x00000010u) {
      matched_birthday_ = from.matched_birthday_;
    }
    if (cached_has_bits & 0x00000020u) {
      matched_birthyear_ = from.matched_birthyear_;
    }
    if (cached_has_bits & 0x00000040u) {
      matched_city_ = from.matched_city_;
    }
    if (cached_has_bits & 0x00000080u) {
      matched_activity_ = from.matched_activity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      matched_sex_ = from.matched_sex_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_time_ = from.match_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfilesLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.recommender.bki.ProfilesLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfilesLink::CopyFrom(const ProfilesLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.recommender.bki.ProfilesLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfilesLink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_first()) {
    if (!this->first_->IsInitialized()) return false;
  }
  if (has_second()) {
    if (!this->second_->IsInitialized()) return false;
  }
  return true;
}

void ProfilesLink::Swap(ProfilesLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfilesLink::InternalSwap(ProfilesLink* other) {
  using std::swap;
  swap(first_, other->first_);
  swap(second_, other->second_);
  swap(matched_name_, other->matched_name_);
  swap(matched_surname_, other->matched_surname_);
  swap(matched_birthday_, other->matched_birthday_);
  swap(matched_birthyear_, other->matched_birthyear_);
  swap(matched_city_, other->matched_city_);
  swap(matched_activity_, other->matched_activity_);
  swap(matched_sex_, other->matched_sex_);
  swap(match_time_, other->match_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfilesLink::GetMetadata() const {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfilesLink

// required .ru.mail.go.recommender.bki.ProfileID first = 1;
bool ProfilesLink::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProfilesLink::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
void ProfilesLink::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProfilesLink::clear_first() {
  if (first_ != NULL) first_->::ru::mail::go::recommender::bki::ProfileID::Clear();
  clear_has_first();
}
const ::ru::mail::go::recommender::bki::ProfileID& ProfilesLink::first() const {
  const ::ru::mail::go::recommender::bki::ProfileID* p = first_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.first)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::ProfileID*>(
      &::ru::mail::go::recommender::bki::_ProfileID_default_instance_);
}
::ru::mail::go::recommender::bki::ProfileID* ProfilesLink::mutable_first() {
  set_has_first();
  if (first_ == NULL) {
    first_ = new ::ru::mail::go::recommender::bki::ProfileID;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.ProfilesLink.first)
  return first_;
}
::ru::mail::go::recommender::bki::ProfileID* ProfilesLink::release_first() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.ProfilesLink.first)
  clear_has_first();
  ::ru::mail::go::recommender::bki::ProfileID* temp = first_;
  first_ = NULL;
  return temp;
}
void ProfilesLink::set_allocated_first(::ru::mail::go::recommender::bki::ProfileID* first) {
  delete first_;
  first_ = first;
  if (first) {
    set_has_first();
  } else {
    clear_has_first();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.ProfilesLink.first)
}

// required .ru.mail.go.recommender.bki.ProfileID second = 2;
bool ProfilesLink::has_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfilesLink::set_has_second() {
  _has_bits_[0] |= 0x00000002u;
}
void ProfilesLink::clear_has_second() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProfilesLink::clear_second() {
  if (second_ != NULL) second_->::ru::mail::go::recommender::bki::ProfileID::Clear();
  clear_has_second();
}
const ::ru::mail::go::recommender::bki::ProfileID& ProfilesLink::second() const {
  const ::ru::mail::go::recommender::bki::ProfileID* p = second_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.second)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::ProfileID*>(
      &::ru::mail::go::recommender::bki::_ProfileID_default_instance_);
}
::ru::mail::go::recommender::bki::ProfileID* ProfilesLink::mutable_second() {
  set_has_second();
  if (second_ == NULL) {
    second_ = new ::ru::mail::go::recommender::bki::ProfileID;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.ProfilesLink.second)
  return second_;
}
::ru::mail::go::recommender::bki::ProfileID* ProfilesLink::release_second() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.ProfilesLink.second)
  clear_has_second();
  ::ru::mail::go::recommender::bki::ProfileID* temp = second_;
  second_ = NULL;
  return temp;
}
void ProfilesLink::set_allocated_second(::ru::mail::go::recommender::bki::ProfileID* second) {
  delete second_;
  second_ = second;
  if (second) {
    set_has_second();
  } else {
    clear_has_second();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.ProfilesLink.second)
}

// optional bool matched_name = 3;
bool ProfilesLink::has_matched_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProfilesLink::set_has_matched_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ProfilesLink::clear_has_matched_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProfilesLink::clear_matched_name() {
  matched_name_ = false;
  clear_has_matched_name();
}
bool ProfilesLink::matched_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_name)
  return matched_name_;
}
void ProfilesLink::set_matched_name(bool value) {
  set_has_matched_name();
  matched_name_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_name)
}

// optional bool matched_surname = 4;
bool ProfilesLink::has_matched_surname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProfilesLink::set_has_matched_surname() {
  _has_bits_[0] |= 0x00000008u;
}
void ProfilesLink::clear_has_matched_surname() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProfilesLink::clear_matched_surname() {
  matched_surname_ = false;
  clear_has_matched_surname();
}
bool ProfilesLink::matched_surname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_surname)
  return matched_surname_;
}
void ProfilesLink::set_matched_surname(bool value) {
  set_has_matched_surname();
  matched_surname_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_surname)
}

// optional bool matched_birthday = 5;
bool ProfilesLink::has_matched_birthday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProfilesLink::set_has_matched_birthday() {
  _has_bits_[0] |= 0x00000010u;
}
void ProfilesLink::clear_has_matched_birthday() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProfilesLink::clear_matched_birthday() {
  matched_birthday_ = false;
  clear_has_matched_birthday();
}
bool ProfilesLink::matched_birthday() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_birthday)
  return matched_birthday_;
}
void ProfilesLink::set_matched_birthday(bool value) {
  set_has_matched_birthday();
  matched_birthday_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_birthday)
}

// optional bool matched_birthyear = 6;
bool ProfilesLink::has_matched_birthyear() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProfilesLink::set_has_matched_birthyear() {
  _has_bits_[0] |= 0x00000020u;
}
void ProfilesLink::clear_has_matched_birthyear() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProfilesLink::clear_matched_birthyear() {
  matched_birthyear_ = false;
  clear_has_matched_birthyear();
}
bool ProfilesLink::matched_birthyear() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_birthyear)
  return matched_birthyear_;
}
void ProfilesLink::set_matched_birthyear(bool value) {
  set_has_matched_birthyear();
  matched_birthyear_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_birthyear)
}

// optional bool matched_city = 7;
bool ProfilesLink::has_matched_city() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ProfilesLink::set_has_matched_city() {
  _has_bits_[0] |= 0x00000040u;
}
void ProfilesLink::clear_has_matched_city() {
  _has_bits_[0] &= ~0x00000040u;
}
void ProfilesLink::clear_matched_city() {
  matched_city_ = false;
  clear_has_matched_city();
}
bool ProfilesLink::matched_city() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_city)
  return matched_city_;
}
void ProfilesLink::set_matched_city(bool value) {
  set_has_matched_city();
  matched_city_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_city)
}

// optional bool matched_activity = 8;
bool ProfilesLink::has_matched_activity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ProfilesLink::set_has_matched_activity() {
  _has_bits_[0] |= 0x00000080u;
}
void ProfilesLink::clear_has_matched_activity() {
  _has_bits_[0] &= ~0x00000080u;
}
void ProfilesLink::clear_matched_activity() {
  matched_activity_ = false;
  clear_has_matched_activity();
}
bool ProfilesLink::matched_activity() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_activity)
  return matched_activity_;
}
void ProfilesLink::set_matched_activity(bool value) {
  set_has_matched_activity();
  matched_activity_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_activity)
}

// optional bool matched_sex = 9;
bool ProfilesLink::has_matched_sex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ProfilesLink::set_has_matched_sex() {
  _has_bits_[0] |= 0x00000100u;
}
void ProfilesLink::clear_has_matched_sex() {
  _has_bits_[0] &= ~0x00000100u;
}
void ProfilesLink::clear_matched_sex() {
  matched_sex_ = false;
  clear_has_matched_sex();
}
bool ProfilesLink::matched_sex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_sex)
  return matched_sex_;
}
void ProfilesLink::set_matched_sex(bool value) {
  set_has_matched_sex();
  matched_sex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_sex)
}

// optional int64 match_time = 10;
bool ProfilesLink::has_match_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ProfilesLink::set_has_match_time() {
  _has_bits_[0] |= 0x00000200u;
}
void ProfilesLink::clear_has_match_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void ProfilesLink::clear_match_time() {
  match_time_ = GOOGLE_LONGLONG(0);
  clear_has_match_time();
}
::google::protobuf::int64 ProfilesLink::match_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.match_time)
  return match_time_;
}
void ProfilesLink::set_match_time(::google::protobuf::int64 value) {
  set_has_match_time();
  match_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.match_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupInfo::kIdFieldNumber;
const int GroupInfo::kTitleFieldNumber;
const int GroupInfo::kLinkFieldNumber;
const int GroupInfo::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupInfo::GroupInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_bki_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.mail.go.recommender.bki.GroupInfo)
}
GroupInfo::GroupInfo(const GroupInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link()) {
    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&members_) -
    reinterpret_cast<char*>(&id_)) + sizeof(members_));
  // @@protoc_insertion_point(copy_constructor:ru.mail.go.recommender.bki.GroupInfo)
}

void GroupInfo::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&members_) -
      reinterpret_cast<char*>(&id_)) + sizeof(members_));
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:ru.mail.go.recommender.bki.GroupInfo)
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupInfo::descriptor() {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupInfo& GroupInfo::default_instance() {
  protobuf_bki_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroupInfo* GroupInfo::New(::google::protobuf::Arena* arena) const {
  GroupInfo* n = new GroupInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ru.mail.go.recommender.bki.GroupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!link_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*link_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&members_) -
        reinterpret_cast<char*>(&id_)) + sizeof(members_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.mail.go.recommender.bki.GroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.GroupInfo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string link = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link().data(), static_cast<int>(this->link().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.mail.go.recommender.bki.GroupInfo.link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.mail.go.recommender.bki.GroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.mail.go.recommender.bki.GroupInfo)
  return false;
#undef DO_
}

void GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.mail.go.recommender.bki.GroupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.GroupInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string link = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.GroupInfo.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->link(), output);
  }

  // optional int32 members = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->members(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.mail.go.recommender.bki.GroupInfo)
}

::google::protobuf::uint8* GroupInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ru.mail.go.recommender.bki.GroupInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.GroupInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string link = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.mail.go.recommender.bki.GroupInfo.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->link(), target);
  }

  // optional int32 members = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->members(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.mail.go.recommender.bki.GroupInfo)
  return target;
}

size_t GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ru.mail.go.recommender.bki.GroupInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string link = 3;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link());
    }

  }
  // optional int32 members = 4;
  if (has_members()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->members());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ru.mail.go.recommender.bki.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ru.mail.go.recommender.bki.GroupInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ru.mail.go.recommender.bki.GroupInfo)
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ru.mail.go.recommender.bki.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_link();
      link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      members_ = from.members_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ru.mail.go.recommender.bki.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ru.mail.go.recommender.bki.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void GroupInfo::Swap(GroupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupInfo::InternalSwap(GroupInfo* other) {
  using std::swap;
  title_.Swap(&other->title_);
  link_.Swap(&other->link_);
  swap(id_, other->id_);
  swap(members_, other->members_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupInfo::GetMetadata() const {
  protobuf_bki_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_bki_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupInfo

// required int32 id = 1;
bool GroupInfo::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GroupInfo::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void GroupInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void GroupInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 GroupInfo::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.GroupInfo.id)
  return id_;
}
void GroupInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.GroupInfo.id)
}

// optional string title = 2;
bool GroupInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GroupInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void GroupInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void GroupInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& GroupInfo::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.GroupInfo.title)
  return title_.GetNoArena();
}
void GroupInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.GroupInfo.title)
}
#if LANG_CXX11
void GroupInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.GroupInfo.title)
}
#endif
void GroupInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.GroupInfo.title)
}
void GroupInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.GroupInfo.title)
}
::std::string* GroupInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.GroupInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupInfo::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.GroupInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.GroupInfo.title)
}

// optional string link = 3;
bool GroupInfo::has_link() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GroupInfo::set_has_link() {
  _has_bits_[0] |= 0x00000002u;
}
void GroupInfo::clear_has_link() {
  _has_bits_[0] &= ~0x00000002u;
}
void GroupInfo::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
const ::std::string& GroupInfo::link() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.GroupInfo.link)
  return link_.GetNoArena();
}
void GroupInfo::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.GroupInfo.link)
}
#if LANG_CXX11
void GroupInfo::set_link(::std::string&& value) {
  set_has_link();
  link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.GroupInfo.link)
}
#endif
void GroupInfo::set_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.GroupInfo.link)
}
void GroupInfo::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.GroupInfo.link)
}
::std::string* GroupInfo::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.GroupInfo.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupInfo::release_link() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.GroupInfo.link)
  clear_has_link();
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupInfo::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.GroupInfo.link)
}

// optional int32 members = 4;
bool GroupInfo::has_members() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GroupInfo::set_has_members() {
  _has_bits_[0] |= 0x00000008u;
}
void GroupInfo::clear_has_members() {
  _has_bits_[0] &= ~0x00000008u;
}
void GroupInfo::clear_members() {
  members_ = 0;
  clear_has_members();
}
::google::protobuf::int32 GroupInfo::members() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.GroupInfo.members)
  return members_;
}
void GroupInfo::set_members(::google::protobuf::int32 value) {
  set_has_members();
  members_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.GroupInfo.members)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bki
}  // namespace recommender
}  // namespace go
}  // namespace mail
}  // namespace ru

// @@protoc_insertion_point(global_scope)
