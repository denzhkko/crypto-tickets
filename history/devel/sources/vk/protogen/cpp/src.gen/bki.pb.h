// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bki.proto

#ifndef PROTOBUF_bki_2eproto__INCLUDED
#define PROTOBUF_bki_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ru {
namespace mail {
namespace go {
namespace recommender {
namespace bki {
class GroupInfo;
class GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class Profile;
class ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class ProfileID;
class ProfileIDDefaultTypeInternal;
extern ProfileIDDefaultTypeInternal _ProfileID_default_instance_;
class Profile_Career;
class Profile_CareerDefaultTypeInternal;
extern Profile_CareerDefaultTypeInternal _Profile_Career_default_instance_;
class Profile_Friend;
class Profile_FriendDefaultTypeInternal;
extern Profile_FriendDefaultTypeInternal _Profile_Friend_default_instance_;
class Profile_Geo;
class Profile_GeoDefaultTypeInternal;
extern Profile_GeoDefaultTypeInternal _Profile_Geo_default_instance_;
class Profile_GeoLocation;
class Profile_GeoLocationDefaultTypeInternal;
extern Profile_GeoLocationDefaultTypeInternal _Profile_GeoLocation_default_instance_;
class Profile_School;
class Profile_SchoolDefaultTypeInternal;
extern Profile_SchoolDefaultTypeInternal _Profile_School_default_instance_;
class Profile_University;
class Profile_UniversityDefaultTypeInternal;
extern Profile_UniversityDefaultTypeInternal _Profile_University_default_instance_;
class ProfilesLink;
class ProfilesLinkDefaultTypeInternal;
extern ProfilesLinkDefaultTypeInternal _ProfilesLink_default_instance_;
}  // namespace bki
}  // namespace recommender
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace ru {
namespace mail {
namespace go {
namespace recommender {
namespace bki {

namespace protobuf_bki_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_bki_2eproto

enum ProfileID_Provider {
  ProfileID_Provider_VK = 1,
  ProfileID_Provider_OK = 2,
  ProfileID_Provider_MM = 3
};
bool ProfileID_Provider_IsValid(int value);
const ProfileID_Provider ProfileID_Provider_Provider_MIN = ProfileID_Provider_VK;
const ProfileID_Provider ProfileID_Provider_Provider_MAX = ProfileID_Provider_MM;
const int ProfileID_Provider_Provider_ARRAYSIZE = ProfileID_Provider_Provider_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProfileID_Provider_descriptor();
inline const ::std::string& ProfileID_Provider_Name(ProfileID_Provider value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProfileID_Provider_descriptor(), value);
}
inline bool ProfileID_Provider_Parse(
    const ::std::string& name, ProfileID_Provider* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProfileID_Provider>(
    ProfileID_Provider_descriptor(), name, value);
}
enum Profile_Sex {
  Profile_Sex_UNKNOWN = 0,
  Profile_Sex_FEMALE = 1,
  Profile_Sex_MALE = 2
};
bool Profile_Sex_IsValid(int value);
const Profile_Sex Profile_Sex_Sex_MIN = Profile_Sex_UNKNOWN;
const Profile_Sex Profile_Sex_Sex_MAX = Profile_Sex_MALE;
const int Profile_Sex_Sex_ARRAYSIZE = Profile_Sex_Sex_MAX + 1;

const ::google::protobuf::EnumDescriptor* Profile_Sex_descriptor();
inline const ::std::string& Profile_Sex_Name(Profile_Sex value) {
  return ::google::protobuf::internal::NameOfEnum(
    Profile_Sex_descriptor(), value);
}
inline bool Profile_Sex_Parse(
    const ::std::string& name, Profile_Sex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Profile_Sex>(
    Profile_Sex_descriptor(), name, value);
}
enum Profile_Platform {
  Profile_Platform_MOBILE_SITE = 0,
  Profile_Platform_IPHONE = 1,
  Profile_Platform_IPAD = 2,
  Profile_Platform_ANDROID = 3,
  Profile_Platform_WINDOWS_PHONE = 4,
  Profile_Platform_WINDOWS_10 = 5,
  Profile_Platform_FULL_SITE = 6
};
bool Profile_Platform_IsValid(int value);
const Profile_Platform Profile_Platform_Platform_MIN = Profile_Platform_MOBILE_SITE;
const Profile_Platform Profile_Platform_Platform_MAX = Profile_Platform_FULL_SITE;
const int Profile_Platform_Platform_ARRAYSIZE = Profile_Platform_Platform_MAX + 1;

const ::google::protobuf::EnumDescriptor* Profile_Platform_descriptor();
inline const ::std::string& Profile_Platform_Name(Profile_Platform value) {
  return ::google::protobuf::internal::NameOfEnum(
    Profile_Platform_descriptor(), value);
}
inline bool Profile_Platform_Parse(
    const ::std::string& name, Profile_Platform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Profile_Platform>(
    Profile_Platform_descriptor(), name, value);
}
enum Profile_MaritalStatus {
  Profile_MaritalStatus_NOT_MARRIED = 0,
  Profile_MaritalStatus_HAS_PARTNER = 1,
  Profile_MaritalStatus_ENGAGED = 2,
  Profile_MaritalStatus_MARRIED = 3,
  Profile_MaritalStatus_COMPLICATED = 4,
  Profile_MaritalStatus_IN_ACTIVE_SEARCH = 5,
  Profile_MaritalStatus_IN_LOVE = 6
};
bool Profile_MaritalStatus_IsValid(int value);
const Profile_MaritalStatus Profile_MaritalStatus_MaritalStatus_MIN = Profile_MaritalStatus_NOT_MARRIED;
const Profile_MaritalStatus Profile_MaritalStatus_MaritalStatus_MAX = Profile_MaritalStatus_IN_LOVE;
const int Profile_MaritalStatus_MaritalStatus_ARRAYSIZE = Profile_MaritalStatus_MaritalStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Profile_MaritalStatus_descriptor();
inline const ::std::string& Profile_MaritalStatus_Name(Profile_MaritalStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Profile_MaritalStatus_descriptor(), value);
}
inline bool Profile_MaritalStatus_Parse(
    const ::std::string& name, Profile_MaritalStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Profile_MaritalStatus>(
    Profile_MaritalStatus_descriptor(), name, value);
}
// ===================================================================

class ProfileID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.recommender.bki.ProfileID) */ {
 public:
  ProfileID();
  virtual ~ProfileID();

  ProfileID(const ProfileID& from);

  inline ProfileID& operator=(const ProfileID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfileID(ProfileID&& from) noexcept
    : ProfileID() {
    *this = ::std::move(from);
  }

  inline ProfileID& operator=(ProfileID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfileID& default_instance();

  static inline const ProfileID* internal_default_instance() {
    return reinterpret_cast<const ProfileID*>(
               &_ProfileID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ProfileID* other);
  friend void swap(ProfileID& a, ProfileID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfileID* New() const PROTOBUF_FINAL { return New(NULL); }

  ProfileID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProfileID& from);
  void MergeFrom(const ProfileID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProfileID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ProfileID_Provider Provider;
  static const Provider VK =
    ProfileID_Provider_VK;
  static const Provider OK =
    ProfileID_Provider_OK;
  static const Provider MM =
    ProfileID_Provider_MM;
  static inline bool Provider_IsValid(int value) {
    return ProfileID_Provider_IsValid(value);
  }
  static const Provider Provider_MIN =
    ProfileID_Provider_Provider_MIN;
  static const Provider Provider_MAX =
    ProfileID_Provider_Provider_MAX;
  static const int Provider_ARRAYSIZE =
    ProfileID_Provider_Provider_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Provider_descriptor() {
    return ProfileID_Provider_descriptor();
  }
  static inline const ::std::string& Provider_Name(Provider value) {
    return ProfileID_Provider_Name(value);
  }
  static inline bool Provider_Parse(const ::std::string& name,
      Provider* value) {
    return ProfileID_Provider_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required .ru.mail.go.recommender.bki.ProfileID.Provider provider = 1;
  bool has_provider() const;
  void clear_provider();
  static const int kProviderFieldNumber = 1;
  ::ru::mail::go::recommender::bki::ProfileID_Provider provider() const;
  void set_provider(::ru::mail::go::recommender::bki::ProfileID_Provider value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.recommender.bki.ProfileID)
 private:
  void set_has_provider();
  void clear_has_provider();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  int provider_;
  friend struct protobuf_bki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile_Geo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.recommender.bki.Profile.Geo) */ {
 public:
  Profile_Geo();
  virtual ~Profile_Geo();

  Profile_Geo(const Profile_Geo& from);

  inline Profile_Geo& operator=(const Profile_Geo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile_Geo(Profile_Geo&& from) noexcept
    : Profile_Geo() {
    *this = ::std::move(from);
  }

  inline Profile_Geo& operator=(Profile_Geo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile_Geo& default_instance();

  static inline const Profile_Geo* internal_default_instance() {
    return reinterpret_cast<const Profile_Geo*>(
               &_Profile_Geo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Profile_Geo* other);
  friend void swap(Profile_Geo& a, Profile_Geo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile_Geo* New() const PROTOBUF_FINAL { return New(NULL); }

  Profile_Geo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Profile_Geo& from);
  void MergeFrom(const Profile_Geo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Profile_Geo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional int32 region_id = 1;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.recommender.bki.Profile.Geo)
 private:
  void set_has_region_id();
  void clear_has_region_id();
  void set_has_title();
  void clear_has_title();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int32 region_id_;
  friend struct protobuf_bki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile_GeoLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.recommender.bki.Profile.GeoLocation) */ {
 public:
  Profile_GeoLocation();
  virtual ~Profile_GeoLocation();

  Profile_GeoLocation(const Profile_GeoLocation& from);

  inline Profile_GeoLocation& operator=(const Profile_GeoLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile_GeoLocation(Profile_GeoLocation&& from) noexcept
    : Profile_GeoLocation() {
    *this = ::std::move(from);
  }

  inline Profile_GeoLocation& operator=(Profile_GeoLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile_GeoLocation& default_instance();

  static inline const Profile_GeoLocation* internal_default_instance() {
    return reinterpret_cast<const Profile_GeoLocation*>(
               &_Profile_GeoLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Profile_GeoLocation* other);
  friend void swap(Profile_GeoLocation& a, Profile_GeoLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile_GeoLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  Profile_GeoLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Profile_GeoLocation& from);
  void MergeFrom(const Profile_GeoLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Profile_GeoLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ru.mail.go.recommender.bki.Profile.Geo country = 1;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 1;
  const ::ru::mail::go::recommender::bki::Profile_Geo& country() const;
  ::ru::mail::go::recommender::bki::Profile_Geo* mutable_country();
  ::ru::mail::go::recommender::bki::Profile_Geo* release_country();
  void set_allocated_country(::ru::mail::go::recommender::bki::Profile_Geo* country);

  // optional .ru.mail.go.recommender.bki.Profile.Geo region = 2;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  const ::ru::mail::go::recommender::bki::Profile_Geo& region() const;
  ::ru::mail::go::recommender::bki::Profile_Geo* mutable_region();
  ::ru::mail::go::recommender::bki::Profile_Geo* release_region();
  void set_allocated_region(::ru::mail::go::recommender::bki::Profile_Geo* region);

  // optional .ru.mail.go.recommender.bki.Profile.Geo city = 3;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 3;
  const ::ru::mail::go::recommender::bki::Profile_Geo& city() const;
  ::ru::mail::go::recommender::bki::Profile_Geo* mutable_city();
  ::ru::mail::go::recommender::bki::Profile_Geo* release_city();
  void set_allocated_city(::ru::mail::go::recommender::bki::Profile_Geo* city);

  // @@protoc_insertion_point(class_scope:ru.mail.go.recommender.bki.Profile.GeoLocation)
 private:
  void set_has_country();
  void clear_has_country();
  void set_has_region();
  void clear_has_region();
  void set_has_city();
  void clear_has_city();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::recommender::bki::Profile_Geo* country_;
  ::ru::mail::go::recommender::bki::Profile_Geo* region_;
  ::ru::mail::go::recommender::bki::Profile_Geo* city_;
  friend struct protobuf_bki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile_School : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.recommender.bki.Profile.School) */ {
 public:
  Profile_School();
  virtual ~Profile_School();

  Profile_School(const Profile_School& from);

  inline Profile_School& operator=(const Profile_School& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile_School(Profile_School&& from) noexcept
    : Profile_School() {
    *this = ::std::move(from);
  }

  inline Profile_School& operator=(Profile_School&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile_School& default_instance();

  static inline const Profile_School* internal_default_instance() {
    return reinterpret_cast<const Profile_School*>(
               &_Profile_School_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Profile_School* other);
  friend void swap(Profile_School& a, Profile_School& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile_School* New() const PROTOBUF_FINAL { return New(NULL); }

  Profile_School* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Profile_School& from);
  void MergeFrom(const Profile_School& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Profile_School* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation& location() const;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* mutable_location();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* release_location();
  void set_allocated_location(::ru::mail::go::recommender::bki::Profile_GeoLocation* location);

  // optional int32 year_from = 3;
  bool has_year_from() const;
  void clear_year_from();
  static const int kYearFromFieldNumber = 3;
  ::google::protobuf::int32 year_from() const;
  void set_year_from(::google::protobuf::int32 value);

  // optional int32 year_to = 4;
  bool has_year_to() const;
  void clear_year_to();
  static const int kYearToFieldNumber = 4;
  ::google::protobuf::int32 year_to() const;
  void set_year_to(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.recommender.bki.Profile.School)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_location();
  void clear_has_location();
  void set_has_year_from();
  void clear_has_year_from();
  void set_has_year_to();
  void clear_has_year_to();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* location_;
  ::google::protobuf::int32 year_from_;
  ::google::protobuf::int32 year_to_;
  friend struct protobuf_bki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile_University : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.recommender.bki.Profile.University) */ {
 public:
  Profile_University();
  virtual ~Profile_University();

  Profile_University(const Profile_University& from);

  inline Profile_University& operator=(const Profile_University& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile_University(Profile_University&& from) noexcept
    : Profile_University() {
    *this = ::std::move(from);
  }

  inline Profile_University& operator=(Profile_University&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile_University& default_instance();

  static inline const Profile_University* internal_default_instance() {
    return reinterpret_cast<const Profile_University*>(
               &_Profile_University_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Profile_University* other);
  friend void swap(Profile_University& a, Profile_University& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile_University* New() const PROTOBUF_FINAL { return New(NULL); }

  Profile_University* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Profile_University& from);
  void MergeFrom(const Profile_University& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Profile_University* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation& location() const;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* mutable_location();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* release_location();
  void set_allocated_location(::ru::mail::go::recommender::bki::Profile_GeoLocation* location);

  // optional int32 year_from = 3;
  bool has_year_from() const;
  void clear_year_from();
  static const int kYearFromFieldNumber = 3;
  ::google::protobuf::int32 year_from() const;
  void set_year_from(::google::protobuf::int32 value);

  // optional int32 year_to = 4;
  bool has_year_to() const;
  void clear_year_to();
  static const int kYearToFieldNumber = 4;
  ::google::protobuf::int32 year_to() const;
  void set_year_to(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.recommender.bki.Profile.University)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_location();
  void clear_has_location();
  void set_has_year_from();
  void clear_has_year_from();
  void set_has_year_to();
  void clear_has_year_to();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* location_;
  ::google::protobuf::int32 year_from_;
  ::google::protobuf::int32 year_to_;
  friend struct protobuf_bki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile_Career : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.recommender.bki.Profile.Career) */ {
 public:
  Profile_Career();
  virtual ~Profile_Career();

  Profile_Career(const Profile_Career& from);

  inline Profile_Career& operator=(const Profile_Career& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile_Career(Profile_Career&& from) noexcept
    : Profile_Career() {
    *this = ::std::move(from);
  }

  inline Profile_Career& operator=(Profile_Career&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile_Career& default_instance();

  static inline const Profile_Career* internal_default_instance() {
    return reinterpret_cast<const Profile_Career*>(
               &_Profile_Career_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Profile_Career* other);
  friend void swap(Profile_Career& a, Profile_Career& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile_Career* New() const PROTOBUF_FINAL { return New(NULL); }

  Profile_Career* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Profile_Career& from);
  void MergeFrom(const Profile_Career& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Profile_Career* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string company = 1;
  bool has_company() const;
  void clear_company();
  static const int kCompanyFieldNumber = 1;
  const ::std::string& company() const;
  void set_company(const ::std::string& value);
  #if LANG_CXX11
  void set_company(::std::string&& value);
  #endif
  void set_company(const char* value);
  void set_company(const char* value, size_t size);
  ::std::string* mutable_company();
  ::std::string* release_company();
  void set_allocated_company(::std::string* company);

  // optional string position = 5;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 5;
  const ::std::string& position() const;
  void set_position(const ::std::string& value);
  #if LANG_CXX11
  void set_position(::std::string&& value);
  #endif
  void set_position(const char* value);
  void set_position(const char* value, size_t size);
  ::std::string* mutable_position();
  ::std::string* release_position();
  void set_allocated_position(::std::string* position);

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation& location() const;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* mutable_location();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* release_location();
  void set_allocated_location(::ru::mail::go::recommender::bki::Profile_GeoLocation* location);

  // optional int32 year_from = 3;
  bool has_year_from() const;
  void clear_year_from();
  static const int kYearFromFieldNumber = 3;
  ::google::protobuf::int32 year_from() const;
  void set_year_from(::google::protobuf::int32 value);

  // optional int32 year_to = 4;
  bool has_year_to() const;
  void clear_year_to();
  static const int kYearToFieldNumber = 4;
  ::google::protobuf::int32 year_to() const;
  void set_year_to(::google::protobuf::int32 value);

  // optional int32 company_group_id = 6;
  bool has_company_group_id() const;
  void clear_company_group_id();
  static const int kCompanyGroupIdFieldNumber = 6;
  ::google::protobuf::int32 company_group_id() const;
  void set_company_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.recommender.bki.Profile.Career)
 private:
  void set_has_company();
  void clear_has_company();
  void set_has_location();
  void clear_has_location();
  void set_has_year_from();
  void clear_has_year_from();
  void set_has_year_to();
  void clear_has_year_to();
  void set_has_position();
  void clear_has_position();
  void set_has_company_group_id();
  void clear_has_company_group_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr company_;
  ::google::protobuf::internal::ArenaStringPtr position_;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* location_;
  ::google::protobuf::int32 year_from_;
  ::google::protobuf::int32 year_to_;
  ::google::protobuf::int32 company_group_id_;
  friend struct protobuf_bki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile_Friend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.recommender.bki.Profile.Friend) */ {
 public:
  Profile_Friend();
  virtual ~Profile_Friend();

  Profile_Friend(const Profile_Friend& from);

  inline Profile_Friend& operator=(const Profile_Friend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile_Friend(Profile_Friend&& from) noexcept
    : Profile_Friend() {
    *this = ::std::move(from);
  }

  inline Profile_Friend& operator=(Profile_Friend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile_Friend& default_instance();

  static inline const Profile_Friend* internal_default_instance() {
    return reinterpret_cast<const Profile_Friend*>(
               &_Profile_Friend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Profile_Friend* other);
  friend void swap(Profile_Friend& a, Profile_Friend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile_Friend* New() const PROTOBUF_FINAL { return New(NULL); }

  Profile_Friend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Profile_Friend& from);
  void MergeFrom(const Profile_Friend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Profile_Friend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional bool namesakes = 2;
  bool has_namesakes() const;
  void clear_namesakes();
  static const int kNamesakesFieldNumber = 2;
  bool namesakes() const;
  void set_namesakes(bool value);

  // optional bool collegues = 3;
  bool has_collegues() const;
  void clear_collegues();
  static const int kColleguesFieldNumber = 3;
  bool collegues() const;
  void set_collegues(bool value);

  // optional bool relatives = 4;
  bool has_relatives() const;
  void clear_relatives();
  static const int kRelativesFieldNumber = 4;
  bool relatives() const;
  void set_relatives(bool value);

  // optional bool classmates = 5;
  bool has_classmates() const;
  void clear_classmates();
  static const int kClassmatesFieldNumber = 5;
  bool classmates() const;
  void set_classmates(bool value);

  // optional bool militarymates = 6;
  bool has_militarymates() const;
  void clear_militarymates();
  static const int kMilitarymatesFieldNumber = 6;
  bool militarymates() const;
  void set_militarymates(bool value);

  // optional bool roommates = 7;
  bool has_roommates() const;
  void clear_roommates();
  static const int kRoommatesFieldNumber = 7;
  bool roommates() const;
  void set_roommates(bool value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.recommender.bki.Profile.Friend)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_namesakes();
  void clear_has_namesakes();
  void set_has_collegues();
  void clear_has_collegues();
  void set_has_relatives();
  void clear_has_relatives();
  void set_has_classmates();
  void clear_has_classmates();
  void set_has_militarymates();
  void clear_has_militarymates();
  void set_has_roommates();
  void clear_has_roommates();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  bool namesakes_;
  bool collegues_;
  bool relatives_;
  bool classmates_;
  bool militarymates_;
  bool roommates_;
  friend struct protobuf_bki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.recommender.bki.Profile) */ {
 public:
  Profile();
  virtual ~Profile();

  Profile(const Profile& from);

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(Profile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile& default_instance();

  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Profile* other);
  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile* New() const PROTOBUF_FINAL { return New(NULL); }

  Profile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Profile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Profile_Geo Geo;
  typedef Profile_GeoLocation GeoLocation;
  typedef Profile_School School;
  typedef Profile_University University;
  typedef Profile_Career Career;
  typedef Profile_Friend Friend;

  typedef Profile_Sex Sex;
  static const Sex UNKNOWN =
    Profile_Sex_UNKNOWN;
  static const Sex FEMALE =
    Profile_Sex_FEMALE;
  static const Sex MALE =
    Profile_Sex_MALE;
  static inline bool Sex_IsValid(int value) {
    return Profile_Sex_IsValid(value);
  }
  static const Sex Sex_MIN =
    Profile_Sex_Sex_MIN;
  static const Sex Sex_MAX =
    Profile_Sex_Sex_MAX;
  static const int Sex_ARRAYSIZE =
    Profile_Sex_Sex_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sex_descriptor() {
    return Profile_Sex_descriptor();
  }
  static inline const ::std::string& Sex_Name(Sex value) {
    return Profile_Sex_Name(value);
  }
  static inline bool Sex_Parse(const ::std::string& name,
      Sex* value) {
    return Profile_Sex_Parse(name, value);
  }

  typedef Profile_Platform Platform;
  static const Platform MOBILE_SITE =
    Profile_Platform_MOBILE_SITE;
  static const Platform IPHONE =
    Profile_Platform_IPHONE;
  static const Platform IPAD =
    Profile_Platform_IPAD;
  static const Platform ANDROID =
    Profile_Platform_ANDROID;
  static const Platform WINDOWS_PHONE =
    Profile_Platform_WINDOWS_PHONE;
  static const Platform WINDOWS_10 =
    Profile_Platform_WINDOWS_10;
  static const Platform FULL_SITE =
    Profile_Platform_FULL_SITE;
  static inline bool Platform_IsValid(int value) {
    return Profile_Platform_IsValid(value);
  }
  static const Platform Platform_MIN =
    Profile_Platform_Platform_MIN;
  static const Platform Platform_MAX =
    Profile_Platform_Platform_MAX;
  static const int Platform_ARRAYSIZE =
    Profile_Platform_Platform_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Platform_descriptor() {
    return Profile_Platform_descriptor();
  }
  static inline const ::std::string& Platform_Name(Platform value) {
    return Profile_Platform_Name(value);
  }
  static inline bool Platform_Parse(const ::std::string& name,
      Platform* value) {
    return Profile_Platform_Parse(name, value);
  }

  typedef Profile_MaritalStatus MaritalStatus;
  static const MaritalStatus NOT_MARRIED =
    Profile_MaritalStatus_NOT_MARRIED;
  static const MaritalStatus HAS_PARTNER =
    Profile_MaritalStatus_HAS_PARTNER;
  static const MaritalStatus ENGAGED =
    Profile_MaritalStatus_ENGAGED;
  static const MaritalStatus MARRIED =
    Profile_MaritalStatus_MARRIED;
  static const MaritalStatus COMPLICATED =
    Profile_MaritalStatus_COMPLICATED;
  static const MaritalStatus IN_ACTIVE_SEARCH =
    Profile_MaritalStatus_IN_ACTIVE_SEARCH;
  static const MaritalStatus IN_LOVE =
    Profile_MaritalStatus_IN_LOVE;
  static inline bool MaritalStatus_IsValid(int value) {
    return Profile_MaritalStatus_IsValid(value);
  }
  static const MaritalStatus MaritalStatus_MIN =
    Profile_MaritalStatus_MaritalStatus_MIN;
  static const MaritalStatus MaritalStatus_MAX =
    Profile_MaritalStatus_MaritalStatus_MAX;
  static const int MaritalStatus_ARRAYSIZE =
    Profile_MaritalStatus_MaritalStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MaritalStatus_descriptor() {
    return Profile_MaritalStatus_descriptor();
  }
  static inline const ::std::string& MaritalStatus_Name(MaritalStatus value) {
    return Profile_MaritalStatus_Name(value);
  }
  static inline bool MaritalStatus_Parse(const ::std::string& name,
      MaritalStatus* value) {
    return Profile_MaritalStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ru.mail.go.recommender.bki.Profile.School schools = 20;
  int schools_size() const;
  void clear_schools();
  static const int kSchoolsFieldNumber = 20;
  const ::ru::mail::go::recommender::bki::Profile_School& schools(int index) const;
  ::ru::mail::go::recommender::bki::Profile_School* mutable_schools(int index);
  ::ru::mail::go::recommender::bki::Profile_School* add_schools();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_School >*
      mutable_schools();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_School >&
      schools() const;

  // repeated .ru.mail.go.recommender.bki.Profile.University universities = 21;
  int universities_size() const;
  void clear_universities();
  static const int kUniversitiesFieldNumber = 21;
  const ::ru::mail::go::recommender::bki::Profile_University& universities(int index) const;
  ::ru::mail::go::recommender::bki::Profile_University* mutable_universities(int index);
  ::ru::mail::go::recommender::bki::Profile_University* add_universities();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_University >*
      mutable_universities();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_University >&
      universities() const;

  // repeated .ru.mail.go.recommender.bki.Profile.Career career = 22;
  int career_size() const;
  void clear_career();
  static const int kCareerFieldNumber = 22;
  const ::ru::mail::go::recommender::bki::Profile_Career& career(int index) const;
  ::ru::mail::go::recommender::bki::Profile_Career* mutable_career(int index);
  ::ru::mail::go::recommender::bki::Profile_Career* add_career();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Career >*
      mutable_career();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Career >&
      career() const;

  // repeated string interests = 23;
  int interests_size() const;
  void clear_interests();
  static const int kInterestsFieldNumber = 23;
  const ::std::string& interests(int index) const;
  ::std::string* mutable_interests(int index);
  void set_interests(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_interests(int index, ::std::string&& value);
  #endif
  void set_interests(int index, const char* value);
  void set_interests(int index, const char* value, size_t size);
  ::std::string* add_interests();
  void add_interests(const ::std::string& value);
  #if LANG_CXX11
  void add_interests(::std::string&& value);
  #endif
  void add_interests(const char* value);
  void add_interests(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& interests() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_interests();

  // repeated .ru.mail.go.recommender.bki.Profile.Friend friends = 24;
  int friends_size() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 24;
  const ::ru::mail::go::recommender::bki::Profile_Friend& friends(int index) const;
  ::ru::mail::go::recommender::bki::Profile_Friend* mutable_friends(int index);
  ::ru::mail::go::recommender::bki::Profile_Friend* add_friends();
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Friend >*
      mutable_friends();
  const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Friend >&
      friends() const;

  // repeated .ru.mail.go.recommender.bki.Profile.Platform platforms_type = 26;
  int platforms_type_size() const;
  void clear_platforms_type();
  static const int kPlatformsTypeFieldNumber = 26;
  ::ru::mail::go::recommender::bki::Profile_Platform platforms_type(int index) const;
  void set_platforms_type(int index, ::ru::mail::go::recommender::bki::Profile_Platform value);
  void add_platforms_type(::ru::mail::go::recommender::bki::Profile_Platform value);
  const ::google::protobuf::RepeatedField<int>& platforms_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_platforms_type();

  // repeated int32 groups = 27;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 27;
  ::google::protobuf::int32 groups(int index) const;
  void set_groups(int index, ::google::protobuf::int32 value);
  void add_groups(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      groups() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_groups();

  // optional string link = 3;
  bool has_link() const;
  void clear_link();
  static const int kLinkFieldNumber = 3;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  #if LANG_CXX11
  void set_link(::std::string&& value);
  #endif
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // optional string first_name = 4;
  bool has_first_name() const;
  void clear_first_name();
  static const int kFirstNameFieldNumber = 4;
  const ::std::string& first_name() const;
  void set_first_name(const ::std::string& value);
  #if LANG_CXX11
  void set_first_name(::std::string&& value);
  #endif
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  ::std::string* mutable_first_name();
  ::std::string* release_first_name();
  void set_allocated_first_name(::std::string* first_name);

  // optional string last_name = 5;
  bool has_last_name() const;
  void clear_last_name();
  static const int kLastNameFieldNumber = 5;
  const ::std::string& last_name() const;
  void set_last_name(const ::std::string& value);
  #if LANG_CXX11
  void set_last_name(::std::string&& value);
  #endif
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  ::std::string* mutable_last_name();
  ::std::string* release_last_name();
  void set_allocated_last_name(::std::string* last_name);

  // optional string middle_name = 6;
  bool has_middle_name() const;
  void clear_middle_name();
  static const int kMiddleNameFieldNumber = 6;
  const ::std::string& middle_name() const;
  void set_middle_name(const ::std::string& value);
  #if LANG_CXX11
  void set_middle_name(::std::string&& value);
  #endif
  void set_middle_name(const char* value);
  void set_middle_name(const char* value, size_t size);
  ::std::string* mutable_middle_name();
  ::std::string* release_middle_name();
  void set_allocated_middle_name(::std::string* middle_name);

  // optional string photo = 10;
  bool has_photo() const;
  void clear_photo();
  static const int kPhotoFieldNumber = 10;
  const ::std::string& photo() const;
  void set_photo(const ::std::string& value);
  #if LANG_CXX11
  void set_photo(::std::string&& value);
  #endif
  void set_photo(const char* value);
  void set_photo(const char* value, size_t size);
  ::std::string* mutable_photo();
  ::std::string* release_photo();
  void set_allocated_photo(::std::string* photo);

  // optional string phone = 15;
  bool has_phone() const;
  void clear_phone();
  static const int kPhoneFieldNumber = 15;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // optional string email = 16;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 16;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string skype = 17;
  bool has_skype() const;
  void clear_skype();
  static const int kSkypeFieldNumber = 17;
  const ::std::string& skype() const;
  void set_skype(const ::std::string& value);
  #if LANG_CXX11
  void set_skype(::std::string&& value);
  #endif
  void set_skype(const char* value);
  void set_skype(const char* value, size_t size);
  ::std::string* mutable_skype();
  ::std::string* release_skype();
  void set_allocated_skype(::std::string* skype);

  // required .ru.mail.go.recommender.bki.ProfileID id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::ru::mail::go::recommender::bki::ProfileID& id() const;
  ::ru::mail::go::recommender::bki::ProfileID* mutable_id();
  ::ru::mail::go::recommender::bki::ProfileID* release_id();
  void set_allocated_id(::ru::mail::go::recommender::bki::ProfileID* id);

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation birth_place = 12;
  bool has_birth_place() const;
  void clear_birth_place();
  static const int kBirthPlaceFieldNumber = 12;
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation& birth_place() const;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* mutable_birth_place();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* release_birth_place();
  void set_allocated_birth_place(::ru::mail::go::recommender::bki::Profile_GeoLocation* birth_place);

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation current_place = 13;
  bool has_current_place() const;
  void clear_current_place();
  static const int kCurrentPlaceFieldNumber = 13;
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation& current_place() const;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* mutable_current_place();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* release_current_place();
  void set_allocated_current_place(::ru::mail::go::recommender::bki::Profile_GeoLocation* current_place);

  // optional .ru.mail.go.recommender.bki.Profile.GeoLocation friends_majority_place = 28;
  bool has_friends_majority_place() const;
  void clear_friends_majority_place();
  static const int kFriendsMajorityPlaceFieldNumber = 28;
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation& friends_majority_place() const;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* mutable_friends_majority_place();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* release_friends_majority_place();
  void set_allocated_friends_majority_place(::ru::mail::go::recommender::bki::Profile_GeoLocation* friends_majority_place);

  // optional int32 birth_day = 7;
  bool has_birth_day() const;
  void clear_birth_day();
  static const int kBirthDayFieldNumber = 7;
  ::google::protobuf::int32 birth_day() const;
  void set_birth_day(::google::protobuf::int32 value);

  // optional int32 birth_month = 8;
  bool has_birth_month() const;
  void clear_birth_month();
  static const int kBirthMonthFieldNumber = 8;
  ::google::protobuf::int32 birth_month() const;
  void set_birth_month(::google::protobuf::int32 value);

  // optional int32 birth_year = 9;
  bool has_birth_year() const;
  void clear_birth_year();
  static const int kBirthYearFieldNumber = 9;
  ::google::protobuf::int32 birth_year() const;
  void set_birth_year(::google::protobuf::int32 value);

  // optional .ru.mail.go.recommender.bki.Profile.Sex sex = 11;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 11;
  ::ru::mail::go::recommender::bki::Profile_Sex sex() const;
  void set_sex(::ru::mail::go::recommender::bki::Profile_Sex value);

  // optional int64 last_seen_timestamp = 19;
  bool has_last_seen_timestamp() const;
  void clear_last_seen_timestamp();
  static const int kLastSeenTimestampFieldNumber = 19;
  ::google::protobuf::int64 last_seen_timestamp() const;
  void set_last_seen_timestamp(::google::protobuf::int64 value);

  // optional .ru.mail.go.recommender.bki.Profile.MaritalStatus marital_status_type = 25;
  bool has_marital_status_type() const;
  void clear_marital_status_type();
  static const int kMaritalStatusTypeFieldNumber = 25;
  ::ru::mail::go::recommender::bki::Profile_MaritalStatus marital_status_type() const;
  void set_marital_status_type(::ru::mail::go::recommender::bki::Profile_MaritalStatus value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.recommender.bki.Profile)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_link();
  void clear_has_link();
  void set_has_first_name();
  void clear_has_first_name();
  void set_has_last_name();
  void clear_has_last_name();
  void set_has_middle_name();
  void clear_has_middle_name();
  void set_has_birth_day();
  void clear_has_birth_day();
  void set_has_birth_month();
  void clear_has_birth_month();
  void set_has_birth_year();
  void clear_has_birth_year();
  void set_has_photo();
  void clear_has_photo();
  void set_has_sex();
  void clear_has_sex();
  void set_has_birth_place();
  void clear_has_birth_place();
  void set_has_current_place();
  void clear_has_current_place();
  void set_has_phone();
  void clear_has_phone();
  void set_has_email();
  void clear_has_email();
  void set_has_skype();
  void clear_has_skype();
  void set_has_last_seen_timestamp();
  void clear_has_last_seen_timestamp();
  void set_has_marital_status_type();
  void clear_has_marital_status_type();
  void set_has_friends_majority_place();
  void clear_has_friends_majority_place();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_School > schools_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_University > universities_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Career > career_;
  ::google::protobuf::RepeatedPtrField< ::std::string> interests_;
  ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Friend > friends_;
  ::google::protobuf::RepeatedField<int> platforms_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > groups_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  ::google::protobuf::internal::ArenaStringPtr first_name_;
  ::google::protobuf::internal::ArenaStringPtr last_name_;
  ::google::protobuf::internal::ArenaStringPtr middle_name_;
  ::google::protobuf::internal::ArenaStringPtr photo_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr skype_;
  ::ru::mail::go::recommender::bki::ProfileID* id_;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* birth_place_;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* current_place_;
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* friends_majority_place_;
  ::google::protobuf::int32 birth_day_;
  ::google::protobuf::int32 birth_month_;
  ::google::protobuf::int32 birth_year_;
  int sex_;
  ::google::protobuf::int64 last_seen_timestamp_;
  int marital_status_type_;
  friend struct protobuf_bki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProfilesLink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.recommender.bki.ProfilesLink) */ {
 public:
  ProfilesLink();
  virtual ~ProfilesLink();

  ProfilesLink(const ProfilesLink& from);

  inline ProfilesLink& operator=(const ProfilesLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfilesLink(ProfilesLink&& from) noexcept
    : ProfilesLink() {
    *this = ::std::move(from);
  }

  inline ProfilesLink& operator=(ProfilesLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfilesLink& default_instance();

  static inline const ProfilesLink* internal_default_instance() {
    return reinterpret_cast<const ProfilesLink*>(
               &_ProfilesLink_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ProfilesLink* other);
  friend void swap(ProfilesLink& a, ProfilesLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfilesLink* New() const PROTOBUF_FINAL { return New(NULL); }

  ProfilesLink* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProfilesLink& from);
  void MergeFrom(const ProfilesLink& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProfilesLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ru.mail.go.recommender.bki.ProfileID first = 1;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 1;
  const ::ru::mail::go::recommender::bki::ProfileID& first() const;
  ::ru::mail::go::recommender::bki::ProfileID* mutable_first();
  ::ru::mail::go::recommender::bki::ProfileID* release_first();
  void set_allocated_first(::ru::mail::go::recommender::bki::ProfileID* first);

  // required .ru.mail.go.recommender.bki.ProfileID second = 2;
  bool has_second() const;
  void clear_second();
  static const int kSecondFieldNumber = 2;
  const ::ru::mail::go::recommender::bki::ProfileID& second() const;
  ::ru::mail::go::recommender::bki::ProfileID* mutable_second();
  ::ru::mail::go::recommender::bki::ProfileID* release_second();
  void set_allocated_second(::ru::mail::go::recommender::bki::ProfileID* second);

  // optional bool matched_name = 3;
  bool has_matched_name() const;
  void clear_matched_name();
  static const int kMatchedNameFieldNumber = 3;
  bool matched_name() const;
  void set_matched_name(bool value);

  // optional bool matched_surname = 4;
  bool has_matched_surname() const;
  void clear_matched_surname();
  static const int kMatchedSurnameFieldNumber = 4;
  bool matched_surname() const;
  void set_matched_surname(bool value);

  // optional bool matched_birthday = 5;
  bool has_matched_birthday() const;
  void clear_matched_birthday();
  static const int kMatchedBirthdayFieldNumber = 5;
  bool matched_birthday() const;
  void set_matched_birthday(bool value);

  // optional bool matched_birthyear = 6;
  bool has_matched_birthyear() const;
  void clear_matched_birthyear();
  static const int kMatchedBirthyearFieldNumber = 6;
  bool matched_birthyear() const;
  void set_matched_birthyear(bool value);

  // optional bool matched_city = 7;
  bool has_matched_city() const;
  void clear_matched_city();
  static const int kMatchedCityFieldNumber = 7;
  bool matched_city() const;
  void set_matched_city(bool value);

  // optional bool matched_activity = 8;
  bool has_matched_activity() const;
  void clear_matched_activity();
  static const int kMatchedActivityFieldNumber = 8;
  bool matched_activity() const;
  void set_matched_activity(bool value);

  // optional bool matched_sex = 9;
  bool has_matched_sex() const;
  void clear_matched_sex();
  static const int kMatchedSexFieldNumber = 9;
  bool matched_sex() const;
  void set_matched_sex(bool value);

  // optional int64 match_time = 10;
  bool has_match_time() const;
  void clear_match_time();
  static const int kMatchTimeFieldNumber = 10;
  ::google::protobuf::int64 match_time() const;
  void set_match_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.recommender.bki.ProfilesLink)
 private:
  void set_has_first();
  void clear_has_first();
  void set_has_second();
  void clear_has_second();
  void set_has_matched_name();
  void clear_has_matched_name();
  void set_has_matched_surname();
  void clear_has_matched_surname();
  void set_has_matched_birthday();
  void clear_has_matched_birthday();
  void set_has_matched_birthyear();
  void clear_has_matched_birthyear();
  void set_has_matched_city();
  void clear_has_matched_city();
  void set_has_matched_activity();
  void clear_has_matched_activity();
  void set_has_matched_sex();
  void clear_has_matched_sex();
  void set_has_match_time();
  void clear_has_match_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::ru::mail::go::recommender::bki::ProfileID* first_;
  ::ru::mail::go::recommender::bki::ProfileID* second_;
  bool matched_name_;
  bool matched_surname_;
  bool matched_birthday_;
  bool matched_birthyear_;
  bool matched_city_;
  bool matched_activity_;
  bool matched_sex_;
  ::google::protobuf::int64 match_time_;
  friend struct protobuf_bki_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ru.mail.go.recommender.bki.GroupInfo) */ {
 public:
  GroupInfo();
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupInfo& default_instance();

  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GroupInfo* other);
  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string link = 3;
  bool has_link() const;
  void clear_link();
  static const int kLinkFieldNumber = 3;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  #if LANG_CXX11
  void set_link(::std::string&& value);
  #endif
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 members = 4;
  bool has_members() const;
  void clear_members();
  static const int kMembersFieldNumber = 4;
  ::google::protobuf::int32 members() const;
  void set_members(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ru.mail.go.recommender.bki.GroupInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_title();
  void clear_has_title();
  void set_has_link();
  void clear_has_link();
  void set_has_members();
  void clear_has_members();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 members_;
  friend struct protobuf_bki_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProfileID

// required .ru.mail.go.recommender.bki.ProfileID.Provider provider = 1;
inline bool ProfileID::has_provider() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfileID::set_has_provider() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfileID::clear_has_provider() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfileID::clear_provider() {
  provider_ = 1;
  clear_has_provider();
}
inline ::ru::mail::go::recommender::bki::ProfileID_Provider ProfileID::provider() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfileID.provider)
  return static_cast< ::ru::mail::go::recommender::bki::ProfileID_Provider >(provider_);
}
inline void ProfileID::set_provider(::ru::mail::go::recommender::bki::ProfileID_Provider value) {
  assert(::ru::mail::go::recommender::bki::ProfileID_Provider_IsValid(value));
  set_has_provider();
  provider_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfileID.provider)
}

// required int64 id = 2;
inline bool ProfileID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfileID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfileID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfileID::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ProfileID::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfileID.id)
  return id_;
}
inline void ProfileID::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfileID.id)
}

// -------------------------------------------------------------------

// Profile_Geo

// optional int32 region_id = 1;
inline bool Profile_Geo::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profile_Geo::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profile_Geo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profile_Geo::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 Profile_Geo::region_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Geo.region_id)
  return region_id_;
}
inline void Profile_Geo::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Geo.region_id)
}

// optional string title = 2;
inline bool Profile_Geo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profile_Geo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profile_Geo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profile_Geo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Profile_Geo::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Geo.title)
  return title_.GetNoArena();
}
inline void Profile_Geo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Geo.title)
}
#if LANG_CXX11
inline void Profile_Geo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.Geo.title)
}
#endif
inline void Profile_Geo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.Geo.title)
}
inline void Profile_Geo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.Geo.title)
}
inline ::std::string* Profile_Geo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.Geo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile_Geo::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.Geo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile_Geo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.Geo.title)
}

// -------------------------------------------------------------------

// Profile_GeoLocation

// optional .ru.mail.go.recommender.bki.Profile.Geo country = 1;
inline bool Profile_GeoLocation::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profile_GeoLocation::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profile_GeoLocation::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profile_GeoLocation::clear_country() {
  if (country_ != NULL) country_->::ru::mail::go::recommender::bki::Profile_Geo::Clear();
  clear_has_country();
}
inline const ::ru::mail::go::recommender::bki::Profile_Geo& Profile_GeoLocation::country() const {
  const ::ru::mail::go::recommender::bki::Profile_Geo* p = country_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.GeoLocation.country)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_Geo*>(
      &::ru::mail::go::recommender::bki::_Profile_Geo_default_instance_);
}
inline ::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::mutable_country() {
  set_has_country();
  if (country_ == NULL) {
    country_ = new ::ru::mail::go::recommender::bki::Profile_Geo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.GeoLocation.country)
  return country_;
}
inline ::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::release_country() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.GeoLocation.country)
  clear_has_country();
  ::ru::mail::go::recommender::bki::Profile_Geo* temp = country_;
  country_ = NULL;
  return temp;
}
inline void Profile_GeoLocation::set_allocated_country(::ru::mail::go::recommender::bki::Profile_Geo* country) {
  delete country_;
  country_ = country;
  if (country) {
    set_has_country();
  } else {
    clear_has_country();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.GeoLocation.country)
}

// optional .ru.mail.go.recommender.bki.Profile.Geo region = 2;
inline bool Profile_GeoLocation::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profile_GeoLocation::set_has_region() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profile_GeoLocation::clear_has_region() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profile_GeoLocation::clear_region() {
  if (region_ != NULL) region_->::ru::mail::go::recommender::bki::Profile_Geo::Clear();
  clear_has_region();
}
inline const ::ru::mail::go::recommender::bki::Profile_Geo& Profile_GeoLocation::region() const {
  const ::ru::mail::go::recommender::bki::Profile_Geo* p = region_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.GeoLocation.region)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_Geo*>(
      &::ru::mail::go::recommender::bki::_Profile_Geo_default_instance_);
}
inline ::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::mutable_region() {
  set_has_region();
  if (region_ == NULL) {
    region_ = new ::ru::mail::go::recommender::bki::Profile_Geo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.GeoLocation.region)
  return region_;
}
inline ::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::release_region() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.GeoLocation.region)
  clear_has_region();
  ::ru::mail::go::recommender::bki::Profile_Geo* temp = region_;
  region_ = NULL;
  return temp;
}
inline void Profile_GeoLocation::set_allocated_region(::ru::mail::go::recommender::bki::Profile_Geo* region) {
  delete region_;
  region_ = region;
  if (region) {
    set_has_region();
  } else {
    clear_has_region();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.GeoLocation.region)
}

// optional .ru.mail.go.recommender.bki.Profile.Geo city = 3;
inline bool Profile_GeoLocation::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Profile_GeoLocation::set_has_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Profile_GeoLocation::clear_has_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Profile_GeoLocation::clear_city() {
  if (city_ != NULL) city_->::ru::mail::go::recommender::bki::Profile_Geo::Clear();
  clear_has_city();
}
inline const ::ru::mail::go::recommender::bki::Profile_Geo& Profile_GeoLocation::city() const {
  const ::ru::mail::go::recommender::bki::Profile_Geo* p = city_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.GeoLocation.city)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_Geo*>(
      &::ru::mail::go::recommender::bki::_Profile_Geo_default_instance_);
}
inline ::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::mutable_city() {
  set_has_city();
  if (city_ == NULL) {
    city_ = new ::ru::mail::go::recommender::bki::Profile_Geo;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.GeoLocation.city)
  return city_;
}
inline ::ru::mail::go::recommender::bki::Profile_Geo* Profile_GeoLocation::release_city() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.GeoLocation.city)
  clear_has_city();
  ::ru::mail::go::recommender::bki::Profile_Geo* temp = city_;
  city_ = NULL;
  return temp;
}
inline void Profile_GeoLocation::set_allocated_city(::ru::mail::go::recommender::bki::Profile_Geo* city) {
  delete city_;
  city_ = city;
  if (city) {
    set_has_city();
  } else {
    clear_has_city();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.GeoLocation.city)
}

// -------------------------------------------------------------------

// Profile_School

// optional string name = 1;
inline bool Profile_School::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profile_School::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profile_School::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profile_School::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Profile_School::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.School.name)
  return name_.GetNoArena();
}
inline void Profile_School::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.School.name)
}
#if LANG_CXX11
inline void Profile_School::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.School.name)
}
#endif
inline void Profile_School::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.School.name)
}
inline void Profile_School::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.School.name)
}
inline ::std::string* Profile_School::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.School.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile_School::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.School.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile_School::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.School.name)
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
inline bool Profile_School::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profile_School::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profile_School::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profile_School::clear_location() {
  if (location_ != NULL) location_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_location();
}
inline const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile_School::location() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = location_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.School.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_School::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.School.location)
  return location_;
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_School::release_location() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.School.location)
  clear_has_location();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Profile_School::set_allocated_location(::ru::mail::go::recommender::bki::Profile_GeoLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.School.location)
}

// optional int32 year_from = 3;
inline bool Profile_School::has_year_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Profile_School::set_has_year_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Profile_School::clear_has_year_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Profile_School::clear_year_from() {
  year_from_ = 0;
  clear_has_year_from();
}
inline ::google::protobuf::int32 Profile_School::year_from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.School.year_from)
  return year_from_;
}
inline void Profile_School::set_year_from(::google::protobuf::int32 value) {
  set_has_year_from();
  year_from_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.School.year_from)
}

// optional int32 year_to = 4;
inline bool Profile_School::has_year_to() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Profile_School::set_has_year_to() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Profile_School::clear_has_year_to() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Profile_School::clear_year_to() {
  year_to_ = 0;
  clear_has_year_to();
}
inline ::google::protobuf::int32 Profile_School::year_to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.School.year_to)
  return year_to_;
}
inline void Profile_School::set_year_to(::google::protobuf::int32 value) {
  set_has_year_to();
  year_to_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.School.year_to)
}

// -------------------------------------------------------------------

// Profile_University

// optional string name = 1;
inline bool Profile_University::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profile_University::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profile_University::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profile_University::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Profile_University::name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.University.name)
  return name_.GetNoArena();
}
inline void Profile_University::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.University.name)
}
#if LANG_CXX11
inline void Profile_University::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.University.name)
}
#endif
inline void Profile_University::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.University.name)
}
inline void Profile_University::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.University.name)
}
inline ::std::string* Profile_University::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.University.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile_University::release_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.University.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile_University::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.University.name)
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
inline bool Profile_University::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profile_University::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profile_University::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profile_University::clear_location() {
  if (location_ != NULL) location_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_location();
}
inline const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile_University::location() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = location_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.University.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_University::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.University.location)
  return location_;
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_University::release_location() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.University.location)
  clear_has_location();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Profile_University::set_allocated_location(::ru::mail::go::recommender::bki::Profile_GeoLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.University.location)
}

// optional int32 year_from = 3;
inline bool Profile_University::has_year_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Profile_University::set_has_year_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Profile_University::clear_has_year_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Profile_University::clear_year_from() {
  year_from_ = 0;
  clear_has_year_from();
}
inline ::google::protobuf::int32 Profile_University::year_from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.University.year_from)
  return year_from_;
}
inline void Profile_University::set_year_from(::google::protobuf::int32 value) {
  set_has_year_from();
  year_from_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.University.year_from)
}

// optional int32 year_to = 4;
inline bool Profile_University::has_year_to() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Profile_University::set_has_year_to() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Profile_University::clear_has_year_to() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Profile_University::clear_year_to() {
  year_to_ = 0;
  clear_has_year_to();
}
inline ::google::protobuf::int32 Profile_University::year_to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.University.year_to)
  return year_to_;
}
inline void Profile_University::set_year_to(::google::protobuf::int32 value) {
  set_has_year_to();
  year_to_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.University.year_to)
}

// -------------------------------------------------------------------

// Profile_Career

// optional string company = 1;
inline bool Profile_Career::has_company() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profile_Career::set_has_company() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profile_Career::clear_has_company() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profile_Career::clear_company() {
  company_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_company();
}
inline const ::std::string& Profile_Career::company() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.company)
  return company_.GetNoArena();
}
inline void Profile_Career::set_company(const ::std::string& value) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Career.company)
}
#if LANG_CXX11
inline void Profile_Career::set_company(::std::string&& value) {
  set_has_company();
  company_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.Career.company)
}
#endif
inline void Profile_Career::set_company(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.Career.company)
}
inline void Profile_Career::set_company(const char* value, size_t size) {
  set_has_company();
  company_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.Career.company)
}
inline ::std::string* Profile_Career::mutable_company() {
  set_has_company();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.Career.company)
  return company_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile_Career::release_company() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.Career.company)
  clear_has_company();
  return company_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile_Career::set_allocated_company(::std::string* company) {
  if (company != NULL) {
    set_has_company();
  } else {
    clear_has_company();
  }
  company_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.Career.company)
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation location = 2;
inline bool Profile_Career::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Profile_Career::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Profile_Career::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Profile_Career::clear_location() {
  if (location_ != NULL) location_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_location();
}
inline const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile_Career::location() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = location_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.location)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_Career::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.Career.location)
  return location_;
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile_Career::release_location() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.Career.location)
  clear_has_location();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Profile_Career::set_allocated_location(::ru::mail::go::recommender::bki::Profile_GeoLocation* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.Career.location)
}

// optional int32 year_from = 3;
inline bool Profile_Career::has_year_from() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Profile_Career::set_has_year_from() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Profile_Career::clear_has_year_from() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Profile_Career::clear_year_from() {
  year_from_ = 0;
  clear_has_year_from();
}
inline ::google::protobuf::int32 Profile_Career::year_from() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.year_from)
  return year_from_;
}
inline void Profile_Career::set_year_from(::google::protobuf::int32 value) {
  set_has_year_from();
  year_from_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Career.year_from)
}

// optional int32 year_to = 4;
inline bool Profile_Career::has_year_to() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Profile_Career::set_has_year_to() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Profile_Career::clear_has_year_to() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Profile_Career::clear_year_to() {
  year_to_ = 0;
  clear_has_year_to();
}
inline ::google::protobuf::int32 Profile_Career::year_to() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.year_to)
  return year_to_;
}
inline void Profile_Career::set_year_to(::google::protobuf::int32 value) {
  set_has_year_to();
  year_to_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Career.year_to)
}

// optional string position = 5;
inline bool Profile_Career::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profile_Career::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profile_Career::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profile_Career::clear_position() {
  position_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_position();
}
inline const ::std::string& Profile_Career::position() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.position)
  return position_.GetNoArena();
}
inline void Profile_Career::set_position(const ::std::string& value) {
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Career.position)
}
#if LANG_CXX11
inline void Profile_Career::set_position(::std::string&& value) {
  set_has_position();
  position_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.Career.position)
}
#endif
inline void Profile_Career::set_position(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.Career.position)
}
inline void Profile_Career::set_position(const char* value, size_t size) {
  set_has_position();
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.Career.position)
}
inline ::std::string* Profile_Career::mutable_position() {
  set_has_position();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.Career.position)
  return position_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile_Career::release_position() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.Career.position)
  clear_has_position();
  return position_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile_Career::set_allocated_position(::std::string* position) {
  if (position != NULL) {
    set_has_position();
  } else {
    clear_has_position();
  }
  position_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), position);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.Career.position)
}

// optional int32 company_group_id = 6;
inline bool Profile_Career::has_company_group_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Profile_Career::set_has_company_group_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Profile_Career::clear_has_company_group_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Profile_Career::clear_company_group_id() {
  company_group_id_ = 0;
  clear_has_company_group_id();
}
inline ::google::protobuf::int32 Profile_Career::company_group_id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Career.company_group_id)
  return company_group_id_;
}
inline void Profile_Career::set_company_group_id(::google::protobuf::int32 value) {
  set_has_company_group_id();
  company_group_id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Career.company_group_id)
}

// -------------------------------------------------------------------

// Profile_Friend

// required int64 id = 1;
inline bool Profile_Friend::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profile_Friend::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profile_Friend::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profile_Friend::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Profile_Friend::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.id)
  return id_;
}
inline void Profile_Friend::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.id)
}

// optional bool namesakes = 2;
inline bool Profile_Friend::has_namesakes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profile_Friend::set_has_namesakes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profile_Friend::clear_has_namesakes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profile_Friend::clear_namesakes() {
  namesakes_ = false;
  clear_has_namesakes();
}
inline bool Profile_Friend::namesakes() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.namesakes)
  return namesakes_;
}
inline void Profile_Friend::set_namesakes(bool value) {
  set_has_namesakes();
  namesakes_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.namesakes)
}

// optional bool collegues = 3;
inline bool Profile_Friend::has_collegues() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Profile_Friend::set_has_collegues() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Profile_Friend::clear_has_collegues() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Profile_Friend::clear_collegues() {
  collegues_ = false;
  clear_has_collegues();
}
inline bool Profile_Friend::collegues() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.collegues)
  return collegues_;
}
inline void Profile_Friend::set_collegues(bool value) {
  set_has_collegues();
  collegues_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.collegues)
}

// optional bool relatives = 4;
inline bool Profile_Friend::has_relatives() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Profile_Friend::set_has_relatives() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Profile_Friend::clear_has_relatives() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Profile_Friend::clear_relatives() {
  relatives_ = false;
  clear_has_relatives();
}
inline bool Profile_Friend::relatives() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.relatives)
  return relatives_;
}
inline void Profile_Friend::set_relatives(bool value) {
  set_has_relatives();
  relatives_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.relatives)
}

// optional bool classmates = 5;
inline bool Profile_Friend::has_classmates() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Profile_Friend::set_has_classmates() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Profile_Friend::clear_has_classmates() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Profile_Friend::clear_classmates() {
  classmates_ = false;
  clear_has_classmates();
}
inline bool Profile_Friend::classmates() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.classmates)
  return classmates_;
}
inline void Profile_Friend::set_classmates(bool value) {
  set_has_classmates();
  classmates_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.classmates)
}

// optional bool militarymates = 6;
inline bool Profile_Friend::has_militarymates() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Profile_Friend::set_has_militarymates() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Profile_Friend::clear_has_militarymates() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Profile_Friend::clear_militarymates() {
  militarymates_ = false;
  clear_has_militarymates();
}
inline bool Profile_Friend::militarymates() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.militarymates)
  return militarymates_;
}
inline void Profile_Friend::set_militarymates(bool value) {
  set_has_militarymates();
  militarymates_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.militarymates)
}

// optional bool roommates = 7;
inline bool Profile_Friend::has_roommates() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Profile_Friend::set_has_roommates() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Profile_Friend::clear_has_roommates() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Profile_Friend::clear_roommates() {
  roommates_ = false;
  clear_has_roommates();
}
inline bool Profile_Friend::roommates() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.Friend.roommates)
  return roommates_;
}
inline void Profile_Friend::set_roommates(bool value) {
  set_has_roommates();
  roommates_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.Friend.roommates)
}

// -------------------------------------------------------------------

// Profile

// required .ru.mail.go.recommender.bki.ProfileID id = 1;
inline bool Profile::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Profile::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Profile::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Profile::clear_id() {
  if (id_ != NULL) id_->::ru::mail::go::recommender::bki::ProfileID::Clear();
  clear_has_id();
}
inline const ::ru::mail::go::recommender::bki::ProfileID& Profile::id() const {
  const ::ru::mail::go::recommender::bki::ProfileID* p = id_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.id)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::ProfileID*>(
      &::ru::mail::go::recommender::bki::_ProfileID_default_instance_);
}
inline ::ru::mail::go::recommender::bki::ProfileID* Profile::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::ru::mail::go::recommender::bki::ProfileID;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.id)
  return id_;
}
inline ::ru::mail::go::recommender::bki::ProfileID* Profile::release_id() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.id)
  clear_has_id();
  ::ru::mail::go::recommender::bki::ProfileID* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Profile::set_allocated_id(::ru::mail::go::recommender::bki::ProfileID* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.id)
}

// optional string link = 3;
inline bool Profile::has_link() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profile::set_has_link() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profile::clear_has_link() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profile::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
inline const ::std::string& Profile::link() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.link)
  return link_.GetNoArena();
}
inline void Profile::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.link)
}
#if LANG_CXX11
inline void Profile::set_link(::std::string&& value) {
  set_has_link();
  link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.link)
}
#endif
inline void Profile::set_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.link)
}
inline void Profile::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.link)
}
inline ::std::string* Profile::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_link() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.link)
  clear_has_link();
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.link)
}

// optional string first_name = 4;
inline bool Profile::has_first_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profile::set_has_first_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profile::clear_has_first_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profile::clear_first_name() {
  first_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_first_name();
}
inline const ::std::string& Profile::first_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.first_name)
  return first_name_.GetNoArena();
}
inline void Profile::set_first_name(const ::std::string& value) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.first_name)
}
#if LANG_CXX11
inline void Profile::set_first_name(::std::string&& value) {
  set_has_first_name();
  first_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.first_name)
}
#endif
inline void Profile::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.first_name)
}
inline void Profile::set_first_name(const char* value, size_t size) {
  set_has_first_name();
  first_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.first_name)
}
inline ::std::string* Profile::mutable_first_name() {
  set_has_first_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.first_name)
  return first_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_first_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.first_name)
  clear_has_first_name();
  return first_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_first_name(::std::string* first_name) {
  if (first_name != NULL) {
    set_has_first_name();
  } else {
    clear_has_first_name();
  }
  first_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.first_name)
}

// optional string last_name = 5;
inline bool Profile::has_last_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Profile::set_has_last_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Profile::clear_has_last_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Profile::clear_last_name() {
  last_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_last_name();
}
inline const ::std::string& Profile::last_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.last_name)
  return last_name_.GetNoArena();
}
inline void Profile::set_last_name(const ::std::string& value) {
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.last_name)
}
#if LANG_CXX11
inline void Profile::set_last_name(::std::string&& value) {
  set_has_last_name();
  last_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.last_name)
}
#endif
inline void Profile::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.last_name)
}
inline void Profile::set_last_name(const char* value, size_t size) {
  set_has_last_name();
  last_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.last_name)
}
inline ::std::string* Profile::mutable_last_name() {
  set_has_last_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.last_name)
  return last_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_last_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.last_name)
  clear_has_last_name();
  return last_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_last_name(::std::string* last_name) {
  if (last_name != NULL) {
    set_has_last_name();
  } else {
    clear_has_last_name();
  }
  last_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.last_name)
}

// optional string middle_name = 6;
inline bool Profile::has_middle_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Profile::set_has_middle_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Profile::clear_has_middle_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Profile::clear_middle_name() {
  middle_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_middle_name();
}
inline const ::std::string& Profile::middle_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.middle_name)
  return middle_name_.GetNoArena();
}
inline void Profile::set_middle_name(const ::std::string& value) {
  set_has_middle_name();
  middle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.middle_name)
}
#if LANG_CXX11
inline void Profile::set_middle_name(::std::string&& value) {
  set_has_middle_name();
  middle_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.middle_name)
}
#endif
inline void Profile::set_middle_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_middle_name();
  middle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.middle_name)
}
inline void Profile::set_middle_name(const char* value, size_t size) {
  set_has_middle_name();
  middle_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.middle_name)
}
inline ::std::string* Profile::mutable_middle_name() {
  set_has_middle_name();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.middle_name)
  return middle_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_middle_name() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.middle_name)
  clear_has_middle_name();
  return middle_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_middle_name(::std::string* middle_name) {
  if (middle_name != NULL) {
    set_has_middle_name();
  } else {
    clear_has_middle_name();
  }
  middle_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), middle_name);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.middle_name)
}

// optional int32 birth_day = 7;
inline bool Profile::has_birth_day() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Profile::set_has_birth_day() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Profile::clear_has_birth_day() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Profile::clear_birth_day() {
  birth_day_ = 0;
  clear_has_birth_day();
}
inline ::google::protobuf::int32 Profile::birth_day() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.birth_day)
  return birth_day_;
}
inline void Profile::set_birth_day(::google::protobuf::int32 value) {
  set_has_birth_day();
  birth_day_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.birth_day)
}

// optional int32 birth_month = 8;
inline bool Profile::has_birth_month() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Profile::set_has_birth_month() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Profile::clear_has_birth_month() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Profile::clear_birth_month() {
  birth_month_ = 0;
  clear_has_birth_month();
}
inline ::google::protobuf::int32 Profile::birth_month() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.birth_month)
  return birth_month_;
}
inline void Profile::set_birth_month(::google::protobuf::int32 value) {
  set_has_birth_month();
  birth_month_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.birth_month)
}

// optional int32 birth_year = 9;
inline bool Profile::has_birth_year() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Profile::set_has_birth_year() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Profile::clear_has_birth_year() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Profile::clear_birth_year() {
  birth_year_ = 0;
  clear_has_birth_year();
}
inline ::google::protobuf::int32 Profile::birth_year() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.birth_year)
  return birth_year_;
}
inline void Profile::set_birth_year(::google::protobuf::int32 value) {
  set_has_birth_year();
  birth_year_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.birth_year)
}

// optional string photo = 10;
inline bool Profile::has_photo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Profile::set_has_photo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Profile::clear_has_photo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Profile::clear_photo() {
  photo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_photo();
}
inline const ::std::string& Profile::photo() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.photo)
  return photo_.GetNoArena();
}
inline void Profile::set_photo(const ::std::string& value) {
  set_has_photo();
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.photo)
}
#if LANG_CXX11
inline void Profile::set_photo(::std::string&& value) {
  set_has_photo();
  photo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.photo)
}
#endif
inline void Profile::set_photo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_photo();
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.photo)
}
inline void Profile::set_photo(const char* value, size_t size) {
  set_has_photo();
  photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.photo)
}
inline ::std::string* Profile::mutable_photo() {
  set_has_photo();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.photo)
  return photo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_photo() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.photo)
  clear_has_photo();
  return photo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_photo(::std::string* photo) {
  if (photo != NULL) {
    set_has_photo();
  } else {
    clear_has_photo();
  }
  photo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.photo)
}

// optional .ru.mail.go.recommender.bki.Profile.Sex sex = 11;
inline bool Profile::has_sex() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Profile::set_has_sex() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Profile::clear_has_sex() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Profile::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::ru::mail::go::recommender::bki::Profile_Sex Profile::sex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.sex)
  return static_cast< ::ru::mail::go::recommender::bki::Profile_Sex >(sex_);
}
inline void Profile::set_sex(::ru::mail::go::recommender::bki::Profile_Sex value) {
  assert(::ru::mail::go::recommender::bki::Profile_Sex_IsValid(value));
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.sex)
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation birth_place = 12;
inline bool Profile::has_birth_place() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Profile::set_has_birth_place() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Profile::clear_has_birth_place() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Profile::clear_birth_place() {
  if (birth_place_ != NULL) birth_place_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_birth_place();
}
inline const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile::birth_place() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = birth_place_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.birth_place)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::mutable_birth_place() {
  set_has_birth_place();
  if (birth_place_ == NULL) {
    birth_place_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.birth_place)
  return birth_place_;
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::release_birth_place() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.birth_place)
  clear_has_birth_place();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = birth_place_;
  birth_place_ = NULL;
  return temp;
}
inline void Profile::set_allocated_birth_place(::ru::mail::go::recommender::bki::Profile_GeoLocation* birth_place) {
  delete birth_place_;
  birth_place_ = birth_place;
  if (birth_place) {
    set_has_birth_place();
  } else {
    clear_has_birth_place();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.birth_place)
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation current_place = 13;
inline bool Profile::has_current_place() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Profile::set_has_current_place() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Profile::clear_has_current_place() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Profile::clear_current_place() {
  if (current_place_ != NULL) current_place_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_current_place();
}
inline const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile::current_place() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = current_place_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.current_place)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::mutable_current_place() {
  set_has_current_place();
  if (current_place_ == NULL) {
    current_place_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.current_place)
  return current_place_;
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::release_current_place() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.current_place)
  clear_has_current_place();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = current_place_;
  current_place_ = NULL;
  return temp;
}
inline void Profile::set_allocated_current_place(::ru::mail::go::recommender::bki::Profile_GeoLocation* current_place) {
  delete current_place_;
  current_place_ = current_place;
  if (current_place) {
    set_has_current_place();
  } else {
    clear_has_current_place();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.current_place)
}

// optional string phone = 15;
inline bool Profile::has_phone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Profile::set_has_phone() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Profile::clear_has_phone() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Profile::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
inline const ::std::string& Profile::phone() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.phone)
  return phone_.GetNoArena();
}
inline void Profile::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.phone)
}
#if LANG_CXX11
inline void Profile::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.phone)
}
#endif
inline void Profile::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.phone)
}
inline void Profile::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.phone)
}
inline ::std::string* Profile::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_phone() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.phone)
}

// optional string email = 16;
inline bool Profile::has_email() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Profile::set_has_email() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Profile::clear_has_email() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Profile::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& Profile::email() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.email)
  return email_.GetNoArena();
}
inline void Profile::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.email)
}
#if LANG_CXX11
inline void Profile::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.email)
}
#endif
inline void Profile::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.email)
}
inline void Profile::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.email)
}
inline ::std::string* Profile::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_email() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.email)
}

// optional string skype = 17;
inline bool Profile::has_skype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Profile::set_has_skype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Profile::clear_has_skype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Profile::clear_skype() {
  skype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_skype();
}
inline const ::std::string& Profile::skype() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.skype)
  return skype_.GetNoArena();
}
inline void Profile::set_skype(const ::std::string& value) {
  set_has_skype();
  skype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.skype)
}
#if LANG_CXX11
inline void Profile::set_skype(::std::string&& value) {
  set_has_skype();
  skype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.Profile.skype)
}
#endif
inline void Profile::set_skype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_skype();
  skype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.skype)
}
inline void Profile::set_skype(const char* value, size_t size) {
  set_has_skype();
  skype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.skype)
}
inline ::std::string* Profile::mutable_skype() {
  set_has_skype();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.skype)
  return skype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_skype() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.skype)
  clear_has_skype();
  return skype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_skype(::std::string* skype) {
  if (skype != NULL) {
    set_has_skype();
  } else {
    clear_has_skype();
  }
  skype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skype);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.skype)
}

// optional int64 last_seen_timestamp = 19;
inline bool Profile::has_last_seen_timestamp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Profile::set_has_last_seen_timestamp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Profile::clear_has_last_seen_timestamp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Profile::clear_last_seen_timestamp() {
  last_seen_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_seen_timestamp();
}
inline ::google::protobuf::int64 Profile::last_seen_timestamp() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.last_seen_timestamp)
  return last_seen_timestamp_;
}
inline void Profile::set_last_seen_timestamp(::google::protobuf::int64 value) {
  set_has_last_seen_timestamp();
  last_seen_timestamp_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.last_seen_timestamp)
}

// repeated .ru.mail.go.recommender.bki.Profile.School schools = 20;
inline int Profile::schools_size() const {
  return schools_.size();
}
inline void Profile::clear_schools() {
  schools_.Clear();
}
inline const ::ru::mail::go::recommender::bki::Profile_School& Profile::schools(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.schools)
  return schools_.Get(index);
}
inline ::ru::mail::go::recommender::bki::Profile_School* Profile::mutable_schools(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.schools)
  return schools_.Mutable(index);
}
inline ::ru::mail::go::recommender::bki::Profile_School* Profile::add_schools() {
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.schools)
  return schools_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_School >*
Profile::mutable_schools() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.schools)
  return &schools_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_School >&
Profile::schools() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.schools)
  return schools_;
}

// repeated .ru.mail.go.recommender.bki.Profile.University universities = 21;
inline int Profile::universities_size() const {
  return universities_.size();
}
inline void Profile::clear_universities() {
  universities_.Clear();
}
inline const ::ru::mail::go::recommender::bki::Profile_University& Profile::universities(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.universities)
  return universities_.Get(index);
}
inline ::ru::mail::go::recommender::bki::Profile_University* Profile::mutable_universities(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.universities)
  return universities_.Mutable(index);
}
inline ::ru::mail::go::recommender::bki::Profile_University* Profile::add_universities() {
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.universities)
  return universities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_University >*
Profile::mutable_universities() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.universities)
  return &universities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_University >&
Profile::universities() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.universities)
  return universities_;
}

// repeated .ru.mail.go.recommender.bki.Profile.Career career = 22;
inline int Profile::career_size() const {
  return career_.size();
}
inline void Profile::clear_career() {
  career_.Clear();
}
inline const ::ru::mail::go::recommender::bki::Profile_Career& Profile::career(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.career)
  return career_.Get(index);
}
inline ::ru::mail::go::recommender::bki::Profile_Career* Profile::mutable_career(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.career)
  return career_.Mutable(index);
}
inline ::ru::mail::go::recommender::bki::Profile_Career* Profile::add_career() {
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.career)
  return career_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Career >*
Profile::mutable_career() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.career)
  return &career_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Career >&
Profile::career() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.career)
  return career_;
}

// repeated string interests = 23;
inline int Profile::interests_size() const {
  return interests_.size();
}
inline void Profile::clear_interests() {
  interests_.Clear();
}
inline const ::std::string& Profile::interests(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.interests)
  return interests_.Get(index);
}
inline ::std::string* Profile::mutable_interests(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.interests)
  return interests_.Mutable(index);
}
inline void Profile::set_interests(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.interests)
  interests_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Profile::set_interests(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.interests)
  interests_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Profile::set_interests(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  interests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.Profile.interests)
}
inline void Profile::set_interests(int index, const char* value, size_t size) {
  interests_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.Profile.interests)
}
inline ::std::string* Profile::add_interests() {
  // @@protoc_insertion_point(field_add_mutable:ru.mail.go.recommender.bki.Profile.interests)
  return interests_.Add();
}
inline void Profile::add_interests(const ::std::string& value) {
  interests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.interests)
}
#if LANG_CXX11
inline void Profile::add_interests(::std::string&& value) {
  interests_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.interests)
}
#endif
inline void Profile::add_interests(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  interests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.mail.go.recommender.bki.Profile.interests)
}
inline void Profile::add_interests(const char* value, size_t size) {
  interests_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.mail.go.recommender.bki.Profile.interests)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Profile::interests() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.interests)
  return interests_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Profile::mutable_interests() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.interests)
  return &interests_;
}

// repeated .ru.mail.go.recommender.bki.Profile.Friend friends = 24;
inline int Profile::friends_size() const {
  return friends_.size();
}
inline void Profile::clear_friends() {
  friends_.Clear();
}
inline const ::ru::mail::go::recommender::bki::Profile_Friend& Profile::friends(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.friends)
  return friends_.Get(index);
}
inline ::ru::mail::go::recommender::bki::Profile_Friend* Profile::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.friends)
  return friends_.Mutable(index);
}
inline ::ru::mail::go::recommender::bki::Profile_Friend* Profile::add_friends() {
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.friends)
  return friends_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Friend >*
Profile::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.friends)
  return &friends_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ru::mail::go::recommender::bki::Profile_Friend >&
Profile::friends() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.friends)
  return friends_;
}

// optional .ru.mail.go.recommender.bki.Profile.MaritalStatus marital_status_type = 25;
inline bool Profile::has_marital_status_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Profile::set_has_marital_status_type() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Profile::clear_has_marital_status_type() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Profile::clear_marital_status_type() {
  marital_status_type_ = 0;
  clear_has_marital_status_type();
}
inline ::ru::mail::go::recommender::bki::Profile_MaritalStatus Profile::marital_status_type() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.marital_status_type)
  return static_cast< ::ru::mail::go::recommender::bki::Profile_MaritalStatus >(marital_status_type_);
}
inline void Profile::set_marital_status_type(::ru::mail::go::recommender::bki::Profile_MaritalStatus value) {
  assert(::ru::mail::go::recommender::bki::Profile_MaritalStatus_IsValid(value));
  set_has_marital_status_type();
  marital_status_type_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.marital_status_type)
}

// repeated .ru.mail.go.recommender.bki.Profile.Platform platforms_type = 26;
inline int Profile::platforms_type_size() const {
  return platforms_type_.size();
}
inline void Profile::clear_platforms_type() {
  platforms_type_.Clear();
}
inline ::ru::mail::go::recommender::bki::Profile_Platform Profile::platforms_type(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.platforms_type)
  return static_cast< ::ru::mail::go::recommender::bki::Profile_Platform >(platforms_type_.Get(index));
}
inline void Profile::set_platforms_type(int index, ::ru::mail::go::recommender::bki::Profile_Platform value) {
  assert(::ru::mail::go::recommender::bki::Profile_Platform_IsValid(value));
  platforms_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.platforms_type)
}
inline void Profile::add_platforms_type(::ru::mail::go::recommender::bki::Profile_Platform value) {
  assert(::ru::mail::go::recommender::bki::Profile_Platform_IsValid(value));
  platforms_type_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.platforms_type)
}
inline const ::google::protobuf::RepeatedField<int>&
Profile::platforms_type() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.platforms_type)
  return platforms_type_;
}
inline ::google::protobuf::RepeatedField<int>*
Profile::mutable_platforms_type() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.platforms_type)
  return &platforms_type_;
}

// repeated int32 groups = 27;
inline int Profile::groups_size() const {
  return groups_.size();
}
inline void Profile::clear_groups() {
  groups_.Clear();
}
inline ::google::protobuf::int32 Profile::groups(int index) const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.groups)
  return groups_.Get(index);
}
inline void Profile::set_groups(int index, ::google::protobuf::int32 value) {
  groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.Profile.groups)
}
inline void Profile::add_groups(::google::protobuf::int32 value) {
  groups_.Add(value);
  // @@protoc_insertion_point(field_add:ru.mail.go.recommender.bki.Profile.groups)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Profile::groups() const {
  // @@protoc_insertion_point(field_list:ru.mail.go.recommender.bki.Profile.groups)
  return groups_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Profile::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:ru.mail.go.recommender.bki.Profile.groups)
  return &groups_;
}

// optional .ru.mail.go.recommender.bki.Profile.GeoLocation friends_majority_place = 28;
inline bool Profile::has_friends_majority_place() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Profile::set_has_friends_majority_place() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Profile::clear_has_friends_majority_place() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Profile::clear_friends_majority_place() {
  if (friends_majority_place_ != NULL) friends_majority_place_->::ru::mail::go::recommender::bki::Profile_GeoLocation::Clear();
  clear_has_friends_majority_place();
}
inline const ::ru::mail::go::recommender::bki::Profile_GeoLocation& Profile::friends_majority_place() const {
  const ::ru::mail::go::recommender::bki::Profile_GeoLocation* p = friends_majority_place_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.Profile.friends_majority_place)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::Profile_GeoLocation*>(
      &::ru::mail::go::recommender::bki::_Profile_GeoLocation_default_instance_);
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::mutable_friends_majority_place() {
  set_has_friends_majority_place();
  if (friends_majority_place_ == NULL) {
    friends_majority_place_ = new ::ru::mail::go::recommender::bki::Profile_GeoLocation;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.Profile.friends_majority_place)
  return friends_majority_place_;
}
inline ::ru::mail::go::recommender::bki::Profile_GeoLocation* Profile::release_friends_majority_place() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.Profile.friends_majority_place)
  clear_has_friends_majority_place();
  ::ru::mail::go::recommender::bki::Profile_GeoLocation* temp = friends_majority_place_;
  friends_majority_place_ = NULL;
  return temp;
}
inline void Profile::set_allocated_friends_majority_place(::ru::mail::go::recommender::bki::Profile_GeoLocation* friends_majority_place) {
  delete friends_majority_place_;
  friends_majority_place_ = friends_majority_place;
  if (friends_majority_place) {
    set_has_friends_majority_place();
  } else {
    clear_has_friends_majority_place();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.Profile.friends_majority_place)
}

// -------------------------------------------------------------------

// ProfilesLink

// required .ru.mail.go.recommender.bki.ProfileID first = 1;
inline bool ProfilesLink::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfilesLink::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfilesLink::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfilesLink::clear_first() {
  if (first_ != NULL) first_->::ru::mail::go::recommender::bki::ProfileID::Clear();
  clear_has_first();
}
inline const ::ru::mail::go::recommender::bki::ProfileID& ProfilesLink::first() const {
  const ::ru::mail::go::recommender::bki::ProfileID* p = first_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.first)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::ProfileID*>(
      &::ru::mail::go::recommender::bki::_ProfileID_default_instance_);
}
inline ::ru::mail::go::recommender::bki::ProfileID* ProfilesLink::mutable_first() {
  set_has_first();
  if (first_ == NULL) {
    first_ = new ::ru::mail::go::recommender::bki::ProfileID;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.ProfilesLink.first)
  return first_;
}
inline ::ru::mail::go::recommender::bki::ProfileID* ProfilesLink::release_first() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.ProfilesLink.first)
  clear_has_first();
  ::ru::mail::go::recommender::bki::ProfileID* temp = first_;
  first_ = NULL;
  return temp;
}
inline void ProfilesLink::set_allocated_first(::ru::mail::go::recommender::bki::ProfileID* first) {
  delete first_;
  first_ = first;
  if (first) {
    set_has_first();
  } else {
    clear_has_first();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.ProfilesLink.first)
}

// required .ru.mail.go.recommender.bki.ProfileID second = 2;
inline bool ProfilesLink::has_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfilesLink::set_has_second() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfilesLink::clear_has_second() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfilesLink::clear_second() {
  if (second_ != NULL) second_->::ru::mail::go::recommender::bki::ProfileID::Clear();
  clear_has_second();
}
inline const ::ru::mail::go::recommender::bki::ProfileID& ProfilesLink::second() const {
  const ::ru::mail::go::recommender::bki::ProfileID* p = second_;
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.second)
  return p != NULL ? *p : *reinterpret_cast<const ::ru::mail::go::recommender::bki::ProfileID*>(
      &::ru::mail::go::recommender::bki::_ProfileID_default_instance_);
}
inline ::ru::mail::go::recommender::bki::ProfileID* ProfilesLink::mutable_second() {
  set_has_second();
  if (second_ == NULL) {
    second_ = new ::ru::mail::go::recommender::bki::ProfileID;
  }
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.ProfilesLink.second)
  return second_;
}
inline ::ru::mail::go::recommender::bki::ProfileID* ProfilesLink::release_second() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.ProfilesLink.second)
  clear_has_second();
  ::ru::mail::go::recommender::bki::ProfileID* temp = second_;
  second_ = NULL;
  return temp;
}
inline void ProfilesLink::set_allocated_second(::ru::mail::go::recommender::bki::ProfileID* second) {
  delete second_;
  second_ = second;
  if (second) {
    set_has_second();
  } else {
    clear_has_second();
  }
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.ProfilesLink.second)
}

// optional bool matched_name = 3;
inline bool ProfilesLink::has_matched_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfilesLink::set_has_matched_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfilesLink::clear_has_matched_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfilesLink::clear_matched_name() {
  matched_name_ = false;
  clear_has_matched_name();
}
inline bool ProfilesLink::matched_name() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_name)
  return matched_name_;
}
inline void ProfilesLink::set_matched_name(bool value) {
  set_has_matched_name();
  matched_name_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_name)
}

// optional bool matched_surname = 4;
inline bool ProfilesLink::has_matched_surname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfilesLink::set_has_matched_surname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProfilesLink::clear_has_matched_surname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProfilesLink::clear_matched_surname() {
  matched_surname_ = false;
  clear_has_matched_surname();
}
inline bool ProfilesLink::matched_surname() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_surname)
  return matched_surname_;
}
inline void ProfilesLink::set_matched_surname(bool value) {
  set_has_matched_surname();
  matched_surname_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_surname)
}

// optional bool matched_birthday = 5;
inline bool ProfilesLink::has_matched_birthday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfilesLink::set_has_matched_birthday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProfilesLink::clear_has_matched_birthday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProfilesLink::clear_matched_birthday() {
  matched_birthday_ = false;
  clear_has_matched_birthday();
}
inline bool ProfilesLink::matched_birthday() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_birthday)
  return matched_birthday_;
}
inline void ProfilesLink::set_matched_birthday(bool value) {
  set_has_matched_birthday();
  matched_birthday_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_birthday)
}

// optional bool matched_birthyear = 6;
inline bool ProfilesLink::has_matched_birthyear() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProfilesLink::set_has_matched_birthyear() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProfilesLink::clear_has_matched_birthyear() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProfilesLink::clear_matched_birthyear() {
  matched_birthyear_ = false;
  clear_has_matched_birthyear();
}
inline bool ProfilesLink::matched_birthyear() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_birthyear)
  return matched_birthyear_;
}
inline void ProfilesLink::set_matched_birthyear(bool value) {
  set_has_matched_birthyear();
  matched_birthyear_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_birthyear)
}

// optional bool matched_city = 7;
inline bool ProfilesLink::has_matched_city() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProfilesLink::set_has_matched_city() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProfilesLink::clear_has_matched_city() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProfilesLink::clear_matched_city() {
  matched_city_ = false;
  clear_has_matched_city();
}
inline bool ProfilesLink::matched_city() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_city)
  return matched_city_;
}
inline void ProfilesLink::set_matched_city(bool value) {
  set_has_matched_city();
  matched_city_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_city)
}

// optional bool matched_activity = 8;
inline bool ProfilesLink::has_matched_activity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProfilesLink::set_has_matched_activity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProfilesLink::clear_has_matched_activity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProfilesLink::clear_matched_activity() {
  matched_activity_ = false;
  clear_has_matched_activity();
}
inline bool ProfilesLink::matched_activity() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_activity)
  return matched_activity_;
}
inline void ProfilesLink::set_matched_activity(bool value) {
  set_has_matched_activity();
  matched_activity_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_activity)
}

// optional bool matched_sex = 9;
inline bool ProfilesLink::has_matched_sex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProfilesLink::set_has_matched_sex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProfilesLink::clear_has_matched_sex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProfilesLink::clear_matched_sex() {
  matched_sex_ = false;
  clear_has_matched_sex();
}
inline bool ProfilesLink::matched_sex() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.matched_sex)
  return matched_sex_;
}
inline void ProfilesLink::set_matched_sex(bool value) {
  set_has_matched_sex();
  matched_sex_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.matched_sex)
}

// optional int64 match_time = 10;
inline bool ProfilesLink::has_match_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProfilesLink::set_has_match_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProfilesLink::clear_has_match_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProfilesLink::clear_match_time() {
  match_time_ = GOOGLE_LONGLONG(0);
  clear_has_match_time();
}
inline ::google::protobuf::int64 ProfilesLink::match_time() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.ProfilesLink.match_time)
  return match_time_;
}
inline void ProfilesLink::set_match_time(::google::protobuf::int64 value) {
  set_has_match_time();
  match_time_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.ProfilesLink.match_time)
}

// -------------------------------------------------------------------

// GroupInfo

// required int32 id = 1;
inline bool GroupInfo::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupInfo::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GroupInfo::id() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.GroupInfo.id)
  return id_;
}
inline void GroupInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.GroupInfo.id)
}

// optional string title = 2;
inline bool GroupInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& GroupInfo::title() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.GroupInfo.title)
  return title_.GetNoArena();
}
inline void GroupInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.GroupInfo.title)
}
#if LANG_CXX11
inline void GroupInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.GroupInfo.title)
}
#endif
inline void GroupInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.GroupInfo.title)
}
inline void GroupInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.GroupInfo.title)
}
inline ::std::string* GroupInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.GroupInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_title() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.GroupInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.GroupInfo.title)
}

// optional string link = 3;
inline bool GroupInfo::has_link() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupInfo::set_has_link() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupInfo::clear_has_link() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupInfo::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
inline const ::std::string& GroupInfo::link() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.GroupInfo.link)
  return link_.GetNoArena();
}
inline void GroupInfo::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.GroupInfo.link)
}
#if LANG_CXX11
inline void GroupInfo::set_link(::std::string&& value) {
  set_has_link();
  link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ru.mail.go.recommender.bki.GroupInfo.link)
}
#endif
inline void GroupInfo::set_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.mail.go.recommender.bki.GroupInfo.link)
}
inline void GroupInfo::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.mail.go.recommender.bki.GroupInfo.link)
}
inline ::std::string* GroupInfo::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:ru.mail.go.recommender.bki.GroupInfo.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_link() {
  // @@protoc_insertion_point(field_release:ru.mail.go.recommender.bki.GroupInfo.link)
  clear_has_link();
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:ru.mail.go.recommender.bki.GroupInfo.link)
}

// optional int32 members = 4;
inline bool GroupInfo::has_members() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupInfo::set_has_members() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupInfo::clear_has_members() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupInfo::clear_members() {
  members_ = 0;
  clear_has_members();
}
inline ::google::protobuf::int32 GroupInfo::members() const {
  // @@protoc_insertion_point(field_get:ru.mail.go.recommender.bki.GroupInfo.members)
  return members_;
}
inline void GroupInfo::set_members(::google::protobuf::int32 value) {
  set_has_members();
  members_ = value;
  // @@protoc_insertion_point(field_set:ru.mail.go.recommender.bki.GroupInfo.members)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace bki
}  // namespace recommender
}  // namespace go
}  // namespace mail
}  // namespace ru

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::mail::go::recommender::bki::ProfileID_Provider> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::recommender::bki::ProfileID_Provider>() {
  return ::ru::mail::go::recommender::bki::ProfileID_Provider_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::recommender::bki::Profile_Sex> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::recommender::bki::Profile_Sex>() {
  return ::ru::mail::go::recommender::bki::Profile_Sex_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::recommender::bki::Profile_Platform> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::recommender::bki::Profile_Platform>() {
  return ::ru::mail::go::recommender::bki::Profile_Platform_descriptor();
}
template <> struct is_proto_enum< ::ru::mail::go::recommender::bki::Profile_MaritalStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::mail::go::recommender::bki::Profile_MaritalStatus>() {
  return ::ru::mail::go::recommender::bki::Profile_MaritalStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bki_2eproto__INCLUDED
