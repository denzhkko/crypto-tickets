// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache_entry_proto.proto

#ifndef PROTOBUF_cache_5fentry_5fproto_2eproto__INCLUDED
#define PROTOBUF_cache_5fentry_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace smanager {
class CacheEntryProto;
class CacheEntryProtoDefaultTypeInternal;
extern CacheEntryProtoDefaultTypeInternal _CacheEntryProto_default_instance_;
}  // namespace smanager

namespace smanager {

namespace protobuf_cache_5fentry_5fproto_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cache_5fentry_5fproto_2eproto

// ===================================================================

class CacheEntryProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:smanager.CacheEntryProto) */ {
 public:
  CacheEntryProto();
  virtual ~CacheEntryProto();

  CacheEntryProto(const CacheEntryProto& from);

  inline CacheEntryProto& operator=(const CacheEntryProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CacheEntryProto(CacheEntryProto&& from) noexcept
    : CacheEntryProto() {
    *this = ::std::move(from);
  }

  inline CacheEntryProto& operator=(CacheEntryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheEntryProto& default_instance();

  static inline const CacheEntryProto* internal_default_instance() {
    return reinterpret_cast<const CacheEntryProto*>(
               &_CacheEntryProto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CacheEntryProto* other);
  friend void swap(CacheEntryProto& a, CacheEntryProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CacheEntryProto* New() const PROTOBUF_FINAL { return New(NULL); }

  CacheEntryProto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CacheEntryProto& from);
  void MergeFrom(const CacheEntryProto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CacheEntryProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string idx_versions = 17;
  int idx_versions_size() const;
  void clear_idx_versions();
  static const int kIdxVersionsFieldNumber = 17;
  const ::std::string& idx_versions(int index) const;
  ::std::string* mutable_idx_versions(int index);
  void set_idx_versions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_idx_versions(int index, ::std::string&& value);
  #endif
  void set_idx_versions(int index, const char* value);
  void set_idx_versions(int index, const char* value, size_t size);
  ::std::string* add_idx_versions();
  void add_idx_versions(const ::std::string& value);
  #if LANG_CXX11
  void add_idx_versions(::std::string&& value);
  #endif
  void add_idx_versions(const char* value);
  void add_idx_versions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& idx_versions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_idx_versions();

  // required bytes result = 15;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 15;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // required double quality = 1;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 1;
  double quality() const;
  void set_quality(double value);

  // optional uint32 set_time = 2;
  bool has_set_time() const;
  void clear_set_time();
  static const int kSetTimeFieldNumber = 2;
  ::google::protobuf::uint32 set_time() const;
  void set_set_time(::google::protobuf::uint32 value);

  // optional uint32 expiration = 3;
  bool has_expiration() const;
  void clear_expiration();
  static const int kExpirationFieldNumber = 3;
  ::google::protobuf::uint32 expiration() const;
  void set_expiration(::google::protobuf::uint32 value);

  // optional uint64 bad_url_hash = 4;
  bool has_bad_url_hash() const;
  void clear_bad_url_hash();
  static const int kBadUrlHashFieldNumber = 4;
  ::google::protobuf::uint64 bad_url_hash() const;
  void set_bad_url_hash(::google::protobuf::uint64 value);

  // optional uint32 banned_urls = 5;
  bool has_banned_urls() const;
  void clear_banned_urls();
  static const int kBannedUrlsFieldNumber = 5;
  ::google::protobuf::uint32 banned_urls() const;
  void set_banned_urls(::google::protobuf::uint32 value);

  // optional bool ban_all = 16;
  bool has_ban_all() const;
  void clear_ban_all();
  static const int kBanAllFieldNumber = 16;
  bool ban_all() const;
  void set_ban_all(bool value);

  // @@protoc_insertion_point(class_scope:smanager.CacheEntryProto)
 private:
  void set_has_quality();
  void clear_has_quality();
  void set_has_set_time();
  void clear_has_set_time();
  void set_has_expiration();
  void clear_has_expiration();
  void set_has_bad_url_hash();
  void clear_has_bad_url_hash();
  void set_has_banned_urls();
  void clear_has_banned_urls();
  void set_has_result();
  void clear_has_result();
  void set_has_ban_all();
  void clear_has_ban_all();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> idx_versions_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  double quality_;
  ::google::protobuf::uint32 set_time_;
  ::google::protobuf::uint32 expiration_;
  ::google::protobuf::uint64 bad_url_hash_;
  ::google::protobuf::uint32 banned_urls_;
  bool ban_all_;
  friend struct protobuf_cache_5fentry_5fproto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CacheEntryProto

// required double quality = 1;
inline bool CacheEntryProto::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheEntryProto::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheEntryProto::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheEntryProto::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline double CacheEntryProto::quality() const {
  // @@protoc_insertion_point(field_get:smanager.CacheEntryProto.quality)
  return quality_;
}
inline void CacheEntryProto::set_quality(double value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:smanager.CacheEntryProto.quality)
}

// optional uint32 set_time = 2;
inline bool CacheEntryProto::has_set_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheEntryProto::set_has_set_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheEntryProto::clear_has_set_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheEntryProto::clear_set_time() {
  set_time_ = 0u;
  clear_has_set_time();
}
inline ::google::protobuf::uint32 CacheEntryProto::set_time() const {
  // @@protoc_insertion_point(field_get:smanager.CacheEntryProto.set_time)
  return set_time_;
}
inline void CacheEntryProto::set_set_time(::google::protobuf::uint32 value) {
  set_has_set_time();
  set_time_ = value;
  // @@protoc_insertion_point(field_set:smanager.CacheEntryProto.set_time)
}

// optional uint32 expiration = 3;
inline bool CacheEntryProto::has_expiration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheEntryProto::set_has_expiration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheEntryProto::clear_has_expiration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheEntryProto::clear_expiration() {
  expiration_ = 0u;
  clear_has_expiration();
}
inline ::google::protobuf::uint32 CacheEntryProto::expiration() const {
  // @@protoc_insertion_point(field_get:smanager.CacheEntryProto.expiration)
  return expiration_;
}
inline void CacheEntryProto::set_expiration(::google::protobuf::uint32 value) {
  set_has_expiration();
  expiration_ = value;
  // @@protoc_insertion_point(field_set:smanager.CacheEntryProto.expiration)
}

// optional uint64 bad_url_hash = 4;
inline bool CacheEntryProto::has_bad_url_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CacheEntryProto::set_has_bad_url_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CacheEntryProto::clear_has_bad_url_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CacheEntryProto::clear_bad_url_hash() {
  bad_url_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_bad_url_hash();
}
inline ::google::protobuf::uint64 CacheEntryProto::bad_url_hash() const {
  // @@protoc_insertion_point(field_get:smanager.CacheEntryProto.bad_url_hash)
  return bad_url_hash_;
}
inline void CacheEntryProto::set_bad_url_hash(::google::protobuf::uint64 value) {
  set_has_bad_url_hash();
  bad_url_hash_ = value;
  // @@protoc_insertion_point(field_set:smanager.CacheEntryProto.bad_url_hash)
}

// optional uint32 banned_urls = 5;
inline bool CacheEntryProto::has_banned_urls() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CacheEntryProto::set_has_banned_urls() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CacheEntryProto::clear_has_banned_urls() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CacheEntryProto::clear_banned_urls() {
  banned_urls_ = 0u;
  clear_has_banned_urls();
}
inline ::google::protobuf::uint32 CacheEntryProto::banned_urls() const {
  // @@protoc_insertion_point(field_get:smanager.CacheEntryProto.banned_urls)
  return banned_urls_;
}
inline void CacheEntryProto::set_banned_urls(::google::protobuf::uint32 value) {
  set_has_banned_urls();
  banned_urls_ = value;
  // @@protoc_insertion_point(field_set:smanager.CacheEntryProto.banned_urls)
}

// required bytes result = 15;
inline bool CacheEntryProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheEntryProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheEntryProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheEntryProto::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result();
}
inline const ::std::string& CacheEntryProto::result() const {
  // @@protoc_insertion_point(field_get:smanager.CacheEntryProto.result)
  return result_.GetNoArena();
}
inline void CacheEntryProto::set_result(const ::std::string& value) {
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:smanager.CacheEntryProto.result)
}
#if LANG_CXX11
inline void CacheEntryProto::set_result(::std::string&& value) {
  set_has_result();
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:smanager.CacheEntryProto.result)
}
#endif
inline void CacheEntryProto::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:smanager.CacheEntryProto.result)
}
inline void CacheEntryProto::set_result(const void* value, size_t size) {
  set_has_result();
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:smanager.CacheEntryProto.result)
}
inline ::std::string* CacheEntryProto::mutable_result() {
  set_has_result();
  // @@protoc_insertion_point(field_mutable:smanager.CacheEntryProto.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CacheEntryProto::release_result() {
  // @@protoc_insertion_point(field_release:smanager.CacheEntryProto.result)
  clear_has_result();
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CacheEntryProto::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    set_has_result();
  } else {
    clear_has_result();
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:smanager.CacheEntryProto.result)
}

// optional bool ban_all = 16;
inline bool CacheEntryProto::has_ban_all() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CacheEntryProto::set_has_ban_all() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CacheEntryProto::clear_has_ban_all() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CacheEntryProto::clear_ban_all() {
  ban_all_ = false;
  clear_has_ban_all();
}
inline bool CacheEntryProto::ban_all() const {
  // @@protoc_insertion_point(field_get:smanager.CacheEntryProto.ban_all)
  return ban_all_;
}
inline void CacheEntryProto::set_ban_all(bool value) {
  set_has_ban_all();
  ban_all_ = value;
  // @@protoc_insertion_point(field_set:smanager.CacheEntryProto.ban_all)
}

// repeated string idx_versions = 17;
inline int CacheEntryProto::idx_versions_size() const {
  return idx_versions_.size();
}
inline void CacheEntryProto::clear_idx_versions() {
  idx_versions_.Clear();
}
inline const ::std::string& CacheEntryProto::idx_versions(int index) const {
  // @@protoc_insertion_point(field_get:smanager.CacheEntryProto.idx_versions)
  return idx_versions_.Get(index);
}
inline ::std::string* CacheEntryProto::mutable_idx_versions(int index) {
  // @@protoc_insertion_point(field_mutable:smanager.CacheEntryProto.idx_versions)
  return idx_versions_.Mutable(index);
}
inline void CacheEntryProto::set_idx_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:smanager.CacheEntryProto.idx_versions)
  idx_versions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CacheEntryProto::set_idx_versions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:smanager.CacheEntryProto.idx_versions)
  idx_versions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CacheEntryProto::set_idx_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  idx_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:smanager.CacheEntryProto.idx_versions)
}
inline void CacheEntryProto::set_idx_versions(int index, const char* value, size_t size) {
  idx_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:smanager.CacheEntryProto.idx_versions)
}
inline ::std::string* CacheEntryProto::add_idx_versions() {
  // @@protoc_insertion_point(field_add_mutable:smanager.CacheEntryProto.idx_versions)
  return idx_versions_.Add();
}
inline void CacheEntryProto::add_idx_versions(const ::std::string& value) {
  idx_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:smanager.CacheEntryProto.idx_versions)
}
#if LANG_CXX11
inline void CacheEntryProto::add_idx_versions(::std::string&& value) {
  idx_versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:smanager.CacheEntryProto.idx_versions)
}
#endif
inline void CacheEntryProto::add_idx_versions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  idx_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:smanager.CacheEntryProto.idx_versions)
}
inline void CacheEntryProto::add_idx_versions(const char* value, size_t size) {
  idx_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:smanager.CacheEntryProto.idx_versions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CacheEntryProto::idx_versions() const {
  // @@protoc_insertion_point(field_list:smanager.CacheEntryProto.idx_versions)
  return idx_versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CacheEntryProto::mutable_idx_versions() {
  // @@protoc_insertion_point(field_mutable_list:smanager.CacheEntryProto.idx_versions)
  return &idx_versions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace smanager

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cache_5fentry_5fproto_2eproto__INCLUDED
