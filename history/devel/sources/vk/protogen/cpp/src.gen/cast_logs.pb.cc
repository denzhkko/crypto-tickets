// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_logs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cast_logs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace metrics {
class CastLogsProto_CastDeviceInfo_HardwareInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastDeviceInfo_HardwareInfo>
     _instance;
} _CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_;
class CastLogsProto_CastDeviceInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastDeviceInfo>
     _instance;
} _CastLogsProto_CastDeviceInfo_default_instance_;
class CastLogsProto_CastConnectionInfo_SenderInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastConnectionInfo_SenderInfo>
     _instance;
} _CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_;
class CastLogsProto_CastConnectionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastConnectionInfo>
     _instance;
} _CastLogsProto_CastConnectionInfo_default_instance_;
class CastLogsProto_CastEventProto_MetadataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastEventProto_Metadata>
     _instance;
} _CastLogsProto_CastEventProto_Metadata_default_instance_;
class CastLogsProto_CastEventProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastEventProto>
     _instance;
} _CastLogsProto_CastEventProto_default_instance_;
class CastLogsProto_CastDeviceMutableInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto_CastDeviceMutableInfo>
     _instance;
} _CastLogsProto_CastDeviceMutableInfo_default_instance_;
class CastLogsProtoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CastLogsProto>
     _instance;
} _CastLogsProto_default_instance_;

namespace protobuf_cast_5flogs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, mic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, nand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, mfg_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, build_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, emmc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, amp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo_HardwareInfo, board_name_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo, hardware_revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo, manufacturer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceInfo, hardware_info_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, sender_device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, sdk_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, chrome_browser_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, platform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, system_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, transport_connection_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo_SenderInfo, sender_local_ip_fragment_),
  4,
  5,
  0,
  1,
  6,
  2,
  7,
  3,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo, transport_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo, virtual_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastConnectionInfo, sender_info_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto_Metadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto_Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto_Metadata, name_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto_Metadata, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, name_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, time_msec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, remote_app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, application_session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, cast_receiver_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, cast_mpl_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, transport_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, virtual_connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, group_uuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, conversation_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, aogh_request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, aogh_local_device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, aogh_agent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, feature_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, timezone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, ui_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, selinux_audit_detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, event_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, duo_core_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, hotword_model_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, launch_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastEventProto, runtime_type_),
  8,
  9,
  11,
  20,
  10,
  13,
  15,
  12,
  16,
  14,
  18,
  0,
  17,
  1,
  2,
  19,
  5,
  ~0u,
  ~0u,
  3,
  4,
  6,
  ~0u,
  22,
  7,
  21,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, last_reboot_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, system_build_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, backdrop_app_device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, release_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, netif_ip_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, ip_dual_stack_supported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, timezone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, latest_ui_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, google_wifi_station_shmac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, installed_manifest_platform_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, installed_manifest_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto_CastDeviceMutableInfo, system_bundle_version_),
  7,
  6,
  0,
  8,
  9,
  10,
  1,
  2,
  3,
  4,
  11,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto, cast_device_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto, cast_connection_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto, cast_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto, virtual_release_track_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto, cast_device_mutable_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto, receiver_metrics_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CastLogsProto, ephemeral_id_),
  0,
  ~0u,
  ~0u,
  4,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(CastLogsProto_CastDeviceInfo_HardwareInfo)},
  { 27, 38, sizeof(CastLogsProto_CastDeviceInfo)},
  { 44, 58, sizeof(CastLogsProto_CastConnectionInfo_SenderInfo)},
  { 67, 75, sizeof(CastLogsProto_CastConnectionInfo)},
  { 78, 85, sizeof(CastLogsProto_CastEventProto_Metadata)},
  { 87, 119, sizeof(CastLogsProto_CastEventProto)},
  { 146, 163, sizeof(CastLogsProto_CastDeviceMutableInfo)},
  { 175, 187, sizeof(CastLogsProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CastLogsProto_CastDeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CastLogsProto_CastConnectionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CastLogsProto_CastEventProto_Metadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CastLogsProto_CastEventProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CastLogsProto_CastDeviceMutableInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CastLogsProto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cast_logs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_);_CastLogsProto_CastDeviceInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CastLogsProto_CastDeviceInfo_default_instance_);_CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_);_CastLogsProto_CastConnectionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CastLogsProto_CastConnectionInfo_default_instance_);_CastLogsProto_CastEventProto_Metadata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CastLogsProto_CastEventProto_Metadata_default_instance_);_CastLogsProto_CastEventProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CastLogsProto_CastEventProto_default_instance_);_CastLogsProto_CastDeviceMutableInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CastLogsProto_CastDeviceMutableInfo_default_instance_);_CastLogsProto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CastLogsProto_default_instance_);_CastLogsProto_CastDeviceInfo_default_instance_._instance.get_mutable()->hardware_info_ = const_cast< ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo*>(
      ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::internal_default_instance());
  _CastLogsProto_CastConnectionInfo_default_instance_._instance.get_mutable()->sender_info_ = const_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo*>(
      ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::internal_default_instance());
  _CastLogsProto_default_instance_._instance.get_mutable()->cast_device_info_ = const_cast< ::metrics::CastLogsProto_CastDeviceInfo*>(
      ::metrics::CastLogsProto_CastDeviceInfo::internal_default_instance());
  _CastLogsProto_default_instance_._instance.get_mutable()->cast_device_mutable_info_ = const_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo*>(
      ::metrics::CastLogsProto_CastDeviceMutableInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017cast_logs.proto\022\007metrics\"\373!\n\rCastLogsP"
      "roto\022\?\n\020cast_device_info\030\001 \001(\0132%.metrics"
      ".CastLogsProto.CastDeviceInfo\022G\n\024cast_co"
      "nnection_info\030\002 \003(\0132).metrics.CastLogsPr"
      "oto.CastConnectionInfo\0229\n\ncast_event\030\003 \003"
      "(\0132%.metrics.CastLogsProto.CastEventProt"
      "o\022\035\n\025virtual_release_track\030\004 \001(\007\022N\n\030cast"
      "_device_mutable_info\030\005 \001(\0132,.metrics.Cas"
      "tLogsProto.CastDeviceMutableInfo\022\033\n\023rece"
      "iver_metrics_id\030\006 \001(\006\022\024\n\014ephemeral_id\030\007 "
      "\001(\004\032\250\006\n\016CastDeviceInfo\022C\n\004type\030\001 \001(\01625.m"
      "etrics.CastLogsProto.CastDeviceInfo.Cast"
      "ProductType\022\031\n\021hardware_revision\030\002 \001(\t\022\024"
      "\n\014manufacturer\030\003 \001(\t\022\r\n\005model\030\004 \001(\t\022\025\n\rs"
      "erial_number\030\005 \001(\t\022I\n\rhardware_info\030\006 \001("
      "\01322.metrics.CastLogsProto.CastDeviceInfo"
      ".HardwareInfo\032\276\001\n\014HardwareInfo\022\r\n\005color\030"
      "\001 \001(\t\022\013\n\003mic\030\002 \001(\t\022\016\n\006memory\030\003 \001(\t\022\014\n\004na"
      "nd\030\004 \001(\t\022\020\n\010mfg_date\030\005 \001(\t\022\022\n\nbuild_name"
      "\030\006 \001(\t\022\016\n\006config\030\007 \001(\t\022\014\n\004emmc\030\010 \001(\t\022\017\n\007"
      "display\030\t \001(\t\022\013\n\003amp\030\n \001(\t\022\022\n\nboard_name"
      "\030\013 \001(\t\"\355\002\n\017CastProductType\022\035\n\031CAST_PRODU"
      "CT_TYPE_UNKNOWN\020\000\022 \n\034CAST_PRODUCT_TYPE_C"
      "HROMECAST\020\001\022\030\n\024CAST_PRODUCT_TYPE_TV\020\002\022\033\n"
      "\027CAST_PRODUCT_TYPE_AUDIO\020\003\022 \n\034CAST_PRODU"
      "CT_TYPE_ANDROID_TV\020\004\022\037\n\033CAST_PRODUCT_TYP"
      "E_ASSISTANT\020\005\022$\n CAST_PRODUCT_TYPE_ANDRO"
      "ID_THINGS\020\006\022\037\n\033CAST_PRODUCT_TYPE_CHROME_"
      "OS\020\007\022 \n\034CAST_PRODUCT_TYPE_FUCHSIA_OS\020\010\022\032"
      "\n\026CAST_PRODUCT_TYPE_LITE\020\t\022\032\n\026CAST_PRODU"
      "CT_TYPE_CORE\020\n\032\304\007\n\022CastConnectionInfo\022\037\n"
      "\027transport_connection_id\030\001 \001(\007\022\035\n\025virtua"
      "l_connection_id\030\002 \001(\007\022I\n\013sender_info\030\003 \001"
      "(\01324.metrics.CastLogsProto.CastConnectio"
      "nInfo.SenderInfo\032\242\006\n\nSenderInfo\022\030\n\020sende"
      "r_device_id\030\001 \001(\006\022N\n\010sdk_type\030\002 \001(\0162<.me"
      "trics.CastLogsProto.CastConnectionInfo.S"
      "enderInfo.SDKType\022\017\n\007version\030\003 \001(\t\022\036\n\026ch"
      "rome_browser_version\030\004 \001(\t\022O\n\010platform\030\005"
      " \001(\0162=.metrics.CastLogsProto.CastConnect"
      "ionInfo.SenderInfo.Platform\022\026\n\016system_ve"
      "rsion\030\006 \001(\t\022f\n\031transport_connection_type"
      "\030\007 \001(\0162C.metrics.CastLogsProto.CastConne"
      "ctionInfo.SenderInfo.ConnectionType\022\r\n\005m"
      "odel\030\010 \001(\t\022 \n\030sender_local_ip_fragment\030\t"
      " \001(\005\"D\n\007SDKType\022\017\n\013SDK_UNKNOWN\020\000\022\016\n\nSDK_"
      "NATIVE\020\001\022\030\n\024SDK_CHROME_EXTENSION\020\002\"\254\001\n\010P"
      "latform\022\022\n\016PLATFORM_OTHER\020\000\022\024\n\020PLATFORM_"
      "ANDROID\020\001\022\020\n\014PLATFORM_IOS\020\002\022\024\n\020PLATFORM_"
      "WINDOWS\020\003\022\020\n\014PLATFORM_OSX\020\004\022\025\n\021PLATFORM_"
      "CHROMEOS\020\005\022\022\n\016PLATFORM_LINUX\020\006\022\021\n\rPLATFO"
      "RM_CAST\020\007\"\201\001\n\016ConnectionType\022\033\n\027CONNECTI"
      "ON_TYPE_UNKNOWN\020\000\022\031\n\025CONNECTION_TYPE_LOC"
      "AL\020\001\022\031\n\025CONNECTION_TYPE_RELAY\020\002\022\034\n\030CONNE"
      "CTION_TYPE_INTERNAL\020\003\032\251\010\n\016CastEventProto"
      "\022\021\n\tname_hash\030\001 \001(\006\022\021\n\ttime_msec\030\002 \001(\003\022\016"
      "\n\006app_id\030\003 \001(\007\022\025\n\rremote_app_id\030\023 \001(\007\022\036\n"
      "\026application_session_id\030\004 \001(\006\022\035\n\025cast_re"
      "ceiver_version\030\005 \001(\006\022\030\n\020cast_mpl_version"
      "\030\t \001(\006\022\037\n\027transport_connection_id\030\006 \001(\007\022"
      "\035\n\025virtual_connection_id\030\007 \001(\007\022\r\n\005value\030"
      "\010 \001(\003\022\022\n\ngroup_uuid\030\n \001(\006\022\030\n\020conversatio"
      "n_key\030\013 \001(\t\022\022\n\nrequest_id\030\014 \001(\007\022\020\n\010event"
      "_id\030\r \001(\t\022\027\n\017aogh_request_id\030\020 \001(\t\022\034\n\024ao"
      "gh_local_device_id\030\022 \001(\003\022\025\n\raogh_agent_i"
      "d\030\025 \001(\t\022@\n\010metadata\030\016 \003(\0132..metrics.Cast"
      "LogsProto.CastEventProto.Metadata\022\026\n\016fea"
      "ture_vector\030\017 \003(\002\022\023\n\013timezone_id\030\021 \001(\t\022\022"
      "\n\nui_version\030\024 \001(\t\022\034\n\024selinux_audit_deta"
      "il\030\026 \001(\t\022\025\n\revent_id_list\030\027 \003(\t\022\030\n\020duo_c"
      "ore_version\030\030 \001(\006\022\030\n\020hotword_model_id\030\031 "
      "\001(\t\022E\n\013launch_from\030\032 \001(\01620.metrics.CastL"
      "ogsProto.CastEventProto.LaunchFrom\022G\n\014ru"
      "ntime_type\030\033 \001(\01621.metrics.CastLogsProto"
      ".CastEventProto.RuntimeType\032,\n\010Metadata\022"
      "\021\n\tname_hash\030\001 \001(\006\022\r\n\005value\030\002 \001(\003\"]\n\nLau"
      "nchFrom\022\020\n\014FROM_UNKNOWN\020\000\022\016\n\nFROM_LOCAL\020"
      "\001\022\r\n\tFROM_DIAL\020\002\022\020\n\014FROM_CAST_V2\020\003\022\014\n\010FR"
      "OM_CCS\020\004\"w\n\013RuntimeType\022\030\n\024RUNTIME_TYPE_"
      "UNKNOWN\020\000\022\031\n\025RUNTIME_TYPE_CAST_WEB\020\001\022\032\n\026"
      "RUNTIME_TYPE_CAST_LITE\020\002\022\027\n\023RUNTIME_TYPE"
      "_NATIVE\020\003\032\344\010\n\025CastDeviceMutableInfo\022Q\n\020l"
      "ast_reboot_type\030\001 \001(\01627.metrics.CastLogs"
      "Proto.CastDeviceMutableInfo.RebootType\022\033"
      "\n\023system_build_number\030\002 \001(\006\022\036\n\026backdrop_"
      "app_device_id\030\003 \001(\t\022\027\n\017release_version\030\004"
      " \001(\007\022U\n\020netif_ip_version\030\005 \001(\0162;.metrics"
      ".CastLogsProto.CastDeviceMutableInfo.Net"
      "ifIPVersion\022\037\n\027ip_dual_stack_supported\030\006"
      " \001(\010\022\023\n\013timezone_id\030\007 \001(\t\022\031\n\021latest_ui_v"
      "ersion\030\010 \001(\t\022!\n\031google_wifi_station_shma"
      "c\030\t \001(\t\022+\n#installed_manifest_platform_v"
      "ersion\030\n \001(\t\022\"\n\032installed_manifest_versi"
      "on\030\013 \001(\r\022\035\n\025system_bundle_version\030\014 \001(\t\""
      "\233\004\n\nRebootType\022\027\n\023REBOOT_TYPE_UNKNOWN\020\000\022"
      "\026\n\022REBOOT_TYPE_FORCED\020\001\022\023\n\017REBOOT_TYPE_A"
      "PI\020\002\022\027\n\023REBOOT_TYPE_NIGHTLY\020\003\022\023\n\017REBOOT_"
      "TYPE_OTA\020\004\022\030\n\024REBOOT_TYPE_WATCHDOG\020\005\022\037\n\033"
      "REBOOT_TYPE_PROCESS_MANAGER\020\006\022\036\n\032REBOOT_"
      "TYPE_CRASH_UPLOADER\020\007\022\023\n\017REBOOT_TYPE_FDR"
      "\020\010\022\033\n\027REBOOT_TYPE_HW_WATCHDOG\020\t\022\030\n\024REBOO"
      "T_TYPE_SW_OTHER\020\n\022\030\n\024REBOOT_TYPE_OVERHEA"
      "T\020\013\022#\n\037REBOOT_TYPE_REGENERATE_CLOUD_ID\020\014"
      "\022\034\n\030REBOOT_TYPE_REPEATED_OOM\020\r\022%\n!REBOOT"
      "_TYPE_UTILITY_PROCESS_CRASH\020\016\022 \n\034REBOOT_"
      "TYPE_GRACEFUL_RESTART\020\017\022\"\n\036REBOOT_TYPE_U"
      "NGRACEFUL_RESTART\020\020\022\025\n\021MULTI_SERVICE_BUG"
      "\020\021\022\021\n\rPOWER_MANAGER\020\022\"I\n\016NetifIPVersion\022"
      "\016\n\nIP_UNKNOWN\020\000\022\t\n\005IP_V4\020\001\022\t\n\005IP_V6\020\002\022\021\n"
      "\rIP_DUAL_STACK\020\003B1\n\037org.chromium.compone"
      "nts.metricsB\016CastLogsProtos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4427);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cast_logs.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cast_5flogs_2eproto

const ::google::protobuf::EnumDescriptor* CastLogsProto_CastDeviceInfo_CastProductType_descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_enum_descriptors[0];
}
bool CastLogsProto_CastDeviceInfo_CastProductType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_UNKNOWN;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_CHROMECAST;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_TV;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_AUDIO;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ANDROID_TV;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ASSISTANT;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_ANDROID_THINGS;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_CHROME_OS;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_FUCHSIA_OS;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_LITE;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CAST_PRODUCT_TYPE_CORE;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CastProductType_MIN;
const CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::CastProductType_MAX;
const int CastLogsProto_CastDeviceInfo::CastProductType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_enum_descriptors[1];
}
bool CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_UNKNOWN;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_NATIVE;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDK_CHROME_EXTENSION;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_MIN;
const CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_MAX;
const int CastLogsProto_CastConnectionInfo_SenderInfo::SDKType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CastLogsProto_CastConnectionInfo_SenderInfo_Platform_descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_enum_descriptors[2];
}
bool CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_OTHER;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_ANDROID;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_IOS;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_WINDOWS;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_OSX;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_CHROMEOS;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_LINUX;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::PLATFORM_CAST;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::Platform_MIN;
const CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::Platform_MAX;
const int CastLogsProto_CastConnectionInfo_SenderInfo::Platform_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_enum_descriptors[3];
}
bool CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_UNKNOWN;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_LOCAL;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_RELAY;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::CONNECTION_TYPE_INTERNAL;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_MIN;
const CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_MAX;
const int CastLogsProto_CastConnectionInfo_SenderInfo::ConnectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CastLogsProto_CastEventProto_LaunchFrom_descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_enum_descriptors[4];
}
bool CastLogsProto_CastEventProto_LaunchFrom_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::FROM_UNKNOWN;
const CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::FROM_LOCAL;
const CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::FROM_DIAL;
const CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::FROM_CAST_V2;
const CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::FROM_CCS;
const CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::LaunchFrom_MIN;
const CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::LaunchFrom_MAX;
const int CastLogsProto_CastEventProto::LaunchFrom_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CastLogsProto_CastEventProto_RuntimeType_descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_enum_descriptors[5];
}
bool CastLogsProto_CastEventProto_RuntimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RUNTIME_TYPE_UNKNOWN;
const CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RUNTIME_TYPE_CAST_WEB;
const CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RUNTIME_TYPE_CAST_LITE;
const CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RUNTIME_TYPE_NATIVE;
const CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RuntimeType_MIN;
const CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::RuntimeType_MAX;
const int CastLogsProto_CastEventProto::RuntimeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CastLogsProto_CastDeviceMutableInfo_RebootType_descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_enum_descriptors[6];
}
bool CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_UNKNOWN;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_FORCED;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_API;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_NIGHTLY;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_OTA;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_WATCHDOG;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_PROCESS_MANAGER;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_CRASH_UPLOADER;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_FDR;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_HW_WATCHDOG;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_SW_OTHER;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_OVERHEAT;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_REGENERATE_CLOUD_ID;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_REPEATED_OOM;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_UTILITY_PROCESS_CRASH;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_GRACEFUL_RESTART;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::REBOOT_TYPE_UNGRACEFUL_RESTART;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::MULTI_SERVICE_BUG;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::POWER_MANAGER;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::RebootType_MIN;
const CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::RebootType_MAX;
const int CastLogsProto_CastDeviceMutableInfo::RebootType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_enum_descriptors[7];
}
bool CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_UNKNOWN;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_V4;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_V6;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::IP_DUAL_STACK;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_MIN;
const CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_MAX;
const int CastLogsProto_CastDeviceMutableInfo::NetifIPVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kColorFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kMicFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kMemoryFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kNandFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kMfgDateFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kBuildNameFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kConfigFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kEmmcFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kDisplayFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kAmpFieldNumber;
const int CastLogsProto_CastDeviceInfo_HardwareInfo::kBoardNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastDeviceInfo_HardwareInfo::CastLogsProto_CastDeviceInfo_HardwareInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}
CastLogsProto_CastDeviceInfo_HardwareInfo::CastLogsProto_CastDeviceInfo_HardwareInfo(const CastLogsProto_CastDeviceInfo_HardwareInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  mic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mic()) {
    mic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mic_);
  }
  memory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_memory()) {
    memory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memory_);
  }
  nand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nand()) {
    nand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nand_);
  }
  mfg_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mfg_date()) {
    mfg_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mfg_date_);
  }
  build_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_name()) {
    build_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_name_);
  }
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_config()) {
    config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
  emmc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_emmc()) {
    emmc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emmc_);
  }
  display_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_display()) {
    display_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_);
  }
  amp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_amp()) {
    amp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_);
  }
  board_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_board_name()) {
    board_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.board_name_);
  }
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SharedCtor() {
  _cached_size_ = 0;
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mfg_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emmc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  board_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CastLogsProto_CastDeviceInfo_HardwareInfo::~CastLogsProto_CastDeviceInfo_HardwareInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  SharedDtor();
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SharedDtor() {
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mfg_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emmc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  board_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastLogsProto_CastDeviceInfo_HardwareInfo::descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CastLogsProto_CastDeviceInfo_HardwareInfo& CastLogsProto_CastDeviceInfo_HardwareInfo::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastDeviceInfo_HardwareInfo* CastLogsProto_CastDeviceInfo_HardwareInfo::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastDeviceInfo_HardwareInfo* n = new CastLogsProto_CastDeviceInfo_HardwareInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!color_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*color_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mic_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mic_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!memory_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*memory_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!nand_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nand_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!mfg_date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mfg_date_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!build_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*build_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!config_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*config_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!emmc_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*emmc_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(!display_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*display_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(!amp_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*amp_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(!board_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*board_name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastDeviceInfo_HardwareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), static_cast<int>(this->color().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mic().data(), static_cast<int>(this->mic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string memory = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->memory().data(), static_cast<int>(this->memory().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nand = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nand().data(), static_cast<int>(this->nand().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mfg_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mfg_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mfg_date().data(), static_cast<int>(this->mfg_date().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string build_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->build_name().data(), static_cast<int>(this->build_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config().data(), static_cast<int>(this->config().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string emmc = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emmc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->emmc().data(), static_cast<int>(this->emmc().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display().data(), static_cast<int>(this->display().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string amp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->amp().data(), static_cast<int>(this->amp().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string board_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_board_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->board_name().data(), static_cast<int>(this->board_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->color(), output);
  }

  // optional string mic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mic().data(), static_cast<int>(this->mic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mic(), output);
  }

  // optional string memory = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memory().data(), static_cast<int>(this->memory().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->memory(), output);
  }

  // optional string nand = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nand().data(), static_cast<int>(this->nand().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nand(), output);
  }

  // optional string mfg_date = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mfg_date().data(), static_cast<int>(this->mfg_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mfg_date(), output);
  }

  // optional string build_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->build_name().data(), static_cast<int>(this->build_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->build_name(), output);
  }

  // optional string config = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config().data(), static_cast<int>(this->config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->config(), output);
  }

  // optional string emmc = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emmc().data(), static_cast<int>(this->emmc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->emmc(), output);
  }

  // optional string display = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display().data(), static_cast<int>(this->display().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->display(), output);
  }

  // optional string amp = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->amp().data(), static_cast<int>(this->amp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->amp(), output);
  }

  // optional string board_name = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->board_name().data(), static_cast<int>(this->board_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->board_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
}

::google::protobuf::uint8* CastLogsProto_CastDeviceInfo_HardwareInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->color(), target);
  }

  // optional string mic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mic().data(), static_cast<int>(this->mic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mic(), target);
  }

  // optional string memory = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memory().data(), static_cast<int>(this->memory().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->memory(), target);
  }

  // optional string nand = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nand().data(), static_cast<int>(this->nand().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nand(), target);
  }

  // optional string mfg_date = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mfg_date().data(), static_cast<int>(this->mfg_date().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mfg_date(), target);
  }

  // optional string build_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->build_name().data(), static_cast<int>(this->build_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->build_name(), target);
  }

  // optional string config = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config().data(), static_cast<int>(this->config().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->config(), target);
  }

  // optional string emmc = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emmc().data(), static_cast<int>(this->emmc().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->emmc(), target);
  }

  // optional string display = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display().data(), static_cast<int>(this->display().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->display(), target);
  }

  // optional string amp = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->amp().data(), static_cast<int>(this->amp().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->amp(), target);
  }

  // optional string board_name = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->board_name().data(), static_cast<int>(this->board_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->board_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  return target;
}

size_t CastLogsProto_CastDeviceInfo_HardwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional string mic = 2;
    if (has_mic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic());
    }

    // optional string memory = 3;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memory());
    }

    // optional string nand = 4;
    if (has_nand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nand());
    }

    // optional string mfg_date = 5;
    if (has_mfg_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mfg_date());
    }

    // optional string build_name = 6;
    if (has_build_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_name());
    }

    // optional string config = 7;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

    // optional string emmc = 8;
    if (has_emmc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emmc());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string display = 9;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display());
    }

    // optional string amp = 10;
    if (has_amp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amp());
    }

    // optional string board_name = 11;
    if (has_board_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->board_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CastLogsProto_CastDeviceInfo_HardwareInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CastLogsProto_CastDeviceInfo_HardwareInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
    MergeFrom(*source);
  }
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::MergeFrom(const CastLogsProto_CastDeviceInfo_HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mic();
      mic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mic_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_memory();
      memory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memory_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_nand();
      nand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nand_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_mfg_date();
      mfg_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mfg_date_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_build_name();
      build_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_name_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_config();
      config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_emmc();
      emmc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emmc_);
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_display();
      display_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_amp();
      amp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amp_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_board_name();
      board_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.board_name_);
    }
  }
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::CopyFrom(const CastLogsProto_CastDeviceInfo_HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceInfo_HardwareInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceInfo_HardwareInfo::Swap(CastLogsProto_CastDeviceInfo_HardwareInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::InternalSwap(CastLogsProto_CastDeviceInfo_HardwareInfo* other) {
  using std::swap;
  color_.Swap(&other->color_);
  mic_.Swap(&other->mic_);
  memory_.Swap(&other->memory_);
  nand_.Swap(&other->nand_);
  mfg_date_.Swap(&other->mfg_date_);
  build_name_.Swap(&other->build_name_);
  config_.Swap(&other->config_);
  emmc_.Swap(&other->emmc_);
  display_.Swap(&other->display_);
  amp_.Swap(&other->amp_);
  board_name_.Swap(&other->board_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastLogsProto_CastDeviceInfo_HardwareInfo::GetMetadata() const {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastDeviceInfo_HardwareInfo

// optional string color = 1;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::color() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
  return color_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_color() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.color)
}

// optional string mic = 2;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_mic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_mic() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_mic() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_mic() {
  mic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mic();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::mic() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
  return mic_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(const ::std::string& value) {
  set_has_mic();
  mic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(::std::string&& value) {
  set_has_mic();
  mic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mic();
  mic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mic(const char* value, size_t size) {
  set_has_mic();
  mic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_mic() {
  set_has_mic();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
  return mic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_mic() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
  clear_has_mic();
  return mic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_mic(::std::string* mic) {
  if (mic != NULL) {
    set_has_mic();
  } else {
    clear_has_mic();
  }
  mic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mic);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mic)
}

// optional string memory = 3;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_memory() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_memory() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_memory() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_memory() {
  memory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_memory();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::memory() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
  return memory_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(const ::std::string& value) {
  set_has_memory();
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(::std::string&& value) {
  set_has_memory();
  memory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_memory();
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_memory(const char* value, size_t size) {
  set_has_memory();
  memory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_memory() {
  set_has_memory();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
  return memory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_memory() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
  clear_has_memory();
  return memory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_memory(::std::string* memory) {
  if (memory != NULL) {
    set_has_memory();
  } else {
    clear_has_memory();
  }
  memory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memory);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.memory)
}

// optional string nand = 4;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_nand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_nand() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_nand() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_nand() {
  nand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nand();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::nand() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
  return nand_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(const ::std::string& value) {
  set_has_nand();
  nand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(::std::string&& value) {
  set_has_nand();
  nand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nand();
  nand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_nand(const char* value, size_t size) {
  set_has_nand();
  nand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_nand() {
  set_has_nand();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
  return nand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_nand() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
  clear_has_nand();
  return nand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_nand(::std::string* nand) {
  if (nand != NULL) {
    set_has_nand();
  } else {
    clear_has_nand();
  }
  nand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nand);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.nand)
}

// optional string mfg_date = 5;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_mfg_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_mfg_date() {
  _has_bits_[0] |= 0x00000010u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_mfg_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_mfg_date() {
  mfg_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mfg_date();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::mfg_date() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date)
  return mfg_date_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mfg_date(const ::std::string& value) {
  set_has_mfg_date();
  mfg_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mfg_date(::std::string&& value) {
  set_has_mfg_date();
  mfg_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mfg_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mfg_date();
  mfg_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_mfg_date(const char* value, size_t size) {
  set_has_mfg_date();
  mfg_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_mfg_date() {
  set_has_mfg_date();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date)
  return mfg_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_mfg_date() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date)
  clear_has_mfg_date();
  return mfg_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_mfg_date(::std::string* mfg_date) {
  if (mfg_date != NULL) {
    set_has_mfg_date();
  } else {
    clear_has_mfg_date();
  }
  mfg_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mfg_date);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.mfg_date)
}

// optional string build_name = 6;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_build_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_build_name() {
  _has_bits_[0] |= 0x00000020u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_build_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_build_name() {
  build_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_build_name();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::build_name() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name)
  return build_name_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_build_name(const ::std::string& value) {
  set_has_build_name();
  build_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_build_name(::std::string&& value) {
  set_has_build_name();
  build_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_build_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_build_name();
  build_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_build_name(const char* value, size_t size) {
  set_has_build_name();
  build_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_build_name() {
  set_has_build_name();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name)
  return build_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_build_name() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name)
  clear_has_build_name();
  return build_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_build_name(::std::string* build_name) {
  if (build_name != NULL) {
    set_has_build_name();
  } else {
    clear_has_build_name();
  }
  build_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.build_name)
}

// optional string config = 7;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_config() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_config() {
  _has_bits_[0] |= 0x00000040u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_config() {
  _has_bits_[0] &= ~0x00000040u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::config() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config)
  return config_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_config(const ::std::string& value) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_config(::std::string&& value) {
  set_has_config();
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_config(const char* value, size_t size) {
  set_has_config();
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_config() {
  set_has_config();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_config() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config)
  clear_has_config();
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    set_has_config();
  } else {
    clear_has_config();
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.config)
}

// optional string emmc = 8;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_emmc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_emmc() {
  _has_bits_[0] |= 0x00000080u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_emmc() {
  _has_bits_[0] &= ~0x00000080u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_emmc() {
  emmc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_emmc();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::emmc() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc)
  return emmc_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_emmc(const ::std::string& value) {
  set_has_emmc();
  emmc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_emmc(::std::string&& value) {
  set_has_emmc();
  emmc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_emmc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_emmc();
  emmc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_emmc(const char* value, size_t size) {
  set_has_emmc();
  emmc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_emmc() {
  set_has_emmc();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc)
  return emmc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_emmc() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc)
  clear_has_emmc();
  return emmc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_emmc(::std::string* emmc) {
  if (emmc != NULL) {
    set_has_emmc();
  } else {
    clear_has_emmc();
  }
  emmc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emmc);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.emmc)
}

// optional string display = 9;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_display() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_display() {
  _has_bits_[0] |= 0x00000100u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_display() {
  _has_bits_[0] &= ~0x00000100u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_display() {
  display_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::display() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display)
  return display_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_display(const ::std::string& value) {
  set_has_display();
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_display(::std::string&& value) {
  set_has_display();
  display_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_display(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_display();
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_display(const char* value, size_t size) {
  set_has_display();
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_display() {
  set_has_display();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display)
  return display_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_display() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display)
  clear_has_display();
  return display_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_display(::std::string* display) {
  if (display != NULL) {
    set_has_display();
  } else {
    clear_has_display();
  }
  display_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.display)
}

// optional string amp = 10;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_amp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_amp() {
  _has_bits_[0] |= 0x00000200u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_amp() {
  _has_bits_[0] &= ~0x00000200u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_amp() {
  amp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_amp();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::amp() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp)
  return amp_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_amp(const ::std::string& value) {
  set_has_amp();
  amp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_amp(::std::string&& value) {
  set_has_amp();
  amp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_amp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_amp();
  amp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_amp(const char* value, size_t size) {
  set_has_amp();
  amp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_amp() {
  set_has_amp();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp)
  return amp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_amp() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp)
  clear_has_amp();
  return amp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_amp(::std::string* amp) {
  if (amp != NULL) {
    set_has_amp();
  } else {
    clear_has_amp();
  }
  amp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amp);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.amp)
}

// optional string board_name = 11;
bool CastLogsProto_CastDeviceInfo_HardwareInfo::has_board_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_has_board_name() {
  _has_bits_[0] |= 0x00000400u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_has_board_name() {
  _has_bits_[0] &= ~0x00000400u;
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::clear_board_name() {
  board_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_board_name();
}
const ::std::string& CastLogsProto_CastDeviceInfo_HardwareInfo::board_name() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name)
  return board_name_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_board_name(const ::std::string& value) {
  set_has_board_name();
  board_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_board_name(::std::string&& value) {
  set_has_board_name();
  board_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name)
}
#endif
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_board_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_board_name();
  board_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name)
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_board_name(const char* value, size_t size) {
  set_has_board_name();
  board_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name)
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::mutable_board_name() {
  set_has_board_name();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name)
  return board_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo_HardwareInfo::release_board_name() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name)
  clear_has_board_name();
  return board_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo_HardwareInfo::set_allocated_board_name(::std::string* board_name) {
  if (board_name != NULL) {
    set_has_board_name();
  } else {
    clear_has_board_name();
  }
  board_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), board_name);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.HardwareInfo.board_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastDeviceInfo::kTypeFieldNumber;
const int CastLogsProto_CastDeviceInfo::kHardwareRevisionFieldNumber;
const int CastLogsProto_CastDeviceInfo::kManufacturerFieldNumber;
const int CastLogsProto_CastDeviceInfo::kModelFieldNumber;
const int CastLogsProto_CastDeviceInfo::kSerialNumberFieldNumber;
const int CastLogsProto_CastDeviceInfo::kHardwareInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastDeviceInfo::CastLogsProto_CastDeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastDeviceInfo)
}
CastLogsProto_CastDeviceInfo::CastLogsProto_CastDeviceInfo(const CastLogsProto_CastDeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hardware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hardware_revision()) {
    hardware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_revision_);
  }
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacturer()) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.has_hardware_info()) {
    hardware_info_ = new ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo(*from.hardware_info_);
  } else {
    hardware_info_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceInfo)
}

void CastLogsProto_CastDeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  hardware_revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hardware_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&hardware_info_)) + sizeof(type_));
}

CastLogsProto_CastDeviceInfo::~CastLogsProto_CastDeviceInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceInfo)
  SharedDtor();
}

void CastLogsProto_CastDeviceInfo::SharedDtor() {
  hardware_revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hardware_info_;
}

void CastLogsProto_CastDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastLogsProto_CastDeviceInfo::descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CastLogsProto_CastDeviceInfo& CastLogsProto_CastDeviceInfo::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastDeviceInfo* CastLogsProto_CastDeviceInfo::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastDeviceInfo* n = new CastLogsProto_CastDeviceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!hardware_revision_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hardware_revision_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!manufacturer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*manufacturer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*model_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(hardware_info_ != NULL);
      hardware_info_->::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastDeviceInfo_CastProductType_IsValid(value)) {
            set_type(static_cast< ::metrics::CastLogsProto_CastDeviceInfo_CastProductType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hardware_revision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardware_revision()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardware_revision().data(), static_cast<int>(this->hardware_revision().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.hardware_revision");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string manufacturer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.manufacturer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), static_cast<int>(this->serial_number().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceInfo.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardware_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastDeviceInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string hardware_revision = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_revision().data(), static_cast<int>(this->hardware_revision().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.hardware_revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hardware_revision(), output);
  }

  // optional string manufacturer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufacturer(), output);
  }

  // optional string model = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model(), output);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_number(), output);
  }

  // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->hardware_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastDeviceInfo)
}

::google::protobuf::uint8* CastLogsProto_CastDeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string hardware_revision = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardware_revision().data(), static_cast<int>(this->hardware_revision().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.hardware_revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hardware_revision(), target);
  }

  // optional string manufacturer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer().data(), static_cast<int>(this->manufacturer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.manufacturer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->manufacturer(), target);
  }

  // optional string model = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->model(), target);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), static_cast<int>(this->serial_number().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceInfo.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serial_number(), target);
  }

  // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->hardware_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastDeviceInfo)
  return target;
}

size_t CastLogsProto_CastDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string hardware_revision = 2;
    if (has_hardware_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardware_revision());
    }

    // optional string manufacturer = 3;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string serial_number = 5;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
    if (has_hardware_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hardware_info_);
    }

    // optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CastLogsProto.CastDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CastLogsProto_CastDeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CastLogsProto_CastDeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CastLogsProto.CastDeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CastLogsProto.CastDeviceInfo)
    MergeFrom(*source);
  }
}

void CastLogsProto_CastDeviceInfo::MergeFrom(const CastLogsProto_CastDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hardware_revision();
      hardware_revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardware_revision_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_manufacturer();
      manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_hardware_info()->::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::MergeFrom(from.hardware_info());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CastLogsProto.CastDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastLogsProto_CastDeviceInfo::CopyFrom(const CastLogsProto_CastDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceInfo::Swap(CastLogsProto_CastDeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastDeviceInfo::InternalSwap(CastLogsProto_CastDeviceInfo* other) {
  using std::swap;
  hardware_revision_.Swap(&other->hardware_revision_);
  manufacturer_.Swap(&other->manufacturer_);
  model_.Swap(&other->model_);
  serial_number_.Swap(&other->serial_number_);
  swap(hardware_info_, other->hardware_info_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastLogsProto_CastDeviceInfo::GetMetadata() const {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastDeviceInfo

// optional .metrics.CastLogsProto.CastDeviceInfo.CastProductType type = 1;
bool CastLogsProto_CastDeviceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CastLogsProto_CastDeviceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CastLogsProto_CastDeviceInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::metrics::CastLogsProto_CastDeviceInfo_CastProductType CastLogsProto_CastDeviceInfo::type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.type)
  return static_cast< ::metrics::CastLogsProto_CastDeviceInfo_CastProductType >(type_);
}
void CastLogsProto_CastDeviceInfo::set_type(::metrics::CastLogsProto_CastDeviceInfo_CastProductType value) {
  assert(::metrics::CastLogsProto_CastDeviceInfo_CastProductType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.type)
}

// optional string hardware_revision = 2;
bool CastLogsProto_CastDeviceInfo::has_hardware_revision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_hardware_revision() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastDeviceInfo::clear_has_hardware_revision() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastDeviceInfo::clear_hardware_revision() {
  hardware_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardware_revision();
}
const ::std::string& CastLogsProto_CastDeviceInfo::hardware_revision() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
  return hardware_revision_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo::set_hardware_revision(const ::std::string& value) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo::set_hardware_revision(::std::string&& value) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
#endif
void CastLogsProto_CastDeviceInfo::set_hardware_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
void CastLogsProto_CastDeviceInfo::set_hardware_revision(const char* value, size_t size) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}
::std::string* CastLogsProto_CastDeviceInfo::mutable_hardware_revision() {
  set_has_hardware_revision();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
  return hardware_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo::release_hardware_revision() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
  clear_has_hardware_revision();
  return hardware_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo::set_allocated_hardware_revision(::std::string* hardware_revision) {
  if (hardware_revision != NULL) {
    set_has_hardware_revision();
  } else {
    clear_has_hardware_revision();
  }
  hardware_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardware_revision);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.hardware_revision)
}

// optional string manufacturer = 3;
bool CastLogsProto_CastDeviceInfo::has_manufacturer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_manufacturer() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastDeviceInfo::clear_has_manufacturer() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastDeviceInfo::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manufacturer();
}
const ::std::string& CastLogsProto_CastDeviceInfo::manufacturer() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
  return manufacturer_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo::set_manufacturer(const ::std::string& value) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo::set_manufacturer(::std::string&& value) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
#endif
void CastLogsProto_CastDeviceInfo::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
void CastLogsProto_CastDeviceInfo::set_manufacturer(const char* value, size_t size) {
  set_has_manufacturer();
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}
::std::string* CastLogsProto_CastDeviceInfo::mutable_manufacturer() {
  set_has_manufacturer();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo::release_manufacturer() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
  clear_has_manufacturer();
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    set_has_manufacturer();
  } else {
    clear_has_manufacturer();
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.manufacturer)
}

// optional string model = 4;
bool CastLogsProto_CastDeviceInfo::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastDeviceInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastDeviceInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
const ::std::string& CastLogsProto_CastDeviceInfo::model() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.model)
  return model_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.model)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo::set_model(::std::string&& value) {
  set_has_model();
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.model)
}
#endif
void CastLogsProto_CastDeviceInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.model)
}
void CastLogsProto_CastDeviceInfo::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.model)
}
::std::string* CastLogsProto_CastDeviceInfo::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo::release_model() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.model)
}

// optional string serial_number = 5;
bool CastLogsProto_CastDeviceInfo::has_serial_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_serial_number() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto_CastDeviceInfo::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto_CastDeviceInfo::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CastLogsProto_CastDeviceInfo::serial_number() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.serial_number)
  return serial_number_.GetNoArena();
}
void CastLogsProto_CastDeviceInfo::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceInfo::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
#endif
void CastLogsProto_CastDeviceInfo::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
void CastLogsProto_CastDeviceInfo::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}
::std::string* CastLogsProto_CastDeviceInfo::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceInfo::release_serial_number() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceInfo::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.serial_number)
}

// optional .metrics.CastLogsProto.CastDeviceInfo.HardwareInfo hardware_info = 6;
bool CastLogsProto_CastDeviceInfo::has_hardware_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastLogsProto_CastDeviceInfo::set_has_hardware_info() {
  _has_bits_[0] |= 0x00000010u;
}
void CastLogsProto_CastDeviceInfo::clear_has_hardware_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastLogsProto_CastDeviceInfo::clear_hardware_info() {
  if (hardware_info_ != NULL) hardware_info_->::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo::Clear();
  clear_has_hardware_info();
}
const ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo& CastLogsProto_CastDeviceInfo::hardware_info() const {
  const ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* p = hardware_info_;
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
  return p != NULL ? *p : *reinterpret_cast<const ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo*>(
      &::metrics::_CastLogsProto_CastDeviceInfo_HardwareInfo_default_instance_);
}
::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* CastLogsProto_CastDeviceInfo::mutable_hardware_info() {
  set_has_hardware_info();
  if (hardware_info_ == NULL) {
    hardware_info_ = new ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
  return hardware_info_;
}
::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* CastLogsProto_CastDeviceInfo::release_hardware_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
  clear_has_hardware_info();
  ::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* temp = hardware_info_;
  hardware_info_ = NULL;
  return temp;
}
void CastLogsProto_CastDeviceInfo::set_allocated_hardware_info(::metrics::CastLogsProto_CastDeviceInfo_HardwareInfo* hardware_info) {
  delete hardware_info_;
  hardware_info_ = hardware_info;
  if (hardware_info) {
    set_has_hardware_info();
  } else {
    clear_has_hardware_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceInfo.hardware_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSenderDeviceIdFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSdkTypeFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kVersionFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kChromeBrowserVersionFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kPlatformFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSystemVersionFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kTransportConnectionTypeFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kModelFieldNumber;
const int CastLogsProto_CastConnectionInfo_SenderInfo::kSenderLocalIpFragmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastConnectionInfo_SenderInfo::CastLogsProto_CastConnectionInfo_SenderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}
CastLogsProto_CastConnectionInfo_SenderInfo::CastLogsProto_CastConnectionInfo_SenderInfo(const CastLogsProto_CastConnectionInfo_SenderInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  chrome_browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chrome_browser_version()) {
    chrome_browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_browser_version_);
  }
  system_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_version()) {
    system_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_version_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model()) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  ::memcpy(&sender_device_id_, &from.sender_device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_local_ip_fragment_) -
    reinterpret_cast<char*>(&sender_device_id_)) + sizeof(sender_local_ip_fragment_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SharedCtor() {
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_browser_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_local_ip_fragment_) -
      reinterpret_cast<char*>(&sender_device_id_)) + sizeof(sender_local_ip_fragment_));
}

CastLogsProto_CastConnectionInfo_SenderInfo::~CastLogsProto_CastConnectionInfo_SenderInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  SharedDtor();
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chrome_browser_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastLogsProto_CastConnectionInfo_SenderInfo::descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CastLogsProto_CastConnectionInfo_SenderInfo& CastLogsProto_CastConnectionInfo_SenderInfo::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastConnectionInfo_SenderInfo* CastLogsProto_CastConnectionInfo_SenderInfo::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastConnectionInfo_SenderInfo* n = new CastLogsProto_CastConnectionInfo_SenderInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastConnectionInfo_SenderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!chrome_browser_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chrome_browser_version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!system_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*system_version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*model_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&sender_device_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transport_connection_type_) -
        reinterpret_cast<char*>(&sender_device_id_)) + sizeof(transport_connection_type_));
  }
  sender_local_ip_fragment_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastConnectionInfo_SenderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 sender_device_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_sender_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(value)) {
            set_sdk_type(static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chrome_browser_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chrome_browser_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chrome_browser_version().data(), static_cast<int>(this->chrome_browser_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(value)) {
            set_platform(static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string system_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->system_version().data(), static_cast<int>(this->system_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(value)) {
            set_transport_connection_type(static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string model = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), static_cast<int>(this->model().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sender_local_ip_fragment = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_sender_local_ip_fragment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_local_ip_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastConnectionInfo_SenderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 sender_device_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->sender_device_id(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sdk_type(), output);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional string chrome_browser_version = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chrome_browser_version().data(), static_cast<int>(this->chrome_browser_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chrome_browser_version(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->platform(), output);
  }

  // optional string system_version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_version().data(), static_cast<int>(this->system_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->system_version(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->transport_connection_type(), output);
  }

  // optional string model = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->model(), output);
  }

  // optional int32 sender_local_ip_fragment = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sender_local_ip_fragment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
}

::google::protobuf::uint8* CastLogsProto_CastConnectionInfo_SenderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 sender_device_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->sender_device_id(), target);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sdk_type(), target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional string chrome_browser_version = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chrome_browser_version().data(), static_cast<int>(this->chrome_browser_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chrome_browser_version(), target);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->platform(), target);
  }

  // optional string system_version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_version().data(), static_cast<int>(this->system_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->system_version(), target);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->transport_connection_type(), target);
  }

  // optional string model = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), static_cast<int>(this->model().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->model(), target);
  }

  // optional int32 sender_local_ip_fragment = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sender_local_ip_fragment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  return target;
}

size_t CastLogsProto_CastConnectionInfo_SenderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string chrome_browser_version = 4;
    if (has_chrome_browser_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chrome_browser_version());
    }

    // optional string system_version = 6;
    if (has_system_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_version());
    }

    // optional string model = 8;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional fixed64 sender_device_id = 1;
    if (has_sender_device_id()) {
      total_size += 1 + 8;
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
    if (has_sdk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sdk_type());
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
    if (has_transport_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transport_connection_type());
    }

  }
  // optional int32 sender_local_ip_fragment = 9;
  if (has_sender_local_ip_fragment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_local_ip_fragment());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastConnectionInfo_SenderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CastLogsProto_CastConnectionInfo_SenderInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CastLogsProto_CastConnectionInfo_SenderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
    MergeFrom(*source);
  }
}

void CastLogsProto_CastConnectionInfo_SenderInfo::MergeFrom(const CastLogsProto_CastConnectionInfo_SenderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chrome_browser_version();
      chrome_browser_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chrome_browser_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_system_version();
      system_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000010u) {
      sender_device_id_ = from.sender_device_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      sdk_type_ = from.sdk_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000080u) {
      transport_connection_type_ = from.transport_connection_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_sender_local_ip_fragment(from.sender_local_ip_fragment());
  }
}

void CastLogsProto_CastConnectionInfo_SenderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastLogsProto_CastConnectionInfo_SenderInfo::CopyFrom(const CastLogsProto_CastConnectionInfo_SenderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastConnectionInfo.SenderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastConnectionInfo_SenderInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastConnectionInfo_SenderInfo::Swap(CastLogsProto_CastConnectionInfo_SenderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastConnectionInfo_SenderInfo::InternalSwap(CastLogsProto_CastConnectionInfo_SenderInfo* other) {
  using std::swap;
  version_.Swap(&other->version_);
  chrome_browser_version_.Swap(&other->chrome_browser_version_);
  system_version_.Swap(&other->system_version_);
  model_.Swap(&other->model_);
  swap(sender_device_id_, other->sender_device_id_);
  swap(sdk_type_, other->sdk_type_);
  swap(platform_, other->platform_);
  swap(transport_connection_type_, other->transport_connection_type_);
  swap(sender_local_ip_fragment_, other->sender_local_ip_fragment_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastLogsProto_CastConnectionInfo_SenderInfo::GetMetadata() const {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastConnectionInfo_SenderInfo

// optional fixed64 sender_device_id = 1;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_sender_device_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_sender_device_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_sender_device_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_sender_device_id() {
  sender_device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_device_id();
}
::google::protobuf::uint64 CastLogsProto_CastConnectionInfo_SenderInfo::sender_device_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_device_id)
  return sender_device_id_;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_sender_device_id(::google::protobuf::uint64 value) {
  set_has_sender_device_id();
  sender_device_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_device_id)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.SDKType sdk_type = 2;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_sdk_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_sdk_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_sdk_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_sdk_type() {
  sdk_type_ = 0;
  clear_has_sdk_type();
}
::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType CastLogsProto_CastConnectionInfo_SenderInfo::sdk_type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sdk_type)
  return static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType >(sdk_type_);
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_sdk_type(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType value) {
  assert(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_SDKType_IsValid(value));
  set_has_sdk_type();
  sdk_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sdk_type)
}

// optional string version = 3;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
  return version_.GetNoArena();
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
#if LANG_CXX11
void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
#endif
void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.version)
}

// optional string chrome_browser_version = 4;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_chrome_browser_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_chrome_browser_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_chrome_browser_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_chrome_browser_version() {
  chrome_browser_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chrome_browser_version();
}
const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::chrome_browser_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
  return chrome_browser_version_.GetNoArena();
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(const ::std::string& value) {
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
#if LANG_CXX11
void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(::std::string&& value) {
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
#endif
void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_chrome_browser_version(const char* value, size_t size) {
  set_has_chrome_browser_version();
  chrome_browser_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_chrome_browser_version() {
  set_has_chrome_browser_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
  return chrome_browser_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_chrome_browser_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
  clear_has_chrome_browser_version();
  return chrome_browser_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_chrome_browser_version(::std::string* chrome_browser_version) {
  if (chrome_browser_version != NULL) {
    set_has_chrome_browser_version();
  } else {
    clear_has_chrome_browser_version();
  }
  chrome_browser_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chrome_browser_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.chrome_browser_version)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.Platform platform = 5;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000040u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000040u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform CastLogsProto_CastConnectionInfo_SenderInfo::platform() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.platform)
  return static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform >(platform_);
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_platform(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform value) {
  assert(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_Platform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.platform)
}

// optional string system_version = 6;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_system_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_system_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_system_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_system_version() {
  system_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system_version();
}
const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::system_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
  return system_version_.GetNoArena();
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(const ::std::string& value) {
  set_has_system_version();
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
#if LANG_CXX11
void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(::std::string&& value) {
  set_has_system_version();
  system_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
#endif
void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_system_version();
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_system_version(const char* value, size_t size) {
  set_has_system_version();
  system_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_system_version() {
  set_has_system_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
  return system_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_system_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
  clear_has_system_version();
  return system_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_system_version(::std::string* system_version) {
  if (system_version != NULL) {
    set_has_system_version();
  } else {
    clear_has_system_version();
  }
  system_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.system_version)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo.ConnectionType transport_connection_type = 7;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_transport_connection_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_transport_connection_type() {
  _has_bits_[0] |= 0x00000080u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_transport_connection_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_transport_connection_type() {
  transport_connection_type_ = 0;
  clear_has_transport_connection_type();
}
::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType CastLogsProto_CastConnectionInfo_SenderInfo::transport_connection_type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.transport_connection_type)
  return static_cast< ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType >(transport_connection_type_);
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_transport_connection_type(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType value) {
  assert(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo_ConnectionType_IsValid(value));
  set_has_transport_connection_type();
  transport_connection_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.transport_connection_type)
}

// optional string model = 8;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
const ::std::string& CastLogsProto_CastConnectionInfo_SenderInfo::model() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
  return model_.GetNoArena();
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
#if LANG_CXX11
void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(::std::string&& value) {
  set_has_model();
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
#endif
void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastConnectionInfo_SenderInfo::release_model() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.model)
}

// optional int32 sender_local_ip_fragment = 9;
bool CastLogsProto_CastConnectionInfo_SenderInfo::has_sender_local_ip_fragment() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_has_sender_local_ip_fragment() {
  _has_bits_[0] |= 0x00000100u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_has_sender_local_ip_fragment() {
  _has_bits_[0] &= ~0x00000100u;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::clear_sender_local_ip_fragment() {
  sender_local_ip_fragment_ = 0;
  clear_has_sender_local_ip_fragment();
}
::google::protobuf::int32 CastLogsProto_CastConnectionInfo_SenderInfo::sender_local_ip_fragment() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_local_ip_fragment)
  return sender_local_ip_fragment_;
}
void CastLogsProto_CastConnectionInfo_SenderInfo::set_sender_local_ip_fragment(::google::protobuf::int32 value) {
  set_has_sender_local_ip_fragment();
  sender_local_ip_fragment_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.SenderInfo.sender_local_ip_fragment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastConnectionInfo::kTransportConnectionIdFieldNumber;
const int CastLogsProto_CastConnectionInfo::kVirtualConnectionIdFieldNumber;
const int CastLogsProto_CastConnectionInfo::kSenderInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastConnectionInfo::CastLogsProto_CastConnectionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastConnectionInfo)
}
CastLogsProto_CastConnectionInfo::CastLogsProto_CastConnectionInfo(const CastLogsProto_CastConnectionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sender_info()) {
    sender_info_ = new ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo(*from.sender_info_);
  } else {
    sender_info_ = NULL;
  }
  ::memcpy(&transport_connection_id_, &from.transport_connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_connection_id_) -
    reinterpret_cast<char*>(&transport_connection_id_)) + sizeof(virtual_connection_id_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastConnectionInfo)
}

void CastLogsProto_CastConnectionInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sender_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_connection_id_) -
      reinterpret_cast<char*>(&sender_info_)) + sizeof(virtual_connection_id_));
}

CastLogsProto_CastConnectionInfo::~CastLogsProto_CastConnectionInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastConnectionInfo)
  SharedDtor();
}

void CastLogsProto_CastConnectionInfo::SharedDtor() {
  if (this != internal_default_instance()) delete sender_info_;
}

void CastLogsProto_CastConnectionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastLogsProto_CastConnectionInfo::descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CastLogsProto_CastConnectionInfo& CastLogsProto_CastConnectionInfo::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastConnectionInfo* CastLogsProto_CastConnectionInfo::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastConnectionInfo* n = new CastLogsProto_CastConnectionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastConnectionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_sender_info()) {
    GOOGLE_DCHECK(sender_info_ != NULL);
    sender_info_->::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&transport_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_connection_id_) -
        reinterpret_cast<char*>(&transport_connection_id_)) + sizeof(virtual_connection_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastConnectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastConnectionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 transport_connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_transport_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &transport_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 virtual_connection_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_virtual_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &virtual_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastConnectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastConnectionInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastConnectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 transport_connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->transport_connection_id(), output);
  }

  // optional fixed32 virtual_connection_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->virtual_connection_id(), output);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sender_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastConnectionInfo)
}

::google::protobuf::uint8* CastLogsProto_CastConnectionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastConnectionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 transport_connection_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->transport_connection_id(), target);
  }

  // optional fixed32 virtual_connection_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->virtual_connection_id(), target);
  }

  // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sender_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastConnectionInfo)
  return target;
}

size_t CastLogsProto_CastConnectionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastConnectionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
    if (has_sender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sender_info_);
    }

    // optional fixed32 transport_connection_id = 1;
    if (has_transport_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 virtual_connection_id = 2;
    if (has_virtual_connection_id()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastConnectionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CastLogsProto.CastConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CastLogsProto_CastConnectionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CastLogsProto_CastConnectionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CastLogsProto.CastConnectionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CastLogsProto.CastConnectionInfo)
    MergeFrom(*source);
  }
}

void CastLogsProto_CastConnectionInfo::MergeFrom(const CastLogsProto_CastConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastConnectionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sender_info()->::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::MergeFrom(from.sender_info());
    }
    if (cached_has_bits & 0x00000002u) {
      transport_connection_id_ = from.transport_connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      virtual_connection_id_ = from.virtual_connection_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastConnectionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CastLogsProto.CastConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastLogsProto_CastConnectionInfo::CopyFrom(const CastLogsProto_CastConnectionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastConnectionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastConnectionInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastConnectionInfo::Swap(CastLogsProto_CastConnectionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastConnectionInfo::InternalSwap(CastLogsProto_CastConnectionInfo* other) {
  using std::swap;
  swap(sender_info_, other->sender_info_);
  swap(transport_connection_id_, other->transport_connection_id_);
  swap(virtual_connection_id_, other->virtual_connection_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastLogsProto_CastConnectionInfo::GetMetadata() const {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastConnectionInfo

// optional fixed32 transport_connection_id = 1;
bool CastLogsProto_CastConnectionInfo::has_transport_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastConnectionInfo::set_has_transport_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastConnectionInfo::clear_has_transport_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastConnectionInfo::clear_transport_connection_id() {
  transport_connection_id_ = 0u;
  clear_has_transport_connection_id();
}
::google::protobuf::uint32 CastLogsProto_CastConnectionInfo::transport_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.transport_connection_id)
  return transport_connection_id_;
}
void CastLogsProto_CastConnectionInfo::set_transport_connection_id(::google::protobuf::uint32 value) {
  set_has_transport_connection_id();
  transport_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.transport_connection_id)
}

// optional fixed32 virtual_connection_id = 2;
bool CastLogsProto_CastConnectionInfo::has_virtual_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastConnectionInfo::set_has_virtual_connection_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastConnectionInfo::clear_has_virtual_connection_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastConnectionInfo::clear_virtual_connection_id() {
  virtual_connection_id_ = 0u;
  clear_has_virtual_connection_id();
}
::google::protobuf::uint32 CastLogsProto_CastConnectionInfo::virtual_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.virtual_connection_id)
  return virtual_connection_id_;
}
void CastLogsProto_CastConnectionInfo::set_virtual_connection_id(::google::protobuf::uint32 value) {
  set_has_virtual_connection_id();
  virtual_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastConnectionInfo.virtual_connection_id)
}

// optional .metrics.CastLogsProto.CastConnectionInfo.SenderInfo sender_info = 3;
bool CastLogsProto_CastConnectionInfo::has_sender_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastConnectionInfo::set_has_sender_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastConnectionInfo::clear_has_sender_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastConnectionInfo::clear_sender_info() {
  if (sender_info_ != NULL) sender_info_->::metrics::CastLogsProto_CastConnectionInfo_SenderInfo::Clear();
  clear_has_sender_info();
}
const ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo& CastLogsProto_CastConnectionInfo::sender_info() const {
  const ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* p = sender_info_;
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastConnectionInfo.sender_info)
  return p != NULL ? *p : *reinterpret_cast<const ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo*>(
      &::metrics::_CastLogsProto_CastConnectionInfo_SenderInfo_default_instance_);
}
::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* CastLogsProto_CastConnectionInfo::mutable_sender_info() {
  set_has_sender_info();
  if (sender_info_ == NULL) {
    sender_info_ = new ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastConnectionInfo.sender_info)
  return sender_info_;
}
::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* CastLogsProto_CastConnectionInfo::release_sender_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastConnectionInfo.sender_info)
  clear_has_sender_info();
  ::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* temp = sender_info_;
  sender_info_ = NULL;
  return temp;
}
void CastLogsProto_CastConnectionInfo::set_allocated_sender_info(::metrics::CastLogsProto_CastConnectionInfo_SenderInfo* sender_info) {
  delete sender_info_;
  sender_info_ = sender_info;
  if (sender_info) {
    set_has_sender_info();
  } else {
    clear_has_sender_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastConnectionInfo.sender_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastEventProto_Metadata::kNameHashFieldNumber;
const int CastLogsProto_CastEventProto_Metadata::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastEventProto_Metadata::CastLogsProto_CastEventProto_Metadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastEventProto.Metadata)
}
CastLogsProto_CastEventProto_Metadata::CastLogsProto_CastEventProto_Metadata(const CastLogsProto_CastEventProto_Metadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastEventProto.Metadata)
}

void CastLogsProto_CastEventProto_Metadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
}

CastLogsProto_CastEventProto_Metadata::~CastLogsProto_CastEventProto_Metadata() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastEventProto.Metadata)
  SharedDtor();
}

void CastLogsProto_CastEventProto_Metadata::SharedDtor() {
}

void CastLogsProto_CastEventProto_Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastLogsProto_CastEventProto_Metadata::descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CastLogsProto_CastEventProto_Metadata& CastLogsProto_CastEventProto_Metadata::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastEventProto_Metadata* CastLogsProto_CastEventProto_Metadata::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastEventProto_Metadata* n = new CastLogsProto_CastEventProto_Metadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastEventProto_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastEventProto.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastEventProto_Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastEventProto.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 name_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastEventProto.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastEventProto.Metadata)
  return false;
#undef DO_
}

void CastLogsProto_CastEventProto_Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastEventProto.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->name_hash(), output);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastEventProto.Metadata)
}

::google::protobuf::uint8* CastLogsProto_CastEventProto_Metadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastEventProto.Metadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->name_hash(), target);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastEventProto.Metadata)
  return target;
}

size_t CastLogsProto_CastEventProto_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastEventProto.Metadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 name_hash = 1;
    if (has_name_hash()) {
      total_size += 1 + 8;
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastEventProto_Metadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CastLogsProto.CastEventProto.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CastLogsProto_CastEventProto_Metadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CastLogsProto_CastEventProto_Metadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CastLogsProto.CastEventProto.Metadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CastLogsProto.CastEventProto.Metadata)
    MergeFrom(*source);
  }
}

void CastLogsProto_CastEventProto_Metadata::MergeFrom(const CastLogsProto_CastEventProto_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastEventProto.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastEventProto_Metadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CastLogsProto.CastEventProto.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastLogsProto_CastEventProto_Metadata::CopyFrom(const CastLogsProto_CastEventProto_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastEventProto.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastEventProto_Metadata::IsInitialized() const {
  return true;
}

void CastLogsProto_CastEventProto_Metadata::Swap(CastLogsProto_CastEventProto_Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastEventProto_Metadata::InternalSwap(CastLogsProto_CastEventProto_Metadata* other) {
  using std::swap;
  swap(name_hash_, other->name_hash_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastLogsProto_CastEventProto_Metadata::GetMetadata() const {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastEventProto_Metadata

// optional fixed64 name_hash = 1;
bool CastLogsProto_CastEventProto_Metadata::has_name_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastEventProto_Metadata::set_has_name_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastEventProto_Metadata::clear_has_name_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastEventProto_Metadata::clear_name_hash() {
  name_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_name_hash();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto_Metadata::name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.Metadata.name_hash)
  return name_hash_;
}
void CastLogsProto_CastEventProto_Metadata::set_name_hash(::google::protobuf::uint64 value) {
  set_has_name_hash();
  name_hash_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.Metadata.name_hash)
}

// optional int64 value = 2;
bool CastLogsProto_CastEventProto_Metadata::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastEventProto_Metadata::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastEventProto_Metadata::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastEventProto_Metadata::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
::google::protobuf::int64 CastLogsProto_CastEventProto_Metadata::value() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.Metadata.value)
  return value_;
}
void CastLogsProto_CastEventProto_Metadata::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.Metadata.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastEventProto::kNameHashFieldNumber;
const int CastLogsProto_CastEventProto::kTimeMsecFieldNumber;
const int CastLogsProto_CastEventProto::kAppIdFieldNumber;
const int CastLogsProto_CastEventProto::kRemoteAppIdFieldNumber;
const int CastLogsProto_CastEventProto::kApplicationSessionIdFieldNumber;
const int CastLogsProto_CastEventProto::kCastReceiverVersionFieldNumber;
const int CastLogsProto_CastEventProto::kCastMplVersionFieldNumber;
const int CastLogsProto_CastEventProto::kTransportConnectionIdFieldNumber;
const int CastLogsProto_CastEventProto::kVirtualConnectionIdFieldNumber;
const int CastLogsProto_CastEventProto::kValueFieldNumber;
const int CastLogsProto_CastEventProto::kGroupUuidFieldNumber;
const int CastLogsProto_CastEventProto::kConversationKeyFieldNumber;
const int CastLogsProto_CastEventProto::kRequestIdFieldNumber;
const int CastLogsProto_CastEventProto::kEventIdFieldNumber;
const int CastLogsProto_CastEventProto::kAoghRequestIdFieldNumber;
const int CastLogsProto_CastEventProto::kAoghLocalDeviceIdFieldNumber;
const int CastLogsProto_CastEventProto::kAoghAgentIdFieldNumber;
const int CastLogsProto_CastEventProto::kMetadataFieldNumber;
const int CastLogsProto_CastEventProto::kFeatureVectorFieldNumber;
const int CastLogsProto_CastEventProto::kTimezoneIdFieldNumber;
const int CastLogsProto_CastEventProto::kUiVersionFieldNumber;
const int CastLogsProto_CastEventProto::kSelinuxAuditDetailFieldNumber;
const int CastLogsProto_CastEventProto::kEventIdListFieldNumber;
const int CastLogsProto_CastEventProto::kDuoCoreVersionFieldNumber;
const int CastLogsProto_CastEventProto::kHotwordModelIdFieldNumber;
const int CastLogsProto_CastEventProto::kLaunchFromFieldNumber;
const int CastLogsProto_CastEventProto::kRuntimeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastEventProto::CastLogsProto_CastEventProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastEventProto)
}
CastLogsProto_CastEventProto::CastLogsProto_CastEventProto(const CastLogsProto_CastEventProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      metadata_(from.metadata_),
      feature_vector_(from.feature_vector_),
      event_id_list_(from.event_id_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  conversation_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_conversation_key()) {
    conversation_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conversation_key_);
  }
  event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_id()) {
    event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_id_);
  }
  aogh_request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aogh_request_id()) {
    aogh_request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aogh_request_id_);
  }
  timezone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone_id()) {
    timezone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_id_);
  }
  ui_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ui_version()) {
    ui_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_version_);
  }
  aogh_agent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_aogh_agent_id()) {
    aogh_agent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aogh_agent_id_);
  }
  selinux_audit_detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_selinux_audit_detail()) {
    selinux_audit_detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selinux_audit_detail_);
  }
  hotword_model_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hotword_model_id()) {
    hotword_model_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hotword_model_id_);
  }
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&runtime_type_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(runtime_type_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastEventProto)
}

void CastLogsProto_CastEventProto::SharedCtor() {
  _cached_size_ = 0;
  conversation_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aogh_request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aogh_agent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selinux_audit_detail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotword_model_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runtime_type_) -
      reinterpret_cast<char*>(&name_hash_)) + sizeof(runtime_type_));
}

CastLogsProto_CastEventProto::~CastLogsProto_CastEventProto() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastEventProto)
  SharedDtor();
}

void CastLogsProto_CastEventProto::SharedDtor() {
  conversation_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aogh_request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ui_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aogh_agent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selinux_audit_detail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotword_model_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastEventProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastLogsProto_CastEventProto::descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CastLogsProto_CastEventProto& CastLogsProto_CastEventProto::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastEventProto* CastLogsProto_CastEventProto::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastEventProto* n = new CastLogsProto_CastEventProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  feature_vector_.Clear();
  event_id_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!conversation_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*conversation_key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!event_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*event_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!aogh_request_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aogh_request_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!timezone_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timezone_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!ui_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ui_version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!aogh_agent_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*aogh_agent_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!selinux_audit_detail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*selinux_audit_detail_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!hotword_model_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hotword_model_id_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cast_mpl_version_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(cast_mpl_version_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&virtual_connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&runtime_type_) -
        reinterpret_cast<char*>(&virtual_connection_id_)) + sizeof(runtime_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastEventProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 name_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_name_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_msec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time_msec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 app_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 application_session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_application_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &application_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 cast_receiver_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_cast_receiver_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cast_receiver_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 transport_connection_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_transport_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &transport_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 virtual_connection_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_virtual_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &virtual_connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 cast_mpl_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_cast_mpl_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cast_mpl_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 group_uuid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_group_uuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &group_uuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string conversation_key = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conversation_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->conversation_key().data(), static_cast<int>(this->conversation_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastEventProto.conversation_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 request_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string event_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_id().data(), static_cast<int>(this->event_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastEventProto.event_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float feature_vector = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 125u, input, this->mutable_feature_vector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature_vector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string aogh_request_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aogh_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aogh_request_id().data(), static_cast<int>(this->aogh_request_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastEventProto.aogh_request_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string timezone_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone_id().data(), static_cast<int>(this->timezone_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastEventProto.timezone_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 aogh_local_device_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_aogh_local_device_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &aogh_local_device_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 remote_app_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_remote_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &remote_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ui_version = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ui_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ui_version().data(), static_cast<int>(this->ui_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastEventProto.ui_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string aogh_agent_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aogh_agent_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aogh_agent_id().data(), static_cast<int>(this->aogh_agent_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastEventProto.aogh_agent_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string selinux_audit_detail = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selinux_audit_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->selinux_audit_detail().data(), static_cast<int>(this->selinux_audit_detail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastEventProto.selinux_audit_detail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string event_id_list = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_event_id_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_id_list(this->event_id_list_size() - 1).data(),
            static_cast<int>(this->event_id_list(this->event_id_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastEventProto.event_id_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 duo_core_version = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_duo_core_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &duo_core_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hotword_model_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotword_model_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hotword_model_id().data(), static_cast<int>(this->hotword_model_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastEventProto.hotword_model_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastEventProto.LaunchFrom launch_from = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastEventProto_LaunchFrom_IsValid(value)) {
            set_launch_from(static_cast< ::metrics::CastLogsProto_CastEventProto_LaunchFrom >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                26, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastEventProto.RuntimeType runtime_type = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastEventProto_RuntimeType_IsValid(value)) {
            set_runtime_type(static_cast< ::metrics::CastLogsProto_CastEventProto_RuntimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                27, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastEventProto)
  return false;
#undef DO_
}

void CastLogsProto_CastEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->name_hash(), output);
  }

  // optional int64 time_msec = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_msec(), output);
  }

  // optional fixed32 app_id = 3;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->app_id(), output);
  }

  // optional fixed64 application_session_id = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->application_session_id(), output);
  }

  // optional fixed64 cast_receiver_version = 5;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->cast_receiver_version(), output);
  }

  // optional fixed32 transport_connection_id = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->transport_connection_id(), output);
  }

  // optional fixed32 virtual_connection_id = 7;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->virtual_connection_id(), output);
  }

  // optional int64 value = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->value(), output);
  }

  // optional fixed64 cast_mpl_version = 9;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->cast_mpl_version(), output);
  }

  // optional fixed64 group_uuid = 10;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->group_uuid(), output);
  }

  // optional string conversation_key = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conversation_key().data(), static_cast<int>(this->conversation_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.conversation_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->conversation_key(), output);
  }

  // optional fixed32 request_id = 12;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->request_id(), output);
  }

  // optional string event_id = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_id().data(), static_cast<int>(this->event_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.event_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->event_id(), output);
  }

  // repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->metadata(static_cast<int>(i)), output);
  }

  // repeated float feature_vector = 15;
  for (int i = 0, n = this->feature_vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      15, this->feature_vector(i), output);
  }

  // optional string aogh_request_id = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aogh_request_id().data(), static_cast<int>(this->aogh_request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.aogh_request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->aogh_request_id(), output);
  }

  // optional string timezone_id = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone_id().data(), static_cast<int>(this->timezone_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.timezone_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->timezone_id(), output);
  }

  // optional int64 aogh_local_device_id = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->aogh_local_device_id(), output);
  }

  // optional fixed32 remote_app_id = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(19, this->remote_app_id(), output);
  }

  // optional string ui_version = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ui_version().data(), static_cast<int>(this->ui_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.ui_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->ui_version(), output);
  }

  // optional string aogh_agent_id = 21;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aogh_agent_id().data(), static_cast<int>(this->aogh_agent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.aogh_agent_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->aogh_agent_id(), output);
  }

  // optional string selinux_audit_detail = 22;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selinux_audit_detail().data(), static_cast<int>(this->selinux_audit_detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.selinux_audit_detail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->selinux_audit_detail(), output);
  }

  // repeated string event_id_list = 23;
  for (int i = 0, n = this->event_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_id_list(i).data(), static_cast<int>(this->event_id_list(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.event_id_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->event_id_list(i), output);
  }

  // optional fixed64 duo_core_version = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(24, this->duo_core_version(), output);
  }

  // optional string hotword_model_id = 25;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hotword_model_id().data(), static_cast<int>(this->hotword_model_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.hotword_model_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->hotword_model_id(), output);
  }

  // optional .metrics.CastLogsProto.CastEventProto.LaunchFrom launch_from = 26;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->launch_from(), output);
  }

  // optional .metrics.CastLogsProto.CastEventProto.RuntimeType runtime_type = 27;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->runtime_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastEventProto)
}

::google::protobuf::uint8* CastLogsProto_CastEventProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastEventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->name_hash(), target);
  }

  // optional int64 time_msec = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_msec(), target);
  }

  // optional fixed32 app_id = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->app_id(), target);
  }

  // optional fixed64 application_session_id = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->application_session_id(), target);
  }

  // optional fixed64 cast_receiver_version = 5;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->cast_receiver_version(), target);
  }

  // optional fixed32 transport_connection_id = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->transport_connection_id(), target);
  }

  // optional fixed32 virtual_connection_id = 7;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->virtual_connection_id(), target);
  }

  // optional int64 value = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->value(), target);
  }

  // optional fixed64 cast_mpl_version = 9;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->cast_mpl_version(), target);
  }

  // optional fixed64 group_uuid = 10;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->group_uuid(), target);
  }

  // optional string conversation_key = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conversation_key().data(), static_cast<int>(this->conversation_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.conversation_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->conversation_key(), target);
  }

  // optional fixed32 request_id = 12;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->request_id(), target);
  }

  // optional string event_id = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_id().data(), static_cast<int>(this->event_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.event_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->event_id(), target);
  }

  // repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->metadata(static_cast<int>(i)), deterministic, target);
  }

  // repeated float feature_vector = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(15, this->feature_vector_, target);

  // optional string aogh_request_id = 16;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aogh_request_id().data(), static_cast<int>(this->aogh_request_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.aogh_request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->aogh_request_id(), target);
  }

  // optional string timezone_id = 17;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone_id().data(), static_cast<int>(this->timezone_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.timezone_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->timezone_id(), target);
  }

  // optional int64 aogh_local_device_id = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->aogh_local_device_id(), target);
  }

  // optional fixed32 remote_app_id = 19;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(19, this->remote_app_id(), target);
  }

  // optional string ui_version = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ui_version().data(), static_cast<int>(this->ui_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.ui_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->ui_version(), target);
  }

  // optional string aogh_agent_id = 21;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aogh_agent_id().data(), static_cast<int>(this->aogh_agent_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.aogh_agent_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->aogh_agent_id(), target);
  }

  // optional string selinux_audit_detail = 22;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selinux_audit_detail().data(), static_cast<int>(this->selinux_audit_detail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.selinux_audit_detail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->selinux_audit_detail(), target);
  }

  // repeated string event_id_list = 23;
  for (int i = 0, n = this->event_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_id_list(i).data(), static_cast<int>(this->event_id_list(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.event_id_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(23, this->event_id_list(i), target);
  }

  // optional fixed64 duo_core_version = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(24, this->duo_core_version(), target);
  }

  // optional string hotword_model_id = 25;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hotword_model_id().data(), static_cast<int>(this->hotword_model_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastEventProto.hotword_model_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->hotword_model_id(), target);
  }

  // optional .metrics.CastLogsProto.CastEventProto.LaunchFrom launch_from = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->launch_from(), target);
  }

  // optional .metrics.CastLogsProto.CastEventProto.RuntimeType runtime_type = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->runtime_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastEventProto)
  return target;
}

size_t CastLogsProto_CastEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastEventProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata(static_cast<int>(i)));
    }
  }

  // repeated float feature_vector = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_vector_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->feature_vector_size());
    total_size += data_size;
  }

  // repeated string event_id_list = 23;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->event_id_list_size());
  for (int i = 0, n = this->event_id_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->event_id_list(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string conversation_key = 11;
    if (has_conversation_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conversation_key());
    }

    // optional string event_id = 13;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_id());
    }

    // optional string aogh_request_id = 16;
    if (has_aogh_request_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aogh_request_id());
    }

    // optional string timezone_id = 17;
    if (has_timezone_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone_id());
    }

    // optional string ui_version = 20;
    if (has_ui_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ui_version());
    }

    // optional string aogh_agent_id = 21;
    if (has_aogh_agent_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aogh_agent_id());
    }

    // optional string selinux_audit_detail = 22;
    if (has_selinux_audit_detail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selinux_audit_detail());
    }

    // optional string hotword_model_id = 25;
    if (has_hotword_model_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotword_model_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional fixed64 name_hash = 1;
    if (has_name_hash()) {
      total_size += 1 + 8;
    }

    // optional int64 time_msec = 2;
    if (has_time_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_msec());
    }

    // optional fixed64 application_session_id = 4;
    if (has_application_session_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 app_id = 3;
    if (has_app_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 transport_connection_id = 6;
    if (has_transport_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 cast_receiver_version = 5;
    if (has_cast_receiver_version()) {
      total_size += 1 + 8;
    }

    // optional int64 value = 8;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional fixed64 cast_mpl_version = 9;
    if (has_cast_mpl_version()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional fixed32 virtual_connection_id = 7;
    if (has_virtual_connection_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 request_id = 12;
    if (has_request_id()) {
      total_size += 1 + 4;
    }

    // optional fixed64 group_uuid = 10;
    if (has_group_uuid()) {
      total_size += 1 + 8;
    }

    // optional int64 aogh_local_device_id = 18;
    if (has_aogh_local_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->aogh_local_device_id());
    }

    // optional fixed32 remote_app_id = 19;
    if (has_remote_app_id()) {
      total_size += 2 + 4;
    }

    // optional .metrics.CastLogsProto.CastEventProto.LaunchFrom launch_from = 26;
    if (has_launch_from()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->launch_from());
    }

    // optional fixed64 duo_core_version = 24;
    if (has_duo_core_version()) {
      total_size += 2 + 8;
    }

    // optional .metrics.CastLogsProto.CastEventProto.RuntimeType runtime_type = 27;
    if (has_runtime_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->runtime_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastEventProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CastLogsProto.CastEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CastLogsProto_CastEventProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CastLogsProto_CastEventProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CastLogsProto.CastEventProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CastLogsProto.CastEventProto)
    MergeFrom(*source);
  }
}

void CastLogsProto_CastEventProto::MergeFrom(const CastLogsProto_CastEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  feature_vector_.MergeFrom(from.feature_vector_);
  event_id_list_.MergeFrom(from.event_id_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_conversation_key();
      conversation_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conversation_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_event_id();
      event_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_aogh_request_id();
      aogh_request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aogh_request_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_timezone_id();
      timezone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_ui_version();
      ui_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ui_version_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_aogh_agent_id();
      aogh_agent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aogh_agent_id_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_selinux_audit_detail();
      selinux_audit_detail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selinux_audit_detail_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_hotword_model_id();
      hotword_model_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hotword_model_id_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_msec_ = from.time_msec_;
    }
    if (cached_has_bits & 0x00000400u) {
      application_session_id_ = from.application_session_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      transport_connection_id_ = from.transport_connection_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      cast_receiver_version_ = from.cast_receiver_version_;
    }
    if (cached_has_bits & 0x00004000u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00008000u) {
      cast_mpl_version_ = from.cast_mpl_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      virtual_connection_id_ = from.virtual_connection_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      group_uuid_ = from.group_uuid_;
    }
    if (cached_has_bits & 0x00080000u) {
      aogh_local_device_id_ = from.aogh_local_device_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      remote_app_id_ = from.remote_app_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      launch_from_ = from.launch_from_;
    }
    if (cached_has_bits & 0x00400000u) {
      duo_core_version_ = from.duo_core_version_;
    }
    if (cached_has_bits & 0x00800000u) {
      runtime_type_ = from.runtime_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastEventProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CastLogsProto.CastEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastLogsProto_CastEventProto::CopyFrom(const CastLogsProto_CastEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastEventProto::IsInitialized() const {
  return true;
}

void CastLogsProto_CastEventProto::Swap(CastLogsProto_CastEventProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastEventProto::InternalSwap(CastLogsProto_CastEventProto* other) {
  using std::swap;
  metadata_.InternalSwap(&other->metadata_);
  feature_vector_.InternalSwap(&other->feature_vector_);
  event_id_list_.InternalSwap(&other->event_id_list_);
  conversation_key_.Swap(&other->conversation_key_);
  event_id_.Swap(&other->event_id_);
  aogh_request_id_.Swap(&other->aogh_request_id_);
  timezone_id_.Swap(&other->timezone_id_);
  ui_version_.Swap(&other->ui_version_);
  aogh_agent_id_.Swap(&other->aogh_agent_id_);
  selinux_audit_detail_.Swap(&other->selinux_audit_detail_);
  hotword_model_id_.Swap(&other->hotword_model_id_);
  swap(name_hash_, other->name_hash_);
  swap(time_msec_, other->time_msec_);
  swap(application_session_id_, other->application_session_id_);
  swap(app_id_, other->app_id_);
  swap(transport_connection_id_, other->transport_connection_id_);
  swap(cast_receiver_version_, other->cast_receiver_version_);
  swap(value_, other->value_);
  swap(cast_mpl_version_, other->cast_mpl_version_);
  swap(virtual_connection_id_, other->virtual_connection_id_);
  swap(request_id_, other->request_id_);
  swap(group_uuid_, other->group_uuid_);
  swap(aogh_local_device_id_, other->aogh_local_device_id_);
  swap(remote_app_id_, other->remote_app_id_);
  swap(launch_from_, other->launch_from_);
  swap(duo_core_version_, other->duo_core_version_);
  swap(runtime_type_, other->runtime_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastLogsProto_CastEventProto::GetMetadata() const {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastEventProto

// optional fixed64 name_hash = 1;
bool CastLogsProto_CastEventProto::has_name_hash() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CastLogsProto_CastEventProto::set_has_name_hash() {
  _has_bits_[0] |= 0x00000100u;
}
void CastLogsProto_CastEventProto::clear_has_name_hash() {
  _has_bits_[0] &= ~0x00000100u;
}
void CastLogsProto_CastEventProto::clear_name_hash() {
  name_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_name_hash();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.name_hash)
  return name_hash_;
}
void CastLogsProto_CastEventProto::set_name_hash(::google::protobuf::uint64 value) {
  set_has_name_hash();
  name_hash_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.name_hash)
}

// optional int64 time_msec = 2;
bool CastLogsProto_CastEventProto::has_time_msec() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CastLogsProto_CastEventProto::set_has_time_msec() {
  _has_bits_[0] |= 0x00000200u;
}
void CastLogsProto_CastEventProto::clear_has_time_msec() {
  _has_bits_[0] &= ~0x00000200u;
}
void CastLogsProto_CastEventProto::clear_time_msec() {
  time_msec_ = GOOGLE_LONGLONG(0);
  clear_has_time_msec();
}
::google::protobuf::int64 CastLogsProto_CastEventProto::time_msec() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.time_msec)
  return time_msec_;
}
void CastLogsProto_CastEventProto::set_time_msec(::google::protobuf::int64 value) {
  set_has_time_msec();
  time_msec_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.time_msec)
}

// optional fixed32 app_id = 3;
bool CastLogsProto_CastEventProto::has_app_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CastLogsProto_CastEventProto::set_has_app_id() {
  _has_bits_[0] |= 0x00000800u;
}
void CastLogsProto_CastEventProto::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void CastLogsProto_CastEventProto::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CastLogsProto_CastEventProto::app_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.app_id)
  return app_id_;
}
void CastLogsProto_CastEventProto::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.app_id)
}

// optional fixed32 remote_app_id = 19;
bool CastLogsProto_CastEventProto::has_remote_app_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_remote_app_id() {
  _has_bits_[0] |= 0x00100000u;
}
void CastLogsProto_CastEventProto::clear_has_remote_app_id() {
  _has_bits_[0] &= ~0x00100000u;
}
void CastLogsProto_CastEventProto::clear_remote_app_id() {
  remote_app_id_ = 0u;
  clear_has_remote_app_id();
}
::google::protobuf::uint32 CastLogsProto_CastEventProto::remote_app_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.remote_app_id)
  return remote_app_id_;
}
void CastLogsProto_CastEventProto::set_remote_app_id(::google::protobuf::uint32 value) {
  set_has_remote_app_id();
  remote_app_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.remote_app_id)
}

// optional fixed64 application_session_id = 4;
bool CastLogsProto_CastEventProto::has_application_session_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CastLogsProto_CastEventProto::set_has_application_session_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CastLogsProto_CastEventProto::clear_has_application_session_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CastLogsProto_CastEventProto::clear_application_session_id() {
  application_session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_application_session_id();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::application_session_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.application_session_id)
  return application_session_id_;
}
void CastLogsProto_CastEventProto::set_application_session_id(::google::protobuf::uint64 value) {
  set_has_application_session_id();
  application_session_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.application_session_id)
}

// optional fixed64 cast_receiver_version = 5;
bool CastLogsProto_CastEventProto::has_cast_receiver_version() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_cast_receiver_version() {
  _has_bits_[0] |= 0x00002000u;
}
void CastLogsProto_CastEventProto::clear_has_cast_receiver_version() {
  _has_bits_[0] &= ~0x00002000u;
}
void CastLogsProto_CastEventProto::clear_cast_receiver_version() {
  cast_receiver_version_ = GOOGLE_ULONGLONG(0);
  clear_has_cast_receiver_version();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::cast_receiver_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.cast_receiver_version)
  return cast_receiver_version_;
}
void CastLogsProto_CastEventProto::set_cast_receiver_version(::google::protobuf::uint64 value) {
  set_has_cast_receiver_version();
  cast_receiver_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.cast_receiver_version)
}

// optional fixed64 cast_mpl_version = 9;
bool CastLogsProto_CastEventProto::has_cast_mpl_version() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_cast_mpl_version() {
  _has_bits_[0] |= 0x00008000u;
}
void CastLogsProto_CastEventProto::clear_has_cast_mpl_version() {
  _has_bits_[0] &= ~0x00008000u;
}
void CastLogsProto_CastEventProto::clear_cast_mpl_version() {
  cast_mpl_version_ = GOOGLE_ULONGLONG(0);
  clear_has_cast_mpl_version();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::cast_mpl_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.cast_mpl_version)
  return cast_mpl_version_;
}
void CastLogsProto_CastEventProto::set_cast_mpl_version(::google::protobuf::uint64 value) {
  set_has_cast_mpl_version();
  cast_mpl_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.cast_mpl_version)
}

// optional fixed32 transport_connection_id = 6;
bool CastLogsProto_CastEventProto::has_transport_connection_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_transport_connection_id() {
  _has_bits_[0] |= 0x00001000u;
}
void CastLogsProto_CastEventProto::clear_has_transport_connection_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void CastLogsProto_CastEventProto::clear_transport_connection_id() {
  transport_connection_id_ = 0u;
  clear_has_transport_connection_id();
}
::google::protobuf::uint32 CastLogsProto_CastEventProto::transport_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.transport_connection_id)
  return transport_connection_id_;
}
void CastLogsProto_CastEventProto::set_transport_connection_id(::google::protobuf::uint32 value) {
  set_has_transport_connection_id();
  transport_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.transport_connection_id)
}

// optional fixed32 virtual_connection_id = 7;
bool CastLogsProto_CastEventProto::has_virtual_connection_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_virtual_connection_id() {
  _has_bits_[0] |= 0x00010000u;
}
void CastLogsProto_CastEventProto::clear_has_virtual_connection_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void CastLogsProto_CastEventProto::clear_virtual_connection_id() {
  virtual_connection_id_ = 0u;
  clear_has_virtual_connection_id();
}
::google::protobuf::uint32 CastLogsProto_CastEventProto::virtual_connection_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.virtual_connection_id)
  return virtual_connection_id_;
}
void CastLogsProto_CastEventProto::set_virtual_connection_id(::google::protobuf::uint32 value) {
  set_has_virtual_connection_id();
  virtual_connection_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.virtual_connection_id)
}

// optional int64 value = 8;
bool CastLogsProto_CastEventProto::has_value() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_value() {
  _has_bits_[0] |= 0x00004000u;
}
void CastLogsProto_CastEventProto::clear_has_value() {
  _has_bits_[0] &= ~0x00004000u;
}
void CastLogsProto_CastEventProto::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
::google::protobuf::int64 CastLogsProto_CastEventProto::value() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.value)
  return value_;
}
void CastLogsProto_CastEventProto::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.value)
}

// optional fixed64 group_uuid = 10;
bool CastLogsProto_CastEventProto::has_group_uuid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_group_uuid() {
  _has_bits_[0] |= 0x00040000u;
}
void CastLogsProto_CastEventProto::clear_has_group_uuid() {
  _has_bits_[0] &= ~0x00040000u;
}
void CastLogsProto_CastEventProto::clear_group_uuid() {
  group_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_group_uuid();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::group_uuid() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.group_uuid)
  return group_uuid_;
}
void CastLogsProto_CastEventProto::set_group_uuid(::google::protobuf::uint64 value) {
  set_has_group_uuid();
  group_uuid_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.group_uuid)
}

// optional string conversation_key = 11;
bool CastLogsProto_CastEventProto::has_conversation_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastEventProto::set_has_conversation_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastEventProto::clear_has_conversation_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastEventProto::clear_conversation_key() {
  conversation_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conversation_key();
}
const ::std::string& CastLogsProto_CastEventProto::conversation_key() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.conversation_key)
  return conversation_key_.GetNoArena();
}
void CastLogsProto_CastEventProto::set_conversation_key(const ::std::string& value) {
  set_has_conversation_key();
  conversation_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.conversation_key)
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::set_conversation_key(::std::string&& value) {
  set_has_conversation_key();
  conversation_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastEventProto.conversation_key)
}
#endif
void CastLogsProto_CastEventProto::set_conversation_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_conversation_key();
  conversation_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.conversation_key)
}
void CastLogsProto_CastEventProto::set_conversation_key(const char* value, size_t size) {
  set_has_conversation_key();
  conversation_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.conversation_key)
}
::std::string* CastLogsProto_CastEventProto::mutable_conversation_key() {
  set_has_conversation_key();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.conversation_key)
  return conversation_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastEventProto::release_conversation_key() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastEventProto.conversation_key)
  clear_has_conversation_key();
  return conversation_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastEventProto::set_allocated_conversation_key(::std::string* conversation_key) {
  if (conversation_key != NULL) {
    set_has_conversation_key();
  } else {
    clear_has_conversation_key();
  }
  conversation_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conversation_key);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastEventProto.conversation_key)
}

// optional fixed32 request_id = 12;
bool CastLogsProto_CastEventProto::has_request_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_request_id() {
  _has_bits_[0] |= 0x00020000u;
}
void CastLogsProto_CastEventProto::clear_has_request_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void CastLogsProto_CastEventProto::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 CastLogsProto_CastEventProto::request_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.request_id)
  return request_id_;
}
void CastLogsProto_CastEventProto::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.request_id)
}

// optional string event_id = 13;
bool CastLogsProto_CastEventProto::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastEventProto::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastEventProto::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastEventProto::clear_event_id() {
  event_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_id();
}
const ::std::string& CastLogsProto_CastEventProto::event_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.event_id)
  return event_id_.GetNoArena();
}
void CastLogsProto_CastEventProto::set_event_id(const ::std::string& value) {
  set_has_event_id();
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.event_id)
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::set_event_id(::std::string&& value) {
  set_has_event_id();
  event_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastEventProto.event_id)
}
#endif
void CastLogsProto_CastEventProto::set_event_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_id();
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.event_id)
}
void CastLogsProto_CastEventProto::set_event_id(const char* value, size_t size) {
  set_has_event_id();
  event_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.event_id)
}
::std::string* CastLogsProto_CastEventProto::mutable_event_id() {
  set_has_event_id();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.event_id)
  return event_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastEventProto::release_event_id() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastEventProto.event_id)
  clear_has_event_id();
  return event_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastEventProto::set_allocated_event_id(::std::string* event_id) {
  if (event_id != NULL) {
    set_has_event_id();
  } else {
    clear_has_event_id();
  }
  event_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastEventProto.event_id)
}

// optional string aogh_request_id = 16;
bool CastLogsProto_CastEventProto::has_aogh_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastEventProto::set_has_aogh_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastEventProto::clear_has_aogh_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastEventProto::clear_aogh_request_id() {
  aogh_request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aogh_request_id();
}
const ::std::string& CastLogsProto_CastEventProto::aogh_request_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.aogh_request_id)
  return aogh_request_id_.GetNoArena();
}
void CastLogsProto_CastEventProto::set_aogh_request_id(const ::std::string& value) {
  set_has_aogh_request_id();
  aogh_request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.aogh_request_id)
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::set_aogh_request_id(::std::string&& value) {
  set_has_aogh_request_id();
  aogh_request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastEventProto.aogh_request_id)
}
#endif
void CastLogsProto_CastEventProto::set_aogh_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aogh_request_id();
  aogh_request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.aogh_request_id)
}
void CastLogsProto_CastEventProto::set_aogh_request_id(const char* value, size_t size) {
  set_has_aogh_request_id();
  aogh_request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.aogh_request_id)
}
::std::string* CastLogsProto_CastEventProto::mutable_aogh_request_id() {
  set_has_aogh_request_id();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.aogh_request_id)
  return aogh_request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastEventProto::release_aogh_request_id() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastEventProto.aogh_request_id)
  clear_has_aogh_request_id();
  return aogh_request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastEventProto::set_allocated_aogh_request_id(::std::string* aogh_request_id) {
  if (aogh_request_id != NULL) {
    set_has_aogh_request_id();
  } else {
    clear_has_aogh_request_id();
  }
  aogh_request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aogh_request_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastEventProto.aogh_request_id)
}

// optional int64 aogh_local_device_id = 18;
bool CastLogsProto_CastEventProto::has_aogh_local_device_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_aogh_local_device_id() {
  _has_bits_[0] |= 0x00080000u;
}
void CastLogsProto_CastEventProto::clear_has_aogh_local_device_id() {
  _has_bits_[0] &= ~0x00080000u;
}
void CastLogsProto_CastEventProto::clear_aogh_local_device_id() {
  aogh_local_device_id_ = GOOGLE_LONGLONG(0);
  clear_has_aogh_local_device_id();
}
::google::protobuf::int64 CastLogsProto_CastEventProto::aogh_local_device_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.aogh_local_device_id)
  return aogh_local_device_id_;
}
void CastLogsProto_CastEventProto::set_aogh_local_device_id(::google::protobuf::int64 value) {
  set_has_aogh_local_device_id();
  aogh_local_device_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.aogh_local_device_id)
}

// optional string aogh_agent_id = 21;
bool CastLogsProto_CastEventProto::has_aogh_agent_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CastLogsProto_CastEventProto::set_has_aogh_agent_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CastLogsProto_CastEventProto::clear_has_aogh_agent_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CastLogsProto_CastEventProto::clear_aogh_agent_id() {
  aogh_agent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aogh_agent_id();
}
const ::std::string& CastLogsProto_CastEventProto::aogh_agent_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.aogh_agent_id)
  return aogh_agent_id_.GetNoArena();
}
void CastLogsProto_CastEventProto::set_aogh_agent_id(const ::std::string& value) {
  set_has_aogh_agent_id();
  aogh_agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.aogh_agent_id)
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::set_aogh_agent_id(::std::string&& value) {
  set_has_aogh_agent_id();
  aogh_agent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastEventProto.aogh_agent_id)
}
#endif
void CastLogsProto_CastEventProto::set_aogh_agent_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_aogh_agent_id();
  aogh_agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.aogh_agent_id)
}
void CastLogsProto_CastEventProto::set_aogh_agent_id(const char* value, size_t size) {
  set_has_aogh_agent_id();
  aogh_agent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.aogh_agent_id)
}
::std::string* CastLogsProto_CastEventProto::mutable_aogh_agent_id() {
  set_has_aogh_agent_id();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.aogh_agent_id)
  return aogh_agent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastEventProto::release_aogh_agent_id() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastEventProto.aogh_agent_id)
  clear_has_aogh_agent_id();
  return aogh_agent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastEventProto::set_allocated_aogh_agent_id(::std::string* aogh_agent_id) {
  if (aogh_agent_id != NULL) {
    set_has_aogh_agent_id();
  } else {
    clear_has_aogh_agent_id();
  }
  aogh_agent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aogh_agent_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastEventProto.aogh_agent_id)
}

// repeated .metrics.CastLogsProto.CastEventProto.Metadata metadata = 14;
int CastLogsProto_CastEventProto::metadata_size() const {
  return metadata_.size();
}
void CastLogsProto_CastEventProto::clear_metadata() {
  metadata_.Clear();
}
const ::metrics::CastLogsProto_CastEventProto_Metadata& CastLogsProto_CastEventProto::metadata(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.metadata)
  return metadata_.Get(index);
}
::metrics::CastLogsProto_CastEventProto_Metadata* CastLogsProto_CastEventProto::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.metadata)
  return metadata_.Mutable(index);
}
::metrics::CastLogsProto_CastEventProto_Metadata* CastLogsProto_CastEventProto::add_metadata() {
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.CastEventProto.metadata)
  return metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto_Metadata >*
CastLogsProto_CastEventProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.CastEventProto.metadata)
  return &metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto_Metadata >&
CastLogsProto_CastEventProto::metadata() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.CastEventProto.metadata)
  return metadata_;
}

// repeated float feature_vector = 15;
int CastLogsProto_CastEventProto::feature_vector_size() const {
  return feature_vector_.size();
}
void CastLogsProto_CastEventProto::clear_feature_vector() {
  feature_vector_.Clear();
}
float CastLogsProto_CastEventProto::feature_vector(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.feature_vector)
  return feature_vector_.Get(index);
}
void CastLogsProto_CastEventProto::set_feature_vector(int index, float value) {
  feature_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.feature_vector)
}
void CastLogsProto_CastEventProto::add_feature_vector(float value) {
  feature_vector_.Add(value);
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.CastEventProto.feature_vector)
}
const ::google::protobuf::RepeatedField< float >&
CastLogsProto_CastEventProto::feature_vector() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.CastEventProto.feature_vector)
  return feature_vector_;
}
::google::protobuf::RepeatedField< float >*
CastLogsProto_CastEventProto::mutable_feature_vector() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.CastEventProto.feature_vector)
  return &feature_vector_;
}

// optional string timezone_id = 17;
bool CastLogsProto_CastEventProto::has_timezone_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto_CastEventProto::set_has_timezone_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto_CastEventProto::clear_has_timezone_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto_CastEventProto::clear_timezone_id() {
  timezone_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone_id();
}
const ::std::string& CastLogsProto_CastEventProto::timezone_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.timezone_id)
  return timezone_id_.GetNoArena();
}
void CastLogsProto_CastEventProto::set_timezone_id(const ::std::string& value) {
  set_has_timezone_id();
  timezone_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.timezone_id)
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::set_timezone_id(::std::string&& value) {
  set_has_timezone_id();
  timezone_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastEventProto.timezone_id)
}
#endif
void CastLogsProto_CastEventProto::set_timezone_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone_id();
  timezone_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.timezone_id)
}
void CastLogsProto_CastEventProto::set_timezone_id(const char* value, size_t size) {
  set_has_timezone_id();
  timezone_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.timezone_id)
}
::std::string* CastLogsProto_CastEventProto::mutable_timezone_id() {
  set_has_timezone_id();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.timezone_id)
  return timezone_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastEventProto::release_timezone_id() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastEventProto.timezone_id)
  clear_has_timezone_id();
  return timezone_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastEventProto::set_allocated_timezone_id(::std::string* timezone_id) {
  if (timezone_id != NULL) {
    set_has_timezone_id();
  } else {
    clear_has_timezone_id();
  }
  timezone_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastEventProto.timezone_id)
}

// optional string ui_version = 20;
bool CastLogsProto_CastEventProto::has_ui_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastLogsProto_CastEventProto::set_has_ui_version() {
  _has_bits_[0] |= 0x00000010u;
}
void CastLogsProto_CastEventProto::clear_has_ui_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastLogsProto_CastEventProto::clear_ui_version() {
  ui_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ui_version();
}
const ::std::string& CastLogsProto_CastEventProto::ui_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.ui_version)
  return ui_version_.GetNoArena();
}
void CastLogsProto_CastEventProto::set_ui_version(const ::std::string& value) {
  set_has_ui_version();
  ui_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.ui_version)
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::set_ui_version(::std::string&& value) {
  set_has_ui_version();
  ui_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastEventProto.ui_version)
}
#endif
void CastLogsProto_CastEventProto::set_ui_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ui_version();
  ui_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.ui_version)
}
void CastLogsProto_CastEventProto::set_ui_version(const char* value, size_t size) {
  set_has_ui_version();
  ui_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.ui_version)
}
::std::string* CastLogsProto_CastEventProto::mutable_ui_version() {
  set_has_ui_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.ui_version)
  return ui_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastEventProto::release_ui_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastEventProto.ui_version)
  clear_has_ui_version();
  return ui_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastEventProto::set_allocated_ui_version(::std::string* ui_version) {
  if (ui_version != NULL) {
    set_has_ui_version();
  } else {
    clear_has_ui_version();
  }
  ui_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ui_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastEventProto.ui_version)
}

// optional string selinux_audit_detail = 22;
bool CastLogsProto_CastEventProto::has_selinux_audit_detail() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CastLogsProto_CastEventProto::set_has_selinux_audit_detail() {
  _has_bits_[0] |= 0x00000040u;
}
void CastLogsProto_CastEventProto::clear_has_selinux_audit_detail() {
  _has_bits_[0] &= ~0x00000040u;
}
void CastLogsProto_CastEventProto::clear_selinux_audit_detail() {
  selinux_audit_detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_selinux_audit_detail();
}
const ::std::string& CastLogsProto_CastEventProto::selinux_audit_detail() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.selinux_audit_detail)
  return selinux_audit_detail_.GetNoArena();
}
void CastLogsProto_CastEventProto::set_selinux_audit_detail(const ::std::string& value) {
  set_has_selinux_audit_detail();
  selinux_audit_detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.selinux_audit_detail)
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::set_selinux_audit_detail(::std::string&& value) {
  set_has_selinux_audit_detail();
  selinux_audit_detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastEventProto.selinux_audit_detail)
}
#endif
void CastLogsProto_CastEventProto::set_selinux_audit_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_selinux_audit_detail();
  selinux_audit_detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.selinux_audit_detail)
}
void CastLogsProto_CastEventProto::set_selinux_audit_detail(const char* value, size_t size) {
  set_has_selinux_audit_detail();
  selinux_audit_detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.selinux_audit_detail)
}
::std::string* CastLogsProto_CastEventProto::mutable_selinux_audit_detail() {
  set_has_selinux_audit_detail();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.selinux_audit_detail)
  return selinux_audit_detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastEventProto::release_selinux_audit_detail() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastEventProto.selinux_audit_detail)
  clear_has_selinux_audit_detail();
  return selinux_audit_detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastEventProto::set_allocated_selinux_audit_detail(::std::string* selinux_audit_detail) {
  if (selinux_audit_detail != NULL) {
    set_has_selinux_audit_detail();
  } else {
    clear_has_selinux_audit_detail();
  }
  selinux_audit_detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selinux_audit_detail);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastEventProto.selinux_audit_detail)
}

// repeated string event_id_list = 23;
int CastLogsProto_CastEventProto::event_id_list_size() const {
  return event_id_list_.size();
}
void CastLogsProto_CastEventProto::clear_event_id_list() {
  event_id_list_.Clear();
}
const ::std::string& CastLogsProto_CastEventProto::event_id_list(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.event_id_list)
  return event_id_list_.Get(index);
}
::std::string* CastLogsProto_CastEventProto::mutable_event_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.event_id_list)
  return event_id_list_.Mutable(index);
}
void CastLogsProto_CastEventProto::set_event_id_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.event_id_list)
  event_id_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::set_event_id_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.event_id_list)
  event_id_list_.Mutable(index)->assign(std::move(value));
}
#endif
void CastLogsProto_CastEventProto::set_event_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  event_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.event_id_list)
}
void CastLogsProto_CastEventProto::set_event_id_list(int index, const char* value, size_t size) {
  event_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.event_id_list)
}
::std::string* CastLogsProto_CastEventProto::add_event_id_list() {
  // @@protoc_insertion_point(field_add_mutable:metrics.CastLogsProto.CastEventProto.event_id_list)
  return event_id_list_.Add();
}
void CastLogsProto_CastEventProto::add_event_id_list(const ::std::string& value) {
  event_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.CastEventProto.event_id_list)
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::add_event_id_list(::std::string&& value) {
  event_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.CastEventProto.event_id_list)
}
#endif
void CastLogsProto_CastEventProto::add_event_id_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  event_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metrics.CastLogsProto.CastEventProto.event_id_list)
}
void CastLogsProto_CastEventProto::add_event_id_list(const char* value, size_t size) {
  event_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metrics.CastLogsProto.CastEventProto.event_id_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CastLogsProto_CastEventProto::event_id_list() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.CastEventProto.event_id_list)
  return event_id_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CastLogsProto_CastEventProto::mutable_event_id_list() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.CastEventProto.event_id_list)
  return &event_id_list_;
}

// optional fixed64 duo_core_version = 24;
bool CastLogsProto_CastEventProto::has_duo_core_version() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_duo_core_version() {
  _has_bits_[0] |= 0x00400000u;
}
void CastLogsProto_CastEventProto::clear_has_duo_core_version() {
  _has_bits_[0] &= ~0x00400000u;
}
void CastLogsProto_CastEventProto::clear_duo_core_version() {
  duo_core_version_ = GOOGLE_ULONGLONG(0);
  clear_has_duo_core_version();
}
::google::protobuf::uint64 CastLogsProto_CastEventProto::duo_core_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.duo_core_version)
  return duo_core_version_;
}
void CastLogsProto_CastEventProto::set_duo_core_version(::google::protobuf::uint64 value) {
  set_has_duo_core_version();
  duo_core_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.duo_core_version)
}

// optional string hotword_model_id = 25;
bool CastLogsProto_CastEventProto::has_hotword_model_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CastLogsProto_CastEventProto::set_has_hotword_model_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CastLogsProto_CastEventProto::clear_has_hotword_model_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CastLogsProto_CastEventProto::clear_hotword_model_id() {
  hotword_model_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hotword_model_id();
}
const ::std::string& CastLogsProto_CastEventProto::hotword_model_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.hotword_model_id)
  return hotword_model_id_.GetNoArena();
}
void CastLogsProto_CastEventProto::set_hotword_model_id(const ::std::string& value) {
  set_has_hotword_model_id();
  hotword_model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.hotword_model_id)
}
#if LANG_CXX11
void CastLogsProto_CastEventProto::set_hotword_model_id(::std::string&& value) {
  set_has_hotword_model_id();
  hotword_model_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastEventProto.hotword_model_id)
}
#endif
void CastLogsProto_CastEventProto::set_hotword_model_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hotword_model_id();
  hotword_model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastEventProto.hotword_model_id)
}
void CastLogsProto_CastEventProto::set_hotword_model_id(const char* value, size_t size) {
  set_has_hotword_model_id();
  hotword_model_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastEventProto.hotword_model_id)
}
::std::string* CastLogsProto_CastEventProto::mutable_hotword_model_id() {
  set_has_hotword_model_id();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastEventProto.hotword_model_id)
  return hotword_model_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastEventProto::release_hotword_model_id() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastEventProto.hotword_model_id)
  clear_has_hotword_model_id();
  return hotword_model_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastEventProto::set_allocated_hotword_model_id(::std::string* hotword_model_id) {
  if (hotword_model_id != NULL) {
    set_has_hotword_model_id();
  } else {
    clear_has_hotword_model_id();
  }
  hotword_model_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotword_model_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastEventProto.hotword_model_id)
}

// optional .metrics.CastLogsProto.CastEventProto.LaunchFrom launch_from = 26;
bool CastLogsProto_CastEventProto::has_launch_from() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_launch_from() {
  _has_bits_[0] |= 0x00200000u;
}
void CastLogsProto_CastEventProto::clear_has_launch_from() {
  _has_bits_[0] &= ~0x00200000u;
}
void CastLogsProto_CastEventProto::clear_launch_from() {
  launch_from_ = 0;
  clear_has_launch_from();
}
::metrics::CastLogsProto_CastEventProto_LaunchFrom CastLogsProto_CastEventProto::launch_from() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.launch_from)
  return static_cast< ::metrics::CastLogsProto_CastEventProto_LaunchFrom >(launch_from_);
}
void CastLogsProto_CastEventProto::set_launch_from(::metrics::CastLogsProto_CastEventProto_LaunchFrom value) {
  assert(::metrics::CastLogsProto_CastEventProto_LaunchFrom_IsValid(value));
  set_has_launch_from();
  launch_from_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.launch_from)
}

// optional .metrics.CastLogsProto.CastEventProto.RuntimeType runtime_type = 27;
bool CastLogsProto_CastEventProto::has_runtime_type() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CastLogsProto_CastEventProto::set_has_runtime_type() {
  _has_bits_[0] |= 0x00800000u;
}
void CastLogsProto_CastEventProto::clear_has_runtime_type() {
  _has_bits_[0] &= ~0x00800000u;
}
void CastLogsProto_CastEventProto::clear_runtime_type() {
  runtime_type_ = 0;
  clear_has_runtime_type();
}
::metrics::CastLogsProto_CastEventProto_RuntimeType CastLogsProto_CastEventProto::runtime_type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastEventProto.runtime_type)
  return static_cast< ::metrics::CastLogsProto_CastEventProto_RuntimeType >(runtime_type_);
}
void CastLogsProto_CastEventProto::set_runtime_type(::metrics::CastLogsProto_CastEventProto_RuntimeType value) {
  assert(::metrics::CastLogsProto_CastEventProto_RuntimeType_IsValid(value));
  set_has_runtime_type();
  runtime_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastEventProto.runtime_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto_CastDeviceMutableInfo::kLastRebootTypeFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kSystemBuildNumberFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kBackdropAppDeviceIdFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kReleaseVersionFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kNetifIpVersionFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kIpDualStackSupportedFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kTimezoneIdFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kLatestUiVersionFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kGoogleWifiStationShmacFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kInstalledManifestPlatformVersionFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kInstalledManifestVersionFieldNumber;
const int CastLogsProto_CastDeviceMutableInfo::kSystemBundleVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto_CastDeviceMutableInfo::CastLogsProto_CastDeviceMutableInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto.CastDeviceMutableInfo)
}
CastLogsProto_CastDeviceMutableInfo::CastLogsProto_CastDeviceMutableInfo(const CastLogsProto_CastDeviceMutableInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  backdrop_app_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_backdrop_app_device_id()) {
    backdrop_app_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backdrop_app_device_id_);
  }
  timezone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_timezone_id()) {
    timezone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_id_);
  }
  latest_ui_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_latest_ui_version()) {
    latest_ui_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_ui_version_);
  }
  google_wifi_station_shmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_google_wifi_station_shmac()) {
    google_wifi_station_shmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.google_wifi_station_shmac_);
  }
  installed_manifest_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_installed_manifest_platform_version()) {
    installed_manifest_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.installed_manifest_platform_version_);
  }
  system_bundle_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_system_bundle_version()) {
    system_bundle_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_bundle_version_);
  }
  ::memcpy(&system_build_number_, &from.system_build_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&installed_manifest_version_) -
    reinterpret_cast<char*>(&system_build_number_)) + sizeof(installed_manifest_version_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto.CastDeviceMutableInfo)
}

void CastLogsProto_CastDeviceMutableInfo::SharedCtor() {
  _cached_size_ = 0;
  backdrop_app_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_ui_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_wifi_station_shmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  installed_manifest_platform_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_bundle_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&system_build_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&installed_manifest_version_) -
      reinterpret_cast<char*>(&system_build_number_)) + sizeof(installed_manifest_version_));
}

CastLogsProto_CastDeviceMutableInfo::~CastLogsProto_CastDeviceMutableInfo() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto.CastDeviceMutableInfo)
  SharedDtor();
}

void CastLogsProto_CastDeviceMutableInfo::SharedDtor() {
  backdrop_app_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latest_ui_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  google_wifi_station_shmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  installed_manifest_platform_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_bundle_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastLogsProto_CastDeviceMutableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastLogsProto_CastDeviceMutableInfo::descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CastLogsProto_CastDeviceMutableInfo& CastLogsProto_CastDeviceMutableInfo::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto_CastDeviceMutableInfo* CastLogsProto_CastDeviceMutableInfo::New(::google::protobuf::Arena* arena) const {
  CastLogsProto_CastDeviceMutableInfo* n = new CastLogsProto_CastDeviceMutableInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto_CastDeviceMutableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!backdrop_app_device_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*backdrop_app_device_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!timezone_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*timezone_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!latest_ui_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*latest_ui_version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!google_wifi_station_shmac_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*google_wifi_station_shmac_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!installed_manifest_platform_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*installed_manifest_platform_version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!system_bundle_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*system_bundle_version_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&system_build_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_reboot_type_) -
        reinterpret_cast<char*>(&system_build_number_)) + sizeof(last_reboot_type_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&release_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&installed_manifest_version_) -
        reinterpret_cast<char*>(&release_version_)) + sizeof(installed_manifest_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto_CastDeviceMutableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(value)) {
            set_last_reboot_type(static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 system_build_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_system_build_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &system_build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string backdrop_app_device_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backdrop_app_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backdrop_app_device_id().data(), static_cast<int>(this->backdrop_app_device_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 release_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_release_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &release_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(value)) {
            set_netif_ip_version(static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ip_dual_stack_supported = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ip_dual_stack_supported();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ip_dual_stack_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string timezone_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timezone_id().data(), static_cast<int>(this->timezone_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string latest_ui_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_ui_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->latest_ui_version().data(), static_cast<int>(this->latest_ui_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string google_wifi_station_shmac = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_google_wifi_station_shmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->google_wifi_station_shmac().data(), static_cast<int>(this->google_wifi_station_shmac().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string installed_manifest_platform_version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_installed_manifest_platform_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->installed_manifest_platform_version().data(), static_cast<int>(this->installed_manifest_platform_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 installed_manifest_version = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_installed_manifest_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &installed_manifest_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string system_bundle_version = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_bundle_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->system_bundle_version().data(), static_cast<int>(this->system_bundle_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto.CastDeviceMutableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto.CastDeviceMutableInfo)
  return false;
#undef DO_
}

void CastLogsProto_CastDeviceMutableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->last_reboot_type(), output);
  }

  // optional fixed64 system_build_number = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->system_build_number(), output);
  }

  // optional string backdrop_app_device_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backdrop_app_device_id().data(), static_cast<int>(this->backdrop_app_device_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backdrop_app_device_id(), output);
  }

  // optional fixed32 release_version = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->release_version(), output);
  }

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->netif_ip_version(), output);
  }

  // optional bool ip_dual_stack_supported = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ip_dual_stack_supported(), output);
  }

  // optional string timezone_id = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone_id().data(), static_cast<int>(this->timezone_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->timezone_id(), output);
  }

  // optional string latest_ui_version = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latest_ui_version().data(), static_cast<int>(this->latest_ui_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->latest_ui_version(), output);
  }

  // optional string google_wifi_station_shmac = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->google_wifi_station_shmac().data(), static_cast<int>(this->google_wifi_station_shmac().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->google_wifi_station_shmac(), output);
  }

  // optional string installed_manifest_platform_version = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->installed_manifest_platform_version().data(), static_cast<int>(this->installed_manifest_platform_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->installed_manifest_platform_version(), output);
  }

  // optional uint32 installed_manifest_version = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->installed_manifest_version(), output);
  }

  // optional string system_bundle_version = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_bundle_version().data(), static_cast<int>(this->system_bundle_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->system_bundle_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto.CastDeviceMutableInfo)
}

::google::protobuf::uint8* CastLogsProto_CastDeviceMutableInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->last_reboot_type(), target);
  }

  // optional fixed64 system_build_number = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->system_build_number(), target);
  }

  // optional string backdrop_app_device_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backdrop_app_device_id().data(), static_cast<int>(this->backdrop_app_device_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backdrop_app_device_id(), target);
  }

  // optional fixed32 release_version = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->release_version(), target);
  }

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->netif_ip_version(), target);
  }

  // optional bool ip_dual_stack_supported = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ip_dual_stack_supported(), target);
  }

  // optional string timezone_id = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timezone_id().data(), static_cast<int>(this->timezone_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timezone_id(), target);
  }

  // optional string latest_ui_version = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latest_ui_version().data(), static_cast<int>(this->latest_ui_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->latest_ui_version(), target);
  }

  // optional string google_wifi_station_shmac = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->google_wifi_station_shmac().data(), static_cast<int>(this->google_wifi_station_shmac().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->google_wifi_station_shmac(), target);
  }

  // optional string installed_manifest_platform_version = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->installed_manifest_platform_version().data(), static_cast<int>(this->installed_manifest_platform_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->installed_manifest_platform_version(), target);
  }

  // optional uint32 installed_manifest_version = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->installed_manifest_version(), target);
  }

  // optional string system_bundle_version = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->system_bundle_version().data(), static_cast<int>(this->system_bundle_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->system_bundle_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto.CastDeviceMutableInfo)
  return target;
}

size_t CastLogsProto_CastDeviceMutableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string backdrop_app_device_id = 3;
    if (has_backdrop_app_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backdrop_app_device_id());
    }

    // optional string timezone_id = 7;
    if (has_timezone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timezone_id());
    }

    // optional string latest_ui_version = 8;
    if (has_latest_ui_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latest_ui_version());
    }

    // optional string google_wifi_station_shmac = 9;
    if (has_google_wifi_station_shmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->google_wifi_station_shmac());
    }

    // optional string installed_manifest_platform_version = 10;
    if (has_installed_manifest_platform_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->installed_manifest_platform_version());
    }

    // optional string system_bundle_version = 12;
    if (has_system_bundle_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_bundle_version());
    }

    // optional fixed64 system_build_number = 2;
    if (has_system_build_number()) {
      total_size += 1 + 8;
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
    if (has_last_reboot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->last_reboot_type());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional fixed32 release_version = 4;
    if (has_release_version()) {
      total_size += 1 + 4;
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
    if (has_netif_ip_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->netif_ip_version());
    }

    // optional bool ip_dual_stack_supported = 6;
    if (has_ip_dual_stack_supported()) {
      total_size += 1 + 1;
    }

    // optional uint32 installed_manifest_version = 11;
    if (has_installed_manifest_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->installed_manifest_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto_CastDeviceMutableInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CastLogsProto_CastDeviceMutableInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CastLogsProto_CastDeviceMutableInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CastLogsProto.CastDeviceMutableInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CastLogsProto.CastDeviceMutableInfo)
    MergeFrom(*source);
  }
}

void CastLogsProto_CastDeviceMutableInfo::MergeFrom(const CastLogsProto_CastDeviceMutableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_backdrop_app_device_id();
      backdrop_app_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backdrop_app_device_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_timezone_id();
      timezone_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_latest_ui_version();
      latest_ui_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latest_ui_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_google_wifi_station_shmac();
      google_wifi_station_shmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.google_wifi_station_shmac_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_installed_manifest_platform_version();
      installed_manifest_platform_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.installed_manifest_platform_version_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_system_bundle_version();
      system_bundle_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_bundle_version_);
    }
    if (cached_has_bits & 0x00000040u) {
      system_build_number_ = from.system_build_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_reboot_type_ = from.last_reboot_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      release_version_ = from.release_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      netif_ip_version_ = from.netif_ip_version_;
    }
    if (cached_has_bits & 0x00000400u) {
      ip_dual_stack_supported_ = from.ip_dual_stack_supported_;
    }
    if (cached_has_bits & 0x00000800u) {
      installed_manifest_version_ = from.installed_manifest_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto_CastDeviceMutableInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastLogsProto_CastDeviceMutableInfo::CopyFrom(const CastLogsProto_CastDeviceMutableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto.CastDeviceMutableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto_CastDeviceMutableInfo::IsInitialized() const {
  return true;
}

void CastLogsProto_CastDeviceMutableInfo::Swap(CastLogsProto_CastDeviceMutableInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto_CastDeviceMutableInfo::InternalSwap(CastLogsProto_CastDeviceMutableInfo* other) {
  using std::swap;
  backdrop_app_device_id_.Swap(&other->backdrop_app_device_id_);
  timezone_id_.Swap(&other->timezone_id_);
  latest_ui_version_.Swap(&other->latest_ui_version_);
  google_wifi_station_shmac_.Swap(&other->google_wifi_station_shmac_);
  installed_manifest_platform_version_.Swap(&other->installed_manifest_platform_version_);
  system_bundle_version_.Swap(&other->system_bundle_version_);
  swap(system_build_number_, other->system_build_number_);
  swap(last_reboot_type_, other->last_reboot_type_);
  swap(release_version_, other->release_version_);
  swap(netif_ip_version_, other->netif_ip_version_);
  swap(ip_dual_stack_supported_, other->ip_dual_stack_supported_);
  swap(installed_manifest_version_, other->installed_manifest_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastLogsProto_CastDeviceMutableInfo::GetMetadata() const {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto_CastDeviceMutableInfo

// optional .metrics.CastLogsProto.CastDeviceMutableInfo.RebootType last_reboot_type = 1;
bool CastLogsProto_CastDeviceMutableInfo::has_last_reboot_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_last_reboot_type() {
  _has_bits_[0] |= 0x00000080u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_last_reboot_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_last_reboot_type() {
  last_reboot_type_ = 0;
  clear_has_last_reboot_type();
}
::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType CastLogsProto_CastDeviceMutableInfo::last_reboot_type() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.last_reboot_type)
  return static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType >(last_reboot_type_);
}
void CastLogsProto_CastDeviceMutableInfo::set_last_reboot_type(::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType value) {
  assert(::metrics::CastLogsProto_CastDeviceMutableInfo_RebootType_IsValid(value));
  set_has_last_reboot_type();
  last_reboot_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.last_reboot_type)
}

// optional fixed64 system_build_number = 2;
bool CastLogsProto_CastDeviceMutableInfo::has_system_build_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_system_build_number() {
  _has_bits_[0] |= 0x00000040u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_system_build_number() {
  _has_bits_[0] &= ~0x00000040u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_system_build_number() {
  system_build_number_ = GOOGLE_ULONGLONG(0);
  clear_has_system_build_number();
}
::google::protobuf::uint64 CastLogsProto_CastDeviceMutableInfo::system_build_number() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.system_build_number)
  return system_build_number_;
}
void CastLogsProto_CastDeviceMutableInfo::set_system_build_number(::google::protobuf::uint64 value) {
  set_has_system_build_number();
  system_build_number_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.system_build_number)
}

// optional string backdrop_app_device_id = 3;
bool CastLogsProto_CastDeviceMutableInfo::has_backdrop_app_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_backdrop_app_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_backdrop_app_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_backdrop_app_device_id() {
  backdrop_app_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_backdrop_app_device_id();
}
const ::std::string& CastLogsProto_CastDeviceMutableInfo::backdrop_app_device_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
  return backdrop_app_device_id_.GetNoArena();
}
void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(const ::std::string& value) {
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(::std::string&& value) {
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
#endif
void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
void CastLogsProto_CastDeviceMutableInfo::set_backdrop_app_device_id(const char* value, size_t size) {
  set_has_backdrop_app_device_id();
  backdrop_app_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}
::std::string* CastLogsProto_CastDeviceMutableInfo::mutable_backdrop_app_device_id() {
  set_has_backdrop_app_device_id();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
  return backdrop_app_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceMutableInfo::release_backdrop_app_device_id() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
  clear_has_backdrop_app_device_id();
  return backdrop_app_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceMutableInfo::set_allocated_backdrop_app_device_id(::std::string* backdrop_app_device_id) {
  if (backdrop_app_device_id != NULL) {
    set_has_backdrop_app_device_id();
  } else {
    clear_has_backdrop_app_device_id();
  }
  backdrop_app_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backdrop_app_device_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceMutableInfo.backdrop_app_device_id)
}

// optional fixed32 release_version = 4;
bool CastLogsProto_CastDeviceMutableInfo::has_release_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_release_version() {
  _has_bits_[0] |= 0x00000100u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_release_version() {
  _has_bits_[0] &= ~0x00000100u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_release_version() {
  release_version_ = 0u;
  clear_has_release_version();
}
::google::protobuf::uint32 CastLogsProto_CastDeviceMutableInfo::release_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.release_version)
  return release_version_;
}
void CastLogsProto_CastDeviceMutableInfo::set_release_version(::google::protobuf::uint32 value) {
  set_has_release_version();
  release_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.release_version)
}

// optional .metrics.CastLogsProto.CastDeviceMutableInfo.NetifIPVersion netif_ip_version = 5;
bool CastLogsProto_CastDeviceMutableInfo::has_netif_ip_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_netif_ip_version() {
  _has_bits_[0] |= 0x00000200u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_netif_ip_version() {
  _has_bits_[0] &= ~0x00000200u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_netif_ip_version() {
  netif_ip_version_ = 0;
  clear_has_netif_ip_version();
}
::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion CastLogsProto_CastDeviceMutableInfo::netif_ip_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.netif_ip_version)
  return static_cast< ::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion >(netif_ip_version_);
}
void CastLogsProto_CastDeviceMutableInfo::set_netif_ip_version(::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion value) {
  assert(::metrics::CastLogsProto_CastDeviceMutableInfo_NetifIPVersion_IsValid(value));
  set_has_netif_ip_version();
  netif_ip_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.netif_ip_version)
}

// optional bool ip_dual_stack_supported = 6;
bool CastLogsProto_CastDeviceMutableInfo::has_ip_dual_stack_supported() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_ip_dual_stack_supported() {
  _has_bits_[0] |= 0x00000400u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_ip_dual_stack_supported() {
  _has_bits_[0] &= ~0x00000400u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_ip_dual_stack_supported() {
  ip_dual_stack_supported_ = false;
  clear_has_ip_dual_stack_supported();
}
bool CastLogsProto_CastDeviceMutableInfo::ip_dual_stack_supported() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.ip_dual_stack_supported)
  return ip_dual_stack_supported_;
}
void CastLogsProto_CastDeviceMutableInfo::set_ip_dual_stack_supported(bool value) {
  set_has_ip_dual_stack_supported();
  ip_dual_stack_supported_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.ip_dual_stack_supported)
}

// optional string timezone_id = 7;
bool CastLogsProto_CastDeviceMutableInfo::has_timezone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_timezone_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_timezone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_timezone_id() {
  timezone_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timezone_id();
}
const ::std::string& CastLogsProto_CastDeviceMutableInfo::timezone_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id)
  return timezone_id_.GetNoArena();
}
void CastLogsProto_CastDeviceMutableInfo::set_timezone_id(const ::std::string& value) {
  set_has_timezone_id();
  timezone_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceMutableInfo::set_timezone_id(::std::string&& value) {
  set_has_timezone_id();
  timezone_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id)
}
#endif
void CastLogsProto_CastDeviceMutableInfo::set_timezone_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_timezone_id();
  timezone_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id)
}
void CastLogsProto_CastDeviceMutableInfo::set_timezone_id(const char* value, size_t size) {
  set_has_timezone_id();
  timezone_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id)
}
::std::string* CastLogsProto_CastDeviceMutableInfo::mutable_timezone_id() {
  set_has_timezone_id();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id)
  return timezone_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceMutableInfo::release_timezone_id() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id)
  clear_has_timezone_id();
  return timezone_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceMutableInfo::set_allocated_timezone_id(::std::string* timezone_id) {
  if (timezone_id != NULL) {
    set_has_timezone_id();
  } else {
    clear_has_timezone_id();
  }
  timezone_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceMutableInfo.timezone_id)
}

// optional string latest_ui_version = 8;
bool CastLogsProto_CastDeviceMutableInfo::has_latest_ui_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_latest_ui_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_latest_ui_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_latest_ui_version() {
  latest_ui_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_latest_ui_version();
}
const ::std::string& CastLogsProto_CastDeviceMutableInfo::latest_ui_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version)
  return latest_ui_version_.GetNoArena();
}
void CastLogsProto_CastDeviceMutableInfo::set_latest_ui_version(const ::std::string& value) {
  set_has_latest_ui_version();
  latest_ui_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceMutableInfo::set_latest_ui_version(::std::string&& value) {
  set_has_latest_ui_version();
  latest_ui_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version)
}
#endif
void CastLogsProto_CastDeviceMutableInfo::set_latest_ui_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_latest_ui_version();
  latest_ui_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version)
}
void CastLogsProto_CastDeviceMutableInfo::set_latest_ui_version(const char* value, size_t size) {
  set_has_latest_ui_version();
  latest_ui_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version)
}
::std::string* CastLogsProto_CastDeviceMutableInfo::mutable_latest_ui_version() {
  set_has_latest_ui_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version)
  return latest_ui_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceMutableInfo::release_latest_ui_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version)
  clear_has_latest_ui_version();
  return latest_ui_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceMutableInfo::set_allocated_latest_ui_version(::std::string* latest_ui_version) {
  if (latest_ui_version != NULL) {
    set_has_latest_ui_version();
  } else {
    clear_has_latest_ui_version();
  }
  latest_ui_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latest_ui_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceMutableInfo.latest_ui_version)
}

// optional string google_wifi_station_shmac = 9;
bool CastLogsProto_CastDeviceMutableInfo::has_google_wifi_station_shmac() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_google_wifi_station_shmac() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_google_wifi_station_shmac() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_google_wifi_station_shmac() {
  google_wifi_station_shmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_google_wifi_station_shmac();
}
const ::std::string& CastLogsProto_CastDeviceMutableInfo::google_wifi_station_shmac() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac)
  return google_wifi_station_shmac_.GetNoArena();
}
void CastLogsProto_CastDeviceMutableInfo::set_google_wifi_station_shmac(const ::std::string& value) {
  set_has_google_wifi_station_shmac();
  google_wifi_station_shmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceMutableInfo::set_google_wifi_station_shmac(::std::string&& value) {
  set_has_google_wifi_station_shmac();
  google_wifi_station_shmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac)
}
#endif
void CastLogsProto_CastDeviceMutableInfo::set_google_wifi_station_shmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_google_wifi_station_shmac();
  google_wifi_station_shmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac)
}
void CastLogsProto_CastDeviceMutableInfo::set_google_wifi_station_shmac(const char* value, size_t size) {
  set_has_google_wifi_station_shmac();
  google_wifi_station_shmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac)
}
::std::string* CastLogsProto_CastDeviceMutableInfo::mutable_google_wifi_station_shmac() {
  set_has_google_wifi_station_shmac();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac)
  return google_wifi_station_shmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceMutableInfo::release_google_wifi_station_shmac() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac)
  clear_has_google_wifi_station_shmac();
  return google_wifi_station_shmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceMutableInfo::set_allocated_google_wifi_station_shmac(::std::string* google_wifi_station_shmac) {
  if (google_wifi_station_shmac != NULL) {
    set_has_google_wifi_station_shmac();
  } else {
    clear_has_google_wifi_station_shmac();
  }
  google_wifi_station_shmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), google_wifi_station_shmac);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceMutableInfo.google_wifi_station_shmac)
}

// optional string installed_manifest_platform_version = 10;
bool CastLogsProto_CastDeviceMutableInfo::has_installed_manifest_platform_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_installed_manifest_platform_version() {
  _has_bits_[0] |= 0x00000010u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_installed_manifest_platform_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_installed_manifest_platform_version() {
  installed_manifest_platform_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_installed_manifest_platform_version();
}
const ::std::string& CastLogsProto_CastDeviceMutableInfo::installed_manifest_platform_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version)
  return installed_manifest_platform_version_.GetNoArena();
}
void CastLogsProto_CastDeviceMutableInfo::set_installed_manifest_platform_version(const ::std::string& value) {
  set_has_installed_manifest_platform_version();
  installed_manifest_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceMutableInfo::set_installed_manifest_platform_version(::std::string&& value) {
  set_has_installed_manifest_platform_version();
  installed_manifest_platform_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version)
}
#endif
void CastLogsProto_CastDeviceMutableInfo::set_installed_manifest_platform_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_installed_manifest_platform_version();
  installed_manifest_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version)
}
void CastLogsProto_CastDeviceMutableInfo::set_installed_manifest_platform_version(const char* value, size_t size) {
  set_has_installed_manifest_platform_version();
  installed_manifest_platform_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version)
}
::std::string* CastLogsProto_CastDeviceMutableInfo::mutable_installed_manifest_platform_version() {
  set_has_installed_manifest_platform_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version)
  return installed_manifest_platform_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceMutableInfo::release_installed_manifest_platform_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version)
  clear_has_installed_manifest_platform_version();
  return installed_manifest_platform_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceMutableInfo::set_allocated_installed_manifest_platform_version(::std::string* installed_manifest_platform_version) {
  if (installed_manifest_platform_version != NULL) {
    set_has_installed_manifest_platform_version();
  } else {
    clear_has_installed_manifest_platform_version();
  }
  installed_manifest_platform_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), installed_manifest_platform_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_platform_version)
}

// optional uint32 installed_manifest_version = 11;
bool CastLogsProto_CastDeviceMutableInfo::has_installed_manifest_version() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_installed_manifest_version() {
  _has_bits_[0] |= 0x00000800u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_installed_manifest_version() {
  _has_bits_[0] &= ~0x00000800u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_installed_manifest_version() {
  installed_manifest_version_ = 0u;
  clear_has_installed_manifest_version();
}
::google::protobuf::uint32 CastLogsProto_CastDeviceMutableInfo::installed_manifest_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_version)
  return installed_manifest_version_;
}
void CastLogsProto_CastDeviceMutableInfo::set_installed_manifest_version(::google::protobuf::uint32 value) {
  set_has_installed_manifest_version();
  installed_manifest_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.installed_manifest_version)
}

// optional string system_bundle_version = 12;
bool CastLogsProto_CastDeviceMutableInfo::has_system_bundle_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CastLogsProto_CastDeviceMutableInfo::set_has_system_bundle_version() {
  _has_bits_[0] |= 0x00000020u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_has_system_bundle_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void CastLogsProto_CastDeviceMutableInfo::clear_system_bundle_version() {
  system_bundle_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_system_bundle_version();
}
const ::std::string& CastLogsProto_CastDeviceMutableInfo::system_bundle_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version)
  return system_bundle_version_.GetNoArena();
}
void CastLogsProto_CastDeviceMutableInfo::set_system_bundle_version(const ::std::string& value) {
  set_has_system_bundle_version();
  system_bundle_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version)
}
#if LANG_CXX11
void CastLogsProto_CastDeviceMutableInfo::set_system_bundle_version(::std::string&& value) {
  set_has_system_bundle_version();
  system_bundle_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version)
}
#endif
void CastLogsProto_CastDeviceMutableInfo::set_system_bundle_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_system_bundle_version();
  system_bundle_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version)
}
void CastLogsProto_CastDeviceMutableInfo::set_system_bundle_version(const char* value, size_t size) {
  set_has_system_bundle_version();
  system_bundle_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version)
}
::std::string* CastLogsProto_CastDeviceMutableInfo::mutable_system_bundle_version() {
  set_has_system_bundle_version();
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version)
  return system_bundle_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CastLogsProto_CastDeviceMutableInfo::release_system_bundle_version() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version)
  clear_has_system_bundle_version();
  return system_bundle_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CastLogsProto_CastDeviceMutableInfo::set_allocated_system_bundle_version(::std::string* system_bundle_version) {
  if (system_bundle_version != NULL) {
    set_has_system_bundle_version();
  } else {
    clear_has_system_bundle_version();
  }
  system_bundle_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_bundle_version);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.CastDeviceMutableInfo.system_bundle_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastLogsProto::kCastDeviceInfoFieldNumber;
const int CastLogsProto::kCastConnectionInfoFieldNumber;
const int CastLogsProto::kCastEventFieldNumber;
const int CastLogsProto::kVirtualReleaseTrackFieldNumber;
const int CastLogsProto::kCastDeviceMutableInfoFieldNumber;
const int CastLogsProto::kReceiverMetricsIdFieldNumber;
const int CastLogsProto::kEphemeralIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastLogsProto::CastLogsProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cast_5flogs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastLogsProto)
}
CastLogsProto::CastLogsProto(const CastLogsProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cast_connection_info_(from.cast_connection_info_),
      cast_event_(from.cast_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cast_device_info()) {
    cast_device_info_ = new ::metrics::CastLogsProto_CastDeviceInfo(*from.cast_device_info_);
  } else {
    cast_device_info_ = NULL;
  }
  if (from.has_cast_device_mutable_info()) {
    cast_device_mutable_info_ = new ::metrics::CastLogsProto_CastDeviceMutableInfo(*from.cast_device_mutable_info_);
  } else {
    cast_device_mutable_info_ = NULL;
  }
  ::memcpy(&receiver_metrics_id_, &from.receiver_metrics_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_release_track_) -
    reinterpret_cast<char*>(&receiver_metrics_id_)) + sizeof(virtual_release_track_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastLogsProto)
}

void CastLogsProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cast_device_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_release_track_) -
      reinterpret_cast<char*>(&cast_device_info_)) + sizeof(virtual_release_track_));
}

CastLogsProto::~CastLogsProto() {
  // @@protoc_insertion_point(destructor:metrics.CastLogsProto)
  SharedDtor();
}

void CastLogsProto::SharedDtor() {
  if (this != internal_default_instance()) delete cast_device_info_;
  if (this != internal_default_instance()) delete cast_device_mutable_info_;
}

void CastLogsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CastLogsProto::descriptor() {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CastLogsProto& CastLogsProto::default_instance() {
  protobuf_cast_5flogs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CastLogsProto* CastLogsProto::New(::google::protobuf::Arena* arena) const {
  CastLogsProto* n = new CastLogsProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CastLogsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastLogsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cast_connection_info_.Clear();
  cast_event_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cast_device_info_ != NULL);
      cast_device_info_->::metrics::CastLogsProto_CastDeviceInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cast_device_mutable_info_ != NULL);
      cast_device_mutable_info_->::metrics::CastLogsProto_CastDeviceMutableInfo::Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&receiver_metrics_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_release_track_) -
        reinterpret_cast<char*>(&receiver_metrics_id_)) + sizeof(virtual_release_track_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastLogsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:metrics.CastLogsProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cast_device_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cast_connection_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cast_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 virtual_release_track = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_virtual_release_track();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &virtual_release_track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cast_device_mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 receiver_metrics_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_receiver_metrics_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiver_metrics_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ephemeral_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ephemeral_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ephemeral_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastLogsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastLogsProto)
  return false;
#undef DO_
}

void CastLogsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastLogsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cast_device_info_, output);
  }

  // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cast_connection_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cast_connection_info(static_cast<int>(i)), output);
  }

  // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cast_event_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cast_event(static_cast<int>(i)), output);
  }

  // optional fixed32 virtual_release_track = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->virtual_release_track(), output);
  }

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cast_device_mutable_info_, output);
  }

  // optional fixed64 receiver_metrics_id = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->receiver_metrics_id(), output);
  }

  // optional uint64 ephemeral_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->ephemeral_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:metrics.CastLogsProto)
}

::google::protobuf::uint8* CastLogsProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:metrics.CastLogsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cast_device_info_, deterministic, target);
  }

  // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cast_connection_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->cast_connection_info(static_cast<int>(i)), deterministic, target);
  }

  // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cast_event_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->cast_event(static_cast<int>(i)), deterministic, target);
  }

  // optional fixed32 virtual_release_track = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->virtual_release_track(), target);
  }

  // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cast_device_mutable_info_, deterministic, target);
  }

  // optional fixed64 receiver_metrics_id = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->receiver_metrics_id(), target);
  }

  // optional uint64 ephemeral_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->ephemeral_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metrics.CastLogsProto)
  return target;
}

size_t CastLogsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastLogsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cast_connection_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cast_connection_info(static_cast<int>(i)));
    }
  }

  // repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cast_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cast_event(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
    if (has_cast_device_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cast_device_info_);
    }

    // optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
    if (has_cast_device_mutable_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cast_device_mutable_info_);
    }

    // optional fixed64 receiver_metrics_id = 6;
    if (has_receiver_metrics_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 ephemeral_id = 7;
    if (has_ephemeral_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ephemeral_id());
    }

    // optional fixed32 virtual_release_track = 4;
    if (has_virtual_release_track()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastLogsProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:metrics.CastLogsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CastLogsProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CastLogsProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:metrics.CastLogsProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:metrics.CastLogsProto)
    MergeFrom(*source);
  }
}

void CastLogsProto::MergeFrom(const CastLogsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastLogsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cast_connection_info_.MergeFrom(from.cast_connection_info_);
  cast_event_.MergeFrom(from.cast_event_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cast_device_info()->::metrics::CastLogsProto_CastDeviceInfo::MergeFrom(from.cast_device_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cast_device_mutable_info()->::metrics::CastLogsProto_CastDeviceMutableInfo::MergeFrom(from.cast_device_mutable_info());
    }
    if (cached_has_bits & 0x00000004u) {
      receiver_metrics_id_ = from.receiver_metrics_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ephemeral_id_ = from.ephemeral_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      virtual_release_track_ = from.virtual_release_track_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastLogsProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:metrics.CastLogsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CastLogsProto::CopyFrom(const CastLogsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastLogsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastLogsProto::IsInitialized() const {
  return true;
}

void CastLogsProto::Swap(CastLogsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastLogsProto::InternalSwap(CastLogsProto* other) {
  using std::swap;
  cast_connection_info_.InternalSwap(&other->cast_connection_info_);
  cast_event_.InternalSwap(&other->cast_event_);
  swap(cast_device_info_, other->cast_device_info_);
  swap(cast_device_mutable_info_, other->cast_device_mutable_info_);
  swap(receiver_metrics_id_, other->receiver_metrics_id_);
  swap(ephemeral_id_, other->ephemeral_id_);
  swap(virtual_release_track_, other->virtual_release_track_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CastLogsProto::GetMetadata() const {
  protobuf_cast_5flogs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cast_5flogs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CastLogsProto

// optional .metrics.CastLogsProto.CastDeviceInfo cast_device_info = 1;
bool CastLogsProto::has_cast_device_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CastLogsProto::set_has_cast_device_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CastLogsProto::clear_has_cast_device_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CastLogsProto::clear_cast_device_info() {
  if (cast_device_info_ != NULL) cast_device_info_->::metrics::CastLogsProto_CastDeviceInfo::Clear();
  clear_has_cast_device_info();
}
const ::metrics::CastLogsProto_CastDeviceInfo& CastLogsProto::cast_device_info() const {
  const ::metrics::CastLogsProto_CastDeviceInfo* p = cast_device_info_;
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_device_info)
  return p != NULL ? *p : *reinterpret_cast<const ::metrics::CastLogsProto_CastDeviceInfo*>(
      &::metrics::_CastLogsProto_CastDeviceInfo_default_instance_);
}
::metrics::CastLogsProto_CastDeviceInfo* CastLogsProto::mutable_cast_device_info() {
  set_has_cast_device_info();
  if (cast_device_info_ == NULL) {
    cast_device_info_ = new ::metrics::CastLogsProto_CastDeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_device_info)
  return cast_device_info_;
}
::metrics::CastLogsProto_CastDeviceInfo* CastLogsProto::release_cast_device_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.cast_device_info)
  clear_has_cast_device_info();
  ::metrics::CastLogsProto_CastDeviceInfo* temp = cast_device_info_;
  cast_device_info_ = NULL;
  return temp;
}
void CastLogsProto::set_allocated_cast_device_info(::metrics::CastLogsProto_CastDeviceInfo* cast_device_info) {
  delete cast_device_info_;
  cast_device_info_ = cast_device_info;
  if (cast_device_info) {
    set_has_cast_device_info();
  } else {
    clear_has_cast_device_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.cast_device_info)
}

// repeated .metrics.CastLogsProto.CastConnectionInfo cast_connection_info = 2;
int CastLogsProto::cast_connection_info_size() const {
  return cast_connection_info_.size();
}
void CastLogsProto::clear_cast_connection_info() {
  cast_connection_info_.Clear();
}
const ::metrics::CastLogsProto_CastConnectionInfo& CastLogsProto::cast_connection_info(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_.Get(index);
}
::metrics::CastLogsProto_CastConnectionInfo* CastLogsProto::mutable_cast_connection_info(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_.Mutable(index);
}
::metrics::CastLogsProto_CastConnectionInfo* CastLogsProto::add_cast_connection_info() {
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastConnectionInfo >*
CastLogsProto::mutable_cast_connection_info() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.cast_connection_info)
  return &cast_connection_info_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastConnectionInfo >&
CastLogsProto::cast_connection_info() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.cast_connection_info)
  return cast_connection_info_;
}

// repeated .metrics.CastLogsProto.CastEventProto cast_event = 3;
int CastLogsProto::cast_event_size() const {
  return cast_event_.size();
}
void CastLogsProto::clear_cast_event() {
  cast_event_.Clear();
}
const ::metrics::CastLogsProto_CastEventProto& CastLogsProto::cast_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_event)
  return cast_event_.Get(index);
}
::metrics::CastLogsProto_CastEventProto* CastLogsProto::mutable_cast_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_event)
  return cast_event_.Mutable(index);
}
::metrics::CastLogsProto_CastEventProto* CastLogsProto::add_cast_event() {
  // @@protoc_insertion_point(field_add:metrics.CastLogsProto.cast_event)
  return cast_event_.Add();
}
::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto >*
CastLogsProto::mutable_cast_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastLogsProto.cast_event)
  return &cast_event_;
}
const ::google::protobuf::RepeatedPtrField< ::metrics::CastLogsProto_CastEventProto >&
CastLogsProto::cast_event() const {
  // @@protoc_insertion_point(field_list:metrics.CastLogsProto.cast_event)
  return cast_event_;
}

// optional fixed32 virtual_release_track = 4;
bool CastLogsProto::has_virtual_release_track() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CastLogsProto::set_has_virtual_release_track() {
  _has_bits_[0] |= 0x00000010u;
}
void CastLogsProto::clear_has_virtual_release_track() {
  _has_bits_[0] &= ~0x00000010u;
}
void CastLogsProto::clear_virtual_release_track() {
  virtual_release_track_ = 0u;
  clear_has_virtual_release_track();
}
::google::protobuf::uint32 CastLogsProto::virtual_release_track() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.virtual_release_track)
  return virtual_release_track_;
}
void CastLogsProto::set_virtual_release_track(::google::protobuf::uint32 value) {
  set_has_virtual_release_track();
  virtual_release_track_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.virtual_release_track)
}

// optional .metrics.CastLogsProto.CastDeviceMutableInfo cast_device_mutable_info = 5;
bool CastLogsProto::has_cast_device_mutable_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CastLogsProto::set_has_cast_device_mutable_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CastLogsProto::clear_has_cast_device_mutable_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CastLogsProto::clear_cast_device_mutable_info() {
  if (cast_device_mutable_info_ != NULL) cast_device_mutable_info_->::metrics::CastLogsProto_CastDeviceMutableInfo::Clear();
  clear_has_cast_device_mutable_info();
}
const ::metrics::CastLogsProto_CastDeviceMutableInfo& CastLogsProto::cast_device_mutable_info() const {
  const ::metrics::CastLogsProto_CastDeviceMutableInfo* p = cast_device_mutable_info_;
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.cast_device_mutable_info)
  return p != NULL ? *p : *reinterpret_cast<const ::metrics::CastLogsProto_CastDeviceMutableInfo*>(
      &::metrics::_CastLogsProto_CastDeviceMutableInfo_default_instance_);
}
::metrics::CastLogsProto_CastDeviceMutableInfo* CastLogsProto::mutable_cast_device_mutable_info() {
  set_has_cast_device_mutable_info();
  if (cast_device_mutable_info_ == NULL) {
    cast_device_mutable_info_ = new ::metrics::CastLogsProto_CastDeviceMutableInfo;
  }
  // @@protoc_insertion_point(field_mutable:metrics.CastLogsProto.cast_device_mutable_info)
  return cast_device_mutable_info_;
}
::metrics::CastLogsProto_CastDeviceMutableInfo* CastLogsProto::release_cast_device_mutable_info() {
  // @@protoc_insertion_point(field_release:metrics.CastLogsProto.cast_device_mutable_info)
  clear_has_cast_device_mutable_info();
  ::metrics::CastLogsProto_CastDeviceMutableInfo* temp = cast_device_mutable_info_;
  cast_device_mutable_info_ = NULL;
  return temp;
}
void CastLogsProto::set_allocated_cast_device_mutable_info(::metrics::CastLogsProto_CastDeviceMutableInfo* cast_device_mutable_info) {
  delete cast_device_mutable_info_;
  cast_device_mutable_info_ = cast_device_mutable_info;
  if (cast_device_mutable_info) {
    set_has_cast_device_mutable_info();
  } else {
    clear_has_cast_device_mutable_info();
  }
  // @@protoc_insertion_point(field_set_allocated:metrics.CastLogsProto.cast_device_mutable_info)
}

// optional fixed64 receiver_metrics_id = 6;
bool CastLogsProto::has_receiver_metrics_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CastLogsProto::set_has_receiver_metrics_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CastLogsProto::clear_has_receiver_metrics_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CastLogsProto::clear_receiver_metrics_id() {
  receiver_metrics_id_ = GOOGLE_ULONGLONG(0);
  clear_has_receiver_metrics_id();
}
::google::protobuf::uint64 CastLogsProto::receiver_metrics_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.receiver_metrics_id)
  return receiver_metrics_id_;
}
void CastLogsProto::set_receiver_metrics_id(::google::protobuf::uint64 value) {
  set_has_receiver_metrics_id();
  receiver_metrics_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.receiver_metrics_id)
}

// optional uint64 ephemeral_id = 7;
bool CastLogsProto::has_ephemeral_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CastLogsProto::set_has_ephemeral_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CastLogsProto::clear_has_ephemeral_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CastLogsProto::clear_ephemeral_id() {
  ephemeral_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ephemeral_id();
}
::google::protobuf::uint64 CastLogsProto::ephemeral_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastLogsProto.ephemeral_id)
  return ephemeral_id_;
}
void CastLogsProto::set_ephemeral_id(::google::protobuf::uint64 value) {
  set_has_ephemeral_id();
  ephemeral_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastLogsProto.ephemeral_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)
