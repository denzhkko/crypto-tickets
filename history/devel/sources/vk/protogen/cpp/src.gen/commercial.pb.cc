// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commercial.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commercial.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {
namespace commercial {
class VidQueriesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VidQueries>
     _instance;
} _VidQueries_default_instance_;
class RidQueriesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RidQueries>
     _instance;
} _RidQueries_default_instance_;

namespace protobuf_commercial_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidQueries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidQueries, vid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VidQueries, queries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidQueries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidQueries, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RidQueries, queries_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(VidQueries)},
  { 7, -1, sizeof(RidQueries)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_VidQueries_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RidQueries_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "commercial.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::gogo::protobuf_options_2eproto::InitDefaults();
  _VidQueries_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VidQueries_default_instance_);_RidQueries_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RidQueries_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020commercial.proto\022\rpb.commercial\032\roptio"
      "ns.proto\"D\n\nVidQueries\022\026\n\003vid\030\001 \001(\004B\t\222\265\030"
      "\005\n\003vid\022\036\n\007queries\030\002 \003(\tB\r\222\265\030\t\n\007queries\"D"
      "\n\nRidQueries\022\026\n\003rid\030\001 \001(\rB\t\222\265\030\005\n\003rid\022\036\n\007"
      "queries\030\002 \003(\tB\r\222\265\030\t\n\007queriesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commercial.proto", &protobuf_RegisterTypes);
  ::gogo::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_commercial_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VidQueries::kVidFieldNumber;
const int VidQueries::kQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VidQueries::VidQueries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commercial_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.commercial.VidQueries)
}
VidQueries::VidQueries(const VidQueries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queries_(from.queries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vid_ = from.vid_;
  // @@protoc_insertion_point(copy_constructor:pb.commercial.VidQueries)
}

void VidQueries::SharedCtor() {
  vid_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

VidQueries::~VidQueries() {
  // @@protoc_insertion_point(destructor:pb.commercial.VidQueries)
  SharedDtor();
}

void VidQueries::SharedDtor() {
}

void VidQueries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VidQueries::descriptor() {
  protobuf_commercial_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commercial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VidQueries& VidQueries::default_instance() {
  protobuf_commercial_2eproto::InitDefaults();
  return *internal_default_instance();
}

VidQueries* VidQueries::New(::google::protobuf::Arena* arena) const {
  VidQueries* n = new VidQueries;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VidQueries::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.commercial.VidQueries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  vid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool VidQueries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.commercial.VidQueries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 vid = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string queries = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_queries()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queries(this->queries_size() - 1).data(),
            static_cast<int>(this->queries(this->queries_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.commercial.VidQueries.queries"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.commercial.VidQueries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.commercial.VidQueries)
  return false;
#undef DO_
}

void VidQueries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.commercial.VidQueries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 vid = 1 [(.gogo.json) = {
  if (this->vid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->vid(), output);
  }

  // repeated string queries = 2 [(.gogo.json) = {
  for (int i = 0, n = this->queries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queries(i).data(), static_cast<int>(this->queries(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.commercial.VidQueries.queries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->queries(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.commercial.VidQueries)
}

::google::protobuf::uint8* VidQueries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.commercial.VidQueries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 vid = 1 [(.gogo.json) = {
  if (this->vid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->vid(), target);
  }

  // repeated string queries = 2 [(.gogo.json) = {
  for (int i = 0, n = this->queries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queries(i).data(), static_cast<int>(this->queries(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.commercial.VidQueries.queries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->queries(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.commercial.VidQueries)
  return target;
}

size_t VidQueries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.commercial.VidQueries)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string queries = 2 [(.gogo.json) = {
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->queries_size());
  for (int i = 0, n = this->queries_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->queries(i));
  }

  // uint64 vid = 1 [(.gogo.json) = {
  if (this->vid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->vid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VidQueries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.commercial.VidQueries)
  GOOGLE_DCHECK_NE(&from, this);
  const VidQueries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VidQueries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.commercial.VidQueries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.commercial.VidQueries)
    MergeFrom(*source);
  }
}

void VidQueries::MergeFrom(const VidQueries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.commercial.VidQueries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
  if (from.vid() != 0) {
    set_vid(from.vid());
  }
}

void VidQueries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.commercial.VidQueries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VidQueries::CopyFrom(const VidQueries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.commercial.VidQueries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VidQueries::IsInitialized() const {
  return true;
}

void VidQueries::Swap(VidQueries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VidQueries::InternalSwap(VidQueries* other) {
  using std::swap;
  queries_.InternalSwap(&other->queries_);
  swap(vid_, other->vid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VidQueries::GetMetadata() const {
  protobuf_commercial_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commercial_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VidQueries

// uint64 vid = 1 [(.gogo.json) = {
void VidQueries::clear_vid() {
  vid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VidQueries::vid() const {
  // @@protoc_insertion_point(field_get:pb.commercial.VidQueries.vid)
  return vid_;
}
void VidQueries::set_vid(::google::protobuf::uint64 value) {
  
  vid_ = value;
  // @@protoc_insertion_point(field_set:pb.commercial.VidQueries.vid)
}

// repeated string queries = 2 [(.gogo.json) = {
int VidQueries::queries_size() const {
  return queries_.size();
}
void VidQueries::clear_queries() {
  queries_.Clear();
}
const ::std::string& VidQueries::queries(int index) const {
  // @@protoc_insertion_point(field_get:pb.commercial.VidQueries.queries)
  return queries_.Get(index);
}
::std::string* VidQueries::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:pb.commercial.VidQueries.queries)
  return queries_.Mutable(index);
}
void VidQueries::set_queries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.commercial.VidQueries.queries)
  queries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void VidQueries::set_queries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.commercial.VidQueries.queries)
  queries_.Mutable(index)->assign(std::move(value));
}
#endif
void VidQueries::set_queries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.commercial.VidQueries.queries)
}
void VidQueries::set_queries(int index, const char* value, size_t size) {
  queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.commercial.VidQueries.queries)
}
::std::string* VidQueries::add_queries() {
  // @@protoc_insertion_point(field_add_mutable:pb.commercial.VidQueries.queries)
  return queries_.Add();
}
void VidQueries::add_queries(const ::std::string& value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.commercial.VidQueries.queries)
}
#if LANG_CXX11
void VidQueries::add_queries(::std::string&& value) {
  queries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.commercial.VidQueries.queries)
}
#endif
void VidQueries::add_queries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.commercial.VidQueries.queries)
}
void VidQueries::add_queries(const char* value, size_t size) {
  queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.commercial.VidQueries.queries)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
VidQueries::queries() const {
  // @@protoc_insertion_point(field_list:pb.commercial.VidQueries.queries)
  return queries_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
VidQueries::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:pb.commercial.VidQueries.queries)
  return &queries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RidQueries::kRidFieldNumber;
const int RidQueries::kQueriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RidQueries::RidQueries()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_commercial_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.commercial.RidQueries)
}
RidQueries::RidQueries(const RidQueries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      queries_(from.queries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_ = from.rid_;
  // @@protoc_insertion_point(copy_constructor:pb.commercial.RidQueries)
}

void RidQueries::SharedCtor() {
  rid_ = 0u;
  _cached_size_ = 0;
}

RidQueries::~RidQueries() {
  // @@protoc_insertion_point(destructor:pb.commercial.RidQueries)
  SharedDtor();
}

void RidQueries::SharedDtor() {
}

void RidQueries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RidQueries::descriptor() {
  protobuf_commercial_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commercial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RidQueries& RidQueries::default_instance() {
  protobuf_commercial_2eproto::InitDefaults();
  return *internal_default_instance();
}

RidQueries* RidQueries::New(::google::protobuf::Arena* arena) const {
  RidQueries* n = new RidQueries;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RidQueries::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.commercial.RidQueries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  rid_ = 0u;
  _internal_metadata_.Clear();
}

bool RidQueries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.commercial.RidQueries)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 rid = 1 [(.gogo.json) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string queries = 2 [(.gogo.json) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_queries()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queries(this->queries_size() - 1).data(),
            static_cast<int>(this->queries(this->queries_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.commercial.RidQueries.queries"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.commercial.RidQueries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.commercial.RidQueries)
  return false;
#undef DO_
}

void RidQueries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.commercial.RidQueries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rid = 1 [(.gogo.json) = {
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  // repeated string queries = 2 [(.gogo.json) = {
  for (int i = 0, n = this->queries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queries(i).data(), static_cast<int>(this->queries(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.commercial.RidQueries.queries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->queries(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.commercial.RidQueries)
}

::google::protobuf::uint8* RidQueries::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pb.commercial.RidQueries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rid = 1 [(.gogo.json) = {
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  // repeated string queries = 2 [(.gogo.json) = {
  for (int i = 0, n = this->queries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queries(i).data(), static_cast<int>(this->queries(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.commercial.RidQueries.queries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->queries(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.commercial.RidQueries)
  return target;
}

size_t RidQueries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.commercial.RidQueries)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string queries = 2 [(.gogo.json) = {
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->queries_size());
  for (int i = 0, n = this->queries_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->queries(i));
  }

  // uint32 rid = 1 [(.gogo.json) = {
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RidQueries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.commercial.RidQueries)
  GOOGLE_DCHECK_NE(&from, this);
  const RidQueries* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RidQueries>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.commercial.RidQueries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.commercial.RidQueries)
    MergeFrom(*source);
  }
}

void RidQueries::MergeFrom(const RidQueries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.commercial.RidQueries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
}

void RidQueries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.commercial.RidQueries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RidQueries::CopyFrom(const RidQueries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.commercial.RidQueries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RidQueries::IsInitialized() const {
  return true;
}

void RidQueries::Swap(RidQueries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RidQueries::InternalSwap(RidQueries* other) {
  using std::swap;
  queries_.InternalSwap(&other->queries_);
  swap(rid_, other->rid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RidQueries::GetMetadata() const {
  protobuf_commercial_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_commercial_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RidQueries

// uint32 rid = 1 [(.gogo.json) = {
void RidQueries::clear_rid() {
  rid_ = 0u;
}
::google::protobuf::uint32 RidQueries::rid() const {
  // @@protoc_insertion_point(field_get:pb.commercial.RidQueries.rid)
  return rid_;
}
void RidQueries::set_rid(::google::protobuf::uint32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.commercial.RidQueries.rid)
}

// repeated string queries = 2 [(.gogo.json) = {
int RidQueries::queries_size() const {
  return queries_.size();
}
void RidQueries::clear_queries() {
  queries_.Clear();
}
const ::std::string& RidQueries::queries(int index) const {
  // @@protoc_insertion_point(field_get:pb.commercial.RidQueries.queries)
  return queries_.Get(index);
}
::std::string* RidQueries::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:pb.commercial.RidQueries.queries)
  return queries_.Mutable(index);
}
void RidQueries::set_queries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.commercial.RidQueries.queries)
  queries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RidQueries::set_queries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.commercial.RidQueries.queries)
  queries_.Mutable(index)->assign(std::move(value));
}
#endif
void RidQueries::set_queries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.commercial.RidQueries.queries)
}
void RidQueries::set_queries(int index, const char* value, size_t size) {
  queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.commercial.RidQueries.queries)
}
::std::string* RidQueries::add_queries() {
  // @@protoc_insertion_point(field_add_mutable:pb.commercial.RidQueries.queries)
  return queries_.Add();
}
void RidQueries::add_queries(const ::std::string& value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.commercial.RidQueries.queries)
}
#if LANG_CXX11
void RidQueries::add_queries(::std::string&& value) {
  queries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.commercial.RidQueries.queries)
}
#endif
void RidQueries::add_queries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.commercial.RidQueries.queries)
}
void RidQueries::add_queries(const char* value, size_t size) {
  queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.commercial.RidQueries.queries)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RidQueries::queries() const {
  // @@protoc_insertion_point(field_list:pb.commercial.RidQueries.queries)
  return queries_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RidQueries::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:pb.commercial.RidQueries.queries)
  return &queries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace commercial
}  // namespace pb

// @@protoc_insertion_point(global_scope)
