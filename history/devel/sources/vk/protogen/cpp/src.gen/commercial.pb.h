// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commercial.proto

#ifndef PROTOBUF_commercial_2eproto__INCLUDED
#define PROTOBUF_commercial_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
namespace pb {
namespace commercial {
class RidQueries;
class RidQueriesDefaultTypeInternal;
extern RidQueriesDefaultTypeInternal _RidQueries_default_instance_;
class VidQueries;
class VidQueriesDefaultTypeInternal;
extern VidQueriesDefaultTypeInternal _VidQueries_default_instance_;
}  // namespace commercial
}  // namespace pb

namespace pb {
namespace commercial {

namespace protobuf_commercial_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_commercial_2eproto

// ===================================================================

class VidQueries : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.commercial.VidQueries) */ {
 public:
  VidQueries();
  virtual ~VidQueries();

  VidQueries(const VidQueries& from);

  inline VidQueries& operator=(const VidQueries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VidQueries(VidQueries&& from) noexcept
    : VidQueries() {
    *this = ::std::move(from);
  }

  inline VidQueries& operator=(VidQueries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VidQueries& default_instance();

  static inline const VidQueries* internal_default_instance() {
    return reinterpret_cast<const VidQueries*>(
               &_VidQueries_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(VidQueries* other);
  friend void swap(VidQueries& a, VidQueries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VidQueries* New() const PROTOBUF_FINAL { return New(NULL); }

  VidQueries* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidQueries& from);
  void MergeFrom(const VidQueries& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidQueries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string queries = 2 [(.gogo.json) = {
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 2;
  const ::std::string& queries(int index) const;
  ::std::string* mutable_queries(int index);
  void set_queries(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_queries(int index, ::std::string&& value);
  #endif
  void set_queries(int index, const char* value);
  void set_queries(int index, const char* value, size_t size);
  ::std::string* add_queries();
  void add_queries(const ::std::string& value);
  #if LANG_CXX11
  void add_queries(::std::string&& value);
  #endif
  void add_queries(const char* value);
  void add_queries(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& queries() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_queries();

  // uint64 vid = 1 [(.gogo.json) = {
  void clear_vid();
  static const int kVidFieldNumber = 1;
  ::google::protobuf::uint64 vid() const;
  void set_vid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.commercial.VidQueries)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> queries_;
  ::google::protobuf::uint64 vid_;
  mutable int _cached_size_;
  friend struct protobuf_commercial_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RidQueries : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.commercial.RidQueries) */ {
 public:
  RidQueries();
  virtual ~RidQueries();

  RidQueries(const RidQueries& from);

  inline RidQueries& operator=(const RidQueries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RidQueries(RidQueries&& from) noexcept
    : RidQueries() {
    *this = ::std::move(from);
  }

  inline RidQueries& operator=(RidQueries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RidQueries& default_instance();

  static inline const RidQueries* internal_default_instance() {
    return reinterpret_cast<const RidQueries*>(
               &_RidQueries_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RidQueries* other);
  friend void swap(RidQueries& a, RidQueries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RidQueries* New() const PROTOBUF_FINAL { return New(NULL); }

  RidQueries* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RidQueries& from);
  void MergeFrom(const RidQueries& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RidQueries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string queries = 2 [(.gogo.json) = {
  int queries_size() const;
  void clear_queries();
  static const int kQueriesFieldNumber = 2;
  const ::std::string& queries(int index) const;
  ::std::string* mutable_queries(int index);
  void set_queries(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_queries(int index, ::std::string&& value);
  #endif
  void set_queries(int index, const char* value);
  void set_queries(int index, const char* value, size_t size);
  ::std::string* add_queries();
  void add_queries(const ::std::string& value);
  #if LANG_CXX11
  void add_queries(::std::string&& value);
  #endif
  void add_queries(const char* value);
  void add_queries(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& queries() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_queries();

  // uint32 rid = 1 [(.gogo.json) = {
  void clear_rid();
  static const int kRidFieldNumber = 1;
  ::google::protobuf::uint32 rid() const;
  void set_rid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.commercial.RidQueries)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> queries_;
  ::google::protobuf::uint32 rid_;
  mutable int _cached_size_;
  friend struct protobuf_commercial_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VidQueries

// uint64 vid = 1 [(.gogo.json) = {
inline void VidQueries::clear_vid() {
  vid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VidQueries::vid() const {
  // @@protoc_insertion_point(field_get:pb.commercial.VidQueries.vid)
  return vid_;
}
inline void VidQueries::set_vid(::google::protobuf::uint64 value) {
  
  vid_ = value;
  // @@protoc_insertion_point(field_set:pb.commercial.VidQueries.vid)
}

// repeated string queries = 2 [(.gogo.json) = {
inline int VidQueries::queries_size() const {
  return queries_.size();
}
inline void VidQueries::clear_queries() {
  queries_.Clear();
}
inline const ::std::string& VidQueries::queries(int index) const {
  // @@protoc_insertion_point(field_get:pb.commercial.VidQueries.queries)
  return queries_.Get(index);
}
inline ::std::string* VidQueries::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:pb.commercial.VidQueries.queries)
  return queries_.Mutable(index);
}
inline void VidQueries::set_queries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.commercial.VidQueries.queries)
  queries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void VidQueries::set_queries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.commercial.VidQueries.queries)
  queries_.Mutable(index)->assign(std::move(value));
}
#endif
inline void VidQueries::set_queries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.commercial.VidQueries.queries)
}
inline void VidQueries::set_queries(int index, const char* value, size_t size) {
  queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.commercial.VidQueries.queries)
}
inline ::std::string* VidQueries::add_queries() {
  // @@protoc_insertion_point(field_add_mutable:pb.commercial.VidQueries.queries)
  return queries_.Add();
}
inline void VidQueries::add_queries(const ::std::string& value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.commercial.VidQueries.queries)
}
#if LANG_CXX11
inline void VidQueries::add_queries(::std::string&& value) {
  queries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.commercial.VidQueries.queries)
}
#endif
inline void VidQueries::add_queries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.commercial.VidQueries.queries)
}
inline void VidQueries::add_queries(const char* value, size_t size) {
  queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.commercial.VidQueries.queries)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VidQueries::queries() const {
  // @@protoc_insertion_point(field_list:pb.commercial.VidQueries.queries)
  return queries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VidQueries::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:pb.commercial.VidQueries.queries)
  return &queries_;
}

// -------------------------------------------------------------------

// RidQueries

// uint32 rid = 1 [(.gogo.json) = {
inline void RidQueries::clear_rid() {
  rid_ = 0u;
}
inline ::google::protobuf::uint32 RidQueries::rid() const {
  // @@protoc_insertion_point(field_get:pb.commercial.RidQueries.rid)
  return rid_;
}
inline void RidQueries::set_rid(::google::protobuf::uint32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.commercial.RidQueries.rid)
}

// repeated string queries = 2 [(.gogo.json) = {
inline int RidQueries::queries_size() const {
  return queries_.size();
}
inline void RidQueries::clear_queries() {
  queries_.Clear();
}
inline const ::std::string& RidQueries::queries(int index) const {
  // @@protoc_insertion_point(field_get:pb.commercial.RidQueries.queries)
  return queries_.Get(index);
}
inline ::std::string* RidQueries::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:pb.commercial.RidQueries.queries)
  return queries_.Mutable(index);
}
inline void RidQueries::set_queries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.commercial.RidQueries.queries)
  queries_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RidQueries::set_queries(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.commercial.RidQueries.queries)
  queries_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RidQueries::set_queries(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.commercial.RidQueries.queries)
}
inline void RidQueries::set_queries(int index, const char* value, size_t size) {
  queries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.commercial.RidQueries.queries)
}
inline ::std::string* RidQueries::add_queries() {
  // @@protoc_insertion_point(field_add_mutable:pb.commercial.RidQueries.queries)
  return queries_.Add();
}
inline void RidQueries::add_queries(const ::std::string& value) {
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.commercial.RidQueries.queries)
}
#if LANG_CXX11
inline void RidQueries::add_queries(::std::string&& value) {
  queries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.commercial.RidQueries.queries)
}
#endif
inline void RidQueries::add_queries(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  queries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.commercial.RidQueries.queries)
}
inline void RidQueries::add_queries(const char* value, size_t size) {
  queries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.commercial.RidQueries.queries)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RidQueries::queries() const {
  // @@protoc_insertion_point(field_list:pb.commercial.RidQueries.queries)
  return queries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RidQueries::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:pb.commercial.RidQueries.queries)
  return &queries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace commercial
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_commercial_2eproto__INCLUDED
