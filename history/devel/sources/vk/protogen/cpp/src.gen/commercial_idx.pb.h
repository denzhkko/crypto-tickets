// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commercial_idx.proto

#ifndef PROTOBUF_commercial_5fidx_2eproto__INCLUDED
#define PROTOBUF_commercial_5fidx_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "commercial.pb.h"
// @@protoc_insertion_point(includes)
namespace pb {
namespace commercial {
class RidIdxDocument;
class RidIdxDocumentDefaultTypeInternal;
extern RidIdxDocumentDefaultTypeInternal _RidIdxDocument_default_instance_;
class VidIdxDocument;
class VidIdxDocumentDefaultTypeInternal;
extern VidIdxDocumentDefaultTypeInternal _VidIdxDocument_default_instance_;
}  // namespace commercial
}  // namespace pb

namespace pb {
namespace commercial {

namespace protobuf_commercial_5fidx_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_commercial_5fidx_2eproto

// ===================================================================

class RidIdxDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.commercial.RidIdxDocument) */ {
 public:
  RidIdxDocument();
  virtual ~RidIdxDocument();

  RidIdxDocument(const RidIdxDocument& from);

  inline RidIdxDocument& operator=(const RidIdxDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RidIdxDocument(RidIdxDocument&& from) noexcept
    : RidIdxDocument() {
    *this = ::std::move(from);
  }

  inline RidIdxDocument& operator=(RidIdxDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RidIdxDocument& default_instance();

  static inline const RidIdxDocument* internal_default_instance() {
    return reinterpret_cast<const RidIdxDocument*>(
               &_RidIdxDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RidIdxDocument* other);
  friend void swap(RidIdxDocument& a, RidIdxDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RidIdxDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  RidIdxDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RidIdxDocument& from);
  void MergeFrom(const RidIdxDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RidIdxDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query_text = 1;
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // optional .pb.commercial.RidQueries data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::pb::commercial::RidQueries& data() const;
  ::pb::commercial::RidQueries* mutable_data();
  ::pb::commercial::RidQueries* release_data();
  void set_allocated_data(::pb::commercial::RidQueries* data);

  // @@protoc_insertion_point(class_scope:pb.commercial.RidIdxDocument)
 private:
  void set_has_query_text();
  void clear_has_query_text();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  ::pb::commercial::RidQueries* data_;
  friend struct protobuf_commercial_5fidx_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VidIdxDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.commercial.VidIdxDocument) */ {
 public:
  VidIdxDocument();
  virtual ~VidIdxDocument();

  VidIdxDocument(const VidIdxDocument& from);

  inline VidIdxDocument& operator=(const VidIdxDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VidIdxDocument(VidIdxDocument&& from) noexcept
    : VidIdxDocument() {
    *this = ::std::move(from);
  }

  inline VidIdxDocument& operator=(VidIdxDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VidIdxDocument& default_instance();

  static inline const VidIdxDocument* internal_default_instance() {
    return reinterpret_cast<const VidIdxDocument*>(
               &_VidIdxDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(VidIdxDocument* other);
  friend void swap(VidIdxDocument& a, VidIdxDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VidIdxDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  VidIdxDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VidIdxDocument& from);
  void MergeFrom(const VidIdxDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VidIdxDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string query_text = 1;
  bool has_query_text() const;
  void clear_query_text();
  static const int kQueryTextFieldNumber = 1;
  const ::std::string& query_text() const;
  void set_query_text(const ::std::string& value);
  #if LANG_CXX11
  void set_query_text(::std::string&& value);
  #endif
  void set_query_text(const char* value);
  void set_query_text(const char* value, size_t size);
  ::std::string* mutable_query_text();
  ::std::string* release_query_text();
  void set_allocated_query_text(::std::string* query_text);

  // optional .pb.commercial.VidQueries data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::pb::commercial::VidQueries& data() const;
  ::pb::commercial::VidQueries* mutable_data();
  ::pb::commercial::VidQueries* release_data();
  void set_allocated_data(::pb::commercial::VidQueries* data);

  // @@protoc_insertion_point(class_scope:pb.commercial.VidIdxDocument)
 private:
  void set_has_query_text();
  void clear_has_query_text();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr query_text_;
  ::pb::commercial::VidQueries* data_;
  friend struct protobuf_commercial_5fidx_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RidIdxDocument

// optional string query_text = 1;
inline bool RidIdxDocument::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RidIdxDocument::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RidIdxDocument::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RidIdxDocument::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& RidIdxDocument::query_text() const {
  // @@protoc_insertion_point(field_get:pb.commercial.RidIdxDocument.query_text)
  return query_text_.GetNoArena();
}
inline void RidIdxDocument::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.commercial.RidIdxDocument.query_text)
}
#if LANG_CXX11
inline void RidIdxDocument::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.commercial.RidIdxDocument.query_text)
}
#endif
inline void RidIdxDocument::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.commercial.RidIdxDocument.query_text)
}
inline void RidIdxDocument::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.commercial.RidIdxDocument.query_text)
}
inline ::std::string* RidIdxDocument::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:pb.commercial.RidIdxDocument.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RidIdxDocument::release_query_text() {
  // @@protoc_insertion_point(field_release:pb.commercial.RidIdxDocument.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RidIdxDocument::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:pb.commercial.RidIdxDocument.query_text)
}

// optional .pb.commercial.RidQueries data = 2;
inline bool RidIdxDocument::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RidIdxDocument::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RidIdxDocument::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RidIdxDocument::clear_data() {
  if (data_ != NULL) data_->::pb::commercial::RidQueries::Clear();
  clear_has_data();
}
inline const ::pb::commercial::RidQueries& RidIdxDocument::data() const {
  const ::pb::commercial::RidQueries* p = data_;
  // @@protoc_insertion_point(field_get:pb.commercial.RidIdxDocument.data)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::commercial::RidQueries*>(
      &::pb::commercial::_RidQueries_default_instance_);
}
inline ::pb::commercial::RidQueries* RidIdxDocument::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::pb::commercial::RidQueries;
  }
  // @@protoc_insertion_point(field_mutable:pb.commercial.RidIdxDocument.data)
  return data_;
}
inline ::pb::commercial::RidQueries* RidIdxDocument::release_data() {
  // @@protoc_insertion_point(field_release:pb.commercial.RidIdxDocument.data)
  clear_has_data();
  ::pb::commercial::RidQueries* temp = data_;
  data_ = NULL;
  return temp;
}
inline void RidIdxDocument::set_allocated_data(::pb::commercial::RidQueries* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.commercial.RidIdxDocument.data)
}

// -------------------------------------------------------------------

// VidIdxDocument

// optional string query_text = 1;
inline bool VidIdxDocument::has_query_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VidIdxDocument::set_has_query_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VidIdxDocument::clear_has_query_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VidIdxDocument::clear_query_text() {
  query_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_text();
}
inline const ::std::string& VidIdxDocument::query_text() const {
  // @@protoc_insertion_point(field_get:pb.commercial.VidIdxDocument.query_text)
  return query_text_.GetNoArena();
}
inline void VidIdxDocument::set_query_text(const ::std::string& value) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.commercial.VidIdxDocument.query_text)
}
#if LANG_CXX11
inline void VidIdxDocument::set_query_text(::std::string&& value) {
  set_has_query_text();
  query_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.commercial.VidIdxDocument.query_text)
}
#endif
inline void VidIdxDocument::set_query_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.commercial.VidIdxDocument.query_text)
}
inline void VidIdxDocument::set_query_text(const char* value, size_t size) {
  set_has_query_text();
  query_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.commercial.VidIdxDocument.query_text)
}
inline ::std::string* VidIdxDocument::mutable_query_text() {
  set_has_query_text();
  // @@protoc_insertion_point(field_mutable:pb.commercial.VidIdxDocument.query_text)
  return query_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VidIdxDocument::release_query_text() {
  // @@protoc_insertion_point(field_release:pb.commercial.VidIdxDocument.query_text)
  clear_has_query_text();
  return query_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VidIdxDocument::set_allocated_query_text(::std::string* query_text) {
  if (query_text != NULL) {
    set_has_query_text();
  } else {
    clear_has_query_text();
  }
  query_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_text);
  // @@protoc_insertion_point(field_set_allocated:pb.commercial.VidIdxDocument.query_text)
}

// optional .pb.commercial.VidQueries data = 2;
inline bool VidIdxDocument::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VidIdxDocument::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VidIdxDocument::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VidIdxDocument::clear_data() {
  if (data_ != NULL) data_->::pb::commercial::VidQueries::Clear();
  clear_has_data();
}
inline const ::pb::commercial::VidQueries& VidIdxDocument::data() const {
  const ::pb::commercial::VidQueries* p = data_;
  // @@protoc_insertion_point(field_get:pb.commercial.VidIdxDocument.data)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::commercial::VidQueries*>(
      &::pb::commercial::_VidQueries_default_instance_);
}
inline ::pb::commercial::VidQueries* VidIdxDocument::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::pb::commercial::VidQueries;
  }
  // @@protoc_insertion_point(field_mutable:pb.commercial.VidIdxDocument.data)
  return data_;
}
inline ::pb::commercial::VidQueries* VidIdxDocument::release_data() {
  // @@protoc_insertion_point(field_release:pb.commercial.VidIdxDocument.data)
  clear_has_data();
  ::pb::commercial::VidQueries* temp = data_;
  data_ = NULL;
  return temp;
}
inline void VidIdxDocument::set_allocated_data(::pb::commercial::VidQueries* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.commercial.VidIdxDocument.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace commercial
}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_commercial_5fidx_2eproto__INCLUDED
