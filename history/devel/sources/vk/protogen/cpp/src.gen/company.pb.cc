// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: company.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "company.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gogo {
namespace companies {
class GeoPointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GeoPoint>
     _instance;
} _GeoPoint_default_instance_;
class Schedule_DaySchedule_WorkHoursDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Schedule_DaySchedule_WorkHours>
     _instance;
} _Schedule_DaySchedule_WorkHours_default_instance_;
class Schedule_DayScheduleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Schedule_DaySchedule>
     _instance;
} _Schedule_DaySchedule_default_instance_;
class ScheduleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Schedule>
     _instance;
} _Schedule_default_instance_;
class PhotoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Photo>
     _instance;
} _Photo_default_instance_;
class ReviewDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Review>
     _instance;
} _Review_default_instance_;
class MetroDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Metro>
     _instance;
} _Metro_default_instance_;
class AttributeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Attribute>
     _instance;
} _Attribute_default_instance_;
class RubricDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Rubric>
     _instance;
} _Rubric_default_instance_;
class CompanyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Company>
     _instance;
} _Company_default_instance_;

namespace protobuf_company_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoPoint, lat_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule_DaySchedule_WorkHours, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule_DaySchedule_WorkHours, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule_DaySchedule_WorkHours, fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule_DaySchedule_WorkHours, to_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule_DaySchedule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule_DaySchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule_DaySchedule, weekday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule_DaySchedule, workhours_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, is24x7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, days_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, height_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Review, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Review, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Review, rating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Review, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metro, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metro, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metro, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metro, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metro, distance_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rubric, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rubric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rubric, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rubric, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rubric, name_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, region_2gis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, region_rb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, name_ext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, phones_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, photo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, review_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, metro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Company, rubrics_),
  0,
  1,
  8,
  9,
  2,
  3,
  ~0u,
  ~0u,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(GeoPoint)},
  { 9, 16, sizeof(Schedule_DaySchedule_WorkHours)},
  { 18, 25, sizeof(Schedule_DaySchedule)},
  { 27, 35, sizeof(Schedule)},
  { 38, 46, sizeof(Photo)},
  { 49, 56, sizeof(Review)},
  { 58, 67, sizeof(Metro)},
  { 71, 78, sizeof(Attribute)},
  { 80, 88, sizeof(Rubric)},
  { 91, 111, sizeof(Company)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GeoPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Schedule_DaySchedule_WorkHours_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Schedule_DaySchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Schedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Photo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Review_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Metro_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Attribute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rubric_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Company_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "company.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GeoPoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GeoPoint_default_instance_);_Schedule_DaySchedule_WorkHours_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Schedule_DaySchedule_WorkHours_default_instance_);_Schedule_DaySchedule_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Schedule_DaySchedule_default_instance_);_Schedule_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Schedule_default_instance_);_Photo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Photo_default_instance_);_Review_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Review_default_instance_);_Metro_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Metro_default_instance_);_Attribute_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Attribute_default_instance_);_Rubric_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Rubric_default_instance_);_Company_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Company_default_instance_);_Company_default_instance_._instance.get_mutable()->point_ = const_cast< ::gogo::companies::GeoPoint*>(
      ::gogo::companies::GeoPoint::internal_default_instance());
  _Company_default_instance_._instance.get_mutable()->schedule_ = const_cast< ::gogo::companies::Schedule*>(
      ::gogo::companies::Schedule::internal_default_instance());
  _Company_default_instance_._instance.get_mutable()->photo_ = const_cast< ::gogo::companies::Photo*>(
      ::gogo::companies::Photo::internal_default_instance());
  _Company_default_instance_._instance.get_mutable()->review_ = const_cast< ::gogo::companies::Review*>(
      ::gogo::companies::Review::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rcompany.proto\022\016gogo.companies\"$\n\010GeoPo"
      "int\022\013\n\003lon\030\001 \002(\t\022\013\n\003lat\030\002 \002(\t\"\354\001\n\010Schedu"
      "le\022\023\n\013description\030\001 \002(\t\022\016\n\006is24x7\030\002 \002(\010\022"
      "2\n\004days\030\003 \003(\0132$.gogo.companies.Schedule."
      "DaySchedule\032\206\001\n\013DaySchedule\022\017\n\007weekday\030\001"
      " \002(\r\022A\n\tworkhours\030\002 \003(\0132..gogo.companies"
      ".Schedule.DaySchedule.WorkHours\032#\n\tWorkH"
      "ours\022\n\n\002fr\030\001 \002(\r\022\n\n\002to\030\002 \002(\r\"3\n\005Photo\022\013\n"
      "\003key\030\001 \001(\t\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001("
      "\r\"\'\n\006Review\022\016\n\006rating\030\001 \002(\002\022\r\n\005count\030\002 \001"
      "(\r\"G\n\005Metro\022\014\n\004name\030\001 \002(\t\022\017\n\007comment\030\002 \001"
      "(\t\022\r\n\005color\030\003 \001(\t\022\020\n\010distance\030\004 \001(\r\"&\n\tA"
      "ttribute\022\013\n\003tag\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\"3\n\006R"
      "ubric\022\r\n\005alias\030\001 \002(\t\022\014\n\004kind\030\002 \002(\t\022\014\n\004na"
      "me\030\003 \002(\t\"\255\003\n\007Company\022\n\n\002id\030\001 \002(\t\022\014\n\004name"
      "\030\002 \002(\t\022\023\n\013region_2gis\030\003 \002(\r\022\021\n\tregion_rb"
      "\030\004 \002(\r\022\017\n\007address\030\005 \002(\t\022\020\n\010name_ext\030\006 \001("
      "\t\022\014\n\004urls\030\007 \003(\t\022\016\n\006phones\030\010 \003(\t\022\'\n\005point"
      "\030\t \001(\0132\030.gogo.companies.GeoPoint\022*\n\010sche"
      "dule\030\n \001(\0132\030.gogo.companies.Schedule\022$\n\005"
      "photo\030\013 \001(\0132\025.gogo.companies.Photo\022&\n\006re"
      "view\030\014 \001(\0132\026.gogo.companies.Review\022$\n\005me"
      "tro\030\r \003(\0132\025.gogo.companies.Metro\022-\n\nattr"
      "ibutes\030\016 \003(\0132\031.gogo.companies.Attribute\022"
      "\'\n\007rubrics\030\017 \003(\0132\026.gogo.companies.Rubric"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1000);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "company.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_company_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeoPoint::kLonFieldNumber;
const int GeoPoint::kLatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeoPoint::GeoPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_company_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.companies.GeoPoint)
}
GeoPoint::GeoPoint(const GeoPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lon()) {
    lon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lon_);
  }
  lat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lat()) {
    lat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lat_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.companies.GeoPoint)
}

void GeoPoint::SharedCtor() {
  _cached_size_ = 0;
  lon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GeoPoint::~GeoPoint() {
  // @@protoc_insertion_point(destructor:gogo.companies.GeoPoint)
  SharedDtor();
}

void GeoPoint::SharedDtor() {
  lon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GeoPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoPoint::descriptor() {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GeoPoint& GeoPoint::default_instance() {
  protobuf_company_2eproto::InitDefaults();
  return *internal_default_instance();
}

GeoPoint* GeoPoint::New(::google::protobuf::Arena* arena) const {
  GeoPoint* n = new GeoPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.companies.GeoPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!lon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lon_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!lat_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lat_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GeoPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.companies.GeoPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string lon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lon().data(), static_cast<int>(this->lon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.GeoPoint.lon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string lat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lat().data(), static_cast<int>(this->lat().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.GeoPoint.lat");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.companies.GeoPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.companies.GeoPoint)
  return false;
#undef DO_
}

void GeoPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.companies.GeoPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string lon = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lon().data(), static_cast<int>(this->lon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.GeoPoint.lon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lon(), output);
  }

  // required string lat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lat().data(), static_cast<int>(this->lat().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.GeoPoint.lat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.companies.GeoPoint)
}

::google::protobuf::uint8* GeoPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.companies.GeoPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string lon = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lon().data(), static_cast<int>(this->lon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.GeoPoint.lon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lon(), target);
  }

  // required string lat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lat().data(), static_cast<int>(this->lat().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.GeoPoint.lat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.companies.GeoPoint)
  return target;
}

size_t GeoPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.companies.GeoPoint)
  size_t total_size = 0;

  if (has_lon()) {
    // required string lon = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lon());
  }

  if (has_lat()) {
    // required string lat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lat());
  }

  return total_size;
}
size_t GeoPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.companies.GeoPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string lon = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lon());

    // required string lat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lat());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.companies.GeoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GeoPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.companies.GeoPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.companies.GeoPoint)
    MergeFrom(*source);
  }
}

void GeoPoint::MergeFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.companies.GeoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lon();
      lon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lon_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_lat();
      lat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lat_);
    }
  }
}

void GeoPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.companies.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPoint::CopyFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.companies.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GeoPoint::Swap(GeoPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeoPoint::InternalSwap(GeoPoint* other) {
  using std::swap;
  lon_.Swap(&other->lon_);
  lat_.Swap(&other->lat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeoPoint::GetMetadata() const {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeoPoint

// required string lon = 1;
bool GeoPoint::has_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeoPoint::set_has_lon() {
  _has_bits_[0] |= 0x00000001u;
}
void GeoPoint::clear_has_lon() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeoPoint::clear_lon() {
  lon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lon();
}
const ::std::string& GeoPoint::lon() const {
  // @@protoc_insertion_point(field_get:gogo.companies.GeoPoint.lon)
  return lon_.GetNoArena();
}
void GeoPoint::set_lon(const ::std::string& value) {
  set_has_lon();
  lon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.GeoPoint.lon)
}
#if LANG_CXX11
void GeoPoint::set_lon(::std::string&& value) {
  set_has_lon();
  lon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.GeoPoint.lon)
}
#endif
void GeoPoint::set_lon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lon();
  lon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.GeoPoint.lon)
}
void GeoPoint::set_lon(const char* value, size_t size) {
  set_has_lon();
  lon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.GeoPoint.lon)
}
::std::string* GeoPoint::mutable_lon() {
  set_has_lon();
  // @@protoc_insertion_point(field_mutable:gogo.companies.GeoPoint.lon)
  return lon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GeoPoint::release_lon() {
  // @@protoc_insertion_point(field_release:gogo.companies.GeoPoint.lon)
  clear_has_lon();
  return lon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GeoPoint::set_allocated_lon(::std::string* lon) {
  if (lon != NULL) {
    set_has_lon();
  } else {
    clear_has_lon();
  }
  lon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lon);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.GeoPoint.lon)
}

// required string lat = 2;
bool GeoPoint::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GeoPoint::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
void GeoPoint::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
void GeoPoint::clear_lat() {
  lat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lat();
}
const ::std::string& GeoPoint::lat() const {
  // @@protoc_insertion_point(field_get:gogo.companies.GeoPoint.lat)
  return lat_.GetNoArena();
}
void GeoPoint::set_lat(const ::std::string& value) {
  set_has_lat();
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.GeoPoint.lat)
}
#if LANG_CXX11
void GeoPoint::set_lat(::std::string&& value) {
  set_has_lat();
  lat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.GeoPoint.lat)
}
#endif
void GeoPoint::set_lat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lat();
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.GeoPoint.lat)
}
void GeoPoint::set_lat(const char* value, size_t size) {
  set_has_lat();
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.GeoPoint.lat)
}
::std::string* GeoPoint::mutable_lat() {
  set_has_lat();
  // @@protoc_insertion_point(field_mutable:gogo.companies.GeoPoint.lat)
  return lat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GeoPoint::release_lat() {
  // @@protoc_insertion_point(field_release:gogo.companies.GeoPoint.lat)
  clear_has_lat();
  return lat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GeoPoint::set_allocated_lat(::std::string* lat) {
  if (lat != NULL) {
    set_has_lat();
  } else {
    clear_has_lat();
  }
  lat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lat);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.GeoPoint.lat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schedule_DaySchedule_WorkHours::kFrFieldNumber;
const int Schedule_DaySchedule_WorkHours::kToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schedule_DaySchedule_WorkHours::Schedule_DaySchedule_WorkHours()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_company_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.companies.Schedule.DaySchedule.WorkHours)
}
Schedule_DaySchedule_WorkHours::Schedule_DaySchedule_WorkHours(const Schedule_DaySchedule_WorkHours& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fr_, &from.fr_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_) -
    reinterpret_cast<char*>(&fr_)) + sizeof(to_));
  // @@protoc_insertion_point(copy_constructor:gogo.companies.Schedule.DaySchedule.WorkHours)
}

void Schedule_DaySchedule_WorkHours::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&fr_)) + sizeof(to_));
}

Schedule_DaySchedule_WorkHours::~Schedule_DaySchedule_WorkHours() {
  // @@protoc_insertion_point(destructor:gogo.companies.Schedule.DaySchedule.WorkHours)
  SharedDtor();
}

void Schedule_DaySchedule_WorkHours::SharedDtor() {
}

void Schedule_DaySchedule_WorkHours::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schedule_DaySchedule_WorkHours::descriptor() {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Schedule_DaySchedule_WorkHours& Schedule_DaySchedule_WorkHours::default_instance() {
  protobuf_company_2eproto::InitDefaults();
  return *internal_default_instance();
}

Schedule_DaySchedule_WorkHours* Schedule_DaySchedule_WorkHours::New(::google::protobuf::Arena* arena) const {
  Schedule_DaySchedule_WorkHours* n = new Schedule_DaySchedule_WorkHours;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Schedule_DaySchedule_WorkHours::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.companies.Schedule.DaySchedule.WorkHours)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&fr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&to_) -
        reinterpret_cast<char*>(&fr_)) + sizeof(to_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Schedule_DaySchedule_WorkHours::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.companies.Schedule.DaySchedule.WorkHours)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_fr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_to();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.companies.Schedule.DaySchedule.WorkHours)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.companies.Schedule.DaySchedule.WorkHours)
  return false;
#undef DO_
}

void Schedule_DaySchedule_WorkHours::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.companies.Schedule.DaySchedule.WorkHours)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 fr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fr(), output);
  }

  // required uint32 to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.companies.Schedule.DaySchedule.WorkHours)
}

::google::protobuf::uint8* Schedule_DaySchedule_WorkHours::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.companies.Schedule.DaySchedule.WorkHours)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 fr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fr(), target);
  }

  // required uint32 to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.companies.Schedule.DaySchedule.WorkHours)
  return target;
}

size_t Schedule_DaySchedule_WorkHours::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.companies.Schedule.DaySchedule.WorkHours)
  size_t total_size = 0;

  if (has_fr()) {
    // required uint32 fr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fr());
  }

  if (has_to()) {
    // required uint32 to = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to());
  }

  return total_size;
}
size_t Schedule_DaySchedule_WorkHours::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.companies.Schedule.DaySchedule.WorkHours)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 fr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fr());

    // required uint32 to = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schedule_DaySchedule_WorkHours::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.companies.Schedule.DaySchedule.WorkHours)
  GOOGLE_DCHECK_NE(&from, this);
  const Schedule_DaySchedule_WorkHours* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Schedule_DaySchedule_WorkHours>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.companies.Schedule.DaySchedule.WorkHours)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.companies.Schedule.DaySchedule.WorkHours)
    MergeFrom(*source);
  }
}

void Schedule_DaySchedule_WorkHours::MergeFrom(const Schedule_DaySchedule_WorkHours& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.companies.Schedule.DaySchedule.WorkHours)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      fr_ = from.fr_;
    }
    if (cached_has_bits & 0x00000002u) {
      to_ = from.to_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Schedule_DaySchedule_WorkHours::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.companies.Schedule.DaySchedule.WorkHours)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule_DaySchedule_WorkHours::CopyFrom(const Schedule_DaySchedule_WorkHours& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.companies.Schedule.DaySchedule.WorkHours)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule_DaySchedule_WorkHours::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Schedule_DaySchedule_WorkHours::Swap(Schedule_DaySchedule_WorkHours* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schedule_DaySchedule_WorkHours::InternalSwap(Schedule_DaySchedule_WorkHours* other) {
  using std::swap;
  swap(fr_, other->fr_);
  swap(to_, other->to_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Schedule_DaySchedule_WorkHours::GetMetadata() const {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Schedule_DaySchedule_WorkHours

// required uint32 fr = 1;
bool Schedule_DaySchedule_WorkHours::has_fr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Schedule_DaySchedule_WorkHours::set_has_fr() {
  _has_bits_[0] |= 0x00000001u;
}
void Schedule_DaySchedule_WorkHours::clear_has_fr() {
  _has_bits_[0] &= ~0x00000001u;
}
void Schedule_DaySchedule_WorkHours::clear_fr() {
  fr_ = 0u;
  clear_has_fr();
}
::google::protobuf::uint32 Schedule_DaySchedule_WorkHours::fr() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.DaySchedule.WorkHours.fr)
  return fr_;
}
void Schedule_DaySchedule_WorkHours::set_fr(::google::protobuf::uint32 value) {
  set_has_fr();
  fr_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Schedule.DaySchedule.WorkHours.fr)
}

// required uint32 to = 2;
bool Schedule_DaySchedule_WorkHours::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Schedule_DaySchedule_WorkHours::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
void Schedule_DaySchedule_WorkHours::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
void Schedule_DaySchedule_WorkHours::clear_to() {
  to_ = 0u;
  clear_has_to();
}
::google::protobuf::uint32 Schedule_DaySchedule_WorkHours::to() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.DaySchedule.WorkHours.to)
  return to_;
}
void Schedule_DaySchedule_WorkHours::set_to(::google::protobuf::uint32 value) {
  set_has_to();
  to_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Schedule.DaySchedule.WorkHours.to)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schedule_DaySchedule::kWeekdayFieldNumber;
const int Schedule_DaySchedule::kWorkhoursFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schedule_DaySchedule::Schedule_DaySchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_company_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.companies.Schedule.DaySchedule)
}
Schedule_DaySchedule::Schedule_DaySchedule(const Schedule_DaySchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      workhours_(from.workhours_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weekday_ = from.weekday_;
  // @@protoc_insertion_point(copy_constructor:gogo.companies.Schedule.DaySchedule)
}

void Schedule_DaySchedule::SharedCtor() {
  _cached_size_ = 0;
  weekday_ = 0u;
}

Schedule_DaySchedule::~Schedule_DaySchedule() {
  // @@protoc_insertion_point(destructor:gogo.companies.Schedule.DaySchedule)
  SharedDtor();
}

void Schedule_DaySchedule::SharedDtor() {
}

void Schedule_DaySchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schedule_DaySchedule::descriptor() {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Schedule_DaySchedule& Schedule_DaySchedule::default_instance() {
  protobuf_company_2eproto::InitDefaults();
  return *internal_default_instance();
}

Schedule_DaySchedule* Schedule_DaySchedule::New(::google::protobuf::Arena* arena) const {
  Schedule_DaySchedule* n = new Schedule_DaySchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Schedule_DaySchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.companies.Schedule.DaySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workhours_.Clear();
  weekday_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Schedule_DaySchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.companies.Schedule.DaySchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 weekday = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_weekday();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekday_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.companies.Schedule.DaySchedule.WorkHours workhours = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workhours()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.companies.Schedule.DaySchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.companies.Schedule.DaySchedule)
  return false;
#undef DO_
}

void Schedule_DaySchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.companies.Schedule.DaySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 weekday = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->weekday(), output);
  }

  // repeated .gogo.companies.Schedule.DaySchedule.WorkHours workhours = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->workhours_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->workhours(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.companies.Schedule.DaySchedule)
}

::google::protobuf::uint8* Schedule_DaySchedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.companies.Schedule.DaySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 weekday = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->weekday(), target);
  }

  // repeated .gogo.companies.Schedule.DaySchedule.WorkHours workhours = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->workhours_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->workhours(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.companies.Schedule.DaySchedule)
  return target;
}

size_t Schedule_DaySchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.companies.Schedule.DaySchedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 weekday = 1;
  if (has_weekday()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weekday());
  }
  // repeated .gogo.companies.Schedule.DaySchedule.WorkHours workhours = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->workhours_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->workhours(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schedule_DaySchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.companies.Schedule.DaySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const Schedule_DaySchedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Schedule_DaySchedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.companies.Schedule.DaySchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.companies.Schedule.DaySchedule)
    MergeFrom(*source);
  }
}

void Schedule_DaySchedule::MergeFrom(const Schedule_DaySchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.companies.Schedule.DaySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workhours_.MergeFrom(from.workhours_);
  if (from.has_weekday()) {
    set_weekday(from.weekday());
  }
}

void Schedule_DaySchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.companies.Schedule.DaySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule_DaySchedule::CopyFrom(const Schedule_DaySchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.companies.Schedule.DaySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule_DaySchedule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->workhours())) return false;
  return true;
}

void Schedule_DaySchedule::Swap(Schedule_DaySchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schedule_DaySchedule::InternalSwap(Schedule_DaySchedule* other) {
  using std::swap;
  workhours_.InternalSwap(&other->workhours_);
  swap(weekday_, other->weekday_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Schedule_DaySchedule::GetMetadata() const {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Schedule_DaySchedule

// required uint32 weekday = 1;
bool Schedule_DaySchedule::has_weekday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Schedule_DaySchedule::set_has_weekday() {
  _has_bits_[0] |= 0x00000001u;
}
void Schedule_DaySchedule::clear_has_weekday() {
  _has_bits_[0] &= ~0x00000001u;
}
void Schedule_DaySchedule::clear_weekday() {
  weekday_ = 0u;
  clear_has_weekday();
}
::google::protobuf::uint32 Schedule_DaySchedule::weekday() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.DaySchedule.weekday)
  return weekday_;
}
void Schedule_DaySchedule::set_weekday(::google::protobuf::uint32 value) {
  set_has_weekday();
  weekday_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Schedule.DaySchedule.weekday)
}

// repeated .gogo.companies.Schedule.DaySchedule.WorkHours workhours = 2;
int Schedule_DaySchedule::workhours_size() const {
  return workhours_.size();
}
void Schedule_DaySchedule::clear_workhours() {
  workhours_.Clear();
}
const ::gogo::companies::Schedule_DaySchedule_WorkHours& Schedule_DaySchedule::workhours(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.DaySchedule.workhours)
  return workhours_.Get(index);
}
::gogo::companies::Schedule_DaySchedule_WorkHours* Schedule_DaySchedule::mutable_workhours(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Schedule.DaySchedule.workhours)
  return workhours_.Mutable(index);
}
::gogo::companies::Schedule_DaySchedule_WorkHours* Schedule_DaySchedule::add_workhours() {
  // @@protoc_insertion_point(field_add:gogo.companies.Schedule.DaySchedule.workhours)
  return workhours_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule_WorkHours >*
Schedule_DaySchedule::mutable_workhours() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Schedule.DaySchedule.workhours)
  return &workhours_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule_WorkHours >&
Schedule_DaySchedule::workhours() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Schedule.DaySchedule.workhours)
  return workhours_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schedule::kDescriptionFieldNumber;
const int Schedule::kIs24X7FieldNumber;
const int Schedule::kDaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schedule::Schedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_company_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.companies.Schedule)
}
Schedule::Schedule(const Schedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      days_(from.days_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  is24x7_ = from.is24x7_;
  // @@protoc_insertion_point(copy_constructor:gogo.companies.Schedule)
}

void Schedule::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is24x7_ = false;
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:gogo.companies.Schedule)
  SharedDtor();
}

void Schedule::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Schedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schedule::descriptor() {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Schedule& Schedule::default_instance() {
  protobuf_company_2eproto::InitDefaults();
  return *internal_default_instance();
}

Schedule* Schedule::New(::google::protobuf::Arena* arena) const {
  Schedule* n = new Schedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Schedule::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.companies.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  days_.Clear();
  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  is24x7_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Schedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.companies.Schedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Schedule.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is24x7 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is24x7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is24x7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.companies.Schedule.DaySchedule days = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_days()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.companies.Schedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.companies.Schedule)
  return false;
#undef DO_
}

void Schedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.companies.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Schedule.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // required bool is24x7 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is24x7(), output);
  }

  // repeated .gogo.companies.Schedule.DaySchedule days = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->days_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->days(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.companies.Schedule)
}

::google::protobuf::uint8* Schedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.companies.Schedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Schedule.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // required bool is24x7 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is24x7(), target);
  }

  // repeated .gogo.companies.Schedule.DaySchedule days = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->days_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->days(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.companies.Schedule)
  return target;
}

size_t Schedule::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.companies.Schedule)
  size_t total_size = 0;

  if (has_description()) {
    // required string description = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  if (has_is24x7()) {
    // required bool is24x7 = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Schedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.companies.Schedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string description = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

    // required bool is24x7 = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gogo.companies.Schedule.DaySchedule days = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->days_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->days(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.companies.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  const Schedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Schedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.companies.Schedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.companies.Schedule)
    MergeFrom(*source);
  }
}

void Schedule::MergeFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.companies.Schedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  days_.MergeFrom(from.days_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      is24x7_ = from.is24x7_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Schedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.companies.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule::CopyFrom(const Schedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.companies.Schedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->days())) return false;
  return true;
}

void Schedule::Swap(Schedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schedule::InternalSwap(Schedule* other) {
  using std::swap;
  days_.InternalSwap(&other->days_);
  description_.Swap(&other->description_);
  swap(is24x7_, other->is24x7_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Schedule::GetMetadata() const {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Schedule

// required string description = 1;
bool Schedule::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Schedule::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void Schedule::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void Schedule::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& Schedule::description() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.description)
  return description_.GetNoArena();
}
void Schedule::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Schedule.description)
}
#if LANG_CXX11
void Schedule::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Schedule.description)
}
#endif
void Schedule::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Schedule.description)
}
void Schedule::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Schedule.description)
}
::std::string* Schedule::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Schedule.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Schedule::release_description() {
  // @@protoc_insertion_point(field_release:gogo.companies.Schedule.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Schedule::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Schedule.description)
}

// required bool is24x7 = 2;
bool Schedule::has_is24x7() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Schedule::set_has_is24x7() {
  _has_bits_[0] |= 0x00000002u;
}
void Schedule::clear_has_is24x7() {
  _has_bits_[0] &= ~0x00000002u;
}
void Schedule::clear_is24x7() {
  is24x7_ = false;
  clear_has_is24x7();
}
bool Schedule::is24x7() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.is24x7)
  return is24x7_;
}
void Schedule::set_is24x7(bool value) {
  set_has_is24x7();
  is24x7_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Schedule.is24x7)
}

// repeated .gogo.companies.Schedule.DaySchedule days = 3;
int Schedule::days_size() const {
  return days_.size();
}
void Schedule::clear_days() {
  days_.Clear();
}
const ::gogo::companies::Schedule_DaySchedule& Schedule::days(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.days)
  return days_.Get(index);
}
::gogo::companies::Schedule_DaySchedule* Schedule::mutable_days(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Schedule.days)
  return days_.Mutable(index);
}
::gogo::companies::Schedule_DaySchedule* Schedule::add_days() {
  // @@protoc_insertion_point(field_add:gogo.companies.Schedule.days)
  return days_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule >*
Schedule::mutable_days() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Schedule.days)
  return &days_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule >&
Schedule::days() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Schedule.days)
  return days_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Photo::kKeyFieldNumber;
const int Photo::kWidthFieldNumber;
const int Photo::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Photo::Photo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_company_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.companies.Photo)
}
Photo::Photo(const Photo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:gogo.companies.Photo)
}

void Photo::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Photo::~Photo() {
  // @@protoc_insertion_point(destructor:gogo.companies.Photo)
  SharedDtor();
}

void Photo::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Photo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Photo::descriptor() {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Photo& Photo::default_instance() {
  protobuf_company_2eproto::InitDefaults();
  return *internal_default_instance();
}

Photo* Photo::New(::google::protobuf::Arena* arena) const {
  Photo* n = new Photo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Photo::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.companies.Photo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Photo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.companies.Photo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Photo.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.companies.Photo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.companies.Photo)
  return false;
#undef DO_
}

void Photo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.companies.Photo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Photo.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.companies.Photo)
}

::google::protobuf::uint8* Photo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.companies.Photo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Photo.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.companies.Photo)
  return target;
}

size_t Photo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.companies.Photo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Photo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.companies.Photo)
  GOOGLE_DCHECK_NE(&from, this);
  const Photo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Photo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.companies.Photo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.companies.Photo)
    MergeFrom(*source);
  }
}

void Photo::MergeFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.companies.Photo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Photo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.companies.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Photo::CopyFrom(const Photo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.companies.Photo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Photo::IsInitialized() const {
  return true;
}

void Photo::Swap(Photo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Photo::InternalSwap(Photo* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Photo::GetMetadata() const {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Photo

// optional string key = 1;
bool Photo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Photo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Photo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Photo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Photo::key() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Photo.key)
  return key_.GetNoArena();
}
void Photo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Photo.key)
}
#if LANG_CXX11
void Photo::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Photo.key)
}
#endif
void Photo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Photo.key)
}
void Photo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Photo.key)
}
::std::string* Photo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Photo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Photo::release_key() {
  // @@protoc_insertion_point(field_release:gogo.companies.Photo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Photo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Photo.key)
}

// optional uint32 width = 2;
bool Photo::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Photo::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void Photo::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void Photo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 Photo::width() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Photo.width)
  return width_;
}
void Photo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Photo.width)
}

// optional uint32 height = 3;
bool Photo::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Photo::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void Photo::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void Photo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 Photo::height() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Photo.height)
  return height_;
}
void Photo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Photo.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Review::kRatingFieldNumber;
const int Review::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Review::Review()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_company_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.companies.Review)
}
Review::Review(const Review& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rating_, &from.rating_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&rating_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:gogo.companies.Review)
}

void Review::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rating_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&rating_)) + sizeof(count_));
}

Review::~Review() {
  // @@protoc_insertion_point(destructor:gogo.companies.Review)
  SharedDtor();
}

void Review::SharedDtor() {
}

void Review::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Review::descriptor() {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Review& Review::default_instance() {
  protobuf_company_2eproto::InitDefaults();
  return *internal_default_instance();
}

Review* Review::New(::google::protobuf::Arena* arena) const {
  Review* n = new Review;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Review::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.companies.Review)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&rating_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&rating_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Review::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.companies.Review)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float rating = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_rating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.companies.Review)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.companies.Review)
  return false;
#undef DO_
}

void Review::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.companies.Review)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float rating = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->rating(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.companies.Review)
}

::google::protobuf::uint8* Review::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.companies.Review)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float rating = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->rating(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.companies.Review)
  return target;
}

size_t Review::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.companies.Review)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float rating = 1;
  if (has_rating()) {
    total_size += 1 + 4;
  }
  // optional uint32 count = 2;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Review::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.companies.Review)
  GOOGLE_DCHECK_NE(&from, this);
  const Review* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Review>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.companies.Review)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.companies.Review)
    MergeFrom(*source);
  }
}

void Review::MergeFrom(const Review& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.companies.Review)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      rating_ = from.rating_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Review::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.companies.Review)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Review::CopyFrom(const Review& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.companies.Review)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Review::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Review::Swap(Review* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Review::InternalSwap(Review* other) {
  using std::swap;
  swap(rating_, other->rating_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Review::GetMetadata() const {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Review

// required float rating = 1;
bool Review::has_rating() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Review::set_has_rating() {
  _has_bits_[0] |= 0x00000001u;
}
void Review::clear_has_rating() {
  _has_bits_[0] &= ~0x00000001u;
}
void Review::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
float Review::rating() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Review.rating)
  return rating_;
}
void Review::set_rating(float value) {
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Review.rating)
}

// optional uint32 count = 2;
bool Review::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Review::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void Review::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void Review::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 Review::count() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Review.count)
  return count_;
}
void Review::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Review.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metro::kNameFieldNumber;
const int Metro::kCommentFieldNumber;
const int Metro::kColorFieldNumber;
const int Metro::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metro::Metro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_company_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.companies.Metro)
}
Metro::Metro(const Metro& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment()) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:gogo.companies.Metro)
}

void Metro::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_ = 0u;
}

Metro::~Metro() {
  // @@protoc_insertion_point(destructor:gogo.companies.Metro)
  SharedDtor();
}

void Metro::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Metro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metro::descriptor() {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Metro& Metro::default_instance() {
  protobuf_company_2eproto::InitDefaults();
  return *internal_default_instance();
}

Metro* Metro::New(::google::protobuf::Arena* arena) const {
  Metro* n = new Metro;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metro::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.companies.Metro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!comment_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*comment_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!color_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*color_.UnsafeRawStringPointer())->clear();
    }
  }
  distance_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Metro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.companies.Metro)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Metro.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Metro.comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), static_cast<int>(this->color().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Metro.color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.companies.Metro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.companies.Metro)
  return false;
#undef DO_
}

void Metro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.companies.Metro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Metro.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string comment = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Metro.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // optional string color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Metro.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->color(), output);
  }

  // optional uint32 distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.companies.Metro)
}

::google::protobuf::uint8* Metro::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.companies.Metro)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Metro.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string comment = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Metro.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // optional string color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Metro.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->color(), target);
  }

  // optional uint32 distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.companies.Metro)
  return target;
}

size_t Metro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.companies.Metro)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 14u) {
    // optional string comment = 2;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional uint32 distance = 4;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metro::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.companies.Metro)
  GOOGLE_DCHECK_NE(&from, this);
  const Metro* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metro>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.companies.Metro)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.companies.Metro)
    MergeFrom(*source);
  }
}

void Metro::MergeFrom(const Metro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.companies.Metro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Metro::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.companies.Metro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metro::CopyFrom(const Metro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.companies.Metro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metro::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Metro::Swap(Metro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metro::InternalSwap(Metro* other) {
  using std::swap;
  name_.Swap(&other->name_);
  comment_.Swap(&other->comment_);
  color_.Swap(&other->color_);
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metro::GetMetadata() const {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metro

// required string name = 1;
bool Metro::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Metro::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Metro::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Metro::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Metro::name() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Metro.name)
  return name_.GetNoArena();
}
void Metro::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Metro.name)
}
#if LANG_CXX11
void Metro::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Metro.name)
}
#endif
void Metro::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Metro.name)
}
void Metro::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Metro.name)
}
::std::string* Metro::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Metro.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metro::release_name() {
  // @@protoc_insertion_point(field_release:gogo.companies.Metro.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metro::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Metro.name)
}

// optional string comment = 2;
bool Metro::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Metro::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
void Metro::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
void Metro::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
const ::std::string& Metro::comment() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Metro.comment)
  return comment_.GetNoArena();
}
void Metro::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Metro.comment)
}
#if LANG_CXX11
void Metro::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Metro.comment)
}
#endif
void Metro::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Metro.comment)
}
void Metro::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Metro.comment)
}
::std::string* Metro::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Metro.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metro::release_comment() {
  // @@protoc_insertion_point(field_release:gogo.companies.Metro.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metro::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Metro.comment)
}

// optional string color = 3;
bool Metro::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Metro::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
void Metro::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void Metro::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
const ::std::string& Metro::color() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Metro.color)
  return color_.GetNoArena();
}
void Metro::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Metro.color)
}
#if LANG_CXX11
void Metro::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Metro.color)
}
#endif
void Metro::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Metro.color)
}
void Metro::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Metro.color)
}
::std::string* Metro::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Metro.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metro::release_color() {
  // @@protoc_insertion_point(field_release:gogo.companies.Metro.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metro::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Metro.color)
}

// optional uint32 distance = 4;
bool Metro::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Metro::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void Metro::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void Metro::clear_distance() {
  distance_ = 0u;
  clear_has_distance();
}
::google::protobuf::uint32 Metro::distance() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Metro.distance)
  return distance_;
}
void Metro::set_distance(::google::protobuf::uint32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Metro.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attribute::kTagFieldNumber;
const int Attribute::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attribute::Attribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_company_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.companies.Attribute)
}
Attribute::Attribute(const Attribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.companies.Attribute)
}

void Attribute::SharedCtor() {
  _cached_size_ = 0;
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:gogo.companies.Attribute)
  SharedDtor();
}

void Attribute::SharedDtor() {
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attribute::descriptor() {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Attribute& Attribute::default_instance() {
  protobuf_company_2eproto::InitDefaults();
  return *internal_default_instance();
}

Attribute* Attribute::New(::google::protobuf::Arena* arena) const {
  Attribute* n = new Attribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.companies.Attribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.companies.Attribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Attribute.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Attribute.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.companies.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.companies.Attribute)
  return false;
#undef DO_
}

void Attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.companies.Attribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Attribute.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Attribute.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.companies.Attribute)
}

::google::protobuf::uint8* Attribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.companies.Attribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Attribute.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Attribute.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.companies.Attribute)
  return target;
}

size_t Attribute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.companies.Attribute)
  size_t total_size = 0;

  if (has_tag()) {
    // required string tag = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
size_t Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.companies.Attribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string tag = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.companies.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  const Attribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Attribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.companies.Attribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.companies.Attribute)
    MergeFrom(*source);
  }
}

void Attribute::MergeFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.companies.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
}

void Attribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.companies.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute::CopyFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.companies.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Attribute::Swap(Attribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attribute::InternalSwap(Attribute* other) {
  using std::swap;
  tag_.Swap(&other->tag_);
  name_.Swap(&other->name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Attribute::GetMetadata() const {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Attribute

// required string tag = 1;
bool Attribute::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Attribute::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void Attribute::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void Attribute::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& Attribute::tag() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Attribute.tag)
  return tag_.GetNoArena();
}
void Attribute::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Attribute.tag)
}
#if LANG_CXX11
void Attribute::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Attribute.tag)
}
#endif
void Attribute::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Attribute.tag)
}
void Attribute::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Attribute.tag)
}
::std::string* Attribute::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Attribute.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Attribute::release_tag() {
  // @@protoc_insertion_point(field_release:gogo.companies.Attribute.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Attribute::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Attribute.tag)
}

// required string name = 2;
bool Attribute::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Attribute::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Attribute::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Attribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Attribute::name() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Attribute.name)
  return name_.GetNoArena();
}
void Attribute::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Attribute.name)
}
#if LANG_CXX11
void Attribute::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Attribute.name)
}
#endif
void Attribute::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Attribute.name)
}
void Attribute::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Attribute.name)
}
::std::string* Attribute::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Attribute.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Attribute::release_name() {
  // @@protoc_insertion_point(field_release:gogo.companies.Attribute.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Attribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Attribute.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rubric::kAliasFieldNumber;
const int Rubric::kKindFieldNumber;
const int Rubric::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rubric::Rubric()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_company_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.companies.Rubric)
}
Rubric::Rubric(const Rubric& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_alias()) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_kind()) {
    kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.companies.Rubric)
}

void Rubric::SharedCtor() {
  _cached_size_ = 0;
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Rubric::~Rubric() {
  // @@protoc_insertion_point(destructor:gogo.companies.Rubric)
  SharedDtor();
}

void Rubric::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kind_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rubric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rubric::descriptor() {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rubric& Rubric::default_instance() {
  protobuf_company_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rubric* Rubric::New(::google::protobuf::Arena* arena) const {
  Rubric* n = new Rubric;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rubric::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.companies.Rubric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!alias_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*alias_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!kind_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*kind_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rubric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.companies.Rubric)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string alias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), static_cast<int>(this->alias().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Rubric.alias");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string kind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kind().data(), static_cast<int>(this->kind().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Rubric.kind");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Rubric.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.companies.Rubric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.companies.Rubric)
  return false;
#undef DO_
}

void Rubric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.companies.Rubric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string alias = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Rubric.alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // required string kind = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Rubric.kind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kind(), output);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Rubric.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.companies.Rubric)
}

::google::protobuf::uint8* Rubric::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.companies.Rubric)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string alias = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Rubric.alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // required string kind = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kind().data(), static_cast<int>(this->kind().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Rubric.kind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kind(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Rubric.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.companies.Rubric)
  return target;
}

size_t Rubric::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.companies.Rubric)
  size_t total_size = 0;

  if (has_alias()) {
    // required string alias = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  if (has_kind()) {
    // required string kind = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());
  }

  if (has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
size_t Rubric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.companies.Rubric)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string alias = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());

    // required string kind = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kind());

    // required string name = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rubric::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.companies.Rubric)
  GOOGLE_DCHECK_NE(&from, this);
  const Rubric* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rubric>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.companies.Rubric)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.companies.Rubric)
    MergeFrom(*source);
  }
}

void Rubric::MergeFrom(const Rubric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.companies.Rubric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_alias();
      alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_kind();
      kind_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kind_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
}

void Rubric::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.companies.Rubric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rubric::CopyFrom(const Rubric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.companies.Rubric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rubric::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Rubric::Swap(Rubric* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rubric::InternalSwap(Rubric* other) {
  using std::swap;
  alias_.Swap(&other->alias_);
  kind_.Swap(&other->kind_);
  name_.Swap(&other->name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rubric::GetMetadata() const {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rubric

// required string alias = 1;
bool Rubric::has_alias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Rubric::set_has_alias() {
  _has_bits_[0] |= 0x00000001u;
}
void Rubric::clear_has_alias() {
  _has_bits_[0] &= ~0x00000001u;
}
void Rubric::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
const ::std::string& Rubric::alias() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Rubric.alias)
  return alias_.GetNoArena();
}
void Rubric::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Rubric.alias)
}
#if LANG_CXX11
void Rubric::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Rubric.alias)
}
#endif
void Rubric::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Rubric.alias)
}
void Rubric::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Rubric.alias)
}
::std::string* Rubric::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Rubric.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rubric::release_alias() {
  // @@protoc_insertion_point(field_release:gogo.companies.Rubric.alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rubric::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Rubric.alias)
}

// required string kind = 2;
bool Rubric::has_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Rubric::set_has_kind() {
  _has_bits_[0] |= 0x00000002u;
}
void Rubric::clear_has_kind() {
  _has_bits_[0] &= ~0x00000002u;
}
void Rubric::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kind();
}
const ::std::string& Rubric::kind() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Rubric.kind)
  return kind_.GetNoArena();
}
void Rubric::set_kind(const ::std::string& value) {
  set_has_kind();
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Rubric.kind)
}
#if LANG_CXX11
void Rubric::set_kind(::std::string&& value) {
  set_has_kind();
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Rubric.kind)
}
#endif
void Rubric::set_kind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kind();
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Rubric.kind)
}
void Rubric::set_kind(const char* value, size_t size) {
  set_has_kind();
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Rubric.kind)
}
::std::string* Rubric::mutable_kind() {
  set_has_kind();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Rubric.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rubric::release_kind() {
  // @@protoc_insertion_point(field_release:gogo.companies.Rubric.kind)
  clear_has_kind();
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rubric::set_allocated_kind(::std::string* kind) {
  if (kind != NULL) {
    set_has_kind();
  } else {
    clear_has_kind();
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Rubric.kind)
}

// required string name = 3;
bool Rubric::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Rubric::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void Rubric::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void Rubric::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Rubric::name() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Rubric.name)
  return name_.GetNoArena();
}
void Rubric::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Rubric.name)
}
#if LANG_CXX11
void Rubric::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Rubric.name)
}
#endif
void Rubric::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Rubric.name)
}
void Rubric::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Rubric.name)
}
::std::string* Rubric::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Rubric.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Rubric::release_name() {
  // @@protoc_insertion_point(field_release:gogo.companies.Rubric.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Rubric::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Rubric.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Company::kIdFieldNumber;
const int Company::kNameFieldNumber;
const int Company::kRegion2GisFieldNumber;
const int Company::kRegionRbFieldNumber;
const int Company::kAddressFieldNumber;
const int Company::kNameExtFieldNumber;
const int Company::kUrlsFieldNumber;
const int Company::kPhonesFieldNumber;
const int Company::kPointFieldNumber;
const int Company::kScheduleFieldNumber;
const int Company::kPhotoFieldNumber;
const int Company::kReviewFieldNumber;
const int Company::kMetroFieldNumber;
const int Company::kAttributesFieldNumber;
const int Company::kRubricsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Company::Company()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_company_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.companies.Company)
}
Company::Company(const Company& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      urls_(from.urls_),
      phones_(from.phones_),
      metro_(from.metro_),
      attributes_(from.attributes_),
      rubrics_(from.rubrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  name_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name_ext()) {
    name_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_ext_);
  }
  if (from.has_point()) {
    point_ = new ::gogo::companies::GeoPoint(*from.point_);
  } else {
    point_ = NULL;
  }
  if (from.has_schedule()) {
    schedule_ = new ::gogo::companies::Schedule(*from.schedule_);
  } else {
    schedule_ = NULL;
  }
  if (from.has_photo()) {
    photo_ = new ::gogo::companies::Photo(*from.photo_);
  } else {
    photo_ = NULL;
  }
  if (from.has_review()) {
    review_ = new ::gogo::companies::Review(*from.review_);
  } else {
    review_ = NULL;
  }
  ::memcpy(&region_2gis_, &from.region_2gis_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_rb_) -
    reinterpret_cast<char*>(&region_2gis_)) + sizeof(region_rb_));
  // @@protoc_insertion_point(copy_constructor:gogo.companies.Company)
}

void Company::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_rb_) -
      reinterpret_cast<char*>(&point_)) + sizeof(region_rb_));
}

Company::~Company() {
  // @@protoc_insertion_point(destructor:gogo.companies.Company)
  SharedDtor();
}

void Company::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete schedule_;
  if (this != internal_default_instance()) delete photo_;
  if (this != internal_default_instance()) delete review_;
}

void Company::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Company::descriptor() {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Company& Company::default_instance() {
  protobuf_company_2eproto::InitDefaults();
  return *internal_default_instance();
}

Company* Company::New(::google::protobuf::Arena* arena) const {
  Company* n = new Company;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Company::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.companies.Company)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  phones_.Clear();
  metro_.Clear();
  attributes_.Clear();
  rubrics_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!name_ext_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_ext_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(point_ != NULL);
      point_->::gogo::companies::GeoPoint::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(schedule_ != NULL);
      schedule_->::gogo::companies::Schedule::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(photo_ != NULL);
      photo_->::gogo::companies::Photo::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(review_ != NULL);
      review_->::gogo::companies::Review::Clear();
    }
  }
  if (cached_has_bits & 768u) {
    ::memset(&region_2gis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_rb_) -
        reinterpret_cast<char*>(&region_2gis_)) + sizeof(region_rb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Company::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.companies.Company)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Company.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Company.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 region_2gis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_region_2gis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_2gis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 region_rb = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_region_rb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_rb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Company.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name_ext = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_ext().data(), static_cast<int>(this->name_ext().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Company.name_ext");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string urls = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Company.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string phones = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_phones()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phones(this->phones_size() - 1).data(),
            static_cast<int>(this->phones(this->phones_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.companies.Company.phones");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.companies.GeoPoint point = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.companies.Schedule schedule = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.companies.Photo photo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.companies.Review review = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_review()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.companies.Metro metro = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metro()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.companies.Attribute attributes = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.companies.Rubric rubrics = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rubrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.companies.Company)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.companies.Company)
  return false;
#undef DO_
}

void Company::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.companies.Company)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 region_2gis = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->region_2gis(), output);
  }

  // required uint32 region_rb = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->region_rb(), output);
  }

  // required string address = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->address(), output);
  }

  // optional string name_ext = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_ext().data(), static_cast<int>(this->name_ext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.name_ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name_ext(), output);
  }

  // repeated string urls = 7;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->urls(i), output);
  }

  // repeated string phones = 8;
  for (int i = 0, n = this->phones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phones(i).data(), static_cast<int>(this->phones(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.phones");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->phones(i), output);
  }

  // optional .gogo.companies.GeoPoint point = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->point_, output);
  }

  // optional .gogo.companies.Schedule schedule = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->schedule_, output);
  }

  // optional .gogo.companies.Photo photo = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->photo_, output);
  }

  // optional .gogo.companies.Review review = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->review_, output);
  }

  // repeated .gogo.companies.Metro metro = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metro_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->metro(static_cast<int>(i)), output);
  }

  // repeated .gogo.companies.Attribute attributes = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->attributes(static_cast<int>(i)), output);
  }

  // repeated .gogo.companies.Rubric rubrics = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rubrics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->rubrics(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.companies.Company)
}

::google::protobuf::uint8* Company::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.companies.Company)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 region_2gis = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->region_2gis(), target);
  }

  // required uint32 region_rb = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->region_rb(), target);
  }

  // required string address = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->address(), target);
  }

  // optional string name_ext = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_ext().data(), static_cast<int>(this->name_ext().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.name_ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name_ext(), target);
  }

  // repeated string urls = 7;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->urls(i), target);
  }

  // repeated string phones = 8;
  for (int i = 0, n = this->phones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phones(i).data(), static_cast<int>(this->phones(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.companies.Company.phones");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->phones(i), target);
  }

  // optional .gogo.companies.GeoPoint point = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->point_, deterministic, target);
  }

  // optional .gogo.companies.Schedule schedule = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->schedule_, deterministic, target);
  }

  // optional .gogo.companies.Photo photo = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->photo_, deterministic, target);
  }

  // optional .gogo.companies.Review review = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->review_, deterministic, target);
  }

  // repeated .gogo.companies.Metro metro = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metro_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->metro(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.companies.Attribute attributes = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->attributes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .gogo.companies.Rubric rubrics = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rubrics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->rubrics(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.companies.Company)
  return target;
}

size_t Company::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.companies.Company)
  size_t total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_address()) {
    // required string address = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_region_2gis()) {
    // required uint32 region_2gis = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_2gis());
  }

  if (has_region_rb()) {
    // required uint32 region_rb = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_rb());
  }

  return total_size;
}
size_t Company::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.companies.Company)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000307) ^ 0x00000307) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string address = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required uint32 region_2gis = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_2gis());

    // required uint32 region_rb = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_rb());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string urls = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  // repeated string phones = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->phones_size());
  for (int i = 0, n = this->phones_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->phones(i));
  }

  // repeated .gogo.companies.Metro metro = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->metro_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metro(static_cast<int>(i)));
    }
  }

  // repeated .gogo.companies.Attribute attributes = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes(static_cast<int>(i)));
    }
  }

  // repeated .gogo.companies.Rubric rubrics = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->rubrics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rubrics(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional string name_ext = 6;
    if (has_name_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_ext());
    }

    // optional .gogo.companies.GeoPoint point = 9;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->point_);
    }

    // optional .gogo.companies.Schedule schedule = 10;
    if (has_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->schedule_);
    }

    // optional .gogo.companies.Photo photo = 11;
    if (has_photo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->photo_);
    }

    // optional .gogo.companies.Review review = 12;
    if (has_review()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->review_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Company::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.companies.Company)
  GOOGLE_DCHECK_NE(&from, this);
  const Company* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Company>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.companies.Company)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.companies.Company)
    MergeFrom(*source);
  }
}

void Company::MergeFrom(const Company& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.companies.Company)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  phones_.MergeFrom(from.phones_);
  metro_.MergeFrom(from.metro_);
  attributes_.MergeFrom(from.attributes_);
  rubrics_.MergeFrom(from.rubrics_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_name_ext();
      name_ext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_ext_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_point()->::gogo::companies::GeoPoint::MergeFrom(from.point());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_schedule()->::gogo::companies::Schedule::MergeFrom(from.schedule());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_photo()->::gogo::companies::Photo::MergeFrom(from.photo());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_review()->::gogo::companies::Review::MergeFrom(from.review());
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      region_2gis_ = from.region_2gis_;
    }
    if (cached_has_bits & 0x00000200u) {
      region_rb_ = from.region_rb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Company::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.companies.Company)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Company::CopyFrom(const Company& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.companies.Company)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Company::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000307) != 0x00000307) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->metro())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attributes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rubrics())) return false;
  if (has_point()) {
    if (!this->point_->IsInitialized()) return false;
  }
  if (has_schedule()) {
    if (!this->schedule_->IsInitialized()) return false;
  }
  if (has_review()) {
    if (!this->review_->IsInitialized()) return false;
  }
  return true;
}

void Company::Swap(Company* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Company::InternalSwap(Company* other) {
  using std::swap;
  urls_.InternalSwap(&other->urls_);
  phones_.InternalSwap(&other->phones_);
  metro_.InternalSwap(&other->metro_);
  attributes_.InternalSwap(&other->attributes_);
  rubrics_.InternalSwap(&other->rubrics_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  address_.Swap(&other->address_);
  name_ext_.Swap(&other->name_ext_);
  swap(point_, other->point_);
  swap(schedule_, other->schedule_);
  swap(photo_, other->photo_);
  swap(review_, other->review_);
  swap(region_2gis_, other->region_2gis_);
  swap(region_rb_, other->region_rb_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Company::GetMetadata() const {
  protobuf_company_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_company_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Company

// required string id = 1;
bool Company::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Company::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Company::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Company::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& Company::id() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.id)
  return id_.GetNoArena();
}
void Company::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Company.id)
}
#if LANG_CXX11
void Company::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Company.id)
}
#endif
void Company::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.id)
}
void Company::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.id)
}
::std::string* Company::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Company::release_id() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Company::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.id)
}

// required string name = 2;
bool Company::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Company::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Company::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Company::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Company::name() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.name)
  return name_.GetNoArena();
}
void Company::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Company.name)
}
#if LANG_CXX11
void Company::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Company.name)
}
#endif
void Company::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.name)
}
void Company::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.name)
}
::std::string* Company::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Company::release_name() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Company::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.name)
}

// required uint32 region_2gis = 3;
bool Company::has_region_2gis() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Company::set_has_region_2gis() {
  _has_bits_[0] |= 0x00000100u;
}
void Company::clear_has_region_2gis() {
  _has_bits_[0] &= ~0x00000100u;
}
void Company::clear_region_2gis() {
  region_2gis_ = 0u;
  clear_has_region_2gis();
}
::google::protobuf::uint32 Company::region_2gis() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.region_2gis)
  return region_2gis_;
}
void Company::set_region_2gis(::google::protobuf::uint32 value) {
  set_has_region_2gis();
  region_2gis_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Company.region_2gis)
}

// required uint32 region_rb = 4;
bool Company::has_region_rb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Company::set_has_region_rb() {
  _has_bits_[0] |= 0x00000200u;
}
void Company::clear_has_region_rb() {
  _has_bits_[0] &= ~0x00000200u;
}
void Company::clear_region_rb() {
  region_rb_ = 0u;
  clear_has_region_rb();
}
::google::protobuf::uint32 Company::region_rb() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.region_rb)
  return region_rb_;
}
void Company::set_region_rb(::google::protobuf::uint32 value) {
  set_has_region_rb();
  region_rb_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Company.region_rb)
}

// required string address = 5;
bool Company::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Company::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
void Company::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
void Company::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& Company::address() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.address)
  return address_.GetNoArena();
}
void Company::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Company.address)
}
#if LANG_CXX11
void Company::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Company.address)
}
#endif
void Company::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.address)
}
void Company::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.address)
}
::std::string* Company::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Company::release_address() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Company::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.address)
}

// optional string name_ext = 6;
bool Company::has_name_ext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Company::set_has_name_ext() {
  _has_bits_[0] |= 0x00000008u;
}
void Company::clear_has_name_ext() {
  _has_bits_[0] &= ~0x00000008u;
}
void Company::clear_name_ext() {
  name_ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_ext();
}
const ::std::string& Company::name_ext() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.name_ext)
  return name_ext_.GetNoArena();
}
void Company::set_name_ext(const ::std::string& value) {
  set_has_name_ext();
  name_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Company.name_ext)
}
#if LANG_CXX11
void Company::set_name_ext(::std::string&& value) {
  set_has_name_ext();
  name_ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Company.name_ext)
}
#endif
void Company::set_name_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name_ext();
  name_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.name_ext)
}
void Company::set_name_ext(const char* value, size_t size) {
  set_has_name_ext();
  name_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.name_ext)
}
::std::string* Company::mutable_name_ext() {
  set_has_name_ext();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.name_ext)
  return name_ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Company::release_name_ext() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.name_ext)
  clear_has_name_ext();
  return name_ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Company::set_allocated_name_ext(::std::string* name_ext) {
  if (name_ext != NULL) {
    set_has_name_ext();
  } else {
    clear_has_name_ext();
  }
  name_ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_ext);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.name_ext)
}

// repeated string urls = 7;
int Company::urls_size() const {
  return urls_.size();
}
void Company::clear_urls() {
  urls_.Clear();
}
const ::std::string& Company::urls(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.urls)
  return urls_.Get(index);
}
::std::string* Company::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.urls)
  return urls_.Mutable(index);
}
void Company::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.companies.Company.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Company::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.companies.Company.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
void Company::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.urls)
}
void Company::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.urls)
}
::std::string* Company::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:gogo.companies.Company.urls)
  return urls_.Add();
}
void Company::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.companies.Company.urls)
}
#if LANG_CXX11
void Company::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.companies.Company.urls)
}
#endif
void Company::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.companies.Company.urls)
}
void Company::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.companies.Company.urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Company::urls() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Company.urls)
  return urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Company::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Company.urls)
  return &urls_;
}

// repeated string phones = 8;
int Company::phones_size() const {
  return phones_.size();
}
void Company::clear_phones() {
  phones_.Clear();
}
const ::std::string& Company::phones(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.phones)
  return phones_.Get(index);
}
::std::string* Company::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.phones)
  return phones_.Mutable(index);
}
void Company::set_phones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.companies.Company.phones)
  phones_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Company::set_phones(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.companies.Company.phones)
  phones_.Mutable(index)->assign(std::move(value));
}
#endif
void Company::set_phones(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.phones)
}
void Company::set_phones(int index, const char* value, size_t size) {
  phones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.phones)
}
::std::string* Company::add_phones() {
  // @@protoc_insertion_point(field_add_mutable:gogo.companies.Company.phones)
  return phones_.Add();
}
void Company::add_phones(const ::std::string& value) {
  phones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.companies.Company.phones)
}
#if LANG_CXX11
void Company::add_phones(::std::string&& value) {
  phones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.companies.Company.phones)
}
#endif
void Company::add_phones(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.companies.Company.phones)
}
void Company::add_phones(const char* value, size_t size) {
  phones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.companies.Company.phones)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Company::phones() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Company.phones)
  return phones_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Company::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Company.phones)
  return &phones_;
}

// optional .gogo.companies.GeoPoint point = 9;
bool Company::has_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Company::set_has_point() {
  _has_bits_[0] |= 0x00000010u;
}
void Company::clear_has_point() {
  _has_bits_[0] &= ~0x00000010u;
}
void Company::clear_point() {
  if (point_ != NULL) point_->::gogo::companies::GeoPoint::Clear();
  clear_has_point();
}
const ::gogo::companies::GeoPoint& Company::point() const {
  const ::gogo::companies::GeoPoint* p = point_;
  // @@protoc_insertion_point(field_get:gogo.companies.Company.point)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::companies::GeoPoint*>(
      &::gogo::companies::_GeoPoint_default_instance_);
}
::gogo::companies::GeoPoint* Company::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::gogo::companies::GeoPoint;
  }
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.point)
  return point_;
}
::gogo::companies::GeoPoint* Company::release_point() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.point)
  clear_has_point();
  ::gogo::companies::GeoPoint* temp = point_;
  point_ = NULL;
  return temp;
}
void Company::set_allocated_point(::gogo::companies::GeoPoint* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.point)
}

// optional .gogo.companies.Schedule schedule = 10;
bool Company::has_schedule() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Company::set_has_schedule() {
  _has_bits_[0] |= 0x00000020u;
}
void Company::clear_has_schedule() {
  _has_bits_[0] &= ~0x00000020u;
}
void Company::clear_schedule() {
  if (schedule_ != NULL) schedule_->::gogo::companies::Schedule::Clear();
  clear_has_schedule();
}
const ::gogo::companies::Schedule& Company::schedule() const {
  const ::gogo::companies::Schedule* p = schedule_;
  // @@protoc_insertion_point(field_get:gogo.companies.Company.schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::companies::Schedule*>(
      &::gogo::companies::_Schedule_default_instance_);
}
::gogo::companies::Schedule* Company::mutable_schedule() {
  set_has_schedule();
  if (schedule_ == NULL) {
    schedule_ = new ::gogo::companies::Schedule;
  }
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.schedule)
  return schedule_;
}
::gogo::companies::Schedule* Company::release_schedule() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.schedule)
  clear_has_schedule();
  ::gogo::companies::Schedule* temp = schedule_;
  schedule_ = NULL;
  return temp;
}
void Company::set_allocated_schedule(::gogo::companies::Schedule* schedule) {
  delete schedule_;
  schedule_ = schedule;
  if (schedule) {
    set_has_schedule();
  } else {
    clear_has_schedule();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.schedule)
}

// optional .gogo.companies.Photo photo = 11;
bool Company::has_photo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Company::set_has_photo() {
  _has_bits_[0] |= 0x00000040u;
}
void Company::clear_has_photo() {
  _has_bits_[0] &= ~0x00000040u;
}
void Company::clear_photo() {
  if (photo_ != NULL) photo_->::gogo::companies::Photo::Clear();
  clear_has_photo();
}
const ::gogo::companies::Photo& Company::photo() const {
  const ::gogo::companies::Photo* p = photo_;
  // @@protoc_insertion_point(field_get:gogo.companies.Company.photo)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::companies::Photo*>(
      &::gogo::companies::_Photo_default_instance_);
}
::gogo::companies::Photo* Company::mutable_photo() {
  set_has_photo();
  if (photo_ == NULL) {
    photo_ = new ::gogo::companies::Photo;
  }
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.photo)
  return photo_;
}
::gogo::companies::Photo* Company::release_photo() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.photo)
  clear_has_photo();
  ::gogo::companies::Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}
void Company::set_allocated_photo(::gogo::companies::Photo* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    set_has_photo();
  } else {
    clear_has_photo();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.photo)
}

// optional .gogo.companies.Review review = 12;
bool Company::has_review() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Company::set_has_review() {
  _has_bits_[0] |= 0x00000080u;
}
void Company::clear_has_review() {
  _has_bits_[0] &= ~0x00000080u;
}
void Company::clear_review() {
  if (review_ != NULL) review_->::gogo::companies::Review::Clear();
  clear_has_review();
}
const ::gogo::companies::Review& Company::review() const {
  const ::gogo::companies::Review* p = review_;
  // @@protoc_insertion_point(field_get:gogo.companies.Company.review)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::companies::Review*>(
      &::gogo::companies::_Review_default_instance_);
}
::gogo::companies::Review* Company::mutable_review() {
  set_has_review();
  if (review_ == NULL) {
    review_ = new ::gogo::companies::Review;
  }
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.review)
  return review_;
}
::gogo::companies::Review* Company::release_review() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.review)
  clear_has_review();
  ::gogo::companies::Review* temp = review_;
  review_ = NULL;
  return temp;
}
void Company::set_allocated_review(::gogo::companies::Review* review) {
  delete review_;
  review_ = review;
  if (review) {
    set_has_review();
  } else {
    clear_has_review();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.review)
}

// repeated .gogo.companies.Metro metro = 13;
int Company::metro_size() const {
  return metro_.size();
}
void Company::clear_metro() {
  metro_.Clear();
}
const ::gogo::companies::Metro& Company::metro(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.metro)
  return metro_.Get(index);
}
::gogo::companies::Metro* Company::mutable_metro(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.metro)
  return metro_.Mutable(index);
}
::gogo::companies::Metro* Company::add_metro() {
  // @@protoc_insertion_point(field_add:gogo.companies.Company.metro)
  return metro_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::companies::Metro >*
Company::mutable_metro() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Company.metro)
  return &metro_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Metro >&
Company::metro() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Company.metro)
  return metro_;
}

// repeated .gogo.companies.Attribute attributes = 14;
int Company::attributes_size() const {
  return attributes_.size();
}
void Company::clear_attributes() {
  attributes_.Clear();
}
const ::gogo::companies::Attribute& Company::attributes(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.attributes)
  return attributes_.Get(index);
}
::gogo::companies::Attribute* Company::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.attributes)
  return attributes_.Mutable(index);
}
::gogo::companies::Attribute* Company::add_attributes() {
  // @@protoc_insertion_point(field_add:gogo.companies.Company.attributes)
  return attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::companies::Attribute >*
Company::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Company.attributes)
  return &attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Attribute >&
Company::attributes() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Company.attributes)
  return attributes_;
}

// repeated .gogo.companies.Rubric rubrics = 15;
int Company::rubrics_size() const {
  return rubrics_.size();
}
void Company::clear_rubrics() {
  rubrics_.Clear();
}
const ::gogo::companies::Rubric& Company::rubrics(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.rubrics)
  return rubrics_.Get(index);
}
::gogo::companies::Rubric* Company::mutable_rubrics(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.rubrics)
  return rubrics_.Mutable(index);
}
::gogo::companies::Rubric* Company::add_rubrics() {
  // @@protoc_insertion_point(field_add:gogo.companies.Company.rubrics)
  return rubrics_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::companies::Rubric >*
Company::mutable_rubrics() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Company.rubrics)
  return &rubrics_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Rubric >&
Company::rubrics() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Company.rubrics)
  return rubrics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace companies
}  // namespace gogo

// @@protoc_insertion_point(global_scope)
