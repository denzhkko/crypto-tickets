// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: company.proto

#ifndef PROTOBUF_company_2eproto__INCLUDED
#define PROTOBUF_company_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace gogo {
namespace companies {
class Attribute;
class AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class Company;
class CompanyDefaultTypeInternal;
extern CompanyDefaultTypeInternal _Company_default_instance_;
class GeoPoint;
class GeoPointDefaultTypeInternal;
extern GeoPointDefaultTypeInternal _GeoPoint_default_instance_;
class Metro;
class MetroDefaultTypeInternal;
extern MetroDefaultTypeInternal _Metro_default_instance_;
class Photo;
class PhotoDefaultTypeInternal;
extern PhotoDefaultTypeInternal _Photo_default_instance_;
class Review;
class ReviewDefaultTypeInternal;
extern ReviewDefaultTypeInternal _Review_default_instance_;
class Rubric;
class RubricDefaultTypeInternal;
extern RubricDefaultTypeInternal _Rubric_default_instance_;
class Schedule;
class ScheduleDefaultTypeInternal;
extern ScheduleDefaultTypeInternal _Schedule_default_instance_;
class Schedule_DaySchedule;
class Schedule_DayScheduleDefaultTypeInternal;
extern Schedule_DayScheduleDefaultTypeInternal _Schedule_DaySchedule_default_instance_;
class Schedule_DaySchedule_WorkHours;
class Schedule_DaySchedule_WorkHoursDefaultTypeInternal;
extern Schedule_DaySchedule_WorkHoursDefaultTypeInternal _Schedule_DaySchedule_WorkHours_default_instance_;
}  // namespace companies
}  // namespace gogo

namespace gogo {
namespace companies {

namespace protobuf_company_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_company_2eproto

// ===================================================================

class GeoPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.companies.GeoPoint) */ {
 public:
  GeoPoint();
  virtual ~GeoPoint();

  GeoPoint(const GeoPoint& from);

  inline GeoPoint& operator=(const GeoPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoPoint(GeoPoint&& from) noexcept
    : GeoPoint() {
    *this = ::std::move(from);
  }

  inline GeoPoint& operator=(GeoPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoPoint& default_instance();

  static inline const GeoPoint* internal_default_instance() {
    return reinterpret_cast<const GeoPoint*>(
               &_GeoPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GeoPoint* other);
  friend void swap(GeoPoint& a, GeoPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  GeoPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GeoPoint& from);
  void MergeFrom(const GeoPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GeoPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string lon = 1;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 1;
  const ::std::string& lon() const;
  void set_lon(const ::std::string& value);
  #if LANG_CXX11
  void set_lon(::std::string&& value);
  #endif
  void set_lon(const char* value);
  void set_lon(const char* value, size_t size);
  ::std::string* mutable_lon();
  ::std::string* release_lon();
  void set_allocated_lon(::std::string* lon);

  // required string lat = 2;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 2;
  const ::std::string& lat() const;
  void set_lat(const ::std::string& value);
  #if LANG_CXX11
  void set_lat(::std::string&& value);
  #endif
  void set_lat(const char* value);
  void set_lat(const char* value, size_t size);
  ::std::string* mutable_lat();
  ::std::string* release_lat();
  void set_allocated_lat(::std::string* lat);

  // @@protoc_insertion_point(class_scope:gogo.companies.GeoPoint)
 private:
  void set_has_lon();
  void clear_has_lon();
  void set_has_lat();
  void clear_has_lat();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr lon_;
  ::google::protobuf::internal::ArenaStringPtr lat_;
  friend struct protobuf_company_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Schedule_DaySchedule_WorkHours : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.companies.Schedule.DaySchedule.WorkHours) */ {
 public:
  Schedule_DaySchedule_WorkHours();
  virtual ~Schedule_DaySchedule_WorkHours();

  Schedule_DaySchedule_WorkHours(const Schedule_DaySchedule_WorkHours& from);

  inline Schedule_DaySchedule_WorkHours& operator=(const Schedule_DaySchedule_WorkHours& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Schedule_DaySchedule_WorkHours(Schedule_DaySchedule_WorkHours&& from) noexcept
    : Schedule_DaySchedule_WorkHours() {
    *this = ::std::move(from);
  }

  inline Schedule_DaySchedule_WorkHours& operator=(Schedule_DaySchedule_WorkHours&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Schedule_DaySchedule_WorkHours& default_instance();

  static inline const Schedule_DaySchedule_WorkHours* internal_default_instance() {
    return reinterpret_cast<const Schedule_DaySchedule_WorkHours*>(
               &_Schedule_DaySchedule_WorkHours_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Schedule_DaySchedule_WorkHours* other);
  friend void swap(Schedule_DaySchedule_WorkHours& a, Schedule_DaySchedule_WorkHours& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Schedule_DaySchedule_WorkHours* New() const PROTOBUF_FINAL { return New(NULL); }

  Schedule_DaySchedule_WorkHours* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Schedule_DaySchedule_WorkHours& from);
  void MergeFrom(const Schedule_DaySchedule_WorkHours& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Schedule_DaySchedule_WorkHours* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 fr = 1;
  bool has_fr() const;
  void clear_fr();
  static const int kFrFieldNumber = 1;
  ::google::protobuf::uint32 fr() const;
  void set_fr(::google::protobuf::uint32 value);

  // required uint32 to = 2;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  ::google::protobuf::uint32 to() const;
  void set_to(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.companies.Schedule.DaySchedule.WorkHours)
 private:
  void set_has_fr();
  void clear_has_fr();
  void set_has_to();
  void clear_has_to();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 fr_;
  ::google::protobuf::uint32 to_;
  friend struct protobuf_company_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Schedule_DaySchedule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.companies.Schedule.DaySchedule) */ {
 public:
  Schedule_DaySchedule();
  virtual ~Schedule_DaySchedule();

  Schedule_DaySchedule(const Schedule_DaySchedule& from);

  inline Schedule_DaySchedule& operator=(const Schedule_DaySchedule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Schedule_DaySchedule(Schedule_DaySchedule&& from) noexcept
    : Schedule_DaySchedule() {
    *this = ::std::move(from);
  }

  inline Schedule_DaySchedule& operator=(Schedule_DaySchedule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Schedule_DaySchedule& default_instance();

  static inline const Schedule_DaySchedule* internal_default_instance() {
    return reinterpret_cast<const Schedule_DaySchedule*>(
               &_Schedule_DaySchedule_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Schedule_DaySchedule* other);
  friend void swap(Schedule_DaySchedule& a, Schedule_DaySchedule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Schedule_DaySchedule* New() const PROTOBUF_FINAL { return New(NULL); }

  Schedule_DaySchedule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Schedule_DaySchedule& from);
  void MergeFrom(const Schedule_DaySchedule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Schedule_DaySchedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Schedule_DaySchedule_WorkHours WorkHours;

  // accessors -------------------------------------------------------

  // repeated .gogo.companies.Schedule.DaySchedule.WorkHours workhours = 2;
  int workhours_size() const;
  void clear_workhours();
  static const int kWorkhoursFieldNumber = 2;
  const ::gogo::companies::Schedule_DaySchedule_WorkHours& workhours(int index) const;
  ::gogo::companies::Schedule_DaySchedule_WorkHours* mutable_workhours(int index);
  ::gogo::companies::Schedule_DaySchedule_WorkHours* add_workhours();
  ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule_WorkHours >*
      mutable_workhours();
  const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule_WorkHours >&
      workhours() const;

  // required uint32 weekday = 1;
  bool has_weekday() const;
  void clear_weekday();
  static const int kWeekdayFieldNumber = 1;
  ::google::protobuf::uint32 weekday() const;
  void set_weekday(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.companies.Schedule.DaySchedule)
 private:
  void set_has_weekday();
  void clear_has_weekday();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule_WorkHours > workhours_;
  ::google::protobuf::uint32 weekday_;
  friend struct protobuf_company_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Schedule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.companies.Schedule) */ {
 public:
  Schedule();
  virtual ~Schedule();

  Schedule(const Schedule& from);

  inline Schedule& operator=(const Schedule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Schedule(Schedule&& from) noexcept
    : Schedule() {
    *this = ::std::move(from);
  }

  inline Schedule& operator=(Schedule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Schedule& default_instance();

  static inline const Schedule* internal_default_instance() {
    return reinterpret_cast<const Schedule*>(
               &_Schedule_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Schedule* other);
  friend void swap(Schedule& a, Schedule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Schedule* New() const PROTOBUF_FINAL { return New(NULL); }

  Schedule* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Schedule& from);
  void MergeFrom(const Schedule& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Schedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Schedule_DaySchedule DaySchedule;

  // accessors -------------------------------------------------------

  // repeated .gogo.companies.Schedule.DaySchedule days = 3;
  int days_size() const;
  void clear_days();
  static const int kDaysFieldNumber = 3;
  const ::gogo::companies::Schedule_DaySchedule& days(int index) const;
  ::gogo::companies::Schedule_DaySchedule* mutable_days(int index);
  ::gogo::companies::Schedule_DaySchedule* add_days();
  ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule >*
      mutable_days();
  const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule >&
      days() const;

  // required string description = 1;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // required bool is24x7 = 2;
  bool has_is24x7() const;
  void clear_is24x7();
  static const int kIs24X7FieldNumber = 2;
  bool is24x7() const;
  void set_is24x7(bool value);

  // @@protoc_insertion_point(class_scope:gogo.companies.Schedule)
 private:
  void set_has_description();
  void clear_has_description();
  void set_has_is24x7();
  void clear_has_is24x7();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule > days_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  bool is24x7_;
  friend struct protobuf_company_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Photo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.companies.Photo) */ {
 public:
  Photo();
  virtual ~Photo();

  Photo(const Photo& from);

  inline Photo& operator=(const Photo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Photo(Photo&& from) noexcept
    : Photo() {
    *this = ::std::move(from);
  }

  inline Photo& operator=(Photo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Photo& default_instance();

  static inline const Photo* internal_default_instance() {
    return reinterpret_cast<const Photo*>(
               &_Photo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Photo* other);
  friend void swap(Photo& a, Photo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Photo* New() const PROTOBUF_FINAL { return New(NULL); }

  Photo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Photo& from);
  void MergeFrom(const Photo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Photo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint32 width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.companies.Photo)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  friend struct protobuf_company_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Review : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.companies.Review) */ {
 public:
  Review();
  virtual ~Review();

  Review(const Review& from);

  inline Review& operator=(const Review& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Review(Review&& from) noexcept
    : Review() {
    *this = ::std::move(from);
  }

  inline Review& operator=(Review&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Review& default_instance();

  static inline const Review* internal_default_instance() {
    return reinterpret_cast<const Review*>(
               &_Review_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Review* other);
  friend void swap(Review& a, Review& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Review* New() const PROTOBUF_FINAL { return New(NULL); }

  Review* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Review& from);
  void MergeFrom(const Review& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Review* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float rating = 1;
  bool has_rating() const;
  void clear_rating();
  static const int kRatingFieldNumber = 1;
  float rating() const;
  void set_rating(float value);

  // optional uint32 count = 2;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.companies.Review)
 private:
  void set_has_rating();
  void clear_has_rating();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float rating_;
  ::google::protobuf::uint32 count_;
  friend struct protobuf_company_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Metro : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.companies.Metro) */ {
 public:
  Metro();
  virtual ~Metro();

  Metro(const Metro& from);

  inline Metro& operator=(const Metro& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Metro(Metro&& from) noexcept
    : Metro() {
    *this = ::std::move(from);
  }

  inline Metro& operator=(Metro&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metro& default_instance();

  static inline const Metro* internal_default_instance() {
    return reinterpret_cast<const Metro*>(
               &_Metro_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Metro* other);
  friend void swap(Metro& a, Metro& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metro* New() const PROTOBUF_FINAL { return New(NULL); }

  Metro* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Metro& from);
  void MergeFrom(const Metro& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Metro* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string comment = 2;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 2;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional string color = 3;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  #if LANG_CXX11
  void set_color(::std::string&& value);
  #endif
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional uint32 distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  ::google::protobuf::uint32 distance() const;
  void set_distance(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.companies.Metro)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_comment();
  void clear_has_comment();
  void set_has_color();
  void clear_has_color();
  void set_has_distance();
  void clear_has_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::uint32 distance_;
  friend struct protobuf_company_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Attribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.companies.Attribute) */ {
 public:
  Attribute();
  virtual ~Attribute();

  Attribute(const Attribute& from);

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attribute(Attribute&& from) noexcept
    : Attribute() {
    *this = ::std::move(from);
  }

  inline Attribute& operator=(Attribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attribute& default_instance();

  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
               &_Attribute_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Attribute* other);
  friend void swap(Attribute& a, Attribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attribute* New() const PROTOBUF_FINAL { return New(NULL); }

  Attribute* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Attribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string tag = 1;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gogo.companies.Attribute)
 private:
  void set_has_tag();
  void clear_has_tag();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct protobuf_company_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rubric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.companies.Rubric) */ {
 public:
  Rubric();
  virtual ~Rubric();

  Rubric(const Rubric& from);

  inline Rubric& operator=(const Rubric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rubric(Rubric&& from) noexcept
    : Rubric() {
    *this = ::std::move(from);
  }

  inline Rubric& operator=(Rubric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rubric& default_instance();

  static inline const Rubric* internal_default_instance() {
    return reinterpret_cast<const Rubric*>(
               &_Rubric_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Rubric* other);
  friend void swap(Rubric& a, Rubric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rubric* New() const PROTOBUF_FINAL { return New(NULL); }

  Rubric* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rubric& from);
  void MergeFrom(const Rubric& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rubric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string alias = 1;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // required string kind = 2;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // required string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gogo.companies.Rubric)
 private:
  void set_has_alias();
  void clear_has_alias();
  void set_has_kind();
  void clear_has_kind();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct protobuf_company_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Company : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gogo.companies.Company) */ {
 public:
  Company();
  virtual ~Company();

  Company(const Company& from);

  inline Company& operator=(const Company& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Company(Company&& from) noexcept
    : Company() {
    *this = ::std::move(from);
  }

  inline Company& operator=(Company&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Company& default_instance();

  static inline const Company* internal_default_instance() {
    return reinterpret_cast<const Company*>(
               &_Company_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Company* other);
  friend void swap(Company& a, Company& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Company* New() const PROTOBUF_FINAL { return New(NULL); }

  Company* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Company& from);
  void MergeFrom(const Company& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Company* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string urls = 7;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 7;
  const ::std::string& urls(int index) const;
  ::std::string* mutable_urls(int index);
  void set_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_urls(int index, ::std::string&& value);
  #endif
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  ::std::string* add_urls();
  void add_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_urls(::std::string&& value);
  #endif
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_urls();

  // repeated string phones = 8;
  int phones_size() const;
  void clear_phones();
  static const int kPhonesFieldNumber = 8;
  const ::std::string& phones(int index) const;
  ::std::string* mutable_phones(int index);
  void set_phones(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_phones(int index, ::std::string&& value);
  #endif
  void set_phones(int index, const char* value);
  void set_phones(int index, const char* value, size_t size);
  ::std::string* add_phones();
  void add_phones(const ::std::string& value);
  #if LANG_CXX11
  void add_phones(::std::string&& value);
  #endif
  void add_phones(const char* value);
  void add_phones(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& phones() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_phones();

  // repeated .gogo.companies.Metro metro = 13;
  int metro_size() const;
  void clear_metro();
  static const int kMetroFieldNumber = 13;
  const ::gogo::companies::Metro& metro(int index) const;
  ::gogo::companies::Metro* mutable_metro(int index);
  ::gogo::companies::Metro* add_metro();
  ::google::protobuf::RepeatedPtrField< ::gogo::companies::Metro >*
      mutable_metro();
  const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Metro >&
      metro() const;

  // repeated .gogo.companies.Attribute attributes = 14;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 14;
  const ::gogo::companies::Attribute& attributes(int index) const;
  ::gogo::companies::Attribute* mutable_attributes(int index);
  ::gogo::companies::Attribute* add_attributes();
  ::google::protobuf::RepeatedPtrField< ::gogo::companies::Attribute >*
      mutable_attributes();
  const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Attribute >&
      attributes() const;

  // repeated .gogo.companies.Rubric rubrics = 15;
  int rubrics_size() const;
  void clear_rubrics();
  static const int kRubricsFieldNumber = 15;
  const ::gogo::companies::Rubric& rubrics(int index) const;
  ::gogo::companies::Rubric* mutable_rubrics(int index);
  ::gogo::companies::Rubric* add_rubrics();
  ::google::protobuf::RepeatedPtrField< ::gogo::companies::Rubric >*
      mutable_rubrics();
  const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Rubric >&
      rubrics() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string address = 5;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string name_ext = 6;
  bool has_name_ext() const;
  void clear_name_ext();
  static const int kNameExtFieldNumber = 6;
  const ::std::string& name_ext() const;
  void set_name_ext(const ::std::string& value);
  #if LANG_CXX11
  void set_name_ext(::std::string&& value);
  #endif
  void set_name_ext(const char* value);
  void set_name_ext(const char* value, size_t size);
  ::std::string* mutable_name_ext();
  ::std::string* release_name_ext();
  void set_allocated_name_ext(::std::string* name_ext);

  // optional .gogo.companies.GeoPoint point = 9;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 9;
  const ::gogo::companies::GeoPoint& point() const;
  ::gogo::companies::GeoPoint* mutable_point();
  ::gogo::companies::GeoPoint* release_point();
  void set_allocated_point(::gogo::companies::GeoPoint* point);

  // optional .gogo.companies.Schedule schedule = 10;
  bool has_schedule() const;
  void clear_schedule();
  static const int kScheduleFieldNumber = 10;
  const ::gogo::companies::Schedule& schedule() const;
  ::gogo::companies::Schedule* mutable_schedule();
  ::gogo::companies::Schedule* release_schedule();
  void set_allocated_schedule(::gogo::companies::Schedule* schedule);

  // optional .gogo.companies.Photo photo = 11;
  bool has_photo() const;
  void clear_photo();
  static const int kPhotoFieldNumber = 11;
  const ::gogo::companies::Photo& photo() const;
  ::gogo::companies::Photo* mutable_photo();
  ::gogo::companies::Photo* release_photo();
  void set_allocated_photo(::gogo::companies::Photo* photo);

  // optional .gogo.companies.Review review = 12;
  bool has_review() const;
  void clear_review();
  static const int kReviewFieldNumber = 12;
  const ::gogo::companies::Review& review() const;
  ::gogo::companies::Review* mutable_review();
  ::gogo::companies::Review* release_review();
  void set_allocated_review(::gogo::companies::Review* review);

  // required uint32 region_2gis = 3;
  bool has_region_2gis() const;
  void clear_region_2gis();
  static const int kRegion2GisFieldNumber = 3;
  ::google::protobuf::uint32 region_2gis() const;
  void set_region_2gis(::google::protobuf::uint32 value);

  // required uint32 region_rb = 4;
  bool has_region_rb() const;
  void clear_region_rb();
  static const int kRegionRbFieldNumber = 4;
  ::google::protobuf::uint32 region_rb() const;
  void set_region_rb(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gogo.companies.Company)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_region_2gis();
  void clear_has_region_2gis();
  void set_has_region_rb();
  void clear_has_region_rb();
  void set_has_address();
  void clear_has_address();
  void set_has_name_ext();
  void clear_has_name_ext();
  void set_has_point();
  void clear_has_point();
  void set_has_schedule();
  void clear_has_schedule();
  void set_has_photo();
  void clear_has_photo();
  void set_has_review();
  void clear_has_review();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> urls_;
  ::google::protobuf::RepeatedPtrField< ::std::string> phones_;
  ::google::protobuf::RepeatedPtrField< ::gogo::companies::Metro > metro_;
  ::google::protobuf::RepeatedPtrField< ::gogo::companies::Attribute > attributes_;
  ::google::protobuf::RepeatedPtrField< ::gogo::companies::Rubric > rubrics_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr name_ext_;
  ::gogo::companies::GeoPoint* point_;
  ::gogo::companies::Schedule* schedule_;
  ::gogo::companies::Photo* photo_;
  ::gogo::companies::Review* review_;
  ::google::protobuf::uint32 region_2gis_;
  ::google::protobuf::uint32 region_rb_;
  friend struct protobuf_company_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeoPoint

// required string lon = 1;
inline bool GeoPoint::has_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoPoint::set_has_lon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoPoint::clear_has_lon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeoPoint::clear_lon() {
  lon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lon();
}
inline const ::std::string& GeoPoint::lon() const {
  // @@protoc_insertion_point(field_get:gogo.companies.GeoPoint.lon)
  return lon_.GetNoArena();
}
inline void GeoPoint::set_lon(const ::std::string& value) {
  set_has_lon();
  lon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.GeoPoint.lon)
}
#if LANG_CXX11
inline void GeoPoint::set_lon(::std::string&& value) {
  set_has_lon();
  lon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.GeoPoint.lon)
}
#endif
inline void GeoPoint::set_lon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lon();
  lon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.GeoPoint.lon)
}
inline void GeoPoint::set_lon(const char* value, size_t size) {
  set_has_lon();
  lon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.GeoPoint.lon)
}
inline ::std::string* GeoPoint::mutable_lon() {
  set_has_lon();
  // @@protoc_insertion_point(field_mutable:gogo.companies.GeoPoint.lon)
  return lon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoPoint::release_lon() {
  // @@protoc_insertion_point(field_release:gogo.companies.GeoPoint.lon)
  clear_has_lon();
  return lon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoPoint::set_allocated_lon(::std::string* lon) {
  if (lon != NULL) {
    set_has_lon();
  } else {
    clear_has_lon();
  }
  lon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lon);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.GeoPoint.lon)
}

// required string lat = 2;
inline bool GeoPoint::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoPoint::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoPoint::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoPoint::clear_lat() {
  lat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lat();
}
inline const ::std::string& GeoPoint::lat() const {
  // @@protoc_insertion_point(field_get:gogo.companies.GeoPoint.lat)
  return lat_.GetNoArena();
}
inline void GeoPoint::set_lat(const ::std::string& value) {
  set_has_lat();
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.GeoPoint.lat)
}
#if LANG_CXX11
inline void GeoPoint::set_lat(::std::string&& value) {
  set_has_lat();
  lat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.GeoPoint.lat)
}
#endif
inline void GeoPoint::set_lat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lat();
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.GeoPoint.lat)
}
inline void GeoPoint::set_lat(const char* value, size_t size) {
  set_has_lat();
  lat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.GeoPoint.lat)
}
inline ::std::string* GeoPoint::mutable_lat() {
  set_has_lat();
  // @@protoc_insertion_point(field_mutable:gogo.companies.GeoPoint.lat)
  return lat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeoPoint::release_lat() {
  // @@protoc_insertion_point(field_release:gogo.companies.GeoPoint.lat)
  clear_has_lat();
  return lat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeoPoint::set_allocated_lat(::std::string* lat) {
  if (lat != NULL) {
    set_has_lat();
  } else {
    clear_has_lat();
  }
  lat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lat);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.GeoPoint.lat)
}

// -------------------------------------------------------------------

// Schedule_DaySchedule_WorkHours

// required uint32 fr = 1;
inline bool Schedule_DaySchedule_WorkHours::has_fr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Schedule_DaySchedule_WorkHours::set_has_fr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Schedule_DaySchedule_WorkHours::clear_has_fr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Schedule_DaySchedule_WorkHours::clear_fr() {
  fr_ = 0u;
  clear_has_fr();
}
inline ::google::protobuf::uint32 Schedule_DaySchedule_WorkHours::fr() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.DaySchedule.WorkHours.fr)
  return fr_;
}
inline void Schedule_DaySchedule_WorkHours::set_fr(::google::protobuf::uint32 value) {
  set_has_fr();
  fr_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Schedule.DaySchedule.WorkHours.fr)
}

// required uint32 to = 2;
inline bool Schedule_DaySchedule_WorkHours::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Schedule_DaySchedule_WorkHours::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Schedule_DaySchedule_WorkHours::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Schedule_DaySchedule_WorkHours::clear_to() {
  to_ = 0u;
  clear_has_to();
}
inline ::google::protobuf::uint32 Schedule_DaySchedule_WorkHours::to() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.DaySchedule.WorkHours.to)
  return to_;
}
inline void Schedule_DaySchedule_WorkHours::set_to(::google::protobuf::uint32 value) {
  set_has_to();
  to_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Schedule.DaySchedule.WorkHours.to)
}

// -------------------------------------------------------------------

// Schedule_DaySchedule

// required uint32 weekday = 1;
inline bool Schedule_DaySchedule::has_weekday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Schedule_DaySchedule::set_has_weekday() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Schedule_DaySchedule::clear_has_weekday() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Schedule_DaySchedule::clear_weekday() {
  weekday_ = 0u;
  clear_has_weekday();
}
inline ::google::protobuf::uint32 Schedule_DaySchedule::weekday() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.DaySchedule.weekday)
  return weekday_;
}
inline void Schedule_DaySchedule::set_weekday(::google::protobuf::uint32 value) {
  set_has_weekday();
  weekday_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Schedule.DaySchedule.weekday)
}

// repeated .gogo.companies.Schedule.DaySchedule.WorkHours workhours = 2;
inline int Schedule_DaySchedule::workhours_size() const {
  return workhours_.size();
}
inline void Schedule_DaySchedule::clear_workhours() {
  workhours_.Clear();
}
inline const ::gogo::companies::Schedule_DaySchedule_WorkHours& Schedule_DaySchedule::workhours(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.DaySchedule.workhours)
  return workhours_.Get(index);
}
inline ::gogo::companies::Schedule_DaySchedule_WorkHours* Schedule_DaySchedule::mutable_workhours(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Schedule.DaySchedule.workhours)
  return workhours_.Mutable(index);
}
inline ::gogo::companies::Schedule_DaySchedule_WorkHours* Schedule_DaySchedule::add_workhours() {
  // @@protoc_insertion_point(field_add:gogo.companies.Schedule.DaySchedule.workhours)
  return workhours_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule_WorkHours >*
Schedule_DaySchedule::mutable_workhours() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Schedule.DaySchedule.workhours)
  return &workhours_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule_WorkHours >&
Schedule_DaySchedule::workhours() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Schedule.DaySchedule.workhours)
  return workhours_;
}

// -------------------------------------------------------------------

// Schedule

// required string description = 1;
inline bool Schedule::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Schedule::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Schedule::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Schedule::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& Schedule::description() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.description)
  return description_.GetNoArena();
}
inline void Schedule::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Schedule.description)
}
#if LANG_CXX11
inline void Schedule::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Schedule.description)
}
#endif
inline void Schedule::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Schedule.description)
}
inline void Schedule::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Schedule.description)
}
inline ::std::string* Schedule::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Schedule.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Schedule::release_description() {
  // @@protoc_insertion_point(field_release:gogo.companies.Schedule.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Schedule::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Schedule.description)
}

// required bool is24x7 = 2;
inline bool Schedule::has_is24x7() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Schedule::set_has_is24x7() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Schedule::clear_has_is24x7() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Schedule::clear_is24x7() {
  is24x7_ = false;
  clear_has_is24x7();
}
inline bool Schedule::is24x7() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.is24x7)
  return is24x7_;
}
inline void Schedule::set_is24x7(bool value) {
  set_has_is24x7();
  is24x7_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Schedule.is24x7)
}

// repeated .gogo.companies.Schedule.DaySchedule days = 3;
inline int Schedule::days_size() const {
  return days_.size();
}
inline void Schedule::clear_days() {
  days_.Clear();
}
inline const ::gogo::companies::Schedule_DaySchedule& Schedule::days(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Schedule.days)
  return days_.Get(index);
}
inline ::gogo::companies::Schedule_DaySchedule* Schedule::mutable_days(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Schedule.days)
  return days_.Mutable(index);
}
inline ::gogo::companies::Schedule_DaySchedule* Schedule::add_days() {
  // @@protoc_insertion_point(field_add:gogo.companies.Schedule.days)
  return days_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule >*
Schedule::mutable_days() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Schedule.days)
  return &days_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Schedule_DaySchedule >&
Schedule::days() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Schedule.days)
  return days_;
}

// -------------------------------------------------------------------

// Photo

// optional string key = 1;
inline bool Photo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Photo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Photo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Photo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Photo::key() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Photo.key)
  return key_.GetNoArena();
}
inline void Photo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Photo.key)
}
#if LANG_CXX11
inline void Photo::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Photo.key)
}
#endif
inline void Photo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Photo.key)
}
inline void Photo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Photo.key)
}
inline ::std::string* Photo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Photo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Photo::release_key() {
  // @@protoc_insertion_point(field_release:gogo.companies.Photo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Photo.key)
}

// optional uint32 width = 2;
inline bool Photo::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Photo::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Photo::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Photo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Photo::width() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Photo.width)
  return width_;
}
inline void Photo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Photo.width)
}

// optional uint32 height = 3;
inline bool Photo::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Photo::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Photo::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Photo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Photo::height() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Photo.height)
  return height_;
}
inline void Photo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Photo.height)
}

// -------------------------------------------------------------------

// Review

// required float rating = 1;
inline bool Review::has_rating() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Review::set_has_rating() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Review::clear_has_rating() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Review::clear_rating() {
  rating_ = 0;
  clear_has_rating();
}
inline float Review::rating() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Review.rating)
  return rating_;
}
inline void Review::set_rating(float value) {
  set_has_rating();
  rating_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Review.rating)
}

// optional uint32 count = 2;
inline bool Review::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Review::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Review::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Review::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Review::count() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Review.count)
  return count_;
}
inline void Review::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Review.count)
}

// -------------------------------------------------------------------

// Metro

// required string name = 1;
inline bool Metro::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metro::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metro::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metro::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Metro::name() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Metro.name)
  return name_.GetNoArena();
}
inline void Metro::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Metro.name)
}
#if LANG_CXX11
inline void Metro::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Metro.name)
}
#endif
inline void Metro::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Metro.name)
}
inline void Metro::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Metro.name)
}
inline ::std::string* Metro::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Metro.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metro::release_name() {
  // @@protoc_insertion_point(field_release:gogo.companies.Metro.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metro::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Metro.name)
}

// optional string comment = 2;
inline bool Metro::has_comment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metro::set_has_comment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metro::clear_has_comment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metro::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_comment();
}
inline const ::std::string& Metro::comment() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Metro.comment)
  return comment_.GetNoArena();
}
inline void Metro::set_comment(const ::std::string& value) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Metro.comment)
}
#if LANG_CXX11
inline void Metro::set_comment(::std::string&& value) {
  set_has_comment();
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Metro.comment)
}
#endif
inline void Metro::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Metro.comment)
}
inline void Metro::set_comment(const char* value, size_t size) {
  set_has_comment();
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Metro.comment)
}
inline ::std::string* Metro::mutable_comment() {
  set_has_comment();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Metro.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metro::release_comment() {
  // @@protoc_insertion_point(field_release:gogo.companies.Metro.comment)
  clear_has_comment();
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metro::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Metro.comment)
}

// optional string color = 3;
inline bool Metro::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Metro::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Metro::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Metro::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
inline const ::std::string& Metro::color() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Metro.color)
  return color_.GetNoArena();
}
inline void Metro::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Metro.color)
}
#if LANG_CXX11
inline void Metro::set_color(::std::string&& value) {
  set_has_color();
  color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Metro.color)
}
#endif
inline void Metro::set_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Metro.color)
}
inline void Metro::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Metro.color)
}
inline ::std::string* Metro::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Metro.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metro::release_color() {
  // @@protoc_insertion_point(field_release:gogo.companies.Metro.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metro::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Metro.color)
}

// optional uint32 distance = 4;
inline bool Metro::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Metro::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Metro::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Metro::clear_distance() {
  distance_ = 0u;
  clear_has_distance();
}
inline ::google::protobuf::uint32 Metro::distance() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Metro.distance)
  return distance_;
}
inline void Metro::set_distance(::google::protobuf::uint32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Metro.distance)
}

// -------------------------------------------------------------------

// Attribute

// required string tag = 1;
inline bool Attribute::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attribute::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attribute::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attribute::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
inline const ::std::string& Attribute::tag() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Attribute.tag)
  return tag_.GetNoArena();
}
inline void Attribute::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Attribute.tag)
}
#if LANG_CXX11
inline void Attribute::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Attribute.tag)
}
#endif
inline void Attribute::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Attribute.tag)
}
inline void Attribute::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Attribute.tag)
}
inline ::std::string* Attribute::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Attribute.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attribute::release_tag() {
  // @@protoc_insertion_point(field_release:gogo.companies.Attribute.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Attribute.tag)
}

// required string name = 2;
inline bool Attribute::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attribute::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attribute::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Attribute::name() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Attribute.name)
  return name_.GetNoArena();
}
inline void Attribute::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Attribute.name)
}
#if LANG_CXX11
inline void Attribute::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Attribute.name)
}
#endif
inline void Attribute::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Attribute.name)
}
inline void Attribute::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Attribute.name)
}
inline ::std::string* Attribute::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Attribute.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Attribute::release_name() {
  // @@protoc_insertion_point(field_release:gogo.companies.Attribute.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Attribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Attribute.name)
}

// -------------------------------------------------------------------

// Rubric

// required string alias = 1;
inline bool Rubric::has_alias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rubric::set_has_alias() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rubric::clear_has_alias() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rubric::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& Rubric::alias() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Rubric.alias)
  return alias_.GetNoArena();
}
inline void Rubric::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Rubric.alias)
}
#if LANG_CXX11
inline void Rubric::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Rubric.alias)
}
#endif
inline void Rubric::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Rubric.alias)
}
inline void Rubric::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Rubric.alias)
}
inline ::std::string* Rubric::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Rubric.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rubric::release_alias() {
  // @@protoc_insertion_point(field_release:gogo.companies.Rubric.alias)
  clear_has_alias();
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rubric::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Rubric.alias)
}

// required string kind = 2;
inline bool Rubric::has_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rubric::set_has_kind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rubric::clear_has_kind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rubric::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kind();
}
inline const ::std::string& Rubric::kind() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Rubric.kind)
  return kind_.GetNoArena();
}
inline void Rubric::set_kind(const ::std::string& value) {
  set_has_kind();
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Rubric.kind)
}
#if LANG_CXX11
inline void Rubric::set_kind(::std::string&& value) {
  set_has_kind();
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Rubric.kind)
}
#endif
inline void Rubric::set_kind(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_kind();
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Rubric.kind)
}
inline void Rubric::set_kind(const char* value, size_t size) {
  set_has_kind();
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Rubric.kind)
}
inline ::std::string* Rubric::mutable_kind() {
  set_has_kind();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Rubric.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rubric::release_kind() {
  // @@protoc_insertion_point(field_release:gogo.companies.Rubric.kind)
  clear_has_kind();
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rubric::set_allocated_kind(::std::string* kind) {
  if (kind != NULL) {
    set_has_kind();
  } else {
    clear_has_kind();
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Rubric.kind)
}

// required string name = 3;
inline bool Rubric::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rubric::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rubric::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rubric::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Rubric::name() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Rubric.name)
  return name_.GetNoArena();
}
inline void Rubric::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Rubric.name)
}
#if LANG_CXX11
inline void Rubric::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Rubric.name)
}
#endif
inline void Rubric::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Rubric.name)
}
inline void Rubric::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Rubric.name)
}
inline ::std::string* Rubric::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Rubric.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rubric::release_name() {
  // @@protoc_insertion_point(field_release:gogo.companies.Rubric.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rubric::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Rubric.name)
}

// -------------------------------------------------------------------

// Company

// required string id = 1;
inline bool Company::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Company::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Company::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Company::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Company::id() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.id)
  return id_.GetNoArena();
}
inline void Company::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Company.id)
}
#if LANG_CXX11
inline void Company::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Company.id)
}
#endif
inline void Company::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.id)
}
inline void Company::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.id)
}
inline ::std::string* Company::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Company::release_id() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.id)
}

// required string name = 2;
inline bool Company::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Company::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Company::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Company::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Company::name() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.name)
  return name_.GetNoArena();
}
inline void Company::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Company.name)
}
#if LANG_CXX11
inline void Company::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Company.name)
}
#endif
inline void Company::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.name)
}
inline void Company::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.name)
}
inline ::std::string* Company::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Company::release_name() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.name)
}

// required uint32 region_2gis = 3;
inline bool Company::has_region_2gis() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Company::set_has_region_2gis() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Company::clear_has_region_2gis() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Company::clear_region_2gis() {
  region_2gis_ = 0u;
  clear_has_region_2gis();
}
inline ::google::protobuf::uint32 Company::region_2gis() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.region_2gis)
  return region_2gis_;
}
inline void Company::set_region_2gis(::google::protobuf::uint32 value) {
  set_has_region_2gis();
  region_2gis_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Company.region_2gis)
}

// required uint32 region_rb = 4;
inline bool Company::has_region_rb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Company::set_has_region_rb() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Company::clear_has_region_rb() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Company::clear_region_rb() {
  region_rb_ = 0u;
  clear_has_region_rb();
}
inline ::google::protobuf::uint32 Company::region_rb() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.region_rb)
  return region_rb_;
}
inline void Company::set_region_rb(::google::protobuf::uint32 value) {
  set_has_region_rb();
  region_rb_ = value;
  // @@protoc_insertion_point(field_set:gogo.companies.Company.region_rb)
}

// required string address = 5;
inline bool Company::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Company::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Company::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Company::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Company::address() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.address)
  return address_.GetNoArena();
}
inline void Company::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Company.address)
}
#if LANG_CXX11
inline void Company::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Company.address)
}
#endif
inline void Company::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.address)
}
inline void Company::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.address)
}
inline ::std::string* Company::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Company::release_address() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.address)
}

// optional string name_ext = 6;
inline bool Company::has_name_ext() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Company::set_has_name_ext() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Company::clear_has_name_ext() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Company::clear_name_ext() {
  name_ext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_ext();
}
inline const ::std::string& Company::name_ext() const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.name_ext)
  return name_ext_.GetNoArena();
}
inline void Company::set_name_ext(const ::std::string& value) {
  set_has_name_ext();
  name_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.companies.Company.name_ext)
}
#if LANG_CXX11
inline void Company::set_name_ext(::std::string&& value) {
  set_has_name_ext();
  name_ext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.companies.Company.name_ext)
}
#endif
inline void Company::set_name_ext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name_ext();
  name_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.name_ext)
}
inline void Company::set_name_ext(const char* value, size_t size) {
  set_has_name_ext();
  name_ext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.name_ext)
}
inline ::std::string* Company::mutable_name_ext() {
  set_has_name_ext();
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.name_ext)
  return name_ext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Company::release_name_ext() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.name_ext)
  clear_has_name_ext();
  return name_ext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_name_ext(::std::string* name_ext) {
  if (name_ext != NULL) {
    set_has_name_ext();
  } else {
    clear_has_name_ext();
  }
  name_ext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_ext);
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.name_ext)
}

// repeated string urls = 7;
inline int Company::urls_size() const {
  return urls_.size();
}
inline void Company::clear_urls() {
  urls_.Clear();
}
inline const ::std::string& Company::urls(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.urls)
  return urls_.Get(index);
}
inline ::std::string* Company::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.urls)
  return urls_.Mutable(index);
}
inline void Company::set_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.companies.Company.urls)
  urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Company::set_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.companies.Company.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Company::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.urls)
}
inline void Company::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.urls)
}
inline ::std::string* Company::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:gogo.companies.Company.urls)
  return urls_.Add();
}
inline void Company::add_urls(const ::std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.companies.Company.urls)
}
#if LANG_CXX11
inline void Company::add_urls(::std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.companies.Company.urls)
}
#endif
inline void Company::add_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.companies.Company.urls)
}
inline void Company::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.companies.Company.urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Company::urls() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Company.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Company::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Company.urls)
  return &urls_;
}

// repeated string phones = 8;
inline int Company::phones_size() const {
  return phones_.size();
}
inline void Company::clear_phones() {
  phones_.Clear();
}
inline const ::std::string& Company::phones(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.phones)
  return phones_.Get(index);
}
inline ::std::string* Company::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.phones)
  return phones_.Mutable(index);
}
inline void Company::set_phones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.companies.Company.phones)
  phones_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Company::set_phones(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.companies.Company.phones)
  phones_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Company::set_phones(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.companies.Company.phones)
}
inline void Company::set_phones(int index, const char* value, size_t size) {
  phones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.companies.Company.phones)
}
inline ::std::string* Company::add_phones() {
  // @@protoc_insertion_point(field_add_mutable:gogo.companies.Company.phones)
  return phones_.Add();
}
inline void Company::add_phones(const ::std::string& value) {
  phones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.companies.Company.phones)
}
#if LANG_CXX11
inline void Company::add_phones(::std::string&& value) {
  phones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.companies.Company.phones)
}
#endif
inline void Company::add_phones(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  phones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.companies.Company.phones)
}
inline void Company::add_phones(const char* value, size_t size) {
  phones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.companies.Company.phones)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Company::phones() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Company.phones)
  return phones_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Company::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Company.phones)
  return &phones_;
}

// optional .gogo.companies.GeoPoint point = 9;
inline bool Company::has_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Company::set_has_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Company::clear_has_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Company::clear_point() {
  if (point_ != NULL) point_->::gogo::companies::GeoPoint::Clear();
  clear_has_point();
}
inline const ::gogo::companies::GeoPoint& Company::point() const {
  const ::gogo::companies::GeoPoint* p = point_;
  // @@protoc_insertion_point(field_get:gogo.companies.Company.point)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::companies::GeoPoint*>(
      &::gogo::companies::_GeoPoint_default_instance_);
}
inline ::gogo::companies::GeoPoint* Company::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::gogo::companies::GeoPoint;
  }
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.point)
  return point_;
}
inline ::gogo::companies::GeoPoint* Company::release_point() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.point)
  clear_has_point();
  ::gogo::companies::GeoPoint* temp = point_;
  point_ = NULL;
  return temp;
}
inline void Company::set_allocated_point(::gogo::companies::GeoPoint* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.point)
}

// optional .gogo.companies.Schedule schedule = 10;
inline bool Company::has_schedule() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Company::set_has_schedule() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Company::clear_has_schedule() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Company::clear_schedule() {
  if (schedule_ != NULL) schedule_->::gogo::companies::Schedule::Clear();
  clear_has_schedule();
}
inline const ::gogo::companies::Schedule& Company::schedule() const {
  const ::gogo::companies::Schedule* p = schedule_;
  // @@protoc_insertion_point(field_get:gogo.companies.Company.schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::companies::Schedule*>(
      &::gogo::companies::_Schedule_default_instance_);
}
inline ::gogo::companies::Schedule* Company::mutable_schedule() {
  set_has_schedule();
  if (schedule_ == NULL) {
    schedule_ = new ::gogo::companies::Schedule;
  }
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.schedule)
  return schedule_;
}
inline ::gogo::companies::Schedule* Company::release_schedule() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.schedule)
  clear_has_schedule();
  ::gogo::companies::Schedule* temp = schedule_;
  schedule_ = NULL;
  return temp;
}
inline void Company::set_allocated_schedule(::gogo::companies::Schedule* schedule) {
  delete schedule_;
  schedule_ = schedule;
  if (schedule) {
    set_has_schedule();
  } else {
    clear_has_schedule();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.schedule)
}

// optional .gogo.companies.Photo photo = 11;
inline bool Company::has_photo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Company::set_has_photo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Company::clear_has_photo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Company::clear_photo() {
  if (photo_ != NULL) photo_->::gogo::companies::Photo::Clear();
  clear_has_photo();
}
inline const ::gogo::companies::Photo& Company::photo() const {
  const ::gogo::companies::Photo* p = photo_;
  // @@protoc_insertion_point(field_get:gogo.companies.Company.photo)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::companies::Photo*>(
      &::gogo::companies::_Photo_default_instance_);
}
inline ::gogo::companies::Photo* Company::mutable_photo() {
  set_has_photo();
  if (photo_ == NULL) {
    photo_ = new ::gogo::companies::Photo;
  }
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.photo)
  return photo_;
}
inline ::gogo::companies::Photo* Company::release_photo() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.photo)
  clear_has_photo();
  ::gogo::companies::Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}
inline void Company::set_allocated_photo(::gogo::companies::Photo* photo) {
  delete photo_;
  photo_ = photo;
  if (photo) {
    set_has_photo();
  } else {
    clear_has_photo();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.photo)
}

// optional .gogo.companies.Review review = 12;
inline bool Company::has_review() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Company::set_has_review() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Company::clear_has_review() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Company::clear_review() {
  if (review_ != NULL) review_->::gogo::companies::Review::Clear();
  clear_has_review();
}
inline const ::gogo::companies::Review& Company::review() const {
  const ::gogo::companies::Review* p = review_;
  // @@protoc_insertion_point(field_get:gogo.companies.Company.review)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::companies::Review*>(
      &::gogo::companies::_Review_default_instance_);
}
inline ::gogo::companies::Review* Company::mutable_review() {
  set_has_review();
  if (review_ == NULL) {
    review_ = new ::gogo::companies::Review;
  }
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.review)
  return review_;
}
inline ::gogo::companies::Review* Company::release_review() {
  // @@protoc_insertion_point(field_release:gogo.companies.Company.review)
  clear_has_review();
  ::gogo::companies::Review* temp = review_;
  review_ = NULL;
  return temp;
}
inline void Company::set_allocated_review(::gogo::companies::Review* review) {
  delete review_;
  review_ = review;
  if (review) {
    set_has_review();
  } else {
    clear_has_review();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.companies.Company.review)
}

// repeated .gogo.companies.Metro metro = 13;
inline int Company::metro_size() const {
  return metro_.size();
}
inline void Company::clear_metro() {
  metro_.Clear();
}
inline const ::gogo::companies::Metro& Company::metro(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.metro)
  return metro_.Get(index);
}
inline ::gogo::companies::Metro* Company::mutable_metro(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.metro)
  return metro_.Mutable(index);
}
inline ::gogo::companies::Metro* Company::add_metro() {
  // @@protoc_insertion_point(field_add:gogo.companies.Company.metro)
  return metro_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::companies::Metro >*
Company::mutable_metro() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Company.metro)
  return &metro_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Metro >&
Company::metro() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Company.metro)
  return metro_;
}

// repeated .gogo.companies.Attribute attributes = 14;
inline int Company::attributes_size() const {
  return attributes_.size();
}
inline void Company::clear_attributes() {
  attributes_.Clear();
}
inline const ::gogo::companies::Attribute& Company::attributes(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.attributes)
  return attributes_.Get(index);
}
inline ::gogo::companies::Attribute* Company::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.attributes)
  return attributes_.Mutable(index);
}
inline ::gogo::companies::Attribute* Company::add_attributes() {
  // @@protoc_insertion_point(field_add:gogo.companies.Company.attributes)
  return attributes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::companies::Attribute >*
Company::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Company.attributes)
  return &attributes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Attribute >&
Company::attributes() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Company.attributes)
  return attributes_;
}

// repeated .gogo.companies.Rubric rubrics = 15;
inline int Company::rubrics_size() const {
  return rubrics_.size();
}
inline void Company::clear_rubrics() {
  rubrics_.Clear();
}
inline const ::gogo::companies::Rubric& Company::rubrics(int index) const {
  // @@protoc_insertion_point(field_get:gogo.companies.Company.rubrics)
  return rubrics_.Get(index);
}
inline ::gogo::companies::Rubric* Company::mutable_rubrics(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.companies.Company.rubrics)
  return rubrics_.Mutable(index);
}
inline ::gogo::companies::Rubric* Company::add_rubrics() {
  // @@protoc_insertion_point(field_add:gogo.companies.Company.rubrics)
  return rubrics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::gogo::companies::Rubric >*
Company::mutable_rubrics() {
  // @@protoc_insertion_point(field_mutable_list:gogo.companies.Company.rubrics)
  return &rubrics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::gogo::companies::Rubric >&
Company::rubrics() const {
  // @@protoc_insertion_point(field_list:gogo.companies.Company.rubrics)
  return rubrics_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace companies
}  // namespace gogo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_company_2eproto__INCLUDED
