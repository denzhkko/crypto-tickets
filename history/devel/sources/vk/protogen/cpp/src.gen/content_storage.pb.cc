// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_storage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "content_storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gogo {
namespace storage {
class document_attributesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<document_attributes>
     _instance;
} _document_attributes_default_instance_;
class RegionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Region>
     _instance;
} _Region_default_instance_;
class RegionBlobDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RegionBlob>
     _instance;
} _RegionBlob_default_instance_;
class extra_infoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<extra_info>
     _instance;
} _extra_info_default_instance_;
class spider_document_detailDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<spider_document_detail>
     _instance;
} _spider_document_detail_default_instance_;

namespace protobuf_content_5fstorage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(document_attributes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(document_attributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(document_attributes, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(document_attributes, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, end_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionBlob, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionBlob, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionBlob, data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extra_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extra_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extra_info, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extra_info, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extra_info, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(extra_info, props_ui32_),
  0,
  2,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, download_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, publication_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, extra_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, origin_fetcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, porno_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, spam_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, cuttedblob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, meta_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, disabled_stub_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, redirects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, reindexing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, plainindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, titles_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(spider_document_detail, update_video_),
  0,
  6,
  1,
  7,
  8,
  9,
  ~0u,
  10,
  11,
  ~0u,
  14,
  12,
  13,
  5,
  2,
  15,
  ~0u,
  16,
  3,
  4,
  17,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(document_attributes)},
  { 9, 16, sizeof(Region)},
  { 18, 25, sizeof(RegionBlob)},
  { 27, 36, sizeof(extra_info)},
  { 40, 66, sizeof(spider_document_detail)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_document_attributes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Region_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RegionBlob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_extra_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_spider_document_detail_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "content_storage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_fetch_5flist_2eproto::InitDefaults();
  ::ru::mail::go::webbase::blobs::protobuf_crawl_5fstate_2eproto::InitDefaults();
  _document_attributes_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_document_attributes_default_instance_);_Region_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Region_default_instance_);_RegionBlob_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RegionBlob_default_instance_);_extra_info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_extra_info_default_instance_);_spider_document_detail_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_spider_document_detail_default_instance_);::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::gogo::storage::spider_document_detail::internal_default_instance(),
    1000, 11, false, false,
    ::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    ::gogo::storage::spider_document_detail::internal_default_instance(),
    1001, 14, false, false,
    &::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes_IsValid);
  _spider_document_detail_default_instance_._instance.get_mutable()->cuttedblob_ = const_cast< ::gogo::storage::RegionBlob*>(
      ::gogo::storage::RegionBlob::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025content_storage.proto\022\014gogo.storage\032\020f"
      "etch_list.proto\032\021crawl_state.proto\"2\n\023do"
      "cument_attributes\022\014\n\004name\030\001 \002(\t\022\r\n\005value"
      "\030\002 \002(\t\"$\n\006Region\022\r\n\005start\030\001 \002(\005\022\013\n\003end\030\002"
      " \002(\005\"=\n\nRegionBlob\022\013\n\003num\030\001 \002(\005\022\"\n\004data\030"
      "\002 \003(\0132\024.gogo.storage.Region\"\225\001\n\nextra_in"
      "fo\022\014\n\004type\030\001 \002(\t\0225\n\010encoding\030\002 \002(\0162#.gog"
      "o.storage.extra_info.encoding_t\022\014\n\004data\030"
      "\003 \002(\014\022\022\n\nprops_ui32\030\004 \003(\r\" \n\nencoding_t\022"
      "\010\n\004none\020\000\022\010\n\004utf8\020\001\"\364\014\n\026spider_document_"
      "detail\022\013\n\003url\030\001 \002(\t\022\025\n\rdownload_time\030\002 \002"
      "(\004\022\017\n\007content\030\003 \001(\014\0229\n\004flag\030\004 \002(\0162+.gogo"
      ".storage.spider_document_detail.flag_t\0229"
      "\n\004type\030\005 \001(\0162+.gogo.storage.spider_docum"
      "ent_detail.type_t\022A\n\010language\030\006 \001(\0162/.go"
      "go.storage.spider_document_detail.langua"
      "ge_t\0225\n\nattributes\030\007 \003(\0132!.gogo.storage."
      "document_attributes\022A\n\010encoding\030\010 \001(\0162/."
      "gogo.storage.spider_document_detail.enco"
      "ding_t\022\030\n\020publication_time\030\t \001(\004\022,\n\nextr"
      "a_info\030\n \003(\0132\030.gogo.storage.extra_info\022\035"
      "\n\016origin_fetcher\030\013 \001(\010:\005false\022\023\n\013porno_l"
      "evel\030\014 \001(\r\022\022\n\nspam_level\030\r \001(\r\022,\n\ncutted"
      "Blob\030\016 \001(\0132\030.gogo.storage.RegionBlob\022\030\n\020"
      "meta_description\030\017 \001(\014\022\034\n\rdisabled_stub\030"
      "\020 \001(\010:\005false\022\021\n\tredirects\030\021 \003(\t\022\031\n\nreind"
      "exing\030\022 \001(\010:\005false\022\022\n\nplainIndex\030\023 \001(\014\022\025"
      "\n\rtitles_vector\030\024 \001(\014\022\024\n\014update_video\030\025 "
      "\001(\010\"\260\001\n\006flag_t\022\t\n\005empty\020\000\022\014\n\010original\020\001\022"
      "\032\n\026remove_page_from_index\020\002\022\r\n\tconverted"
      "\020\003\022\032\n\026remove_site_from_index\020\004\022\023\n\017metain"
      "formation\020\005\022\r\n\tnot_found\020\006\022\014\n\010redirect\020\007"
      "\022\024\n\020index_extra_info\020\010\"\374\001\n\006type_t\022\013\n\007unk"
      "nown\020\000\022\010\n\004html\020\001\022\007\n\003xml\020\002\022\007\n\003wml\020\003\022\007\n\003rs"
      "s\020\004\022\007\n\003pdf\020\005\022\007\n\003doc\020\006\022\007\n\003rtf\020\007\022\007\n\003ppt\020\010\022"
      "\007\n\003pps\020\t\022\006\n\002ps\020\n\022\010\n\004jpeg\020\013\022\007\n\003gif\020\014\022\007\n\003p"
      "ng\020\r\022\007\n\003xls\020\016\022\007\n\003txt\020\017\022\007\n\003mid\020\020\022\007\n\003wav\020\021"
      "\022\007\n\003mp3\020\022\022\007\n\003ogg\020\023\022\007\n\003aac\020\024\022\007\n\003wma\020\025\022\007\n\003"
      "aif\020\026\022\007\n\003vqf\020\027\022\006\n\002ra\020\030\022\r\n\triff_webp\020\031\"\245\001"
      "\n\nlanguage_t\022\020\n\014lang_unknown\020\000\022\020\n\014lang_r"
      "ussian\020\001\022\021\n\rlang_cyrillic\020\002\022\022\n\016lang_bolg"
      "arian\020\003\022\022\n\016lang_ukrainian\020\004\022\025\n\021lang_byel"
      "orussian\020\005\022\017\n\013lang_kazakh\020\006\022\020\n\014lang_engl"
      "ish\020\007\"\\\n\nencoding_t\022\021\n\renc_undefined\020\000\022\017"
      "\n\013enc_unknown\020\001\022\014\n\010enc_utf8\020\002\022\016\n\nenc_cp1"
      "251\020\003\022\014\n\010enc_koi8\020\004*\t\010\350\007\020\200\200\200\200\0022[\n\010fetchU"
      "rl\022$.gogo.storage.spider_document_detail"
      "\030\350\007 \001(\0132\".ru.mail.go.webbase.blobs.Fetch"
      "Url2m\n\013fetchStatus\022$.gogo.storage.spider"
      "_document_detail\030\351\007 \001(\01621.ru.mail.go.web"
      "base.blobs.CrawlDetails.stateTypesB\020B\016Co"
      "ntentStorage"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2052);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "content_storage.proto", &protobuf_RegisterTypes);
  ::ru::mail::go::webbase::blobs::protobuf_fetch_5flist_2eproto::AddDescriptors();
  ::ru::mail::go::webbase::blobs::protobuf_crawl_5fstate_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_content_5fstorage_2eproto

const ::google::protobuf::EnumDescriptor* extra_info_encoding_t_descriptor() {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_enum_descriptors[0];
}
bool extra_info_encoding_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const extra_info_encoding_t extra_info::none;
const extra_info_encoding_t extra_info::utf8;
const extra_info_encoding_t extra_info::encoding_t_MIN;
const extra_info_encoding_t extra_info::encoding_t_MAX;
const int extra_info::encoding_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* spider_document_detail_flag_t_descriptor() {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_enum_descriptors[1];
}
bool spider_document_detail_flag_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const spider_document_detail_flag_t spider_document_detail::empty;
const spider_document_detail_flag_t spider_document_detail::original;
const spider_document_detail_flag_t spider_document_detail::remove_page_from_index;
const spider_document_detail_flag_t spider_document_detail::converted;
const spider_document_detail_flag_t spider_document_detail::remove_site_from_index;
const spider_document_detail_flag_t spider_document_detail::metainformation;
const spider_document_detail_flag_t spider_document_detail::not_found;
const spider_document_detail_flag_t spider_document_detail::redirect;
const spider_document_detail_flag_t spider_document_detail::index_extra_info;
const spider_document_detail_flag_t spider_document_detail::flag_t_MIN;
const spider_document_detail_flag_t spider_document_detail::flag_t_MAX;
const int spider_document_detail::flag_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* spider_document_detail_type_t_descriptor() {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_enum_descriptors[2];
}
bool spider_document_detail_type_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const spider_document_detail_type_t spider_document_detail::unknown;
const spider_document_detail_type_t spider_document_detail::html;
const spider_document_detail_type_t spider_document_detail::xml;
const spider_document_detail_type_t spider_document_detail::wml;
const spider_document_detail_type_t spider_document_detail::rss;
const spider_document_detail_type_t spider_document_detail::pdf;
const spider_document_detail_type_t spider_document_detail::doc;
const spider_document_detail_type_t spider_document_detail::rtf;
const spider_document_detail_type_t spider_document_detail::ppt;
const spider_document_detail_type_t spider_document_detail::pps;
const spider_document_detail_type_t spider_document_detail::ps;
const spider_document_detail_type_t spider_document_detail::jpeg;
const spider_document_detail_type_t spider_document_detail::gif;
const spider_document_detail_type_t spider_document_detail::png;
const spider_document_detail_type_t spider_document_detail::xls;
const spider_document_detail_type_t spider_document_detail::txt;
const spider_document_detail_type_t spider_document_detail::mid;
const spider_document_detail_type_t spider_document_detail::wav;
const spider_document_detail_type_t spider_document_detail::mp3;
const spider_document_detail_type_t spider_document_detail::ogg;
const spider_document_detail_type_t spider_document_detail::aac;
const spider_document_detail_type_t spider_document_detail::wma;
const spider_document_detail_type_t spider_document_detail::aif;
const spider_document_detail_type_t spider_document_detail::vqf;
const spider_document_detail_type_t spider_document_detail::ra;
const spider_document_detail_type_t spider_document_detail::riff_webp;
const spider_document_detail_type_t spider_document_detail::type_t_MIN;
const spider_document_detail_type_t spider_document_detail::type_t_MAX;
const int spider_document_detail::type_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* spider_document_detail_language_t_descriptor() {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_enum_descriptors[3];
}
bool spider_document_detail_language_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const spider_document_detail_language_t spider_document_detail::lang_unknown;
const spider_document_detail_language_t spider_document_detail::lang_russian;
const spider_document_detail_language_t spider_document_detail::lang_cyrillic;
const spider_document_detail_language_t spider_document_detail::lang_bolgarian;
const spider_document_detail_language_t spider_document_detail::lang_ukrainian;
const spider_document_detail_language_t spider_document_detail::lang_byelorussian;
const spider_document_detail_language_t spider_document_detail::lang_kazakh;
const spider_document_detail_language_t spider_document_detail::lang_english;
const spider_document_detail_language_t spider_document_detail::language_t_MIN;
const spider_document_detail_language_t spider_document_detail::language_t_MAX;
const int spider_document_detail::language_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* spider_document_detail_encoding_t_descriptor() {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_enum_descriptors[4];
}
bool spider_document_detail_encoding_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const spider_document_detail_encoding_t spider_document_detail::enc_undefined;
const spider_document_detail_encoding_t spider_document_detail::enc_unknown;
const spider_document_detail_encoding_t spider_document_detail::enc_utf8;
const spider_document_detail_encoding_t spider_document_detail::enc_cp1251;
const spider_document_detail_encoding_t spider_document_detail::enc_koi8;
const spider_document_detail_encoding_t spider_document_detail::encoding_t_MIN;
const spider_document_detail_encoding_t spider_document_detail::encoding_t_MAX;
const int spider_document_detail::encoding_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int document_attributes::kNameFieldNumber;
const int document_attributes::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

document_attributes::document_attributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.storage.document_attributes)
}
document_attributes::document_attributes(const document_attributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:gogo.storage.document_attributes)
}

void document_attributes::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

document_attributes::~document_attributes() {
  // @@protoc_insertion_point(destructor:gogo.storage.document_attributes)
  SharedDtor();
}

void document_attributes::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void document_attributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* document_attributes::descriptor() {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const document_attributes& document_attributes::default_instance() {
  protobuf_content_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

document_attributes* document_attributes::New(::google::protobuf::Arena* arena) const {
  document_attributes* n = new document_attributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void document_attributes::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.storage.document_attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool document_attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.storage.document_attributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.storage.document_attributes.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.storage.document_attributes.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.storage.document_attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.storage.document_attributes)
  return false;
#undef DO_
}

void document_attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.storage.document_attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.storage.document_attributes.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.storage.document_attributes.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.storage.document_attributes)
}

::google::protobuf::uint8* document_attributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.storage.document_attributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.storage.document_attributes.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.storage.document_attributes.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.storage.document_attributes)
  return target;
}

size_t document_attributes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.storage.document_attributes)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t document_attributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.storage.document_attributes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void document_attributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.storage.document_attributes)
  GOOGLE_DCHECK_NE(&from, this);
  const document_attributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const document_attributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.storage.document_attributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.storage.document_attributes)
    MergeFrom(*source);
  }
}

void document_attributes::MergeFrom(const document_attributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.storage.document_attributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void document_attributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.storage.document_attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void document_attributes::CopyFrom(const document_attributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.storage.document_attributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool document_attributes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void document_attributes::Swap(document_attributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void document_attributes::InternalSwap(document_attributes* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata document_attributes::GetMetadata() const {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// document_attributes

// required string name = 1;
bool document_attributes::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void document_attributes::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void document_attributes::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void document_attributes::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& document_attributes::name() const {
  // @@protoc_insertion_point(field_get:gogo.storage.document_attributes.name)
  return name_.GetNoArena();
}
void document_attributes::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.document_attributes.name)
}
#if LANG_CXX11
void document_attributes::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.document_attributes.name)
}
#endif
void document_attributes::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.document_attributes.name)
}
void document_attributes::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.document_attributes.name)
}
::std::string* document_attributes::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:gogo.storage.document_attributes.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* document_attributes::release_name() {
  // @@protoc_insertion_point(field_release:gogo.storage.document_attributes.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void document_attributes::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.document_attributes.name)
}

// required string value = 2;
bool document_attributes::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void document_attributes::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void document_attributes::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void document_attributes::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& document_attributes::value() const {
  // @@protoc_insertion_point(field_get:gogo.storage.document_attributes.value)
  return value_.GetNoArena();
}
void document_attributes::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.document_attributes.value)
}
#if LANG_CXX11
void document_attributes::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.document_attributes.value)
}
#endif
void document_attributes::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.document_attributes.value)
}
void document_attributes::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.document_attributes.value)
}
::std::string* document_attributes::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:gogo.storage.document_attributes.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* document_attributes::release_value() {
  // @@protoc_insertion_point(field_release:gogo.storage.document_attributes.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void document_attributes::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.document_attributes.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Region::kStartFieldNumber;
const int Region::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Region::Region()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.storage.Region)
}
Region::Region(const Region& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:gogo.storage.Region)
}

void Region::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:gogo.storage.Region)
  SharedDtor();
}

void Region::SharedDtor() {
}

void Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Region::descriptor() {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Region& Region::default_instance() {
  protobuf_content_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Region* Region::New(::google::protobuf::Arena* arena) const {
  Region* n = new Region;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.storage.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_) -
        reinterpret_cast<char*>(&start_)) + sizeof(end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.storage.Region)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.storage.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.storage.Region)
  return false;
#undef DO_
}

void Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.storage.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start(), output);
  }

  // required int32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.storage.Region)
}

::google::protobuf::uint8* Region::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.storage.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start(), target);
  }

  // required int32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.storage.Region)
  return target;
}

size_t Region::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.storage.Region)
  size_t total_size = 0;

  if (has_start()) {
    // required int32 start = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  if (has_end()) {
    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());
  }

  return total_size;
}
size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.storage.Region)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 start = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());

    // required int32 end = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Region::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.storage.Region)
  GOOGLE_DCHECK_NE(&from, this);
  const Region* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Region>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.storage.Region)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.storage.Region)
    MergeFrom(*source);
  }
}

void Region::MergeFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.storage.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ = from.end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Region::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.storage.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.storage.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Region::Swap(Region* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Region::InternalSwap(Region* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Region::GetMetadata() const {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Region

// required int32 start = 1;
bool Region::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Region::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
void Region::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
void Region::clear_start() {
  start_ = 0;
  clear_has_start();
}
::google::protobuf::int32 Region::start() const {
  // @@protoc_insertion_point(field_get:gogo.storage.Region.start)
  return start_;
}
void Region::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.Region.start)
}

// required int32 end = 2;
bool Region::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Region::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void Region::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void Region::clear_end() {
  end_ = 0;
  clear_has_end();
}
::google::protobuf::int32 Region::end() const {
  // @@protoc_insertion_point(field_get:gogo.storage.Region.end)
  return end_;
}
void Region::set_end(::google::protobuf::int32 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.Region.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionBlob::kNumFieldNumber;
const int RegionBlob::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionBlob::RegionBlob()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.storage.RegionBlob)
}
RegionBlob::RegionBlob(const RegionBlob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:gogo.storage.RegionBlob)
}

void RegionBlob::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
}

RegionBlob::~RegionBlob() {
  // @@protoc_insertion_point(destructor:gogo.storage.RegionBlob)
  SharedDtor();
}

void RegionBlob::SharedDtor() {
}

void RegionBlob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionBlob::descriptor() {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegionBlob& RegionBlob::default_instance() {
  protobuf_content_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

RegionBlob* RegionBlob::New(::google::protobuf::Arena* arena) const {
  RegionBlob* n = new RegionBlob;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.storage.RegionBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegionBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.storage.RegionBlob)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.storage.Region data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.storage.RegionBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.storage.RegionBlob)
  return false;
#undef DO_
}

void RegionBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.storage.RegionBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // repeated .gogo.storage.Region data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.storage.RegionBlob)
}

::google::protobuf::uint8* RegionBlob::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.storage.RegionBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // repeated .gogo.storage.Region data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.storage.RegionBlob)
  return target;
}

size_t RegionBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.storage.RegionBlob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 num = 1;
  if (has_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num());
  }
  // repeated .gogo.storage.Region data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionBlob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.storage.RegionBlob)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionBlob* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionBlob>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.storage.RegionBlob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.storage.RegionBlob)
    MergeFrom(*source);
  }
}

void RegionBlob::MergeFrom(const RegionBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.storage.RegionBlob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_num()) {
    set_num(from.num());
  }
}

void RegionBlob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.storage.RegionBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionBlob::CopyFrom(const RegionBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.storage.RegionBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionBlob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RegionBlob::Swap(RegionBlob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionBlob::InternalSwap(RegionBlob* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(num_, other->num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionBlob::GetMetadata() const {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionBlob

// required int32 num = 1;
bool RegionBlob::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegionBlob::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
void RegionBlob::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegionBlob::clear_num() {
  num_ = 0;
  clear_has_num();
}
::google::protobuf::int32 RegionBlob::num() const {
  // @@protoc_insertion_point(field_get:gogo.storage.RegionBlob.num)
  return num_;
}
void RegionBlob::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.RegionBlob.num)
}

// repeated .gogo.storage.Region data = 2;
int RegionBlob::data_size() const {
  return data_.size();
}
void RegionBlob::clear_data() {
  data_.Clear();
}
const ::gogo::storage::Region& RegionBlob::data(int index) const {
  // @@protoc_insertion_point(field_get:gogo.storage.RegionBlob.data)
  return data_.Get(index);
}
::gogo::storage::Region* RegionBlob::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.storage.RegionBlob.data)
  return data_.Mutable(index);
}
::gogo::storage::Region* RegionBlob::add_data() {
  // @@protoc_insertion_point(field_add:gogo.storage.RegionBlob.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::storage::Region >*
RegionBlob::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:gogo.storage.RegionBlob.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::storage::Region >&
RegionBlob::data() const {
  // @@protoc_insertion_point(field_list:gogo.storage.RegionBlob.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int extra_info::kTypeFieldNumber;
const int extra_info::kEncodingFieldNumber;
const int extra_info::kDataFieldNumber;
const int extra_info::kPropsUi32FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

extra_info::extra_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.storage.extra_info)
}
extra_info::extra_info(const extra_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      props_ui32_(from.props_ui32_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  encoding_ = from.encoding_;
  // @@protoc_insertion_point(copy_constructor:gogo.storage.extra_info)
}

void extra_info::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoding_ = 0;
}

extra_info::~extra_info() {
  // @@protoc_insertion_point(destructor:gogo.storage.extra_info)
  SharedDtor();
}

void extra_info::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void extra_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* extra_info::descriptor() {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const extra_info& extra_info::default_instance() {
  protobuf_content_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

extra_info* extra_info::New(::google::protobuf::Arena* arena) const {
  extra_info* n = new extra_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void extra_info::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.storage.extra_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_ui32_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  encoding_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool extra_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.storage.extra_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.storage.extra_info.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gogo.storage.extra_info.encoding_t encoding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::storage::extra_info_encoding_t_IsValid(value)) {
            set_encoding(static_cast< ::gogo::storage::extra_info_encoding_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 props_ui32 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_props_ui32())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_props_ui32())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.storage.extra_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.storage.extra_info)
  return false;
#undef DO_
}

void extra_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.storage.extra_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.storage.extra_info.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required .gogo.storage.extra_info.encoding_t encoding = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // repeated uint32 props_ui32 = 4;
  for (int i = 0, n = this->props_ui32_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->props_ui32(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.storage.extra_info)
}

::google::protobuf::uint8* extra_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.storage.extra_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.storage.extra_info.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required .gogo.storage.extra_info.encoding_t encoding = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // repeated uint32 props_ui32 = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->props_ui32_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.storage.extra_info)
  return target;
}

size_t extra_info::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.storage.extra_info)
  size_t total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_encoding()) {
    // required .gogo.storage.extra_info.encoding_t encoding = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  return total_size;
}
size_t extra_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.storage.extra_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required .gogo.storage.extra_info.encoding_t encoding = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 props_ui32 = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->props_ui32_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->props_ui32_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void extra_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.storage.extra_info)
  GOOGLE_DCHECK_NE(&from, this);
  const extra_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const extra_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.storage.extra_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.storage.extra_info)
    MergeFrom(*source);
  }
}

void extra_info::MergeFrom(const extra_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.storage.extra_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_ui32_.MergeFrom(from.props_ui32_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      encoding_ = from.encoding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void extra_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.storage.extra_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void extra_info::CopyFrom(const extra_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.storage.extra_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool extra_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void extra_info::Swap(extra_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void extra_info::InternalSwap(extra_info* other) {
  using std::swap;
  props_ui32_.InternalSwap(&other->props_ui32_);
  type_.Swap(&other->type_);
  data_.Swap(&other->data_);
  swap(encoding_, other->encoding_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata extra_info::GetMetadata() const {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// extra_info

// required string type = 1;
bool extra_info::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void extra_info::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void extra_info::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void extra_info::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& extra_info::type() const {
  // @@protoc_insertion_point(field_get:gogo.storage.extra_info.type)
  return type_.GetNoArena();
}
void extra_info::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.extra_info.type)
}
#if LANG_CXX11
void extra_info::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.extra_info.type)
}
#endif
void extra_info::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.extra_info.type)
}
void extra_info::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.extra_info.type)
}
::std::string* extra_info::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:gogo.storage.extra_info.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* extra_info::release_type() {
  // @@protoc_insertion_point(field_release:gogo.storage.extra_info.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void extra_info::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.extra_info.type)
}

// required .gogo.storage.extra_info.encoding_t encoding = 2;
bool extra_info::has_encoding() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void extra_info::set_has_encoding() {
  _has_bits_[0] |= 0x00000004u;
}
void extra_info::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000004u;
}
void extra_info::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
::gogo::storage::extra_info_encoding_t extra_info::encoding() const {
  // @@protoc_insertion_point(field_get:gogo.storage.extra_info.encoding)
  return static_cast< ::gogo::storage::extra_info_encoding_t >(encoding_);
}
void extra_info::set_encoding(::gogo::storage::extra_info_encoding_t value) {
  assert(::gogo::storage::extra_info_encoding_t_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.extra_info.encoding)
}

// required bytes data = 3;
bool extra_info::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void extra_info::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void extra_info::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void extra_info::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& extra_info::data() const {
  // @@protoc_insertion_point(field_get:gogo.storage.extra_info.data)
  return data_.GetNoArena();
}
void extra_info::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.extra_info.data)
}
#if LANG_CXX11
void extra_info::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.extra_info.data)
}
#endif
void extra_info::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.extra_info.data)
}
void extra_info::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.extra_info.data)
}
::std::string* extra_info::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:gogo.storage.extra_info.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* extra_info::release_data() {
  // @@protoc_insertion_point(field_release:gogo.storage.extra_info.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void extra_info::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.extra_info.data)
}

// repeated uint32 props_ui32 = 4;
int extra_info::props_ui32_size() const {
  return props_ui32_.size();
}
void extra_info::clear_props_ui32() {
  props_ui32_.Clear();
}
::google::protobuf::uint32 extra_info::props_ui32(int index) const {
  // @@protoc_insertion_point(field_get:gogo.storage.extra_info.props_ui32)
  return props_ui32_.Get(index);
}
void extra_info::set_props_ui32(int index, ::google::protobuf::uint32 value) {
  props_ui32_.Set(index, value);
  // @@protoc_insertion_point(field_set:gogo.storage.extra_info.props_ui32)
}
void extra_info::add_props_ui32(::google::protobuf::uint32 value) {
  props_ui32_.Add(value);
  // @@protoc_insertion_point(field_add:gogo.storage.extra_info.props_ui32)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
extra_info::props_ui32() const {
  // @@protoc_insertion_point(field_list:gogo.storage.extra_info.props_ui32)
  return props_ui32_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
extra_info::mutable_props_ui32() {
  // @@protoc_insertion_point(field_mutable_list:gogo.storage.extra_info.props_ui32)
  return &props_ui32_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int spider_document_detail::kUrlFieldNumber;
const int spider_document_detail::kDownloadTimeFieldNumber;
const int spider_document_detail::kContentFieldNumber;
const int spider_document_detail::kFlagFieldNumber;
const int spider_document_detail::kTypeFieldNumber;
const int spider_document_detail::kLanguageFieldNumber;
const int spider_document_detail::kAttributesFieldNumber;
const int spider_document_detail::kEncodingFieldNumber;
const int spider_document_detail::kPublicationTimeFieldNumber;
const int spider_document_detail::kExtraInfoFieldNumber;
const int spider_document_detail::kOriginFetcherFieldNumber;
const int spider_document_detail::kPornoLevelFieldNumber;
const int spider_document_detail::kSpamLevelFieldNumber;
const int spider_document_detail::kCuttedBlobFieldNumber;
const int spider_document_detail::kMetaDescriptionFieldNumber;
const int spider_document_detail::kDisabledStubFieldNumber;
const int spider_document_detail::kRedirectsFieldNumber;
const int spider_document_detail::kReindexingFieldNumber;
const int spider_document_detail::kPlainIndexFieldNumber;
const int spider_document_detail::kTitlesVectorFieldNumber;
const int spider_document_detail::kUpdateVideoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

spider_document_detail::spider_document_detail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_5fstorage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gogo.storage.spider_document_detail)
}
spider_document_detail::spider_document_detail(const spider_document_detail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      attributes_(from.attributes_),
      extra_info_(from.extra_info_),
      redirects_(from.redirects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  meta_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_meta_description()) {
    meta_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meta_description_);
  }
  plainindex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_plainindex()) {
    plainindex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plainindex_);
  }
  titles_vector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_titles_vector()) {
    titles_vector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.titles_vector_);
  }
  if (from.has_cuttedblob()) {
    cuttedblob_ = new ::gogo::storage::RegionBlob(*from.cuttedblob_);
  } else {
    cuttedblob_ = NULL;
  }
  ::memcpy(&download_time_, &from.download_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_video_) -
    reinterpret_cast<char*>(&download_time_)) + sizeof(update_video_));
  // @@protoc_insertion_point(copy_constructor:gogo.storage.spider_document_detail)
}

void spider_document_detail::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plainindex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  titles_vector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cuttedblob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_video_) -
      reinterpret_cast<char*>(&cuttedblob_)) + sizeof(update_video_));
}

spider_document_detail::~spider_document_detail() {
  // @@protoc_insertion_point(destructor:gogo.storage.spider_document_detail)
  SharedDtor();
}

void spider_document_detail::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plainindex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  titles_vector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cuttedblob_;
}

void spider_document_detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* spider_document_detail::descriptor() {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const spider_document_detail& spider_document_detail::default_instance() {
  protobuf_content_5fstorage_2eproto::InitDefaults();
  return *internal_default_instance();
}

spider_document_detail* spider_document_detail::New(::google::protobuf::Arena* arena) const {
  spider_document_detail* n = new spider_document_detail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void spider_document_detail::Clear() {
// @@protoc_insertion_point(message_clear_start:gogo.storage.spider_document_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  attributes_.Clear();
  extra_info_.Clear();
  redirects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!meta_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*meta_description_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!plainindex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*plainindex_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!titles_vector_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*titles_vector_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cuttedblob_ != NULL);
      cuttedblob_->::gogo::storage::RegionBlob::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&download_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_) -
        reinterpret_cast<char*>(&download_time_)) + sizeof(flag_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disabled_stub_) -
        reinterpret_cast<char*>(&type_)) + sizeof(disabled_stub_));
  }
  if (cached_has_bits & 196608u) {
    ::memset(&reindexing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_video_) -
        reinterpret_cast<char*>(&reindexing_)) + sizeof(update_video_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool spider_document_detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gogo.storage.spider_document_detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.storage.spider_document_detail.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 download_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_download_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &download_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gogo.storage.spider_document_detail.flag_t flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::storage::spider_document_detail_flag_t_IsValid(value)) {
            set_flag(static_cast< ::gogo::storage::spider_document_detail_flag_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.storage.spider_document_detail.type_t type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::storage::spider_document_detail_type_t_IsValid(value)) {
            set_type(static_cast< ::gogo::storage::spider_document_detail_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.storage.spider_document_detail.language_t language = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::storage::spider_document_detail_language_t_IsValid(value)) {
            set_language(static_cast< ::gogo::storage::spider_document_detail_language_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.storage.document_attributes attributes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.storage.spider_document_detail.encoding_t encoding = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gogo::storage::spider_document_detail_encoding_t_IsValid(value)) {
            set_encoding(static_cast< ::gogo::storage::spider_document_detail_encoding_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 publication_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_publication_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publication_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gogo.storage.extra_info extra_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool origin_fetcher = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_origin_fetcher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &origin_fetcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 porno_level = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_porno_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &porno_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spam_level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_spam_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spam_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gogo.storage.RegionBlob cuttedBlob = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cuttedblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes meta_description = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_meta_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disabled_stub = 16 [default = false];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_disabled_stub();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_stub_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string redirects = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_redirects()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirects(this->redirects_size() - 1).data(),
            static_cast<int>(this->redirects(this->redirects_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gogo.storage.spider_document_detail.redirects");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reindexing = 18 [default = false];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_reindexing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reindexing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes plainIndex = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_plainindex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes titles_vector = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_titles_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool update_video = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_update_video();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gogo.storage.spider_document_detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gogo.storage.spider_document_detail)
  return false;
#undef DO_
}

void spider_document_detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gogo.storage.spider_document_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.storage.spider_document_detail.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // required uint64 download_time = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->download_time(), output);
  }

  // optional bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // required .gogo.storage.spider_document_detail.flag_t flag = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->flag(), output);
  }

  // optional .gogo.storage.spider_document_detail.type_t type = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .gogo.storage.spider_document_detail.language_t language = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->language(), output);
  }

  // repeated .gogo.storage.document_attributes attributes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attributes(static_cast<int>(i)), output);
  }

  // optional .gogo.storage.spider_document_detail.encoding_t encoding = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->encoding(), output);
  }

  // optional uint64 publication_time = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->publication_time(), output);
  }

  // repeated .gogo.storage.extra_info extra_info = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->extra_info(static_cast<int>(i)), output);
  }

  // optional bool origin_fetcher = 11 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->origin_fetcher(), output);
  }

  // optional uint32 porno_level = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->porno_level(), output);
  }

  // optional uint32 spam_level = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->spam_level(), output);
  }

  // optional .gogo.storage.RegionBlob cuttedBlob = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->cuttedblob_, output);
  }

  // optional bytes meta_description = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->meta_description(), output);
  }

  // optional bool disabled_stub = 16 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->disabled_stub(), output);
  }

  // repeated string redirects = 17;
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirects(i).data(), static_cast<int>(this->redirects(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.storage.spider_document_detail.redirects");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->redirects(i), output);
  }

  // optional bool reindexing = 18 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->reindexing(), output);
  }

  // optional bytes plainIndex = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->plainindex(), output);
  }

  // optional bytes titles_vector = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->titles_vector(), output);
  }

  // optional bool update_video = 21;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->update_video(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gogo.storage.spider_document_detail)
}

::google::protobuf::uint8* spider_document_detail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gogo.storage.spider_document_detail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.storage.spider_document_detail.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // required uint64 download_time = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->download_time(), target);
  }

  // optional bytes content = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // required .gogo.storage.spider_document_detail.flag_t flag = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->flag(), target);
  }

  // optional .gogo.storage.spider_document_detail.type_t type = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .gogo.storage.spider_document_detail.language_t language = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->language(), target);
  }

  // repeated .gogo.storage.document_attributes attributes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attributes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->attributes(static_cast<int>(i)), deterministic, target);
  }

  // optional .gogo.storage.spider_document_detail.encoding_t encoding = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->encoding(), target);
  }

  // optional uint64 publication_time = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->publication_time(), target);
  }

  // repeated .gogo.storage.extra_info extra_info = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->extra_info(static_cast<int>(i)), deterministic, target);
  }

  // optional bool origin_fetcher = 11 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->origin_fetcher(), target);
  }

  // optional uint32 porno_level = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->porno_level(), target);
  }

  // optional uint32 spam_level = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->spam_level(), target);
  }

  // optional .gogo.storage.RegionBlob cuttedBlob = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->cuttedblob_, deterministic, target);
  }

  // optional bytes meta_description = 15;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->meta_description(), target);
  }

  // optional bool disabled_stub = 16 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->disabled_stub(), target);
  }

  // repeated string redirects = 17;
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirects(i).data(), static_cast<int>(this->redirects(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gogo.storage.spider_document_detail.redirects");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->redirects(i), target);
  }

  // optional bool reindexing = 18 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->reindexing(), target);
  }

  // optional bytes plainIndex = 19;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->plainindex(), target);
  }

  // optional bytes titles_vector = 20;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->titles_vector(), target);
  }

  // optional bool update_video = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->update_video(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gogo.storage.spider_document_detail)
  return target;
}

size_t spider_document_detail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gogo.storage.spider_document_detail)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_download_time()) {
    // required uint64 download_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());
  }

  if (has_flag()) {
    // required .gogo.storage.spider_document_detail.flag_t flag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
  }

  return total_size;
}
size_t spider_document_detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gogo.storage.spider_document_detail)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000c1) ^ 0x000000c1) == 0) {  // All required fields are present.
    // required string url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());

    // required uint64 download_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->download_time());

    // required .gogo.storage.spider_document_detail.flag_t flag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .gogo.storage.document_attributes attributes = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes(static_cast<int>(i)));
    }
  }

  // repeated .gogo.storage.extra_info extra_info = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_info(static_cast<int>(i)));
    }
  }

  // repeated string redirects = 17;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->redirects_size());
  for (int i = 0, n = this->redirects_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->redirects(i));
  }

  if (_has_bits_[0 / 32] & 62u) {
    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional bytes meta_description = 15;
    if (has_meta_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->meta_description());
    }

    // optional bytes plainIndex = 19;
    if (has_plainindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->plainindex());
    }

    // optional bytes titles_vector = 20;
    if (has_titles_vector()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->titles_vector());
    }

    // optional .gogo.storage.RegionBlob cuttedBlob = 14;
    if (has_cuttedblob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cuttedblob_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .gogo.storage.spider_document_detail.type_t type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .gogo.storage.spider_document_detail.language_t language = 6;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

    // optional .gogo.storage.spider_document_detail.encoding_t encoding = 8;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

    // optional uint64 publication_time = 9;
    if (has_publication_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publication_time());
    }

    // optional uint32 porno_level = 12;
    if (has_porno_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->porno_level());
    }

    // optional uint32 spam_level = 13;
    if (has_spam_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spam_level());
    }

    // optional bool origin_fetcher = 11 [default = false];
    if (has_origin_fetcher()) {
      total_size += 1 + 1;
    }

    // optional bool disabled_stub = 16 [default = false];
    if (has_disabled_stub()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional bool reindexing = 18 [default = false];
    if (has_reindexing()) {
      total_size += 2 + 1;
    }

    // optional bool update_video = 21;
    if (has_update_video()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void spider_document_detail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gogo.storage.spider_document_detail)
  GOOGLE_DCHECK_NE(&from, this);
  const spider_document_detail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const spider_document_detail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gogo.storage.spider_document_detail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gogo.storage.spider_document_detail)
    MergeFrom(*source);
  }
}

void spider_document_detail::MergeFrom(const spider_document_detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gogo.storage.spider_document_detail)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  extra_info_.MergeFrom(from.extra_info_);
  redirects_.MergeFrom(from.redirects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_meta_description();
      meta_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.meta_description_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_plainindex();
      plainindex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plainindex_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_titles_vector();
      titles_vector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.titles_vector_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_cuttedblob()->::gogo::storage::RegionBlob::MergeFrom(from.cuttedblob());
    }
    if (cached_has_bits & 0x00000040u) {
      download_time_ = from.download_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000400u) {
      encoding_ = from.encoding_;
    }
    if (cached_has_bits & 0x00000800u) {
      publication_time_ = from.publication_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      porno_level_ = from.porno_level_;
    }
    if (cached_has_bits & 0x00002000u) {
      spam_level_ = from.spam_level_;
    }
    if (cached_has_bits & 0x00004000u) {
      origin_fetcher_ = from.origin_fetcher_;
    }
    if (cached_has_bits & 0x00008000u) {
      disabled_stub_ = from.disabled_stub_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      reindexing_ = from.reindexing_;
    }
    if (cached_has_bits & 0x00020000u) {
      update_video_ = from.update_video_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void spider_document_detail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gogo.storage.spider_document_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void spider_document_detail::CopyFrom(const spider_document_detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gogo.storage.spider_document_detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool spider_document_detail::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x000000c1) != 0x000000c1) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attributes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->extra_info())) return false;
  if (has_cuttedblob()) {
    if (!this->cuttedblob_->IsInitialized()) return false;
  }
  return true;
}

void spider_document_detail::Swap(spider_document_detail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void spider_document_detail::InternalSwap(spider_document_detail* other) {
  using std::swap;
  attributes_.InternalSwap(&other->attributes_);
  extra_info_.InternalSwap(&other->extra_info_);
  redirects_.InternalSwap(&other->redirects_);
  url_.Swap(&other->url_);
  content_.Swap(&other->content_);
  meta_description_.Swap(&other->meta_description_);
  plainindex_.Swap(&other->plainindex_);
  titles_vector_.Swap(&other->titles_vector_);
  swap(cuttedblob_, other->cuttedblob_);
  swap(download_time_, other->download_time_);
  swap(flag_, other->flag_);
  swap(type_, other->type_);
  swap(language_, other->language_);
  swap(encoding_, other->encoding_);
  swap(publication_time_, other->publication_time_);
  swap(porno_level_, other->porno_level_);
  swap(spam_level_, other->spam_level_);
  swap(origin_fetcher_, other->origin_fetcher_);
  swap(disabled_stub_, other->disabled_stub_);
  swap(reindexing_, other->reindexing_);
  swap(update_video_, other->update_video_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata spider_document_detail::GetMetadata() const {
  protobuf_content_5fstorage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fstorage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// spider_document_detail

// required string url = 1;
bool spider_document_detail::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void spider_document_detail::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void spider_document_detail::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void spider_document_detail::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& spider_document_detail::url() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.url)
  return url_.GetNoArena();
}
void spider_document_detail::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.url)
}
#if LANG_CXX11
void spider_document_detail::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.spider_document_detail.url)
}
#endif
void spider_document_detail::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.url)
}
void spider_document_detail::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.url)
}
::std::string* spider_document_detail::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* spider_document_detail::release_url() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void spider_document_detail::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.url)
}

// required uint64 download_time = 2;
bool spider_document_detail::has_download_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void spider_document_detail::set_has_download_time() {
  _has_bits_[0] |= 0x00000040u;
}
void spider_document_detail::clear_has_download_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void spider_document_detail::clear_download_time() {
  download_time_ = GOOGLE_ULONGLONG(0);
  clear_has_download_time();
}
::google::protobuf::uint64 spider_document_detail::download_time() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.download_time)
  return download_time_;
}
void spider_document_detail::set_download_time(::google::protobuf::uint64 value) {
  set_has_download_time();
  download_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.download_time)
}

// optional bytes content = 3;
bool spider_document_detail::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void spider_document_detail::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void spider_document_detail::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void spider_document_detail::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& spider_document_detail::content() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.content)
  return content_.GetNoArena();
}
void spider_document_detail::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.content)
}
#if LANG_CXX11
void spider_document_detail::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.spider_document_detail.content)
}
#endif
void spider_document_detail::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.content)
}
void spider_document_detail::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.content)
}
::std::string* spider_document_detail::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* spider_document_detail::release_content() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void spider_document_detail::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.content)
}

// required .gogo.storage.spider_document_detail.flag_t flag = 4;
bool spider_document_detail::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void spider_document_detail::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
void spider_document_detail::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
void spider_document_detail::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
::gogo::storage::spider_document_detail_flag_t spider_document_detail::flag() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.flag)
  return static_cast< ::gogo::storage::spider_document_detail_flag_t >(flag_);
}
void spider_document_detail::set_flag(::gogo::storage::spider_document_detail_flag_t value) {
  assert(::gogo::storage::spider_document_detail_flag_t_IsValid(value));
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.flag)
}

// optional .gogo.storage.spider_document_detail.type_t type = 5;
bool spider_document_detail::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void spider_document_detail::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
void spider_document_detail::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void spider_document_detail::clear_type() {
  type_ = 0;
  clear_has_type();
}
::gogo::storage::spider_document_detail_type_t spider_document_detail::type() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.type)
  return static_cast< ::gogo::storage::spider_document_detail_type_t >(type_);
}
void spider_document_detail::set_type(::gogo::storage::spider_document_detail_type_t value) {
  assert(::gogo::storage::spider_document_detail_type_t_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.type)
}

// optional .gogo.storage.spider_document_detail.language_t language = 6;
bool spider_document_detail::has_language() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void spider_document_detail::set_has_language() {
  _has_bits_[0] |= 0x00000200u;
}
void spider_document_detail::clear_has_language() {
  _has_bits_[0] &= ~0x00000200u;
}
void spider_document_detail::clear_language() {
  language_ = 0;
  clear_has_language();
}
::gogo::storage::spider_document_detail_language_t spider_document_detail::language() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.language)
  return static_cast< ::gogo::storage::spider_document_detail_language_t >(language_);
}
void spider_document_detail::set_language(::gogo::storage::spider_document_detail_language_t value) {
  assert(::gogo::storage::spider_document_detail_language_t_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.language)
}

// repeated .gogo.storage.document_attributes attributes = 7;
int spider_document_detail::attributes_size() const {
  return attributes_.size();
}
void spider_document_detail::clear_attributes() {
  attributes_.Clear();
}
const ::gogo::storage::document_attributes& spider_document_detail::attributes(int index) const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.attributes)
  return attributes_.Get(index);
}
::gogo::storage::document_attributes* spider_document_detail::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.attributes)
  return attributes_.Mutable(index);
}
::gogo::storage::document_attributes* spider_document_detail::add_attributes() {
  // @@protoc_insertion_point(field_add:gogo.storage.spider_document_detail.attributes)
  return attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::storage::document_attributes >*
spider_document_detail::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:gogo.storage.spider_document_detail.attributes)
  return &attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::storage::document_attributes >&
spider_document_detail::attributes() const {
  // @@protoc_insertion_point(field_list:gogo.storage.spider_document_detail.attributes)
  return attributes_;
}

// optional .gogo.storage.spider_document_detail.encoding_t encoding = 8;
bool spider_document_detail::has_encoding() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void spider_document_detail::set_has_encoding() {
  _has_bits_[0] |= 0x00000400u;
}
void spider_document_detail::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000400u;
}
void spider_document_detail::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
::gogo::storage::spider_document_detail_encoding_t spider_document_detail::encoding() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.encoding)
  return static_cast< ::gogo::storage::spider_document_detail_encoding_t >(encoding_);
}
void spider_document_detail::set_encoding(::gogo::storage::spider_document_detail_encoding_t value) {
  assert(::gogo::storage::spider_document_detail_encoding_t_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.encoding)
}

// optional uint64 publication_time = 9;
bool spider_document_detail::has_publication_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void spider_document_detail::set_has_publication_time() {
  _has_bits_[0] |= 0x00000800u;
}
void spider_document_detail::clear_has_publication_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void spider_document_detail::clear_publication_time() {
  publication_time_ = GOOGLE_ULONGLONG(0);
  clear_has_publication_time();
}
::google::protobuf::uint64 spider_document_detail::publication_time() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.publication_time)
  return publication_time_;
}
void spider_document_detail::set_publication_time(::google::protobuf::uint64 value) {
  set_has_publication_time();
  publication_time_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.publication_time)
}

// repeated .gogo.storage.extra_info extra_info = 10;
int spider_document_detail::extra_info_size() const {
  return extra_info_.size();
}
void spider_document_detail::clear_extra_info() {
  extra_info_.Clear();
}
const ::gogo::storage::extra_info& spider_document_detail::extra_info(int index) const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.extra_info)
  return extra_info_.Get(index);
}
::gogo::storage::extra_info* spider_document_detail::mutable_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.extra_info)
  return extra_info_.Mutable(index);
}
::gogo::storage::extra_info* spider_document_detail::add_extra_info() {
  // @@protoc_insertion_point(field_add:gogo.storage.spider_document_detail.extra_info)
  return extra_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >*
spider_document_detail::mutable_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:gogo.storage.spider_document_detail.extra_info)
  return &extra_info_;
}
const ::google::protobuf::RepeatedPtrField< ::gogo::storage::extra_info >&
spider_document_detail::extra_info() const {
  // @@protoc_insertion_point(field_list:gogo.storage.spider_document_detail.extra_info)
  return extra_info_;
}

// optional bool origin_fetcher = 11 [default = false];
bool spider_document_detail::has_origin_fetcher() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void spider_document_detail::set_has_origin_fetcher() {
  _has_bits_[0] |= 0x00004000u;
}
void spider_document_detail::clear_has_origin_fetcher() {
  _has_bits_[0] &= ~0x00004000u;
}
void spider_document_detail::clear_origin_fetcher() {
  origin_fetcher_ = false;
  clear_has_origin_fetcher();
}
bool spider_document_detail::origin_fetcher() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.origin_fetcher)
  return origin_fetcher_;
}
void spider_document_detail::set_origin_fetcher(bool value) {
  set_has_origin_fetcher();
  origin_fetcher_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.origin_fetcher)
}

// optional uint32 porno_level = 12;
bool spider_document_detail::has_porno_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void spider_document_detail::set_has_porno_level() {
  _has_bits_[0] |= 0x00001000u;
}
void spider_document_detail::clear_has_porno_level() {
  _has_bits_[0] &= ~0x00001000u;
}
void spider_document_detail::clear_porno_level() {
  porno_level_ = 0u;
  clear_has_porno_level();
}
::google::protobuf::uint32 spider_document_detail::porno_level() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.porno_level)
  return porno_level_;
}
void spider_document_detail::set_porno_level(::google::protobuf::uint32 value) {
  set_has_porno_level();
  porno_level_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.porno_level)
}

// optional uint32 spam_level = 13;
bool spider_document_detail::has_spam_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void spider_document_detail::set_has_spam_level() {
  _has_bits_[0] |= 0x00002000u;
}
void spider_document_detail::clear_has_spam_level() {
  _has_bits_[0] &= ~0x00002000u;
}
void spider_document_detail::clear_spam_level() {
  spam_level_ = 0u;
  clear_has_spam_level();
}
::google::protobuf::uint32 spider_document_detail::spam_level() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.spam_level)
  return spam_level_;
}
void spider_document_detail::set_spam_level(::google::protobuf::uint32 value) {
  set_has_spam_level();
  spam_level_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.spam_level)
}

// optional .gogo.storage.RegionBlob cuttedBlob = 14;
bool spider_document_detail::has_cuttedblob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void spider_document_detail::set_has_cuttedblob() {
  _has_bits_[0] |= 0x00000020u;
}
void spider_document_detail::clear_has_cuttedblob() {
  _has_bits_[0] &= ~0x00000020u;
}
void spider_document_detail::clear_cuttedblob() {
  if (cuttedblob_ != NULL) cuttedblob_->::gogo::storage::RegionBlob::Clear();
  clear_has_cuttedblob();
}
const ::gogo::storage::RegionBlob& spider_document_detail::cuttedblob() const {
  const ::gogo::storage::RegionBlob* p = cuttedblob_;
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.cuttedBlob)
  return p != NULL ? *p : *reinterpret_cast<const ::gogo::storage::RegionBlob*>(
      &::gogo::storage::_RegionBlob_default_instance_);
}
::gogo::storage::RegionBlob* spider_document_detail::mutable_cuttedblob() {
  set_has_cuttedblob();
  if (cuttedblob_ == NULL) {
    cuttedblob_ = new ::gogo::storage::RegionBlob;
  }
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.cuttedBlob)
  return cuttedblob_;
}
::gogo::storage::RegionBlob* spider_document_detail::release_cuttedblob() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.cuttedBlob)
  clear_has_cuttedblob();
  ::gogo::storage::RegionBlob* temp = cuttedblob_;
  cuttedblob_ = NULL;
  return temp;
}
void spider_document_detail::set_allocated_cuttedblob(::gogo::storage::RegionBlob* cuttedblob) {
  delete cuttedblob_;
  cuttedblob_ = cuttedblob;
  if (cuttedblob) {
    set_has_cuttedblob();
  } else {
    clear_has_cuttedblob();
  }
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.cuttedBlob)
}

// optional bytes meta_description = 15;
bool spider_document_detail::has_meta_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void spider_document_detail::set_has_meta_description() {
  _has_bits_[0] |= 0x00000004u;
}
void spider_document_detail::clear_has_meta_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void spider_document_detail::clear_meta_description() {
  meta_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meta_description();
}
const ::std::string& spider_document_detail::meta_description() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.meta_description)
  return meta_description_.GetNoArena();
}
void spider_document_detail::set_meta_description(const ::std::string& value) {
  set_has_meta_description();
  meta_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.meta_description)
}
#if LANG_CXX11
void spider_document_detail::set_meta_description(::std::string&& value) {
  set_has_meta_description();
  meta_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.spider_document_detail.meta_description)
}
#endif
void spider_document_detail::set_meta_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_meta_description();
  meta_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.meta_description)
}
void spider_document_detail::set_meta_description(const void* value, size_t size) {
  set_has_meta_description();
  meta_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.meta_description)
}
::std::string* spider_document_detail::mutable_meta_description() {
  set_has_meta_description();
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.meta_description)
  return meta_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* spider_document_detail::release_meta_description() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.meta_description)
  clear_has_meta_description();
  return meta_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void spider_document_detail::set_allocated_meta_description(::std::string* meta_description) {
  if (meta_description != NULL) {
    set_has_meta_description();
  } else {
    clear_has_meta_description();
  }
  meta_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meta_description);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.meta_description)
}

// optional bool disabled_stub = 16 [default = false];
bool spider_document_detail::has_disabled_stub() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void spider_document_detail::set_has_disabled_stub() {
  _has_bits_[0] |= 0x00008000u;
}
void spider_document_detail::clear_has_disabled_stub() {
  _has_bits_[0] &= ~0x00008000u;
}
void spider_document_detail::clear_disabled_stub() {
  disabled_stub_ = false;
  clear_has_disabled_stub();
}
bool spider_document_detail::disabled_stub() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.disabled_stub)
  return disabled_stub_;
}
void spider_document_detail::set_disabled_stub(bool value) {
  set_has_disabled_stub();
  disabled_stub_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.disabled_stub)
}

// repeated string redirects = 17;
int spider_document_detail::redirects_size() const {
  return redirects_.size();
}
void spider_document_detail::clear_redirects() {
  redirects_.Clear();
}
const ::std::string& spider_document_detail::redirects(int index) const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.redirects)
  return redirects_.Get(index);
}
::std::string* spider_document_detail::mutable_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.redirects)
  return redirects_.Mutable(index);
}
void spider_document_detail::set_redirects(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.redirects)
  redirects_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void spider_document_detail::set_redirects(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.redirects)
  redirects_.Mutable(index)->assign(std::move(value));
}
#endif
void spider_document_detail::set_redirects(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.redirects)
}
void spider_document_detail::set_redirects(int index, const char* value, size_t size) {
  redirects_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.redirects)
}
::std::string* spider_document_detail::add_redirects() {
  // @@protoc_insertion_point(field_add_mutable:gogo.storage.spider_document_detail.redirects)
  return redirects_.Add();
}
void spider_document_detail::add_redirects(const ::std::string& value) {
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gogo.storage.spider_document_detail.redirects)
}
#if LANG_CXX11
void spider_document_detail::add_redirects(::std::string&& value) {
  redirects_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gogo.storage.spider_document_detail.redirects)
}
#endif
void spider_document_detail::add_redirects(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  redirects_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gogo.storage.spider_document_detail.redirects)
}
void spider_document_detail::add_redirects(const char* value, size_t size) {
  redirects_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gogo.storage.spider_document_detail.redirects)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
spider_document_detail::redirects() const {
  // @@protoc_insertion_point(field_list:gogo.storage.spider_document_detail.redirects)
  return redirects_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
spider_document_detail::mutable_redirects() {
  // @@protoc_insertion_point(field_mutable_list:gogo.storage.spider_document_detail.redirects)
  return &redirects_;
}

// optional bool reindexing = 18 [default = false];
bool spider_document_detail::has_reindexing() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void spider_document_detail::set_has_reindexing() {
  _has_bits_[0] |= 0x00010000u;
}
void spider_document_detail::clear_has_reindexing() {
  _has_bits_[0] &= ~0x00010000u;
}
void spider_document_detail::clear_reindexing() {
  reindexing_ = false;
  clear_has_reindexing();
}
bool spider_document_detail::reindexing() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.reindexing)
  return reindexing_;
}
void spider_document_detail::set_reindexing(bool value) {
  set_has_reindexing();
  reindexing_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.reindexing)
}

// optional bytes plainIndex = 19;
bool spider_document_detail::has_plainindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void spider_document_detail::set_has_plainindex() {
  _has_bits_[0] |= 0x00000008u;
}
void spider_document_detail::clear_has_plainindex() {
  _has_bits_[0] &= ~0x00000008u;
}
void spider_document_detail::clear_plainindex() {
  plainindex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plainindex();
}
const ::std::string& spider_document_detail::plainindex() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.plainIndex)
  return plainindex_.GetNoArena();
}
void spider_document_detail::set_plainindex(const ::std::string& value) {
  set_has_plainindex();
  plainindex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.plainIndex)
}
#if LANG_CXX11
void spider_document_detail::set_plainindex(::std::string&& value) {
  set_has_plainindex();
  plainindex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.spider_document_detail.plainIndex)
}
#endif
void spider_document_detail::set_plainindex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_plainindex();
  plainindex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.plainIndex)
}
void spider_document_detail::set_plainindex(const void* value, size_t size) {
  set_has_plainindex();
  plainindex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.plainIndex)
}
::std::string* spider_document_detail::mutable_plainindex() {
  set_has_plainindex();
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.plainIndex)
  return plainindex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* spider_document_detail::release_plainindex() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.plainIndex)
  clear_has_plainindex();
  return plainindex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void spider_document_detail::set_allocated_plainindex(::std::string* plainindex) {
  if (plainindex != NULL) {
    set_has_plainindex();
  } else {
    clear_has_plainindex();
  }
  plainindex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plainindex);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.plainIndex)
}

// optional bytes titles_vector = 20;
bool spider_document_detail::has_titles_vector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void spider_document_detail::set_has_titles_vector() {
  _has_bits_[0] |= 0x00000010u;
}
void spider_document_detail::clear_has_titles_vector() {
  _has_bits_[0] &= ~0x00000010u;
}
void spider_document_detail::clear_titles_vector() {
  titles_vector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_titles_vector();
}
const ::std::string& spider_document_detail::titles_vector() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.titles_vector)
  return titles_vector_.GetNoArena();
}
void spider_document_detail::set_titles_vector(const ::std::string& value) {
  set_has_titles_vector();
  titles_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.titles_vector)
}
#if LANG_CXX11
void spider_document_detail::set_titles_vector(::std::string&& value) {
  set_has_titles_vector();
  titles_vector_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gogo.storage.spider_document_detail.titles_vector)
}
#endif
void spider_document_detail::set_titles_vector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_titles_vector();
  titles_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gogo.storage.spider_document_detail.titles_vector)
}
void spider_document_detail::set_titles_vector(const void* value, size_t size) {
  set_has_titles_vector();
  titles_vector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gogo.storage.spider_document_detail.titles_vector)
}
::std::string* spider_document_detail::mutable_titles_vector() {
  set_has_titles_vector();
  // @@protoc_insertion_point(field_mutable:gogo.storage.spider_document_detail.titles_vector)
  return titles_vector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* spider_document_detail::release_titles_vector() {
  // @@protoc_insertion_point(field_release:gogo.storage.spider_document_detail.titles_vector)
  clear_has_titles_vector();
  return titles_vector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void spider_document_detail::set_allocated_titles_vector(::std::string* titles_vector) {
  if (titles_vector != NULL) {
    set_has_titles_vector();
  } else {
    clear_has_titles_vector();
  }
  titles_vector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), titles_vector);
  // @@protoc_insertion_point(field_set_allocated:gogo.storage.spider_document_detail.titles_vector)
}

// optional bool update_video = 21;
bool spider_document_detail::has_update_video() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void spider_document_detail::set_has_update_video() {
  _has_bits_[0] |= 0x00020000u;
}
void spider_document_detail::clear_has_update_video() {
  _has_bits_[0] &= ~0x00020000u;
}
void spider_document_detail::clear_update_video() {
  update_video_ = false;
  clear_has_update_video();
}
bool spider_document_detail::update_video() const {
  // @@protoc_insertion_point(field_get:gogo.storage.spider_document_detail.update_video)
  return update_video_;
}
void spider_document_detail::set_update_video(bool value) {
  set_has_update_video();
  update_video_ = value;
  // @@protoc_insertion_point(field_set:gogo.storage.spider_document_detail.update_video)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int spider_document_detail::kFetchUrlFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::gogo::storage::spider_document_detail,
    ::google::protobuf::internal::MessageTypeTraits< ::ru::mail::go::webbase::blobs::FetchUrl >, 11, false >
  spider_document_detail::fetchUrl(kFetchUrlFieldNumber, *::ru::mail::go::webbase::blobs::FetchUrl::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int spider_document_detail::kFetchStatusFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::gogo::storage::spider_document_detail,
    ::google::protobuf::internal::EnumTypeTraits< ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes, ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes_IsValid>, 14, false >
  spider_document_detail::fetchStatus(kFetchStatusFieldNumber, static_cast< ::ru::mail::go::webbase::blobs::CrawlDetails_stateTypes >(0));

// @@protoc_insertion_point(namespace_scope)

}  // namespace storage
}  // namespace gogo

// @@protoc_insertion_point(global_scope)
