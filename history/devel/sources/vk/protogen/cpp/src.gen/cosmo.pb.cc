// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cosmo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cosmo {
namespace pb {
class UserData_OriginalInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_OriginalInfo>
     _instance;
} _UserData_OriginalInfo_default_instance_;
class UserData_OkInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_OkInfo>
     _instance;
} _UserData_OkInfo_default_instance_;
class UserData_SocDemFeaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SocDemFea>
     _instance;
} _UserData_SocDemFea_default_instance_;
class UserData_DetiRecosDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_DetiRecos>
     _instance;
} _UserData_DetiRecos_default_instance_;
class UserData_AlsFeaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_AlsFea>
     _instance;
} _UserData_AlsFea_default_instance_;
class UserData_AlsItemsBiasesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_AlsItemsBiases>
     _instance;
} _UserData_AlsItemsBiases_default_instance_;
class UserData_NewsSourcesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_NewsSources>
     _instance;
} _UserData_NewsSources_default_instance_;
class UserData_Stats_SourceStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_Stats_SourceStats>
     _instance;
} _UserData_Stats_SourceStats_default_instance_;
class UserData_StatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_Stats>
     _instance;
} _UserData_Stats_default_instance_;
class UserData_SourcesWebStats_SourceVisitDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SourcesWebStats_SourceVisit>
     _instance;
} _UserData_SourcesWebStats_SourceVisit_default_instance_;
class UserData_SourcesWebStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SourcesWebStats>
     _instance;
} _UserData_SourcesWebStats_default_instance_;
class UserData_UserLinksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserLinks>
     _instance;
} _UserData_UserLinks_default_instance_;
class UserData_UserClustersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserClusters>
     _instance;
} _UserData_UserClusters_default_instance_;
class UserData_SimilarSites_SimilarSiteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SimilarSites_SimilarSite>
     _instance;
} _UserData_SimilarSites_SimilarSite_default_instance_;
class UserData_SimilarSitesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SimilarSites>
     _instance;
} _UserData_SimilarSites_default_instance_;
class UserData_ContentThemesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_ContentThemes>
     _instance;
} _UserData_ContentThemes_default_instance_;
class UserData_StaticRecosDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_StaticRecos>
     _instance;
} _UserData_StaticRecos_default_instance_;
class UserData_VisitedDocsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_VisitedDocs>
     _instance;
} _UserData_VisitedDocs_default_instance_;
class UserData_LogsVisitedDocsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_LogsVisitedDocs>
     _instance;
} _UserData_LogsVisitedDocs_default_instance_;
class UserData_LogsVisitedSourcesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_LogsVisitedSources>
     _instance;
} _UserData_LogsVisitedSources_default_instance_;
class UserData_LogsVisitedSourceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_LogsVisitedSource>
     _instance;
} _UserData_LogsVisitedSource_default_instance_;
class UserData_SitesForUserDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SitesForUser>
     _instance;
} _UserData_SitesForUser_default_instance_;
class UserData_VkGroupsForUserDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_VkGroupsForUser>
     _instance;
} _UserData_VkGroupsForUser_default_instance_;
class UserData_UserKeywordsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserKeywords>
     _instance;
} _UserData_UserKeywords_default_instance_;
class UserData_UserEvents_SiteDislikeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserEvents_SiteDislike>
     _instance;
} _UserData_UserEvents_SiteDislike_default_instance_;
class UserData_UserEvents_SourceDislikeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserEvents_SourceDislike>
     _instance;
} _UserData_UserEvents_SourceDislike_default_instance_;
class UserData_UserEvents_DocumentDislikeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserEvents_DocumentDislike>
     _instance;
} _UserData_UserEvents_DocumentDislike_default_instance_;
class UserData_UserEventsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserEvents>
     _instance;
} _UserData_UserEvents_default_instance_;
class UserData_UserThemesEvents_UserThemeEventInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserThemesEvents_UserThemeEventInfo>
     _instance;
} _UserData_UserThemesEvents_UserThemeEventInfo_default_instance_;
class UserData_UserThemesEvents_UserThemeEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserThemesEvents_UserThemeEvent>
     _instance;
} _UserData_UserThemesEvents_UserThemeEvent_default_instance_;
class UserData_UserThemesEventsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserThemesEvents>
     _instance;
} _UserData_UserThemesEvents_default_instance_;
class UserData_UserI2IEvents_UserI2IEventInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserI2IEvents_UserI2IEventInfo>
     _instance;
} _UserData_UserI2IEvents_UserI2IEventInfo_default_instance_;
class UserData_UserI2IEvents_UserI2IEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserI2IEvents_UserI2IEvent>
     _instance;
} _UserData_UserI2IEvents_UserI2IEvent_default_instance_;
class UserData_UserI2IEventsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserI2IEvents>
     _instance;
} _UserData_UserI2IEvents_default_instance_;
class UserData_UserSourcesEvents_UserSourceEventInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserSourcesEvents_UserSourceEventInfo>
     _instance;
} _UserData_UserSourcesEvents_UserSourceEventInfo_default_instance_;
class UserData_UserSourcesEvents_UserSourceEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserSourcesEvents_UserSourceEvent>
     _instance;
} _UserData_UserSourcesEvents_UserSourceEvent_default_instance_;
class UserData_UserSourcesEventsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserSourcesEvents>
     _instance;
} _UserData_UserSourcesEvents_default_instance_;
class UserData_UserVideosDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideos>
     _instance;
} _UserData_UserVideos_default_instance_;
class UserData_UserMusic_TrackInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserMusic_TrackInfo>
     _instance;
} _UserData_UserMusic_TrackInfo_default_instance_;
class UserData_UserMusicDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserMusic>
     _instance;
} _UserData_UserMusic_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_DailyCountersDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_DailyCounters>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_DailyCounters_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_LocationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Location>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_EmotionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Emotion>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Emotion_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_FavoriteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Favorite>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Favorite_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_RateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Rate>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Rate_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_CommentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Comment>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Comment_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_BlockDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Block>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Block_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_ShareDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Share>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Share_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_WatchDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Watch>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_VideoNextDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_VideoNext>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_VideoNext_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_VideoStartDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_VideoStart>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_VideoStart_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_VideoInViewportDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_VideoInViewport>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_VideoInViewport_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_PlayStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_PlayStatus>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_PlayStatus_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_LikeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Like>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Like_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_DislikeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Dislike>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Dislike_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_NormDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Norm>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Norm_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Rate3DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Rate3>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Rate3_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Rate10DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_Rate10>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_Rate10_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_VideoClickDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent_VideoClick>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_;
class UserData_UserVideoEvents_UserVideoEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents_UserVideoEvent>
     _instance;
} _UserData_UserVideoEvents_UserVideoEvent_default_instance_;
class UserData_UserVideoEventsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_UserVideoEvents>
     _instance;
} _UserData_UserVideoEvents_default_instance_;
class UserData_SubscriptionInfo_SubscriptionItemDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SubscriptionInfo_SubscriptionItem>
     _instance;
} _UserData_SubscriptionInfo_SubscriptionItem_default_instance_;
class UserData_SubscriptionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData_SubscriptionInfo>
     _instance;
} _UserData_SubscriptionInfo_default_instance_;
class UserDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserData>
     _instance;
} _UserData_default_instance_;
class GroupedUserDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GroupedUserData>
     _instance;
} _GroupedUserData_default_instance_;
class SourceData_OriginalInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_OriginalInfo>
     _instance;
} _SourceData_OriginalInfo_default_instance_;
class SourceData_OkInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_OkInfo>
     _instance;
} _SourceData_OkInfo_default_instance_;
class SourceData_NewsDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_NewsData>
     _instance;
} _SourceData_NewsData_default_instance_;
class SourceData_SourceInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourceInfo>
     _instance;
} _SourceData_SourceInfo_default_instance_;
class SourceData_LentaAdminSourceInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_LentaAdminSourceInfo>
     _instance;
} _SourceData_LentaAdminSourceInfo_default_instance_;
class SourceData_GroupStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_GroupStat>
     _instance;
} _SourceData_GroupStat_default_instance_;
class SourceData_AlsFeaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_AlsFea>
     _instance;
} _SourceData_AlsFea_default_instance_;
class SourceData_LdaFeaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_LdaFea>
     _instance;
} _SourceData_LdaFea_default_instance_;
class SourceData_GroupPeriodStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_GroupPeriodStats>
     _instance;
} _SourceData_GroupPeriodStats_default_instance_;
class SourceData_SourcePopularityStat_PopularityStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourcePopularityStat_PopularityStat>
     _instance;
} _SourceData_SourcePopularityStat_PopularityStat_default_instance_;
class SourceData_SourcePopularityStat_GeoPopularityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourcePopularityStat_GeoPopularity>
     _instance;
} _SourceData_SourcePopularityStat_GeoPopularity_default_instance_;
class SourceData_SourcePopularityStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourcePopularityStat>
     _instance;
} _SourceData_SourcePopularityStat_default_instance_;
class SourceData_SourceEventStat_EventStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourceEventStat_EventStat>
     _instance;
} _SourceData_SourceEventStat_EventStat_default_instance_;
class SourceData_SourceEventStat_GeoEventStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourceEventStat_GeoEventStat>
     _instance;
} _SourceData_SourceEventStat_GeoEventStat_default_instance_;
class SourceData_SourceEventStat_SocDemEventStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourceEventStat_SocDemEventStat>
     _instance;
} _SourceData_SourceEventStat_SocDemEventStat_default_instance_;
class SourceData_SourceEventStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourceEventStat>
     _instance;
} _SourceData_SourceEventStat_default_instance_;
class SourceData_GroupEventStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_GroupEventStat>
     _instance;
} _SourceData_GroupEventStat_default_instance_;
class SourceData_SourceLocationStat_StatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourceLocationStat_Stat>
     _instance;
} _SourceData_SourceLocationStat_Stat_default_instance_;
class SourceData_SourceLocationStat_LocationStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourceLocationStat_LocationStat>
     _instance;
} _SourceData_SourceLocationStat_LocationStat_default_instance_;
class SourceData_SourceLocationStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourceLocationStat>
     _instance;
} _SourceData_SourceLocationStat_default_instance_;
class SourceData_SourceSimilarityDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourceSimilarity>
     _instance;
} _SourceData_SourceSimilarity_default_instance_;
class SourceData_SourceGeoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_SourceGeo>
     _instance;
} _SourceData_SourceGeo_default_instance_;
class SourceData_ContentThemesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData_ContentThemes>
     _instance;
} _SourceData_ContentThemes_default_instance_;
class SourceDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SourceData>
     _instance;
} _SourceData_default_instance_;
class DocumentData_OriginalInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_OriginalInfo>
     _instance;
} _DocumentData_OriginalInfo_default_instance_;
class DocumentData_OkInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_OkInfo>
     _instance;
} _DocumentData_OkInfo_default_instance_;
class DocumentData_ContentDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_ContentData>
     _instance;
} _DocumentData_ContentData_default_instance_;
class DocumentData_FreshnessDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_FreshnessData>
     _instance;
} _DocumentData_FreshnessData_default_instance_;
class DocumentData_NewsDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_NewsData>
     _instance;
} _DocumentData_NewsData_default_instance_;
class DocumentData_CensorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_Censor>
     _instance;
} _DocumentData_Censor_default_instance_;
class DocumentData_UserStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_UserStats>
     _instance;
} _DocumentData_UserStats_default_instance_;
class DocumentData_TrendsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_Trends>
     _instance;
} _DocumentData_Trends_default_instance_;
class DocumentData_GeoHitsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_GeoHits>
     _instance;
} _DocumentData_GeoHits_default_instance_;
class DocumentData_MediametricsFeaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_MediametricsFea>
     _instance;
} _DocumentData_MediametricsFea_default_instance_;
class DocumentData_FetcherDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_Fetcher>
     _instance;
} _DocumentData_Fetcher_default_instance_;
class DocumentData_FetcherFirstmeetDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_FetcherFirstmeet>
     _instance;
} _DocumentData_FetcherFirstmeet_default_instance_;
class DocumentData_FetcherPubdateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_FetcherPubdate>
     _instance;
} _DocumentData_FetcherPubdate_default_instance_;
class DocumentData_FetcherGeoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_FetcherGeo>
     _instance;
} _DocumentData_FetcherGeo_default_instance_;
class DocumentData_FetcherImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_FetcherImage>
     _instance;
} _DocumentData_FetcherImage_default_instance_;
class DocumentData_DocStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocState>
     _instance;
} _DocumentData_DocState_default_instance_;
class DocumentData_TopicPeriodStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_TopicPeriodStats>
     _instance;
} _DocumentData_TopicPeriodStats_default_instance_;
class DocumentData_AppFilterStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_AppFilterStats>
     _instance;
} _DocumentData_AppFilterStats_default_instance_;
class DocumentData_DocumentEventStat_GeoEventStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocumentEventStat_GeoEventStat>
     _instance;
} _DocumentData_DocumentEventStat_GeoEventStat_default_instance_;
class DocumentData_DocumentEventStat_SocDemEventStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocumentEventStat_SocDemEventStat>
     _instance;
} _DocumentData_DocumentEventStat_SocDemEventStat_default_instance_;
class DocumentData_DocumentEventStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocumentEventStat>
     _instance;
} _DocumentData_DocumentEventStat_default_instance_;
class DocumentData_TopicEventStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_TopicEventStat>
     _instance;
} _DocumentData_TopicEventStat_default_instance_;
class DocumentData_DocumentLocationStat_StatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocumentLocationStat_Stat>
     _instance;
} _DocumentData_DocumentLocationStat_Stat_default_instance_;
class DocumentData_DocumentLocationStat_LocationStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocumentLocationStat_LocationStat>
     _instance;
} _DocumentData_DocumentLocationStat_LocationStat_default_instance_;
class DocumentData_DocumentLocationStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocumentLocationStat>
     _instance;
} _DocumentData_DocumentLocationStat_default_instance_;
class DocumentData_DocumentMutualStat_StatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocumentMutualStat_Stat>
     _instance;
} _DocumentData_DocumentMutualStat_Stat_default_instance_;
class DocumentData_DocumentMutualStat_LocationStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocumentMutualStat_LocationStat>
     _instance;
} _DocumentData_DocumentMutualStat_LocationStat_default_instance_;
class DocumentData_DocumentMutualStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocumentMutualStat>
     _instance;
} _DocumentData_DocumentMutualStat_default_instance_;
class DocumentData_ContentVectorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_ContentVector>
     _instance;
} _DocumentData_ContentVector_default_instance_;
class DocumentData_TitleContentFeaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_TitleContentFea>
     _instance;
} _DocumentData_TitleContentFea_default_instance_;
class DocumentData_ContentPornFeaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_ContentPornFea>
     _instance;
} _DocumentData_ContentPornFea_default_instance_;
class DocumentData_ImagePornFeaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_ImagePornFea>
     _instance;
} _DocumentData_ImagePornFea_default_instance_;
class DocumentData_ContentThemesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_ContentThemes>
     _instance;
} _DocumentData_ContentThemes_default_instance_;
class DocumentData_StoryClusterIdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_StoryClusterId>
     _instance;
} _DocumentData_StoryClusterId_default_instance_;
class DocumentData_NewsTagsDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_NewsTagsData>
     _instance;
} _DocumentData_NewsTagsData_default_instance_;
class DocumentData_NewsStoryDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_NewsStoryData>
     _instance;
} _DocumentData_NewsStoryData_default_instance_;
class DocumentData_NativeTargetIsActiveDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_NativeTargetIsActive>
     _instance;
} _DocumentData_NativeTargetIsActive_default_instance_;
class DocumentData_DocumentKeywordsInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_DocumentKeywordsInfo>
     _instance;
} _DocumentData_DocumentKeywordsInfo_default_instance_;
class DocumentData_RisksFieldsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData_RisksFields>
     _instance;
} _DocumentData_RisksFields_default_instance_;
class DocumentDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentData>
     _instance;
} _DocumentData_default_instance_;
class DocumentSourceLinkDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentSourceLink>
     _instance;
} _DocumentSourceLink_default_instance_;
class StorageEvent_DataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StorageEvent_Data>
     _instance;
} _StorageEvent_Data_default_instance_;
class StorageEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StorageEvent>
     _instance;
} _StorageEvent_default_instance_;

namespace protobuf_cosmo_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[132];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OriginalInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OriginalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OriginalInfo, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OkInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_OkInfo, user_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SocDemFea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SocDemFea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SocDemFea, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SocDemFea, age_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, slim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, wrmf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, als_tuned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, als_large_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, svd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, svd_stupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, als_by_liker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_DetiRecos, als_by_homer_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsFea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsFea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsFea, als_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsItemsBiases, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsItemsBiases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_AlsItemsBiases, fea_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_NewsSources, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_NewsSources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_NewsSources, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_NewsSources, id_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, opens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats_SourceStats, shares_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats, sources_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_Stats, version_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats_SourceVisit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats_SourceVisit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats_SourceVisit, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats_SourceVisit, visits_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats, sourcevisits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SourcesWebStats, version_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, vid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, mail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserLinks, vk_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserClusters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserClusters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserClusters, user_cluster_som_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SimilarSites_SimilarSite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SimilarSites_SimilarSite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SimilarSites_SimilarSite, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SimilarSites_SimilarSite, weight_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SimilarSites, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SimilarSites, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SimilarSites, similar_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SimilarSites, version_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_ContentThemes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_ContentThemes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_ContentThemes, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_ContentThemes, model_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_ContentThemes, urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_ContentThemes, themes_vector_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_StaticRecos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_StaticRecos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_StaticRecos, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_StaticRecos, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_StaticRecos, doc_id_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_VisitedDocs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_VisitedDocs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_VisitedDocs, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_VisitedDocs, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_VisitedDocs, doc_id_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedDocs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedDocs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedDocs, doc_id_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedSources, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedSources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedSources, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedSources, sources_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedSource, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedSource, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedSource, source_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_LogsVisitedSource, source_last_ts_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SitesForUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SitesForUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SitesForUser, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SitesForUser, site_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SitesForUser, site_visits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SitesForUser, site_urls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SitesForUser, site_last_ts_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_VkGroupsForUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_VkGroupsForUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_VkGroupsForUser, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_VkGroupsForUser, group_url_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_VkGroupsForUser, rank_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserKeywords, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserKeywords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserKeywords, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserKeywords, keyword_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserKeywords, keyword_weight_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_SiteDislike, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_SiteDislike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_SiteDislike, site_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_SiteDislike, last_ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_SourceDislike, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_SourceDislike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_SourceDislike, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_SourceDislike, last_ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_DocumentDislike, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_DocumentDislike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_DocumentDislike, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents_DocumentDislike, last_ts_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents, site_dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents, source_dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserEvents, document_dislikes_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEventInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEventInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEventInfo, last_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEventInfo, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEvent, theme_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEvent, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEvent, shows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEvent, doc_dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEvent, doc_likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents_UserThemeEvent, site_dislikes_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserThemesEvents, events_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEventInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEventInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEventInfo, last_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEventInfo, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEvent, i2i_doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEvent, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEvent, shows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEvent, doc_dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEvent, doc_likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents_UserI2IEvent, site_dislikes_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserI2IEvents, events_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents_UserSourceEventInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents_UserSourceEventInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents_UserSourceEventInfo, last_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents_UserSourceEventInfo, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents_UserSourceEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents_UserSourceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents_UserSourceEvent, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents_UserSourceEvent, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents_UserSourceEvent, shows_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserSourcesEvents, events_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideos, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideos, video_id_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserMusic_TrackInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserMusic_TrackInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserMusic_TrackInfo, hash_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserMusic_TrackInfo, listens_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserMusic_TrackInfo, last_listen_ts_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserMusic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserMusic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserMusic, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserMusic, tracks_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_DailyCounters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_DailyCounters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_DailyCounters, common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_DailyCounters, morning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_DailyCounters, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_DailyCounters, evening_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_DailyCounters, night_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Location, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Location, block_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Location, screen_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Emotion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Emotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Emotion, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Emotion, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Favorite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Favorite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Favorite, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Favorite, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Comment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Comment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Comment, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Comment, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Block, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Block, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Block, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Share, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Share, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Share, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Share, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Watch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Watch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Watch, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Watch, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Watch, percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Watch, cumulative_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Watch, cumulative_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Watch, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Watch, counter_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Watch, counter_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoNext, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoNext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoNext, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoNext, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoNext, percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoNext, cumulative_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoNext, cumulative_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoNext, daily_counters_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoStart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoStart, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoStart, counter_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport, counter_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_PlayStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_PlayStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_PlayStatus, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_PlayStatus, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Like, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Like, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Like, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Like, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Dislike, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Dislike, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Dislike, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Dislike, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Norm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Norm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Norm, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Norm, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate3, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate3, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate10, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate10, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_Rate10, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoClick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoClick, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent_VideoClick, location_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, last_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, emotion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, favorite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, block_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, share_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, watch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, video_next_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, video_in_viewport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, play_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, like_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, dislike_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, rate3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, rate10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, video_click_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, watch_in_search_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, video_click_in_search_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, cold_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, watch_with_sound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents_UserVideoEvent, video_start_),
  21,
  22,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_UserVideoEvents, events_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo_SubscriptionItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo_SubscriptionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo_SubscriptionItem, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo_SubscriptionItem, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo_SubscriptionItem, last_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo_SubscriptionItem, shows_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo, onboarding_shows_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData_SubscriptionInfo, last_onboarding_show_ts_),
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, socdem_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, als_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, ok_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, deti_reco_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, als_items_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, news_sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, original_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, als_fea_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, sources_web_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, sources_reco_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_clusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, similar_sites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, content_themes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, static_recos_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, static_recos_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, sites_for_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, keywords_daily_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, keywords_monthly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, sites_for_user1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, sites_for_user2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, visited_docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, sites_for_user3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, logs_visited_docs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, sites_for_user4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_themes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_videos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_video_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_music_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, recostream_categories_subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, recostream_domains_subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, kafka_categories_subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, kafka_domains_subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, recostream_sources_subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, recostream_dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, vk_groups_for_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, logs_visited_sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, kafka_sources_subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, recostream_likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_sources_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, narrow_sites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, narrow_sites1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, reactions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, shows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, i2i_user_themes_),
  48,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupedUserData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupedUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupedUserData, data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_OriginalInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_OriginalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_OriginalInfo, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_OkInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_OkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_OkInfo, source_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_NewsData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_NewsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_NewsData, rubric_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceInfo, is_censored_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceInfo, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceInfo, tape_show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceInfo, tape_whitelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceInfo, tape_blacklist_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LentaAdminSourceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LentaAdminSourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LentaAdminSourceInfo, use_in_lenta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LentaAdminSourceInfo, use_in_main_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LentaAdminSourceInfo, regions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LentaAdminSourceInfo, use_fulltext_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupStat, sigma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupStat, mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupStat, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupStat, norm_likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupStat, norm_likes_kafka_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_AlsFea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_AlsFea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_AlsFea, als_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_AlsFea, vector_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_AlsFea, als_c_stat_),
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LdaFea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LdaFea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LdaFea, lda_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LdaFea, vector_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_LdaFea, als_c_stat_),
  ~0u,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, all_likes_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, all_likes_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_likes_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_likes_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_clicks_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_clicks_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_reshares_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_reshares_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_comments_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_comments_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, all_likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_reshares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupPeriodStats, period_comments_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat_PopularityStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat_PopularityStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat_PopularityStat, hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat_PopularityStat, hits_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat_PopularityStat, hits_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat_PopularityStat, urls_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat_GeoPopularity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat_GeoPopularity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat_GeoPopularity, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat_GeoPopularity, stat_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat, geo_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat, male_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat, female_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourcePopularityStat, version_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_EventStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_EventStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_EventStat, events_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_EventStat, events_mean_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_EventStat, events_sigma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_EventStat, documents_count_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_GeoEventStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_GeoEventStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_GeoEventStat, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_GeoEventStat, stat_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_SocDemEventStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_SocDemEventStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_SocDemEventStat, socdem_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat_SocDemEventStat, stat_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat, geo_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceEventStat, soc_dem_stat_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupEventStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupEventStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupEventStat, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupEventStat, likes_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupEventStat, clicks_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupEventStat, reshares_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_GroupEventStat, comments_stat_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_Stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_Stat, shows_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_Stat, clicks_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_Stat, likes_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_Stat, dislikes_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_Stat, reshares_stat_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_LocationStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_LocationStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_LocationStat, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_LocationStat, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat_LocationStat, last_event_ts_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat, stat_by_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceLocationStat, summary_stat_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceSimilarity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceSimilarity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceSimilarity, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceSimilarity, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceSimilarity, jaccard_similarity_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceGeo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceGeo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceGeo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceGeo, country_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_SourceGeo, region_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_ContentThemes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_ContentThemes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_ContentThemes, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_ContentThemes, themes_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData_ContentThemes, bad_content_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, lda_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, als_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, ok_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, source_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, original_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, group_period_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, news_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, source_popularity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, lda_fea_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, als_fea_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, source_fresh_popularity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, ok_group_event_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, vk_group_event_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, vk_group_event_stat_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, youtube_group_event_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, youtube_group_event_stat_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, taped_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, homer_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, web_top_similar_sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, ok_top_similar_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, hourly_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, daily_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, weekly_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, monthly_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, source_new_popularity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, vk_group_event_stat_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, vk_group_event_stat_week_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, youtube_group_event_stat_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, youtube_group_event_stat_week_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, fast_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, source_stat_geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, content_themes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceData, lenta_admin_source_info_),
  33,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_OriginalInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_OriginalInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_OriginalInfo, url_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_OkInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_OkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_OkInfo, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_OkInfo, doc_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentData, content_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentData, algo_version_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FreshnessData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FreshnessData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FreshnessData, expiration_timestamp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsData, clusterid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsData, issue_ts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsData, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsData, parent_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Censor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Censor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Censor, is_allowed_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_UserStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_UserStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_UserStats, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_UserStats, dislikes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_UserStats, views_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Trends, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Trends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Trends, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Trends, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Trends, views_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_GeoHits, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_GeoHits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_GeoHits, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_GeoHits, hits_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_MediametricsFea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_MediametricsFea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_MediametricsFea, hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_MediametricsFea, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_MediametricsFea, geo_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_MediametricsFea, male_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_MediametricsFea, female_hits_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, fetch_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, region_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, has_title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, has_img_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, has_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, last_fetch_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, title_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, description_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, has_fulltext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_Fetcher, has_video_),
  0,
  1,
  2,
  3,
  4,
  6,
  7,
  8,
  5,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherFirstmeet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherFirstmeet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherFirstmeet, firstmeet_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherPubdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherPubdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherPubdate, pubdate_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherGeo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherGeo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherGeo, region_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherImage, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherImage, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_FetcherImage, simhash_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocState, banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocState, shadowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocState, disabled_in_channel_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicPeriodStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicPeriodStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicPeriodStats, all_likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicPeriodStats, period_likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicPeriodStats, period_clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicPeriodStats, period_reshares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicPeriodStats, period_comments_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_AppFilterStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_AppFilterStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_AppFilterStats, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_AppFilterStats, shows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_AppFilterStats, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_AppFilterStats, likes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_AppFilterStats, shares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_AppFilterStats, dislikes_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat_GeoEventStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat_GeoEventStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat_GeoEventStat, geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat_GeoEventStat, events_count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat_SocDemEventStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat_SocDemEventStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat_SocDemEventStat, socdem_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat_SocDemEventStat, events_count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat, events_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat, geo_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentEventStat, soc_dem_stat_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicEventStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicEventStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicEventStat, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicEventStat, likes_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicEventStat, clicks_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicEventStat, reshares_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TopicEventStat, comments_stat_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_Stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_Stat, shows_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_Stat, clicks_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_Stat, likes_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_Stat, dislikes_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_Stat, reshares_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_Stat, unlikes_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_Stat, undislikes_stat_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_LocationStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_LocationStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_LocationStat, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_LocationStat, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat_LocationStat, last_event_ts_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat, stat_by_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentLocationStat, summary_stat_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_Stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_Stat, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_Stat, clicks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_Stat, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_Stat, visits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_Stat, total_visits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_Stat, source_id_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_LocationStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_LocationStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_LocationStat, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat_LocationStat, doc_mutual_stat_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat, doc_mutual_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentMutualStat, loc_doc_mutual_stat_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentVector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentVector, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentVector, vector_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TitleContentFea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TitleContentFea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_TitleContentFea, content_vectors_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentPornFea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentPornFea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentPornFea, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentPornFea, bad_content_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ImagePornFea, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ImagePornFea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ImagePornFea, weight_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentThemes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentThemes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentThemes, themes_vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_ContentThemes, bad_content_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_StoryClusterId, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_StoryClusterId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_StoryClusterId, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_StoryClusterId, cluster_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsTagsData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsTagsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsTagsData, tag_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsStoryData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsStoryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NewsStoryData, story_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NativeTargetIsActive, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NativeTargetIsActive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NativeTargetIsActive, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_NativeTargetIsActive, is_active_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentKeywordsInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentKeywordsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentKeywordsInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentKeywordsInfo, keyword_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentKeywordsInfo, keyword_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_DocumentKeywordsInfo, cluster_id_),
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_RisksFields, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_RisksFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_RisksFields, ero_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_RisksFields, porno_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData_RisksFields, safe_content_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, ok_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, news_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, censor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, user_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, trends_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, original_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, fetcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, mediametrics_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, topic_period_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, app_filter_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, week_mediametrics_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, ok_topic_event_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, vk_topic_event_stat_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, vk_topic_event_stat_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, youtube_topic_event_stat_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, youtube_topic_event_stat_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, taped_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, homer_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, hourly_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, daily_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, weekly_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, monthly_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, fetcher_geo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, hourly_fast_mediametrics_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, daily_fast_mediametrics_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, fetcher_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, content_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, vk_topic_event_stat_day_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, vk_topic_event_stat_week_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, youtube_topic_event_stat_day_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, youtube_topic_event_stat_week_v2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, document_i2i_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, document_mv_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, news_tags_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, news_story_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, native_target_is_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, fast_location_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, content_porn_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, content_themes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, story_cluster_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, document_keywords_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, image_porn_fea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, fetcherfirstmeet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, pubdate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, freshness_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, risks_fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentData, doc_region_ids_),
  47,
  48,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSourceLink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSourceLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSourceLink, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentSourceLink, doc_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent_Data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent_Data, user_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent_Data, source_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent_Data, document_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent_Data, document_source_link_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent, event_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageEvent, data_),
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(UserData_OriginalInfo)},
  { 7, 13, sizeof(UserData_OkInfo)},
  { 14, 21, sizeof(UserData_SocDemFea)},
  { 23, 36, sizeof(UserData_DetiRecos)},
  { 44, 50, sizeof(UserData_AlsFea)},
  { 51, 57, sizeof(UserData_AlsItemsBiases)},
  { 58, 65, sizeof(UserData_NewsSources)},
  { 67, 79, sizeof(UserData_Stats_SourceStats)},
  { 86, 93, sizeof(UserData_Stats)},
  { 95, 102, sizeof(UserData_SourcesWebStats_SourceVisit)},
  { 104, 111, sizeof(UserData_SourcesWebStats)},
  { 113, 122, sizeof(UserData_UserLinks)},
  { 126, 132, sizeof(UserData_UserClusters)},
  { 133, 140, sizeof(UserData_SimilarSites_SimilarSite)},
  { 142, 149, sizeof(UserData_SimilarSites)},
  { 151, 160, sizeof(UserData_ContentThemes)},
  { 164, 172, sizeof(UserData_StaticRecos)},
  { 175, 183, sizeof(UserData_VisitedDocs)},
  { 186, 192, sizeof(UserData_LogsVisitedDocs)},
  { 193, 200, sizeof(UserData_LogsVisitedSources)},
  { 202, 210, sizeof(UserData_LogsVisitedSource)},
  { 213, 223, sizeof(UserData_SitesForUser)},
  { 228, 236, sizeof(UserData_VkGroupsForUser)},
  { 239, 247, sizeof(UserData_UserKeywords)},
  { 250, 257, sizeof(UserData_UserEvents_SiteDislike)},
  { 259, 266, sizeof(UserData_UserEvents_SourceDislike)},
  { 268, 275, sizeof(UserData_UserEvents_DocumentDislike)},
  { 277, 285, sizeof(UserData_UserEvents)},
  { 288, 295, sizeof(UserData_UserThemesEvents_UserThemeEventInfo)},
  { 297, 308, sizeof(UserData_UserThemesEvents_UserThemeEvent)},
  { 314, 320, sizeof(UserData_UserThemesEvents)},
  { 321, 328, sizeof(UserData_UserI2IEvents_UserI2IEventInfo)},
  { 330, 341, sizeof(UserData_UserI2IEvents_UserI2IEvent)},
  { 347, 353, sizeof(UserData_UserI2IEvents)},
  { 354, 361, sizeof(UserData_UserSourcesEvents_UserSourceEventInfo)},
  { 363, 371, sizeof(UserData_UserSourcesEvents_UserSourceEvent)},
  { 374, 380, sizeof(UserData_UserSourcesEvents)},
  { 381, 388, sizeof(UserData_UserVideos)},
  { 390, 398, sizeof(UserData_UserMusic_TrackInfo)},
  { 401, 408, sizeof(UserData_UserMusic)},
  { 410, 420, sizeof(UserData_UserVideoEvents_UserVideoEvent_DailyCounters)},
  { 425, 432, sizeof(UserData_UserVideoEvents_UserVideoEvent_Location)},
  { 434, 441, sizeof(UserData_UserVideoEvents_UserVideoEvent_Emotion)},
  { 443, 450, sizeof(UserData_UserVideoEvents_UserVideoEvent_Favorite)},
  { 452, 459, sizeof(UserData_UserVideoEvents_UserVideoEvent_Rate)},
  { 461, 468, sizeof(UserData_UserVideoEvents_UserVideoEvent_Comment)},
  { 470, 477, sizeof(UserData_UserVideoEvents_UserVideoEvent_Block)},
  { 479, 486, sizeof(UserData_UserVideoEvents_UserVideoEvent_Share)},
  { 488, 501, sizeof(UserData_UserVideoEvents_UserVideoEvent_Watch)},
  { 509, 520, sizeof(UserData_UserVideoEvents_UserVideoEvent_VideoNext)},
  { 526, 533, sizeof(UserData_UserVideoEvents_UserVideoEvent_VideoStart)},
  { 535, 543, sizeof(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport)},
  { 546, 553, sizeof(UserData_UserVideoEvents_UserVideoEvent_PlayStatus)},
  { 555, 562, sizeof(UserData_UserVideoEvents_UserVideoEvent_Like)},
  { 564, 571, sizeof(UserData_UserVideoEvents_UserVideoEvent_Dislike)},
  { 573, 580, sizeof(UserData_UserVideoEvents_UserVideoEvent_Norm)},
  { 582, 589, sizeof(UserData_UserVideoEvents_UserVideoEvent_Rate3)},
  { 591, 598, sizeof(UserData_UserVideoEvents_UserVideoEvent_Rate10)},
  { 600, 607, sizeof(UserData_UserVideoEvents_UserVideoEvent_VideoClick)},
  { 609, 637, sizeof(UserData_UserVideoEvents_UserVideoEvent)},
  { 660, 666, sizeof(UserData_UserVideoEvents)},
  { 667, 676, sizeof(UserData_SubscriptionInfo_SubscriptionItem)},
  { 680, 688, sizeof(UserData_SubscriptionInfo)},
  { 691, 745, sizeof(UserData)},
  { 794, 800, sizeof(GroupedUserData)},
  { 801, 807, sizeof(SourceData_OriginalInfo)},
  { 808, 814, sizeof(SourceData_OkInfo)},
  { 815, 821, sizeof(SourceData_NewsData)},
  { 822, 833, sizeof(SourceData_SourceInfo)},
  { 839, 848, sizeof(SourceData_LentaAdminSourceInfo)},
  { 852, 862, sizeof(SourceData_GroupStat)},
  { 867, 875, sizeof(SourceData_AlsFea)},
  { 878, 886, sizeof(SourceData_LdaFea)},
  { 889, 909, sizeof(SourceData_GroupPeriodStats)},
  { 924, 933, sizeof(SourceData_SourcePopularityStat_PopularityStat)},
  { 937, 944, sizeof(SourceData_SourcePopularityStat_GeoPopularity)},
  { 946, 956, sizeof(SourceData_SourcePopularityStat)},
  { 961, 970, sizeof(SourceData_SourceEventStat_EventStat)},
  { 974, 981, sizeof(SourceData_SourceEventStat_GeoEventStat)},
  { 983, 990, sizeof(SourceData_SourceEventStat_SocDemEventStat)},
  { 992, 1000, sizeof(SourceData_SourceEventStat)},
  { 1003, 1013, sizeof(SourceData_GroupEventStat)},
  { 1018, 1028, sizeof(SourceData_SourceLocationStat_Stat)},
  { 1033, 1041, sizeof(SourceData_SourceLocationStat_LocationStat)},
  { 1044, 1052, sizeof(SourceData_SourceLocationStat)},
  { 1055, 1063, sizeof(SourceData_SourceSimilarity)},
  { 1066, 1074, sizeof(SourceData_SourceGeo)},
  { 1077, 1085, sizeof(SourceData_ContentThemes)},
  { 1088, 1127, sizeof(SourceData)},
  { 1161, 1167, sizeof(DocumentData_OriginalInfo)},
  { 1168, 1175, sizeof(DocumentData_OkInfo)},
  { 1177, 1184, sizeof(DocumentData_ContentData)},
  { 1186, 1192, sizeof(DocumentData_FreshnessData)},
  { 1193, 1202, sizeof(DocumentData_NewsData)},
  { 1206, 1212, sizeof(DocumentData_Censor)},
  { 1213, 1221, sizeof(DocumentData_UserStats)},
  { 1224, 1232, sizeof(DocumentData_Trends)},
  { 1235, 1242, sizeof(DocumentData_GeoHits)},
  { 1244, 1254, sizeof(DocumentData_MediametricsFea)},
  { 1259, 1274, sizeof(DocumentData_Fetcher)},
  { 1284, 1290, sizeof(DocumentData_FetcherFirstmeet)},
  { 1291, 1297, sizeof(DocumentData_FetcherPubdate)},
  { 1298, 1304, sizeof(DocumentData_FetcherGeo)},
  { 1305, 1313, sizeof(DocumentData_FetcherImage)},
  { 1316, 1324, sizeof(DocumentData_DocState)},
  { 1327, 1337, sizeof(DocumentData_TopicPeriodStats)},
  { 1342, 1353, sizeof(DocumentData_AppFilterStats)},
  { 1359, 1366, sizeof(DocumentData_DocumentEventStat_GeoEventStat)},
  { 1368, 1375, sizeof(DocumentData_DocumentEventStat_SocDemEventStat)},
  { 1377, 1385, sizeof(DocumentData_DocumentEventStat)},
  { 1388, 1398, sizeof(DocumentData_TopicEventStat)},
  { 1403, 1415, sizeof(DocumentData_DocumentLocationStat_Stat)},
  { 1422, 1430, sizeof(DocumentData_DocumentLocationStat_LocationStat)},
  { 1433, 1441, sizeof(DocumentData_DocumentLocationStat)},
  { 1444, 1455, sizeof(DocumentData_DocumentMutualStat_Stat)},
  { 1461, 1468, sizeof(DocumentData_DocumentMutualStat_LocationStat)},
  { 1470, 1478, sizeof(DocumentData_DocumentMutualStat)},
  { 1481, 1488, sizeof(DocumentData_ContentVector)},
  { 1490, 1496, sizeof(DocumentData_TitleContentFea)},
  { 1497, 1504, sizeof(DocumentData_ContentPornFea)},
  { 1506, 1512, sizeof(DocumentData_ImagePornFea)},
  { 1513, 1520, sizeof(DocumentData_ContentThemes)},
  { 1522, 1529, sizeof(DocumentData_StoryClusterId)},
  { 1531, 1537, sizeof(DocumentData_NewsTagsData)},
  { 1538, 1544, sizeof(DocumentData_NewsStoryData)},
  { 1545, 1552, sizeof(DocumentData_NativeTargetIsActive)},
  { 1554, 1563, sizeof(DocumentData_DocumentKeywordsInfo)},
  { 1567, 1575, sizeof(DocumentData_RisksFields)},
  { 1578, 1633, sizeof(DocumentData)},
  { 1683, 1690, sizeof(DocumentSourceLink)},
  { 1692, 1701, sizeof(StorageEvent_Data)},
  { 1705, 1713, sizeof(StorageEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_OriginalInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_OkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SocDemFea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_DetiRecos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_AlsFea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_AlsItemsBiases_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_NewsSources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_Stats_SourceStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SourcesWebStats_SourceVisit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SourcesWebStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserLinks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserClusters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SimilarSites_SimilarSite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SimilarSites_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_ContentThemes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_StaticRecos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_VisitedDocs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_LogsVisitedDocs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_LogsVisitedSources_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_LogsVisitedSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SitesForUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_VkGroupsForUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserKeywords_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserEvents_SiteDislike_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserEvents_SourceDislike_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserEvents_DocumentDislike_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserEvents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserThemesEvents_UserThemeEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserThemesEvents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserI2IEvents_UserI2IEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserI2IEvents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserSourcesEvents_UserSourceEventInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserSourcesEvents_UserSourceEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserSourcesEvents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserMusic_TrackInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserMusic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_DailyCounters_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Emotion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Favorite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Rate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Comment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Block_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Share_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_VideoNext_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_VideoStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_VideoInViewport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_PlayStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Like_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Dislike_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Norm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Rate3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_Rate10_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_UserVideoEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_UserVideoEvents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SubscriptionInfo_SubscriptionItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_SubscriptionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GroupedUserData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_OriginalInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_OkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_NewsData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_LentaAdminSourceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_GroupStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_AlsFea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_LdaFea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_GroupPeriodStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourcePopularityStat_PopularityStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourcePopularityStat_GeoPopularity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourcePopularityStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourceEventStat_EventStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourceEventStat_GeoEventStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourceEventStat_SocDemEventStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourceEventStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_GroupEventStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourceLocationStat_Stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourceLocationStat_LocationStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourceLocationStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourceSimilarity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_SourceGeo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_ContentThemes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SourceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_OriginalInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_OkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_ContentData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_FreshnessData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_NewsData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_Censor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_UserStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_Trends_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_GeoHits_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_MediametricsFea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_Fetcher_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_FetcherFirstmeet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_FetcherPubdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_FetcherGeo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_FetcherImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_TopicPeriodStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_AppFilterStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocumentEventStat_GeoEventStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocumentEventStat_SocDemEventStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocumentEventStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_TopicEventStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocumentLocationStat_Stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocumentLocationStat_LocationStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocumentLocationStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocumentMutualStat_Stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocumentMutualStat_LocationStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocumentMutualStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_ContentVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_TitleContentFea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_ContentPornFea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_ImagePornFea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_ContentThemes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_StoryClusterId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_NewsTagsData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_NewsStoryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_NativeTargetIsActive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_DocumentKeywordsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_RisksFields_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentSourceLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageEvent_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StorageEvent_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cosmo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 132);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cosmo::pb::protobuf_cosmo_5fuser_5fevents_2eproto::InitDefaults();
  _UserData_OriginalInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_OriginalInfo_default_instance_);_UserData_OkInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_OkInfo_default_instance_);_UserData_SocDemFea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SocDemFea_default_instance_);_UserData_DetiRecos_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_DetiRecos_default_instance_);_UserData_AlsFea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_AlsFea_default_instance_);_UserData_AlsItemsBiases_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_AlsItemsBiases_default_instance_);_UserData_NewsSources_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_NewsSources_default_instance_);_UserData_Stats_SourceStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_Stats_SourceStats_default_instance_);_UserData_Stats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_Stats_default_instance_);_UserData_SourcesWebStats_SourceVisit_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SourcesWebStats_SourceVisit_default_instance_);_UserData_SourcesWebStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SourcesWebStats_default_instance_);_UserData_UserLinks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserLinks_default_instance_);_UserData_UserClusters_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserClusters_default_instance_);_UserData_SimilarSites_SimilarSite_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SimilarSites_SimilarSite_default_instance_);_UserData_SimilarSites_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SimilarSites_default_instance_);_UserData_ContentThemes_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_ContentThemes_default_instance_);_UserData_StaticRecos_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_StaticRecos_default_instance_);_UserData_VisitedDocs_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_VisitedDocs_default_instance_);_UserData_LogsVisitedDocs_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_LogsVisitedDocs_default_instance_);_UserData_LogsVisitedSources_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_LogsVisitedSources_default_instance_);_UserData_LogsVisitedSource_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_LogsVisitedSource_default_instance_);_UserData_SitesForUser_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SitesForUser_default_instance_);_UserData_VkGroupsForUser_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_VkGroupsForUser_default_instance_);_UserData_UserKeywords_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserKeywords_default_instance_);_UserData_UserEvents_SiteDislike_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserEvents_SiteDislike_default_instance_);_UserData_UserEvents_SourceDislike_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserEvents_SourceDislike_default_instance_);_UserData_UserEvents_DocumentDislike_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserEvents_DocumentDislike_default_instance_);_UserData_UserEvents_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserEvents_default_instance_);_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);_UserData_UserThemesEvents_UserThemeEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserThemesEvents_UserThemeEvent_default_instance_);_UserData_UserThemesEvents_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserThemesEvents_default_instance_);_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);_UserData_UserI2IEvents_UserI2IEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserI2IEvents_UserI2IEvent_default_instance_);_UserData_UserI2IEvents_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserI2IEvents_default_instance_);_UserData_UserSourcesEvents_UserSourceEventInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserSourcesEvents_UserSourceEventInfo_default_instance_);_UserData_UserSourcesEvents_UserSourceEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserSourcesEvents_UserSourceEvent_default_instance_);_UserData_UserSourcesEvents_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserSourcesEvents_default_instance_);_UserData_UserVideos_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideos_default_instance_);_UserData_UserMusic_TrackInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserMusic_TrackInfo_default_instance_);_UserData_UserMusic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserMusic_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_DailyCounters_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_DailyCounters_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Emotion_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Emotion_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Favorite_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Favorite_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Rate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Rate_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Comment_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Comment_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Block_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Block_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Share_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Share_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_VideoNext_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_VideoNext_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_VideoStart_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_VideoStart_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_VideoInViewport_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_VideoInViewport_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_PlayStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_PlayStatus_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Like_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Like_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Dislike_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Dislike_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Norm_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Norm_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Rate3_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Rate3_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_Rate10_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_Rate10_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_);_UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_UserVideoEvent_default_instance_);_UserData_UserVideoEvents_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_UserVideoEvents_default_instance_);_UserData_SubscriptionInfo_SubscriptionItem_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SubscriptionInfo_SubscriptionItem_default_instance_);_UserData_SubscriptionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_SubscriptionInfo_default_instance_);_UserData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserData_default_instance_);_GroupedUserData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GroupedUserData_default_instance_);_SourceData_OriginalInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_OriginalInfo_default_instance_);_SourceData_OkInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_OkInfo_default_instance_);_SourceData_NewsData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_NewsData_default_instance_);_SourceData_SourceInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourceInfo_default_instance_);_SourceData_LentaAdminSourceInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_LentaAdminSourceInfo_default_instance_);_SourceData_GroupStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_GroupStat_default_instance_);_SourceData_AlsFea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_AlsFea_default_instance_);_SourceData_LdaFea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_LdaFea_default_instance_);_SourceData_GroupPeriodStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_GroupPeriodStats_default_instance_);_SourceData_SourcePopularityStat_PopularityStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourcePopularityStat_PopularityStat_default_instance_);_SourceData_SourcePopularityStat_GeoPopularity_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourcePopularityStat_GeoPopularity_default_instance_);_SourceData_SourcePopularityStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourcePopularityStat_default_instance_);_SourceData_SourceEventStat_EventStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourceEventStat_EventStat_default_instance_);_SourceData_SourceEventStat_GeoEventStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourceEventStat_GeoEventStat_default_instance_);_SourceData_SourceEventStat_SocDemEventStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourceEventStat_SocDemEventStat_default_instance_);_SourceData_SourceEventStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourceEventStat_default_instance_);_SourceData_GroupEventStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_GroupEventStat_default_instance_);_SourceData_SourceLocationStat_Stat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourceLocationStat_Stat_default_instance_);_SourceData_SourceLocationStat_LocationStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourceLocationStat_LocationStat_default_instance_);_SourceData_SourceLocationStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourceLocationStat_default_instance_);_SourceData_SourceSimilarity_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourceSimilarity_default_instance_);_SourceData_SourceGeo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_SourceGeo_default_instance_);_SourceData_ContentThemes_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_ContentThemes_default_instance_);_SourceData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SourceData_default_instance_);_DocumentData_OriginalInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_OriginalInfo_default_instance_);_DocumentData_OkInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_OkInfo_default_instance_);_DocumentData_ContentData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_ContentData_default_instance_);_DocumentData_FreshnessData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_FreshnessData_default_instance_);_DocumentData_NewsData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_NewsData_default_instance_);_DocumentData_Censor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_Censor_default_instance_);_DocumentData_UserStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_UserStats_default_instance_);_DocumentData_Trends_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_Trends_default_instance_);_DocumentData_GeoHits_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_GeoHits_default_instance_);_DocumentData_MediametricsFea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_MediametricsFea_default_instance_);_DocumentData_Fetcher_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_Fetcher_default_instance_);_DocumentData_FetcherFirstmeet_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_FetcherFirstmeet_default_instance_);_DocumentData_FetcherPubdate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_FetcherPubdate_default_instance_);_DocumentData_FetcherGeo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_FetcherGeo_default_instance_);_DocumentData_FetcherImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_FetcherImage_default_instance_);_DocumentData_DocState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocState_default_instance_);_DocumentData_TopicPeriodStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_TopicPeriodStats_default_instance_);_DocumentData_AppFilterStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_AppFilterStats_default_instance_);_DocumentData_DocumentEventStat_GeoEventStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocumentEventStat_GeoEventStat_default_instance_);_DocumentData_DocumentEventStat_SocDemEventStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocumentEventStat_SocDemEventStat_default_instance_);_DocumentData_DocumentEventStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocumentEventStat_default_instance_);_DocumentData_TopicEventStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_TopicEventStat_default_instance_);_DocumentData_DocumentLocationStat_Stat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocumentLocationStat_Stat_default_instance_);_DocumentData_DocumentLocationStat_LocationStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocumentLocationStat_LocationStat_default_instance_);_DocumentData_DocumentLocationStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocumentLocationStat_default_instance_);_DocumentData_DocumentMutualStat_Stat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocumentMutualStat_Stat_default_instance_);_DocumentData_DocumentMutualStat_LocationStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocumentMutualStat_LocationStat_default_instance_);_DocumentData_DocumentMutualStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocumentMutualStat_default_instance_);_DocumentData_ContentVector_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_ContentVector_default_instance_);_DocumentData_TitleContentFea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_TitleContentFea_default_instance_);_DocumentData_ContentPornFea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_ContentPornFea_default_instance_);_DocumentData_ImagePornFea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_ImagePornFea_default_instance_);_DocumentData_ContentThemes_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_ContentThemes_default_instance_);_DocumentData_StoryClusterId_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_StoryClusterId_default_instance_);_DocumentData_NewsTagsData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_NewsTagsData_default_instance_);_DocumentData_NewsStoryData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_NewsStoryData_default_instance_);_DocumentData_NativeTargetIsActive_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_NativeTargetIsActive_default_instance_);_DocumentData_DocumentKeywordsInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_DocumentKeywordsInfo_default_instance_);_DocumentData_RisksFields_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_RisksFields_default_instance_);_DocumentData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentData_default_instance_);_DocumentSourceLink_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentSourceLink_default_instance_);_StorageEvent_Data_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StorageEvent_Data_default_instance_);_StorageEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StorageEvent_default_instance_);_UserData_UserThemesEvents_UserThemeEvent_default_instance_._instance.get_mutable()->clicks_ = const_cast< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::internal_default_instance());
  _UserData_UserThemesEvents_UserThemeEvent_default_instance_._instance.get_mutable()->shows_ = const_cast< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::internal_default_instance());
  _UserData_UserThemesEvents_UserThemeEvent_default_instance_._instance.get_mutable()->doc_dislikes_ = const_cast< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::internal_default_instance());
  _UserData_UserThemesEvents_UserThemeEvent_default_instance_._instance.get_mutable()->doc_likes_ = const_cast< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::internal_default_instance());
  _UserData_UserThemesEvents_UserThemeEvent_default_instance_._instance.get_mutable()->site_dislikes_ = const_cast< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::internal_default_instance());
  _UserData_UserI2IEvents_UserI2IEvent_default_instance_._instance.get_mutable()->clicks_ = const_cast< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::internal_default_instance());
  _UserData_UserI2IEvents_UserI2IEvent_default_instance_._instance.get_mutable()->shows_ = const_cast< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::internal_default_instance());
  _UserData_UserI2IEvents_UserI2IEvent_default_instance_._instance.get_mutable()->doc_dislikes_ = const_cast< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::internal_default_instance());
  _UserData_UserI2IEvents_UserI2IEvent_default_instance_._instance.get_mutable()->doc_likes_ = const_cast< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::internal_default_instance());
  _UserData_UserI2IEvents_UserI2IEvent_default_instance_._instance.get_mutable()->site_dislikes_ = const_cast< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::internal_default_instance());
  _UserData_UserSourcesEvents_UserSourceEvent_default_instance_._instance.get_mutable()->clicks_ = const_cast< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo*>(
      ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo::internal_default_instance());
  _UserData_UserSourcesEvents_UserSourceEvent_default_instance_._instance.get_mutable()->shows_ = const_cast< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo*>(
      ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_._instance.get_mutable()->location_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_VideoNext_default_instance_._instance.get_mutable()->daily_counters_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_VideoInViewport_default_instance_._instance.get_mutable()->location_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_._instance.get_mutable()->location_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->emotion_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->favorite_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->rate_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->comment_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->block_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->share_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->watch_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->video_next_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->video_in_viewport_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->play_status_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->like_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->dislike_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->norm_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->rate3_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->rate10_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->video_click_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->watch_in_search_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->video_click_in_search_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->cold_rate_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->watch_with_sound_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::internal_default_instance());
  _UserData_UserVideoEvents_UserVideoEvent_default_instance_._instance.get_mutable()->video_start_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart*>(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->socdem_fea_ = const_cast< ::cosmo::pb::UserData_SocDemFea*>(
      ::cosmo::pb::UserData_SocDemFea::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->als_fea_ = const_cast< ::cosmo::pb::UserData_AlsFea*>(
      ::cosmo::pb::UserData_AlsFea::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->ok_info_ = const_cast< ::cosmo::pb::UserData_OkInfo*>(
      ::cosmo::pb::UserData_OkInfo::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->deti_reco_ = const_cast< ::cosmo::pb::UserData_DetiRecos*>(
      ::cosmo::pb::UserData_DetiRecos::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->als_items_fea_ = const_cast< ::cosmo::pb::UserData_AlsItemsBiases*>(
      ::cosmo::pb::UserData_AlsItemsBiases::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->news_sources_ = const_cast< ::cosmo::pb::UserData_NewsSources*>(
      ::cosmo::pb::UserData_NewsSources::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->stats_ = const_cast< ::cosmo::pb::UserData_Stats*>(
      ::cosmo::pb::UserData_Stats::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->original_info_ = const_cast< ::cosmo::pb::UserData_OriginalInfo*>(
      ::cosmo::pb::UserData_OriginalInfo::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->als_fea_2_ = const_cast< ::cosmo::pb::UserData_AlsFea*>(
      ::cosmo::pb::UserData_AlsFea::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->sources_web_stats_ = const_cast< ::cosmo::pb::UserData_SourcesWebStats*>(
      ::cosmo::pb::UserData_SourcesWebStats::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->sources_reco_stats_ = const_cast< ::cosmo::pb::UserData_Stats*>(
      ::cosmo::pb::UserData_Stats::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->user_links_ = const_cast< ::cosmo::pb::UserData_UserLinks*>(
      ::cosmo::pb::UserData_UserLinks::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->user_clusters_ = const_cast< ::cosmo::pb::UserData_UserClusters*>(
      ::cosmo::pb::UserData_UserClusters::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->similar_sites_ = const_cast< ::cosmo::pb::UserData_SimilarSites*>(
      ::cosmo::pb::UserData_SimilarSites::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->content_themes_ = const_cast< ::cosmo::pb::UserData_ContentThemes*>(
      ::cosmo::pb::UserData_ContentThemes::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->static_recos_1_ = const_cast< ::cosmo::pb::UserData_StaticRecos*>(
      ::cosmo::pb::UserData_StaticRecos::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->static_recos_2_ = const_cast< ::cosmo::pb::UserData_StaticRecos*>(
      ::cosmo::pb::UserData_StaticRecos::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->sites_for_user_ = const_cast< ::cosmo::pb::UserData_SitesForUser*>(
      ::cosmo::pb::UserData_SitesForUser::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->keywords_daily_ = const_cast< ::cosmo::pb::UserData_UserKeywords*>(
      ::cosmo::pb::UserData_UserKeywords::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->keywords_monthly_ = const_cast< ::cosmo::pb::UserData_UserKeywords*>(
      ::cosmo::pb::UserData_UserKeywords::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->sites_for_user1_ = const_cast< ::cosmo::pb::UserData_SitesForUser*>(
      ::cosmo::pb::UserData_SitesForUser::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->sites_for_user2_ = const_cast< ::cosmo::pb::UserData_SitesForUser*>(
      ::cosmo::pb::UserData_SitesForUser::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->visited_docs_ = const_cast< ::cosmo::pb::UserData_VisitedDocs*>(
      ::cosmo::pb::UserData_VisitedDocs::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->sites_for_user3_ = const_cast< ::cosmo::pb::UserData_SitesForUser*>(
      ::cosmo::pb::UserData_SitesForUser::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->logs_visited_docs_ = const_cast< ::cosmo::pb::UserData_LogsVisitedDocs*>(
      ::cosmo::pb::UserData_LogsVisitedDocs::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->sites_for_user4_ = const_cast< ::cosmo::pb::UserData_SitesForUser*>(
      ::cosmo::pb::UserData_SitesForUser::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->user_themes_ = const_cast< ::cosmo::pb::UserData_UserThemesEvents*>(
      ::cosmo::pb::UserData_UserThemesEvents::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->user_dislikes_ = const_cast< ::cosmo::pb::UserData_UserEvents*>(
      ::cosmo::pb::UserData_UserEvents::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->user_videos_ = const_cast< ::cosmo::pb::UserData_UserVideos*>(
      ::cosmo::pb::UserData_UserVideos::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->user_video_events_ = const_cast< ::cosmo::pb::UserData_UserVideoEvents*>(
      ::cosmo::pb::UserData_UserVideoEvents::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->user_music_ = const_cast< ::cosmo::pb::UserData_UserMusic*>(
      ::cosmo::pb::UserData_UserMusic::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->recostream_categories_subscriptions_ = const_cast< ::cosmo::pb::UserData_SubscriptionInfo*>(
      ::cosmo::pb::UserData_SubscriptionInfo::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->recostream_domains_subscriptions_ = const_cast< ::cosmo::pb::UserData_SubscriptionInfo*>(
      ::cosmo::pb::UserData_SubscriptionInfo::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->kafka_categories_subscriptions_ = const_cast< ::cosmo::pb::UserData_SubscriptionInfo*>(
      ::cosmo::pb::UserData_SubscriptionInfo::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->kafka_domains_subscriptions_ = const_cast< ::cosmo::pb::UserData_SubscriptionInfo*>(
      ::cosmo::pb::UserData_SubscriptionInfo::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->recostream_sources_subscriptions_ = const_cast< ::cosmo::pb::UserData_SubscriptionInfo*>(
      ::cosmo::pb::UserData_SubscriptionInfo::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->recostream_dislikes_ = const_cast< ::cosmo::pb::UserData_UserEvents*>(
      ::cosmo::pb::UserData_UserEvents::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->vk_groups_for_user_ = const_cast< ::cosmo::pb::UserData_VkGroupsForUser*>(
      ::cosmo::pb::UserData_VkGroupsForUser::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->logs_visited_sources_ = const_cast< ::cosmo::pb::UserData_LogsVisitedSources*>(
      ::cosmo::pb::UserData_LogsVisitedSources::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->kafka_sources_subscriptions_ = const_cast< ::cosmo::pb::UserData_SubscriptionInfo*>(
      ::cosmo::pb::UserData_SubscriptionInfo::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->recostream_likes_ = const_cast< ::cosmo::pb::UserData_UserEvents*>(
      ::cosmo::pb::UserData_UserEvents::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->user_likes_ = const_cast< ::cosmo::pb::UserData_UserEvents*>(
      ::cosmo::pb::UserData_UserEvents::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->user_sources_events_ = const_cast< ::cosmo::pb::UserData_UserSourcesEvents*>(
      ::cosmo::pb::UserData_UserSourcesEvents::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->narrow_sites_ = const_cast< ::cosmo::pb::UserData_SitesForUser*>(
      ::cosmo::pb::UserData_SitesForUser::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->narrow_sites1_ = const_cast< ::cosmo::pb::UserData_SitesForUser*>(
      ::cosmo::pb::UserData_SitesForUser::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->reactions_ = const_cast< ::cosmo::pb::PackedReactionsArr*>(
      ::cosmo::pb::PackedReactionsArr::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->shows_ = const_cast< ::cosmo::pb::ShowsArr*>(
      ::cosmo::pb::ShowsArr::internal_default_instance());
  _UserData_default_instance_._instance.get_mutable()->i2i_user_themes_ = const_cast< ::cosmo::pb::UserData_UserI2IEvents*>(
      ::cosmo::pb::UserData_UserI2IEvents::internal_default_instance());
  _GroupedUserData_default_instance_._instance.get_mutable()->data_ = const_cast< ::cosmo::pb::UserData*>(
      ::cosmo::pb::UserData::internal_default_instance());
  _SourceData_AlsFea_default_instance_._instance.get_mutable()->als_c_stat_ = const_cast< ::cosmo::pb::SourceData_GroupStat*>(
      ::cosmo::pb::SourceData_GroupStat::internal_default_instance());
  _SourceData_LdaFea_default_instance_._instance.get_mutable()->als_c_stat_ = const_cast< ::cosmo::pb::SourceData_GroupStat*>(
      ::cosmo::pb::SourceData_GroupStat::internal_default_instance());
  _SourceData_SourcePopularityStat_GeoPopularity_default_instance_._instance.get_mutable()->stat_ = const_cast< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat*>(
      ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat::internal_default_instance());
  _SourceData_SourcePopularityStat_default_instance_._instance.get_mutable()->stat_ = const_cast< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat*>(
      ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat::internal_default_instance());
  _SourceData_SourceEventStat_GeoEventStat_default_instance_._instance.get_mutable()->stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat_EventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat_EventStat::internal_default_instance());
  _SourceData_SourceEventStat_SocDemEventStat_default_instance_._instance.get_mutable()->stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat_EventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat_EventStat::internal_default_instance());
  _SourceData_SourceEventStat_default_instance_._instance.get_mutable()->stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat_EventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat_EventStat::internal_default_instance());
  _SourceData_GroupEventStat_default_instance_._instance.get_mutable()->likes_stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat::internal_default_instance());
  _SourceData_GroupEventStat_default_instance_._instance.get_mutable()->clicks_stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat::internal_default_instance());
  _SourceData_GroupEventStat_default_instance_._instance.get_mutable()->reshares_stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat::internal_default_instance());
  _SourceData_GroupEventStat_default_instance_._instance.get_mutable()->comments_stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat::internal_default_instance());
  _SourceData_SourceLocationStat_Stat_default_instance_._instance.get_mutable()->shows_stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat::internal_default_instance());
  _SourceData_SourceLocationStat_Stat_default_instance_._instance.get_mutable()->clicks_stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat::internal_default_instance());
  _SourceData_SourceLocationStat_Stat_default_instance_._instance.get_mutable()->likes_stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat::internal_default_instance());
  _SourceData_SourceLocationStat_Stat_default_instance_._instance.get_mutable()->dislikes_stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat::internal_default_instance());
  _SourceData_SourceLocationStat_Stat_default_instance_._instance.get_mutable()->reshares_stat_ = const_cast< ::cosmo::pb::SourceData_SourceEventStat*>(
      ::cosmo::pb::SourceData_SourceEventStat::internal_default_instance());
  _SourceData_SourceLocationStat_LocationStat_default_instance_._instance.get_mutable()->stat_ = const_cast< ::cosmo::pb::SourceData_SourceLocationStat_Stat*>(
      ::cosmo::pb::SourceData_SourceLocationStat_Stat::internal_default_instance());
  _SourceData_SourceLocationStat_default_instance_._instance.get_mutable()->summary_stat_ = const_cast< ::cosmo::pb::SourceData_SourceLocationStat_Stat*>(
      ::cosmo::pb::SourceData_SourceLocationStat_Stat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->lda_fea_ = const_cast< ::cosmo::pb::SourceData_LdaFea*>(
      ::cosmo::pb::SourceData_LdaFea::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->als_fea_ = const_cast< ::cosmo::pb::SourceData_AlsFea*>(
      ::cosmo::pb::SourceData_AlsFea::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->ok_info_ = const_cast< ::cosmo::pb::SourceData_OkInfo*>(
      ::cosmo::pb::SourceData_OkInfo::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->source_info_ = const_cast< ::cosmo::pb::SourceData_SourceInfo*>(
      ::cosmo::pb::SourceData_SourceInfo::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->original_info_ = const_cast< ::cosmo::pb::SourceData_OriginalInfo*>(
      ::cosmo::pb::SourceData_OriginalInfo::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->group_period_stats_ = const_cast< ::cosmo::pb::SourceData_GroupPeriodStats*>(
      ::cosmo::pb::SourceData_GroupPeriodStats::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->news_data_ = const_cast< ::cosmo::pb::SourceData_NewsData*>(
      ::cosmo::pb::SourceData_NewsData::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->source_popularity_ = const_cast< ::cosmo::pb::SourceData_SourcePopularityStat*>(
      ::cosmo::pb::SourceData_SourcePopularityStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->lda_fea_2_ = const_cast< ::cosmo::pb::SourceData_LdaFea*>(
      ::cosmo::pb::SourceData_LdaFea::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->als_fea_2_ = const_cast< ::cosmo::pb::SourceData_AlsFea*>(
      ::cosmo::pb::SourceData_AlsFea::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->source_fresh_popularity_ = const_cast< ::cosmo::pb::SourceData_SourcePopularityStat*>(
      ::cosmo::pb::SourceData_SourcePopularityStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->ok_group_event_stat_ = const_cast< ::cosmo::pb::SourceData_GroupEventStat*>(
      ::cosmo::pb::SourceData_GroupEventStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->vk_group_event_stat_ = const_cast< ::cosmo::pb::SourceData_GroupEventStat*>(
      ::cosmo::pb::SourceData_GroupEventStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->vk_group_event_stat_week_ = const_cast< ::cosmo::pb::SourceData_GroupEventStat*>(
      ::cosmo::pb::SourceData_GroupEventStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->youtube_group_event_stat_ = const_cast< ::cosmo::pb::SourceData_GroupEventStat*>(
      ::cosmo::pb::SourceData_GroupEventStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->youtube_group_event_stat_week_ = const_cast< ::cosmo::pb::SourceData_GroupEventStat*>(
      ::cosmo::pb::SourceData_GroupEventStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->taped_location_stat_ = const_cast< ::cosmo::pb::SourceData_SourceLocationStat*>(
      ::cosmo::pb::SourceData_SourceLocationStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->homer_location_stat_ = const_cast< ::cosmo::pb::SourceData_SourceLocationStat*>(
      ::cosmo::pb::SourceData_SourceLocationStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->web_top_similar_sources_ = const_cast< ::cosmo::pb::SourceData_SourceSimilarity*>(
      ::cosmo::pb::SourceData_SourceSimilarity::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->ok_top_similar_groups_ = const_cast< ::cosmo::pb::SourceData_SourceSimilarity*>(
      ::cosmo::pb::SourceData_SourceSimilarity::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->hourly_location_stat_ = const_cast< ::cosmo::pb::SourceData_SourceLocationStat*>(
      ::cosmo::pb::SourceData_SourceLocationStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->daily_location_stat_ = const_cast< ::cosmo::pb::SourceData_SourceLocationStat*>(
      ::cosmo::pb::SourceData_SourceLocationStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->weekly_location_stat_ = const_cast< ::cosmo::pb::SourceData_SourceLocationStat*>(
      ::cosmo::pb::SourceData_SourceLocationStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->monthly_location_stat_ = const_cast< ::cosmo::pb::SourceData_SourceLocationStat*>(
      ::cosmo::pb::SourceData_SourceLocationStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->source_new_popularity_ = const_cast< ::cosmo::pb::SourceData_SourcePopularityStat*>(
      ::cosmo::pb::SourceData_SourcePopularityStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->vk_group_event_stat_v2_ = const_cast< ::cosmo::pb::SourceData_GroupEventStat*>(
      ::cosmo::pb::SourceData_GroupEventStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->vk_group_event_stat_week_v2_ = const_cast< ::cosmo::pb::SourceData_GroupEventStat*>(
      ::cosmo::pb::SourceData_GroupEventStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->youtube_group_event_stat_v2_ = const_cast< ::cosmo::pb::SourceData_GroupEventStat*>(
      ::cosmo::pb::SourceData_GroupEventStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->youtube_group_event_stat_week_v2_ = const_cast< ::cosmo::pb::SourceData_GroupEventStat*>(
      ::cosmo::pb::SourceData_GroupEventStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->fast_location_stat_ = const_cast< ::cosmo::pb::SourceData_SourceLocationStat*>(
      ::cosmo::pb::SourceData_SourceLocationStat::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->source_stat_geo_ = const_cast< ::cosmo::pb::SourceData_SourceGeo*>(
      ::cosmo::pb::SourceData_SourceGeo::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->content_themes_ = const_cast< ::cosmo::pb::SourceData_ContentThemes*>(
      ::cosmo::pb::SourceData_ContentThemes::internal_default_instance());
  _SourceData_default_instance_._instance.get_mutable()->lenta_admin_source_info_ = const_cast< ::cosmo::pb::SourceData_LentaAdminSourceInfo*>(
      ::cosmo::pb::SourceData_LentaAdminSourceInfo::internal_default_instance());
  _DocumentData_TopicEventStat_default_instance_._instance.get_mutable()->likes_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_TopicEventStat_default_instance_._instance.get_mutable()->clicks_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_TopicEventStat_default_instance_._instance.get_mutable()->reshares_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_TopicEventStat_default_instance_._instance.get_mutable()->comments_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_DocumentLocationStat_Stat_default_instance_._instance.get_mutable()->shows_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_DocumentLocationStat_Stat_default_instance_._instance.get_mutable()->clicks_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_DocumentLocationStat_Stat_default_instance_._instance.get_mutable()->likes_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_DocumentLocationStat_Stat_default_instance_._instance.get_mutable()->dislikes_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_DocumentLocationStat_Stat_default_instance_._instance.get_mutable()->reshares_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_DocumentLocationStat_Stat_default_instance_._instance.get_mutable()->unlikes_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_DocumentLocationStat_Stat_default_instance_._instance.get_mutable()->undislikes_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentEventStat*>(
      ::cosmo::pb::DocumentData_DocumentEventStat::internal_default_instance());
  _DocumentData_DocumentLocationStat_LocationStat_default_instance_._instance.get_mutable()->stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentLocationStat_Stat*>(
      ::cosmo::pb::DocumentData_DocumentLocationStat_Stat::internal_default_instance());
  _DocumentData_DocumentLocationStat_default_instance_._instance.get_mutable()->summary_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentLocationStat_Stat*>(
      ::cosmo::pb::DocumentData_DocumentLocationStat_Stat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->ok_info_ = const_cast< ::cosmo::pb::DocumentData_OkInfo*>(
      ::cosmo::pb::DocumentData_OkInfo::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->news_data_ = const_cast< ::cosmo::pb::DocumentData_NewsData*>(
      ::cosmo::pb::DocumentData_NewsData::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->censor_ = const_cast< ::cosmo::pb::DocumentData_Censor*>(
      ::cosmo::pb::DocumentData_Censor::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->user_stats_ = const_cast< ::cosmo::pb::DocumentData_UserStats*>(
      ::cosmo::pb::DocumentData_UserStats::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->trends_ = const_cast< ::cosmo::pb::DocumentData_Trends*>(
      ::cosmo::pb::DocumentData_Trends::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->original_info_ = const_cast< ::cosmo::pb::DocumentData_OriginalInfo*>(
      ::cosmo::pb::DocumentData_OriginalInfo::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->fetcher_ = const_cast< ::cosmo::pb::DocumentData_Fetcher*>(
      ::cosmo::pb::DocumentData_Fetcher::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->mediametrics_fea_ = const_cast< ::cosmo::pb::DocumentData_MediametricsFea*>(
      ::cosmo::pb::DocumentData_MediametricsFea::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->topic_period_stats_ = const_cast< ::cosmo::pb::DocumentData_TopicPeriodStats*>(
      ::cosmo::pb::DocumentData_TopicPeriodStats::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->app_filter_stats_ = const_cast< ::cosmo::pb::DocumentData_AppFilterStats*>(
      ::cosmo::pb::DocumentData_AppFilterStats::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->week_mediametrics_fea_ = const_cast< ::cosmo::pb::DocumentData_MediametricsFea*>(
      ::cosmo::pb::DocumentData_MediametricsFea::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->ok_topic_event_stat_ = const_cast< ::cosmo::pb::DocumentData_TopicEventStat*>(
      ::cosmo::pb::DocumentData_TopicEventStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->vk_topic_event_stat_day_ = const_cast< ::cosmo::pb::DocumentData_TopicEventStat*>(
      ::cosmo::pb::DocumentData_TopicEventStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->vk_topic_event_stat_week_ = const_cast< ::cosmo::pb::DocumentData_TopicEventStat*>(
      ::cosmo::pb::DocumentData_TopicEventStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->youtube_topic_event_stat_day_ = const_cast< ::cosmo::pb::DocumentData_TopicEventStat*>(
      ::cosmo::pb::DocumentData_TopicEventStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->youtube_topic_event_stat_week_ = const_cast< ::cosmo::pb::DocumentData_TopicEventStat*>(
      ::cosmo::pb::DocumentData_TopicEventStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->taped_location_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      ::cosmo::pb::DocumentData_DocumentLocationStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->homer_location_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      ::cosmo::pb::DocumentData_DocumentLocationStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->hourly_location_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      ::cosmo::pb::DocumentData_DocumentLocationStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->daily_location_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      ::cosmo::pb::DocumentData_DocumentLocationStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->weekly_location_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      ::cosmo::pb::DocumentData_DocumentLocationStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->monthly_location_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      ::cosmo::pb::DocumentData_DocumentLocationStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->fetcher_geo_ = const_cast< ::cosmo::pb::DocumentData_FetcherGeo*>(
      ::cosmo::pb::DocumentData_FetcherGeo::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->hourly_fast_mediametrics_fea_ = const_cast< ::cosmo::pb::DocumentData_MediametricsFea*>(
      ::cosmo::pb::DocumentData_MediametricsFea::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->daily_fast_mediametrics_fea_ = const_cast< ::cosmo::pb::DocumentData_MediametricsFea*>(
      ::cosmo::pb::DocumentData_MediametricsFea::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->fetcher_image_ = const_cast< ::cosmo::pb::DocumentData_FetcherImage*>(
      ::cosmo::pb::DocumentData_FetcherImage::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->content_data_ = const_cast< ::cosmo::pb::DocumentData_ContentData*>(
      ::cosmo::pb::DocumentData_ContentData::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->vk_topic_event_stat_day_v2_ = const_cast< ::cosmo::pb::DocumentData_TopicEventStat*>(
      ::cosmo::pb::DocumentData_TopicEventStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->vk_topic_event_stat_week_v2_ = const_cast< ::cosmo::pb::DocumentData_TopicEventStat*>(
      ::cosmo::pb::DocumentData_TopicEventStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->youtube_topic_event_stat_day_v2_ = const_cast< ::cosmo::pb::DocumentData_TopicEventStat*>(
      ::cosmo::pb::DocumentData_TopicEventStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->youtube_topic_event_stat_week_v2_ = const_cast< ::cosmo::pb::DocumentData_TopicEventStat*>(
      ::cosmo::pb::DocumentData_TopicEventStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->document_i2i_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentMutualStat*>(
      ::cosmo::pb::DocumentData_DocumentMutualStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->document_mv_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentMutualStat*>(
      ::cosmo::pb::DocumentData_DocumentMutualStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->news_tags_data_ = const_cast< ::cosmo::pb::DocumentData_NewsTagsData*>(
      ::cosmo::pb::DocumentData_NewsTagsData::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->news_story_data_ = const_cast< ::cosmo::pb::DocumentData_NewsStoryData*>(
      ::cosmo::pb::DocumentData_NewsStoryData::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->native_target_is_active_ = const_cast< ::cosmo::pb::DocumentData_NativeTargetIsActive*>(
      ::cosmo::pb::DocumentData_NativeTargetIsActive::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->fast_location_stat_ = const_cast< ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      ::cosmo::pb::DocumentData_DocumentLocationStat::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->content_porn_fea_ = const_cast< ::cosmo::pb::DocumentData_ContentPornFea*>(
      ::cosmo::pb::DocumentData_ContentPornFea::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->content_themes_ = const_cast< ::cosmo::pb::DocumentData_ContentThemes*>(
      ::cosmo::pb::DocumentData_ContentThemes::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->story_cluster_id_ = const_cast< ::cosmo::pb::DocumentData_StoryClusterId*>(
      ::cosmo::pb::DocumentData_StoryClusterId::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->document_keywords_info_ = const_cast< ::cosmo::pb::DocumentData_DocumentKeywordsInfo*>(
      ::cosmo::pb::DocumentData_DocumentKeywordsInfo::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->image_porn_fea_ = const_cast< ::cosmo::pb::DocumentData_ImagePornFea*>(
      ::cosmo::pb::DocumentData_ImagePornFea::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->fetcherfirstmeet_ = const_cast< ::cosmo::pb::DocumentData_FetcherFirstmeet*>(
      ::cosmo::pb::DocumentData_FetcherFirstmeet::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->pubdate_ = const_cast< ::cosmo::pb::DocumentData_FetcherPubdate*>(
      ::cosmo::pb::DocumentData_FetcherPubdate::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->freshness_data_ = const_cast< ::cosmo::pb::DocumentData_FreshnessData*>(
      ::cosmo::pb::DocumentData_FreshnessData::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->state_ = const_cast< ::cosmo::pb::DocumentData_DocState*>(
      ::cosmo::pb::DocumentData_DocState::internal_default_instance());
  _DocumentData_default_instance_._instance.get_mutable()->risks_fields_ = const_cast< ::cosmo::pb::DocumentData_RisksFields*>(
      ::cosmo::pb::DocumentData_RisksFields::internal_default_instance());
  _StorageEvent_Data_default_instance_._instance.get_mutable()->user_data_ = const_cast< ::cosmo::pb::UserData*>(
      ::cosmo::pb::UserData::internal_default_instance());
  _StorageEvent_Data_default_instance_._instance.get_mutable()->source_data_ = const_cast< ::cosmo::pb::SourceData*>(
      ::cosmo::pb::SourceData::internal_default_instance());
  _StorageEvent_Data_default_instance_._instance.get_mutable()->document_data_ = const_cast< ::cosmo::pb::DocumentData*>(
      ::cosmo::pb::DocumentData::internal_default_instance());
  _StorageEvent_Data_default_instance_._instance.get_mutable()->document_source_link_ = const_cast< ::cosmo::pb::DocumentSourceLink*>(
      ::cosmo::pb::DocumentSourceLink::internal_default_instance());
  _StorageEvent_default_instance_._instance.get_mutable()->data_ = const_cast< ::cosmo::pb::StorageEvent_Data*>(
      ::cosmo::pb::StorageEvent_Data::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013cosmo.proto\022\010cosmo.pb\032\027cosmo_user_even"
      "ts.proto\"\336N\n\010UserData\022\017\n\007user_id\030\001 \001(\003\0220"
      "\n\nsocdem_fea\030\002 \001(\0132\034.cosmo.pb.UserData.S"
      "ocDemFea\022*\n\007als_fea\030\003 \001(\0132\031.cosmo.pb.Use"
      "rData.AlsFea\022*\n\007ok_info\030\004 \001(\0132\031.cosmo.pb"
      ".UserData.OkInfo\022/\n\tdeti_reco\030\005 \001(\0132\034.co"
      "smo.pb.UserData.DetiRecos\0228\n\rals_items_f"
      "ea\030\006 \001(\0132!.cosmo.pb.UserData.AlsItemsBia"
      "ses\0224\n\014news_sources\030\007 \001(\0132\036.cosmo.pb.Use"
      "rData.NewsSources\022\'\n\005stats\030\010 \001(\0132\030.cosmo"
      ".pb.UserData.Stats\0226\n\roriginal_info\030\t \001("
      "\0132\037.cosmo.pb.UserData.OriginalInfo\022,\n\tal"
      "s_fea_2\030\n \001(\0132\031.cosmo.pb.UserData.AlsFea"
      "\022=\n\021sources_web_stats\030\013 \001(\0132\".cosmo.pb.U"
      "serData.SourcesWebStats\0224\n\022sources_reco_"
      "stats\030\014 \001(\0132\030.cosmo.pb.UserData.Stats\0220\n"
      "\nuser_links\030\r \001(\0132\034.cosmo.pb.UserData.Us"
      "erLinks\0226\n\ruser_clusters\030\016 \001(\0132\037.cosmo.p"
      "b.UserData.UserClusters\0226\n\rsimilar_sites"
      "\030\017 \001(\0132\037.cosmo.pb.UserData.SimilarSites\022"
      "8\n\016content_themes\030\021 \001(\0132 .cosmo.pb.UserD"
      "ata.ContentThemes\0226\n\016static_recos_1\030\022 \001("
      "\0132\036.cosmo.pb.UserData.StaticRecos\0226\n\016sta"
      "tic_recos_2\030\023 \001(\0132\036.cosmo.pb.UserData.St"
      "aticRecos\0227\n\016sites_for_user\030\024 \001(\0132\037.cosm"
      "o.pb.UserData.SitesForUser\0227\n\016keywords_d"
      "aily\030\025 \001(\0132\037.cosmo.pb.UserData.UserKeywo"
      "rds\0229\n\020keywords_monthly\030\026 \001(\0132\037.cosmo.pb"
      ".UserData.UserKeywords\0228\n\017sites_for_user"
      "1\030\027 \001(\0132\037.cosmo.pb.UserData.SitesForUser"
      "\0228\n\017sites_for_user2\030\030 \001(\0132\037.cosmo.pb.Use"
      "rData.SitesForUser\0224\n\014visited_docs\030\031 \001(\013"
      "2\036.cosmo.pb.UserData.VisitedDocs\0228\n\017site"
      "s_for_user3\030\032 \001(\0132\037.cosmo.pb.UserData.Si"
      "tesForUser\022=\n\021logs_visited_docs\030\033 \001(\0132\"."
      "cosmo.pb.UserData.LogsVisitedDocs\0228\n\017sit"
      "es_for_user4\030\034 \001(\0132\037.cosmo.pb.UserData.S"
      "itesForUser\0228\n\013user_themes\030\035 \001(\0132#.cosmo"
      ".pb.UserData.UserThemesEvents\0224\n\ruser_di"
      "slikes\030\036 \001(\0132\035.cosmo.pb.UserData.UserEve"
      "nts\0222\n\013user_videos\030\037 \001(\0132\035.cosmo.pb.User"
      "Data.UserVideos\022=\n\021user_video_events\030  \001"
      "(\0132\".cosmo.pb.UserData.UserVideoEvents\0220"
      "\n\nuser_music\030! \001(\0132\034.cosmo.pb.UserData.U"
      "serMusic\022P\n#recostream_categories_subscr"
      "iptions\030\" \001(\0132#.cosmo.pb.UserData.Subscr"
      "iptionInfo\022M\n recostream_domains_subscri"
      "ptions\030# \001(\0132#.cosmo.pb.UserData.Subscri"
      "ptionInfo\022K\n\036kafka_categories_subscripti"
      "ons\030$ \001(\0132#.cosmo.pb.UserData.Subscripti"
      "onInfo\022H\n\033kafka_domains_subscriptions\030% "
      "\001(\0132#.cosmo.pb.UserData.SubscriptionInfo"
      "\022M\n recostream_sources_subscriptions\030& \001"
      "(\0132#.cosmo.pb.UserData.SubscriptionInfo\022"
      ":\n\023recostream_dislikes\030\' \001(\0132\035.cosmo.pb."
      "UserData.UserEvents\022>\n\022vk_groups_for_use"
      "r\030( \001(\0132\".cosmo.pb.UserData.VkGroupsForU"
      "ser\022C\n\024logs_visited_sources\030) \001(\0132%.cosm"
      "o.pb.UserData.LogsVisitedSources\022H\n\033kafk"
      "a_sources_subscriptions\030* \001(\0132#.cosmo.pb"
      ".UserData.SubscriptionInfo\0227\n\020recostream"
      "_likes\030+ \001(\0132\035.cosmo.pb.UserData.UserEve"
      "nts\0221\n\nuser_likes\030, \001(\0132\035.cosmo.pb.UserD"
      "ata.UserEvents\022A\n\023user_sources_events\030- "
      "\001(\0132$.cosmo.pb.UserData.UserSourcesEvent"
      "s\0225\n\014narrow_sites\030. \001(\0132\037.cosmo.pb.UserD"
      "ata.SitesForUser\0226\n\rnarrow_sites1\030/ \001(\0132"
      "\037.cosmo.pb.UserData.SitesForUser\022/\n\treac"
      "tions\0300 \001(\0132\034.cosmo.pb.PackedReactionsAr"
      "r\022!\n\005shows\0301 \001(\0132\022.cosmo.pb.ShowsArr\0229\n\017"
      "i2i_user_themes\0302 \001(\0132 .cosmo.pb.UserDat"
      "a.UserI2IEvents\032\032\n\014OriginalInfo\022\n\n\002id\030\001 "
      "\001(\t\032\031\n\006OkInfo\022\017\n\007user_id\030\001 \002(\003\032+\n\tSocDem"
      "Fea\022\021\n\006gender\030\001 \001(\005:\0010\022\013\n\003age\030\002 \001(\005\032\232\001\n\t"
      "DetiRecos\022\014\n\004slim\030\001 \003(\003\022\014\n\004wrmf\030\002 \003(\003\022\021\n"
      "\tals_tuned\030\003 \003(\003\022\021\n\tals_large\030\004 \003(\003\022\013\n\003s"
      "vd\030\005 \003(\003\022\022\n\nsvd_stupid\030\006 \003(\003\022\024\n\014als_by_l"
      "iker\030\007 \003(\003\022\024\n\014als_by_homer\030\010 \003(\003\032\025\n\006AlsF"
      "ea\022\013\n\003als\030\001 \003(\002\032\035\n\016AlsItemsBiases\022\013\n\003fea"
      "\030\001 \003(\002\032)\n\013NewsSources\022\016\n\006weight\030\001 \003(\002\022\n\n"
      "\002id\030\002 \003(\003\032\334\001\n\005Stats\022;\n\rsources_stats\030\001 \003"
      "(\0132$.cosmo.pb.UserData.Stats.SourceStats"
      "\022\017\n\007version\030\002 \001(\r\032\204\001\n\013SourceStats\022\021\n\tsou"
      "rce_id\030\001 \002(\003\022\023\n\013category_id\030\002 \001(\003\022\r\n\005vie"
      "ws\030\003 \001(\005\022\r\n\005opens\030\004 \001(\005\022\r\n\005likes\030\005 \001(\005\022\020"
      "\n\010dislikes\030\006 \001(\005\022\016\n\006shares\030\007 \001(\005\032\232\001\n\017Sou"
      "rcesWebStats\022D\n\014SourceVisits\030\001 \003(\0132..cos"
      "mo.pb.UserData.SourcesWebStats.SourceVis"
      "it\022\017\n\007version\030\002 \001(\r\0320\n\013SourceVisit\022\021\n\tso"
      "urce_id\030\001 \002(\003\022\016\n\006visits\030\002 \002(\005\032>\n\tUserLin"
      "ks\022\013\n\003vid\030\001 \001(\t\022\014\n\004mail\030\002 \001(\t\022\n\n\002ok\030\003 \001("
      "\t\022\n\n\002vk\030\004 \001(\t\032(\n\014UserClusters\022\030\n\020user_cl"
      "uster_som\030\001 \001(\r\032\215\001\n\014SimilarSites\022A\n\014simi"
      "lar_site\030\001 \003(\0132+.cosmo.pb.UserData.Simil"
      "arSites.SimilarSite\022\017\n\007version\030\002 \001(\r\032)\n\013"
      "SimilarSite\022\n\n\002id\030\001 \002(\003\022\016\n\006weight\030\002 \002(\002\032"
      "\\\n\rContentThemes\022\017\n\007version\030\001 \001(\r\022\025\n\rmod"
      "el_version\030\002 \001(\r\022\014\n\004urls\030\003 \001(\r\022\025\n\rthemes"
      "_vector\030\004 \003(\002\032A\n\013StaticRecos\022\017\n\007version\030"
      "\001 \001(\r\022\021\n\tsource_id\030\002 \003(\003\022\016\n\006doc_id\030\003 \003(\003"
      "\032A\n\013VisitedDocs\022\017\n\007version\030\001 \001(\r\022\021\n\tsour"
      "ce_id\030\002 \003(\003\022\016\n\006doc_id\030\003 \003(\003\032!\n\017LogsVisit"
      "edDocs\022\016\n\006doc_id\030\001 \003(\003\032\\\n\022LogsVisitedSou"
      "rces\022\017\n\007version\030\001 \001(\r\0225\n\007sources\030\002 \003(\0132$"
      ".cosmo.pb.UserData.LogsVisitedSource\032S\n\021"
      "LogsVisitedSource\022\021\n\tsource_id\030\001 \001(\003\022\023\n\013"
      "source_urls\030\002 \001(\003\022\026\n\016source_last_ts\030\003 \001("
      "\003\032p\n\014SitesForUser\022\017\n\007version\030\001 \002(\r\022\021\n\tsi"
      "te_hash\030\002 \003(\003\022\023\n\013site_visits\030\003 \003(\r\022\021\n\tsi"
      "te_urls\030\004 \003(\r\022\024\n\014site_last_ts\030\005 \003(\003\032H\n\017V"
      "kGroupsForUser\022\017\n\007version\030\001 \002(\r\022\026\n\016group"
      "_url_hash\030\002 \003(\003\022\014\n\004rank\030\003 \003(\002\032M\n\014UserKey"
      "words\022\017\n\007version\030\001 \002(\r\022\024\n\014keyword_hash\030\002"
      " \003(\003\022\026\n\016keyword_weight\030\003 \003(\002\032\372\002\n\nUserEve"
      "nts\022@\n\rsite_dislikes\030\001 \003(\0132).cosmo.pb.Us"
      "erData.UserEvents.SiteDislike\022D\n\017source_"
      "dislikes\030\002 \003(\0132+.cosmo.pb.UserData.UserE"
      "vents.SourceDislike\022H\n\021document_dislikes"
      "\030\003 \003(\0132-.cosmo.pb.UserData.UserEvents.Do"
      "cumentDislike\0321\n\013SiteDislike\022\021\n\tsite_has"
      "h\030\001 \002(\003\022\017\n\007last_ts\030\002 \001(\003\0323\n\rSourceDislik"
      "e\022\021\n\tsource_id\030\001 \002(\003\022\017\n\007last_ts\030\002 \001(\003\0322\n"
      "\017DocumentDislike\022\016\n\006doc_id\030\001 \002(\003\022\017\n\007last"
      "_ts\030\002 \001(\003\032\264\004\n\020UserThemesEvents\022B\n\006events"
      "\030\001 \003(\01322.cosmo.pb.UserData.UserThemesEve"
      "nts.UserThemeEvent\032>\n\022UserThemeEventInfo"
      "\022\026\n\016last_timestamp\030\001 \002(\003\022\020\n\005count\030\002 \002(\003:"
      "\0010\032\233\003\n\016UserThemeEvent\022\022\n\ntheme_hash\030\001 \002("
      "\003\022F\n\006clicks\030\002 \001(\01326.cosmo.pb.UserData.Us"
      "erThemesEvents.UserThemeEventInfo\022E\n\005sho"
      "ws\030\003 \001(\01326.cosmo.pb.UserData.UserThemesE"
      "vents.UserThemeEventInfo\022L\n\014doc_dislikes"
      "\030\004 \001(\01326.cosmo.pb.UserData.UserThemesEve"
      "nts.UserThemeEventInfo\022I\n\tdoc_likes\030\005 \001("
      "\01326.cosmo.pb.UserData.UserThemesEvents.U"
      "serThemeEventInfo\022M\n\rsite_dislikes\030\006 \001(\013"
      "26.cosmo.pb.UserData.UserThemesEvents.Us"
      "erThemeEventInfo\032\217\004\n\rUserI2IEvents\022=\n\006ev"
      "ents\030\001 \003(\0132-.cosmo.pb.UserData.UserI2IEv"
      "ents.UserI2IEvent\032<\n\020UserI2IEventInfo\022\026\n"
      "\016last_timestamp\030\001 \002(\003\022\020\n\005count\030\002 \002(\003:\0010\032"
      "\200\003\n\014UserI2IEvent\022\022\n\ni2i_doc_id\030\001 \002(\003\022A\n\006"
      "clicks\030\002 \001(\01321.cosmo.pb.UserData.UserI2I"
      "Events.UserI2IEventInfo\022@\n\005shows\030\003 \001(\01321"
      ".cosmo.pb.UserData.UserI2IEvents.UserI2I"
      "EventInfo\022G\n\014doc_dislikes\030\004 \001(\01321.cosmo."
      "pb.UserData.UserI2IEvents.UserI2IEventIn"
      "fo\022D\n\tdoc_likes\030\005 \001(\01321.cosmo.pb.UserDat"
      "a.UserI2IEvents.UserI2IEventInfo\022H\n\rsite"
      "_dislikes\030\006 \001(\01321.cosmo.pb.UserData.User"
      "I2IEvents.UserI2IEventInfo\032\324\002\n\021UserSourc"
      "esEvents\022D\n\006events\030\001 \003(\01324.cosmo.pb.User"
      "Data.UserSourcesEvents.UserSourceEvent\032\?"
      "\n\023UserSourceEventInfo\022\026\n\016last_timestamp\030"
      "\001 \002(\003\022\020\n\005count\030\002 \002(\003:\0010\032\267\001\n\017UserSourceEv"
      "ent\022\021\n\tsource_id\030\001 \002(\003\022H\n\006clicks\030\002 \001(\01328"
      ".cosmo.pb.UserData.UserSourcesEvents.Use"
      "rSourceEventInfo\022G\n\005shows\030\003 \001(\01328.cosmo."
      "pb.UserData.UserSourcesEvents.UserSource"
      "EventInfo\032/\n\nUserVideos\022\017\n\007version\030\001 \002(\r"
      "\022\020\n\010video_id\030\002 \003(\003\032\241\001\n\tUserMusic\022\017\n\007vers"
      "ion\030\001 \002(\r\0226\n\006tracks\030\002 \003(\0132&.cosmo.pb.Use"
      "rData.UserMusic.TrackInfo\032K\n\tTrackInfo\022\017"
      "\n\007hash_id\030\001 \002(\003\022\025\n\rlistens_count\030\002 \001(\r\022\026"
      "\n\016last_listen_ts\030\003 \001(\003\032\374\030\n\017UserVideoEven"
      "ts\022A\n\006events\030\001 \003(\01321.cosmo.pb.UserData.U"
      "serVideoEvents.UserVideoEvent\032\245\030\n\016UserVi"
      "deoEvent\022\016\n\006doc_id\030\001 \002(\003\022\026\n\016last_timesta"
      "mp\030\002 \002(\003\022J\n\007emotion\030\013 \001(\01329.cosmo.pb.Use"
      "rData.UserVideoEvents.UserVideoEvent.Emo"
      "tion\022L\n\010favorite\030\014 \001(\0132:.cosmo.pb.UserDa"
      "ta.UserVideoEvents.UserVideoEvent.Favori"
      "te\022D\n\004rate\030\r \001(\01326.cosmo.pb.UserData.Use"
      "rVideoEvents.UserVideoEvent.Rate\022J\n\007comm"
      "ent\030\016 \001(\01329.cosmo.pb.UserData.UserVideoE"
      "vents.UserVideoEvent.Comment\022F\n\005block\030\017 "
      "\001(\01327.cosmo.pb.UserData.UserVideoEvents."
      "UserVideoEvent.Block\022F\n\005share\030\020 \001(\01327.co"
      "smo.pb.UserData.UserVideoEvents.UserVide"
      "oEvent.Share\022F\n\005watch\030\021 \001(\01327.cosmo.pb.U"
      "serData.UserVideoEvents.UserVideoEvent.W"
      "atch\022O\n\nvideo_next\030\022 \001(\0132;.cosmo.pb.User"
      "Data.UserVideoEvents.UserVideoEvent.Vide"
      "oNext\022\\\n\021video_in_viewport\030\023 \001(\0132A.cosmo"
      ".pb.UserData.UserVideoEvents.UserVideoEv"
      "ent.VideoInViewport\022Q\n\013play_status\030\024 \001(\013"
      "2<.cosmo.pb.UserData.UserVideoEvents.Use"
      "rVideoEvent.PlayStatus\022D\n\004like\030\025 \001(\01326.c"
      "osmo.pb.UserData.UserVideoEvents.UserVid"
      "eoEvent.Like\022J\n\007dislike\030\026 \001(\01329.cosmo.pb"
      ".UserData.UserVideoEvents.UserVideoEvent"
      ".Dislike\022D\n\004norm\030\027 \001(\01326.cosmo.pb.UserDa"
      "ta.UserVideoEvents.UserVideoEvent.Norm\022F"
      "\n\005rate3\030\030 \001(\01327.cosmo.pb.UserData.UserVi"
      "deoEvents.UserVideoEvent.Rate3\022H\n\006rate10"
      "\030\031 \001(\01328.cosmo.pb.UserData.UserVideoEven"
      "ts.UserVideoEvent.Rate10\022Q\n\013video_click\030"
      "\032 \001(\0132<.cosmo.pb.UserData.UserVideoEvent"
      "s.UserVideoEvent.VideoClick\022P\n\017watch_in_"
      "search\030\033 \001(\01327.cosmo.pb.UserData.UserVid"
      "eoEvents.UserVideoEvent.Watch\022[\n\025video_c"
      "lick_in_search\030\034 \001(\0132<.cosmo.pb.UserData"
      ".UserVideoEvents.UserVideoEvent.VideoCli"
      "ck\022I\n\tcold_rate\030\035 \001(\01326.cosmo.pb.UserDat"
      "a.UserVideoEvents.UserVideoEvent.Rate\022Q\n"
      "\020watch_with_sound\030\036 \001(\01327.cosmo.pb.UserD"
      "ata.UserVideoEvents.UserVideoEvent.Watch"
      "\022Q\n\013video_start\030\037 \001(\0132<.cosmo.pb.UserDat"
      "a.UserVideoEvents.UserVideoEvent.VideoSt"
      "art\032]\n\rDailyCounters\022\016\n\006common\030\001 \001(\004\022\017\n\007"
      "morning\030\002 \001(\004\022\013\n\003day\030\003 \001(\004\022\017\n\007evening\030\004 "
      "\001(\004\022\r\n\005night\030\005 \001(\004\032)\n\010Location\022\r\n\005block\030"
      "\001 \001(\t\022\016\n\006screen\030\002 \001(\t\032+\n\007Emotion\022\021\n\ttime"
      "stamp\030\001 \001(\003\022\r\n\005value\030\002 \001(\005\032,\n\010Favorite\022\021"
      "\n\ttimestamp\030\001 \001(\003\022\r\n\005value\030\002 \001(\010\032(\n\004Rate"
      "\022\021\n\ttimestamp\030\001 \001(\003\022\r\n\005value\030\002 \001(\005\032+\n\007Co"
      "mment\022\021\n\ttimestamp\030\001 \001(\003\022\r\n\005value\030\002 \001(\005\032"
      ")\n\005Block\022\021\n\ttimestamp\030\001 \001(\003\022\r\n\005value\030\002 \001"
      "(\010\032)\n\005Share\022\021\n\ttimestamp\030\001 \001(\003\022\r\n\005value\030"
      "\002 \001(\005\032\360\001\n\005Watch\022\021\n\ttimestamp\030\001 \001(\003\022\020\n\010du"
      "ration\030\002 \001(\005\022\017\n\007percent\030\003 \001(\005\022\033\n\023cumulat"
      "ive_duration\030\004 \001(\005\022\032\n\022cumulative_percent"
      "\030\005 \001(\005\022L\n\010location\030\006 \001(\0132:.cosmo.pb.User"
      "Data.UserVideoEvents.UserVideoEvent.Loca"
      "tion\022\031\n\021counter_timestamp\030\007 \001(\003\022\017\n\007count"
      "er\030\010 \001(\004\032\323\001\n\tVideoNext\022\021\n\ttimestamp\030\001 \001("
      "\003\022\020\n\010duration\030\002 \001(\005\022\017\n\007percent\030\003 \001(\005\022\033\n\023"
      "cumulative_duration\030\004 \001(\005\022\032\n\022cumulative_"
      "percent\030\005 \001(\005\022W\n\016daily_counters\030\006 \001(\0132\?."
      "cosmo.pb.UserData.UserVideoEvents.UserVi"
      "deoEvent.DailyCounters\0320\n\nVideoStart\022\021\n\t"
      "timestamp\030\001 \001(\003\022\017\n\007counter\030\002 \001(\004\032\203\001\n\017Vid"
      "eoInViewport\022\021\n\ttimestamp\030\001 \001(\003\022L\n\010locat"
      "ion\030\002 \001(\0132:.cosmo.pb.UserData.UserVideoE"
      "vents.UserVideoEvent.Location\022\017\n\007counter"
      "\030\003 \001(\004\032.\n\nPlayStatus\022\021\n\ttimestamp\030\001 \001(\003\022"
      "\r\n\005value\030\002 \001(\005\032(\n\004Like\022\021\n\ttimestamp\030\001 \001("
      "\003\022\r\n\005value\030\002 \001(\005\032+\n\007Dislike\022\021\n\ttimestamp"
      "\030\001 \001(\003\022\r\n\005value\030\002 \001(\005\032(\n\004Norm\022\021\n\ttimesta"
      "mp\030\001 \001(\003\022\r\n\005value\030\002 \001(\005\032)\n\005Rate3\022\021\n\ttime"
      "stamp\030\001 \001(\003\022\r\n\005value\030\002 \001(\005\032*\n\006Rate10\022\021\n\t"
      "timestamp\030\001 \001(\003\022\r\n\005value\030\002 \001(\005\032m\n\nVideoC"
      "lick\022\021\n\ttimestamp\030\001 \001(\003\022L\n\010location\030\002 \001("
      "\0132:.cosmo.pb.UserData.UserVideoEvents.Us"
      "erVideoEvent.Location\032\331\002\n\020SubscriptionIn"
      "fo\022C\n\005items\030\001 \003(\01324.cosmo.pb.UserData.Su"
      "bscriptionInfo.SubscriptionItem\022\036\n\026onboa"
      "rding_shows_count\030\002 \001(\005\022\037\n\027last_onboardi"
      "ng_show_ts\030\003 \001(\003\032\276\001\n\020SubscriptionItem\022\n\n"
      "\002id\030\001 \002(\003\022W\n\006status\030\002 \002(\0162G.cosmo.pb.Use"
      "rData.SubscriptionInfo.SubscriptionItem."
      "SubscriptionStatus\022\017\n\007last_ts\030\003 \002(\003\022\r\n\005s"
      "hows\030\004 \001(\005\"%\n\022SubscriptionStatus\022\007\n\003OFF\020"
      "\000\022\006\n\002ON\020\001\"3\n\017GroupedUserData\022 \n\004data\030\001 \001"
      "(\0132\022.cosmo.pb.UserData\"\224+\n\nSourceData\022\021\n"
      "\tsource_id\030\001 \002(\003\022,\n\007lda_fea\030\002 \001(\0132\033.cosm"
      "o.pb.SourceData.LdaFea\022,\n\007als_fea\030\003 \001(\0132"
      "\033.cosmo.pb.SourceData.AlsFea\022,\n\007ok_info\030"
      "\006 \001(\0132\033.cosmo.pb.SourceData.OkInfo\0224\n\013so"
      "urce_info\030\007 \001(\0132\037.cosmo.pb.SourceData.So"
      "urceInfo\0228\n\roriginal_info\030\010 \001(\0132!.cosmo."
      "pb.SourceData.OriginalInfo\022A\n\022group_peri"
      "od_stats\030\t \001(\0132%.cosmo.pb.SourceData.Gro"
      "upPeriodStats\0220\n\tnews_data\030\n \001(\0132\035.cosmo"
      ".pb.SourceData.NewsData\022D\n\021source_popula"
      "rity\030\013 \001(\0132).cosmo.pb.SourceData.SourceP"
      "opularityStat\022.\n\tlda_fea_2\030\014 \001(\0132\033.cosmo"
      ".pb.SourceData.LdaFea\022.\n\tals_fea_2\030\r \001(\013"
      "2\033.cosmo.pb.SourceData.AlsFea\022J\n\027source_"
      "fresh_popularity\030\016 \001(\0132).cosmo.pb.Source"
      "Data.SourcePopularityStat\022@\n\023ok_group_ev"
      "ent_stat\030\017 \001(\0132#.cosmo.pb.SourceData.Gro"
      "upEventStat\022@\n\023vk_group_event_stat\030\020 \001(\013"
      "2#.cosmo.pb.SourceData.GroupEventStat\022E\n"
      "\030vk_group_event_stat_week\030\021 \001(\0132#.cosmo."
      "pb.SourceData.GroupEventStat\022E\n\030youtube_"
      "group_event_stat\030\022 \001(\0132#.cosmo.pb.Source"
      "Data.GroupEventStat\022J\n\035youtube_group_eve"
      "nt_stat_week\030\023 \001(\0132#.cosmo.pb.SourceData"
      ".GroupEventStat\022D\n\023taped_location_stat\030\025"
      " \001(\0132\'.cosmo.pb.SourceData.SourceLocatio"
      "nStat\022D\n\023homer_location_stat\030\026 \001(\0132\'.cos"
      "mo.pb.SourceData.SourceLocationStat\022F\n\027w"
      "eb_top_similar_sources\030\027 \001(\0132%.cosmo.pb."
      "SourceData.SourceSimilarity\022D\n\025ok_top_si"
      "milar_groups\030\030 \001(\0132%.cosmo.pb.SourceData"
      ".SourceSimilarity\022E\n\024hourly_location_sta"
      "t\030\031 \001(\0132\'.cosmo.pb.SourceData.SourceLoca"
      "tionStat\022D\n\023daily_location_stat\030\032 \001(\0132\'."
      "cosmo.pb.SourceData.SourceLocationStat\022E"
      "\n\024weekly_location_stat\030\033 \001(\0132\'.cosmo.pb."
      "SourceData.SourceLocationStat\022F\n\025monthly"
      "_location_stat\030\034 \001(\0132\'.cosmo.pb.SourceDa"
      "ta.SourceLocationStat\022H\n\025source_new_popu"
      "larity\030\035 \001(\0132).cosmo.pb.SourceData.Sourc"
      "ePopularityStat\022C\n\026vk_group_event_stat_v"
      "2\030\036 \001(\0132#.cosmo.pb.SourceData.GroupEvent"
      "Stat\022H\n\033vk_group_event_stat_week_v2\030\037 \001("
      "\0132#.cosmo.pb.SourceData.GroupEventStat\022H"
      "\n\033youtube_group_event_stat_v2\030  \001(\0132#.co"
      "smo.pb.SourceData.GroupEventStat\022M\n yout"
      "ube_group_event_stat_week_v2\030! \001(\0132#.cos"
      "mo.pb.SourceData.GroupEventStat\022C\n\022fast_"
      "location_stat\030\" \001(\0132\'.cosmo.pb.SourceDat"
      "a.SourceLocationStat\0227\n\017source_stat_geo\030"
      "# \001(\0132\036.cosmo.pb.SourceData.SourceGeo\022:\n"
      "\016content_themes\030$ \001(\0132\".cosmo.pb.SourceD"
      "ata.ContentThemes\022J\n\027lenta_admin_source_"
      "info\030% \001(\0132).cosmo.pb.SourceData.LentaAd"
      "minSourceInfo\032\032\n\014OriginalInfo\022\n\n\002id\030\001 \001("
      "\t\032\033\n\006OkInfo\022\021\n\tsource_id\030\001 \002(\003\032\032\n\010NewsDa"
      "ta\022\016\n\006rubric\030\001 \001(\005\032\360\001\n\nSourceInfo\0228\n\004typ"
      "e\030\001 \002(\0162*.cosmo.pb.SourceData.SourceInfo"
      ".SourceType\022\023\n\013is_censored\030\002 \001(\010\022\020\n\010cate"
      "gory\030\003 \003(\005\022\021\n\ttape_show\030\004 \001(\010\022\026\n\016tape_wh"
      "itelist\030\005 \001(\010\022\026\n\016tape_blacklist\030\006 \001(\010\">\n"
      "\nSourceType\022\006\n\002OK\020\000\022\n\n\006ADVERT\020\001\022\007\n\003WEB\020\002"
      "\022\010\n\004NEWS\020\003\022\t\n\005LENTA\020\004\032h\n\024LentaAdminSourc"
      "eInfo\022\024\n\014use_in_lenta\030\001 \001(\010\022\023\n\013use_in_ma"
      "in\030\002 \001(\010\022\017\n\007regions\030\003 \003(\r\022\024\n\014use_fulltex"
      "t\030\004 \001(\010\032e\n\tGroupStat\022\r\n\005sigma\030\001 \001(\002\022\014\n\004m"
      "ean\030\002 \001(\002\022\r\n\005likes\030\003 \001(\002\022\022\n\nnorm_likes\030\004"
      " \001(\002\022\030\n\020norm_likes_kafka\030\005 \001(\002\032`\n\006AlsFea"
      "\022\013\n\003als\030\001 \003(\002\022\025\n\rvector_length\030\002 \001(\002\0222\n\n"
      "als_c_stat\030\003 \001(\0132\036.cosmo.pb.SourceData.G"
      "roupStat\032`\n\006LdaFea\022\013\n\003lda\030\001 \003(\002\022\025\n\rvecto"
      "r_length\030\002 \001(\002\0222\n\nals_c_stat\030\003 \001(\0132\036.cos"
      "mo.pb.SourceData.GroupStat\032\256\003\n\020GroupPeri"
      "odStats\022\026\n\016all_likes_mean\030\001 \001(\001\022\032\n\022all_l"
      "ikes_variance\030\002 \001(\001\022\031\n\021period_likes_mean"
      "\030\003 \001(\001\022\035\n\025period_likes_variance\030\004 \001(\001\022\032\n"
      "\022period_clicks_mean\030\005 \001(\001\022\036\n\026period_clic"
      "ks_variance\030\006 \001(\001\022\034\n\024period_reshares_mea"
      "n\030\007 \001(\001\022 \n\030period_reshares_variance\030\010 \001("
      "\001\022\034\n\024period_comments_mean\030\t \001(\001\022 \n\030perio"
      "d_comments_variance\030\n \001(\001\022\021\n\tall_likes\030\013"
      " \001(\003\022\024\n\014period_likes\030\014 \001(\003\022\025\n\rperiod_cli"
      "cks\030\r \001(\003\022\027\n\017period_reshares\030\016 \001(\003\022\027\n\017pe"
      "riod_comments\030\017 \001(\003\032\224\004\n\024SourcePopularity"
      "Stat\022F\n\004stat\030\001 \002(\01328.cosmo.pb.SourceData"
      ".SourcePopularityStat.PopularityStat\022I\n\010"
      "geo_stat\030\002 \003(\01327.cosmo.pb.SourceData.Sou"
      "rcePopularityStat.GeoPopularity\022K\n\tmale_"
      "stat\030\003 \003(\01328.cosmo.pb.SourceData.SourceP"
      "opularityStat.PopularityStat\022M\n\013female_s"
      "tat\030\004 \003(\01328.cosmo.pb.SourceData.SourcePo"
      "pularityStat.PopularityStat\022\017\n\007version\030\005"
      " \002(\r\032V\n\016PopularityStat\022\014\n\004hits\030\001 \001(\r\022\021\n\t"
      "hits_mean\030\002 \001(\002\022\025\n\rhits_variance\030\003 \001(\002\022\014"
      "\n\004urls\030\004 \001(\r\032d\n\rGeoPopularity\022\013\n\003geo\030\001 \002"
      "(\r\022F\n\004stat\030\002 \002(\01328.cosmo.pb.SourceData.S"
      "ourcePopularityStat.PopularityStat\032\206\004\n\017S"
      "ourceEventStat\022<\n\004stat\030\001 \002(\0132..cosmo.pb."
      "SourceData.SourceEventStat.EventStat\022C\n\010"
      "geo_stat\030\002 \003(\01321.cosmo.pb.SourceData.Sou"
      "rceEventStat.GeoEventStat\022J\n\014soc_dem_sta"
      "t\030\003 \003(\01324.cosmo.pb.SourceData.SourceEven"
      "tStat.SocDemEventStat\032e\n\tEventStat\022\024\n\014ev"
      "ents_count\030\001 \001(\r\022\023\n\013events_mean\030\002 \001(\002\022\024\n"
      "\014events_sigma\030\003 \001(\002\022\027\n\017documents_count\030\004"
      " \001(\r\032Y\n\014GeoEventStat\022\013\n\003geo\030\001 \002(\r\022<\n\004sta"
      "t\030\002 \002(\0132..cosmo.pb.SourceData.SourceEven"
      "tStat.EventStat\032b\n\017SocDemEventStat\022\021\n\tso"
      "cdem_id\030\001 \002(\r\022<\n\004stat\030\002 \002(\0132..cosmo.pb.S"
      "ourceData.SourceEventStat.EventStat\032\220\002\n\016"
      "GroupEventStat\022\017\n\007version\030\001 \002(\r\0228\n\nlikes"
      "_stat\030\002 \001(\0132$.cosmo.pb.SourceData.Source"
      "EventStat\0229\n\013clicks_stat\030\003 \001(\0132$.cosmo.p"
      "b.SourceData.SourceEventStat\022;\n\rreshares"
      "_stat\030\004 \001(\0132$.cosmo.pb.SourceData.Source"
      "EventStat\022;\n\rcomments_stat\030\005 \001(\0132$.cosmo"
      ".pb.SourceData.SourceEventStat\032\340\004\n\022Sourc"
      "eLocationStat\022\017\n\007version\030\001 \002(\r\022N\n\020stat_b"
      "y_location\030\002 \003(\01324.cosmo.pb.SourceData.S"
      "ourceLocationStat.LocationStat\022B\n\014summar"
      "y_stat\030\003 \001(\0132,.cosmo.pb.SourceData.Sourc"
      "eLocationStat.Stat\032\257\002\n\004Stat\0228\n\nshows_sta"
      "t\030\001 \001(\0132$.cosmo.pb.SourceData.SourceEven"
      "tStat\0229\n\013clicks_stat\030\002 \001(\0132$.cosmo.pb.So"
      "urceData.SourceEventStat\0228\n\nlikes_stat\030\003"
      " \001(\0132$.cosmo.pb.SourceData.SourceEventSt"
      "at\022;\n\rdislikes_stat\030\004 \001(\0132$.cosmo.pb.Sou"
      "rceData.SourceEventStat\022;\n\rreshares_stat"
      "\030\005 \001(\0132$.cosmo.pb.SourceData.SourceEvent"
      "Stat\032s\n\014LocationStat\022\020\n\010location\030\001 \002(\t\022:"
      "\n\004stat\030\002 \001(\0132,.cosmo.pb.SourceData.Sourc"
      "eLocationStat.Stat\022\025\n\rlast_event_ts\030\003 \001("
      "\004\032O\n\020SourceSimilarity\022\017\n\007version\030\001 \002(\r\022\016"
      "\n\006source\030\002 \003(\003\022\032\n\022jaccard_similarity\030\003 \003"
      "(\002\032C\n\tSourceGeo\022\017\n\007version\030\001 \002(\r\022\022\n\ncoun"
      "try_id\030\002 \001(\r\022\021\n\tregion_id\030\003 \001(\r\032L\n\rConte"
      "ntThemes\022\017\n\007version\030\001 \002(\r\022\025\n\rthemes_vect"
      "or\030\002 \003(\002\022\023\n\013bad_content\030\003 \001(\010\"\2157\n\014Docume"
      "ntData\022\021\n\tsource_id\030\001 \001(\003\022\016\n\006doc_id\030\002 \002("
      "\003\022.\n\007ok_info\030\007 \001(\0132\035.cosmo.pb.DocumentDa"
      "ta.OkInfo\0222\n\tnews_data\030\010 \001(\0132\037.cosmo.pb."
      "DocumentData.NewsData\022-\n\006censor\030\n \001(\0132\035."
      "cosmo.pb.DocumentData.Censor\0224\n\nuser_sta"
      "ts\030\013 \001(\0132 .cosmo.pb.DocumentData.UserSta"
      "ts\022-\n\006trends\030\014 \001(\0132\035.cosmo.pb.DocumentDa"
      "ta.Trends\022:\n\roriginal_info\030\r \001(\0132#.cosmo"
      ".pb.DocumentData.OriginalInfo\022/\n\007fetcher"
      "\030\016 \001(\0132\036.cosmo.pb.DocumentData.Fetcher\022@"
      "\n\020mediametrics_fea\030\017 \001(\0132&.cosmo.pb.Docu"
      "mentData.MediametricsFea\022C\n\022topic_period"
      "_stats\030\020 \001(\0132\'.cosmo.pb.DocumentData.Top"
      "icPeriodStats\022\?\n\020app_filter_stats\030\021 \001(\0132"
      "%.cosmo.pb.DocumentData.AppFilterStats\022E"
      "\n\025week_mediametrics_fea\030\022 \001(\0132&.cosmo.pb"
      ".DocumentData.MediametricsFea\022B\n\023ok_topi"
      "c_event_stat\030\024 \001(\0132%.cosmo.pb.DocumentDa"
      "ta.TopicEventStat\022F\n\027vk_topic_event_stat"
      "_day\030\025 \001(\0132%.cosmo.pb.DocumentData.Topic"
      "EventStat\022G\n\030vk_topic_event_stat_week\030\026 "
      "\001(\0132%.cosmo.pb.DocumentData.TopicEventSt"
      "at\022K\n\034youtube_topic_event_stat_day\030\027 \001(\013"
      "2%.cosmo.pb.DocumentData.TopicEventStat\022"
      "L\n\035youtube_topic_event_stat_week\030\030 \001(\0132%"
      ".cosmo.pb.DocumentData.TopicEventStat\022H\n"
      "\023taped_location_stat\030\031 \001(\0132+.cosmo.pb.Do"
      "cumentData.DocumentLocationStat\022H\n\023homer"
      "_location_stat\030\032 \001(\0132+.cosmo.pb.Document"
      "Data.DocumentLocationStat\022I\n\024hourly_loca"
      "tion_stat\030\033 \001(\0132+.cosmo.pb.DocumentData."
      "DocumentLocationStat\022H\n\023daily_location_s"
      "tat\030\034 \001(\0132+.cosmo.pb.DocumentData.Docume"
      "ntLocationStat\022I\n\024weekly_location_stat\030\035"
      " \001(\0132+.cosmo.pb.DocumentData.DocumentLoc"
      "ationStat\022J\n\025monthly_location_stat\030\036 \001(\013"
      "2+.cosmo.pb.DocumentData.DocumentLocatio"
      "nStat\0226\n\013fetcher_geo\030\037 \001(\0132!.cosmo.pb.Do"
      "cumentData.FetcherGeo\022L\n\034hourly_fast_med"
      "iametrics_fea\030  \001(\0132&.cosmo.pb.DocumentD"
      "ata.MediametricsFea\022K\n\033daily_fast_mediam"
      "etrics_fea\030! \001(\0132&.cosmo.pb.DocumentData"
      ".MediametricsFea\022:\n\rfetcher_image\030\" \001(\0132"
      "#.cosmo.pb.DocumentData.FetcherImage\0228\n\014"
      "content_data\030# \001(\0132\".cosmo.pb.DocumentDa"
      "ta.ContentData\022I\n\032vk_topic_event_stat_da"
      "y_v2\030$ \001(\0132%.cosmo.pb.DocumentData.Topic"
      "EventStat\022J\n\033vk_topic_event_stat_week_v2"
      "\030% \001(\0132%.cosmo.pb.DocumentData.TopicEven"
      "tStat\022N\n\037youtube_topic_event_stat_day_v2"
      "\030& \001(\0132%.cosmo.pb.DocumentData.TopicEven"
      "tStat\022O\n youtube_topic_event_stat_week_v"
      "2\030\' \001(\0132%.cosmo.pb.DocumentData.TopicEve"
      "ntStat\022D\n\021document_i2i_stat\030( \001(\0132).cosm"
      "o.pb.DocumentData.DocumentMutualStat\022C\n\020"
      "document_mv_stat\030* \001(\0132).cosmo.pb.Docume"
      "ntData.DocumentMutualStat\022;\n\016news_tags_d"
      "ata\030+ \001(\0132#.cosmo.pb.DocumentData.NewsTa"
      "gsData\022=\n\017news_story_data\030, \001(\0132$.cosmo."
      "pb.DocumentData.NewsStoryData\022L\n\027native_"
      "target_is_active\030- \001(\0132+.cosmo.pb.Docume"
      "ntData.NativeTargetIsActive\022G\n\022fast_loca"
      "tion_stat\030. \001(\0132+.cosmo.pb.DocumentData."
      "DocumentLocationStat\022\?\n\020content_porn_fea"
      "\0300 \001(\0132%.cosmo.pb.DocumentData.ContentPo"
      "rnFea\022<\n\016content_themes\0301 \001(\0132$.cosmo.pb"
      ".DocumentData.ContentThemes\022\?\n\020story_clu"
      "ster_id\0302 \001(\0132%.cosmo.pb.DocumentData.St"
      "oryClusterId\022K\n\026document_keywords_info\0303"
      " \001(\0132+.cosmo.pb.DocumentData.DocumentKey"
      "wordsInfo\022;\n\016image_porn_fea\0304 \001(\0132#.cosm"
      "o.pb.DocumentData.ImagePornFea\022A\n\020fetche"
      "rFirstmeet\0305 \001(\0132\'.cosmo.pb.DocumentData"
      ".FetcherFirstmeet\0226\n\007pubdate\0306 \001(\0132%.cos"
      "mo.pb.DocumentData.FetcherPubdate\022<\n\016fre"
      "shness_data\0307 \001(\0132$.cosmo.pb.DocumentDat"
      "a.FreshnessData\022.\n\005state\0308 \001(\0132\037.cosmo.p"
      "b.DocumentData.DocState\0228\n\014risks_fields\030"
      "9 \001(\0132\".cosmo.pb.DocumentData.RisksField"
      "s\022\026\n\016doc_region_ids\030: \003(\005\032\033\n\014OriginalInf"
      "o\022\013\n\003url\030\002 \001(\t\032+\n\006OkInfo\022\021\n\tsource_id\030\001 "
      "\002(\003\022\016\n\006doc_id\030\002 \002(\003\032;\n\013ContentData\022\026\n\016co"
      "ntent_vector\030\001 \003(\002\022\024\n\014algo_version\030\002 \002(\004"
      "\032-\n\rFreshnessData\022\034\n\024expiration_timestam"
      "p\030\001 \002(\003\032U\n\010NewsData\022\021\n\tclusterId\030\001 \002(\005\022\020"
      "\n\010issue_ts\030\002 \002(\005\022\021\n\tregion_id\030\003 \001(\005\022\021\n\tp"
      "arent_id\030\004 \001(\005\032\034\n\006Censor\022\022\n\nis_allowed\030\001"
      " \001(\010\032;\n\tUserStats\022\r\n\005likes\030\001 \001(\r\022\020\n\010disl"
      "ikes\030\002 \001(\r\022\r\n\005views\030\003 \001(\r\0327\n\006Trends\022\017\n\007v"
      "ersion\030\001 \001(\r\022\r\n\005likes\030\002 \001(\005\022\r\n\005views\030\003 \001"
      "(\005\032$\n\007GeoHits\022\013\n\003geo\030\001 \002(\r\022\014\n\004hits\030\002 \002(\005"
      "\032\212\001\n\017MediametricsFea\022\014\n\004hits\030\001 \002(\005\022\017\n\007ve"
      "rsion\030\002 \002(\r\0220\n\010geo_hits\030\003 \003(\0132\036.cosmo.pb"
      ".DocumentData.GeoHits\022\021\n\tmale_hits\030\004 \003(\r"
      "\022\023\n\013female_hits\030\005 \003(\r\032\345\001\n\007Fetcher\022\027\n\017fet"
      "ch_timestamp\030\001 \001(\003\022\021\n\tregion_id\030\002 \001(\r\022\021\n"
      "\thas_title\030\003 \001(\010\022\017\n\007has_img\030\004 \001(\010\022\027\n\017has"
      "_description\030\005 \001(\010\022\034\n\024last_fetch_timesta"
      "mp\030\006 \001(\003\022\021\n\ttitle_len\030\007 \001(\005\022\027\n\017descripti"
      "on_len\030\010 \001(\005\022\024\n\014has_fulltext\030\t \001(\010\022\021\n\tha"
      "s_video\030\n \001(\010\032%\n\020FetcherFirstmeet\022\021\n\tfir"
      "stmeet\030\001 \001(\003\032!\n\016FetcherPubdate\022\017\n\007pubdat"
      "e\030\001 \001(\003\032\037\n\nFetcherGeo\022\021\n\tregion_id\030\001 \002(\r"
      "\032>\n\014FetcherImage\022\r\n\005width\030\001 \002(\005\022\016\n\006heigh"
      "t\030\002 \002(\005\022\017\n\007simhash\030\003 \002(\004\032I\n\010DocState\022\016\n\006"
      "banned\030\001 \002(\010\022\020\n\010shadowed\030\002 \002(\010\022\033\n\023disabl"
      "ed_in_channel\030\003 \002(\010\032\204\001\n\020TopicPeriodStats"
      "\022\021\n\tall_likes\030\001 \001(\003\022\024\n\014period_likes\030\002 \001("
      "\003\022\025\n\rperiod_clicks\030\003 \001(\003\022\027\n\017period_resha"
      "res\030\004 \001(\003\022\027\n\017period_comments\030\005 \001(\003\032q\n\016Ap"
      "pFilterStats\022\017\n\007version\030\001 \002(\r\022\r\n\005shows\030\002"
      " \002(\005\022\016\n\006clicks\030\003 \002(\005\022\r\n\005likes\030\004 \001(\005\022\016\n\006s"
      "hares\030\005 \001(\005\022\020\n\010dislikes\030\006 \001(\005\032\261\002\n\021Docume"
      "ntEventStat\022\024\n\014events_count\030\001 \002(\r\022G\n\010geo"
      "_stat\030\002 \003(\01325.cosmo.pb.DocumentData.Docu"
      "mentEventStat.GeoEventStat\022N\n\014soc_dem_st"
      "at\030\003 \003(\01328.cosmo.pb.DocumentData.Documen"
      "tEventStat.SocDemEventStat\0321\n\014GeoEventSt"
      "at\022\013\n\003geo\030\001 \002(\r\022\024\n\014events_count\030\002 \002(\r\032:\n"
      "\017SocDemEventStat\022\021\n\tsocdem_id\030\001 \002(\r\022\024\n\014e"
      "vents_count\030\002 \002(\r\032\240\002\n\016TopicEventStat\022\017\n\007"
      "version\030\001 \002(\r\022<\n\nlikes_stat\030\002 \001(\0132(.cosm"
      "o.pb.DocumentData.DocumentEventStat\022=\n\013c"
      "licks_stat\030\003 \001(\0132(.cosmo.pb.DocumentData"
      ".DocumentEventStat\022\?\n\rreshares_stat\030\004 \001("
      "\0132(.cosmo.pb.DocumentData.DocumentEventS"
      "tat\022\?\n\rcomments_stat\030\005 \001(\0132(.cosmo.pb.Do"
      "cumentData.DocumentEventStat\032\205\006\n\024Documen"
      "tLocationStat\022\017\n\007version\030\001 \002(\r\022R\n\020stat_b"
      "y_location\030\002 \003(\01328.cosmo.pb.DocumentData"
      ".DocumentLocationStat.LocationStat\022F\n\014su"
      "mmary_stat\030\003 \001(\01320.cosmo.pb.DocumentData"
      ".DocumentLocationStat.Stat\032\306\003\n\004Stat\022<\n\ns"
      "hows_stat\030\001 \001(\0132(.cosmo.pb.DocumentData."
      "DocumentEventStat\022=\n\013clicks_stat\030\002 \001(\0132("
      ".cosmo.pb.DocumentData.DocumentEventStat"
      "\022<\n\nlikes_stat\030\003 \001(\0132(.cosmo.pb.Document"
      "Data.DocumentEventStat\022\?\n\rdislikes_stat\030"
      "\004 \001(\0132(.cosmo.pb.DocumentData.DocumentEv"
      "entStat\022\?\n\rreshares_stat\030\005 \001(\0132(.cosmo.p"
      "b.DocumentData.DocumentEventStat\022>\n\014unli"
      "kes_stat\030\006 \001(\0132(.cosmo.pb.DocumentData.D"
      "ocumentEventStat\022A\n\017undislikes_stat\030\007 \001("
      "\0132(.cosmo.pb.DocumentData.DocumentEventS"
      "tat\032w\n\014LocationStat\022\020\n\010location\030\001 \002(\t\022>\n"
      "\004stat\030\002 \001(\01320.cosmo.pb.DocumentData.Docu"
      "mentLocationStat.Stat\022\025\n\rlast_event_ts\030\003"
      " \001(\004\032\236\003\n\022DocumentMutualStat\022\017\n\007version\030\001"
      " \002(\r\022G\n\017doc_mutual_stat\030\002 \003(\0132..cosmo.pb"
      ".DocumentData.DocumentMutualStat.Stat\022S\n"
      "\023loc_doc_mutual_stat\030\003 \003(\01326.cosmo.pb.Do"
      "cumentData.DocumentMutualStat.LocationSt"
      "at\032n\n\004Stat\022\016\n\006doc_id\030\001 \002(\003\022\016\n\006clicks\030\002 \001"
      "(\002\022\r\n\005views\030\003 \001(\002\022\016\n\006visits\030\004 \001(\002\022\024\n\014tot"
      "al_visits\030\005 \001(\002\022\021\n\tsource_id\030\006 \003(\003\032i\n\014Lo"
      "cationStat\022\020\n\010location\030\001 \002(\t\022G\n\017doc_mutu"
      "al_stat\030\002 \003(\0132..cosmo.pb.DocumentData.Do"
      "cumentMutualStat.Stat\032.\n\rContentVector\022\r"
      "\n\005label\030\001 \002(\t\022\016\n\006vector\030\002 \003(\002\032P\n\017TitleCo"
      "ntentFea\022=\n\017content_vectors\030\001 \003(\0132$.cosm"
      "o.pb.DocumentData.ContentVector\0325\n\016Conte"
      "ntPornFea\022\016\n\006weight\030\001 \001(\002\022\023\n\013bad_content"
      "\030\002 \001(\010\032\036\n\014ImagePornFea\022\016\n\006weight\030\001 \001(\002\032;"
      "\n\rContentThemes\022\025\n\rthemes_vector\030\001 \003(\002\022\023"
      "\n\013bad_content\030\002 \001(\010\0325\n\016StoryClusterId\022\017\n"
      "\007version\030\001 \002(\r\022\022\n\ncluster_id\030\002 \001(\r\032\037\n\014Ne"
      "wsTagsData\022\017\n\007tag_ids\030\001 \003(\005\032!\n\rNewsStory"
      "Data\022\020\n\010story_id\030\001 \002(\005\032:\n\024NativeTargetIs"
      "Active\022\017\n\007version\030\001 \002(\r\022\021\n\tis_active\030\002 \002"
      "(\010\032\313\001\n\024DocumentKeywordsInfo\022\017\n\007version\030\001"
      " \002(\r\022\024\n\014keyword_hash\030\002 \003(\003\022M\n\014keyword_ty"
      "pe\030\003 \003(\01627.cosmo.pb.DocumentData.Documen"
      "tKeywordsInfo.KeywordType\022\022\n\ncluster_id\030"
      "\004 \001(\r\")\n\013KeywordType\022\t\n\005TITLE\020\000\022\017\n\013DESCR"
      "IPTION\020\001\032K\n\013RisksFields\022\021\n\tero_score\030\001 \001"
      "(\002\022\023\n\013porno_score\030\002 \001(\002\022\024\n\014safe_content\030"
      "\003 \001(\002\"7\n\022DocumentSourceLink\022\021\n\tsource_id"
      "\030\001 \002(\003\022\016\n\006doc_id\030\002 \002(\003\"\372\002\n\014StorageEvent\022"
      ";\n\004type\030\001 \001(\0162\033.cosmo.pb.StorageEvent.Ty"
      "pe:\020CREATE_OR_UPDATE\022\022\n\nevent_time\030\002 \002(\005"
      "\022)\n\004data\030\003 \002(\0132\033.cosmo.pb.StorageEvent.D"
      "ata\032\303\001\n\004Data\022%\n\tuser_data\030\001 \001(\0132\022.cosmo."
      "pb.UserData\022)\n\013source_data\030\002 \001(\0132\024.cosmo"
      ".pb.SourceData\022-\n\rdocument_data\030\003 \001(\0132\026."
      "cosmo.pb.DocumentData\022:\n\024document_source"
      "_link\030\004 \001(\0132\034.cosmo.pb.DocumentSourceLin"
      "k\"(\n\004Type\022\024\n\020CREATE_OR_UPDATE\020\000\022\n\n\006DELET"
      "E\020\002B\016B\tCosmoData\370\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 23219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cosmo.proto", &protobuf_RegisterTypes);
  ::cosmo::pb::protobuf_cosmo_5fuser_5fevents_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cosmo_2eproto

const ::google::protobuf::EnumDescriptor* UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_enum_descriptors[0];
}
bool UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus UserData_SubscriptionInfo_SubscriptionItem::OFF;
const UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus UserData_SubscriptionInfo_SubscriptionItem::ON;
const UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus UserData_SubscriptionInfo_SubscriptionItem::SubscriptionStatus_MIN;
const UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus UserData_SubscriptionInfo_SubscriptionItem::SubscriptionStatus_MAX;
const int UserData_SubscriptionInfo_SubscriptionItem::SubscriptionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SourceData_SourceInfo_SourceType_descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_enum_descriptors[1];
}
bool SourceData_SourceInfo_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SourceData_SourceInfo_SourceType SourceData_SourceInfo::OK;
const SourceData_SourceInfo_SourceType SourceData_SourceInfo::ADVERT;
const SourceData_SourceInfo_SourceType SourceData_SourceInfo::WEB;
const SourceData_SourceInfo_SourceType SourceData_SourceInfo::NEWS;
const SourceData_SourceInfo_SourceType SourceData_SourceInfo::LENTA;
const SourceData_SourceInfo_SourceType SourceData_SourceInfo::SourceType_MIN;
const SourceData_SourceInfo_SourceType SourceData_SourceInfo::SourceType_MAX;
const int SourceData_SourceInfo::SourceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DocumentData_DocumentKeywordsInfo_KeywordType_descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_enum_descriptors[2];
}
bool DocumentData_DocumentKeywordsInfo_KeywordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DocumentData_DocumentKeywordsInfo_KeywordType DocumentData_DocumentKeywordsInfo::TITLE;
const DocumentData_DocumentKeywordsInfo_KeywordType DocumentData_DocumentKeywordsInfo::DESCRIPTION;
const DocumentData_DocumentKeywordsInfo_KeywordType DocumentData_DocumentKeywordsInfo::KeywordType_MIN;
const DocumentData_DocumentKeywordsInfo_KeywordType DocumentData_DocumentKeywordsInfo::KeywordType_MAX;
const int DocumentData_DocumentKeywordsInfo::KeywordType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StorageEvent_Type_descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_enum_descriptors[3];
}
bool StorageEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StorageEvent_Type StorageEvent::CREATE_OR_UPDATE;
const StorageEvent_Type StorageEvent::DELETE;
const StorageEvent_Type StorageEvent::Type_MIN;
const StorageEvent_Type StorageEvent::Type_MAX;
const int StorageEvent::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_OriginalInfo::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_OriginalInfo::UserData_OriginalInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.OriginalInfo)
}
UserData_OriginalInfo::UserData_OriginalInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.OriginalInfo)
}
UserData_OriginalInfo::UserData_OriginalInfo(const UserData_OriginalInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.OriginalInfo)
}

void UserData_OriginalInfo::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserData_OriginalInfo::~UserData_OriginalInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.OriginalInfo)
  SharedDtor();
}

void UserData_OriginalInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void UserData_OriginalInfo::ArenaDtor(void* object) {
  UserData_OriginalInfo* _this = reinterpret_cast< UserData_OriginalInfo* >(object);
  (void)_this;
}
void UserData_OriginalInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_OriginalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_OriginalInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_OriginalInfo& UserData_OriginalInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_OriginalInfo* UserData_OriginalInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_OriginalInfo>(arena);
}

void UserData_OriginalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_OriginalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.OriginalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.OriginalInfo.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.OriginalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.OriginalInfo)
  return false;
#undef DO_
}

void UserData_OriginalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.OriginalInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.OriginalInfo)
}

::google::protobuf::uint8* UserData_OriginalInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.OriginalInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.OriginalInfo)
  return target;
}

size_t UserData_OriginalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.OriginalInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_OriginalInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.OriginalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_OriginalInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_OriginalInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.OriginalInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.OriginalInfo)
    MergeFrom(*source);
  }
}

void UserData_OriginalInfo::MergeFrom(const UserData_OriginalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.OriginalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void UserData_OriginalInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.OriginalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_OriginalInfo::CopyFrom(const UserData_OriginalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.OriginalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_OriginalInfo::IsInitialized() const {
  return true;
}

void UserData_OriginalInfo::Swap(UserData_OriginalInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_OriginalInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_OriginalInfo::UnsafeArenaSwap(UserData_OriginalInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_OriginalInfo::InternalSwap(UserData_OriginalInfo* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_OriginalInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_OriginalInfo

// optional string id = 1;
bool UserData_OriginalInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_OriginalInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_OriginalInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_OriginalInfo::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_id();
}
const ::std::string& UserData_OriginalInfo::id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.OriginalInfo.id)
  return id_.Get();
}
void UserData_OriginalInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.OriginalInfo.id)
}
#if LANG_CXX11
void UserData_OriginalInfo::set_id(::std::string&& value) {
  set_has_id();
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.OriginalInfo.id)
}
#endif
void UserData_OriginalInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.OriginalInfo.id)
}
void UserData_OriginalInfo::set_id(const char* value,
    size_t size) {
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.OriginalInfo.id)
}
::std::string* UserData_OriginalInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.OriginalInfo.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_OriginalInfo::release_id() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.OriginalInfo.id)
  clear_has_id();
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_OriginalInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.OriginalInfo.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_id();
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UserData_OriginalInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.OriginalInfo.id)
}
void UserData_OriginalInfo::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.OriginalInfo.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_OkInfo::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_OkInfo::UserData_OkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.OkInfo)
}
UserData_OkInfo::UserData_OkInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.OkInfo)
}
UserData_OkInfo::UserData_OkInfo(const UserData_OkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.OkInfo)
}

void UserData_OkInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
}

UserData_OkInfo::~UserData_OkInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.OkInfo)
  SharedDtor();
}

void UserData_OkInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_OkInfo::ArenaDtor(void* object) {
  UserData_OkInfo* _this = reinterpret_cast< UserData_OkInfo* >(object);
  (void)_this;
}
void UserData_OkInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_OkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_OkInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_OkInfo& UserData_OkInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_OkInfo* UserData_OkInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_OkInfo>(arena);
}

void UserData_OkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_OkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.OkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.OkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.OkInfo)
  return false;
#undef DO_
}

void UserData_OkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.OkInfo)
}

::google::protobuf::uint8* UserData_OkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.OkInfo)
  return target;
}

size_t UserData_OkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.OkInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_OkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.OkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_OkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_OkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.OkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.OkInfo)
    MergeFrom(*source);
  }
}

void UserData_OkInfo::MergeFrom(const UserData_OkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.OkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_id()) {
    set_user_id(from.user_id());
  }
}

void UserData_OkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.OkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_OkInfo::CopyFrom(const UserData_OkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.OkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_OkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_OkInfo::Swap(UserData_OkInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_OkInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_OkInfo::UnsafeArenaSwap(UserData_OkInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_OkInfo::InternalSwap(UserData_OkInfo* other) {
  using std::swap;
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_OkInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_OkInfo

// required int64 user_id = 1;
bool UserData_OkInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_OkInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_OkInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_OkInfo::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 UserData_OkInfo::user_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.OkInfo.user_id)
  return user_id_;
}
void UserData_OkInfo::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.OkInfo.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SocDemFea::kGenderFieldNumber;
const int UserData_SocDemFea::kAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SocDemFea::UserData_SocDemFea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SocDemFea)
}
UserData_SocDemFea::UserData_SocDemFea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.SocDemFea)
}
UserData_SocDemFea::UserData_SocDemFea(const UserData_SocDemFea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gender_, &from.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SocDemFea)
}

void UserData_SocDemFea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(age_));
}

UserData_SocDemFea::~UserData_SocDemFea() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SocDemFea)
  SharedDtor();
}

void UserData_SocDemFea::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_SocDemFea::ArenaDtor(void* object) {
  UserData_SocDemFea* _this = reinterpret_cast< UserData_SocDemFea* >(object);
  (void)_this;
}
void UserData_SocDemFea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_SocDemFea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SocDemFea::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SocDemFea& UserData_SocDemFea::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SocDemFea* UserData_SocDemFea::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_SocDemFea>(arena);
}

void UserData_SocDemFea::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SocDemFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&gender_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_) -
        reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SocDemFea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SocDemFea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gender = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SocDemFea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SocDemFea)
  return false;
#undef DO_
}

void UserData_SocDemFea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SocDemFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 gender = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gender(), output);
  }

  // optional int32 age = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SocDemFea)
}

::google::protobuf::uint8* UserData_SocDemFea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SocDemFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 gender = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gender(), target);
  }

  // optional int32 age = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SocDemFea)
  return target;
}

size_t UserData_SocDemFea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SocDemFea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 gender = 1 [default = 0];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 age = 2;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SocDemFea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SocDemFea)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SocDemFea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SocDemFea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SocDemFea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SocDemFea)
    MergeFrom(*source);
  }
}

void UserData_SocDemFea::MergeFrom(const UserData_SocDemFea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SocDemFea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      gender_ = from.gender_;
    }
    if (cached_has_bits & 0x00000002u) {
      age_ = from.age_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_SocDemFea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SocDemFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SocDemFea::CopyFrom(const UserData_SocDemFea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SocDemFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SocDemFea::IsInitialized() const {
  return true;
}

void UserData_SocDemFea::Swap(UserData_SocDemFea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_SocDemFea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_SocDemFea::UnsafeArenaSwap(UserData_SocDemFea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_SocDemFea::InternalSwap(UserData_SocDemFea* other) {
  using std::swap;
  swap(gender_, other->gender_);
  swap(age_, other->age_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SocDemFea::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SocDemFea

// optional int32 gender = 1 [default = 0];
bool UserData_SocDemFea::has_gender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SocDemFea::set_has_gender() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SocDemFea::clear_has_gender() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SocDemFea::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
::google::protobuf::int32 UserData_SocDemFea::gender() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SocDemFea.gender)
  return gender_;
}
void UserData_SocDemFea::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SocDemFea.gender)
}

// optional int32 age = 2;
bool UserData_SocDemFea::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_SocDemFea::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_SocDemFea::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_SocDemFea::clear_age() {
  age_ = 0;
  clear_has_age();
}
::google::protobuf::int32 UserData_SocDemFea::age() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SocDemFea.age)
  return age_;
}
void UserData_SocDemFea::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SocDemFea.age)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_DetiRecos::kSlimFieldNumber;
const int UserData_DetiRecos::kWrmfFieldNumber;
const int UserData_DetiRecos::kAlsTunedFieldNumber;
const int UserData_DetiRecos::kAlsLargeFieldNumber;
const int UserData_DetiRecos::kSvdFieldNumber;
const int UserData_DetiRecos::kSvdStupidFieldNumber;
const int UserData_DetiRecos::kAlsByLikerFieldNumber;
const int UserData_DetiRecos::kAlsByHomerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_DetiRecos::UserData_DetiRecos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.DetiRecos)
}
UserData_DetiRecos::UserData_DetiRecos(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  slim_(arena),
  wrmf_(arena),
  als_tuned_(arena),
  als_large_(arena),
  svd_(arena),
  svd_stupid_(arena),
  als_by_liker_(arena),
  als_by_homer_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.DetiRecos)
}
UserData_DetiRecos::UserData_DetiRecos(const UserData_DetiRecos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      slim_(from.slim_),
      wrmf_(from.wrmf_),
      als_tuned_(from.als_tuned_),
      als_large_(from.als_large_),
      svd_(from.svd_),
      svd_stupid_(from.svd_stupid_),
      als_by_liker_(from.als_by_liker_),
      als_by_homer_(from.als_by_homer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.DetiRecos)
}

void UserData_DetiRecos::SharedCtor() {
  _cached_size_ = 0;
}

UserData_DetiRecos::~UserData_DetiRecos() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.DetiRecos)
  SharedDtor();
}

void UserData_DetiRecos::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_DetiRecos::ArenaDtor(void* object) {
  UserData_DetiRecos* _this = reinterpret_cast< UserData_DetiRecos* >(object);
  (void)_this;
}
void UserData_DetiRecos::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_DetiRecos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_DetiRecos::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_DetiRecos& UserData_DetiRecos::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_DetiRecos* UserData_DetiRecos::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_DetiRecos>(arena);
}

void UserData_DetiRecos::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.DetiRecos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slim_.Clear();
  wrmf_.Clear();
  als_tuned_.Clear();
  als_large_.Clear();
  svd_.Clear();
  svd_stupid_.Clear();
  als_by_liker_.Clear();
  als_by_homer_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_DetiRecos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.DetiRecos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 slim = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_slim())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_slim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 wrmf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_wrmf())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_wrmf())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 als_tuned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_als_tuned())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_als_tuned())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 als_large = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32u, input, this->mutable_als_large())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_als_large())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 svd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40u, input, this->mutable_svd())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_svd())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 svd_stupid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48u, input, this->mutable_svd_stupid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_svd_stupid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 als_by_liker = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56u, input, this->mutable_als_by_liker())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_als_by_liker())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 als_by_homer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64u, input, this->mutable_als_by_homer())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_als_by_homer())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.DetiRecos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.DetiRecos)
  return false;
#undef DO_
}

void UserData_DetiRecos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.DetiRecos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 slim = 1;
  for (int i = 0, n = this->slim_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->slim(i), output);
  }

  // repeated int64 wrmf = 2;
  for (int i = 0, n = this->wrmf_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->wrmf(i), output);
  }

  // repeated int64 als_tuned = 3;
  for (int i = 0, n = this->als_tuned_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->als_tuned(i), output);
  }

  // repeated int64 als_large = 4;
  for (int i = 0, n = this->als_large_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->als_large(i), output);
  }

  // repeated int64 svd = 5;
  for (int i = 0, n = this->svd_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->svd(i), output);
  }

  // repeated int64 svd_stupid = 6;
  for (int i = 0, n = this->svd_stupid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->svd_stupid(i), output);
  }

  // repeated int64 als_by_liker = 7;
  for (int i = 0, n = this->als_by_liker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->als_by_liker(i), output);
  }

  // repeated int64 als_by_homer = 8;
  for (int i = 0, n = this->als_by_homer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->als_by_homer(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.DetiRecos)
}

::google::protobuf::uint8* UserData_DetiRecos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.DetiRecos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 slim = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->slim_, target);

  // repeated int64 wrmf = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->wrmf_, target);

  // repeated int64 als_tuned = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(3, this->als_tuned_, target);

  // repeated int64 als_large = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(4, this->als_large_, target);

  // repeated int64 svd = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(5, this->svd_, target);

  // repeated int64 svd_stupid = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(6, this->svd_stupid_, target);

  // repeated int64 als_by_liker = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(7, this->als_by_liker_, target);

  // repeated int64 als_by_homer = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(8, this->als_by_homer_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.DetiRecos)
  return target;
}

size_t UserData_DetiRecos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.DetiRecos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 slim = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->slim_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->slim_size());
    total_size += data_size;
  }

  // repeated int64 wrmf = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->wrmf_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wrmf_size());
    total_size += data_size;
  }

  // repeated int64 als_tuned = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->als_tuned_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_tuned_size());
    total_size += data_size;
  }

  // repeated int64 als_large = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->als_large_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_large_size());
    total_size += data_size;
  }

  // repeated int64 svd = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->svd_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->svd_size());
    total_size += data_size;
  }

  // repeated int64 svd_stupid = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->svd_stupid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->svd_stupid_size());
    total_size += data_size;
  }

  // repeated int64 als_by_liker = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->als_by_liker_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_by_liker_size());
    total_size += data_size;
  }

  // repeated int64 als_by_homer = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->als_by_homer_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_by_homer_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_DetiRecos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.DetiRecos)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_DetiRecos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_DetiRecos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.DetiRecos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.DetiRecos)
    MergeFrom(*source);
  }
}

void UserData_DetiRecos::MergeFrom(const UserData_DetiRecos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.DetiRecos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slim_.MergeFrom(from.slim_);
  wrmf_.MergeFrom(from.wrmf_);
  als_tuned_.MergeFrom(from.als_tuned_);
  als_large_.MergeFrom(from.als_large_);
  svd_.MergeFrom(from.svd_);
  svd_stupid_.MergeFrom(from.svd_stupid_);
  als_by_liker_.MergeFrom(from.als_by_liker_);
  als_by_homer_.MergeFrom(from.als_by_homer_);
}

void UserData_DetiRecos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.DetiRecos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_DetiRecos::CopyFrom(const UserData_DetiRecos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.DetiRecos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_DetiRecos::IsInitialized() const {
  return true;
}

void UserData_DetiRecos::Swap(UserData_DetiRecos* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_DetiRecos* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_DetiRecos::UnsafeArenaSwap(UserData_DetiRecos* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_DetiRecos::InternalSwap(UserData_DetiRecos* other) {
  using std::swap;
  slim_.InternalSwap(&other->slim_);
  wrmf_.InternalSwap(&other->wrmf_);
  als_tuned_.InternalSwap(&other->als_tuned_);
  als_large_.InternalSwap(&other->als_large_);
  svd_.InternalSwap(&other->svd_);
  svd_stupid_.InternalSwap(&other->svd_stupid_);
  als_by_liker_.InternalSwap(&other->als_by_liker_);
  als_by_homer_.InternalSwap(&other->als_by_homer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_DetiRecos::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_DetiRecos

// repeated int64 slim = 1;
int UserData_DetiRecos::slim_size() const {
  return slim_.size();
}
void UserData_DetiRecos::clear_slim() {
  slim_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::slim(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.slim)
  return slim_.Get(index);
}
void UserData_DetiRecos::set_slim(int index, ::google::protobuf::int64 value) {
  slim_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.slim)
}
void UserData_DetiRecos::add_slim(::google::protobuf::int64 value) {
  slim_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.slim)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::slim() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.slim)
  return slim_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_slim() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.slim)
  return &slim_;
}

// repeated int64 wrmf = 2;
int UserData_DetiRecos::wrmf_size() const {
  return wrmf_.size();
}
void UserData_DetiRecos::clear_wrmf() {
  wrmf_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::wrmf(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.wrmf)
  return wrmf_.Get(index);
}
void UserData_DetiRecos::set_wrmf(int index, ::google::protobuf::int64 value) {
  wrmf_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.wrmf)
}
void UserData_DetiRecos::add_wrmf(::google::protobuf::int64 value) {
  wrmf_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.wrmf)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::wrmf() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.wrmf)
  return wrmf_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_wrmf() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.wrmf)
  return &wrmf_;
}

// repeated int64 als_tuned = 3;
int UserData_DetiRecos::als_tuned_size() const {
  return als_tuned_.size();
}
void UserData_DetiRecos::clear_als_tuned() {
  als_tuned_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::als_tuned(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_tuned)
  return als_tuned_.Get(index);
}
void UserData_DetiRecos::set_als_tuned(int index, ::google::protobuf::int64 value) {
  als_tuned_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_tuned)
}
void UserData_DetiRecos::add_als_tuned(::google::protobuf::int64 value) {
  als_tuned_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_tuned)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_tuned() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_tuned)
  return als_tuned_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_tuned() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_tuned)
  return &als_tuned_;
}

// repeated int64 als_large = 4;
int UserData_DetiRecos::als_large_size() const {
  return als_large_.size();
}
void UserData_DetiRecos::clear_als_large() {
  als_large_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::als_large(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_large)
  return als_large_.Get(index);
}
void UserData_DetiRecos::set_als_large(int index, ::google::protobuf::int64 value) {
  als_large_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_large)
}
void UserData_DetiRecos::add_als_large(::google::protobuf::int64 value) {
  als_large_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_large)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_large() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_large)
  return als_large_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_large() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_large)
  return &als_large_;
}

// repeated int64 svd = 5;
int UserData_DetiRecos::svd_size() const {
  return svd_.size();
}
void UserData_DetiRecos::clear_svd() {
  svd_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::svd(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.svd)
  return svd_.Get(index);
}
void UserData_DetiRecos::set_svd(int index, ::google::protobuf::int64 value) {
  svd_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.svd)
}
void UserData_DetiRecos::add_svd(::google::protobuf::int64 value) {
  svd_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.svd)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::svd() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.svd)
  return svd_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_svd() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.svd)
  return &svd_;
}

// repeated int64 svd_stupid = 6;
int UserData_DetiRecos::svd_stupid_size() const {
  return svd_stupid_.size();
}
void UserData_DetiRecos::clear_svd_stupid() {
  svd_stupid_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::svd_stupid(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return svd_stupid_.Get(index);
}
void UserData_DetiRecos::set_svd_stupid(int index, ::google::protobuf::int64 value) {
  svd_stupid_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.svd_stupid)
}
void UserData_DetiRecos::add_svd_stupid(::google::protobuf::int64 value) {
  svd_stupid_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.svd_stupid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::svd_stupid() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return svd_stupid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_svd_stupid() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return &svd_stupid_;
}

// repeated int64 als_by_liker = 7;
int UserData_DetiRecos::als_by_liker_size() const {
  return als_by_liker_.size();
}
void UserData_DetiRecos::clear_als_by_liker() {
  als_by_liker_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::als_by_liker(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return als_by_liker_.Get(index);
}
void UserData_DetiRecos::set_als_by_liker(int index, ::google::protobuf::int64 value) {
  als_by_liker_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_by_liker)
}
void UserData_DetiRecos::add_als_by_liker(::google::protobuf::int64 value) {
  als_by_liker_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_by_liker)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_by_liker() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return als_by_liker_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_by_liker() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return &als_by_liker_;
}

// repeated int64 als_by_homer = 8;
int UserData_DetiRecos::als_by_homer_size() const {
  return als_by_homer_.size();
}
void UserData_DetiRecos::clear_als_by_homer() {
  als_by_homer_.Clear();
}
::google::protobuf::int64 UserData_DetiRecos::als_by_homer(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return als_by_homer_.Get(index);
}
void UserData_DetiRecos::set_als_by_homer(int index, ::google::protobuf::int64 value) {
  als_by_homer_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_by_homer)
}
void UserData_DetiRecos::add_als_by_homer(::google::protobuf::int64 value) {
  als_by_homer_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_by_homer)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_by_homer() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return als_by_homer_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_by_homer() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return &als_by_homer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_AlsFea::kAlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_AlsFea::UserData_AlsFea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.AlsFea)
}
UserData_AlsFea::UserData_AlsFea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  als_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.AlsFea)
}
UserData_AlsFea::UserData_AlsFea(const UserData_AlsFea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      als_(from.als_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.AlsFea)
}

void UserData_AlsFea::SharedCtor() {
  _cached_size_ = 0;
}

UserData_AlsFea::~UserData_AlsFea() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.AlsFea)
  SharedDtor();
}

void UserData_AlsFea::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_AlsFea::ArenaDtor(void* object) {
  UserData_AlsFea* _this = reinterpret_cast< UserData_AlsFea* >(object);
  (void)_this;
}
void UserData_AlsFea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_AlsFea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_AlsFea::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_AlsFea& UserData_AlsFea::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_AlsFea* UserData_AlsFea::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_AlsFea>(arena);
}

void UserData_AlsFea::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.AlsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  als_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_AlsFea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.AlsFea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float als = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_als())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_als())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.AlsFea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.AlsFea)
  return false;
#undef DO_
}

void UserData_AlsFea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.AlsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float als = 1;
  for (int i = 0, n = this->als_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->als(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.AlsFea)
}

::google::protobuf::uint8* UserData_AlsFea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.AlsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float als = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->als_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.AlsFea)
  return target;
}

size_t UserData_AlsFea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.AlsFea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float als = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->als_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_AlsFea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.AlsFea)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_AlsFea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_AlsFea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.AlsFea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.AlsFea)
    MergeFrom(*source);
  }
}

void UserData_AlsFea::MergeFrom(const UserData_AlsFea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.AlsFea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  als_.MergeFrom(from.als_);
}

void UserData_AlsFea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.AlsFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_AlsFea::CopyFrom(const UserData_AlsFea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.AlsFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_AlsFea::IsInitialized() const {
  return true;
}

void UserData_AlsFea::Swap(UserData_AlsFea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_AlsFea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_AlsFea::UnsafeArenaSwap(UserData_AlsFea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_AlsFea::InternalSwap(UserData_AlsFea* other) {
  using std::swap;
  als_.InternalSwap(&other->als_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_AlsFea::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_AlsFea

// repeated float als = 1;
int UserData_AlsFea::als_size() const {
  return als_.size();
}
void UserData_AlsFea::clear_als() {
  als_.Clear();
}
float UserData_AlsFea::als(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.AlsFea.als)
  return als_.Get(index);
}
void UserData_AlsFea::set_als(int index, float value) {
  als_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.AlsFea.als)
}
void UserData_AlsFea::add_als(float value) {
  als_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.AlsFea.als)
}
const ::google::protobuf::RepeatedField< float >&
UserData_AlsFea::als() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.AlsFea.als)
  return als_;
}
::google::protobuf::RepeatedField< float >*
UserData_AlsFea::mutable_als() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.AlsFea.als)
  return &als_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_AlsItemsBiases::kFeaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_AlsItemsBiases::UserData_AlsItemsBiases()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.AlsItemsBiases)
}
UserData_AlsItemsBiases::UserData_AlsItemsBiases(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  fea_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.AlsItemsBiases)
}
UserData_AlsItemsBiases::UserData_AlsItemsBiases(const UserData_AlsItemsBiases& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fea_(from.fea_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.AlsItemsBiases)
}

void UserData_AlsItemsBiases::SharedCtor() {
  _cached_size_ = 0;
}

UserData_AlsItemsBiases::~UserData_AlsItemsBiases() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.AlsItemsBiases)
  SharedDtor();
}

void UserData_AlsItemsBiases::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_AlsItemsBiases::ArenaDtor(void* object) {
  UserData_AlsItemsBiases* _this = reinterpret_cast< UserData_AlsItemsBiases* >(object);
  (void)_this;
}
void UserData_AlsItemsBiases::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_AlsItemsBiases::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_AlsItemsBiases::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_AlsItemsBiases& UserData_AlsItemsBiases::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_AlsItemsBiases* UserData_AlsItemsBiases::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_AlsItemsBiases>(arena);
}

void UserData_AlsItemsBiases::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.AlsItemsBiases)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fea_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_AlsItemsBiases::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.AlsItemsBiases)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float fea = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_fea())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fea())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.AlsItemsBiases)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.AlsItemsBiases)
  return false;
#undef DO_
}

void UserData_AlsItemsBiases::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.AlsItemsBiases)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float fea = 1;
  for (int i = 0, n = this->fea_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->fea(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.AlsItemsBiases)
}

::google::protobuf::uint8* UserData_AlsItemsBiases::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.AlsItemsBiases)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float fea = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->fea_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.AlsItemsBiases)
  return target;
}

size_t UserData_AlsItemsBiases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.AlsItemsBiases)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float fea = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fea_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->fea_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_AlsItemsBiases::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.AlsItemsBiases)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_AlsItemsBiases* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_AlsItemsBiases>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.AlsItemsBiases)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.AlsItemsBiases)
    MergeFrom(*source);
  }
}

void UserData_AlsItemsBiases::MergeFrom(const UserData_AlsItemsBiases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.AlsItemsBiases)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fea_.MergeFrom(from.fea_);
}

void UserData_AlsItemsBiases::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.AlsItemsBiases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_AlsItemsBiases::CopyFrom(const UserData_AlsItemsBiases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.AlsItemsBiases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_AlsItemsBiases::IsInitialized() const {
  return true;
}

void UserData_AlsItemsBiases::Swap(UserData_AlsItemsBiases* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_AlsItemsBiases* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_AlsItemsBiases::UnsafeArenaSwap(UserData_AlsItemsBiases* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_AlsItemsBiases::InternalSwap(UserData_AlsItemsBiases* other) {
  using std::swap;
  fea_.InternalSwap(&other->fea_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_AlsItemsBiases::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_AlsItemsBiases

// repeated float fea = 1;
int UserData_AlsItemsBiases::fea_size() const {
  return fea_.size();
}
void UserData_AlsItemsBiases::clear_fea() {
  fea_.Clear();
}
float UserData_AlsItemsBiases::fea(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.AlsItemsBiases.fea)
  return fea_.Get(index);
}
void UserData_AlsItemsBiases::set_fea(int index, float value) {
  fea_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.AlsItemsBiases.fea)
}
void UserData_AlsItemsBiases::add_fea(float value) {
  fea_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.AlsItemsBiases.fea)
}
const ::google::protobuf::RepeatedField< float >&
UserData_AlsItemsBiases::fea() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.AlsItemsBiases.fea)
  return fea_;
}
::google::protobuf::RepeatedField< float >*
UserData_AlsItemsBiases::mutable_fea() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.AlsItemsBiases.fea)
  return &fea_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_NewsSources::kWeightFieldNumber;
const int UserData_NewsSources::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_NewsSources::UserData_NewsSources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.NewsSources)
}
UserData_NewsSources::UserData_NewsSources(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  weight_(arena),
  id_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.NewsSources)
}
UserData_NewsSources::UserData_NewsSources(const UserData_NewsSources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      weight_(from.weight_),
      id_(from.id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.NewsSources)
}

void UserData_NewsSources::SharedCtor() {
  _cached_size_ = 0;
}

UserData_NewsSources::~UserData_NewsSources() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.NewsSources)
  SharedDtor();
}

void UserData_NewsSources::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_NewsSources::ArenaDtor(void* object) {
  UserData_NewsSources* _this = reinterpret_cast< UserData_NewsSources* >(object);
  (void)_this;
}
void UserData_NewsSources::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_NewsSources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_NewsSources::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_NewsSources& UserData_NewsSources::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_NewsSources* UserData_NewsSources::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_NewsSources>(arena);
}

void UserData_NewsSources::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.NewsSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_.Clear();
  id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_NewsSources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.NewsSources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float weight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_weight())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.NewsSources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.NewsSources)
  return false;
#undef DO_
}

void UserData_NewsSources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.NewsSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float weight = 1;
  for (int i = 0, n = this->weight_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->weight(i), output);
  }

  // repeated int64 id = 2;
  for (int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.NewsSources)
}

::google::protobuf::uint8* UserData_NewsSources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.NewsSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float weight = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->weight_, target);

  // repeated int64 id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.NewsSources)
  return target;
}

size_t UserData_NewsSources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.NewsSources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float weight = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->weight_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->weight_size());
    total_size += data_size;
  }

  // repeated int64 id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_NewsSources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.NewsSources)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_NewsSources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_NewsSources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.NewsSources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.NewsSources)
    MergeFrom(*source);
  }
}

void UserData_NewsSources::MergeFrom(const UserData_NewsSources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.NewsSources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_.MergeFrom(from.weight_);
  id_.MergeFrom(from.id_);
}

void UserData_NewsSources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.NewsSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_NewsSources::CopyFrom(const UserData_NewsSources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.NewsSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_NewsSources::IsInitialized() const {
  return true;
}

void UserData_NewsSources::Swap(UserData_NewsSources* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_NewsSources* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_NewsSources::UnsafeArenaSwap(UserData_NewsSources* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_NewsSources::InternalSwap(UserData_NewsSources* other) {
  using std::swap;
  weight_.InternalSwap(&other->weight_);
  id_.InternalSwap(&other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_NewsSources::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_NewsSources

// repeated float weight = 1;
int UserData_NewsSources::weight_size() const {
  return weight_.size();
}
void UserData_NewsSources::clear_weight() {
  weight_.Clear();
}
float UserData_NewsSources::weight(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.NewsSources.weight)
  return weight_.Get(index);
}
void UserData_NewsSources::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.NewsSources.weight)
}
void UserData_NewsSources::add_weight(float value) {
  weight_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.NewsSources.weight)
}
const ::google::protobuf::RepeatedField< float >&
UserData_NewsSources::weight() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.NewsSources.weight)
  return weight_;
}
::google::protobuf::RepeatedField< float >*
UserData_NewsSources::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.NewsSources.weight)
  return &weight_;
}

// repeated int64 id = 2;
int UserData_NewsSources::id_size() const {
  return id_.size();
}
void UserData_NewsSources::clear_id() {
  id_.Clear();
}
::google::protobuf::int64 UserData_NewsSources::id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.NewsSources.id)
  return id_.Get(index);
}
void UserData_NewsSources::set_id(int index, ::google::protobuf::int64 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.NewsSources.id)
}
void UserData_NewsSources::add_id(::google::protobuf::int64 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.NewsSources.id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_NewsSources::id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.NewsSources.id)
  return id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_NewsSources::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.NewsSources.id)
  return &id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_Stats_SourceStats::kSourceIdFieldNumber;
const int UserData_Stats_SourceStats::kCategoryIdFieldNumber;
const int UserData_Stats_SourceStats::kViewsFieldNumber;
const int UserData_Stats_SourceStats::kOpensFieldNumber;
const int UserData_Stats_SourceStats::kLikesFieldNumber;
const int UserData_Stats_SourceStats::kDislikesFieldNumber;
const int UserData_Stats_SourceStats::kSharesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_Stats_SourceStats::UserData_Stats_SourceStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.Stats.SourceStats)
}
UserData_Stats_SourceStats::UserData_Stats_SourceStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.Stats.SourceStats)
}
UserData_Stats_SourceStats::UserData_Stats_SourceStats(const UserData_Stats_SourceStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shares_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(shares_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.Stats.SourceStats)
}

void UserData_Stats_SourceStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shares_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(shares_));
}

UserData_Stats_SourceStats::~UserData_Stats_SourceStats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.Stats.SourceStats)
  SharedDtor();
}

void UserData_Stats_SourceStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_Stats_SourceStats::ArenaDtor(void* object) {
  UserData_Stats_SourceStats* _this = reinterpret_cast< UserData_Stats_SourceStats* >(object);
  (void)_this;
}
void UserData_Stats_SourceStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_Stats_SourceStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_Stats_SourceStats::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_Stats_SourceStats& UserData_Stats_SourceStats::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_Stats_SourceStats* UserData_Stats_SourceStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_Stats_SourceStats>(arena);
}

void UserData_Stats_SourceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.Stats.SourceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shares_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(shares_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_Stats_SourceStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.Stats.SourceStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 category_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 views = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 opens = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_opens();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opens_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 likes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dislikes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_dislikes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dislikes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shares = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.Stats.SourceStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.Stats.SourceStats)
  return false;
#undef DO_
}

void UserData_Stats_SourceStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.Stats.SourceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // optional int64 category_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->category_id(), output);
  }

  // optional int32 views = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->views(), output);
  }

  // optional int32 opens = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opens(), output);
  }

  // optional int32 likes = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->likes(), output);
  }

  // optional int32 dislikes = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dislikes(), output);
  }

  // optional int32 shares = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->shares(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.Stats.SourceStats)
}

::google::protobuf::uint8* UserData_Stats_SourceStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.Stats.SourceStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // optional int64 category_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->category_id(), target);
  }

  // optional int32 views = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->views(), target);
  }

  // optional int32 opens = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opens(), target);
  }

  // optional int32 likes = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->likes(), target);
  }

  // optional int32 dislikes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dislikes(), target);
  }

  // optional int32 shares = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->shares(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.Stats.SourceStats)
  return target;
}

size_t UserData_Stats_SourceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.Stats.SourceStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 source_id = 1;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }
  if (_has_bits_[0 / 32] & 126u) {
    // optional int64 category_id = 2;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->category_id());
    }

    // optional int32 views = 3;
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->views());
    }

    // optional int32 opens = 4;
    if (has_opens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opens());
    }

    // optional int32 likes = 5;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->likes());
    }

    // optional int32 dislikes = 6;
    if (has_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dislikes());
    }

    // optional int32 shares = 7;
    if (has_shares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shares());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_Stats_SourceStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.Stats.SourceStats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_Stats_SourceStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_Stats_SourceStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.Stats.SourceStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.Stats.SourceStats)
    MergeFrom(*source);
  }
}

void UserData_Stats_SourceStats::MergeFrom(const UserData_Stats_SourceStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.Stats.SourceStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      category_id_ = from.category_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000008u) {
      opens_ = from.opens_;
    }
    if (cached_has_bits & 0x00000010u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000020u) {
      dislikes_ = from.dislikes_;
    }
    if (cached_has_bits & 0x00000040u) {
      shares_ = from.shares_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_Stats_SourceStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.Stats.SourceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_Stats_SourceStats::CopyFrom(const UserData_Stats_SourceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.Stats.SourceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_Stats_SourceStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_Stats_SourceStats::Swap(UserData_Stats_SourceStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_Stats_SourceStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_Stats_SourceStats::UnsafeArenaSwap(UserData_Stats_SourceStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_Stats_SourceStats::InternalSwap(UserData_Stats_SourceStats* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(category_id_, other->category_id_);
  swap(views_, other->views_);
  swap(opens_, other->opens_);
  swap(likes_, other->likes_);
  swap(dislikes_, other->dislikes_);
  swap(shares_, other->shares_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_Stats_SourceStats::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_Stats_SourceStats

// required int64 source_id = 1;
bool UserData_Stats_SourceStats::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_Stats_SourceStats::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_Stats_SourceStats::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_Stats_SourceStats::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 UserData_Stats_SourceStats::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.source_id)
  return source_id_;
}
void UserData_Stats_SourceStats::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.source_id)
}

// optional int64 category_id = 2;
bool UserData_Stats_SourceStats::has_category_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_Stats_SourceStats::set_has_category_id() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_Stats_SourceStats::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_Stats_SourceStats::clear_category_id() {
  category_id_ = GOOGLE_LONGLONG(0);
  clear_has_category_id();
}
::google::protobuf::int64 UserData_Stats_SourceStats::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.category_id)
  return category_id_;
}
void UserData_Stats_SourceStats::set_category_id(::google::protobuf::int64 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.category_id)
}

// optional int32 views = 3;
bool UserData_Stats_SourceStats::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_Stats_SourceStats::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_Stats_SourceStats::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_Stats_SourceStats::clear_views() {
  views_ = 0;
  clear_has_views();
}
::google::protobuf::int32 UserData_Stats_SourceStats::views() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.views)
  return views_;
}
void UserData_Stats_SourceStats::set_views(::google::protobuf::int32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.views)
}

// optional int32 opens = 4;
bool UserData_Stats_SourceStats::has_opens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_Stats_SourceStats::set_has_opens() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_Stats_SourceStats::clear_has_opens() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_Stats_SourceStats::clear_opens() {
  opens_ = 0;
  clear_has_opens();
}
::google::protobuf::int32 UserData_Stats_SourceStats::opens() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.opens)
  return opens_;
}
void UserData_Stats_SourceStats::set_opens(::google::protobuf::int32 value) {
  set_has_opens();
  opens_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.opens)
}

// optional int32 likes = 5;
bool UserData_Stats_SourceStats::has_likes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData_Stats_SourceStats::set_has_likes() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData_Stats_SourceStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData_Stats_SourceStats::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
::google::protobuf::int32 UserData_Stats_SourceStats::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.likes)
  return likes_;
}
void UserData_Stats_SourceStats::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.likes)
}

// optional int32 dislikes = 6;
bool UserData_Stats_SourceStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserData_Stats_SourceStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000020u;
}
void UserData_Stats_SourceStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserData_Stats_SourceStats::clear_dislikes() {
  dislikes_ = 0;
  clear_has_dislikes();
}
::google::protobuf::int32 UserData_Stats_SourceStats::dislikes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.dislikes)
  return dislikes_;
}
void UserData_Stats_SourceStats::set_dislikes(::google::protobuf::int32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.dislikes)
}

// optional int32 shares = 7;
bool UserData_Stats_SourceStats::has_shares() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserData_Stats_SourceStats::set_has_shares() {
  _has_bits_[0] |= 0x00000040u;
}
void UserData_Stats_SourceStats::clear_has_shares() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserData_Stats_SourceStats::clear_shares() {
  shares_ = 0;
  clear_has_shares();
}
::google::protobuf::int32 UserData_Stats_SourceStats::shares() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.shares)
  return shares_;
}
void UserData_Stats_SourceStats::set_shares(::google::protobuf::int32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.shares)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_Stats::kSourcesStatsFieldNumber;
const int UserData_Stats::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_Stats::UserData_Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.Stats)
}
UserData_Stats::UserData_Stats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  sources_stats_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.Stats)
}
UserData_Stats::UserData_Stats(const UserData_Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sources_stats_(from.sources_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.Stats)
}

void UserData_Stats::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_Stats::~UserData_Stats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.Stats)
  SharedDtor();
}

void UserData_Stats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_Stats::ArenaDtor(void* object) {
  UserData_Stats* _this = reinterpret_cast< UserData_Stats* >(object);
  (void)_this;
}
void UserData_Stats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_Stats::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_Stats& UserData_Stats::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_Stats* UserData_Stats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_Stats>(arena);
}

void UserData_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_stats_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.Stats)
  return false;
#undef DO_
}

void UserData_Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sources_stats(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.Stats)
}

::google::protobuf::uint8* UserData_Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sources_stats(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.Stats)
  return target;
}

size_t UserData_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.Stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sources_stats(static_cast<int>(i)));
    }
  }

  // optional uint32 version = 2;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.Stats)
    MergeFrom(*source);
  }
}

void UserData_Stats::MergeFrom(const UserData_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_stats_.MergeFrom(from.sources_stats_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_Stats::CopyFrom(const UserData_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_Stats::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->sources_stats())) return false;
  return true;
}

void UserData_Stats::Swap(UserData_Stats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_Stats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_Stats::UnsafeArenaSwap(UserData_Stats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_Stats::InternalSwap(UserData_Stats* other) {
  using std::swap;
  sources_stats_.InternalSwap(&other->sources_stats_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_Stats::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_Stats

// repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
int UserData_Stats::sources_stats_size() const {
  return sources_stats_.size();
}
void UserData_Stats::clear_sources_stats() {
  sources_stats_.Clear();
}
const ::cosmo::pb::UserData_Stats_SourceStats& UserData_Stats::sources_stats(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Get(index);
}
::cosmo::pb::UserData_Stats_SourceStats* UserData_Stats::mutable_sources_stats(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Mutable(index);
}
::cosmo::pb::UserData_Stats_SourceStats* UserData_Stats::add_sources_stats() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >*
UserData_Stats::mutable_sources_stats() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.Stats.sources_stats)
  return &sources_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >&
UserData_Stats::sources_stats() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_;
}

// optional uint32 version = 2;
bool UserData_Stats::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_Stats::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_Stats::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_Stats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_Stats::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.version)
  return version_;
}
void UserData_Stats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SourcesWebStats_SourceVisit::kSourceIdFieldNumber;
const int UserData_SourcesWebStats_SourceVisit::kVisitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SourcesWebStats_SourceVisit::UserData_SourcesWebStats_SourceVisit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
}
UserData_SourcesWebStats_SourceVisit::UserData_SourcesWebStats_SourceVisit(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
}
UserData_SourcesWebStats_SourceVisit::UserData_SourcesWebStats_SourceVisit(const UserData_SourcesWebStats_SourceVisit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&visits_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(visits_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
}

void UserData_SourcesWebStats_SourceVisit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visits_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(visits_));
}

UserData_SourcesWebStats_SourceVisit::~UserData_SourcesWebStats_SourceVisit() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  SharedDtor();
}

void UserData_SourcesWebStats_SourceVisit::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_SourcesWebStats_SourceVisit::ArenaDtor(void* object) {
  UserData_SourcesWebStats_SourceVisit* _this = reinterpret_cast< UserData_SourcesWebStats_SourceVisit* >(object);
  (void)_this;
}
void UserData_SourcesWebStats_SourceVisit::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_SourcesWebStats_SourceVisit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SourcesWebStats_SourceVisit::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SourcesWebStats_SourceVisit& UserData_SourcesWebStats_SourceVisit::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SourcesWebStats_SourceVisit* UserData_SourcesWebStats_SourceVisit::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_SourcesWebStats_SourceVisit>(arena);
}

void UserData_SourcesWebStats_SourceVisit::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visits_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(visits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SourcesWebStats_SourceVisit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 visits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_visits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  return false;
#undef DO_
}

void UserData_SourcesWebStats_SourceVisit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // required int32 visits = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->visits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
}

::google::protobuf::uint8* UserData_SourcesWebStats_SourceVisit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // required int32 visits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->visits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  return target;
}

size_t UserData_SourcesWebStats_SourceVisit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  size_t total_size = 0;

  if (has_source_id()) {
    // required int64 source_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }

  if (has_visits()) {
    // required int32 visits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visits());
  }

  return total_size;
}
size_t UserData_SourcesWebStats_SourceVisit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 source_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());

    // required int32 visits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->visits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SourcesWebStats_SourceVisit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SourcesWebStats_SourceVisit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SourcesWebStats_SourceVisit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
    MergeFrom(*source);
  }
}

void UserData_SourcesWebStats_SourceVisit::MergeFrom(const UserData_SourcesWebStats_SourceVisit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      visits_ = from.visits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_SourcesWebStats_SourceVisit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SourcesWebStats_SourceVisit::CopyFrom(const UserData_SourcesWebStats_SourceVisit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SourcesWebStats_SourceVisit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserData_SourcesWebStats_SourceVisit::Swap(UserData_SourcesWebStats_SourceVisit* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_SourcesWebStats_SourceVisit* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_SourcesWebStats_SourceVisit::UnsafeArenaSwap(UserData_SourcesWebStats_SourceVisit* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_SourcesWebStats_SourceVisit::InternalSwap(UserData_SourcesWebStats_SourceVisit* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(visits_, other->visits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SourcesWebStats_SourceVisit::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SourcesWebStats_SourceVisit

// required int64 source_id = 1;
bool UserData_SourcesWebStats_SourceVisit::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SourcesWebStats_SourceVisit::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SourcesWebStats_SourceVisit::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SourcesWebStats_SourceVisit::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 UserData_SourcesWebStats_SourceVisit::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisit.source_id)
  return source_id_;
}
void UserData_SourcesWebStats_SourceVisit::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.SourceVisit.source_id)
}

// required int32 visits = 2;
bool UserData_SourcesWebStats_SourceVisit::has_visits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_SourcesWebStats_SourceVisit::set_has_visits() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_SourcesWebStats_SourceVisit::clear_has_visits() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_SourcesWebStats_SourceVisit::clear_visits() {
  visits_ = 0;
  clear_has_visits();
}
::google::protobuf::int32 UserData_SourcesWebStats_SourceVisit::visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisit.visits)
  return visits_;
}
void UserData_SourcesWebStats_SourceVisit::set_visits(::google::protobuf::int32 value) {
  set_has_visits();
  visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.SourceVisit.visits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SourcesWebStats::kSourceVisitsFieldNumber;
const int UserData_SourcesWebStats::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SourcesWebStats::UserData_SourcesWebStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SourcesWebStats)
}
UserData_SourcesWebStats::UserData_SourcesWebStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  sourcevisits_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.SourcesWebStats)
}
UserData_SourcesWebStats::UserData_SourcesWebStats(const UserData_SourcesWebStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sourcevisits_(from.sourcevisits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SourcesWebStats)
}

void UserData_SourcesWebStats::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_SourcesWebStats::~UserData_SourcesWebStats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SourcesWebStats)
  SharedDtor();
}

void UserData_SourcesWebStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_SourcesWebStats::ArenaDtor(void* object) {
  UserData_SourcesWebStats* _this = reinterpret_cast< UserData_SourcesWebStats* >(object);
  (void)_this;
}
void UserData_SourcesWebStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_SourcesWebStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SourcesWebStats::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SourcesWebStats& UserData_SourcesWebStats::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SourcesWebStats* UserData_SourcesWebStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_SourcesWebStats>(arena);
}

void UserData_SourcesWebStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SourcesWebStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourcevisits_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SourcesWebStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SourcesWebStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sourcevisits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SourcesWebStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SourcesWebStats)
  return false;
#undef DO_
}

void UserData_SourcesWebStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SourcesWebStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sourcevisits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sourcevisits(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SourcesWebStats)
}

::google::protobuf::uint8* UserData_SourcesWebStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SourcesWebStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sourcevisits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sourcevisits(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SourcesWebStats)
  return target;
}

size_t UserData_SourcesWebStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SourcesWebStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sourcevisits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourcevisits(static_cast<int>(i)));
    }
  }

  // optional uint32 version = 2;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SourcesWebStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SourcesWebStats)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SourcesWebStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SourcesWebStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SourcesWebStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SourcesWebStats)
    MergeFrom(*source);
  }
}

void UserData_SourcesWebStats::MergeFrom(const UserData_SourcesWebStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SourcesWebStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sourcevisits_.MergeFrom(from.sourcevisits_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_SourcesWebStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SourcesWebStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SourcesWebStats::CopyFrom(const UserData_SourcesWebStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SourcesWebStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SourcesWebStats::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->sourcevisits())) return false;
  return true;
}

void UserData_SourcesWebStats::Swap(UserData_SourcesWebStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_SourcesWebStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_SourcesWebStats::UnsafeArenaSwap(UserData_SourcesWebStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_SourcesWebStats::InternalSwap(UserData_SourcesWebStats* other) {
  using std::swap;
  sourcevisits_.InternalSwap(&other->sourcevisits_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SourcesWebStats::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SourcesWebStats

// repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
int UserData_SourcesWebStats::sourcevisits_size() const {
  return sourcevisits_.size();
}
void UserData_SourcesWebStats::clear_sourcevisits() {
  sourcevisits_.Clear();
}
const ::cosmo::pb::UserData_SourcesWebStats_SourceVisit& UserData_SourcesWebStats::sourcevisits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Get(index);
}
::cosmo::pb::UserData_SourcesWebStats_SourceVisit* UserData_SourcesWebStats::mutable_sourcevisits(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Mutable(index);
}
::cosmo::pb::UserData_SourcesWebStats_SourceVisit* UserData_SourcesWebStats::add_sourcevisits() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >*
UserData_SourcesWebStats::mutable_sourcevisits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return &sourcevisits_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >&
UserData_SourcesWebStats::sourcevisits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_;
}

// optional uint32 version = 2;
bool UserData_SourcesWebStats::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SourcesWebStats::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SourcesWebStats::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SourcesWebStats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_SourcesWebStats::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.version)
  return version_;
}
void UserData_SourcesWebStats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserLinks::kVidFieldNumber;
const int UserData_UserLinks::kMailFieldNumber;
const int UserData_UserLinks::kOkFieldNumber;
const int UserData_UserLinks::kVkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserLinks::UserData_UserLinks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserLinks)
}
UserData_UserLinks::UserData_UserLinks(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserLinks)
}
UserData_UserLinks::UserData_UserLinks(const UserData_UserLinks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vid()) {
    vid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid(),
      GetArenaNoVirtual());
  }
  mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mail()) {
    mail_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mail(),
      GetArenaNoVirtual());
  }
  ok_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ok()) {
    ok_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ok(),
      GetArenaNoVirtual());
  }
  vk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vk()) {
    vk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vk(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserLinks)
}

void UserData_UserLinks::SharedCtor() {
  _cached_size_ = 0;
  vid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ok_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserData_UserLinks::~UserData_UserLinks() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserLinks)
  SharedDtor();
}

void UserData_UserLinks::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  vid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  mail_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  ok_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  vk_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void UserData_UserLinks::ArenaDtor(void* object) {
  UserData_UserLinks* _this = reinterpret_cast< UserData_UserLinks* >(object);
  (void)_this;
}
void UserData_UserLinks::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserLinks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserLinks::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserLinks& UserData_UserLinks::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserLinks* UserData_UserLinks::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserLinks>(arena);
}

void UserData_UserLinks::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!vid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      vid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!mail_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      mail_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!ok_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      ok_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!vk_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      vk_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserLinks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserLinks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vid().data(), static_cast<int>(this->vid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.UserLinks.vid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mail = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mail().data(), static_cast<int>(this->mail().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.UserLinks.mail");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ok = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ok()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ok().data(), static_cast<int>(this->ok().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.UserLinks.ok");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vk = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vk().data(), static_cast<int>(this->vk().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.UserLinks.vk");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserLinks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserLinks)
  return false;
#undef DO_
}

void UserData_UserLinks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.vid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vid(), output);
  }

  // optional string mail = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail().data(), static_cast<int>(this->mail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.mail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mail(), output);
  }

  // optional string ok = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ok().data(), static_cast<int>(this->ok().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.ok");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ok(), output);
  }

  // optional string vk = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vk().data(), static_cast<int>(this->vk().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.vk");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserLinks)
}

::google::protobuf::uint8* UserData_UserLinks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserLinks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid().data(), static_cast<int>(this->vid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.vid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vid(), target);
  }

  // optional string mail = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mail().data(), static_cast<int>(this->mail().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.mail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mail(), target);
  }

  // optional string ok = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ok().data(), static_cast<int>(this->ok().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.ok");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ok(), target);
  }

  // optional string vk = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vk().data(), static_cast<int>(this->vk().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserLinks.vk");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserLinks)
  return target;
}

size_t UserData_UserLinks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserLinks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid());
    }

    // optional string mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mail());
    }

    // optional string ok = 3;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ok());
    }

    // optional string vk = 4;
    if (has_vk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vk());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserLinks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserLinks)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserLinks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserLinks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserLinks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserLinks)
    MergeFrom(*source);
  }
}

void UserData_UserLinks::MergeFrom(const UserData_UserLinks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserLinks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_vid(from.vid());
    }
    if (cached_has_bits & 0x00000002u) {
      set_mail(from.mail());
    }
    if (cached_has_bits & 0x00000004u) {
      set_ok(from.ok());
    }
    if (cached_has_bits & 0x00000008u) {
      set_vk(from.vk());
    }
  }
}

void UserData_UserLinks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserLinks::CopyFrom(const UserData_UserLinks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserLinks::IsInitialized() const {
  return true;
}

void UserData_UserLinks::Swap(UserData_UserLinks* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserLinks* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserLinks::UnsafeArenaSwap(UserData_UserLinks* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserLinks::InternalSwap(UserData_UserLinks* other) {
  using std::swap;
  vid_.Swap(&other->vid_);
  mail_.Swap(&other->mail_);
  ok_.Swap(&other->ok_);
  vk_.Swap(&other->vk_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserLinks::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserLinks

// optional string vid = 1;
bool UserData_UserLinks::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserLinks::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserLinks::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserLinks::clear_vid() {
  vid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_vid();
}
const ::std::string& UserData_UserLinks::vid() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.vid)
  return vid_.Get();
}
void UserData_UserLinks::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.vid)
}
#if LANG_CXX11
void UserData_UserLinks::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.vid)
}
#endif
void UserData_UserLinks::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.vid)
}
void UserData_UserLinks::set_vid(const char* value,
    size_t size) {
  set_has_vid();
  vid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.vid)
}
::std::string* UserData_UserLinks::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.vid)
  return vid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserLinks::release_vid() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.vid)
  clear_has_vid();
  return vid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserLinks::unsafe_arena_release_vid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserLinks.vid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_vid();
  return vid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UserData_UserLinks::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.vid)
}
void UserData_UserLinks::unsafe_arena_set_allocated_vid(
    ::std::string* vid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      vid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserLinks.vid)
}

// optional string mail = 2;
bool UserData_UserLinks::has_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserLinks::set_has_mail() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserLinks::clear_has_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserLinks::clear_mail() {
  mail_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_mail();
}
const ::std::string& UserData_UserLinks::mail() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.mail)
  return mail_.Get();
}
void UserData_UserLinks::set_mail(const ::std::string& value) {
  set_has_mail();
  mail_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.mail)
}
#if LANG_CXX11
void UserData_UserLinks::set_mail(::std::string&& value) {
  set_has_mail();
  mail_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.mail)
}
#endif
void UserData_UserLinks::set_mail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mail();
  mail_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.mail)
}
void UserData_UserLinks::set_mail(const char* value,
    size_t size) {
  set_has_mail();
  mail_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.mail)
}
::std::string* UserData_UserLinks::mutable_mail() {
  set_has_mail();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.mail)
  return mail_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserLinks::release_mail() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.mail)
  clear_has_mail();
  return mail_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserLinks::unsafe_arena_release_mail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserLinks.mail)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_mail();
  return mail_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UserData_UserLinks::set_allocated_mail(::std::string* mail) {
  if (mail != NULL) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
  mail_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mail,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.mail)
}
void UserData_UserLinks::unsafe_arena_set_allocated_mail(
    ::std::string* mail) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (mail != NULL) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
  mail_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      mail, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserLinks.mail)
}

// optional string ok = 3;
bool UserData_UserLinks::has_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserLinks::set_has_ok() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserLinks::clear_has_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserLinks::clear_ok() {
  ok_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ok();
}
const ::std::string& UserData_UserLinks::ok() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.ok)
  return ok_.Get();
}
void UserData_UserLinks::set_ok(const ::std::string& value) {
  set_has_ok();
  ok_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.ok)
}
#if LANG_CXX11
void UserData_UserLinks::set_ok(::std::string&& value) {
  set_has_ok();
  ok_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.ok)
}
#endif
void UserData_UserLinks::set_ok(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ok();
  ok_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.ok)
}
void UserData_UserLinks::set_ok(const char* value,
    size_t size) {
  set_has_ok();
  ok_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.ok)
}
::std::string* UserData_UserLinks::mutable_ok() {
  set_has_ok();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.ok)
  return ok_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserLinks::release_ok() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.ok)
  clear_has_ok();
  return ok_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserLinks::unsafe_arena_release_ok() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserLinks.ok)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ok();
  return ok_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UserData_UserLinks::set_allocated_ok(::std::string* ok) {
  if (ok != NULL) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  ok_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.ok)
}
void UserData_UserLinks::unsafe_arena_set_allocated_ok(
    ::std::string* ok) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ok != NULL) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  ok_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ok, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserLinks.ok)
}

// optional string vk = 4;
bool UserData_UserLinks::has_vk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_UserLinks::set_has_vk() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_UserLinks::clear_has_vk() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_UserLinks::clear_vk() {
  vk_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_vk();
}
const ::std::string& UserData_UserLinks::vk() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.vk)
  return vk_.Get();
}
void UserData_UserLinks::set_vk(const ::std::string& value) {
  set_has_vk();
  vk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.vk)
}
#if LANG_CXX11
void UserData_UserLinks::set_vk(::std::string&& value) {
  set_has_vk();
  vk_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.vk)
}
#endif
void UserData_UserLinks::set_vk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vk();
  vk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.vk)
}
void UserData_UserLinks::set_vk(const char* value,
    size_t size) {
  set_has_vk();
  vk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.vk)
}
::std::string* UserData_UserLinks::mutable_vk() {
  set_has_vk();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.vk)
  return vk_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserLinks::release_vk() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.vk)
  clear_has_vk();
  return vk_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserLinks::unsafe_arena_release_vk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserLinks.vk)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_vk();
  return vk_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UserData_UserLinks::set_allocated_vk(::std::string* vk) {
  if (vk != NULL) {
    set_has_vk();
  } else {
    clear_has_vk();
  }
  vk_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vk,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.vk)
}
void UserData_UserLinks::unsafe_arena_set_allocated_vk(
    ::std::string* vk) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (vk != NULL) {
    set_has_vk();
  } else {
    clear_has_vk();
  }
  vk_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      vk, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserLinks.vk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserClusters::kUserClusterSomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserClusters::UserData_UserClusters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserClusters)
}
UserData_UserClusters::UserData_UserClusters(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserClusters)
}
UserData_UserClusters::UserData_UserClusters(const UserData_UserClusters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_cluster_som_ = from.user_cluster_som_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserClusters)
}

void UserData_UserClusters::SharedCtor() {
  _cached_size_ = 0;
  user_cluster_som_ = 0u;
}

UserData_UserClusters::~UserData_UserClusters() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserClusters)
  SharedDtor();
}

void UserData_UserClusters::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserClusters::ArenaDtor(void* object) {
  UserData_UserClusters* _this = reinterpret_cast< UserData_UserClusters* >(object);
  (void)_this;
}
void UserData_UserClusters::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserClusters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserClusters::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserClusters& UserData_UserClusters::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserClusters* UserData_UserClusters::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserClusters>(arena);
}

void UserData_UserClusters::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserClusters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_cluster_som_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserClusters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserClusters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_cluster_som = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_cluster_som();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_cluster_som_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserClusters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserClusters)
  return false;
#undef DO_
}

void UserData_UserClusters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserClusters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_cluster_som = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_cluster_som(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserClusters)
}

::google::protobuf::uint8* UserData_UserClusters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserClusters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_cluster_som = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_cluster_som(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserClusters)
  return target;
}

size_t UserData_UserClusters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserClusters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 user_cluster_som = 1;
  if (has_user_cluster_som()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_cluster_som());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserClusters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserClusters)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserClusters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserClusters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserClusters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserClusters)
    MergeFrom(*source);
  }
}

void UserData_UserClusters::MergeFrom(const UserData_UserClusters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserClusters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_cluster_som()) {
    set_user_cluster_som(from.user_cluster_som());
  }
}

void UserData_UserClusters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserClusters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserClusters::CopyFrom(const UserData_UserClusters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserClusters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserClusters::IsInitialized() const {
  return true;
}

void UserData_UserClusters::Swap(UserData_UserClusters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserClusters* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserClusters::UnsafeArenaSwap(UserData_UserClusters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserClusters::InternalSwap(UserData_UserClusters* other) {
  using std::swap;
  swap(user_cluster_som_, other->user_cluster_som_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserClusters::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserClusters

// optional uint32 user_cluster_som = 1;
bool UserData_UserClusters::has_user_cluster_som() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserClusters::set_has_user_cluster_som() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserClusters::clear_has_user_cluster_som() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserClusters::clear_user_cluster_som() {
  user_cluster_som_ = 0u;
  clear_has_user_cluster_som();
}
::google::protobuf::uint32 UserData_UserClusters::user_cluster_som() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserClusters.user_cluster_som)
  return user_cluster_som_;
}
void UserData_UserClusters::set_user_cluster_som(::google::protobuf::uint32 value) {
  set_has_user_cluster_som();
  user_cluster_som_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserClusters.user_cluster_som)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SimilarSites_SimilarSite::kIdFieldNumber;
const int UserData_SimilarSites_SimilarSite::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SimilarSites_SimilarSite::UserData_SimilarSites_SimilarSite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SimilarSites.SimilarSite)
}
UserData_SimilarSites_SimilarSite::UserData_SimilarSites_SimilarSite(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.SimilarSites.SimilarSite)
}
UserData_SimilarSites_SimilarSite::UserData_SimilarSites_SimilarSite(const UserData_SimilarSites_SimilarSite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&id_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SimilarSites.SimilarSite)
}

void UserData_SimilarSites_SimilarSite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(weight_));
}

UserData_SimilarSites_SimilarSite::~UserData_SimilarSites_SimilarSite() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SimilarSites.SimilarSite)
  SharedDtor();
}

void UserData_SimilarSites_SimilarSite::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_SimilarSites_SimilarSite::ArenaDtor(void* object) {
  UserData_SimilarSites_SimilarSite* _this = reinterpret_cast< UserData_SimilarSites_SimilarSite* >(object);
  (void)_this;
}
void UserData_SimilarSites_SimilarSite::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_SimilarSites_SimilarSite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SimilarSites_SimilarSite::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SimilarSites_SimilarSite& UserData_SimilarSites_SimilarSite::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SimilarSites_SimilarSite* UserData_SimilarSites_SimilarSite::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_SimilarSites_SimilarSite>(arena);
}

void UserData_SimilarSites_SimilarSite::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SimilarSites.SimilarSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_) -
        reinterpret_cast<char*>(&id_)) + sizeof(weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SimilarSites_SimilarSite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SimilarSites.SimilarSite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SimilarSites.SimilarSite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SimilarSites.SimilarSite)
  return false;
#undef DO_
}

void UserData_SimilarSites_SimilarSite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SimilarSites.SimilarSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required float weight = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SimilarSites.SimilarSite)
}

::google::protobuf::uint8* UserData_SimilarSites_SimilarSite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SimilarSites.SimilarSite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required float weight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SimilarSites.SimilarSite)
  return target;
}

size_t UserData_SimilarSites_SimilarSite::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.UserData.SimilarSites.SimilarSite)
  size_t total_size = 0;

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_weight()) {
    // required float weight = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t UserData_SimilarSites_SimilarSite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SimilarSites.SimilarSite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required float weight = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SimilarSites_SimilarSite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SimilarSites.SimilarSite)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SimilarSites_SimilarSite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SimilarSites_SimilarSite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SimilarSites.SimilarSite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SimilarSites.SimilarSite)
    MergeFrom(*source);
  }
}

void UserData_SimilarSites_SimilarSite::MergeFrom(const UserData_SimilarSites_SimilarSite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SimilarSites.SimilarSite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_SimilarSites_SimilarSite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SimilarSites.SimilarSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SimilarSites_SimilarSite::CopyFrom(const UserData_SimilarSites_SimilarSite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SimilarSites.SimilarSite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SimilarSites_SimilarSite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserData_SimilarSites_SimilarSite::Swap(UserData_SimilarSites_SimilarSite* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_SimilarSites_SimilarSite* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_SimilarSites_SimilarSite::UnsafeArenaSwap(UserData_SimilarSites_SimilarSite* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_SimilarSites_SimilarSite::InternalSwap(UserData_SimilarSites_SimilarSite* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(weight_, other->weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SimilarSites_SimilarSite::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SimilarSites_SimilarSite

// required int64 id = 1;
bool UserData_SimilarSites_SimilarSite::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SimilarSites_SimilarSite::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SimilarSites_SimilarSite::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SimilarSites_SimilarSite::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 UserData_SimilarSites_SimilarSite::id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SimilarSites.SimilarSite.id)
  return id_;
}
void UserData_SimilarSites_SimilarSite::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SimilarSites.SimilarSite.id)
}

// required float weight = 2;
bool UserData_SimilarSites_SimilarSite::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_SimilarSites_SimilarSite::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_SimilarSites_SimilarSite::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_SimilarSites_SimilarSite::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
float UserData_SimilarSites_SimilarSite::weight() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SimilarSites.SimilarSite.weight)
  return weight_;
}
void UserData_SimilarSites_SimilarSite::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SimilarSites.SimilarSite.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SimilarSites::kSimilarSiteFieldNumber;
const int UserData_SimilarSites::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SimilarSites::UserData_SimilarSites()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SimilarSites)
}
UserData_SimilarSites::UserData_SimilarSites(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  similar_site_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.SimilarSites)
}
UserData_SimilarSites::UserData_SimilarSites(const UserData_SimilarSites& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      similar_site_(from.similar_site_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SimilarSites)
}

void UserData_SimilarSites::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_SimilarSites::~UserData_SimilarSites() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SimilarSites)
  SharedDtor();
}

void UserData_SimilarSites::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_SimilarSites::ArenaDtor(void* object) {
  UserData_SimilarSites* _this = reinterpret_cast< UserData_SimilarSites* >(object);
  (void)_this;
}
void UserData_SimilarSites::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_SimilarSites::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SimilarSites::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SimilarSites& UserData_SimilarSites::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SimilarSites* UserData_SimilarSites::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_SimilarSites>(arena);
}

void UserData_SimilarSites::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SimilarSites)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  similar_site_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SimilarSites::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SimilarSites)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.SimilarSites.SimilarSite similar_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_similar_site()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SimilarSites)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SimilarSites)
  return false;
#undef DO_
}

void UserData_SimilarSites::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SimilarSites)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.SimilarSites.SimilarSite similar_site = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->similar_site_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->similar_site(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SimilarSites)
}

::google::protobuf::uint8* UserData_SimilarSites::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SimilarSites)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.SimilarSites.SimilarSite similar_site = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->similar_site_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->similar_site(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SimilarSites)
  return target;
}

size_t UserData_SimilarSites::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SimilarSites)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.SimilarSites.SimilarSite similar_site = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->similar_site_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->similar_site(static_cast<int>(i)));
    }
  }

  // optional uint32 version = 2;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SimilarSites::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SimilarSites)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SimilarSites* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SimilarSites>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SimilarSites)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SimilarSites)
    MergeFrom(*source);
  }
}

void UserData_SimilarSites::MergeFrom(const UserData_SimilarSites& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SimilarSites)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  similar_site_.MergeFrom(from.similar_site_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_SimilarSites::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SimilarSites)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SimilarSites::CopyFrom(const UserData_SimilarSites& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SimilarSites)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SimilarSites::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->similar_site())) return false;
  return true;
}

void UserData_SimilarSites::Swap(UserData_SimilarSites* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_SimilarSites* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_SimilarSites::UnsafeArenaSwap(UserData_SimilarSites* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_SimilarSites::InternalSwap(UserData_SimilarSites* other) {
  using std::swap;
  similar_site_.InternalSwap(&other->similar_site_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SimilarSites::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SimilarSites

// repeated .cosmo.pb.UserData.SimilarSites.SimilarSite similar_site = 1;
int UserData_SimilarSites::similar_site_size() const {
  return similar_site_.size();
}
void UserData_SimilarSites::clear_similar_site() {
  similar_site_.Clear();
}
const ::cosmo::pb::UserData_SimilarSites_SimilarSite& UserData_SimilarSites::similar_site(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SimilarSites.similar_site)
  return similar_site_.Get(index);
}
::cosmo::pb::UserData_SimilarSites_SimilarSite* UserData_SimilarSites::mutable_similar_site(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.SimilarSites.similar_site)
  return similar_site_.Mutable(index);
}
::cosmo::pb::UserData_SimilarSites_SimilarSite* UserData_SimilarSites::add_similar_site() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SimilarSites.similar_site)
  return similar_site_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SimilarSites_SimilarSite >*
UserData_SimilarSites::mutable_similar_site() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SimilarSites.similar_site)
  return &similar_site_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SimilarSites_SimilarSite >&
UserData_SimilarSites::similar_site() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SimilarSites.similar_site)
  return similar_site_;
}

// optional uint32 version = 2;
bool UserData_SimilarSites::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SimilarSites::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SimilarSites::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SimilarSites::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_SimilarSites::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SimilarSites.version)
  return version_;
}
void UserData_SimilarSites::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SimilarSites.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_ContentThemes::kVersionFieldNumber;
const int UserData_ContentThemes::kModelVersionFieldNumber;
const int UserData_ContentThemes::kUrlsFieldNumber;
const int UserData_ContentThemes::kThemesVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_ContentThemes::UserData_ContentThemes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.ContentThemes)
}
UserData_ContentThemes::UserData_ContentThemes(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  themes_vector_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.ContentThemes)
}
UserData_ContentThemes::UserData_ContentThemes(const UserData_ContentThemes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      themes_vector_(from.themes_vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&urls_) -
    reinterpret_cast<char*>(&version_)) + sizeof(urls_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.ContentThemes)
}

void UserData_ContentThemes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&urls_) -
      reinterpret_cast<char*>(&version_)) + sizeof(urls_));
}

UserData_ContentThemes::~UserData_ContentThemes() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.ContentThemes)
  SharedDtor();
}

void UserData_ContentThemes::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_ContentThemes::ArenaDtor(void* object) {
  UserData_ContentThemes* _this = reinterpret_cast< UserData_ContentThemes* >(object);
  (void)_this;
}
void UserData_ContentThemes::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_ContentThemes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_ContentThemes::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_ContentThemes& UserData_ContentThemes::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_ContentThemes* UserData_ContentThemes::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_ContentThemes>(arena);
}

void UserData_ContentThemes::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.ContentThemes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  themes_vector_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&urls_) -
        reinterpret_cast<char*>(&version_)) + sizeof(urls_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_ContentThemes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.ContentThemes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 model_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_model_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &model_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 urls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float themes_vector = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_themes_vector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_themes_vector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.ContentThemes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.ContentThemes)
  return false;
#undef DO_
}

void UserData_ContentThemes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.ContentThemes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 model_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->model_version(), output);
  }

  // optional uint32 urls = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->urls(), output);
  }

  // repeated float themes_vector = 4;
  for (int i = 0, n = this->themes_vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->themes_vector(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.ContentThemes)
}

::google::protobuf::uint8* UserData_ContentThemes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.ContentThemes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 model_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->model_version(), target);
  }

  // optional uint32 urls = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->urls(), target);
  }

  // repeated float themes_vector = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(4, this->themes_vector_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.ContentThemes)
  return target;
}

size_t UserData_ContentThemes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.ContentThemes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float themes_vector = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->themes_vector_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->themes_vector_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 model_version = 2;
    if (has_model_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->model_version());
    }

    // optional uint32 urls = 3;
    if (has_urls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->urls());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_ContentThemes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.ContentThemes)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_ContentThemes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_ContentThemes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.ContentThemes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.ContentThemes)
    MergeFrom(*source);
  }
}

void UserData_ContentThemes::MergeFrom(const UserData_ContentThemes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.ContentThemes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  themes_vector_.MergeFrom(from.themes_vector_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      model_version_ = from.model_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      urls_ = from.urls_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_ContentThemes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.ContentThemes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_ContentThemes::CopyFrom(const UserData_ContentThemes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.ContentThemes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_ContentThemes::IsInitialized() const {
  return true;
}

void UserData_ContentThemes::Swap(UserData_ContentThemes* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_ContentThemes* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_ContentThemes::UnsafeArenaSwap(UserData_ContentThemes* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_ContentThemes::InternalSwap(UserData_ContentThemes* other) {
  using std::swap;
  themes_vector_.InternalSwap(&other->themes_vector_);
  swap(version_, other->version_);
  swap(model_version_, other->model_version_);
  swap(urls_, other->urls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_ContentThemes::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_ContentThemes

// optional uint32 version = 1;
bool UserData_ContentThemes::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_ContentThemes::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_ContentThemes::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_ContentThemes::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_ContentThemes::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ContentThemes.version)
  return version_;
}
void UserData_ContentThemes::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.ContentThemes.version)
}

// optional uint32 model_version = 2;
bool UserData_ContentThemes::has_model_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_ContentThemes::set_has_model_version() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_ContentThemes::clear_has_model_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_ContentThemes::clear_model_version() {
  model_version_ = 0u;
  clear_has_model_version();
}
::google::protobuf::uint32 UserData_ContentThemes::model_version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ContentThemes.model_version)
  return model_version_;
}
void UserData_ContentThemes::set_model_version(::google::protobuf::uint32 value) {
  set_has_model_version();
  model_version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.ContentThemes.model_version)
}

// optional uint32 urls = 3;
bool UserData_ContentThemes::has_urls() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_ContentThemes::set_has_urls() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_ContentThemes::clear_has_urls() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_ContentThemes::clear_urls() {
  urls_ = 0u;
  clear_has_urls();
}
::google::protobuf::uint32 UserData_ContentThemes::urls() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ContentThemes.urls)
  return urls_;
}
void UserData_ContentThemes::set_urls(::google::protobuf::uint32 value) {
  set_has_urls();
  urls_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.ContentThemes.urls)
}

// repeated float themes_vector = 4;
int UserData_ContentThemes::themes_vector_size() const {
  return themes_vector_.size();
}
void UserData_ContentThemes::clear_themes_vector() {
  themes_vector_.Clear();
}
float UserData_ContentThemes::themes_vector(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ContentThemes.themes_vector)
  return themes_vector_.Get(index);
}
void UserData_ContentThemes::set_themes_vector(int index, float value) {
  themes_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.ContentThemes.themes_vector)
}
void UserData_ContentThemes::add_themes_vector(float value) {
  themes_vector_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.ContentThemes.themes_vector)
}
const ::google::protobuf::RepeatedField< float >&
UserData_ContentThemes::themes_vector() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.ContentThemes.themes_vector)
  return themes_vector_;
}
::google::protobuf::RepeatedField< float >*
UserData_ContentThemes::mutable_themes_vector() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.ContentThemes.themes_vector)
  return &themes_vector_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_StaticRecos::kVersionFieldNumber;
const int UserData_StaticRecos::kSourceIdFieldNumber;
const int UserData_StaticRecos::kDocIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_StaticRecos::UserData_StaticRecos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.StaticRecos)
}
UserData_StaticRecos::UserData_StaticRecos(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  source_id_(arena),
  doc_id_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.StaticRecos)
}
UserData_StaticRecos::UserData_StaticRecos(const UserData_StaticRecos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      source_id_(from.source_id_),
      doc_id_(from.doc_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.StaticRecos)
}

void UserData_StaticRecos::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_StaticRecos::~UserData_StaticRecos() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.StaticRecos)
  SharedDtor();
}

void UserData_StaticRecos::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_StaticRecos::ArenaDtor(void* object) {
  UserData_StaticRecos* _this = reinterpret_cast< UserData_StaticRecos* >(object);
  (void)_this;
}
void UserData_StaticRecos::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_StaticRecos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_StaticRecos::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_StaticRecos& UserData_StaticRecos::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_StaticRecos* UserData_StaticRecos::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_StaticRecos>(arena);
}

void UserData_StaticRecos::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.StaticRecos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_id_.Clear();
  doc_id_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_StaticRecos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.StaticRecos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 source_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_source_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_source_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 doc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_doc_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_doc_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.StaticRecos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.StaticRecos)
  return false;
#undef DO_
}

void UserData_StaticRecos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.StaticRecos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated int64 source_id = 2;
  for (int i = 0, n = this->source_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->source_id(i), output);
  }

  // repeated int64 doc_id = 3;
  for (int i = 0, n = this->doc_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->doc_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.StaticRecos)
}

::google::protobuf::uint8* UserData_StaticRecos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.StaticRecos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated int64 source_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->source_id_, target);

  // repeated int64 doc_id = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(3, this->doc_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.StaticRecos)
  return target;
}

size_t UserData_StaticRecos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.StaticRecos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 source_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->source_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->source_id_size());
    total_size += data_size;
  }

  // repeated int64 doc_id = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->doc_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->doc_id_size());
    total_size += data_size;
  }

  // optional uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_StaticRecos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.StaticRecos)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_StaticRecos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_StaticRecos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.StaticRecos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.StaticRecos)
    MergeFrom(*source);
  }
}

void UserData_StaticRecos::MergeFrom(const UserData_StaticRecos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.StaticRecos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_id_.MergeFrom(from.source_id_);
  doc_id_.MergeFrom(from.doc_id_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_StaticRecos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.StaticRecos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_StaticRecos::CopyFrom(const UserData_StaticRecos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.StaticRecos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_StaticRecos::IsInitialized() const {
  return true;
}

void UserData_StaticRecos::Swap(UserData_StaticRecos* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_StaticRecos* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_StaticRecos::UnsafeArenaSwap(UserData_StaticRecos* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_StaticRecos::InternalSwap(UserData_StaticRecos* other) {
  using std::swap;
  source_id_.InternalSwap(&other->source_id_);
  doc_id_.InternalSwap(&other->doc_id_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_StaticRecos::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_StaticRecos

// optional uint32 version = 1;
bool UserData_StaticRecos::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_StaticRecos::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_StaticRecos::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_StaticRecos::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_StaticRecos::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.StaticRecos.version)
  return version_;
}
void UserData_StaticRecos::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.StaticRecos.version)
}

// repeated int64 source_id = 2;
int UserData_StaticRecos::source_id_size() const {
  return source_id_.size();
}
void UserData_StaticRecos::clear_source_id() {
  source_id_.Clear();
}
::google::protobuf::int64 UserData_StaticRecos::source_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.StaticRecos.source_id)
  return source_id_.Get(index);
}
void UserData_StaticRecos::set_source_id(int index, ::google::protobuf::int64 value) {
  source_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.StaticRecos.source_id)
}
void UserData_StaticRecos::add_source_id(::google::protobuf::int64 value) {
  source_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.StaticRecos.source_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_StaticRecos::source_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.StaticRecos.source_id)
  return source_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_StaticRecos::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.StaticRecos.source_id)
  return &source_id_;
}

// repeated int64 doc_id = 3;
int UserData_StaticRecos::doc_id_size() const {
  return doc_id_.size();
}
void UserData_StaticRecos::clear_doc_id() {
  doc_id_.Clear();
}
::google::protobuf::int64 UserData_StaticRecos::doc_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.StaticRecos.doc_id)
  return doc_id_.Get(index);
}
void UserData_StaticRecos::set_doc_id(int index, ::google::protobuf::int64 value) {
  doc_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.StaticRecos.doc_id)
}
void UserData_StaticRecos::add_doc_id(::google::protobuf::int64 value) {
  doc_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.StaticRecos.doc_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_StaticRecos::doc_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.StaticRecos.doc_id)
  return doc_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_StaticRecos::mutable_doc_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.StaticRecos.doc_id)
  return &doc_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_VisitedDocs::kVersionFieldNumber;
const int UserData_VisitedDocs::kSourceIdFieldNumber;
const int UserData_VisitedDocs::kDocIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_VisitedDocs::UserData_VisitedDocs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.VisitedDocs)
}
UserData_VisitedDocs::UserData_VisitedDocs(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  source_id_(arena),
  doc_id_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.VisitedDocs)
}
UserData_VisitedDocs::UserData_VisitedDocs(const UserData_VisitedDocs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      source_id_(from.source_id_),
      doc_id_(from.doc_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.VisitedDocs)
}

void UserData_VisitedDocs::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_VisitedDocs::~UserData_VisitedDocs() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.VisitedDocs)
  SharedDtor();
}

void UserData_VisitedDocs::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_VisitedDocs::ArenaDtor(void* object) {
  UserData_VisitedDocs* _this = reinterpret_cast< UserData_VisitedDocs* >(object);
  (void)_this;
}
void UserData_VisitedDocs::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_VisitedDocs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_VisitedDocs::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_VisitedDocs& UserData_VisitedDocs::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_VisitedDocs* UserData_VisitedDocs::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_VisitedDocs>(arena);
}

void UserData_VisitedDocs::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.VisitedDocs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_id_.Clear();
  doc_id_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_VisitedDocs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.VisitedDocs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 source_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_source_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_source_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 doc_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_doc_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_doc_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.VisitedDocs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.VisitedDocs)
  return false;
#undef DO_
}

void UserData_VisitedDocs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.VisitedDocs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated int64 source_id = 2;
  for (int i = 0, n = this->source_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->source_id(i), output);
  }

  // repeated int64 doc_id = 3;
  for (int i = 0, n = this->doc_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->doc_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.VisitedDocs)
}

::google::protobuf::uint8* UserData_VisitedDocs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.VisitedDocs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated int64 source_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->source_id_, target);

  // repeated int64 doc_id = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(3, this->doc_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.VisitedDocs)
  return target;
}

size_t UserData_VisitedDocs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.VisitedDocs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 source_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->source_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->source_id_size());
    total_size += data_size;
  }

  // repeated int64 doc_id = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->doc_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->doc_id_size());
    total_size += data_size;
  }

  // optional uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_VisitedDocs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.VisitedDocs)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_VisitedDocs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_VisitedDocs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.VisitedDocs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.VisitedDocs)
    MergeFrom(*source);
  }
}

void UserData_VisitedDocs::MergeFrom(const UserData_VisitedDocs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.VisitedDocs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_id_.MergeFrom(from.source_id_);
  doc_id_.MergeFrom(from.doc_id_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_VisitedDocs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.VisitedDocs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_VisitedDocs::CopyFrom(const UserData_VisitedDocs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.VisitedDocs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_VisitedDocs::IsInitialized() const {
  return true;
}

void UserData_VisitedDocs::Swap(UserData_VisitedDocs* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_VisitedDocs* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_VisitedDocs::UnsafeArenaSwap(UserData_VisitedDocs* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_VisitedDocs::InternalSwap(UserData_VisitedDocs* other) {
  using std::swap;
  source_id_.InternalSwap(&other->source_id_);
  doc_id_.InternalSwap(&other->doc_id_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_VisitedDocs::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_VisitedDocs

// optional uint32 version = 1;
bool UserData_VisitedDocs::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_VisitedDocs::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_VisitedDocs::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_VisitedDocs::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_VisitedDocs::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VisitedDocs.version)
  return version_;
}
void UserData_VisitedDocs::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VisitedDocs.version)
}

// repeated int64 source_id = 2;
int UserData_VisitedDocs::source_id_size() const {
  return source_id_.size();
}
void UserData_VisitedDocs::clear_source_id() {
  source_id_.Clear();
}
::google::protobuf::int64 UserData_VisitedDocs::source_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VisitedDocs.source_id)
  return source_id_.Get(index);
}
void UserData_VisitedDocs::set_source_id(int index, ::google::protobuf::int64 value) {
  source_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VisitedDocs.source_id)
}
void UserData_VisitedDocs::add_source_id(::google::protobuf::int64 value) {
  source_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.VisitedDocs.source_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_VisitedDocs::source_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.VisitedDocs.source_id)
  return source_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_VisitedDocs::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.VisitedDocs.source_id)
  return &source_id_;
}

// repeated int64 doc_id = 3;
int UserData_VisitedDocs::doc_id_size() const {
  return doc_id_.size();
}
void UserData_VisitedDocs::clear_doc_id() {
  doc_id_.Clear();
}
::google::protobuf::int64 UserData_VisitedDocs::doc_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VisitedDocs.doc_id)
  return doc_id_.Get(index);
}
void UserData_VisitedDocs::set_doc_id(int index, ::google::protobuf::int64 value) {
  doc_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VisitedDocs.doc_id)
}
void UserData_VisitedDocs::add_doc_id(::google::protobuf::int64 value) {
  doc_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.VisitedDocs.doc_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_VisitedDocs::doc_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.VisitedDocs.doc_id)
  return doc_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_VisitedDocs::mutable_doc_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.VisitedDocs.doc_id)
  return &doc_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_LogsVisitedDocs::kDocIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_LogsVisitedDocs::UserData_LogsVisitedDocs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.LogsVisitedDocs)
}
UserData_LogsVisitedDocs::UserData_LogsVisitedDocs(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  doc_id_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.LogsVisitedDocs)
}
UserData_LogsVisitedDocs::UserData_LogsVisitedDocs(const UserData_LogsVisitedDocs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      doc_id_(from.doc_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.LogsVisitedDocs)
}

void UserData_LogsVisitedDocs::SharedCtor() {
  _cached_size_ = 0;
}

UserData_LogsVisitedDocs::~UserData_LogsVisitedDocs() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.LogsVisitedDocs)
  SharedDtor();
}

void UserData_LogsVisitedDocs::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_LogsVisitedDocs::ArenaDtor(void* object) {
  UserData_LogsVisitedDocs* _this = reinterpret_cast< UserData_LogsVisitedDocs* >(object);
  (void)_this;
}
void UserData_LogsVisitedDocs::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_LogsVisitedDocs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_LogsVisitedDocs::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_LogsVisitedDocs& UserData_LogsVisitedDocs::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_LogsVisitedDocs* UserData_LogsVisitedDocs::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_LogsVisitedDocs>(arena);
}

void UserData_LogsVisitedDocs::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.LogsVisitedDocs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_LogsVisitedDocs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.LogsVisitedDocs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8u, input, this->mutable_doc_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_doc_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.LogsVisitedDocs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.LogsVisitedDocs)
  return false;
#undef DO_
}

void UserData_LogsVisitedDocs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.LogsVisitedDocs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 doc_id = 1;
  for (int i = 0, n = this->doc_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->doc_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.LogsVisitedDocs)
}

::google::protobuf::uint8* UserData_LogsVisitedDocs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.LogsVisitedDocs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 doc_id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(1, this->doc_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.LogsVisitedDocs)
  return target;
}

size_t UserData_LogsVisitedDocs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.LogsVisitedDocs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int64 doc_id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->doc_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->doc_id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_LogsVisitedDocs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.LogsVisitedDocs)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_LogsVisitedDocs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_LogsVisitedDocs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.LogsVisitedDocs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.LogsVisitedDocs)
    MergeFrom(*source);
  }
}

void UserData_LogsVisitedDocs::MergeFrom(const UserData_LogsVisitedDocs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.LogsVisitedDocs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doc_id_.MergeFrom(from.doc_id_);
}

void UserData_LogsVisitedDocs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.LogsVisitedDocs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_LogsVisitedDocs::CopyFrom(const UserData_LogsVisitedDocs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.LogsVisitedDocs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_LogsVisitedDocs::IsInitialized() const {
  return true;
}

void UserData_LogsVisitedDocs::Swap(UserData_LogsVisitedDocs* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_LogsVisitedDocs* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_LogsVisitedDocs::UnsafeArenaSwap(UserData_LogsVisitedDocs* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_LogsVisitedDocs::InternalSwap(UserData_LogsVisitedDocs* other) {
  using std::swap;
  doc_id_.InternalSwap(&other->doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_LogsVisitedDocs::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_LogsVisitedDocs

// repeated int64 doc_id = 1;
int UserData_LogsVisitedDocs::doc_id_size() const {
  return doc_id_.size();
}
void UserData_LogsVisitedDocs::clear_doc_id() {
  doc_id_.Clear();
}
::google::protobuf::int64 UserData_LogsVisitedDocs::doc_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedDocs.doc_id)
  return doc_id_.Get(index);
}
void UserData_LogsVisitedDocs::set_doc_id(int index, ::google::protobuf::int64 value) {
  doc_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.LogsVisitedDocs.doc_id)
}
void UserData_LogsVisitedDocs::add_doc_id(::google::protobuf::int64 value) {
  doc_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.LogsVisitedDocs.doc_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_LogsVisitedDocs::doc_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.LogsVisitedDocs.doc_id)
  return doc_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_LogsVisitedDocs::mutable_doc_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.LogsVisitedDocs.doc_id)
  return &doc_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_LogsVisitedSources::kVersionFieldNumber;
const int UserData_LogsVisitedSources::kSourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_LogsVisitedSources::UserData_LogsVisitedSources()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.LogsVisitedSources)
}
UserData_LogsVisitedSources::UserData_LogsVisitedSources(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  sources_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.LogsVisitedSources)
}
UserData_LogsVisitedSources::UserData_LogsVisitedSources(const UserData_LogsVisitedSources& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sources_(from.sources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.LogsVisitedSources)
}

void UserData_LogsVisitedSources::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_LogsVisitedSources::~UserData_LogsVisitedSources() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.LogsVisitedSources)
  SharedDtor();
}

void UserData_LogsVisitedSources::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_LogsVisitedSources::ArenaDtor(void* object) {
  UserData_LogsVisitedSources* _this = reinterpret_cast< UserData_LogsVisitedSources* >(object);
  (void)_this;
}
void UserData_LogsVisitedSources::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_LogsVisitedSources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_LogsVisitedSources::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_LogsVisitedSources& UserData_LogsVisitedSources::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_LogsVisitedSources* UserData_LogsVisitedSources::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_LogsVisitedSources>(arena);
}

void UserData_LogsVisitedSources::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.LogsVisitedSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_LogsVisitedSources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.LogsVisitedSources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.UserData.LogsVisitedSource sources = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.LogsVisitedSources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.LogsVisitedSources)
  return false;
#undef DO_
}

void UserData_LogsVisitedSources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.LogsVisitedSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .cosmo.pb.UserData.LogsVisitedSource sources = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sources(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.LogsVisitedSources)
}

::google::protobuf::uint8* UserData_LogsVisitedSources::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.LogsVisitedSources)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .cosmo.pb.UserData.LogsVisitedSource sources = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sources_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sources(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.LogsVisitedSources)
  return target;
}

size_t UserData_LogsVisitedSources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.LogsVisitedSources)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.LogsVisitedSource sources = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sources(static_cast<int>(i)));
    }
  }

  // optional uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_LogsVisitedSources::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.LogsVisitedSources)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_LogsVisitedSources* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_LogsVisitedSources>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.LogsVisitedSources)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.LogsVisitedSources)
    MergeFrom(*source);
  }
}

void UserData_LogsVisitedSources::MergeFrom(const UserData_LogsVisitedSources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.LogsVisitedSources)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_LogsVisitedSources::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.LogsVisitedSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_LogsVisitedSources::CopyFrom(const UserData_LogsVisitedSources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.LogsVisitedSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_LogsVisitedSources::IsInitialized() const {
  return true;
}

void UserData_LogsVisitedSources::Swap(UserData_LogsVisitedSources* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_LogsVisitedSources* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_LogsVisitedSources::UnsafeArenaSwap(UserData_LogsVisitedSources* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_LogsVisitedSources::InternalSwap(UserData_LogsVisitedSources* other) {
  using std::swap;
  sources_.InternalSwap(&other->sources_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_LogsVisitedSources::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_LogsVisitedSources

// optional uint32 version = 1;
bool UserData_LogsVisitedSources::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_LogsVisitedSources::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_LogsVisitedSources::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_LogsVisitedSources::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_LogsVisitedSources::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedSources.version)
  return version_;
}
void UserData_LogsVisitedSources::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.LogsVisitedSources.version)
}

// repeated .cosmo.pb.UserData.LogsVisitedSource sources = 2;
int UserData_LogsVisitedSources::sources_size() const {
  return sources_.size();
}
void UserData_LogsVisitedSources::clear_sources() {
  sources_.Clear();
}
const ::cosmo::pb::UserData_LogsVisitedSource& UserData_LogsVisitedSources::sources(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedSources.sources)
  return sources_.Get(index);
}
::cosmo::pb::UserData_LogsVisitedSource* UserData_LogsVisitedSources::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.LogsVisitedSources.sources)
  return sources_.Mutable(index);
}
::cosmo::pb::UserData_LogsVisitedSource* UserData_LogsVisitedSources::add_sources() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.LogsVisitedSources.sources)
  return sources_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_LogsVisitedSource >*
UserData_LogsVisitedSources::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.LogsVisitedSources.sources)
  return &sources_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_LogsVisitedSource >&
UserData_LogsVisitedSources::sources() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.LogsVisitedSources.sources)
  return sources_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_LogsVisitedSource::kSourceIdFieldNumber;
const int UserData_LogsVisitedSource::kSourceUrlsFieldNumber;
const int UserData_LogsVisitedSource::kSourceLastTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_LogsVisitedSource::UserData_LogsVisitedSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.LogsVisitedSource)
}
UserData_LogsVisitedSource::UserData_LogsVisitedSource(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.LogsVisitedSource)
}
UserData_LogsVisitedSource::UserData_LogsVisitedSource(const UserData_LogsVisitedSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_last_ts_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(source_last_ts_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.LogsVisitedSource)
}

void UserData_LogsVisitedSource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_last_ts_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(source_last_ts_));
}

UserData_LogsVisitedSource::~UserData_LogsVisitedSource() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.LogsVisitedSource)
  SharedDtor();
}

void UserData_LogsVisitedSource::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_LogsVisitedSource::ArenaDtor(void* object) {
  UserData_LogsVisitedSource* _this = reinterpret_cast< UserData_LogsVisitedSource* >(object);
  (void)_this;
}
void UserData_LogsVisitedSource::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_LogsVisitedSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_LogsVisitedSource::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_LogsVisitedSource& UserData_LogsVisitedSource::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_LogsVisitedSource* UserData_LogsVisitedSource::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_LogsVisitedSource>(arena);
}

void UserData_LogsVisitedSource::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.LogsVisitedSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_last_ts_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(source_last_ts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_LogsVisitedSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.LogsVisitedSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 source_urls = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_source_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 source_last_ts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_source_last_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_last_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.LogsVisitedSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.LogsVisitedSource)
  return false;
#undef DO_
}

void UserData_LogsVisitedSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.LogsVisitedSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // optional int64 source_urls = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->source_urls(), output);
  }

  // optional int64 source_last_ts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->source_last_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.LogsVisitedSource)
}

::google::protobuf::uint8* UserData_LogsVisitedSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.LogsVisitedSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // optional int64 source_urls = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->source_urls(), target);
  }

  // optional int64 source_last_ts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->source_last_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.LogsVisitedSource)
  return target;
}

size_t UserData_LogsVisitedSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.LogsVisitedSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 source_id = 1;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_id());
    }

    // optional int64 source_urls = 2;
    if (has_source_urls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_urls());
    }

    // optional int64 source_last_ts = 3;
    if (has_source_last_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_last_ts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_LogsVisitedSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.LogsVisitedSource)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_LogsVisitedSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_LogsVisitedSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.LogsVisitedSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.LogsVisitedSource)
    MergeFrom(*source);
  }
}

void UserData_LogsVisitedSource::MergeFrom(const UserData_LogsVisitedSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.LogsVisitedSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_urls_ = from.source_urls_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_last_ts_ = from.source_last_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_LogsVisitedSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.LogsVisitedSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_LogsVisitedSource::CopyFrom(const UserData_LogsVisitedSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.LogsVisitedSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_LogsVisitedSource::IsInitialized() const {
  return true;
}

void UserData_LogsVisitedSource::Swap(UserData_LogsVisitedSource* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_LogsVisitedSource* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_LogsVisitedSource::UnsafeArenaSwap(UserData_LogsVisitedSource* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_LogsVisitedSource::InternalSwap(UserData_LogsVisitedSource* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(source_urls_, other->source_urls_);
  swap(source_last_ts_, other->source_last_ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_LogsVisitedSource::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_LogsVisitedSource

// optional int64 source_id = 1;
bool UserData_LogsVisitedSource::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_LogsVisitedSource::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_LogsVisitedSource::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_LogsVisitedSource::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 UserData_LogsVisitedSource::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedSource.source_id)
  return source_id_;
}
void UserData_LogsVisitedSource::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.LogsVisitedSource.source_id)
}

// optional int64 source_urls = 2;
bool UserData_LogsVisitedSource::has_source_urls() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_LogsVisitedSource::set_has_source_urls() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_LogsVisitedSource::clear_has_source_urls() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_LogsVisitedSource::clear_source_urls() {
  source_urls_ = GOOGLE_LONGLONG(0);
  clear_has_source_urls();
}
::google::protobuf::int64 UserData_LogsVisitedSource::source_urls() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedSource.source_urls)
  return source_urls_;
}
void UserData_LogsVisitedSource::set_source_urls(::google::protobuf::int64 value) {
  set_has_source_urls();
  source_urls_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.LogsVisitedSource.source_urls)
}

// optional int64 source_last_ts = 3;
bool UserData_LogsVisitedSource::has_source_last_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_LogsVisitedSource::set_has_source_last_ts() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_LogsVisitedSource::clear_has_source_last_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_LogsVisitedSource::clear_source_last_ts() {
  source_last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_source_last_ts();
}
::google::protobuf::int64 UserData_LogsVisitedSource::source_last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedSource.source_last_ts)
  return source_last_ts_;
}
void UserData_LogsVisitedSource::set_source_last_ts(::google::protobuf::int64 value) {
  set_has_source_last_ts();
  source_last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.LogsVisitedSource.source_last_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SitesForUser::kVersionFieldNumber;
const int UserData_SitesForUser::kSiteHashFieldNumber;
const int UserData_SitesForUser::kSiteVisitsFieldNumber;
const int UserData_SitesForUser::kSiteUrlsFieldNumber;
const int UserData_SitesForUser::kSiteLastTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SitesForUser::UserData_SitesForUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SitesForUser)
}
UserData_SitesForUser::UserData_SitesForUser(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  site_hash_(arena),
  site_visits_(arena),
  site_urls_(arena),
  site_last_ts_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.SitesForUser)
}
UserData_SitesForUser::UserData_SitesForUser(const UserData_SitesForUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      site_hash_(from.site_hash_),
      site_visits_(from.site_visits_),
      site_urls_(from.site_urls_),
      site_last_ts_(from.site_last_ts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SitesForUser)
}

void UserData_SitesForUser::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_SitesForUser::~UserData_SitesForUser() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SitesForUser)
  SharedDtor();
}

void UserData_SitesForUser::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_SitesForUser::ArenaDtor(void* object) {
  UserData_SitesForUser* _this = reinterpret_cast< UserData_SitesForUser* >(object);
  (void)_this;
}
void UserData_SitesForUser::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_SitesForUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SitesForUser::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SitesForUser& UserData_SitesForUser::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SitesForUser* UserData_SitesForUser::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_SitesForUser>(arena);
}

void UserData_SitesForUser::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SitesForUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_hash_.Clear();
  site_visits_.Clear();
  site_urls_.Clear();
  site_last_ts_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SitesForUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SitesForUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 site_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_site_hash())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_site_hash())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 site_visits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_site_visits())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_site_visits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 site_urls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_site_urls())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_site_urls())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 site_last_ts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40u, input, this->mutable_site_last_ts())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_site_last_ts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SitesForUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SitesForUser)
  return false;
#undef DO_
}

void UserData_SitesForUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SitesForUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated int64 site_hash = 2;
  for (int i = 0, n = this->site_hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->site_hash(i), output);
  }

  // repeated uint32 site_visits = 3;
  for (int i = 0, n = this->site_visits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->site_visits(i), output);
  }

  // repeated uint32 site_urls = 4;
  for (int i = 0, n = this->site_urls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->site_urls(i), output);
  }

  // repeated int64 site_last_ts = 5;
  for (int i = 0, n = this->site_last_ts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->site_last_ts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SitesForUser)
}

::google::protobuf::uint8* UserData_SitesForUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SitesForUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated int64 site_hash = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->site_hash_, target);

  // repeated uint32 site_visits = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->site_visits_, target);

  // repeated uint32 site_urls = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->site_urls_, target);

  // repeated int64 site_last_ts = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(5, this->site_last_ts_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SitesForUser)
  return target;
}

size_t UserData_SitesForUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SitesForUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated int64 site_hash = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->site_hash_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->site_hash_size());
    total_size += data_size;
  }

  // repeated uint32 site_visits = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->site_visits_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->site_visits_size());
    total_size += data_size;
  }

  // repeated uint32 site_urls = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->site_urls_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->site_urls_size());
    total_size += data_size;
  }

  // repeated int64 site_last_ts = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->site_last_ts_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->site_last_ts_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SitesForUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SitesForUser)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SitesForUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SitesForUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SitesForUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SitesForUser)
    MergeFrom(*source);
  }
}

void UserData_SitesForUser::MergeFrom(const UserData_SitesForUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SitesForUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  site_hash_.MergeFrom(from.site_hash_);
  site_visits_.MergeFrom(from.site_visits_);
  site_urls_.MergeFrom(from.site_urls_);
  site_last_ts_.MergeFrom(from.site_last_ts_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_SitesForUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SitesForUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SitesForUser::CopyFrom(const UserData_SitesForUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SitesForUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SitesForUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_SitesForUser::Swap(UserData_SitesForUser* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_SitesForUser* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_SitesForUser::UnsafeArenaSwap(UserData_SitesForUser* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_SitesForUser::InternalSwap(UserData_SitesForUser* other) {
  using std::swap;
  site_hash_.InternalSwap(&other->site_hash_);
  site_visits_.InternalSwap(&other->site_visits_);
  site_urls_.InternalSwap(&other->site_urls_);
  site_last_ts_.InternalSwap(&other->site_last_ts_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SitesForUser::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SitesForUser

// required uint32 version = 1;
bool UserData_SitesForUser::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SitesForUser::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SitesForUser::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SitesForUser::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_SitesForUser::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SitesForUser.version)
  return version_;
}
void UserData_SitesForUser::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SitesForUser.version)
}

// repeated int64 site_hash = 2;
int UserData_SitesForUser::site_hash_size() const {
  return site_hash_.size();
}
void UserData_SitesForUser::clear_site_hash() {
  site_hash_.Clear();
}
::google::protobuf::int64 UserData_SitesForUser::site_hash(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SitesForUser.site_hash)
  return site_hash_.Get(index);
}
void UserData_SitesForUser::set_site_hash(int index, ::google::protobuf::int64 value) {
  site_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SitesForUser.site_hash)
}
void UserData_SitesForUser::add_site_hash(::google::protobuf::int64 value) {
  site_hash_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SitesForUser.site_hash)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_SitesForUser::site_hash() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SitesForUser.site_hash)
  return site_hash_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_SitesForUser::mutable_site_hash() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SitesForUser.site_hash)
  return &site_hash_;
}

// repeated uint32 site_visits = 3;
int UserData_SitesForUser::site_visits_size() const {
  return site_visits_.size();
}
void UserData_SitesForUser::clear_site_visits() {
  site_visits_.Clear();
}
::google::protobuf::uint32 UserData_SitesForUser::site_visits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SitesForUser.site_visits)
  return site_visits_.Get(index);
}
void UserData_SitesForUser::set_site_visits(int index, ::google::protobuf::uint32 value) {
  site_visits_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SitesForUser.site_visits)
}
void UserData_SitesForUser::add_site_visits(::google::protobuf::uint32 value) {
  site_visits_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SitesForUser.site_visits)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserData_SitesForUser::site_visits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SitesForUser.site_visits)
  return site_visits_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserData_SitesForUser::mutable_site_visits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SitesForUser.site_visits)
  return &site_visits_;
}

// repeated uint32 site_urls = 4;
int UserData_SitesForUser::site_urls_size() const {
  return site_urls_.size();
}
void UserData_SitesForUser::clear_site_urls() {
  site_urls_.Clear();
}
::google::protobuf::uint32 UserData_SitesForUser::site_urls(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SitesForUser.site_urls)
  return site_urls_.Get(index);
}
void UserData_SitesForUser::set_site_urls(int index, ::google::protobuf::uint32 value) {
  site_urls_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SitesForUser.site_urls)
}
void UserData_SitesForUser::add_site_urls(::google::protobuf::uint32 value) {
  site_urls_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SitesForUser.site_urls)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserData_SitesForUser::site_urls() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SitesForUser.site_urls)
  return site_urls_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserData_SitesForUser::mutable_site_urls() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SitesForUser.site_urls)
  return &site_urls_;
}

// repeated int64 site_last_ts = 5;
int UserData_SitesForUser::site_last_ts_size() const {
  return site_last_ts_.size();
}
void UserData_SitesForUser::clear_site_last_ts() {
  site_last_ts_.Clear();
}
::google::protobuf::int64 UserData_SitesForUser::site_last_ts(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SitesForUser.site_last_ts)
  return site_last_ts_.Get(index);
}
void UserData_SitesForUser::set_site_last_ts(int index, ::google::protobuf::int64 value) {
  site_last_ts_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SitesForUser.site_last_ts)
}
void UserData_SitesForUser::add_site_last_ts(::google::protobuf::int64 value) {
  site_last_ts_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SitesForUser.site_last_ts)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_SitesForUser::site_last_ts() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SitesForUser.site_last_ts)
  return site_last_ts_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_SitesForUser::mutable_site_last_ts() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SitesForUser.site_last_ts)
  return &site_last_ts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_VkGroupsForUser::kVersionFieldNumber;
const int UserData_VkGroupsForUser::kGroupUrlHashFieldNumber;
const int UserData_VkGroupsForUser::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_VkGroupsForUser::UserData_VkGroupsForUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.VkGroupsForUser)
}
UserData_VkGroupsForUser::UserData_VkGroupsForUser(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  group_url_hash_(arena),
  rank_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.VkGroupsForUser)
}
UserData_VkGroupsForUser::UserData_VkGroupsForUser(const UserData_VkGroupsForUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      group_url_hash_(from.group_url_hash_),
      rank_(from.rank_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.VkGroupsForUser)
}

void UserData_VkGroupsForUser::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_VkGroupsForUser::~UserData_VkGroupsForUser() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.VkGroupsForUser)
  SharedDtor();
}

void UserData_VkGroupsForUser::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_VkGroupsForUser::ArenaDtor(void* object) {
  UserData_VkGroupsForUser* _this = reinterpret_cast< UserData_VkGroupsForUser* >(object);
  (void)_this;
}
void UserData_VkGroupsForUser::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_VkGroupsForUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_VkGroupsForUser::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_VkGroupsForUser& UserData_VkGroupsForUser::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_VkGroupsForUser* UserData_VkGroupsForUser::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_VkGroupsForUser>(arena);
}

void UserData_VkGroupsForUser::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.VkGroupsForUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_url_hash_.Clear();
  rank_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_VkGroupsForUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.VkGroupsForUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 group_url_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_group_url_hash())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_group_url_hash())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_rank())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rank())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.VkGroupsForUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.VkGroupsForUser)
  return false;
#undef DO_
}

void UserData_VkGroupsForUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.VkGroupsForUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated int64 group_url_hash = 2;
  for (int i = 0, n = this->group_url_hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->group_url_hash(i), output);
  }

  // repeated float rank = 3;
  for (int i = 0, n = this->rank_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->rank(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.VkGroupsForUser)
}

::google::protobuf::uint8* UserData_VkGroupsForUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.VkGroupsForUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated int64 group_url_hash = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->group_url_hash_, target);

  // repeated float rank = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->rank_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.VkGroupsForUser)
  return target;
}

size_t UserData_VkGroupsForUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.VkGroupsForUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated int64 group_url_hash = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->group_url_hash_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->group_url_hash_size());
    total_size += data_size;
  }

  // repeated float rank = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->rank_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->rank_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_VkGroupsForUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.VkGroupsForUser)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_VkGroupsForUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_VkGroupsForUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.VkGroupsForUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.VkGroupsForUser)
    MergeFrom(*source);
  }
}

void UserData_VkGroupsForUser::MergeFrom(const UserData_VkGroupsForUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.VkGroupsForUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_url_hash_.MergeFrom(from.group_url_hash_);
  rank_.MergeFrom(from.rank_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_VkGroupsForUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.VkGroupsForUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_VkGroupsForUser::CopyFrom(const UserData_VkGroupsForUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.VkGroupsForUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_VkGroupsForUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_VkGroupsForUser::Swap(UserData_VkGroupsForUser* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_VkGroupsForUser* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_VkGroupsForUser::UnsafeArenaSwap(UserData_VkGroupsForUser* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_VkGroupsForUser::InternalSwap(UserData_VkGroupsForUser* other) {
  using std::swap;
  group_url_hash_.InternalSwap(&other->group_url_hash_);
  rank_.InternalSwap(&other->rank_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_VkGroupsForUser::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_VkGroupsForUser

// required uint32 version = 1;
bool UserData_VkGroupsForUser::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_VkGroupsForUser::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_VkGroupsForUser::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_VkGroupsForUser::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_VkGroupsForUser::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VkGroupsForUser.version)
  return version_;
}
void UserData_VkGroupsForUser::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VkGroupsForUser.version)
}

// repeated int64 group_url_hash = 2;
int UserData_VkGroupsForUser::group_url_hash_size() const {
  return group_url_hash_.size();
}
void UserData_VkGroupsForUser::clear_group_url_hash() {
  group_url_hash_.Clear();
}
::google::protobuf::int64 UserData_VkGroupsForUser::group_url_hash(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VkGroupsForUser.group_url_hash)
  return group_url_hash_.Get(index);
}
void UserData_VkGroupsForUser::set_group_url_hash(int index, ::google::protobuf::int64 value) {
  group_url_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VkGroupsForUser.group_url_hash)
}
void UserData_VkGroupsForUser::add_group_url_hash(::google::protobuf::int64 value) {
  group_url_hash_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.VkGroupsForUser.group_url_hash)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_VkGroupsForUser::group_url_hash() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.VkGroupsForUser.group_url_hash)
  return group_url_hash_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_VkGroupsForUser::mutable_group_url_hash() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.VkGroupsForUser.group_url_hash)
  return &group_url_hash_;
}

// repeated float rank = 3;
int UserData_VkGroupsForUser::rank_size() const {
  return rank_.size();
}
void UserData_VkGroupsForUser::clear_rank() {
  rank_.Clear();
}
float UserData_VkGroupsForUser::rank(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VkGroupsForUser.rank)
  return rank_.Get(index);
}
void UserData_VkGroupsForUser::set_rank(int index, float value) {
  rank_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VkGroupsForUser.rank)
}
void UserData_VkGroupsForUser::add_rank(float value) {
  rank_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.VkGroupsForUser.rank)
}
const ::google::protobuf::RepeatedField< float >&
UserData_VkGroupsForUser::rank() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.VkGroupsForUser.rank)
  return rank_;
}
::google::protobuf::RepeatedField< float >*
UserData_VkGroupsForUser::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.VkGroupsForUser.rank)
  return &rank_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserKeywords::kVersionFieldNumber;
const int UserData_UserKeywords::kKeywordHashFieldNumber;
const int UserData_UserKeywords::kKeywordWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserKeywords::UserData_UserKeywords()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserKeywords)
}
UserData_UserKeywords::UserData_UserKeywords(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  keyword_hash_(arena),
  keyword_weight_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserKeywords)
}
UserData_UserKeywords::UserData_UserKeywords(const UserData_UserKeywords& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keyword_hash_(from.keyword_hash_),
      keyword_weight_(from.keyword_weight_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserKeywords)
}

void UserData_UserKeywords::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_UserKeywords::~UserData_UserKeywords() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserKeywords)
  SharedDtor();
}

void UserData_UserKeywords::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserKeywords::ArenaDtor(void* object) {
  UserData_UserKeywords* _this = reinterpret_cast< UserData_UserKeywords* >(object);
  (void)_this;
}
void UserData_UserKeywords::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserKeywords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserKeywords::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserKeywords& UserData_UserKeywords::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserKeywords* UserData_UserKeywords::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserKeywords>(arena);
}

void UserData_UserKeywords::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserKeywords)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyword_hash_.Clear();
  keyword_weight_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserKeywords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserKeywords)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 keyword_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_keyword_hash())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_keyword_hash())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float keyword_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_keyword_weight())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_keyword_weight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserKeywords)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserKeywords)
  return false;
#undef DO_
}

void UserData_UserKeywords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserKeywords)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated int64 keyword_hash = 2;
  for (int i = 0, n = this->keyword_hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->keyword_hash(i), output);
  }

  // repeated float keyword_weight = 3;
  for (int i = 0, n = this->keyword_weight_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->keyword_weight(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserKeywords)
}

::google::protobuf::uint8* UserData_UserKeywords::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserKeywords)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated int64 keyword_hash = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->keyword_hash_, target);

  // repeated float keyword_weight = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->keyword_weight_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserKeywords)
  return target;
}

size_t UserData_UserKeywords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserKeywords)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated int64 keyword_hash = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->keyword_hash_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->keyword_hash_size());
    total_size += data_size;
  }

  // repeated float keyword_weight = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->keyword_weight_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->keyword_weight_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserKeywords::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserKeywords)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserKeywords* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserKeywords>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserKeywords)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserKeywords)
    MergeFrom(*source);
  }
}

void UserData_UserKeywords::MergeFrom(const UserData_UserKeywords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserKeywords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyword_hash_.MergeFrom(from.keyword_hash_);
  keyword_weight_.MergeFrom(from.keyword_weight_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_UserKeywords::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserKeywords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserKeywords::CopyFrom(const UserData_UserKeywords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserKeywords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserKeywords::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_UserKeywords::Swap(UserData_UserKeywords* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserKeywords* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserKeywords::UnsafeArenaSwap(UserData_UserKeywords* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserKeywords::InternalSwap(UserData_UserKeywords* other) {
  using std::swap;
  keyword_hash_.InternalSwap(&other->keyword_hash_);
  keyword_weight_.InternalSwap(&other->keyword_weight_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserKeywords::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserKeywords

// required uint32 version = 1;
bool UserData_UserKeywords::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserKeywords::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserKeywords::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserKeywords::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_UserKeywords::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserKeywords.version)
  return version_;
}
void UserData_UserKeywords::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserKeywords.version)
}

// repeated int64 keyword_hash = 2;
int UserData_UserKeywords::keyword_hash_size() const {
  return keyword_hash_.size();
}
void UserData_UserKeywords::clear_keyword_hash() {
  keyword_hash_.Clear();
}
::google::protobuf::int64 UserData_UserKeywords::keyword_hash(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserKeywords.keyword_hash)
  return keyword_hash_.Get(index);
}
void UserData_UserKeywords::set_keyword_hash(int index, ::google::protobuf::int64 value) {
  keyword_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserKeywords.keyword_hash)
}
void UserData_UserKeywords::add_keyword_hash(::google::protobuf::int64 value) {
  keyword_hash_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserKeywords.keyword_hash)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_UserKeywords::keyword_hash() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserKeywords.keyword_hash)
  return keyword_hash_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_UserKeywords::mutable_keyword_hash() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserKeywords.keyword_hash)
  return &keyword_hash_;
}

// repeated float keyword_weight = 3;
int UserData_UserKeywords::keyword_weight_size() const {
  return keyword_weight_.size();
}
void UserData_UserKeywords::clear_keyword_weight() {
  keyword_weight_.Clear();
}
float UserData_UserKeywords::keyword_weight(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserKeywords.keyword_weight)
  return keyword_weight_.Get(index);
}
void UserData_UserKeywords::set_keyword_weight(int index, float value) {
  keyword_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserKeywords.keyword_weight)
}
void UserData_UserKeywords::add_keyword_weight(float value) {
  keyword_weight_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserKeywords.keyword_weight)
}
const ::google::protobuf::RepeatedField< float >&
UserData_UserKeywords::keyword_weight() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserKeywords.keyword_weight)
  return keyword_weight_;
}
::google::protobuf::RepeatedField< float >*
UserData_UserKeywords::mutable_keyword_weight() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserKeywords.keyword_weight)
  return &keyword_weight_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserEvents_SiteDislike::kSiteHashFieldNumber;
const int UserData_UserEvents_SiteDislike::kLastTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserEvents_SiteDislike::UserData_UserEvents_SiteDislike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserEvents.SiteDislike)
}
UserData_UserEvents_SiteDislike::UserData_UserEvents_SiteDislike(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserEvents.SiteDislike)
}
UserData_UserEvents_SiteDislike::UserData_UserEvents_SiteDislike(const UserData_UserEvents_SiteDislike& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&site_hash_, &from.site_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_ts_) -
    reinterpret_cast<char*>(&site_hash_)) + sizeof(last_ts_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserEvents.SiteDislike)
}

void UserData_UserEvents_SiteDislike::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&site_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_ts_) -
      reinterpret_cast<char*>(&site_hash_)) + sizeof(last_ts_));
}

UserData_UserEvents_SiteDislike::~UserData_UserEvents_SiteDislike() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserEvents.SiteDislike)
  SharedDtor();
}

void UserData_UserEvents_SiteDislike::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserEvents_SiteDislike::ArenaDtor(void* object) {
  UserData_UserEvents_SiteDislike* _this = reinterpret_cast< UserData_UserEvents_SiteDislike* >(object);
  (void)_this;
}
void UserData_UserEvents_SiteDislike::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserEvents_SiteDislike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserEvents_SiteDislike::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserEvents_SiteDislike& UserData_UserEvents_SiteDislike::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserEvents_SiteDislike* UserData_UserEvents_SiteDislike::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserEvents_SiteDislike>(arena);
}

void UserData_UserEvents_SiteDislike::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserEvents.SiteDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&site_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_ts_) -
        reinterpret_cast<char*>(&site_hash_)) + sizeof(last_ts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserEvents_SiteDislike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserEvents.SiteDislike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 site_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_site_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &site_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserEvents.SiteDislike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserEvents.SiteDislike)
  return false;
#undef DO_
}

void UserData_UserEvents_SiteDislike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserEvents.SiteDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 site_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->site_hash(), output);
  }

  // optional int64 last_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserEvents.SiteDislike)
}

::google::protobuf::uint8* UserData_UserEvents_SiteDislike::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserEvents.SiteDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 site_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->site_hash(), target);
  }

  // optional int64 last_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserEvents.SiteDislike)
  return target;
}

size_t UserData_UserEvents_SiteDislike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserEvents.SiteDislike)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 site_hash = 1;
  if (has_site_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->site_hash());
  }
  // optional int64 last_ts = 2;
  if (has_last_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserEvents_SiteDislike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserEvents.SiteDislike)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserEvents_SiteDislike* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserEvents_SiteDislike>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserEvents.SiteDislike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserEvents.SiteDislike)
    MergeFrom(*source);
  }
}

void UserData_UserEvents_SiteDislike::MergeFrom(const UserData_UserEvents_SiteDislike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserEvents.SiteDislike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      site_hash_ = from.site_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_ts_ = from.last_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserEvents_SiteDislike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserEvents.SiteDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserEvents_SiteDislike::CopyFrom(const UserData_UserEvents_SiteDislike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserEvents.SiteDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserEvents_SiteDislike::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_UserEvents_SiteDislike::Swap(UserData_UserEvents_SiteDislike* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserEvents_SiteDislike* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserEvents_SiteDislike::UnsafeArenaSwap(UserData_UserEvents_SiteDislike* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserEvents_SiteDislike::InternalSwap(UserData_UserEvents_SiteDislike* other) {
  using std::swap;
  swap(site_hash_, other->site_hash_);
  swap(last_ts_, other->last_ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserEvents_SiteDislike::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserEvents_SiteDislike

// required int64 site_hash = 1;
bool UserData_UserEvents_SiteDislike::has_site_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserEvents_SiteDislike::set_has_site_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserEvents_SiteDislike::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserEvents_SiteDislike::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
::google::protobuf::int64 UserData_UserEvents_SiteDislike::site_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.SiteDislike.site_hash)
  return site_hash_;
}
void UserData_UserEvents_SiteDislike::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.SiteDislike.site_hash)
}

// optional int64 last_ts = 2;
bool UserData_UserEvents_SiteDislike::has_last_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserEvents_SiteDislike::set_has_last_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserEvents_SiteDislike::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserEvents_SiteDislike::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
::google::protobuf::int64 UserData_UserEvents_SiteDislike::last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.SiteDislike.last_ts)
  return last_ts_;
}
void UserData_UserEvents_SiteDislike::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.SiteDislike.last_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserEvents_SourceDislike::kSourceIdFieldNumber;
const int UserData_UserEvents_SourceDislike::kLastTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserEvents_SourceDislike::UserData_UserEvents_SourceDislike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserEvents.SourceDislike)
}
UserData_UserEvents_SourceDislike::UserData_UserEvents_SourceDislike(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserEvents.SourceDislike)
}
UserData_UserEvents_SourceDislike::UserData_UserEvents_SourceDislike(const UserData_UserEvents_SourceDislike& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_ts_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(last_ts_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserEvents.SourceDislike)
}

void UserData_UserEvents_SourceDislike::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_ts_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(last_ts_));
}

UserData_UserEvents_SourceDislike::~UserData_UserEvents_SourceDislike() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserEvents.SourceDislike)
  SharedDtor();
}

void UserData_UserEvents_SourceDislike::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserEvents_SourceDislike::ArenaDtor(void* object) {
  UserData_UserEvents_SourceDislike* _this = reinterpret_cast< UserData_UserEvents_SourceDislike* >(object);
  (void)_this;
}
void UserData_UserEvents_SourceDislike::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserEvents_SourceDislike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserEvents_SourceDislike::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserEvents_SourceDislike& UserData_UserEvents_SourceDislike::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserEvents_SourceDislike* UserData_UserEvents_SourceDislike::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserEvents_SourceDislike>(arena);
}

void UserData_UserEvents_SourceDislike::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserEvents.SourceDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_ts_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(last_ts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserEvents_SourceDislike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserEvents.SourceDislike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserEvents.SourceDislike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserEvents.SourceDislike)
  return false;
#undef DO_
}

void UserData_UserEvents_SourceDislike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserEvents.SourceDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // optional int64 last_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserEvents.SourceDislike)
}

::google::protobuf::uint8* UserData_UserEvents_SourceDislike::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserEvents.SourceDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // optional int64 last_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserEvents.SourceDislike)
  return target;
}

size_t UserData_UserEvents_SourceDislike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserEvents.SourceDislike)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 source_id = 1;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }
  // optional int64 last_ts = 2;
  if (has_last_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserEvents_SourceDislike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserEvents.SourceDislike)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserEvents_SourceDislike* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserEvents_SourceDislike>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserEvents.SourceDislike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserEvents.SourceDislike)
    MergeFrom(*source);
  }
}

void UserData_UserEvents_SourceDislike::MergeFrom(const UserData_UserEvents_SourceDislike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserEvents.SourceDislike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_ts_ = from.last_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserEvents_SourceDislike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserEvents.SourceDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserEvents_SourceDislike::CopyFrom(const UserData_UserEvents_SourceDislike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserEvents.SourceDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserEvents_SourceDislike::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_UserEvents_SourceDislike::Swap(UserData_UserEvents_SourceDislike* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserEvents_SourceDislike* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserEvents_SourceDislike::UnsafeArenaSwap(UserData_UserEvents_SourceDislike* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserEvents_SourceDislike::InternalSwap(UserData_UserEvents_SourceDislike* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(last_ts_, other->last_ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserEvents_SourceDislike::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserEvents_SourceDislike

// required int64 source_id = 1;
bool UserData_UserEvents_SourceDislike::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserEvents_SourceDislike::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserEvents_SourceDislike::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserEvents_SourceDislike::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 UserData_UserEvents_SourceDislike::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.SourceDislike.source_id)
  return source_id_;
}
void UserData_UserEvents_SourceDislike::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.SourceDislike.source_id)
}

// optional int64 last_ts = 2;
bool UserData_UserEvents_SourceDislike::has_last_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserEvents_SourceDislike::set_has_last_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserEvents_SourceDislike::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserEvents_SourceDislike::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
::google::protobuf::int64 UserData_UserEvents_SourceDislike::last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.SourceDislike.last_ts)
  return last_ts_;
}
void UserData_UserEvents_SourceDislike::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.SourceDislike.last_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserEvents_DocumentDislike::kDocIdFieldNumber;
const int UserData_UserEvents_DocumentDislike::kLastTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserEvents_DocumentDislike::UserData_UserEvents_DocumentDislike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserEvents.DocumentDislike)
}
UserData_UserEvents_DocumentDislike::UserData_UserEvents_DocumentDislike(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserEvents.DocumentDislike)
}
UserData_UserEvents_DocumentDislike::UserData_UserEvents_DocumentDislike(const UserData_UserEvents_DocumentDislike& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_ts_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(last_ts_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserEvents.DocumentDislike)
}

void UserData_UserEvents_DocumentDislike::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&doc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_ts_) -
      reinterpret_cast<char*>(&doc_id_)) + sizeof(last_ts_));
}

UserData_UserEvents_DocumentDislike::~UserData_UserEvents_DocumentDislike() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserEvents.DocumentDislike)
  SharedDtor();
}

void UserData_UserEvents_DocumentDislike::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserEvents_DocumentDislike::ArenaDtor(void* object) {
  UserData_UserEvents_DocumentDislike* _this = reinterpret_cast< UserData_UserEvents_DocumentDislike* >(object);
  (void)_this;
}
void UserData_UserEvents_DocumentDislike::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserEvents_DocumentDislike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserEvents_DocumentDislike::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserEvents_DocumentDislike& UserData_UserEvents_DocumentDislike::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserEvents_DocumentDislike* UserData_UserEvents_DocumentDislike::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserEvents_DocumentDislike>(arena);
}

void UserData_UserEvents_DocumentDislike::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserEvents.DocumentDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_ts_) -
        reinterpret_cast<char*>(&doc_id_)) + sizeof(last_ts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserEvents_DocumentDislike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserEvents.DocumentDislike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserEvents.DocumentDislike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserEvents.DocumentDislike)
  return false;
#undef DO_
}

void UserData_UserEvents_DocumentDislike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserEvents.DocumentDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->doc_id(), output);
  }

  // optional int64 last_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserEvents.DocumentDislike)
}

::google::protobuf::uint8* UserData_UserEvents_DocumentDislike::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserEvents.DocumentDislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->doc_id(), target);
  }

  // optional int64 last_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserEvents.DocumentDislike)
  return target;
}

size_t UserData_UserEvents_DocumentDislike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserEvents.DocumentDislike)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 doc_id = 1;
  if (has_doc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }
  // optional int64 last_ts = 2;
  if (has_last_ts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserEvents_DocumentDislike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserEvents.DocumentDislike)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserEvents_DocumentDislike* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserEvents_DocumentDislike>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserEvents.DocumentDislike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserEvents.DocumentDislike)
    MergeFrom(*source);
  }
}

void UserData_UserEvents_DocumentDislike::MergeFrom(const UserData_UserEvents_DocumentDislike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserEvents.DocumentDislike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_ts_ = from.last_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserEvents_DocumentDislike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserEvents.DocumentDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserEvents_DocumentDislike::CopyFrom(const UserData_UserEvents_DocumentDislike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserEvents.DocumentDislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserEvents_DocumentDislike::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_UserEvents_DocumentDislike::Swap(UserData_UserEvents_DocumentDislike* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserEvents_DocumentDislike* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserEvents_DocumentDislike::UnsafeArenaSwap(UserData_UserEvents_DocumentDislike* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserEvents_DocumentDislike::InternalSwap(UserData_UserEvents_DocumentDislike* other) {
  using std::swap;
  swap(doc_id_, other->doc_id_);
  swap(last_ts_, other->last_ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserEvents_DocumentDislike::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserEvents_DocumentDislike

// required int64 doc_id = 1;
bool UserData_UserEvents_DocumentDislike::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserEvents_DocumentDislike::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserEvents_DocumentDislike::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserEvents_DocumentDislike::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 UserData_UserEvents_DocumentDislike::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.DocumentDislike.doc_id)
  return doc_id_;
}
void UserData_UserEvents_DocumentDislike::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.DocumentDislike.doc_id)
}

// optional int64 last_ts = 2;
bool UserData_UserEvents_DocumentDislike::has_last_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserEvents_DocumentDislike::set_has_last_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserEvents_DocumentDislike::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserEvents_DocumentDislike::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
::google::protobuf::int64 UserData_UserEvents_DocumentDislike::last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.DocumentDislike.last_ts)
  return last_ts_;
}
void UserData_UserEvents_DocumentDislike::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.DocumentDislike.last_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserEvents::kSiteDislikesFieldNumber;
const int UserData_UserEvents::kSourceDislikesFieldNumber;
const int UserData_UserEvents::kDocumentDislikesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserEvents::UserData_UserEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserEvents)
}
UserData_UserEvents::UserData_UserEvents(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  site_dislikes_(arena),
  source_dislikes_(arena),
  document_dislikes_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserEvents)
}
UserData_UserEvents::UserData_UserEvents(const UserData_UserEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      site_dislikes_(from.site_dislikes_),
      source_dislikes_(from.source_dislikes_),
      document_dislikes_(from.document_dislikes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserEvents)
}

void UserData_UserEvents::SharedCtor() {
  _cached_size_ = 0;
}

UserData_UserEvents::~UserData_UserEvents() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserEvents)
  SharedDtor();
}

void UserData_UserEvents::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserEvents::ArenaDtor(void* object) {
  UserData_UserEvents* _this = reinterpret_cast< UserData_UserEvents* >(object);
  (void)_this;
}
void UserData_UserEvents::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserEvents::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserEvents& UserData_UserEvents::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserEvents* UserData_UserEvents::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserEvents>(arena);
}

void UserData_UserEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_dislikes_.Clear();
  source_dislikes_.Clear();
  document_dislikes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.UserEvents.SiteDislike site_dislikes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_site_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.UserData.UserEvents.SourceDislike source_dislikes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.UserData.UserEvents.DocumentDislike document_dislikes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_document_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserEvents)
  return false;
#undef DO_
}

void UserData_UserEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.UserEvents.SiteDislike site_dislikes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->site_dislikes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->site_dislikes(static_cast<int>(i)), output);
  }

  // repeated .cosmo.pb.UserData.UserEvents.SourceDislike source_dislikes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_dislikes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->source_dislikes(static_cast<int>(i)), output);
  }

  // repeated .cosmo.pb.UserData.UserEvents.DocumentDislike document_dislikes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_dislikes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->document_dislikes(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserEvents)
}

::google::protobuf::uint8* UserData_UserEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.UserEvents.SiteDislike site_dislikes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->site_dislikes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->site_dislikes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cosmo.pb.UserData.UserEvents.SourceDislike source_dislikes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_dislikes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->source_dislikes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cosmo.pb.UserData.UserEvents.DocumentDislike document_dislikes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->document_dislikes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->document_dislikes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserEvents)
  return target;
}

size_t UserData_UserEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.UserEvents.SiteDislike site_dislikes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->site_dislikes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->site_dislikes(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.UserData.UserEvents.SourceDislike source_dislikes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->source_dislikes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source_dislikes(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.UserData.UserEvents.DocumentDislike document_dislikes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->document_dislikes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->document_dislikes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserEvents)
    MergeFrom(*source);
  }
}

void UserData_UserEvents::MergeFrom(const UserData_UserEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  site_dislikes_.MergeFrom(from.site_dislikes_);
  source_dislikes_.MergeFrom(from.source_dislikes_);
  document_dislikes_.MergeFrom(from.document_dislikes_);
}

void UserData_UserEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserEvents::CopyFrom(const UserData_UserEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserEvents::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->site_dislikes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->source_dislikes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->document_dislikes())) return false;
  return true;
}

void UserData_UserEvents::Swap(UserData_UserEvents* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserEvents* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserEvents::UnsafeArenaSwap(UserData_UserEvents* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserEvents::InternalSwap(UserData_UserEvents* other) {
  using std::swap;
  site_dislikes_.InternalSwap(&other->site_dislikes_);
  source_dislikes_.InternalSwap(&other->source_dislikes_);
  document_dislikes_.InternalSwap(&other->document_dislikes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserEvents::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserEvents

// repeated .cosmo.pb.UserData.UserEvents.SiteDislike site_dislikes = 1;
int UserData_UserEvents::site_dislikes_size() const {
  return site_dislikes_.size();
}
void UserData_UserEvents::clear_site_dislikes() {
  site_dislikes_.Clear();
}
const ::cosmo::pb::UserData_UserEvents_SiteDislike& UserData_UserEvents::site_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.site_dislikes)
  return site_dislikes_.Get(index);
}
::cosmo::pb::UserData_UserEvents_SiteDislike* UserData_UserEvents::mutable_site_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserEvents.site_dislikes)
  return site_dislikes_.Mutable(index);
}
::cosmo::pb::UserData_UserEvents_SiteDislike* UserData_UserEvents::add_site_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserEvents.site_dislikes)
  return site_dislikes_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SiteDislike >*
UserData_UserEvents::mutable_site_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserEvents.site_dislikes)
  return &site_dislikes_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SiteDislike >&
UserData_UserEvents::site_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserEvents.site_dislikes)
  return site_dislikes_;
}

// repeated .cosmo.pb.UserData.UserEvents.SourceDislike source_dislikes = 2;
int UserData_UserEvents::source_dislikes_size() const {
  return source_dislikes_.size();
}
void UserData_UserEvents::clear_source_dislikes() {
  source_dislikes_.Clear();
}
const ::cosmo::pb::UserData_UserEvents_SourceDislike& UserData_UserEvents::source_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.source_dislikes)
  return source_dislikes_.Get(index);
}
::cosmo::pb::UserData_UserEvents_SourceDislike* UserData_UserEvents::mutable_source_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserEvents.source_dislikes)
  return source_dislikes_.Mutable(index);
}
::cosmo::pb::UserData_UserEvents_SourceDislike* UserData_UserEvents::add_source_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserEvents.source_dislikes)
  return source_dislikes_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SourceDislike >*
UserData_UserEvents::mutable_source_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserEvents.source_dislikes)
  return &source_dislikes_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SourceDislike >&
UserData_UserEvents::source_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserEvents.source_dislikes)
  return source_dislikes_;
}

// repeated .cosmo.pb.UserData.UserEvents.DocumentDislike document_dislikes = 3;
int UserData_UserEvents::document_dislikes_size() const {
  return document_dislikes_.size();
}
void UserData_UserEvents::clear_document_dislikes() {
  document_dislikes_.Clear();
}
const ::cosmo::pb::UserData_UserEvents_DocumentDislike& UserData_UserEvents::document_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.document_dislikes)
  return document_dislikes_.Get(index);
}
::cosmo::pb::UserData_UserEvents_DocumentDislike* UserData_UserEvents::mutable_document_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserEvents.document_dislikes)
  return document_dislikes_.Mutable(index);
}
::cosmo::pb::UserData_UserEvents_DocumentDislike* UserData_UserEvents::add_document_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserEvents.document_dislikes)
  return document_dislikes_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_DocumentDislike >*
UserData_UserEvents::mutable_document_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserEvents.document_dislikes)
  return &document_dislikes_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_DocumentDislike >&
UserData_UserEvents::document_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserEvents.document_dislikes)
  return document_dislikes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserThemesEvents_UserThemeEventInfo::kLastTimestampFieldNumber;
const int UserData_UserThemesEvents_UserThemeEventInfo::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserThemesEvents_UserThemeEventInfo::UserData_UserThemesEvents_UserThemeEventInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
}
UserData_UserThemesEvents_UserThemeEventInfo::UserData_UserThemesEvents_UserThemeEventInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
}
UserData_UserThemesEvents_UserThemeEventInfo::UserData_UserThemesEvents_UserThemeEventInfo(const UserData_UserThemesEvents_UserThemeEventInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_timestamp_, &from.last_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&last_timestamp_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
}

void UserData_UserThemesEvents_UserThemeEventInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&last_timestamp_)) + sizeof(count_));
}

UserData_UserThemesEvents_UserThemeEventInfo::~UserData_UserThemesEvents_UserThemeEventInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  SharedDtor();
}

void UserData_UserThemesEvents_UserThemeEventInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserThemesEvents_UserThemeEventInfo::ArenaDtor(void* object) {
  UserData_UserThemesEvents_UserThemeEventInfo* _this = reinterpret_cast< UserData_UserThemesEvents_UserThemeEventInfo* >(object);
  (void)_this;
}
void UserData_UserThemesEvents_UserThemeEventInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserThemesEvents_UserThemeEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserThemesEvents_UserThemeEventInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEventInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEventInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserThemesEvents_UserThemeEventInfo>(arena);
}

void UserData_UserThemesEvents_UserThemeEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&last_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&last_timestamp_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserThemesEvents_UserThemeEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_last_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 count = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  return false;
#undef DO_
}

void UserData_UserThemesEvents_UserThemeEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_timestamp(), output);
  }

  // required int64 count = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
}

::google::protobuf::uint8* UserData_UserThemesEvents_UserThemeEventInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_timestamp(), target);
  }

  // required int64 count = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  return target;
}

size_t UserData_UserThemesEvents_UserThemeEventInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  size_t total_size = 0;

  if (has_last_timestamp()) {
    // required int64 last_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_timestamp());
  }

  if (has_count()) {
    // required int64 count = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  return total_size;
}
size_t UserData_UserThemesEvents_UserThemeEventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 last_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_timestamp());

    // required int64 count = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserThemesEvents_UserThemeEventInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserThemesEvents_UserThemeEventInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserThemesEvents_UserThemeEventInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
    MergeFrom(*source);
  }
}

void UserData_UserThemesEvents_UserThemeEventInfo::MergeFrom(const UserData_UserThemesEvents_UserThemeEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_timestamp_ = from.last_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserThemesEvents_UserThemeEventInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserThemesEvents_UserThemeEventInfo::CopyFrom(const UserData_UserThemesEvents_UserThemeEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserThemesEvents_UserThemeEventInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserData_UserThemesEvents_UserThemeEventInfo::Swap(UserData_UserThemesEvents_UserThemeEventInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserThemesEvents_UserThemeEventInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserThemesEvents_UserThemeEventInfo::UnsafeArenaSwap(UserData_UserThemesEvents_UserThemeEventInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserThemesEvents_UserThemeEventInfo::InternalSwap(UserData_UserThemesEvents_UserThemeEventInfo* other) {
  using std::swap;
  swap(last_timestamp_, other->last_timestamp_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserThemesEvents_UserThemeEventInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserThemesEvents_UserThemeEventInfo

// required int64 last_timestamp = 1;
bool UserData_UserThemesEvents_UserThemeEventInfo::has_last_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserThemesEvents_UserThemeEventInfo::set_has_last_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserThemesEvents_UserThemeEventInfo::clear_has_last_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserThemesEvents_UserThemeEventInfo::clear_last_timestamp() {
  last_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_timestamp();
}
::google::protobuf::int64 UserData_UserThemesEvents_UserThemeEventInfo::last_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo.last_timestamp)
  return last_timestamp_;
}
void UserData_UserThemesEvents_UserThemeEventInfo::set_last_timestamp(::google::protobuf::int64 value) {
  set_has_last_timestamp();
  last_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo.last_timestamp)
}

// required int64 count = 2 [default = 0];
bool UserData_UserThemesEvents_UserThemeEventInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserThemesEvents_UserThemeEventInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserThemesEvents_UserThemeEventInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserThemesEvents_UserThemeEventInfo::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
::google::protobuf::int64 UserData_UserThemesEvents_UserThemeEventInfo::count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo.count)
  return count_;
}
void UserData_UserThemesEvents_UserThemeEventInfo::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UserData_UserThemesEvents_UserThemeEvent::_slow_mutable_clicks() {
  clicks_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::_slow_release_clicks() {
  if (clicks_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = new ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo(*clicks_);
    clicks_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::unsafe_arena_release_clicks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.clicks)
  clear_has_clicks();
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = clicks_;
  clicks_ = NULL;
  return temp;
}
void UserData_UserThemesEvents_UserThemeEvent::_slow_set_allocated_clicks(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo** clicks) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clicks) == NULL) {
      message_arena->Own(*clicks);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clicks)) {
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* new_clicks = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo >(
            message_arena);
      new_clicks->CopyFrom(**clicks);
      *clicks = new_clicks;
    }
}
void UserData_UserThemesEvents_UserThemeEvent::unsafe_arena_set_allocated_clicks(
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* clicks) {
  if (GetArenaNoVirtual() == NULL) {
    delete clicks_;
  }
  clicks_ = clicks;
  if (clicks) {
    set_has_clicks();
  } else {
    clear_has_clicks();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.clicks)
}
void UserData_UserThemesEvents_UserThemeEvent::_slow_mutable_shows() {
  shows_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::_slow_release_shows() {
  if (shows_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = new ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo(*shows_);
    shows_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::unsafe_arena_release_shows() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.shows)
  clear_has_shows();
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = shows_;
  shows_ = NULL;
  return temp;
}
void UserData_UserThemesEvents_UserThemeEvent::_slow_set_allocated_shows(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo** shows) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shows) == NULL) {
      message_arena->Own(*shows);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shows)) {
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* new_shows = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo >(
            message_arena);
      new_shows->CopyFrom(**shows);
      *shows = new_shows;
    }
}
void UserData_UserThemesEvents_UserThemeEvent::unsafe_arena_set_allocated_shows(
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* shows) {
  if (GetArenaNoVirtual() == NULL) {
    delete shows_;
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.shows)
}
void UserData_UserThemesEvents_UserThemeEvent::_slow_mutable_doc_dislikes() {
  doc_dislikes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::_slow_release_doc_dislikes() {
  if (doc_dislikes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = new ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo(*doc_dislikes_);
    doc_dislikes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::unsafe_arena_release_doc_dislikes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_dislikes)
  clear_has_doc_dislikes();
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = doc_dislikes_;
  doc_dislikes_ = NULL;
  return temp;
}
void UserData_UserThemesEvents_UserThemeEvent::_slow_set_allocated_doc_dislikes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo** doc_dislikes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*doc_dislikes) == NULL) {
      message_arena->Own(*doc_dislikes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*doc_dislikes)) {
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* new_doc_dislikes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo >(
            message_arena);
      new_doc_dislikes->CopyFrom(**doc_dislikes);
      *doc_dislikes = new_doc_dislikes;
    }
}
void UserData_UserThemesEvents_UserThemeEvent::unsafe_arena_set_allocated_doc_dislikes(
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_dislikes) {
  if (GetArenaNoVirtual() == NULL) {
    delete doc_dislikes_;
  }
  doc_dislikes_ = doc_dislikes;
  if (doc_dislikes) {
    set_has_doc_dislikes();
  } else {
    clear_has_doc_dislikes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_dislikes)
}
void UserData_UserThemesEvents_UserThemeEvent::_slow_mutable_doc_likes() {
  doc_likes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::_slow_release_doc_likes() {
  if (doc_likes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = new ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo(*doc_likes_);
    doc_likes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::unsafe_arena_release_doc_likes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_likes)
  clear_has_doc_likes();
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = doc_likes_;
  doc_likes_ = NULL;
  return temp;
}
void UserData_UserThemesEvents_UserThemeEvent::_slow_set_allocated_doc_likes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo** doc_likes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*doc_likes) == NULL) {
      message_arena->Own(*doc_likes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*doc_likes)) {
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* new_doc_likes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo >(
            message_arena);
      new_doc_likes->CopyFrom(**doc_likes);
      *doc_likes = new_doc_likes;
    }
}
void UserData_UserThemesEvents_UserThemeEvent::unsafe_arena_set_allocated_doc_likes(
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_likes) {
  if (GetArenaNoVirtual() == NULL) {
    delete doc_likes_;
  }
  doc_likes_ = doc_likes;
  if (doc_likes) {
    set_has_doc_likes();
  } else {
    clear_has_doc_likes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_likes)
}
void UserData_UserThemesEvents_UserThemeEvent::_slow_mutable_site_dislikes() {
  site_dislikes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::_slow_release_site_dislikes() {
  if (site_dislikes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = new ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo(*site_dislikes_);
    site_dislikes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::unsafe_arena_release_site_dislikes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.site_dislikes)
  clear_has_site_dislikes();
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = site_dislikes_;
  site_dislikes_ = NULL;
  return temp;
}
void UserData_UserThemesEvents_UserThemeEvent::_slow_set_allocated_site_dislikes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo** site_dislikes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*site_dislikes) == NULL) {
      message_arena->Own(*site_dislikes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*site_dislikes)) {
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* new_site_dislikes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo >(
            message_arena);
      new_site_dislikes->CopyFrom(**site_dislikes);
      *site_dislikes = new_site_dislikes;
    }
}
void UserData_UserThemesEvents_UserThemeEvent::unsafe_arena_set_allocated_site_dislikes(
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* site_dislikes) {
  if (GetArenaNoVirtual() == NULL) {
    delete site_dislikes_;
  }
  site_dislikes_ = site_dislikes;
  if (site_dislikes) {
    set_has_site_dislikes();
  } else {
    clear_has_site_dislikes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.site_dislikes)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserThemesEvents_UserThemeEvent::kThemeHashFieldNumber;
const int UserData_UserThemesEvents_UserThemeEvent::kClicksFieldNumber;
const int UserData_UserThemesEvents_UserThemeEvent::kShowsFieldNumber;
const int UserData_UserThemesEvents_UserThemeEvent::kDocDislikesFieldNumber;
const int UserData_UserThemesEvents_UserThemeEvent::kDocLikesFieldNumber;
const int UserData_UserThemesEvents_UserThemeEvent::kSiteDislikesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserThemesEvents_UserThemeEvent::UserData_UserThemesEvents_UserThemeEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
}
UserData_UserThemesEvents_UserThemeEvent::UserData_UserThemesEvents_UserThemeEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
}
UserData_UserThemesEvents_UserThemeEvent::UserData_UserThemesEvents_UserThemeEvent(const UserData_UserThemesEvents_UserThemeEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clicks()) {
    clicks_ = new ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo(*from.clicks_);
  } else {
    clicks_ = NULL;
  }
  if (from.has_shows()) {
    shows_ = new ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo(*from.shows_);
  } else {
    shows_ = NULL;
  }
  if (from.has_doc_dislikes()) {
    doc_dislikes_ = new ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo(*from.doc_dislikes_);
  } else {
    doc_dislikes_ = NULL;
  }
  if (from.has_doc_likes()) {
    doc_likes_ = new ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo(*from.doc_likes_);
  } else {
    doc_likes_ = NULL;
  }
  if (from.has_site_dislikes()) {
    site_dislikes_ = new ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo(*from.site_dislikes_);
  } else {
    site_dislikes_ = NULL;
  }
  theme_hash_ = from.theme_hash_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
}

void UserData_UserThemesEvents_UserThemeEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&clicks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theme_hash_) -
      reinterpret_cast<char*>(&clicks_)) + sizeof(theme_hash_));
}

UserData_UserThemesEvents_UserThemeEvent::~UserData_UserThemesEvents_UserThemeEvent() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  SharedDtor();
}

void UserData_UserThemesEvents_UserThemeEvent::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete clicks_;
  if (this != internal_default_instance()) delete shows_;
  if (this != internal_default_instance()) delete doc_dislikes_;
  if (this != internal_default_instance()) delete doc_likes_;
  if (this != internal_default_instance()) delete site_dislikes_;
}

void UserData_UserThemesEvents_UserThemeEvent::ArenaDtor(void* object) {
  UserData_UserThemesEvents_UserThemeEvent* _this = reinterpret_cast< UserData_UserThemesEvents_UserThemeEvent* >(object);
  (void)_this;
}
void UserData_UserThemesEvents_UserThemeEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserThemesEvents_UserThemeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserThemesEvents_UserThemeEvent::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserThemesEvents_UserThemeEvent& UserData_UserThemesEvents_UserThemeEvent::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserThemesEvents_UserThemeEvent* UserData_UserThemesEvents_UserThemeEvent::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserThemesEvents_UserThemeEvent>(arena);
}

void UserData_UserThemesEvents_UserThemeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(clicks_ != NULL);
      clicks_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shows_ != NULL);
      shows_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(doc_dislikes_ != NULL);
      doc_dislikes_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(doc_likes_ != NULL);
      doc_likes_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(site_dislikes_ != NULL);
      site_dislikes_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
    }
  }
  theme_hash_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserThemesEvents_UserThemeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 theme_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_theme_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &theme_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo clicks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clicks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo shows = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_dislikes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doc_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_likes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doc_likes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo site_dislikes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  return false;
#undef DO_
}

void UserData_UserThemesEvents_UserThemeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 theme_hash = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->theme_hash(), output);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo clicks = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clicks_, output);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo shows = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->shows_, output);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_dislikes = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->doc_dislikes_, output);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_likes = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->doc_likes_, output);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo site_dislikes = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->site_dislikes_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
}

::google::protobuf::uint8* UserData_UserThemesEvents_UserThemeEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 theme_hash = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->theme_hash(), target);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo clicks = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->clicks_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo shows = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->shows_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_dislikes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->doc_dislikes_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_likes = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->doc_likes_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo site_dislikes = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->site_dislikes_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  return target;
}

size_t UserData_UserThemesEvents_UserThemeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 theme_hash = 1;
  if (has_theme_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->theme_hash());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo clicks = 2;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clicks_);
    }

    // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo shows = 3;
    if (has_shows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shows_);
    }

    // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_dislikes = 4;
    if (has_doc_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->doc_dislikes_);
    }

    // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_likes = 5;
    if (has_doc_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->doc_likes_);
    }

    // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo site_dislikes = 6;
    if (has_site_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->site_dislikes_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserThemesEvents_UserThemeEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserThemesEvents_UserThemeEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserThemesEvents_UserThemeEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
    MergeFrom(*source);
  }
}

void UserData_UserThemesEvents_UserThemeEvent::MergeFrom(const UserData_UserThemesEvents_UserThemeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_clicks()->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::MergeFrom(from.clicks());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shows()->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::MergeFrom(from.shows());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_doc_dislikes()->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::MergeFrom(from.doc_dislikes());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_doc_likes()->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::MergeFrom(from.doc_likes());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_site_dislikes()->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::MergeFrom(from.site_dislikes());
    }
    if (cached_has_bits & 0x00000020u) {
      theme_hash_ = from.theme_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserThemesEvents_UserThemeEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserThemesEvents_UserThemeEvent::CopyFrom(const UserData_UserThemesEvents_UserThemeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserThemesEvents_UserThemeEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (has_clicks()) {
    if (!this->clicks_->IsInitialized()) return false;
  }
  if (has_shows()) {
    if (!this->shows_->IsInitialized()) return false;
  }
  if (has_doc_dislikes()) {
    if (!this->doc_dislikes_->IsInitialized()) return false;
  }
  if (has_doc_likes()) {
    if (!this->doc_likes_->IsInitialized()) return false;
  }
  if (has_site_dislikes()) {
    if (!this->site_dislikes_->IsInitialized()) return false;
  }
  return true;
}

void UserData_UserThemesEvents_UserThemeEvent::Swap(UserData_UserThemesEvents_UserThemeEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserThemesEvents_UserThemeEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserThemesEvents_UserThemeEvent::UnsafeArenaSwap(UserData_UserThemesEvents_UserThemeEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserThemesEvents_UserThemeEvent::InternalSwap(UserData_UserThemesEvents_UserThemeEvent* other) {
  using std::swap;
  swap(clicks_, other->clicks_);
  swap(shows_, other->shows_);
  swap(doc_dislikes_, other->doc_dislikes_);
  swap(doc_likes_, other->doc_likes_);
  swap(site_dislikes_, other->site_dislikes_);
  swap(theme_hash_, other->theme_hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserThemesEvents_UserThemeEvent::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserThemesEvents_UserThemeEvent

// required int64 theme_hash = 1;
bool UserData_UserThemesEvents_UserThemeEvent::has_theme_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserData_UserThemesEvents_UserThemeEvent::set_has_theme_hash() {
  _has_bits_[0] |= 0x00000020u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_has_theme_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_theme_hash() {
  theme_hash_ = GOOGLE_LONGLONG(0);
  clear_has_theme_hash();
}
::google::protobuf::int64 UserData_UserThemesEvents_UserThemeEvent::theme_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.theme_hash)
  return theme_hash_;
}
void UserData_UserThemesEvents_UserThemeEvent::set_theme_hash(::google::protobuf::int64 value) {
  set_has_theme_hash();
  theme_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.theme_hash)
}

// optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo clicks = 2;
bool UserData_UserThemesEvents_UserThemeEvent::has_clicks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserThemesEvents_UserThemeEvent::set_has_clicks() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_clicks() {
  if (clicks_ != NULL) clicks_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
  clear_has_clicks();
}
const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEvent::clicks() const {
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* p = clicks_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.clicks)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      &::cosmo::pb::_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::mutable_clicks() {
  set_has_clicks();
  if (clicks_ == NULL) {
    _slow_mutable_clicks();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.clicks)
  return clicks_;
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::release_clicks() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.clicks)
  clear_has_clicks();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = clicks_;
    clicks_ = NULL;
    return temp;
  }
}
 void UserData_UserThemesEvents_UserThemeEvent::set_allocated_clicks(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* clicks) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_;
  }
  if (clicks != NULL) {
    _slow_set_allocated_clicks(message_arena, &clicks);
  }
  clicks_ = clicks;
  if (clicks) {
    set_has_clicks();
  } else {
    clear_has_clicks();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.clicks)
}

// optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo shows = 3;
bool UserData_UserThemesEvents_UserThemeEvent::has_shows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserThemesEvents_UserThemeEvent::set_has_shows() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_has_shows() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_shows() {
  if (shows_ != NULL) shows_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
  clear_has_shows();
}
const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEvent::shows() const {
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* p = shows_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.shows)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      &::cosmo::pb::_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::mutable_shows() {
  set_has_shows();
  if (shows_ == NULL) {
    _slow_mutable_shows();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.shows)
  return shows_;
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::release_shows() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.shows)
  clear_has_shows();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = shows_;
    shows_ = NULL;
    return temp;
  }
}
 void UserData_UserThemesEvents_UserThemeEvent::set_allocated_shows(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* shows) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_;
  }
  if (shows != NULL) {
    _slow_set_allocated_shows(message_arena, &shows);
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.shows)
}

// optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_dislikes = 4;
bool UserData_UserThemesEvents_UserThemeEvent::has_doc_dislikes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserThemesEvents_UserThemeEvent::set_has_doc_dislikes() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_has_doc_dislikes() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_doc_dislikes() {
  if (doc_dislikes_ != NULL) doc_dislikes_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
  clear_has_doc_dislikes();
}
const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEvent::doc_dislikes() const {
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* p = doc_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      &::cosmo::pb::_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::mutable_doc_dislikes() {
  set_has_doc_dislikes();
  if (doc_dislikes_ == NULL) {
    _slow_mutable_doc_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_dislikes)
  return doc_dislikes_;
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::release_doc_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_dislikes)
  clear_has_doc_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_doc_dislikes();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = doc_dislikes_;
    doc_dislikes_ = NULL;
    return temp;
  }
}
 void UserData_UserThemesEvents_UserThemeEvent::set_allocated_doc_dislikes(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_dislikes_;
  }
  if (doc_dislikes != NULL) {
    _slow_set_allocated_doc_dislikes(message_arena, &doc_dislikes);
  }
  doc_dislikes_ = doc_dislikes;
  if (doc_dislikes) {
    set_has_doc_dislikes();
  } else {
    clear_has_doc_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_dislikes)
}

// optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_likes = 5;
bool UserData_UserThemesEvents_UserThemeEvent::has_doc_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_UserThemesEvents_UserThemeEvent::set_has_doc_likes() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_has_doc_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_doc_likes() {
  if (doc_likes_ != NULL) doc_likes_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
  clear_has_doc_likes();
}
const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEvent::doc_likes() const {
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* p = doc_likes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_likes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      &::cosmo::pb::_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::mutable_doc_likes() {
  set_has_doc_likes();
  if (doc_likes_ == NULL) {
    _slow_mutable_doc_likes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_likes)
  return doc_likes_;
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::release_doc_likes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_likes)
  clear_has_doc_likes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_doc_likes();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = doc_likes_;
    doc_likes_ = NULL;
    return temp;
  }
}
 void UserData_UserThemesEvents_UserThemeEvent::set_allocated_doc_likes(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_likes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_likes_;
  }
  if (doc_likes != NULL) {
    _slow_set_allocated_doc_likes(message_arena, &doc_likes);
  }
  doc_likes_ = doc_likes;
  if (doc_likes) {
    set_has_doc_likes();
  } else {
    clear_has_doc_likes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_likes)
}

// optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo site_dislikes = 6;
bool UserData_UserThemesEvents_UserThemeEvent::has_site_dislikes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData_UserThemesEvents_UserThemeEvent::set_has_site_dislikes() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_has_site_dislikes() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData_UserThemesEvents_UserThemeEvent::clear_site_dislikes() {
  if (site_dislikes_ != NULL) site_dislikes_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
  clear_has_site_dislikes();
}
const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEvent::site_dislikes() const {
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* p = site_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.site_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      &::cosmo::pb::_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::mutable_site_dislikes() {
  set_has_site_dislikes();
  if (site_dislikes_ == NULL) {
    _slow_mutable_site_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.site_dislikes)
  return site_dislikes_;
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::release_site_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.site_dislikes)
  clear_has_site_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_site_dislikes();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = site_dislikes_;
    site_dislikes_ = NULL;
    return temp;
  }
}
 void UserData_UserThemesEvents_UserThemeEvent::set_allocated_site_dislikes(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* site_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete site_dislikes_;
  }
  if (site_dislikes != NULL) {
    _slow_set_allocated_site_dislikes(message_arena, &site_dislikes);
  }
  site_dislikes_ = site_dislikes;
  if (site_dislikes) {
    set_has_site_dislikes();
  } else {
    clear_has_site_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.site_dislikes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserThemesEvents::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserThemesEvents::UserData_UserThemesEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserThemesEvents)
}
UserData_UserThemesEvents::UserData_UserThemesEvents(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  events_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserThemesEvents)
}
UserData_UserThemesEvents::UserData_UserThemesEvents(const UserData_UserThemesEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserThemesEvents)
}

void UserData_UserThemesEvents::SharedCtor() {
  _cached_size_ = 0;
}

UserData_UserThemesEvents::~UserData_UserThemesEvents() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserThemesEvents)
  SharedDtor();
}

void UserData_UserThemesEvents::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserThemesEvents::ArenaDtor(void* object) {
  UserData_UserThemesEvents* _this = reinterpret_cast< UserData_UserThemesEvents* >(object);
  (void)_this;
}
void UserData_UserThemesEvents::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserThemesEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserThemesEvents::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserThemesEvents& UserData_UserThemesEvents::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserThemesEvents* UserData_UserThemesEvents::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserThemesEvents>(arena);
}

void UserData_UserThemesEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserThemesEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserThemesEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserThemesEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.UserThemesEvents.UserThemeEvent events = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserThemesEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserThemesEvents)
  return false;
#undef DO_
}

void UserData_UserThemesEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserThemesEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.UserThemesEvents.UserThemeEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserThemesEvents)
}

::google::protobuf::uint8* UserData_UserThemesEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserThemesEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.UserThemesEvents.UserThemeEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->events(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserThemesEvents)
  return target;
}

size_t UserData_UserThemesEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserThemesEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.UserThemesEvents.UserThemeEvent events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserThemesEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserThemesEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserThemesEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserThemesEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserThemesEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserThemesEvents)
    MergeFrom(*source);
  }
}

void UserData_UserThemesEvents::MergeFrom(const UserData_UserThemesEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserThemesEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void UserData_UserThemesEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserThemesEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserThemesEvents::CopyFrom(const UserData_UserThemesEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserThemesEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserThemesEvents::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void UserData_UserThemesEvents::Swap(UserData_UserThemesEvents* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserThemesEvents* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserThemesEvents::UnsafeArenaSwap(UserData_UserThemesEvents* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserThemesEvents::InternalSwap(UserData_UserThemesEvents* other) {
  using std::swap;
  events_.InternalSwap(&other->events_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserThemesEvents::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserThemesEvents

// repeated .cosmo.pb.UserData.UserThemesEvents.UserThemeEvent events = 1;
int UserData_UserThemesEvents::events_size() const {
  return events_.size();
}
void UserData_UserThemesEvents::clear_events() {
  events_.Clear();
}
const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent& UserData_UserThemesEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.events)
  return events_.Get(index);
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent* UserData_UserThemesEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.events)
  return events_.Mutable(index);
}
::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent* UserData_UserThemesEvents::add_events() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserThemesEvents.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent >*
UserData_UserThemesEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserThemesEvents.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent >&
UserData_UserThemesEvents::events() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserThemesEvents.events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserI2IEvents_UserI2IEventInfo::kLastTimestampFieldNumber;
const int UserData_UserI2IEvents_UserI2IEventInfo::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserI2IEvents_UserI2IEventInfo::UserData_UserI2IEvents_UserI2IEventInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
}
UserData_UserI2IEvents_UserI2IEventInfo::UserData_UserI2IEvents_UserI2IEventInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
}
UserData_UserI2IEvents_UserI2IEventInfo::UserData_UserI2IEvents_UserI2IEventInfo(const UserData_UserI2IEvents_UserI2IEventInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_timestamp_, &from.last_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&last_timestamp_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
}

void UserData_UserI2IEvents_UserI2IEventInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&last_timestamp_)) + sizeof(count_));
}

UserData_UserI2IEvents_UserI2IEventInfo::~UserData_UserI2IEvents_UserI2IEventInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  SharedDtor();
}

void UserData_UserI2IEvents_UserI2IEventInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserI2IEvents_UserI2IEventInfo::ArenaDtor(void* object) {
  UserData_UserI2IEvents_UserI2IEventInfo* _this = reinterpret_cast< UserData_UserI2IEvents_UserI2IEventInfo* >(object);
  (void)_this;
}
void UserData_UserI2IEvents_UserI2IEventInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserI2IEvents_UserI2IEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserI2IEvents_UserI2IEventInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEventInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEventInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserI2IEvents_UserI2IEventInfo>(arena);
}

void UserData_UserI2IEvents_UserI2IEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&last_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&last_timestamp_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserI2IEvents_UserI2IEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_last_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 count = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  return false;
#undef DO_
}

void UserData_UserI2IEvents_UserI2IEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_timestamp(), output);
  }

  // required int64 count = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
}

::google::protobuf::uint8* UserData_UserI2IEvents_UserI2IEventInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_timestamp(), target);
  }

  // required int64 count = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  return target;
}

size_t UserData_UserI2IEvents_UserI2IEventInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  size_t total_size = 0;

  if (has_last_timestamp()) {
    // required int64 last_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_timestamp());
  }

  if (has_count()) {
    // required int64 count = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  return total_size;
}
size_t UserData_UserI2IEvents_UserI2IEventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 last_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_timestamp());

    // required int64 count = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserI2IEvents_UserI2IEventInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserI2IEvents_UserI2IEventInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserI2IEvents_UserI2IEventInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
    MergeFrom(*source);
  }
}

void UserData_UserI2IEvents_UserI2IEventInfo::MergeFrom(const UserData_UserI2IEvents_UserI2IEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_timestamp_ = from.last_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserI2IEvents_UserI2IEventInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserI2IEvents_UserI2IEventInfo::CopyFrom(const UserData_UserI2IEvents_UserI2IEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserI2IEvents_UserI2IEventInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserData_UserI2IEvents_UserI2IEventInfo::Swap(UserData_UserI2IEvents_UserI2IEventInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserI2IEvents_UserI2IEventInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserI2IEvents_UserI2IEventInfo::UnsafeArenaSwap(UserData_UserI2IEvents_UserI2IEventInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserI2IEvents_UserI2IEventInfo::InternalSwap(UserData_UserI2IEvents_UserI2IEventInfo* other) {
  using std::swap;
  swap(last_timestamp_, other->last_timestamp_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserI2IEvents_UserI2IEventInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserI2IEvents_UserI2IEventInfo

// required int64 last_timestamp = 1;
bool UserData_UserI2IEvents_UserI2IEventInfo::has_last_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserI2IEvents_UserI2IEventInfo::set_has_last_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserI2IEvents_UserI2IEventInfo::clear_has_last_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserI2IEvents_UserI2IEventInfo::clear_last_timestamp() {
  last_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_timestamp();
}
::google::protobuf::int64 UserData_UserI2IEvents_UserI2IEventInfo::last_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo.last_timestamp)
  return last_timestamp_;
}
void UserData_UserI2IEvents_UserI2IEventInfo::set_last_timestamp(::google::protobuf::int64 value) {
  set_has_last_timestamp();
  last_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo.last_timestamp)
}

// required int64 count = 2 [default = 0];
bool UserData_UserI2IEvents_UserI2IEventInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserI2IEvents_UserI2IEventInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserI2IEvents_UserI2IEventInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserI2IEvents_UserI2IEventInfo::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
::google::protobuf::int64 UserData_UserI2IEvents_UserI2IEventInfo::count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo.count)
  return count_;
}
void UserData_UserI2IEvents_UserI2IEventInfo::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UserData_UserI2IEvents_UserI2IEvent::_slow_mutable_clicks() {
  clicks_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::_slow_release_clicks() {
  if (clicks_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = new ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo(*clicks_);
    clicks_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::unsafe_arena_release_clicks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.clicks)
  clear_has_clicks();
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = clicks_;
  clicks_ = NULL;
  return temp;
}
void UserData_UserI2IEvents_UserI2IEvent::_slow_set_allocated_clicks(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo** clicks) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clicks) == NULL) {
      message_arena->Own(*clicks);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clicks)) {
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* new_clicks = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo >(
            message_arena);
      new_clicks->CopyFrom(**clicks);
      *clicks = new_clicks;
    }
}
void UserData_UserI2IEvents_UserI2IEvent::unsafe_arena_set_allocated_clicks(
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* clicks) {
  if (GetArenaNoVirtual() == NULL) {
    delete clicks_;
  }
  clicks_ = clicks;
  if (clicks) {
    set_has_clicks();
  } else {
    clear_has_clicks();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.clicks)
}
void UserData_UserI2IEvents_UserI2IEvent::_slow_mutable_shows() {
  shows_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::_slow_release_shows() {
  if (shows_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = new ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo(*shows_);
    shows_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::unsafe_arena_release_shows() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.shows)
  clear_has_shows();
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = shows_;
  shows_ = NULL;
  return temp;
}
void UserData_UserI2IEvents_UserI2IEvent::_slow_set_allocated_shows(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo** shows) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shows) == NULL) {
      message_arena->Own(*shows);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shows)) {
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* new_shows = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo >(
            message_arena);
      new_shows->CopyFrom(**shows);
      *shows = new_shows;
    }
}
void UserData_UserI2IEvents_UserI2IEvent::unsafe_arena_set_allocated_shows(
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* shows) {
  if (GetArenaNoVirtual() == NULL) {
    delete shows_;
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.shows)
}
void UserData_UserI2IEvents_UserI2IEvent::_slow_mutable_doc_dislikes() {
  doc_dislikes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::_slow_release_doc_dislikes() {
  if (doc_dislikes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = new ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo(*doc_dislikes_);
    doc_dislikes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::unsafe_arena_release_doc_dislikes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_dislikes)
  clear_has_doc_dislikes();
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = doc_dislikes_;
  doc_dislikes_ = NULL;
  return temp;
}
void UserData_UserI2IEvents_UserI2IEvent::_slow_set_allocated_doc_dislikes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo** doc_dislikes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*doc_dislikes) == NULL) {
      message_arena->Own(*doc_dislikes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*doc_dislikes)) {
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* new_doc_dislikes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo >(
            message_arena);
      new_doc_dislikes->CopyFrom(**doc_dislikes);
      *doc_dislikes = new_doc_dislikes;
    }
}
void UserData_UserI2IEvents_UserI2IEvent::unsafe_arena_set_allocated_doc_dislikes(
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_dislikes) {
  if (GetArenaNoVirtual() == NULL) {
    delete doc_dislikes_;
  }
  doc_dislikes_ = doc_dislikes;
  if (doc_dislikes) {
    set_has_doc_dislikes();
  } else {
    clear_has_doc_dislikes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_dislikes)
}
void UserData_UserI2IEvents_UserI2IEvent::_slow_mutable_doc_likes() {
  doc_likes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::_slow_release_doc_likes() {
  if (doc_likes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = new ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo(*doc_likes_);
    doc_likes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::unsafe_arena_release_doc_likes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_likes)
  clear_has_doc_likes();
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = doc_likes_;
  doc_likes_ = NULL;
  return temp;
}
void UserData_UserI2IEvents_UserI2IEvent::_slow_set_allocated_doc_likes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo** doc_likes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*doc_likes) == NULL) {
      message_arena->Own(*doc_likes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*doc_likes)) {
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* new_doc_likes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo >(
            message_arena);
      new_doc_likes->CopyFrom(**doc_likes);
      *doc_likes = new_doc_likes;
    }
}
void UserData_UserI2IEvents_UserI2IEvent::unsafe_arena_set_allocated_doc_likes(
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_likes) {
  if (GetArenaNoVirtual() == NULL) {
    delete doc_likes_;
  }
  doc_likes_ = doc_likes;
  if (doc_likes) {
    set_has_doc_likes();
  } else {
    clear_has_doc_likes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_likes)
}
void UserData_UserI2IEvents_UserI2IEvent::_slow_mutable_site_dislikes() {
  site_dislikes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::_slow_release_site_dislikes() {
  if (site_dislikes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = new ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo(*site_dislikes_);
    site_dislikes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::unsafe_arena_release_site_dislikes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.site_dislikes)
  clear_has_site_dislikes();
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = site_dislikes_;
  site_dislikes_ = NULL;
  return temp;
}
void UserData_UserI2IEvents_UserI2IEvent::_slow_set_allocated_site_dislikes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo** site_dislikes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*site_dislikes) == NULL) {
      message_arena->Own(*site_dislikes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*site_dislikes)) {
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* new_site_dislikes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo >(
            message_arena);
      new_site_dislikes->CopyFrom(**site_dislikes);
      *site_dislikes = new_site_dislikes;
    }
}
void UserData_UserI2IEvents_UserI2IEvent::unsafe_arena_set_allocated_site_dislikes(
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* site_dislikes) {
  if (GetArenaNoVirtual() == NULL) {
    delete site_dislikes_;
  }
  site_dislikes_ = site_dislikes;
  if (site_dislikes) {
    set_has_site_dislikes();
  } else {
    clear_has_site_dislikes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.site_dislikes)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserI2IEvents_UserI2IEvent::kI2IDocIdFieldNumber;
const int UserData_UserI2IEvents_UserI2IEvent::kClicksFieldNumber;
const int UserData_UserI2IEvents_UserI2IEvent::kShowsFieldNumber;
const int UserData_UserI2IEvents_UserI2IEvent::kDocDislikesFieldNumber;
const int UserData_UserI2IEvents_UserI2IEvent::kDocLikesFieldNumber;
const int UserData_UserI2IEvents_UserI2IEvent::kSiteDislikesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserI2IEvents_UserI2IEvent::UserData_UserI2IEvents_UserI2IEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
}
UserData_UserI2IEvents_UserI2IEvent::UserData_UserI2IEvents_UserI2IEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
}
UserData_UserI2IEvents_UserI2IEvent::UserData_UserI2IEvents_UserI2IEvent(const UserData_UserI2IEvents_UserI2IEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clicks()) {
    clicks_ = new ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo(*from.clicks_);
  } else {
    clicks_ = NULL;
  }
  if (from.has_shows()) {
    shows_ = new ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo(*from.shows_);
  } else {
    shows_ = NULL;
  }
  if (from.has_doc_dislikes()) {
    doc_dislikes_ = new ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo(*from.doc_dislikes_);
  } else {
    doc_dislikes_ = NULL;
  }
  if (from.has_doc_likes()) {
    doc_likes_ = new ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo(*from.doc_likes_);
  } else {
    doc_likes_ = NULL;
  }
  if (from.has_site_dislikes()) {
    site_dislikes_ = new ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo(*from.site_dislikes_);
  } else {
    site_dislikes_ = NULL;
  }
  i2i_doc_id_ = from.i2i_doc_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
}

void UserData_UserI2IEvents_UserI2IEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&clicks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&i2i_doc_id_) -
      reinterpret_cast<char*>(&clicks_)) + sizeof(i2i_doc_id_));
}

UserData_UserI2IEvents_UserI2IEvent::~UserData_UserI2IEvents_UserI2IEvent() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  SharedDtor();
}

void UserData_UserI2IEvents_UserI2IEvent::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete clicks_;
  if (this != internal_default_instance()) delete shows_;
  if (this != internal_default_instance()) delete doc_dislikes_;
  if (this != internal_default_instance()) delete doc_likes_;
  if (this != internal_default_instance()) delete site_dislikes_;
}

void UserData_UserI2IEvents_UserI2IEvent::ArenaDtor(void* object) {
  UserData_UserI2IEvents_UserI2IEvent* _this = reinterpret_cast< UserData_UserI2IEvents_UserI2IEvent* >(object);
  (void)_this;
}
void UserData_UserI2IEvents_UserI2IEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserI2IEvents_UserI2IEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserI2IEvents_UserI2IEvent::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserI2IEvents_UserI2IEvent& UserData_UserI2IEvents_UserI2IEvent::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserI2IEvents_UserI2IEvent* UserData_UserI2IEvents_UserI2IEvent::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserI2IEvents_UserI2IEvent>(arena);
}

void UserData_UserI2IEvents_UserI2IEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(clicks_ != NULL);
      clicks_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shows_ != NULL);
      shows_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(doc_dislikes_ != NULL);
      doc_dislikes_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(doc_likes_ != NULL);
      doc_likes_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(site_dislikes_ != NULL);
      site_dislikes_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
    }
  }
  i2i_doc_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserI2IEvents_UserI2IEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 i2i_doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_i2i_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i2i_doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo clicks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clicks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo shows = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_dislikes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doc_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_likes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doc_likes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo site_dislikes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  return false;
#undef DO_
}

void UserData_UserI2IEvents_UserI2IEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 i2i_doc_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->i2i_doc_id(), output);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo clicks = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clicks_, output);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo shows = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->shows_, output);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_dislikes = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->doc_dislikes_, output);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_likes = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->doc_likes_, output);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo site_dislikes = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->site_dislikes_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
}

::google::protobuf::uint8* UserData_UserI2IEvents_UserI2IEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 i2i_doc_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->i2i_doc_id(), target);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo clicks = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->clicks_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo shows = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->shows_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_dislikes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->doc_dislikes_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_likes = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->doc_likes_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo site_dislikes = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->site_dislikes_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  return target;
}

size_t UserData_UserI2IEvents_UserI2IEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 i2i_doc_id = 1;
  if (has_i2i_doc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->i2i_doc_id());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo clicks = 2;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clicks_);
    }

    // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo shows = 3;
    if (has_shows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shows_);
    }

    // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_dislikes = 4;
    if (has_doc_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->doc_dislikes_);
    }

    // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_likes = 5;
    if (has_doc_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->doc_likes_);
    }

    // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo site_dislikes = 6;
    if (has_site_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->site_dislikes_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserI2IEvents_UserI2IEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserI2IEvents_UserI2IEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserI2IEvents_UserI2IEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
    MergeFrom(*source);
  }
}

void UserData_UserI2IEvents_UserI2IEvent::MergeFrom(const UserData_UserI2IEvents_UserI2IEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_clicks()->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::MergeFrom(from.clicks());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shows()->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::MergeFrom(from.shows());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_doc_dislikes()->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::MergeFrom(from.doc_dislikes());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_doc_likes()->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::MergeFrom(from.doc_likes());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_site_dislikes()->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::MergeFrom(from.site_dislikes());
    }
    if (cached_has_bits & 0x00000020u) {
      i2i_doc_id_ = from.i2i_doc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserI2IEvents_UserI2IEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserI2IEvents_UserI2IEvent::CopyFrom(const UserData_UserI2IEvents_UserI2IEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserI2IEvents_UserI2IEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;
  if (has_clicks()) {
    if (!this->clicks_->IsInitialized()) return false;
  }
  if (has_shows()) {
    if (!this->shows_->IsInitialized()) return false;
  }
  if (has_doc_dislikes()) {
    if (!this->doc_dislikes_->IsInitialized()) return false;
  }
  if (has_doc_likes()) {
    if (!this->doc_likes_->IsInitialized()) return false;
  }
  if (has_site_dislikes()) {
    if (!this->site_dislikes_->IsInitialized()) return false;
  }
  return true;
}

void UserData_UserI2IEvents_UserI2IEvent::Swap(UserData_UserI2IEvents_UserI2IEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserI2IEvents_UserI2IEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserI2IEvents_UserI2IEvent::UnsafeArenaSwap(UserData_UserI2IEvents_UserI2IEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserI2IEvents_UserI2IEvent::InternalSwap(UserData_UserI2IEvents_UserI2IEvent* other) {
  using std::swap;
  swap(clicks_, other->clicks_);
  swap(shows_, other->shows_);
  swap(doc_dislikes_, other->doc_dislikes_);
  swap(doc_likes_, other->doc_likes_);
  swap(site_dislikes_, other->site_dislikes_);
  swap(i2i_doc_id_, other->i2i_doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserI2IEvents_UserI2IEvent::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserI2IEvents_UserI2IEvent

// required int64 i2i_doc_id = 1;
bool UserData_UserI2IEvents_UserI2IEvent::has_i2i_doc_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserData_UserI2IEvents_UserI2IEvent::set_has_i2i_doc_id() {
  _has_bits_[0] |= 0x00000020u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_has_i2i_doc_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_i2i_doc_id() {
  i2i_doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_i2i_doc_id();
}
::google::protobuf::int64 UserData_UserI2IEvents_UserI2IEvent::i2i_doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.i2i_doc_id)
  return i2i_doc_id_;
}
void UserData_UserI2IEvents_UserI2IEvent::set_i2i_doc_id(::google::protobuf::int64 value) {
  set_has_i2i_doc_id();
  i2i_doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.i2i_doc_id)
}

// optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo clicks = 2;
bool UserData_UserI2IEvents_UserI2IEvent::has_clicks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserI2IEvents_UserI2IEvent::set_has_clicks() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_clicks() {
  if (clicks_ != NULL) clicks_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
  clear_has_clicks();
}
const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEvent::clicks() const {
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* p = clicks_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.clicks)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      &::cosmo::pb::_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::mutable_clicks() {
  set_has_clicks();
  if (clicks_ == NULL) {
    _slow_mutable_clicks();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.clicks)
  return clicks_;
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::release_clicks() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.clicks)
  clear_has_clicks();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = clicks_;
    clicks_ = NULL;
    return temp;
  }
}
 void UserData_UserI2IEvents_UserI2IEvent::set_allocated_clicks(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* clicks) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_;
  }
  if (clicks != NULL) {
    _slow_set_allocated_clicks(message_arena, &clicks);
  }
  clicks_ = clicks;
  if (clicks) {
    set_has_clicks();
  } else {
    clear_has_clicks();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.clicks)
}

// optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo shows = 3;
bool UserData_UserI2IEvents_UserI2IEvent::has_shows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserI2IEvents_UserI2IEvent::set_has_shows() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_has_shows() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_shows() {
  if (shows_ != NULL) shows_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
  clear_has_shows();
}
const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEvent::shows() const {
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* p = shows_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.shows)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      &::cosmo::pb::_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::mutable_shows() {
  set_has_shows();
  if (shows_ == NULL) {
    _slow_mutable_shows();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.shows)
  return shows_;
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::release_shows() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.shows)
  clear_has_shows();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = shows_;
    shows_ = NULL;
    return temp;
  }
}
 void UserData_UserI2IEvents_UserI2IEvent::set_allocated_shows(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* shows) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_;
  }
  if (shows != NULL) {
    _slow_set_allocated_shows(message_arena, &shows);
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.shows)
}

// optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_dislikes = 4;
bool UserData_UserI2IEvents_UserI2IEvent::has_doc_dislikes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserI2IEvents_UserI2IEvent::set_has_doc_dislikes() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_has_doc_dislikes() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_doc_dislikes() {
  if (doc_dislikes_ != NULL) doc_dislikes_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
  clear_has_doc_dislikes();
}
const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEvent::doc_dislikes() const {
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* p = doc_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      &::cosmo::pb::_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::mutable_doc_dislikes() {
  set_has_doc_dislikes();
  if (doc_dislikes_ == NULL) {
    _slow_mutable_doc_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_dislikes)
  return doc_dislikes_;
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::release_doc_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_dislikes)
  clear_has_doc_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_doc_dislikes();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = doc_dislikes_;
    doc_dislikes_ = NULL;
    return temp;
  }
}
 void UserData_UserI2IEvents_UserI2IEvent::set_allocated_doc_dislikes(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_dislikes_;
  }
  if (doc_dislikes != NULL) {
    _slow_set_allocated_doc_dislikes(message_arena, &doc_dislikes);
  }
  doc_dislikes_ = doc_dislikes;
  if (doc_dislikes) {
    set_has_doc_dislikes();
  } else {
    clear_has_doc_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_dislikes)
}

// optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_likes = 5;
bool UserData_UserI2IEvents_UserI2IEvent::has_doc_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_UserI2IEvents_UserI2IEvent::set_has_doc_likes() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_has_doc_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_doc_likes() {
  if (doc_likes_ != NULL) doc_likes_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
  clear_has_doc_likes();
}
const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEvent::doc_likes() const {
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* p = doc_likes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_likes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      &::cosmo::pb::_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::mutable_doc_likes() {
  set_has_doc_likes();
  if (doc_likes_ == NULL) {
    _slow_mutable_doc_likes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_likes)
  return doc_likes_;
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::release_doc_likes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_likes)
  clear_has_doc_likes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_doc_likes();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = doc_likes_;
    doc_likes_ = NULL;
    return temp;
  }
}
 void UserData_UserI2IEvents_UserI2IEvent::set_allocated_doc_likes(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_likes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_likes_;
  }
  if (doc_likes != NULL) {
    _slow_set_allocated_doc_likes(message_arena, &doc_likes);
  }
  doc_likes_ = doc_likes;
  if (doc_likes) {
    set_has_doc_likes();
  } else {
    clear_has_doc_likes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_likes)
}

// optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo site_dislikes = 6;
bool UserData_UserI2IEvents_UserI2IEvent::has_site_dislikes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData_UserI2IEvents_UserI2IEvent::set_has_site_dislikes() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_has_site_dislikes() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData_UserI2IEvents_UserI2IEvent::clear_site_dislikes() {
  if (site_dislikes_ != NULL) site_dislikes_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
  clear_has_site_dislikes();
}
const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEvent::site_dislikes() const {
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* p = site_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.site_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      &::cosmo::pb::_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::mutable_site_dislikes() {
  set_has_site_dislikes();
  if (site_dislikes_ == NULL) {
    _slow_mutable_site_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.site_dislikes)
  return site_dislikes_;
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::release_site_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.site_dislikes)
  clear_has_site_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_site_dislikes();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = site_dislikes_;
    site_dislikes_ = NULL;
    return temp;
  }
}
 void UserData_UserI2IEvents_UserI2IEvent::set_allocated_site_dislikes(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* site_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete site_dislikes_;
  }
  if (site_dislikes != NULL) {
    _slow_set_allocated_site_dislikes(message_arena, &site_dislikes);
  }
  site_dislikes_ = site_dislikes;
  if (site_dislikes) {
    set_has_site_dislikes();
  } else {
    clear_has_site_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.site_dislikes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserI2IEvents::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserI2IEvents::UserData_UserI2IEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserI2IEvents)
}
UserData_UserI2IEvents::UserData_UserI2IEvents(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  events_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserI2IEvents)
}
UserData_UserI2IEvents::UserData_UserI2IEvents(const UserData_UserI2IEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserI2IEvents)
}

void UserData_UserI2IEvents::SharedCtor() {
  _cached_size_ = 0;
}

UserData_UserI2IEvents::~UserData_UserI2IEvents() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserI2IEvents)
  SharedDtor();
}

void UserData_UserI2IEvents::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserI2IEvents::ArenaDtor(void* object) {
  UserData_UserI2IEvents* _this = reinterpret_cast< UserData_UserI2IEvents* >(object);
  (void)_this;
}
void UserData_UserI2IEvents::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserI2IEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserI2IEvents::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserI2IEvents& UserData_UserI2IEvents::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserI2IEvents* UserData_UserI2IEvents::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserI2IEvents>(arena);
}

void UserData_UserI2IEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserI2IEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserI2IEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserI2IEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.UserI2IEvents.UserI2IEvent events = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserI2IEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserI2IEvents)
  return false;
#undef DO_
}

void UserData_UserI2IEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserI2IEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.UserI2IEvents.UserI2IEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserI2IEvents)
}

::google::protobuf::uint8* UserData_UserI2IEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserI2IEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.UserI2IEvents.UserI2IEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->events(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserI2IEvents)
  return target;
}

size_t UserData_UserI2IEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserI2IEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.UserI2IEvents.UserI2IEvent events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserI2IEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserI2IEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserI2IEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserI2IEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserI2IEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserI2IEvents)
    MergeFrom(*source);
  }
}

void UserData_UserI2IEvents::MergeFrom(const UserData_UserI2IEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserI2IEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void UserData_UserI2IEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserI2IEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserI2IEvents::CopyFrom(const UserData_UserI2IEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserI2IEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserI2IEvents::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void UserData_UserI2IEvents::Swap(UserData_UserI2IEvents* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserI2IEvents* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserI2IEvents::UnsafeArenaSwap(UserData_UserI2IEvents* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserI2IEvents::InternalSwap(UserData_UserI2IEvents* other) {
  using std::swap;
  events_.InternalSwap(&other->events_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserI2IEvents::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserI2IEvents

// repeated .cosmo.pb.UserData.UserI2IEvents.UserI2IEvent events = 1;
int UserData_UserI2IEvents::events_size() const {
  return events_.size();
}
void UserData_UserI2IEvents::clear_events() {
  events_.Clear();
}
const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent& UserData_UserI2IEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.events)
  return events_.Get(index);
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent* UserData_UserI2IEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.events)
  return events_.Mutable(index);
}
::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent* UserData_UserI2IEvents::add_events() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserI2IEvents.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent >*
UserData_UserI2IEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserI2IEvents.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent >&
UserData_UserI2IEvents::events() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserI2IEvents.events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserSourcesEvents_UserSourceEventInfo::kLastTimestampFieldNumber;
const int UserData_UserSourcesEvents_UserSourceEventInfo::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserSourcesEvents_UserSourceEventInfo::UserData_UserSourcesEvents_UserSourceEventInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
}
UserData_UserSourcesEvents_UserSourceEventInfo::UserData_UserSourcesEvents_UserSourceEventInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
}
UserData_UserSourcesEvents_UserSourceEventInfo::UserData_UserSourcesEvents_UserSourceEventInfo(const UserData_UserSourcesEvents_UserSourceEventInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_timestamp_, &from.last_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&last_timestamp_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
}

void UserData_UserSourcesEvents_UserSourceEventInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&last_timestamp_)) + sizeof(count_));
}

UserData_UserSourcesEvents_UserSourceEventInfo::~UserData_UserSourcesEvents_UserSourceEventInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  SharedDtor();
}

void UserData_UserSourcesEvents_UserSourceEventInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserSourcesEvents_UserSourceEventInfo::ArenaDtor(void* object) {
  UserData_UserSourcesEvents_UserSourceEventInfo* _this = reinterpret_cast< UserData_UserSourcesEvents_UserSourceEventInfo* >(object);
  (void)_this;
}
void UserData_UserSourcesEvents_UserSourceEventInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserSourcesEvents_UserSourceEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserSourcesEvents_UserSourceEventInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserSourcesEvents_UserSourceEventInfo& UserData_UserSourcesEvents_UserSourceEventInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEventInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserSourcesEvents_UserSourceEventInfo>(arena);
}

void UserData_UserSourcesEvents_UserSourceEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&last_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&last_timestamp_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserSourcesEvents_UserSourceEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_last_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 count = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  return false;
#undef DO_
}

void UserData_UserSourcesEvents_UserSourceEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_timestamp(), output);
  }

  // required int64 count = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
}

::google::protobuf::uint8* UserData_UserSourcesEvents_UserSourceEventInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_timestamp(), target);
  }

  // required int64 count = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  return target;
}

size_t UserData_UserSourcesEvents_UserSourceEventInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  size_t total_size = 0;

  if (has_last_timestamp()) {
    // required int64 last_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_timestamp());
  }

  if (has_count()) {
    // required int64 count = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  return total_size;
}
size_t UserData_UserSourcesEvents_UserSourceEventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 last_timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_timestamp());

    // required int64 count = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserSourcesEvents_UserSourceEventInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserSourcesEvents_UserSourceEventInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserSourcesEvents_UserSourceEventInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
    MergeFrom(*source);
  }
}

void UserData_UserSourcesEvents_UserSourceEventInfo::MergeFrom(const UserData_UserSourcesEvents_UserSourceEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_timestamp_ = from.last_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserSourcesEvents_UserSourceEventInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserSourcesEvents_UserSourceEventInfo::CopyFrom(const UserData_UserSourcesEvents_UserSourceEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserSourcesEvents_UserSourceEventInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UserData_UserSourcesEvents_UserSourceEventInfo::Swap(UserData_UserSourcesEvents_UserSourceEventInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserSourcesEvents_UserSourceEventInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserSourcesEvents_UserSourceEventInfo::UnsafeArenaSwap(UserData_UserSourcesEvents_UserSourceEventInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserSourcesEvents_UserSourceEventInfo::InternalSwap(UserData_UserSourcesEvents_UserSourceEventInfo* other) {
  using std::swap;
  swap(last_timestamp_, other->last_timestamp_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserSourcesEvents_UserSourceEventInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserSourcesEvents_UserSourceEventInfo

// required int64 last_timestamp = 1;
bool UserData_UserSourcesEvents_UserSourceEventInfo::has_last_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserSourcesEvents_UserSourceEventInfo::set_has_last_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserSourcesEvents_UserSourceEventInfo::clear_has_last_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserSourcesEvents_UserSourceEventInfo::clear_last_timestamp() {
  last_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_timestamp();
}
::google::protobuf::int64 UserData_UserSourcesEvents_UserSourceEventInfo::last_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo.last_timestamp)
  return last_timestamp_;
}
void UserData_UserSourcesEvents_UserSourceEventInfo::set_last_timestamp(::google::protobuf::int64 value) {
  set_has_last_timestamp();
  last_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo.last_timestamp)
}

// required int64 count = 2 [default = 0];
bool UserData_UserSourcesEvents_UserSourceEventInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserSourcesEvents_UserSourceEventInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserSourcesEvents_UserSourceEventInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserSourcesEvents_UserSourceEventInfo::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
::google::protobuf::int64 UserData_UserSourcesEvents_UserSourceEventInfo::count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo.count)
  return count_;
}
void UserData_UserSourcesEvents_UserSourceEventInfo::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UserData_UserSourcesEvents_UserSourceEvent::_slow_mutable_clicks() {
  clicks_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::_slow_release_clicks() {
  if (clicks_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* temp = new ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo(*clicks_);
    clicks_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::unsafe_arena_release_clicks() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.clicks)
  clear_has_clicks();
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* temp = clicks_;
  clicks_ = NULL;
  return temp;
}
void UserData_UserSourcesEvents_UserSourceEvent::_slow_set_allocated_clicks(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo** clicks) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clicks) == NULL) {
      message_arena->Own(*clicks);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clicks)) {
      ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* new_clicks = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo >(
            message_arena);
      new_clicks->CopyFrom(**clicks);
      *clicks = new_clicks;
    }
}
void UserData_UserSourcesEvents_UserSourceEvent::unsafe_arena_set_allocated_clicks(
    ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* clicks) {
  if (GetArenaNoVirtual() == NULL) {
    delete clicks_;
  }
  clicks_ = clicks;
  if (clicks) {
    set_has_clicks();
  } else {
    clear_has_clicks();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.clicks)
}
void UserData_UserSourcesEvents_UserSourceEvent::_slow_mutable_shows() {
  shows_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::_slow_release_shows() {
  if (shows_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* temp = new ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo(*shows_);
    shows_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::unsafe_arena_release_shows() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.shows)
  clear_has_shows();
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* temp = shows_;
  shows_ = NULL;
  return temp;
}
void UserData_UserSourcesEvents_UserSourceEvent::_slow_set_allocated_shows(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo** shows) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shows) == NULL) {
      message_arena->Own(*shows);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shows)) {
      ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* new_shows = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo >(
            message_arena);
      new_shows->CopyFrom(**shows);
      *shows = new_shows;
    }
}
void UserData_UserSourcesEvents_UserSourceEvent::unsafe_arena_set_allocated_shows(
    ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* shows) {
  if (GetArenaNoVirtual() == NULL) {
    delete shows_;
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.shows)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserSourcesEvents_UserSourceEvent::kSourceIdFieldNumber;
const int UserData_UserSourcesEvents_UserSourceEvent::kClicksFieldNumber;
const int UserData_UserSourcesEvents_UserSourceEvent::kShowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserSourcesEvents_UserSourceEvent::UserData_UserSourcesEvents_UserSourceEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
}
UserData_UserSourcesEvents_UserSourceEvent::UserData_UserSourcesEvents_UserSourceEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
}
UserData_UserSourcesEvents_UserSourceEvent::UserData_UserSourcesEvents_UserSourceEvent(const UserData_UserSourcesEvents_UserSourceEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clicks()) {
    clicks_ = new ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo(*from.clicks_);
  } else {
    clicks_ = NULL;
  }
  if (from.has_shows()) {
    shows_ = new ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo(*from.shows_);
  } else {
    shows_ = NULL;
  }
  source_id_ = from.source_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
}

void UserData_UserSourcesEvents_UserSourceEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&clicks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_id_) -
      reinterpret_cast<char*>(&clicks_)) + sizeof(source_id_));
}

UserData_UserSourcesEvents_UserSourceEvent::~UserData_UserSourcesEvents_UserSourceEvent() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  SharedDtor();
}

void UserData_UserSourcesEvents_UserSourceEvent::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete clicks_;
  if (this != internal_default_instance()) delete shows_;
}

void UserData_UserSourcesEvents_UserSourceEvent::ArenaDtor(void* object) {
  UserData_UserSourcesEvents_UserSourceEvent* _this = reinterpret_cast< UserData_UserSourcesEvents_UserSourceEvent* >(object);
  (void)_this;
}
void UserData_UserSourcesEvents_UserSourceEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserSourcesEvents_UserSourceEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserSourcesEvents_UserSourceEvent::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserSourcesEvents_UserSourceEvent& UserData_UserSourcesEvents_UserSourceEvent::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserSourcesEvents_UserSourceEvent* UserData_UserSourcesEvents_UserSourceEvent::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserSourcesEvents_UserSourceEvent>(arena);
}

void UserData_UserSourcesEvents_UserSourceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(clicks_ != NULL);
      clicks_->::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shows_ != NULL);
      shows_->::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo::Clear();
    }
  }
  source_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserSourcesEvents_UserSourceEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo clicks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clicks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo shows = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  return false;
#undef DO_
}

void UserData_UserSourcesEvents_UserSourceEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo clicks = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clicks_, output);
  }

  // optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo shows = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->shows_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
}

::google::protobuf::uint8* UserData_UserSourcesEvents_UserSourceEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo clicks = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->clicks_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo shows = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->shows_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  return target;
}

size_t UserData_UserSourcesEvents_UserSourceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 source_id = 1;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo clicks = 2;
    if (has_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clicks_);
    }

    // optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo shows = 3;
    if (has_shows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shows_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserSourcesEvents_UserSourceEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserSourcesEvents_UserSourceEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserSourcesEvents_UserSourceEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
    MergeFrom(*source);
  }
}

void UserData_UserSourcesEvents_UserSourceEvent::MergeFrom(const UserData_UserSourcesEvents_UserSourceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_clicks()->::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo::MergeFrom(from.clicks());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shows()->::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo::MergeFrom(from.shows());
    }
    if (cached_has_bits & 0x00000004u) {
      source_id_ = from.source_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserSourcesEvents_UserSourceEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserSourcesEvents_UserSourceEvent::CopyFrom(const UserData_UserSourcesEvents_UserSourceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserSourcesEvents_UserSourceEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_clicks()) {
    if (!this->clicks_->IsInitialized()) return false;
  }
  if (has_shows()) {
    if (!this->shows_->IsInitialized()) return false;
  }
  return true;
}

void UserData_UserSourcesEvents_UserSourceEvent::Swap(UserData_UserSourcesEvents_UserSourceEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserSourcesEvents_UserSourceEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserSourcesEvents_UserSourceEvent::UnsafeArenaSwap(UserData_UserSourcesEvents_UserSourceEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserSourcesEvents_UserSourceEvent::InternalSwap(UserData_UserSourcesEvents_UserSourceEvent* other) {
  using std::swap;
  swap(clicks_, other->clicks_);
  swap(shows_, other->shows_);
  swap(source_id_, other->source_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserSourcesEvents_UserSourceEvent::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserSourcesEvents_UserSourceEvent

// required int64 source_id = 1;
bool UserData_UserSourcesEvents_UserSourceEvent::has_source_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserSourcesEvents_UserSourceEvent::set_has_source_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserSourcesEvents_UserSourceEvent::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserSourcesEvents_UserSourceEvent::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 UserData_UserSourcesEvents_UserSourceEvent::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.source_id)
  return source_id_;
}
void UserData_UserSourcesEvents_UserSourceEvent::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.source_id)
}

// optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo clicks = 2;
bool UserData_UserSourcesEvents_UserSourceEvent::has_clicks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserSourcesEvents_UserSourceEvent::set_has_clicks() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserSourcesEvents_UserSourceEvent::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserSourcesEvents_UserSourceEvent::clear_clicks() {
  if (clicks_ != NULL) clicks_->::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo::Clear();
  clear_has_clicks();
}
const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo& UserData_UserSourcesEvents_UserSourceEvent::clicks() const {
  const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* p = clicks_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.clicks)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo*>(
      &::cosmo::pb::_UserData_UserSourcesEvents_UserSourceEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::mutable_clicks() {
  set_has_clicks();
  if (clicks_ == NULL) {
    _slow_mutable_clicks();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.clicks)
  return clicks_;
}
::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::release_clicks() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.clicks)
  clear_has_clicks();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks();
  } else {
    ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* temp = clicks_;
    clicks_ = NULL;
    return temp;
  }
}
 void UserData_UserSourcesEvents_UserSourceEvent::set_allocated_clicks(::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* clicks) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_;
  }
  if (clicks != NULL) {
    _slow_set_allocated_clicks(message_arena, &clicks);
  }
  clicks_ = clicks;
  if (clicks) {
    set_has_clicks();
  } else {
    clear_has_clicks();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.clicks)
}

// optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo shows = 3;
bool UserData_UserSourcesEvents_UserSourceEvent::has_shows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserSourcesEvents_UserSourceEvent::set_has_shows() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserSourcesEvents_UserSourceEvent::clear_has_shows() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserSourcesEvents_UserSourceEvent::clear_shows() {
  if (shows_ != NULL) shows_->::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo::Clear();
  clear_has_shows();
}
const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo& UserData_UserSourcesEvents_UserSourceEvent::shows() const {
  const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* p = shows_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.shows)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo*>(
      &::cosmo::pb::_UserData_UserSourcesEvents_UserSourceEventInfo_default_instance_);
}
::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::mutable_shows() {
  set_has_shows();
  if (shows_ == NULL) {
    _slow_mutable_shows();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.shows)
  return shows_;
}
::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::release_shows() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.shows)
  clear_has_shows();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows();
  } else {
    ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* temp = shows_;
    shows_ = NULL;
    return temp;
  }
}
 void UserData_UserSourcesEvents_UserSourceEvent::set_allocated_shows(::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* shows) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_;
  }
  if (shows != NULL) {
    _slow_set_allocated_shows(message_arena, &shows);
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.shows)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserSourcesEvents::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserSourcesEvents::UserData_UserSourcesEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserSourcesEvents)
}
UserData_UserSourcesEvents::UserData_UserSourcesEvents(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  events_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserSourcesEvents)
}
UserData_UserSourcesEvents::UserData_UserSourcesEvents(const UserData_UserSourcesEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserSourcesEvents)
}

void UserData_UserSourcesEvents::SharedCtor() {
  _cached_size_ = 0;
}

UserData_UserSourcesEvents::~UserData_UserSourcesEvents() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserSourcesEvents)
  SharedDtor();
}

void UserData_UserSourcesEvents::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserSourcesEvents::ArenaDtor(void* object) {
  UserData_UserSourcesEvents* _this = reinterpret_cast< UserData_UserSourcesEvents* >(object);
  (void)_this;
}
void UserData_UserSourcesEvents::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserSourcesEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserSourcesEvents::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserSourcesEvents& UserData_UserSourcesEvents::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserSourcesEvents* UserData_UserSourcesEvents::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserSourcesEvents>(arena);
}

void UserData_UserSourcesEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserSourcesEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserSourcesEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserSourcesEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent events = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserSourcesEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserSourcesEvents)
  return false;
#undef DO_
}

void UserData_UserSourcesEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserSourcesEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserSourcesEvents)
}

::google::protobuf::uint8* UserData_UserSourcesEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserSourcesEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->events(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserSourcesEvents)
  return target;
}

size_t UserData_UserSourcesEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserSourcesEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserSourcesEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserSourcesEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserSourcesEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserSourcesEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserSourcesEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserSourcesEvents)
    MergeFrom(*source);
  }
}

void UserData_UserSourcesEvents::MergeFrom(const UserData_UserSourcesEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserSourcesEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void UserData_UserSourcesEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserSourcesEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserSourcesEvents::CopyFrom(const UserData_UserSourcesEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserSourcesEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserSourcesEvents::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void UserData_UserSourcesEvents::Swap(UserData_UserSourcesEvents* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserSourcesEvents* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserSourcesEvents::UnsafeArenaSwap(UserData_UserSourcesEvents* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserSourcesEvents::InternalSwap(UserData_UserSourcesEvents* other) {
  using std::swap;
  events_.InternalSwap(&other->events_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserSourcesEvents::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserSourcesEvents

// repeated .cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent events = 1;
int UserData_UserSourcesEvents::events_size() const {
  return events_.size();
}
void UserData_UserSourcesEvents::clear_events() {
  events_.Clear();
}
const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent& UserData_UserSourcesEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.events)
  return events_.Get(index);
}
::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent* UserData_UserSourcesEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserSourcesEvents.events)
  return events_.Mutable(index);
}
::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent* UserData_UserSourcesEvents::add_events() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserSourcesEvents.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent >*
UserData_UserSourcesEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserSourcesEvents.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent >&
UserData_UserSourcesEvents::events() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserSourcesEvents.events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideos::kVersionFieldNumber;
const int UserData_UserVideos::kVideoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideos::UserData_UserVideos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideos)
}
UserData_UserVideos::UserData_UserVideos(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  video_id_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideos)
}
UserData_UserVideos::UserData_UserVideos(const UserData_UserVideos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      video_id_(from.video_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideos)
}

void UserData_UserVideos::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_UserVideos::~UserData_UserVideos() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideos)
  SharedDtor();
}

void UserData_UserVideos::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideos::ArenaDtor(void* object) {
  UserData_UserVideos* _this = reinterpret_cast< UserData_UserVideos* >(object);
  (void)_this;
}
void UserData_UserVideos::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideos::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideos& UserData_UserVideos::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideos* UserData_UserVideos::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideos>(arena);
}

void UserData_UserVideos::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_id_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 video_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_video_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_video_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideos)
  return false;
#undef DO_
}

void UserData_UserVideos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated int64 video_id = 2;
  for (int i = 0, n = this->video_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->video_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideos)
}

::google::protobuf::uint8* UserData_UserVideos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated int64 video_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->video_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideos)
  return target;
}

size_t UserData_UserVideos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated int64 video_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->video_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->video_id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideos)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideos)
    MergeFrom(*source);
  }
}

void UserData_UserVideos::MergeFrom(const UserData_UserVideos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  video_id_.MergeFrom(from.video_id_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_UserVideos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideos::CopyFrom(const UserData_UserVideos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_UserVideos::Swap(UserData_UserVideos* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideos* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideos::UnsafeArenaSwap(UserData_UserVideos* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideos::InternalSwap(UserData_UserVideos* other) {
  using std::swap;
  video_id_.InternalSwap(&other->video_id_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideos::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideos

// required uint32 version = 1;
bool UserData_UserVideos::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideos::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideos::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideos::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_UserVideos::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideos.version)
  return version_;
}
void UserData_UserVideos::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideos.version)
}

// repeated int64 video_id = 2;
int UserData_UserVideos::video_id_size() const {
  return video_id_.size();
}
void UserData_UserVideos::clear_video_id() {
  video_id_.Clear();
}
::google::protobuf::int64 UserData_UserVideos::video_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideos.video_id)
  return video_id_.Get(index);
}
void UserData_UserVideos::set_video_id(int index, ::google::protobuf::int64 value) {
  video_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideos.video_id)
}
void UserData_UserVideos::add_video_id(::google::protobuf::int64 value) {
  video_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserVideos.video_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_UserVideos::video_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserVideos.video_id)
  return video_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_UserVideos::mutable_video_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserVideos.video_id)
  return &video_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserMusic_TrackInfo::kHashIdFieldNumber;
const int UserData_UserMusic_TrackInfo::kListensCountFieldNumber;
const int UserData_UserMusic_TrackInfo::kLastListenTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserMusic_TrackInfo::UserData_UserMusic_TrackInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserMusic.TrackInfo)
}
UserData_UserMusic_TrackInfo::UserData_UserMusic_TrackInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserMusic.TrackInfo)
}
UserData_UserMusic_TrackInfo::UserData_UserMusic_TrackInfo(const UserData_UserMusic_TrackInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hash_id_, &from.hash_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&listens_count_) -
    reinterpret_cast<char*>(&hash_id_)) + sizeof(listens_count_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserMusic.TrackInfo)
}

void UserData_UserMusic_TrackInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hash_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listens_count_) -
      reinterpret_cast<char*>(&hash_id_)) + sizeof(listens_count_));
}

UserData_UserMusic_TrackInfo::~UserData_UserMusic_TrackInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserMusic.TrackInfo)
  SharedDtor();
}

void UserData_UserMusic_TrackInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserMusic_TrackInfo::ArenaDtor(void* object) {
  UserData_UserMusic_TrackInfo* _this = reinterpret_cast< UserData_UserMusic_TrackInfo* >(object);
  (void)_this;
}
void UserData_UserMusic_TrackInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserMusic_TrackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserMusic_TrackInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserMusic_TrackInfo& UserData_UserMusic_TrackInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserMusic_TrackInfo* UserData_UserMusic_TrackInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserMusic_TrackInfo>(arena);
}

void UserData_UserMusic_TrackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserMusic.TrackInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&hash_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&listens_count_) -
        reinterpret_cast<char*>(&hash_id_)) + sizeof(listens_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserMusic_TrackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserMusic.TrackInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 hash_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hash_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hash_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 listens_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_listens_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listens_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_listen_ts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_listen_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_listen_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserMusic.TrackInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserMusic.TrackInfo)
  return false;
#undef DO_
}

void UserData_UserMusic_TrackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserMusic.TrackInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 hash_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hash_id(), output);
  }

  // optional uint32 listens_count = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->listens_count(), output);
  }

  // optional int64 last_listen_ts = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_listen_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserMusic.TrackInfo)
}

::google::protobuf::uint8* UserData_UserMusic_TrackInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserMusic.TrackInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 hash_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hash_id(), target);
  }

  // optional uint32 listens_count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->listens_count(), target);
  }

  // optional int64 last_listen_ts = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_listen_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserMusic.TrackInfo)
  return target;
}

size_t UserData_UserMusic_TrackInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserMusic.TrackInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 hash_id = 1;
  if (has_hash_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->hash_id());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional int64 last_listen_ts = 3;
    if (has_last_listen_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_listen_ts());
    }

    // optional uint32 listens_count = 2;
    if (has_listens_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listens_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserMusic_TrackInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserMusic.TrackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserMusic_TrackInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserMusic_TrackInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserMusic.TrackInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserMusic.TrackInfo)
    MergeFrom(*source);
  }
}

void UserData_UserMusic_TrackInfo::MergeFrom(const UserData_UserMusic_TrackInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserMusic.TrackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hash_id_ = from.hash_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_listen_ts_ = from.last_listen_ts_;
    }
    if (cached_has_bits & 0x00000004u) {
      listens_count_ = from.listens_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserMusic_TrackInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserMusic.TrackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserMusic_TrackInfo::CopyFrom(const UserData_UserMusic_TrackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserMusic.TrackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserMusic_TrackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UserData_UserMusic_TrackInfo::Swap(UserData_UserMusic_TrackInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserMusic_TrackInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserMusic_TrackInfo::UnsafeArenaSwap(UserData_UserMusic_TrackInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserMusic_TrackInfo::InternalSwap(UserData_UserMusic_TrackInfo* other) {
  using std::swap;
  swap(hash_id_, other->hash_id_);
  swap(last_listen_ts_, other->last_listen_ts_);
  swap(listens_count_, other->listens_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserMusic_TrackInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserMusic_TrackInfo

// required int64 hash_id = 1;
bool UserData_UserMusic_TrackInfo::has_hash_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserMusic_TrackInfo::set_has_hash_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserMusic_TrackInfo::clear_has_hash_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserMusic_TrackInfo::clear_hash_id() {
  hash_id_ = GOOGLE_LONGLONG(0);
  clear_has_hash_id();
}
::google::protobuf::int64 UserData_UserMusic_TrackInfo::hash_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserMusic.TrackInfo.hash_id)
  return hash_id_;
}
void UserData_UserMusic_TrackInfo::set_hash_id(::google::protobuf::int64 value) {
  set_has_hash_id();
  hash_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserMusic.TrackInfo.hash_id)
}

// optional uint32 listens_count = 2;
bool UserData_UserMusic_TrackInfo::has_listens_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserMusic_TrackInfo::set_has_listens_count() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserMusic_TrackInfo::clear_has_listens_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserMusic_TrackInfo::clear_listens_count() {
  listens_count_ = 0u;
  clear_has_listens_count();
}
::google::protobuf::uint32 UserData_UserMusic_TrackInfo::listens_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserMusic.TrackInfo.listens_count)
  return listens_count_;
}
void UserData_UserMusic_TrackInfo::set_listens_count(::google::protobuf::uint32 value) {
  set_has_listens_count();
  listens_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserMusic.TrackInfo.listens_count)
}

// optional int64 last_listen_ts = 3;
bool UserData_UserMusic_TrackInfo::has_last_listen_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserMusic_TrackInfo::set_has_last_listen_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserMusic_TrackInfo::clear_has_last_listen_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserMusic_TrackInfo::clear_last_listen_ts() {
  last_listen_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_listen_ts();
}
::google::protobuf::int64 UserData_UserMusic_TrackInfo::last_listen_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserMusic.TrackInfo.last_listen_ts)
  return last_listen_ts_;
}
void UserData_UserMusic_TrackInfo::set_last_listen_ts(::google::protobuf::int64 value) {
  set_has_last_listen_ts();
  last_listen_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserMusic.TrackInfo.last_listen_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserMusic::kVersionFieldNumber;
const int UserData_UserMusic::kTracksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserMusic::UserData_UserMusic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserMusic)
}
UserData_UserMusic::UserData_UserMusic(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tracks_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserMusic)
}
UserData_UserMusic::UserData_UserMusic(const UserData_UserMusic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tracks_(from.tracks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserMusic)
}

void UserData_UserMusic::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

UserData_UserMusic::~UserData_UserMusic() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserMusic)
  SharedDtor();
}

void UserData_UserMusic::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserMusic::ArenaDtor(void* object) {
  UserData_UserMusic* _this = reinterpret_cast< UserData_UserMusic* >(object);
  (void)_this;
}
void UserData_UserMusic::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserMusic::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserMusic& UserData_UserMusic::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserMusic* UserData_UserMusic::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserMusic>(arena);
}

void UserData_UserMusic::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracks_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserMusic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.UserData.UserMusic.TrackInfo tracks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserMusic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserMusic)
  return false;
#undef DO_
}

void UserData_UserMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .cosmo.pb.UserData.UserMusic.TrackInfo tracks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tracks(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserMusic)
}

::google::protobuf::uint8* UserData_UserMusic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserMusic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .cosmo.pb.UserData.UserMusic.TrackInfo tracks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->tracks(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserMusic)
  return target;
}

size_t UserData_UserMusic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserMusic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated .cosmo.pb.UserData.UserMusic.TrackInfo tracks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tracks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserMusic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserMusic)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserMusic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserMusic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserMusic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserMusic)
    MergeFrom(*source);
  }
}

void UserData_UserMusic::MergeFrom(const UserData_UserMusic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserMusic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracks_.MergeFrom(from.tracks_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void UserData_UserMusic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserMusic::CopyFrom(const UserData_UserMusic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserMusic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tracks())) return false;
  return true;
}

void UserData_UserMusic::Swap(UserData_UserMusic* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserMusic* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserMusic::UnsafeArenaSwap(UserData_UserMusic* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserMusic::InternalSwap(UserData_UserMusic* other) {
  using std::swap;
  tracks_.InternalSwap(&other->tracks_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserMusic::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserMusic

// required uint32 version = 1;
bool UserData_UserMusic::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserMusic::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserMusic::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserMusic::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 UserData_UserMusic::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserMusic.version)
  return version_;
}
void UserData_UserMusic::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserMusic.version)
}

// repeated .cosmo.pb.UserData.UserMusic.TrackInfo tracks = 2;
int UserData_UserMusic::tracks_size() const {
  return tracks_.size();
}
void UserData_UserMusic::clear_tracks() {
  tracks_.Clear();
}
const ::cosmo::pb::UserData_UserMusic_TrackInfo& UserData_UserMusic::tracks(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserMusic.tracks)
  return tracks_.Get(index);
}
::cosmo::pb::UserData_UserMusic_TrackInfo* UserData_UserMusic::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserMusic.tracks)
  return tracks_.Mutable(index);
}
::cosmo::pb::UserData_UserMusic_TrackInfo* UserData_UserMusic::add_tracks() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserMusic.tracks)
  return tracks_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserMusic_TrackInfo >*
UserData_UserMusic::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserMusic.tracks)
  return &tracks_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserMusic_TrackInfo >&
UserData_UserMusic::tracks() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserMusic.tracks)
  return tracks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_DailyCounters::kCommonFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_DailyCounters::kMorningFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_DailyCounters::kDayFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_DailyCounters::kEveningFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_DailyCounters::kNightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_DailyCounters::UserData_UserVideoEvents_UserVideoEvent_DailyCounters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
}
UserData_UserVideoEvents_UserVideoEvent_DailyCounters::UserData_UserVideoEvents_UserVideoEvent_DailyCounters(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
}
UserData_UserVideoEvents_UserVideoEvent_DailyCounters::UserData_UserVideoEvents_UserVideoEvent_DailyCounters(const UserData_UserVideoEvents_UserVideoEvent_DailyCounters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&common_, &from.common_,
    static_cast<size_t>(reinterpret_cast<char*>(&night_) -
    reinterpret_cast<char*>(&common_)) + sizeof(night_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
}

void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&night_) -
      reinterpret_cast<char*>(&common_)) + sizeof(night_));
}

UserData_UserVideoEvents_UserVideoEvent_DailyCounters::~UserData_UserVideoEvents_UserVideoEvent_DailyCounters() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_DailyCounters* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_DailyCounters* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_DailyCounters::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_DailyCounters& UserData_UserVideoEvents_UserVideoEvent_DailyCounters::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_DailyCounters* UserData_UserVideoEvents_UserVideoEvent_DailyCounters::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_DailyCounters>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&common_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&night_) -
        reinterpret_cast<char*>(&common_)) + sizeof(night_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_common();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &common_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 morning = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_morning();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &morning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 evening = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_evening();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &evening_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 night = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_night();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &night_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 common = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->common(), output);
  }

  // optional uint64 morning = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->morning(), output);
  }

  // optional uint64 day = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->day(), output);
  }

  // optional uint64 evening = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->evening(), output);
  }

  // optional uint64 night = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->night(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_DailyCounters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->common(), target);
  }

  // optional uint64 morning = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->morning(), target);
  }

  // optional uint64 day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->day(), target);
  }

  // optional uint64 evening = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->evening(), target);
  }

  // optional uint64 night = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->night(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_DailyCounters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint64 common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->common());
    }

    // optional uint64 morning = 2;
    if (has_morning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->morning());
    }

    // optional uint64 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->day());
    }

    // optional uint64 evening = 4;
    if (has_evening()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->evening());
    }

    // optional uint64 night = 5;
    if (has_night()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->night());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_DailyCounters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_DailyCounters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_DailyCounters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      common_ = from.common_;
    }
    if (cached_has_bits & 0x00000002u) {
      morning_ = from.morning_;
    }
    if (cached_has_bits & 0x00000004u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000008u) {
      evening_ = from.evening_;
    }
    if (cached_has_bits & 0x00000010u) {
      night_ = from.night_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_DailyCounters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::Swap(UserData_UserVideoEvents_UserVideoEvent_DailyCounters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_DailyCounters* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_DailyCounters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_DailyCounters* other) {
  using std::swap;
  swap(common_, other->common_);
  swap(morning_, other->morning_);
  swap(day_, other->day_);
  swap(evening_, other->evening_);
  swap(night_, other->night_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_DailyCounters::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_DailyCounters

// optional uint64 common = 1;
bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_common() {
  common_ = GOOGLE_ULONGLONG(0);
  clear_has_common();
}
::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_DailyCounters::common() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.common)
  return common_;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_common(::google::protobuf::uint64 value) {
  set_has_common();
  common_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.common)
}

// optional uint64 morning = 2;
bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::has_morning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_has_morning() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_has_morning() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_morning() {
  morning_ = GOOGLE_ULONGLONG(0);
  clear_has_morning();
}
::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_DailyCounters::morning() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.morning)
  return morning_;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_morning(::google::protobuf::uint64 value) {
  set_has_morning();
  morning_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.morning)
}

// optional uint64 day = 3;
bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_day() {
  day_ = GOOGLE_ULONGLONG(0);
  clear_has_day();
}
::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_DailyCounters::day() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.day)
  return day_;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_day(::google::protobuf::uint64 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.day)
}

// optional uint64 evening = 4;
bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::has_evening() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_has_evening() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_has_evening() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_evening() {
  evening_ = GOOGLE_ULONGLONG(0);
  clear_has_evening();
}
::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_DailyCounters::evening() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.evening)
  return evening_;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_evening(::google::protobuf::uint64 value) {
  set_has_evening();
  evening_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.evening)
}

// optional uint64 night = 5;
bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::has_night() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_has_night() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_has_night() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_night() {
  night_ = GOOGLE_ULONGLONG(0);
  clear_has_night();
}
::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_DailyCounters::night() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.night)
  return night_;
}
void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_night(::google::protobuf::uint64 value) {
  set_has_night();
  night_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.night)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Location::kBlockFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Location::kScreenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Location::UserData_UserVideoEvents_UserVideoEvent_Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
}
UserData_UserVideoEvents_UserVideoEvent_Location::UserData_UserVideoEvents_UserVideoEvent_Location(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
}
UserData_UserVideoEvents_UserVideoEvent_Location::UserData_UserVideoEvents_UserVideoEvent_Location(const UserData_UserVideoEvents_UserVideoEvent_Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_block()) {
    block_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.block(),
      GetArenaNoVirtual());
  }
  screen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_screen()) {
    screen_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.screen(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
}

void UserData_UserVideoEvents_UserVideoEvent_Location::SharedCtor() {
  _cached_size_ = 0;
  block_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  screen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserData_UserVideoEvents_UserVideoEvent_Location::~UserData_UserVideoEvents_UserVideoEvent_Location() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Location::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  block_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  screen_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Location::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Location* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Location* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Location::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Location::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Location& UserData_UserVideoEvents_UserVideoEvent_Location::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_Location::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Location>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!block_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      block_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!screen_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      screen_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->block().data(), static_cast<int>(this->block().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string screen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_screen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->screen().data(), static_cast<int>(this->screen().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string block = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block().data(), static_cast<int>(this->block().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->block(), output);
  }

  // optional string screen = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->screen().data(), static_cast<int>(this->screen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->screen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string block = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->block().data(), static_cast<int>(this->block().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block(), target);
  }

  // optional string screen = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->screen().data(), static_cast<int>(this->screen().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->screen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block());
    }

    // optional string screen = 2;
    if (has_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->screen());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Location::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_block(from.block());
    }
    if (cached_has_bits & 0x00000002u) {
      set_screen(from.screen());
    }
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Location::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Location::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Location::Swap(UserData_UserVideoEvents_UserVideoEvent_Location* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Location* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Location::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Location* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Location::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Location* other) {
  using std::swap;
  block_.Swap(&other->block_);
  screen_.Swap(&other->screen_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Location::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Location

// optional string block = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Location::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Location::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Location::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Location::clear_block() {
  block_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_block();
}
const ::std::string& UserData_UserVideoEvents_UserVideoEvent_Location::block() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
  return block_.Get();
}
void UserData_UserVideoEvents_UserVideoEvent_Location::set_block(const ::std::string& value) {
  set_has_block();
  block_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}
#if LANG_CXX11
void UserData_UserVideoEvents_UserVideoEvent_Location::set_block(::std::string&& value) {
  set_has_block();
  block_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}
#endif
void UserData_UserVideoEvents_UserVideoEvent_Location::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}
void UserData_UserVideoEvents_UserVideoEvent_Location::set_block(const char* value,
    size_t size) {
  set_has_block();
  block_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}
::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
  return block_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::release_block() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
  clear_has_block();
  return block_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_block();
  return block_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UserData_UserVideoEvents_UserVideoEvent_Location::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}
void UserData_UserVideoEvents_UserVideoEvent_Location::unsafe_arena_set_allocated_block(
    ::std::string* block) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      block, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}

// optional string screen = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Location::has_screen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Location::set_has_screen() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Location::clear_has_screen() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Location::clear_screen() {
  screen_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_screen();
}
const ::std::string& UserData_UserVideoEvents_UserVideoEvent_Location::screen() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
  return screen_.Get();
}
void UserData_UserVideoEvents_UserVideoEvent_Location::set_screen(const ::std::string& value) {
  set_has_screen();
  screen_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}
#if LANG_CXX11
void UserData_UserVideoEvents_UserVideoEvent_Location::set_screen(::std::string&& value) {
  set_has_screen();
  screen_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}
#endif
void UserData_UserVideoEvents_UserVideoEvent_Location::set_screen(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_screen();
  screen_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}
void UserData_UserVideoEvents_UserVideoEvent_Location::set_screen(const char* value,
    size_t size) {
  set_has_screen();
  screen_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}
::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::mutable_screen() {
  set_has_screen();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
  return screen_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::release_screen() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
  clear_has_screen();
  return screen_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::unsafe_arena_release_screen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_screen();
  return screen_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UserData_UserVideoEvents_UserVideoEvent_Location::set_allocated_screen(::std::string* screen) {
  if (screen != NULL) {
    set_has_screen();
  } else {
    clear_has_screen();
  }
  screen_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), screen,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}
void UserData_UserVideoEvents_UserVideoEvent_Location::unsafe_arena_set_allocated_screen(
    ::std::string* screen) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (screen != NULL) {
    set_has_screen();
  } else {
    clear_has_screen();
  }
  screen_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      screen, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Emotion::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Emotion::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Emotion::UserData_UserVideoEvents_UserVideoEvent_Emotion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
}
UserData_UserVideoEvents_UserVideoEvent_Emotion::UserData_UserVideoEvents_UserVideoEvent_Emotion(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
}
UserData_UserVideoEvents_UserVideoEvent_Emotion::UserData_UserVideoEvents_UserVideoEvent_Emotion(const UserData_UserVideoEvents_UserVideoEvent_Emotion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
}

void UserData_UserVideoEvents_UserVideoEvent_Emotion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Emotion::~UserData_UserVideoEvents_UserVideoEvent_Emotion() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Emotion::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Emotion::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Emotion* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Emotion* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Emotion::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Emotion& UserData_UserVideoEvents_UserVideoEvent_Emotion::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Emotion* UserData_UserVideoEvents_UserVideoEvent_Emotion::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Emotion>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Emotion::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Emotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Emotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Emotion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Emotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Emotion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Emotion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Emotion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Emotion::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Emotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Emotion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Emotion::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Emotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Emotion::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Emotion::Swap(UserData_UserVideoEvents_UserVideoEvent_Emotion* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Emotion* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Emotion* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Emotion* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Emotion::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Emotion

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Emotion::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Emotion::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion.timestamp)
}

// optional int32 value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Emotion::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Emotion::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Emotion::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Favorite::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Favorite::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Favorite::UserData_UserVideoEvents_UserVideoEvent_Favorite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
}
UserData_UserVideoEvents_UserVideoEvent_Favorite::UserData_UserVideoEvents_UserVideoEvent_Favorite(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
}
UserData_UserVideoEvents_UserVideoEvent_Favorite::UserData_UserVideoEvents_UserVideoEvent_Favorite(const UserData_UserVideoEvents_UserVideoEvent_Favorite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
}

void UserData_UserVideoEvents_UserVideoEvent_Favorite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Favorite::~UserData_UserVideoEvents_UserVideoEvent_Favorite() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Favorite::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Favorite::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Favorite* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Favorite* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Favorite::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Favorite& UserData_UserVideoEvents_UserVideoEvent_Favorite::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Favorite* UserData_UserVideoEvents_UserVideoEvent_Favorite::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Favorite>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Favorite::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Favorite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Favorite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Favorite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Favorite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Favorite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Favorite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Favorite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Favorite::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Favorite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Favorite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Favorite::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Favorite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Favorite::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Favorite::Swap(UserData_UserVideoEvents_UserVideoEvent_Favorite* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Favorite* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Favorite* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Favorite* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Favorite::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Favorite

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Favorite::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Favorite::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite.timestamp)
}

// optional bool value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Favorite::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::clear_value() {
  value_ = false;
  clear_has_value();
}
bool UserData_UserVideoEvents_UserVideoEvent_Favorite::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Favorite::set_value(bool value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Rate::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Rate::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Rate::UserData_UserVideoEvents_UserVideoEvent_Rate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
}
UserData_UserVideoEvents_UserVideoEvent_Rate::UserData_UserVideoEvents_UserVideoEvent_Rate(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
}
UserData_UserVideoEvents_UserVideoEvent_Rate::UserData_UserVideoEvents_UserVideoEvent_Rate(const UserData_UserVideoEvents_UserVideoEvent_Rate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
}

void UserData_UserVideoEvents_UserVideoEvent_Rate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Rate::~UserData_UserVideoEvents_UserVideoEvent_Rate() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Rate::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Rate::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Rate* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Rate* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Rate::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Rate& UserData_UserVideoEvents_UserVideoEvent_Rate::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent_Rate::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Rate>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Rate::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Rate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Rate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Rate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Rate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Rate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Rate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Rate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Rate::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Rate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Rate::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Rate::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Rate::Swap(UserData_UserVideoEvents_UserVideoEvent_Rate* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Rate* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Rate* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Rate* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Rate::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Rate

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Rate::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Rate::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate.timestamp)
}

// optional int32 value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Rate::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Rate::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Comment::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Comment::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Comment::UserData_UserVideoEvents_UserVideoEvent_Comment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
}
UserData_UserVideoEvents_UserVideoEvent_Comment::UserData_UserVideoEvents_UserVideoEvent_Comment(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
}
UserData_UserVideoEvents_UserVideoEvent_Comment::UserData_UserVideoEvents_UserVideoEvent_Comment(const UserData_UserVideoEvents_UserVideoEvent_Comment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
}

void UserData_UserVideoEvents_UserVideoEvent_Comment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Comment::~UserData_UserVideoEvents_UserVideoEvent_Comment() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Comment::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Comment::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Comment* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Comment* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Comment::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Comment& UserData_UserVideoEvents_UserVideoEvent_Comment::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Comment* UserData_UserVideoEvents_UserVideoEvent_Comment::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Comment>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Comment::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Comment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Comment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Comment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Comment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Comment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Comment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Comment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Comment::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Comment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Comment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Comment::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Comment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Comment::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Comment::Swap(UserData_UserVideoEvents_UserVideoEvent_Comment* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Comment* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Comment* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Comment* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Comment::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Comment

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Comment::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Comment::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment.timestamp)
}

// optional int32 value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Comment::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Comment::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Comment::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Block::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Block::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Block::UserData_UserVideoEvents_UserVideoEvent_Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
}
UserData_UserVideoEvents_UserVideoEvent_Block::UserData_UserVideoEvents_UserVideoEvent_Block(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
}
UserData_UserVideoEvents_UserVideoEvent_Block::UserData_UserVideoEvents_UserVideoEvent_Block(const UserData_UserVideoEvents_UserVideoEvent_Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
}

void UserData_UserVideoEvents_UserVideoEvent_Block::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Block::~UserData_UserVideoEvents_UserVideoEvent_Block() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Block::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Block::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Block* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Block* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Block::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Block::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Block& UserData_UserVideoEvents_UserVideoEvent_Block::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Block* UserData_UserVideoEvents_UserVideoEvent_Block::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Block>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Block::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Block* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Block::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Block::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Block::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Block::Swap(UserData_UserVideoEvents_UserVideoEvent_Block* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Block* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Block::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Block* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Block::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Block* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Block::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Block

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Block::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Block::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Block::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Block::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Block::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Block::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block.timestamp)
}

// optional bool value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Block::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Block::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Block::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Block::clear_value() {
  value_ = false;
  clear_has_value();
}
bool UserData_UserVideoEvents_UserVideoEvent_Block::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Block::set_value(bool value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Share::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Share::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Share::UserData_UserVideoEvents_UserVideoEvent_Share()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
}
UserData_UserVideoEvents_UserVideoEvent_Share::UserData_UserVideoEvents_UserVideoEvent_Share(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
}
UserData_UserVideoEvents_UserVideoEvent_Share::UserData_UserVideoEvents_UserVideoEvent_Share(const UserData_UserVideoEvents_UserVideoEvent_Share& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
}

void UserData_UserVideoEvents_UserVideoEvent_Share::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Share::~UserData_UserVideoEvents_UserVideoEvent_Share() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Share::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Share::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Share* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Share* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Share::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Share::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Share::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Share& UserData_UserVideoEvents_UserVideoEvent_Share::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Share* UserData_UserVideoEvents_UserVideoEvent_Share::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Share>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Share::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Share::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Share::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Share::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Share::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Share::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Share* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Share>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Share::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Share& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Share::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Share::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Share& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Share::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Share::Swap(UserData_UserVideoEvents_UserVideoEvent_Share* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Share* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Share::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Share* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Share::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Share* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Share::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Share

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Share::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Share::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Share::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Share::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Share::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Share::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share.timestamp)
}

// optional int32 value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Share::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Share::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Share::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Share::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Share::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Share::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UserData_UserVideoEvents_UserVideoEvent_Watch::_slow_mutable_location() {
  location_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_Watch::_slow_release_location() {
  if (location_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location(*location_);
    location_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_Watch::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.location)
  clear_has_location();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = location_;
  location_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::_slow_set_allocated_location(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location** location) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*location) == NULL) {
      message_arena->Own(*location);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*location)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* new_location = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location >(
            message_arena);
      new_location->CopyFrom(**location);
      *location = new_location;
    }
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::unsafe_arena_set_allocated_location(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location) {
  if (GetArenaNoVirtual() == NULL) {
    delete location_;
  }
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.location)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Watch::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Watch::kDurationFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Watch::kPercentFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Watch::kCumulativeDurationFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Watch::kCumulativePercentFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Watch::kLocationFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Watch::kCounterTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Watch::kCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Watch::UserData_UserVideoEvents_UserVideoEvent_Watch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
}
UserData_UserVideoEvents_UserVideoEvent_Watch::UserData_UserVideoEvents_UserVideoEvent_Watch(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
}
UserData_UserVideoEvents_UserVideoEvent_Watch::UserData_UserVideoEvents_UserVideoEvent_Watch(const UserData_UserVideoEvents_UserVideoEvent_Watch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&counter_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(counter_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
}

void UserData_UserVideoEvents_UserVideoEvent_Watch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&counter_) -
      reinterpret_cast<char*>(&location_)) + sizeof(counter_));
}

UserData_UserVideoEvents_UserVideoEvent_Watch::~UserData_UserVideoEvents_UserVideoEvent_Watch() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Watch::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete location_;
}

void UserData_UserVideoEvents_UserVideoEvent_Watch::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Watch* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Watch* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Watch::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Watch& UserData_UserVideoEvents_UserVideoEvent_Watch::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent_Watch::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Watch>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Watch::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&counter_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(counter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Watch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 percent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cumulative_duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cumulative_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cumulative_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cumulative_percent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cumulative_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cumulative_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 counter_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_counter_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &counter_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 counter = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Watch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional int32 percent = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percent(), output);
  }

  // optional int32 cumulative_duration = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cumulative_duration(), output);
  }

  // optional int32 cumulative_percent = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cumulative_percent(), output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->location_, output);
  }

  // optional int64 counter_timestamp = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->counter_timestamp(), output);
  }

  // optional uint64 counter = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->counter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Watch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional int32 percent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percent(), target);
  }

  // optional int32 cumulative_duration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cumulative_duration(), target);
  }

  // optional int32 cumulative_percent = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cumulative_percent(), target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->location_, deterministic, target);
  }

  // optional int64 counter_timestamp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->counter_timestamp(), target);
  }

  // optional uint64 counter = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->counter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Watch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

    // optional int32 cumulative_duration = 4;
    if (has_cumulative_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cumulative_duration());
    }

    // optional int32 cumulative_percent = 5;
    if (has_cumulative_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cumulative_percent());
    }

    // optional int64 counter_timestamp = 7;
    if (has_counter_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->counter_timestamp());
    }

    // optional uint64 counter = 8;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->counter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Watch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Watch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Watch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Watch::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Watch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      percent_ = from.percent_;
    }
    if (cached_has_bits & 0x00000010u) {
      cumulative_duration_ = from.cumulative_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      cumulative_percent_ = from.cumulative_percent_;
    }
    if (cached_has_bits & 0x00000040u) {
      counter_timestamp_ = from.counter_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      counter_ = from.counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Watch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Watch::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Watch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Watch::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Watch::Swap(UserData_UserVideoEvents_UserVideoEvent_Watch* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Watch* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Watch* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Watch* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(timestamp_, other->timestamp_);
  swap(duration_, other->duration_);
  swap(percent_, other->percent_);
  swap(cumulative_duration_, other->cumulative_duration_);
  swap(cumulative_percent_, other->cumulative_percent_);
  swap(counter_timestamp_, other->counter_timestamp_);
  swap(counter_, other->counter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Watch::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Watch

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Watch::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.timestamp)
}

// optional int32 duration = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Watch::duration() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.duration)
  return duration_;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.duration)
}

// optional int32 percent = 3;
bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_percent() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_percent() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Watch::percent() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.percent)
  return percent_;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.percent)
}

// optional int32 cumulative_duration = 4;
bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_cumulative_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_cumulative_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_cumulative_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_cumulative_duration() {
  cumulative_duration_ = 0;
  clear_has_cumulative_duration();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Watch::cumulative_duration() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.cumulative_duration)
  return cumulative_duration_;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_cumulative_duration(::google::protobuf::int32 value) {
  set_has_cumulative_duration();
  cumulative_duration_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.cumulative_duration)
}

// optional int32 cumulative_percent = 5;
bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_cumulative_percent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_cumulative_percent() {
  _has_bits_[0] |= 0x00000020u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_cumulative_percent() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_cumulative_percent() {
  cumulative_percent_ = 0;
  clear_has_cumulative_percent();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Watch::cumulative_percent() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.cumulative_percent)
  return cumulative_percent_;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_cumulative_percent(::google::protobuf::int32 value) {
  set_has_cumulative_percent();
  cumulative_percent_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.cumulative_percent)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 6;
bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_location() {
  if (location_ != NULL) location_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::Clear();
  clear_has_location();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location& UserData_UserVideoEvents_UserVideoEvent_Watch::location() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* p = location_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.location)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_Watch::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    _slow_mutable_location();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.location)
  return location_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_Watch::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.location)
  clear_has_location();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_location();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = location_;
    location_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent_Watch::set_allocated_location(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location != NULL) {
    _slow_set_allocated_location(message_arena, &location);
  }
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.location)
}

// optional int64 counter_timestamp = 7;
bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_counter_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_counter_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_counter_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_counter_timestamp() {
  counter_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_counter_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Watch::counter_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.counter_timestamp)
  return counter_timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_counter_timestamp(::google::protobuf::int64 value) {
  set_has_counter_timestamp();
  counter_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.counter_timestamp)
}

// optional uint64 counter = 8;
bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_counter() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_counter() {
  _has_bits_[0] |= 0x00000080u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_counter() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_counter() {
  counter_ = GOOGLE_ULONGLONG(0);
  clear_has_counter();
}
::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_Watch::counter() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.counter)
  return counter_;
}
void UserData_UserVideoEvents_UserVideoEvent_Watch::set_counter(::google::protobuf::uint64 value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.counter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::_slow_mutable_daily_counters() {
  daily_counters_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* UserData_UserVideoEvents_UserVideoEvent_VideoNext::_slow_release_daily_counters() {
  if (daily_counters_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters(*daily_counters_);
    daily_counters_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* UserData_UserVideoEvents_UserVideoEvent_VideoNext::unsafe_arena_release_daily_counters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.daily_counters)
  clear_has_daily_counters();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* temp = daily_counters_;
  daily_counters_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::_slow_set_allocated_daily_counters(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters** daily_counters) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*daily_counters) == NULL) {
      message_arena->Own(*daily_counters);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*daily_counters)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* new_daily_counters = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters >(
            message_arena);
      new_daily_counters->CopyFrom(**daily_counters);
      *daily_counters = new_daily_counters;
    }
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::unsafe_arena_set_allocated_daily_counters(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* daily_counters) {
  if (GetArenaNoVirtual() == NULL) {
    delete daily_counters_;
  }
  daily_counters_ = daily_counters;
  if (daily_counters) {
    set_has_daily_counters();
  } else {
    clear_has_daily_counters();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.daily_counters)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_VideoNext::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_VideoNext::kDurationFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_VideoNext::kPercentFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_VideoNext::kCumulativeDurationFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_VideoNext::kCumulativePercentFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_VideoNext::kDailyCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_VideoNext::UserData_UserVideoEvents_UserVideoEvent_VideoNext()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
}
UserData_UserVideoEvents_UserVideoEvent_VideoNext::UserData_UserVideoEvents_UserVideoEvent_VideoNext(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
}
UserData_UserVideoEvents_UserVideoEvent_VideoNext::UserData_UserVideoEvents_UserVideoEvent_VideoNext(const UserData_UserVideoEvents_UserVideoEvent_VideoNext& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_daily_counters()) {
    daily_counters_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters(*from.daily_counters_);
  } else {
    daily_counters_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&cumulative_percent_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(cumulative_percent_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
}

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&daily_counters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cumulative_percent_) -
      reinterpret_cast<char*>(&daily_counters_)) + sizeof(cumulative_percent_));
}

UserData_UserVideoEvents_UserVideoEvent_VideoNext::~UserData_UserVideoEvents_UserVideoEvent_VideoNext() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete daily_counters_;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_VideoNext* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_VideoNext* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_VideoNext::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_VideoNext& UserData_UserVideoEvents_UserVideoEvent_VideoNext::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_VideoNext* UserData_UserVideoEvents_UserVideoEvent_VideoNext::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_VideoNext>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_daily_counters()) {
    GOOGLE_DCHECK(daily_counters_ != NULL);
    daily_counters_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cumulative_percent_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(cumulative_percent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 percent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cumulative_duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cumulative_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cumulative_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cumulative_percent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_cumulative_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cumulative_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters daily_counters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_counters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // optional int32 percent = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percent(), output);
  }

  // optional int32 cumulative_duration = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cumulative_duration(), output);
  }

  // optional int32 cumulative_percent = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cumulative_percent(), output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters daily_counters = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->daily_counters_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_VideoNext::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // optional int32 percent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percent(), target);
  }

  // optional int32 cumulative_duration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cumulative_duration(), target);
  }

  // optional int32 cumulative_percent = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cumulative_percent(), target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters daily_counters = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->daily_counters_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_VideoNext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters daily_counters = 6;
    if (has_daily_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->daily_counters_);
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

    // optional int32 cumulative_duration = 4;
    if (has_cumulative_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cumulative_duration());
    }

    // optional int32 cumulative_percent = 5;
    if (has_cumulative_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cumulative_percent());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_VideoNext* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_VideoNext>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoNext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_daily_counters()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters::MergeFrom(from.daily_counters());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      percent_ = from.percent_;
    }
    if (cached_has_bits & 0x00000010u) {
      cumulative_duration_ = from.cumulative_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      cumulative_percent_ = from.cumulative_percent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoNext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoNext::Swap(UserData_UserVideoEvents_UserVideoEvent_VideoNext* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_VideoNext* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_VideoNext* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_VideoNext* other) {
  using std::swap;
  swap(daily_counters_, other->daily_counters_);
  swap(timestamp_, other->timestamp_);
  swap(duration_, other->duration_);
  swap(percent_, other->percent_);
  swap(cumulative_duration_, other->cumulative_duration_);
  swap(cumulative_percent_, other->cumulative_percent_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_VideoNext::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_VideoNext

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_VideoNext::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.timestamp)
}

// optional int32 duration = 2;
bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_VideoNext::duration() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.duration)
  return duration_;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.duration)
}

// optional int32 percent = 3;
bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_percent() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_percent() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_VideoNext::percent() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.percent)
  return percent_;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.percent)
}

// optional int32 cumulative_duration = 4;
bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_cumulative_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_cumulative_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_cumulative_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_cumulative_duration() {
  cumulative_duration_ = 0;
  clear_has_cumulative_duration();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_VideoNext::cumulative_duration() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.cumulative_duration)
  return cumulative_duration_;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_cumulative_duration(::google::protobuf::int32 value) {
  set_has_cumulative_duration();
  cumulative_duration_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.cumulative_duration)
}

// optional int32 cumulative_percent = 5;
bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_cumulative_percent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_cumulative_percent() {
  _has_bits_[0] |= 0x00000020u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_cumulative_percent() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_cumulative_percent() {
  cumulative_percent_ = 0;
  clear_has_cumulative_percent();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_VideoNext::cumulative_percent() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.cumulative_percent)
  return cumulative_percent_;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_cumulative_percent(::google::protobuf::int32 value) {
  set_has_cumulative_percent();
  cumulative_percent_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.cumulative_percent)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters daily_counters = 6;
bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_daily_counters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_daily_counters() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_daily_counters() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_daily_counters() {
  if (daily_counters_ != NULL) daily_counters_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters::Clear();
  clear_has_daily_counters();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters& UserData_UserVideoEvents_UserVideoEvent_VideoNext::daily_counters() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* p = daily_counters_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.daily_counters)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_DailyCounters_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* UserData_UserVideoEvents_UserVideoEvent_VideoNext::mutable_daily_counters() {
  set_has_daily_counters();
  if (daily_counters_ == NULL) {
    _slow_mutable_daily_counters();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.daily_counters)
  return daily_counters_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* UserData_UserVideoEvents_UserVideoEvent_VideoNext::release_daily_counters() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.daily_counters)
  clear_has_daily_counters();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_daily_counters();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* temp = daily_counters_;
    daily_counters_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_allocated_daily_counters(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* daily_counters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete daily_counters_;
  }
  if (daily_counters != NULL) {
    _slow_set_allocated_daily_counters(message_arena, &daily_counters);
  }
  daily_counters_ = daily_counters;
  if (daily_counters) {
    set_has_daily_counters();
  } else {
    clear_has_daily_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.daily_counters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_VideoStart::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_VideoStart::kCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_VideoStart::UserData_UserVideoEvents_UserVideoEvent_VideoStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
}
UserData_UserVideoEvents_UserVideoEvent_VideoStart::UserData_UserVideoEvents_UserVideoEvent_VideoStart(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
}
UserData_UserVideoEvents_UserVideoEvent_VideoStart::UserData_UserVideoEvents_UserVideoEvent_VideoStart(const UserData_UserVideoEvents_UserVideoEvent_VideoStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&counter_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(counter_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
}

void UserData_UserVideoEvents_UserVideoEvent_VideoStart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&counter_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(counter_));
}

UserData_UserVideoEvents_UserVideoEvent_VideoStart::~UserData_UserVideoEvents_UserVideoEvent_VideoStart() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_VideoStart::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_VideoStart::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_VideoStart* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_VideoStart* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_VideoStart::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_VideoStart& UserData_UserVideoEvents_UserVideoEvent_VideoStart::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_VideoStart* UserData_UserVideoEvents_UserVideoEvent_VideoStart::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_VideoStart>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_VideoStart::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&counter_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(counter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_VideoStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 counter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_VideoStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional uint64 counter = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->counter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_VideoStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional uint64 counter = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->counter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_VideoStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional uint64 counter = 2;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->counter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_VideoStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_VideoStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_VideoStart::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      counter_ = from.counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_VideoStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_VideoStart::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_VideoStart::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoStart::Swap(UserData_UserVideoEvents_UserVideoEvent_VideoStart* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_VideoStart* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_VideoStart* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_VideoStart* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(counter_, other->counter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_VideoStart::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_VideoStart

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_VideoStart::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_VideoStart::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart.timestamp)
}

// optional uint64 counter = 2;
bool UserData_UserVideoEvents_UserVideoEvent_VideoStart::has_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::set_has_counter() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::clear_has_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::clear_counter() {
  counter_ = GOOGLE_ULONGLONG(0);
  clear_has_counter();
}
::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_VideoStart::counter() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart.counter)
  return counter_;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoStart::set_counter(::google::protobuf::uint64 value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart.counter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::_slow_mutable_location() {
  location_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::_slow_release_location() {
  if (location_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location(*location_);
    location_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.location)
  clear_has_location();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = location_;
  location_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::_slow_set_allocated_location(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location** location) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*location) == NULL) {
      message_arena->Own(*location);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*location)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* new_location = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location >(
            message_arena);
      new_location->CopyFrom(**location);
      *location = new_location;
    }
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::unsafe_arena_set_allocated_location(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location) {
  if (GetArenaNoVirtual() == NULL) {
    delete location_;
  }
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.location)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::kLocationFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::kCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
}
UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
}
UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport(const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&counter_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(counter_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
}

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&counter_) -
      reinterpret_cast<char*>(&location_)) + sizeof(counter_));
}

UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::~UserData_UserVideoEvents_UserVideoEvent_VideoInViewport() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete location_;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_VideoInViewport>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&counter_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(counter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 counter = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // optional uint64 counter = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->counter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // optional uint64 counter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->counter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional uint64 counter = 3;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->counter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      counter_ = from.counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::Swap(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(timestamp_, other->timestamp_);
  swap(counter_, other->counter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_VideoInViewport

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.timestamp)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
bool UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_location() {
  if (location_ != NULL) location_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::Clear();
  clear_has_location();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location& UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::location() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* p = location_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.location)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    _slow_mutable_location();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.location)
  return location_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.location)
  clear_has_location();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_location();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = location_;
    location_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_allocated_location(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location != NULL) {
    _slow_set_allocated_location(message_arena, &location);
  }
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.location)
}

// optional uint64 counter = 3;
bool UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::has_counter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_has_counter() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_has_counter() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_counter() {
  counter_ = GOOGLE_ULONGLONG(0);
  clear_has_counter();
}
::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::counter() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.counter)
  return counter_;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_counter(::google::protobuf::uint64 value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.counter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_PlayStatus::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_PlayStatus::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_PlayStatus::UserData_UserVideoEvents_UserVideoEvent_PlayStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
}
UserData_UserVideoEvents_UserVideoEvent_PlayStatus::UserData_UserVideoEvents_UserVideoEvent_PlayStatus(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
}
UserData_UserVideoEvents_UserVideoEvent_PlayStatus::UserData_UserVideoEvents_UserVideoEvent_PlayStatus(const UserData_UserVideoEvents_UserVideoEvent_PlayStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
}

void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_PlayStatus::~UserData_UserVideoEvents_UserVideoEvent_PlayStatus() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_PlayStatus* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_PlayStatus* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_PlayStatus::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_PlayStatus& UserData_UserVideoEvents_UserVideoEvent_PlayStatus::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_PlayStatus* UserData_UserVideoEvents_UserVideoEvent_PlayStatus::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_PlayStatus>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_PlayStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_PlayStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_PlayStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_PlayStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_PlayStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_PlayStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_PlayStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_PlayStatus::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::Swap(UserData_UserVideoEvents_UserVideoEvent_PlayStatus* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_PlayStatus* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_PlayStatus* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_PlayStatus* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_PlayStatus::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_PlayStatus

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_PlayStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_PlayStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus.timestamp)
}

// optional int32 value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_PlayStatus::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_PlayStatus::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Like::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Like::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Like::UserData_UserVideoEvents_UserVideoEvent_Like()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
}
UserData_UserVideoEvents_UserVideoEvent_Like::UserData_UserVideoEvents_UserVideoEvent_Like(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
}
UserData_UserVideoEvents_UserVideoEvent_Like::UserData_UserVideoEvents_UserVideoEvent_Like(const UserData_UserVideoEvents_UserVideoEvent_Like& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
}

void UserData_UserVideoEvents_UserVideoEvent_Like::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Like::~UserData_UserVideoEvents_UserVideoEvent_Like() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Like::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Like::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Like* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Like* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Like::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Like::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Like::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Like& UserData_UserVideoEvents_UserVideoEvent_Like::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Like* UserData_UserVideoEvents_UserVideoEvent_Like::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Like>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Like::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Like::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Like::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Like::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Like::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Like::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Like* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Like>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Like::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Like& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Like::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Like::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Like& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Like::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Like::Swap(UserData_UserVideoEvents_UserVideoEvent_Like* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Like* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Like::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Like* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Like::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Like* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Like::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Like

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Like::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Like::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Like::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Like::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Like::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Like::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like.timestamp)
}

// optional int32 value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Like::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Like::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Like::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Like::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Like::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Like::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Dislike::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Dislike::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Dislike::UserData_UserVideoEvents_UserVideoEvent_Dislike()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
}
UserData_UserVideoEvents_UserVideoEvent_Dislike::UserData_UserVideoEvents_UserVideoEvent_Dislike(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
}
UserData_UserVideoEvents_UserVideoEvent_Dislike::UserData_UserVideoEvents_UserVideoEvent_Dislike(const UserData_UserVideoEvents_UserVideoEvent_Dislike& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
}

void UserData_UserVideoEvents_UserVideoEvent_Dislike::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Dislike::~UserData_UserVideoEvents_UserVideoEvent_Dislike() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Dislike::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Dislike::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Dislike* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Dislike* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Dislike::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Dislike& UserData_UserVideoEvents_UserVideoEvent_Dislike::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Dislike* UserData_UserVideoEvents_UserVideoEvent_Dislike::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Dislike>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Dislike::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Dislike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Dislike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Dislike::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Dislike::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Dislike::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Dislike* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Dislike>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Dislike::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Dislike& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Dislike::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Dislike::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Dislike& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Dislike::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Dislike::Swap(UserData_UserVideoEvents_UserVideoEvent_Dislike* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Dislike* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Dislike* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Dislike* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Dislike::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Dislike

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Dislike::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Dislike::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike.timestamp)
}

// optional int32 value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Dislike::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Dislike::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Dislike::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Norm::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Norm::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Norm::UserData_UserVideoEvents_UserVideoEvent_Norm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
}
UserData_UserVideoEvents_UserVideoEvent_Norm::UserData_UserVideoEvents_UserVideoEvent_Norm(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
}
UserData_UserVideoEvents_UserVideoEvent_Norm::UserData_UserVideoEvents_UserVideoEvent_Norm(const UserData_UserVideoEvents_UserVideoEvent_Norm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
}

void UserData_UserVideoEvents_UserVideoEvent_Norm::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Norm::~UserData_UserVideoEvents_UserVideoEvent_Norm() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Norm::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Norm::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Norm* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Norm* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Norm::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Norm& UserData_UserVideoEvents_UserVideoEvent_Norm::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Norm* UserData_UserVideoEvents_UserVideoEvent_Norm::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Norm>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Norm::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Norm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Norm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Norm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Norm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Norm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Norm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Norm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Norm::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Norm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Norm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Norm::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Norm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Norm::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Norm::Swap(UserData_UserVideoEvents_UserVideoEvent_Norm* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Norm* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Norm* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Norm* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Norm::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Norm

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Norm::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Norm::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm.timestamp)
}

// optional int32 value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Norm::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Norm::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Norm::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Rate3::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Rate3::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Rate3::UserData_UserVideoEvents_UserVideoEvent_Rate3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
}
UserData_UserVideoEvents_UserVideoEvent_Rate3::UserData_UserVideoEvents_UserVideoEvent_Rate3(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
}
UserData_UserVideoEvents_UserVideoEvent_Rate3::UserData_UserVideoEvents_UserVideoEvent_Rate3(const UserData_UserVideoEvents_UserVideoEvent_Rate3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
}

void UserData_UserVideoEvents_UserVideoEvent_Rate3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Rate3::~UserData_UserVideoEvents_UserVideoEvent_Rate3() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Rate3::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Rate3::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Rate3* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Rate3* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Rate3::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Rate3& UserData_UserVideoEvents_UserVideoEvent_Rate3::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Rate3* UserData_UserVideoEvents_UserVideoEvent_Rate3::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Rate3>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Rate3::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Rate3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Rate3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Rate3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Rate3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Rate3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Rate3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Rate3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Rate3::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Rate3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Rate3::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Rate3::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Rate3::Swap(UserData_UserVideoEvents_UserVideoEvent_Rate3* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Rate3* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Rate3* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Rate3* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Rate3::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Rate3

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Rate3::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Rate3::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3.timestamp)
}

// optional int32 value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Rate3::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Rate3::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate3::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_Rate10::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_Rate10::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_Rate10::UserData_UserVideoEvents_UserVideoEvent_Rate10()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
}
UserData_UserVideoEvents_UserVideoEvent_Rate10::UserData_UserVideoEvents_UserVideoEvent_Rate10(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
}
UserData_UserVideoEvents_UserVideoEvent_Rate10::UserData_UserVideoEvents_UserVideoEvent_Rate10(const UserData_UserVideoEvents_UserVideoEvent_Rate10& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
}

void UserData_UserVideoEvents_UserVideoEvent_Rate10::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

UserData_UserVideoEvents_UserVideoEvent_Rate10::~UserData_UserVideoEvents_UserVideoEvent_Rate10() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_Rate10::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents_UserVideoEvent_Rate10::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_Rate10* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_Rate10* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_Rate10::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_Rate10& UserData_UserVideoEvents_UserVideoEvent_Rate10::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_Rate10* UserData_UserVideoEvents_UserVideoEvent_Rate10::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_Rate10>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_Rate10::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_Rate10::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_Rate10::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_Rate10::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_Rate10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_Rate10::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_Rate10* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_Rate10>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Rate10::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_Rate10::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_Rate10::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_Rate10::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_Rate10::Swap(UserData_UserVideoEvents_UserVideoEvent_Rate10* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_Rate10* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Rate10* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Rate10* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_Rate10::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_Rate10

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_Rate10::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Rate10::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10.timestamp)
}

// optional int32 value = 2;
bool UserData_UserVideoEvents_UserVideoEvent_Rate10::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Rate10::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10.value)
  return value_;
}
void UserData_UserVideoEvents_UserVideoEvent_Rate10::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::_slow_mutable_location() {
  location_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoClick::_slow_release_location() {
  if (location_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location(*location_);
    location_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoClick::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.location)
  clear_has_location();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = location_;
  location_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::_slow_set_allocated_location(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location** location) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*location) == NULL) {
      message_arena->Own(*location);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*location)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* new_location = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location >(
            message_arena);
      new_location->CopyFrom(**location);
      *location = new_location;
    }
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::unsafe_arena_set_allocated_location(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location) {
  if (GetArenaNoVirtual() == NULL) {
    delete location_;
  }
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.location)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent_VideoClick::kTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent_VideoClick::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent_VideoClick::UserData_UserVideoEvents_UserVideoEvent_VideoClick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
}
UserData_UserVideoEvents_UserVideoEvent_VideoClick::UserData_UserVideoEvents_UserVideoEvent_VideoClick(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
}
UserData_UserVideoEvents_UserVideoEvent_VideoClick::UserData_UserVideoEvents_UserVideoEvent_VideoClick(const UserData_UserVideoEvents_UserVideoEvent_VideoClick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location(*from.location_);
  } else {
    location_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
}

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&location_)) + sizeof(timestamp_));
}

UserData_UserVideoEvents_UserVideoEvent_VideoClick::~UserData_UserVideoEvents_UserVideoEvent_VideoClick() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete location_;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent_VideoClick* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent_VideoClick* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent_VideoClick::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent_VideoClick& UserData_UserVideoEvents_UserVideoEvent_VideoClick::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent_VideoClick::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent_VideoClick>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::Clear();
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent_VideoClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent_VideoClick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent_VideoClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent_VideoClick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent_VideoClick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent_VideoClick::IsInitialized() const {
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent_VideoClick::Swap(UserData_UserVideoEvents_UserVideoEvent_VideoClick* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent_VideoClick* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_VideoClick* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::InternalSwap(UserData_UserVideoEvents_UserVideoEvent_VideoClick* other) {
  using std::swap;
  swap(location_, other->location_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent_VideoClick::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent_VideoClick

// optional int64 timestamp = 1;
bool UserData_UserVideoEvents_UserVideoEvent_VideoClick::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_VideoClick::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.timestamp)
  return timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.timestamp)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
bool UserData_UserVideoEvents_UserVideoEvent_VideoClick::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent_VideoClick::clear_location() {
  if (location_ != NULL) location_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::Clear();
  clear_has_location();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location& UserData_UserVideoEvents_UserVideoEvent_VideoClick::location() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* p = location_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.location)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoClick::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    _slow_mutable_location();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.location)
  return location_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoClick::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.location)
  clear_has_location();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_location();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = location_;
    location_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent_VideoClick::set_allocated_location(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location != NULL) {
    _slow_set_allocated_location(message_arena, &location);
  }
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_emotion() {
  emotion_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* UserData_UserVideoEvents_UserVideoEvent::_slow_release_emotion() {
  if (emotion_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion(*emotion_);
    emotion_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_emotion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.emotion)
  clear_has_emotion();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* temp = emotion_;
  emotion_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_emotion(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion** emotion) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*emotion) == NULL) {
      message_arena->Own(*emotion);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*emotion)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* new_emotion = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion >(
            message_arena);
      new_emotion->CopyFrom(**emotion);
      *emotion = new_emotion;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_emotion(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* emotion) {
  if (GetArenaNoVirtual() == NULL) {
    delete emotion_;
  }
  emotion_ = emotion;
  if (emotion) {
    set_has_emotion();
  } else {
    clear_has_emotion();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.emotion)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_favorite() {
  favorite_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* UserData_UserVideoEvents_UserVideoEvent::_slow_release_favorite() {
  if (favorite_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite(*favorite_);
    favorite_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_favorite() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.favorite)
  clear_has_favorite();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* temp = favorite_;
  favorite_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_favorite(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite** favorite) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*favorite) == NULL) {
      message_arena->Own(*favorite);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*favorite)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* new_favorite = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite >(
            message_arena);
      new_favorite->CopyFrom(**favorite);
      *favorite = new_favorite;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_favorite(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* favorite) {
  if (GetArenaNoVirtual() == NULL) {
    delete favorite_;
  }
  favorite_ = favorite;
  if (favorite) {
    set_has_favorite();
  } else {
    clear_has_favorite();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.favorite)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_rate() {
  rate_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::_slow_release_rate() {
  if (rate_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate(*rate_);
    rate_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_rate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate)
  clear_has_rate();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* temp = rate_;
  rate_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_rate(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate** rate) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*rate) == NULL) {
      message_arena->Own(*rate);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*rate)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* new_rate = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate >(
            message_arena);
      new_rate->CopyFrom(**rate);
      *rate = new_rate;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_rate(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* rate) {
  if (GetArenaNoVirtual() == NULL) {
    delete rate_;
  }
  rate_ = rate;
  if (rate) {
    set_has_rate();
  } else {
    clear_has_rate();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_comment() {
  comment_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* UserData_UserVideoEvents_UserVideoEvent::_slow_release_comment() {
  if (comment_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment(*comment_);
    comment_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_comment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.comment)
  clear_has_comment();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* temp = comment_;
  comment_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_comment(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment** comment) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*comment) == NULL) {
      message_arena->Own(*comment);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*comment)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* new_comment = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment >(
            message_arena);
      new_comment->CopyFrom(**comment);
      *comment = new_comment;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_comment(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* comment) {
  if (GetArenaNoVirtual() == NULL) {
    delete comment_;
  }
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.comment)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_block() {
  block_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* UserData_UserVideoEvents_UserVideoEvent::_slow_release_block() {
  if (block_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block(*block_);
    block_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.block)
  clear_has_block();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* temp = block_;
  block_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_block(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block** block) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*block) == NULL) {
      message_arena->Own(*block);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*block)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* new_block = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block >(
            message_arena);
      new_block->CopyFrom(**block);
      *block = new_block;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_block(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* block) {
  if (GetArenaNoVirtual() == NULL) {
    delete block_;
  }
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.block)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_share() {
  share_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* UserData_UserVideoEvents_UserVideoEvent::_slow_release_share() {
  if (share_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share(*share_);
    share_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_share() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.share)
  clear_has_share();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* temp = share_;
  share_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_share(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share** share) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*share) == NULL) {
      message_arena->Own(*share);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*share)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* new_share = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share >(
            message_arena);
      new_share->CopyFrom(**share);
      *share = new_share;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_share(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* share) {
  if (GetArenaNoVirtual() == NULL) {
    delete share_;
  }
  share_ = share;
  if (share) {
    set_has_share();
  } else {
    clear_has_share();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.share)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_watch() {
  watch_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::_slow_release_watch() {
  if (watch_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch(*watch_);
    watch_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_watch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch)
  clear_has_watch();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = watch_;
  watch_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_watch(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch** watch) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*watch) == NULL) {
      message_arena->Own(*watch);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*watch)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* new_watch = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch >(
            message_arena);
      new_watch->CopyFrom(**watch);
      *watch = new_watch;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_watch(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch) {
  if (GetArenaNoVirtual() == NULL) {
    delete watch_;
  }
  watch_ = watch;
  if (watch) {
    set_has_watch();
  } else {
    clear_has_watch();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_video_next() {
  video_next_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* UserData_UserVideoEvents_UserVideoEvent::_slow_release_video_next() {
  if (video_next_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext(*video_next_);
    video_next_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_video_next() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_next)
  clear_has_video_next();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* temp = video_next_;
  video_next_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_video_next(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext** video_next) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*video_next) == NULL) {
      message_arena->Own(*video_next);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*video_next)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* new_video_next = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext >(
            message_arena);
      new_video_next->CopyFrom(**video_next);
      *video_next = new_video_next;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_video_next(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* video_next) {
  if (GetArenaNoVirtual() == NULL) {
    delete video_next_;
  }
  video_next_ = video_next;
  if (video_next) {
    set_has_video_next();
  } else {
    clear_has_video_next();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_next)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_video_in_viewport() {
  video_in_viewport_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* UserData_UserVideoEvents_UserVideoEvent::_slow_release_video_in_viewport() {
  if (video_in_viewport_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport(*video_in_viewport_);
    video_in_viewport_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_video_in_viewport() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_in_viewport)
  clear_has_video_in_viewport();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* temp = video_in_viewport_;
  video_in_viewport_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_video_in_viewport(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport** video_in_viewport) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*video_in_viewport) == NULL) {
      message_arena->Own(*video_in_viewport);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*video_in_viewport)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* new_video_in_viewport = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport >(
            message_arena);
      new_video_in_viewport->CopyFrom(**video_in_viewport);
      *video_in_viewport = new_video_in_viewport;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_video_in_viewport(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* video_in_viewport) {
  if (GetArenaNoVirtual() == NULL) {
    delete video_in_viewport_;
  }
  video_in_viewport_ = video_in_viewport;
  if (video_in_viewport) {
    set_has_video_in_viewport();
  } else {
    clear_has_video_in_viewport();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_in_viewport)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_play_status() {
  play_status_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* UserData_UserVideoEvents_UserVideoEvent::_slow_release_play_status() {
  if (play_status_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus(*play_status_);
    play_status_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_play_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.play_status)
  clear_has_play_status();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* temp = play_status_;
  play_status_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_play_status(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus** play_status) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*play_status) == NULL) {
      message_arena->Own(*play_status);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*play_status)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* new_play_status = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus >(
            message_arena);
      new_play_status->CopyFrom(**play_status);
      *play_status = new_play_status;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_play_status(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* play_status) {
  if (GetArenaNoVirtual() == NULL) {
    delete play_status_;
  }
  play_status_ = play_status;
  if (play_status) {
    set_has_play_status();
  } else {
    clear_has_play_status();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.play_status)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_like() {
  like_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* UserData_UserVideoEvents_UserVideoEvent::_slow_release_like() {
  if (like_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like(*like_);
    like_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_like() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.like)
  clear_has_like();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* temp = like_;
  like_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_like(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like** like) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*like) == NULL) {
      message_arena->Own(*like);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*like)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* new_like = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like >(
            message_arena);
      new_like->CopyFrom(**like);
      *like = new_like;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_like(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* like) {
  if (GetArenaNoVirtual() == NULL) {
    delete like_;
  }
  like_ = like;
  if (like) {
    set_has_like();
  } else {
    clear_has_like();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.like)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_dislike() {
  dislike_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* UserData_UserVideoEvents_UserVideoEvent::_slow_release_dislike() {
  if (dislike_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike(*dislike_);
    dislike_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_dislike() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.dislike)
  clear_has_dislike();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* temp = dislike_;
  dislike_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_dislike(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike** dislike) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*dislike) == NULL) {
      message_arena->Own(*dislike);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*dislike)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* new_dislike = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike >(
            message_arena);
      new_dislike->CopyFrom(**dislike);
      *dislike = new_dislike;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_dislike(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* dislike) {
  if (GetArenaNoVirtual() == NULL) {
    delete dislike_;
  }
  dislike_ = dislike;
  if (dislike) {
    set_has_dislike();
  } else {
    clear_has_dislike();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.dislike)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_norm() {
  norm_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* UserData_UserVideoEvents_UserVideoEvent::_slow_release_norm() {
  if (norm_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm(*norm_);
    norm_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_norm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.norm)
  clear_has_norm();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* temp = norm_;
  norm_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_norm(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm** norm) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*norm) == NULL) {
      message_arena->Own(*norm);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*norm)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* new_norm = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm >(
            message_arena);
      new_norm->CopyFrom(**norm);
      *norm = new_norm;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_norm(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* norm) {
  if (GetArenaNoVirtual() == NULL) {
    delete norm_;
  }
  norm_ = norm;
  if (norm) {
    set_has_norm();
  } else {
    clear_has_norm();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.norm)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_rate3() {
  rate3_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3 >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* UserData_UserVideoEvents_UserVideoEvent::_slow_release_rate3() {
  if (rate3_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3(*rate3_);
    rate3_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_rate3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate3)
  clear_has_rate3();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* temp = rate3_;
  rate3_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_rate3(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3** rate3) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*rate3) == NULL) {
      message_arena->Own(*rate3);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*rate3)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* new_rate3 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3 >(
            message_arena);
      new_rate3->CopyFrom(**rate3);
      *rate3 = new_rate3;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_rate3(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* rate3) {
  if (GetArenaNoVirtual() == NULL) {
    delete rate3_;
  }
  rate3_ = rate3;
  if (rate3) {
    set_has_rate3();
  } else {
    clear_has_rate3();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate3)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_rate10() {
  rate10_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10 >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* UserData_UserVideoEvents_UserVideoEvent::_slow_release_rate10() {
  if (rate10_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10(*rate10_);
    rate10_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_rate10() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate10)
  clear_has_rate10();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* temp = rate10_;
  rate10_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_rate10(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10** rate10) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*rate10) == NULL) {
      message_arena->Own(*rate10);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*rate10)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* new_rate10 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10 >(
            message_arena);
      new_rate10->CopyFrom(**rate10);
      *rate10 = new_rate10;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_rate10(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* rate10) {
  if (GetArenaNoVirtual() == NULL) {
    delete rate10_;
  }
  rate10_ = rate10;
  if (rate10) {
    set_has_rate10();
  } else {
    clear_has_rate10();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate10)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_video_click() {
  video_click_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::_slow_release_video_click() {
  if (video_click_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick(*video_click_);
    video_click_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_video_click() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click)
  clear_has_video_click();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* temp = video_click_;
  video_click_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_video_click(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick** video_click) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*video_click) == NULL) {
      message_arena->Own(*video_click);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*video_click)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* new_video_click = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick >(
            message_arena);
      new_video_click->CopyFrom(**video_click);
      *video_click = new_video_click;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_video_click(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click) {
  if (GetArenaNoVirtual() == NULL) {
    delete video_click_;
  }
  video_click_ = video_click;
  if (video_click) {
    set_has_video_click();
  } else {
    clear_has_video_click();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_watch_in_search() {
  watch_in_search_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::_slow_release_watch_in_search() {
  if (watch_in_search_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch(*watch_in_search_);
    watch_in_search_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_watch_in_search() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_in_search)
  clear_has_watch_in_search();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = watch_in_search_;
  watch_in_search_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_watch_in_search(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch** watch_in_search) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*watch_in_search) == NULL) {
      message_arena->Own(*watch_in_search);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*watch_in_search)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* new_watch_in_search = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch >(
            message_arena);
      new_watch_in_search->CopyFrom(**watch_in_search);
      *watch_in_search = new_watch_in_search;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_watch_in_search(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_in_search) {
  if (GetArenaNoVirtual() == NULL) {
    delete watch_in_search_;
  }
  watch_in_search_ = watch_in_search;
  if (watch_in_search) {
    set_has_watch_in_search();
  } else {
    clear_has_watch_in_search();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_in_search)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_video_click_in_search() {
  video_click_in_search_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::_slow_release_video_click_in_search() {
  if (video_click_in_search_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick(*video_click_in_search_);
    video_click_in_search_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_video_click_in_search() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click_in_search)
  clear_has_video_click_in_search();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* temp = video_click_in_search_;
  video_click_in_search_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_video_click_in_search(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick** video_click_in_search) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*video_click_in_search) == NULL) {
      message_arena->Own(*video_click_in_search);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*video_click_in_search)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* new_video_click_in_search = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick >(
            message_arena);
      new_video_click_in_search->CopyFrom(**video_click_in_search);
      *video_click_in_search = new_video_click_in_search;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_video_click_in_search(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click_in_search) {
  if (GetArenaNoVirtual() == NULL) {
    delete video_click_in_search_;
  }
  video_click_in_search_ = video_click_in_search;
  if (video_click_in_search) {
    set_has_video_click_in_search();
  } else {
    clear_has_video_click_in_search();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click_in_search)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_cold_rate() {
  cold_rate_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::_slow_release_cold_rate() {
  if (cold_rate_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate(*cold_rate_);
    cold_rate_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_cold_rate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.cold_rate)
  clear_has_cold_rate();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* temp = cold_rate_;
  cold_rate_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_cold_rate(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate** cold_rate) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*cold_rate) == NULL) {
      message_arena->Own(*cold_rate);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*cold_rate)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* new_cold_rate = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate >(
            message_arena);
      new_cold_rate->CopyFrom(**cold_rate);
      *cold_rate = new_cold_rate;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_cold_rate(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* cold_rate) {
  if (GetArenaNoVirtual() == NULL) {
    delete cold_rate_;
  }
  cold_rate_ = cold_rate;
  if (cold_rate) {
    set_has_cold_rate();
  } else {
    clear_has_cold_rate();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.cold_rate)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_watch_with_sound() {
  watch_with_sound_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::_slow_release_watch_with_sound() {
  if (watch_with_sound_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch(*watch_with_sound_);
    watch_with_sound_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_watch_with_sound() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_with_sound)
  clear_has_watch_with_sound();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = watch_with_sound_;
  watch_with_sound_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_watch_with_sound(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch** watch_with_sound) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*watch_with_sound) == NULL) {
      message_arena->Own(*watch_with_sound);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*watch_with_sound)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* new_watch_with_sound = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch >(
            message_arena);
      new_watch_with_sound->CopyFrom(**watch_with_sound);
      *watch_with_sound = new_watch_with_sound;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_watch_with_sound(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_with_sound) {
  if (GetArenaNoVirtual() == NULL) {
    delete watch_with_sound_;
  }
  watch_with_sound_ = watch_with_sound;
  if (watch_with_sound) {
    set_has_watch_with_sound();
  } else {
    clear_has_watch_with_sound();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_with_sound)
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_mutable_video_start() {
  video_start_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* UserData_UserVideoEvents_UserVideoEvent::_slow_release_video_start() {
  if (video_start_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* temp = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart(*video_start_);
    video_start_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_release_video_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_start)
  clear_has_video_start();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* temp = video_start_;
  video_start_ = NULL;
  return temp;
}
void UserData_UserVideoEvents_UserVideoEvent::_slow_set_allocated_video_start(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart** video_start) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*video_start) == NULL) {
      message_arena->Own(*video_start);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*video_start)) {
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* new_video_start = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart >(
            message_arena);
      new_video_start->CopyFrom(**video_start);
      *video_start = new_video_start;
    }
}
void UserData_UserVideoEvents_UserVideoEvent::unsafe_arena_set_allocated_video_start(
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* video_start) {
  if (GetArenaNoVirtual() == NULL) {
    delete video_start_;
  }
  video_start_ = video_start;
  if (video_start) {
    set_has_video_start();
  } else {
    clear_has_video_start();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_start)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents_UserVideoEvent::kDocIdFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kLastTimestampFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kEmotionFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kFavoriteFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kRateFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kCommentFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kBlockFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kShareFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kWatchFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kVideoNextFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kVideoInViewportFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kPlayStatusFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kLikeFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kDislikeFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kNormFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kRate3FieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kRate10FieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kVideoClickFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kWatchInSearchFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kVideoClickInSearchFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kColdRateFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kWatchWithSoundFieldNumber;
const int UserData_UserVideoEvents_UserVideoEvent::kVideoStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents_UserVideoEvent::UserData_UserVideoEvents_UserVideoEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
}
UserData_UserVideoEvents_UserVideoEvent::UserData_UserVideoEvents_UserVideoEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
}
UserData_UserVideoEvents_UserVideoEvent::UserData_UserVideoEvents_UserVideoEvent(const UserData_UserVideoEvents_UserVideoEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_emotion()) {
    emotion_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion(*from.emotion_);
  } else {
    emotion_ = NULL;
  }
  if (from.has_favorite()) {
    favorite_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite(*from.favorite_);
  } else {
    favorite_ = NULL;
  }
  if (from.has_rate()) {
    rate_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate(*from.rate_);
  } else {
    rate_ = NULL;
  }
  if (from.has_comment()) {
    comment_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment(*from.comment_);
  } else {
    comment_ = NULL;
  }
  if (from.has_block()) {
    block_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block(*from.block_);
  } else {
    block_ = NULL;
  }
  if (from.has_share()) {
    share_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share(*from.share_);
  } else {
    share_ = NULL;
  }
  if (from.has_watch()) {
    watch_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch(*from.watch_);
  } else {
    watch_ = NULL;
  }
  if (from.has_video_next()) {
    video_next_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext(*from.video_next_);
  } else {
    video_next_ = NULL;
  }
  if (from.has_video_in_viewport()) {
    video_in_viewport_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport(*from.video_in_viewport_);
  } else {
    video_in_viewport_ = NULL;
  }
  if (from.has_play_status()) {
    play_status_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus(*from.play_status_);
  } else {
    play_status_ = NULL;
  }
  if (from.has_like()) {
    like_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like(*from.like_);
  } else {
    like_ = NULL;
  }
  if (from.has_dislike()) {
    dislike_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike(*from.dislike_);
  } else {
    dislike_ = NULL;
  }
  if (from.has_norm()) {
    norm_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm(*from.norm_);
  } else {
    norm_ = NULL;
  }
  if (from.has_rate3()) {
    rate3_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3(*from.rate3_);
  } else {
    rate3_ = NULL;
  }
  if (from.has_rate10()) {
    rate10_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10(*from.rate10_);
  } else {
    rate10_ = NULL;
  }
  if (from.has_video_click()) {
    video_click_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick(*from.video_click_);
  } else {
    video_click_ = NULL;
  }
  if (from.has_watch_in_search()) {
    watch_in_search_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch(*from.watch_in_search_);
  } else {
    watch_in_search_ = NULL;
  }
  if (from.has_video_click_in_search()) {
    video_click_in_search_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick(*from.video_click_in_search_);
  } else {
    video_click_in_search_ = NULL;
  }
  if (from.has_cold_rate()) {
    cold_rate_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate(*from.cold_rate_);
  } else {
    cold_rate_ = NULL;
  }
  if (from.has_watch_with_sound()) {
    watch_with_sound_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch(*from.watch_with_sound_);
  } else {
    watch_with_sound_ = NULL;
  }
  if (from.has_video_start()) {
    video_start_ = new ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart(*from.video_start_);
  } else {
    video_start_ = NULL;
  }
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_timestamp_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(last_timestamp_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
}

void UserData_UserVideoEvents_UserVideoEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&emotion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_timestamp_) -
      reinterpret_cast<char*>(&emotion_)) + sizeof(last_timestamp_));
}

UserData_UserVideoEvents_UserVideoEvent::~UserData_UserVideoEvents_UserVideoEvent() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  SharedDtor();
}

void UserData_UserVideoEvents_UserVideoEvent::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete emotion_;
  if (this != internal_default_instance()) delete favorite_;
  if (this != internal_default_instance()) delete rate_;
  if (this != internal_default_instance()) delete comment_;
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete share_;
  if (this != internal_default_instance()) delete watch_;
  if (this != internal_default_instance()) delete video_next_;
  if (this != internal_default_instance()) delete video_in_viewport_;
  if (this != internal_default_instance()) delete play_status_;
  if (this != internal_default_instance()) delete like_;
  if (this != internal_default_instance()) delete dislike_;
  if (this != internal_default_instance()) delete norm_;
  if (this != internal_default_instance()) delete rate3_;
  if (this != internal_default_instance()) delete rate10_;
  if (this != internal_default_instance()) delete video_click_;
  if (this != internal_default_instance()) delete watch_in_search_;
  if (this != internal_default_instance()) delete video_click_in_search_;
  if (this != internal_default_instance()) delete cold_rate_;
  if (this != internal_default_instance()) delete watch_with_sound_;
  if (this != internal_default_instance()) delete video_start_;
}

void UserData_UserVideoEvents_UserVideoEvent::ArenaDtor(void* object) {
  UserData_UserVideoEvents_UserVideoEvent* _this = reinterpret_cast< UserData_UserVideoEvents_UserVideoEvent* >(object);
  (void)_this;
}
void UserData_UserVideoEvents_UserVideoEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents_UserVideoEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents_UserVideoEvent::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents_UserVideoEvent& UserData_UserVideoEvents_UserVideoEvent::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents_UserVideoEvent* UserData_UserVideoEvents_UserVideoEvent::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents_UserVideoEvent>(arena);
}

void UserData_UserVideoEvents_UserVideoEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(emotion_ != NULL);
      emotion_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(favorite_ != NULL);
      favorite_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rate_ != NULL);
      rate_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(comment_ != NULL);
      comment_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(block_ != NULL);
      block_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(share_ != NULL);
      share_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(watch_ != NULL);
      watch_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(video_next_ != NULL);
      video_next_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(video_in_viewport_ != NULL);
      video_in_viewport_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(play_status_ != NULL);
      play_status_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(like_ != NULL);
      like_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(dislike_ != NULL);
      dislike_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(norm_ != NULL);
      norm_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(rate3_ != NULL);
      rate3_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(rate10_ != NULL);
      rate10_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(video_click_ != NULL);
      video_click_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick::Clear();
    }
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(watch_in_search_ != NULL);
      watch_in_search_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(video_click_in_search_ != NULL);
      video_click_in_search_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick::Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(cold_rate_ != NULL);
      cold_rate_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate::Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(watch_with_sound_ != NULL);
      watch_with_sound_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(video_start_ != NULL);
      video_start_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart::Clear();
    }
  }
  if (cached_has_bits & 6291456u) {
    ::memset(&doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_timestamp_) -
        reinterpret_cast<char*>(&doc_id_)) + sizeof(last_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents_UserVideoEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion emotion = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emotion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite favorite = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_favorite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate rate = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment comment = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block block = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share share = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_share()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_watch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext video_next = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_next()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport video_in_viewport = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_in_viewport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus play_status = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_play_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like like = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_like()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike dislike = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dislike()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm norm = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_norm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3 rate3 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rate3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10 rate10 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rate10()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_click()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_in_search = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_watch_in_search()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click_in_search = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_click_in_search()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate cold_rate = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cold_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_with_sound = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_watch_with_sound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart video_start = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  return false;
#undef DO_
}

void UserData_UserVideoEvents_UserVideoEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->doc_id(), output);
  }

  // required int64 last_timestamp = 2;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_timestamp(), output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion emotion = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->emotion_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite favorite = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->favorite_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate rate = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->rate_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment comment = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->comment_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block block = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->block_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share share = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->share_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->watch_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext video_next = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->video_next_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport video_in_viewport = 19;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->video_in_viewport_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus play_status = 20;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->play_status_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like like = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->like_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike dislike = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->dislike_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm norm = 23;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->norm_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3 rate3 = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->rate3_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10 rate10 = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->rate10_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click = 26;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->video_click_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_in_search = 27;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->watch_in_search_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click_in_search = 28;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->video_click_in_search_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate cold_rate = 29;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->cold_rate_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_with_sound = 30;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->watch_with_sound_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart video_start = 31;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->video_start_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
}

::google::protobuf::uint8* UserData_UserVideoEvents_UserVideoEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->doc_id(), target);
  }

  // required int64 last_timestamp = 2;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_timestamp(), target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion emotion = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->emotion_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite favorite = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->favorite_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate rate = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->rate_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment comment = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->comment_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block block = 15;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->block_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share share = 16;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->share_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch = 17;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->watch_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext video_next = 18;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->video_next_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport video_in_viewport = 19;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->video_in_viewport_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus play_status = 20;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->play_status_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like like = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->like_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike dislike = 22;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->dislike_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm norm = 23;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->norm_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3 rate3 = 24;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->rate3_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10 rate10 = 25;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->rate10_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click = 26;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->video_click_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_in_search = 27;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->watch_in_search_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click_in_search = 28;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->video_click_in_search_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate cold_rate = 29;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->cold_rate_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_with_sound = 30;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->watch_with_sound_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart video_start = 31;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->video_start_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  return target;
}

size_t UserData_UserVideoEvents_UserVideoEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  size_t total_size = 0;

  if (has_doc_id()) {
    // required int64 doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }

  if (has_last_timestamp()) {
    // required int64 last_timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_timestamp());
  }

  return total_size;
}
size_t UserData_UserVideoEvents_UserVideoEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00600000) ^ 0x00600000) == 0) {  // All required fields are present.
    // required int64 doc_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());

    // required int64 last_timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion emotion = 11;
    if (has_emotion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->emotion_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite favorite = 12;
    if (has_favorite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->favorite_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate rate = 13;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rate_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment comment = 14;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->comment_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block block = 15;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->block_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share share = 16;
    if (has_share()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->share_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch = 17;
    if (has_watch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->watch_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext video_next = 18;
    if (has_video_next()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_next_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport video_in_viewport = 19;
    if (has_video_in_viewport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_in_viewport_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus play_status = 20;
    if (has_play_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->play_status_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like like = 21;
    if (has_like()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->like_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike dislike = 22;
    if (has_dislike()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dislike_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm norm = 23;
    if (has_norm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->norm_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3 rate3 = 24;
    if (has_rate3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rate3_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10 rate10 = 25;
    if (has_rate10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rate10_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click = 26;
    if (has_video_click()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_click_);
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_in_search = 27;
    if (has_watch_in_search()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->watch_in_search_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click_in_search = 28;
    if (has_video_click_in_search()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_click_in_search_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate cold_rate = 29;
    if (has_cold_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cold_rate_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_with_sound = 30;
    if (has_watch_with_sound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->watch_with_sound_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart video_start = 31;
    if (has_video_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_start_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents_UserVideoEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents_UserVideoEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents_UserVideoEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents_UserVideoEvent::MergeFrom(const UserData_UserVideoEvents_UserVideoEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_emotion()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion::MergeFrom(from.emotion());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_favorite()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite::MergeFrom(from.favorite());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_rate()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate::MergeFrom(from.rate());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_comment()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment::MergeFrom(from.comment());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_block()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block::MergeFrom(from.block());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_share()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share::MergeFrom(from.share());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_watch()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::MergeFrom(from.watch());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_video_next()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext::MergeFrom(from.video_next());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_video_in_viewport()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::MergeFrom(from.video_in_viewport());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_play_status()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus::MergeFrom(from.play_status());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_like()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like::MergeFrom(from.like());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_dislike()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike::MergeFrom(from.dislike());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_norm()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm::MergeFrom(from.norm());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_rate3()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3::MergeFrom(from.rate3());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_rate10()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10::MergeFrom(from.rate10());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_video_click()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick::MergeFrom(from.video_click());
    }
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_watch_in_search()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::MergeFrom(from.watch_in_search());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_video_click_in_search()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick::MergeFrom(from.video_click_in_search());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_cold_rate()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate::MergeFrom(from.cold_rate());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_watch_with_sound()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::MergeFrom(from.watch_with_sound());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_video_start()->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart::MergeFrom(from.video_start());
    }
    if (cached_has_bits & 0x00200000u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      last_timestamp_ = from.last_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_UserVideoEvents_UserVideoEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents_UserVideoEvent::CopyFrom(const UserData_UserVideoEvents_UserVideoEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents_UserVideoEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00600000) != 0x00600000) return false;
  return true;
}

void UserData_UserVideoEvents_UserVideoEvent::Swap(UserData_UserVideoEvents_UserVideoEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents_UserVideoEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents_UserVideoEvent::UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents_UserVideoEvent::InternalSwap(UserData_UserVideoEvents_UserVideoEvent* other) {
  using std::swap;
  swap(emotion_, other->emotion_);
  swap(favorite_, other->favorite_);
  swap(rate_, other->rate_);
  swap(comment_, other->comment_);
  swap(block_, other->block_);
  swap(share_, other->share_);
  swap(watch_, other->watch_);
  swap(video_next_, other->video_next_);
  swap(video_in_viewport_, other->video_in_viewport_);
  swap(play_status_, other->play_status_);
  swap(like_, other->like_);
  swap(dislike_, other->dislike_);
  swap(norm_, other->norm_);
  swap(rate3_, other->rate3_);
  swap(rate10_, other->rate10_);
  swap(video_click_, other->video_click_);
  swap(watch_in_search_, other->watch_in_search_);
  swap(video_click_in_search_, other->video_click_in_search_);
  swap(cold_rate_, other->cold_rate_);
  swap(watch_with_sound_, other->watch_with_sound_);
  swap(video_start_, other->video_start_);
  swap(doc_id_, other->doc_id_);
  swap(last_timestamp_, other->last_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents_UserVideoEvent::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents_UserVideoEvent

// required int64 doc_id = 1;
bool UserData_UserVideoEvents_UserVideoEvent::has_doc_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_doc_id() {
  _has_bits_[0] |= 0x00200000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00200000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.doc_id)
  return doc_id_;
}
void UserData_UserVideoEvents_UserVideoEvent::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.doc_id)
}

// required int64 last_timestamp = 2;
bool UserData_UserVideoEvents_UserVideoEvent::has_last_timestamp() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_last_timestamp() {
  _has_bits_[0] |= 0x00400000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_last_timestamp() {
  _has_bits_[0] &= ~0x00400000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_last_timestamp() {
  last_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_timestamp();
}
::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent::last_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.last_timestamp)
  return last_timestamp_;
}
void UserData_UserVideoEvents_UserVideoEvent::set_last_timestamp(::google::protobuf::int64 value) {
  set_has_last_timestamp();
  last_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.last_timestamp)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion emotion = 11;
bool UserData_UserVideoEvents_UserVideoEvent::has_emotion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_emotion() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_emotion() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_emotion() {
  if (emotion_ != NULL) emotion_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion::Clear();
  clear_has_emotion();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion& UserData_UserVideoEvents_UserVideoEvent::emotion() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* p = emotion_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.emotion)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Emotion_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* UserData_UserVideoEvents_UserVideoEvent::mutable_emotion() {
  set_has_emotion();
  if (emotion_ == NULL) {
    _slow_mutable_emotion();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.emotion)
  return emotion_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* UserData_UserVideoEvents_UserVideoEvent::release_emotion() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.emotion)
  clear_has_emotion();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_emotion();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* temp = emotion_;
    emotion_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_emotion(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* emotion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete emotion_;
  }
  if (emotion != NULL) {
    _slow_set_allocated_emotion(message_arena, &emotion);
  }
  emotion_ = emotion;
  if (emotion) {
    set_has_emotion();
  } else {
    clear_has_emotion();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.emotion)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite favorite = 12;
bool UserData_UserVideoEvents_UserVideoEvent::has_favorite() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_favorite() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_favorite() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_favorite() {
  if (favorite_ != NULL) favorite_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite::Clear();
  clear_has_favorite();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite& UserData_UserVideoEvents_UserVideoEvent::favorite() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* p = favorite_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.favorite)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Favorite_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* UserData_UserVideoEvents_UserVideoEvent::mutable_favorite() {
  set_has_favorite();
  if (favorite_ == NULL) {
    _slow_mutable_favorite();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.favorite)
  return favorite_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* UserData_UserVideoEvents_UserVideoEvent::release_favorite() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.favorite)
  clear_has_favorite();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_favorite();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* temp = favorite_;
    favorite_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_favorite(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* favorite) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete favorite_;
  }
  if (favorite != NULL) {
    _slow_set_allocated_favorite(message_arena, &favorite);
  }
  favorite_ = favorite;
  if (favorite) {
    set_has_favorite();
  } else {
    clear_has_favorite();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.favorite)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate rate = 13;
bool UserData_UserVideoEvents_UserVideoEvent::has_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_rate() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_rate() {
  if (rate_ != NULL) rate_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate::Clear();
  clear_has_rate();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate& UserData_UserVideoEvents_UserVideoEvent::rate() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* p = rate_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Rate_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::mutable_rate() {
  set_has_rate();
  if (rate_ == NULL) {
    _slow_mutable_rate();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate)
  return rate_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::release_rate() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate)
  clear_has_rate();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rate();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* temp = rate_;
    rate_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_rate(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rate_;
  }
  if (rate != NULL) {
    _slow_set_allocated_rate(message_arena, &rate);
  }
  rate_ = rate;
  if (rate) {
    set_has_rate();
  } else {
    clear_has_rate();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment comment = 14;
bool UserData_UserVideoEvents_UserVideoEvent::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_comment() {
  if (comment_ != NULL) comment_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment::Clear();
  clear_has_comment();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment& UserData_UserVideoEvents_UserVideoEvent::comment() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* p = comment_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.comment)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Comment_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* UserData_UserVideoEvents_UserVideoEvent::mutable_comment() {
  set_has_comment();
  if (comment_ == NULL) {
    _slow_mutable_comment();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.comment)
  return comment_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* UserData_UserVideoEvents_UserVideoEvent::release_comment() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.comment)
  clear_has_comment();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_comment();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* temp = comment_;
    comment_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_comment(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* comment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comment_;
  }
  if (comment != NULL) {
    _slow_set_allocated_comment(message_arena, &comment);
  }
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.comment)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block block = 15;
bool UserData_UserVideoEvents_UserVideoEvent::has_block() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_block() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_block() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_block() {
  if (block_ != NULL) block_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block::Clear();
  clear_has_block();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block& UserData_UserVideoEvents_UserVideoEvent::block() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* p = block_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.block)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Block_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* UserData_UserVideoEvents_UserVideoEvent::mutable_block() {
  set_has_block();
  if (block_ == NULL) {
    _slow_mutable_block();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.block)
  return block_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* UserData_UserVideoEvents_UserVideoEvent::release_block() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.block)
  clear_has_block();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_block();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* temp = block_;
    block_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_block(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_;
  }
  if (block != NULL) {
    _slow_set_allocated_block(message_arena, &block);
  }
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.block)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share share = 16;
bool UserData_UserVideoEvents_UserVideoEvent::has_share() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_share() {
  _has_bits_[0] |= 0x00000020u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_share() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_share() {
  if (share_ != NULL) share_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share::Clear();
  clear_has_share();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share& UserData_UserVideoEvents_UserVideoEvent::share() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* p = share_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.share)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Share_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* UserData_UserVideoEvents_UserVideoEvent::mutable_share() {
  set_has_share();
  if (share_ == NULL) {
    _slow_mutable_share();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.share)
  return share_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* UserData_UserVideoEvents_UserVideoEvent::release_share() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.share)
  clear_has_share();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_share();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* temp = share_;
    share_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_share(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* share) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete share_;
  }
  if (share != NULL) {
    _slow_set_allocated_share(message_arena, &share);
  }
  share_ = share;
  if (share) {
    set_has_share();
  } else {
    clear_has_share();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.share)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch = 17;
bool UserData_UserVideoEvents_UserVideoEvent::has_watch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_watch() {
  _has_bits_[0] |= 0x00000040u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_watch() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_watch() {
  if (watch_ != NULL) watch_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::Clear();
  clear_has_watch();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch& UserData_UserVideoEvents_UserVideoEvent::watch() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* p = watch_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::mutable_watch() {
  set_has_watch();
  if (watch_ == NULL) {
    _slow_mutable_watch();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch)
  return watch_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::release_watch() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch)
  clear_has_watch();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_watch();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = watch_;
    watch_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_watch(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete watch_;
  }
  if (watch != NULL) {
    _slow_set_allocated_watch(message_arena, &watch);
  }
  watch_ = watch;
  if (watch) {
    set_has_watch();
  } else {
    clear_has_watch();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext video_next = 18;
bool UserData_UserVideoEvents_UserVideoEvent::has_video_next() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_video_next() {
  _has_bits_[0] |= 0x00000080u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_video_next() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_video_next() {
  if (video_next_ != NULL) video_next_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext::Clear();
  clear_has_video_next();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext& UserData_UserVideoEvents_UserVideoEvent::video_next() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* p = video_next_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_next)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_VideoNext_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* UserData_UserVideoEvents_UserVideoEvent::mutable_video_next() {
  set_has_video_next();
  if (video_next_ == NULL) {
    _slow_mutable_video_next();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_next)
  return video_next_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* UserData_UserVideoEvents_UserVideoEvent::release_video_next() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_next)
  clear_has_video_next();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_next();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* temp = video_next_;
    video_next_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_video_next(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* video_next) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_next_;
  }
  if (video_next != NULL) {
    _slow_set_allocated_video_next(message_arena, &video_next);
  }
  video_next_ = video_next;
  if (video_next) {
    set_has_video_next();
  } else {
    clear_has_video_next();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_next)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport video_in_viewport = 19;
bool UserData_UserVideoEvents_UserVideoEvent::has_video_in_viewport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_video_in_viewport() {
  _has_bits_[0] |= 0x00000100u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_video_in_viewport() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_video_in_viewport() {
  if (video_in_viewport_ != NULL) video_in_viewport_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::Clear();
  clear_has_video_in_viewport();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& UserData_UserVideoEvents_UserVideoEvent::video_in_viewport() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* p = video_in_viewport_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_in_viewport)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_VideoInViewport_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* UserData_UserVideoEvents_UserVideoEvent::mutable_video_in_viewport() {
  set_has_video_in_viewport();
  if (video_in_viewport_ == NULL) {
    _slow_mutable_video_in_viewport();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_in_viewport)
  return video_in_viewport_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* UserData_UserVideoEvents_UserVideoEvent::release_video_in_viewport() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_in_viewport)
  clear_has_video_in_viewport();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_in_viewport();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* temp = video_in_viewport_;
    video_in_viewport_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_video_in_viewport(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* video_in_viewport) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_in_viewport_;
  }
  if (video_in_viewport != NULL) {
    _slow_set_allocated_video_in_viewport(message_arena, &video_in_viewport);
  }
  video_in_viewport_ = video_in_viewport;
  if (video_in_viewport) {
    set_has_video_in_viewport();
  } else {
    clear_has_video_in_viewport();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_in_viewport)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus play_status = 20;
bool UserData_UserVideoEvents_UserVideoEvent::has_play_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_play_status() {
  _has_bits_[0] |= 0x00000200u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_play_status() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_play_status() {
  if (play_status_ != NULL) play_status_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus::Clear();
  clear_has_play_status();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus& UserData_UserVideoEvents_UserVideoEvent::play_status() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* p = play_status_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.play_status)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_PlayStatus_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* UserData_UserVideoEvents_UserVideoEvent::mutable_play_status() {
  set_has_play_status();
  if (play_status_ == NULL) {
    _slow_mutable_play_status();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.play_status)
  return play_status_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* UserData_UserVideoEvents_UserVideoEvent::release_play_status() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.play_status)
  clear_has_play_status();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_play_status();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* temp = play_status_;
    play_status_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_play_status(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* play_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete play_status_;
  }
  if (play_status != NULL) {
    _slow_set_allocated_play_status(message_arena, &play_status);
  }
  play_status_ = play_status;
  if (play_status) {
    set_has_play_status();
  } else {
    clear_has_play_status();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.play_status)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like like = 21;
bool UserData_UserVideoEvents_UserVideoEvent::has_like() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_like() {
  _has_bits_[0] |= 0x00000400u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_like() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_like() {
  if (like_ != NULL) like_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like::Clear();
  clear_has_like();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like& UserData_UserVideoEvents_UserVideoEvent::like() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* p = like_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.like)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Like_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* UserData_UserVideoEvents_UserVideoEvent::mutable_like() {
  set_has_like();
  if (like_ == NULL) {
    _slow_mutable_like();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.like)
  return like_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* UserData_UserVideoEvents_UserVideoEvent::release_like() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.like)
  clear_has_like();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_like();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* temp = like_;
    like_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_like(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* like) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete like_;
  }
  if (like != NULL) {
    _slow_set_allocated_like(message_arena, &like);
  }
  like_ = like;
  if (like) {
    set_has_like();
  } else {
    clear_has_like();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.like)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike dislike = 22;
bool UserData_UserVideoEvents_UserVideoEvent::has_dislike() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_dislike() {
  _has_bits_[0] |= 0x00000800u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_dislike() {
  _has_bits_[0] &= ~0x00000800u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_dislike() {
  if (dislike_ != NULL) dislike_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike::Clear();
  clear_has_dislike();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike& UserData_UserVideoEvents_UserVideoEvent::dislike() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* p = dislike_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.dislike)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Dislike_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* UserData_UserVideoEvents_UserVideoEvent::mutable_dislike() {
  set_has_dislike();
  if (dislike_ == NULL) {
    _slow_mutable_dislike();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.dislike)
  return dislike_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* UserData_UserVideoEvents_UserVideoEvent::release_dislike() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.dislike)
  clear_has_dislike();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dislike();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* temp = dislike_;
    dislike_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_dislike(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* dislike) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dislike_;
  }
  if (dislike != NULL) {
    _slow_set_allocated_dislike(message_arena, &dislike);
  }
  dislike_ = dislike;
  if (dislike) {
    set_has_dislike();
  } else {
    clear_has_dislike();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.dislike)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm norm = 23;
bool UserData_UserVideoEvents_UserVideoEvent::has_norm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_norm() {
  _has_bits_[0] |= 0x00001000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_norm() {
  _has_bits_[0] &= ~0x00001000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_norm() {
  if (norm_ != NULL) norm_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm::Clear();
  clear_has_norm();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm& UserData_UserVideoEvents_UserVideoEvent::norm() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* p = norm_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.norm)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Norm_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* UserData_UserVideoEvents_UserVideoEvent::mutable_norm() {
  set_has_norm();
  if (norm_ == NULL) {
    _slow_mutable_norm();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.norm)
  return norm_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* UserData_UserVideoEvents_UserVideoEvent::release_norm() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.norm)
  clear_has_norm();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_norm();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* temp = norm_;
    norm_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_norm(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* norm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete norm_;
  }
  if (norm != NULL) {
    _slow_set_allocated_norm(message_arena, &norm);
  }
  norm_ = norm;
  if (norm) {
    set_has_norm();
  } else {
    clear_has_norm();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.norm)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3 rate3 = 24;
bool UserData_UserVideoEvents_UserVideoEvent::has_rate3() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_rate3() {
  _has_bits_[0] |= 0x00002000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_rate3() {
  _has_bits_[0] &= ~0x00002000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_rate3() {
  if (rate3_ != NULL) rate3_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3::Clear();
  clear_has_rate3();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3& UserData_UserVideoEvents_UserVideoEvent::rate3() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* p = rate3_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate3)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Rate3_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* UserData_UserVideoEvents_UserVideoEvent::mutable_rate3() {
  set_has_rate3();
  if (rate3_ == NULL) {
    _slow_mutable_rate3();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate3)
  return rate3_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* UserData_UserVideoEvents_UserVideoEvent::release_rate3() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate3)
  clear_has_rate3();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rate3();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* temp = rate3_;
    rate3_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_rate3(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* rate3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rate3_;
  }
  if (rate3 != NULL) {
    _slow_set_allocated_rate3(message_arena, &rate3);
  }
  rate3_ = rate3;
  if (rate3) {
    set_has_rate3();
  } else {
    clear_has_rate3();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate3)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10 rate10 = 25;
bool UserData_UserVideoEvents_UserVideoEvent::has_rate10() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_rate10() {
  _has_bits_[0] |= 0x00004000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_rate10() {
  _has_bits_[0] &= ~0x00004000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_rate10() {
  if (rate10_ != NULL) rate10_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10::Clear();
  clear_has_rate10();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10& UserData_UserVideoEvents_UserVideoEvent::rate10() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* p = rate10_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate10)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Rate10_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* UserData_UserVideoEvents_UserVideoEvent::mutable_rate10() {
  set_has_rate10();
  if (rate10_ == NULL) {
    _slow_mutable_rate10();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate10)
  return rate10_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* UserData_UserVideoEvents_UserVideoEvent::release_rate10() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate10)
  clear_has_rate10();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rate10();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* temp = rate10_;
    rate10_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_rate10(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* rate10) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rate10_;
  }
  if (rate10 != NULL) {
    _slow_set_allocated_rate10(message_arena, &rate10);
  }
  rate10_ = rate10;
  if (rate10) {
    set_has_rate10();
  } else {
    clear_has_rate10();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate10)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click = 26;
bool UserData_UserVideoEvents_UserVideoEvent::has_video_click() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_video_click() {
  _has_bits_[0] |= 0x00008000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_video_click() {
  _has_bits_[0] &= ~0x00008000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_video_click() {
  if (video_click_ != NULL) video_click_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick::Clear();
  clear_has_video_click();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick& UserData_UserVideoEvents_UserVideoEvent::video_click() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* p = video_click_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::mutable_video_click() {
  set_has_video_click();
  if (video_click_ == NULL) {
    _slow_mutable_video_click();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click)
  return video_click_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::release_video_click() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click)
  clear_has_video_click();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_click();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* temp = video_click_;
    video_click_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_video_click(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_click_;
  }
  if (video_click != NULL) {
    _slow_set_allocated_video_click(message_arena, &video_click);
  }
  video_click_ = video_click;
  if (video_click) {
    set_has_video_click();
  } else {
    clear_has_video_click();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_in_search = 27;
bool UserData_UserVideoEvents_UserVideoEvent::has_watch_in_search() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_watch_in_search() {
  _has_bits_[0] |= 0x00010000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_watch_in_search() {
  _has_bits_[0] &= ~0x00010000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_watch_in_search() {
  if (watch_in_search_ != NULL) watch_in_search_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::Clear();
  clear_has_watch_in_search();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch& UserData_UserVideoEvents_UserVideoEvent::watch_in_search() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* p = watch_in_search_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_in_search)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::mutable_watch_in_search() {
  set_has_watch_in_search();
  if (watch_in_search_ == NULL) {
    _slow_mutable_watch_in_search();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_in_search)
  return watch_in_search_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::release_watch_in_search() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_in_search)
  clear_has_watch_in_search();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_watch_in_search();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = watch_in_search_;
    watch_in_search_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_watch_in_search(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_in_search) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete watch_in_search_;
  }
  if (watch_in_search != NULL) {
    _slow_set_allocated_watch_in_search(message_arena, &watch_in_search);
  }
  watch_in_search_ = watch_in_search;
  if (watch_in_search) {
    set_has_watch_in_search();
  } else {
    clear_has_watch_in_search();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_in_search)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click_in_search = 28;
bool UserData_UserVideoEvents_UserVideoEvent::has_video_click_in_search() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_video_click_in_search() {
  _has_bits_[0] |= 0x00020000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_video_click_in_search() {
  _has_bits_[0] &= ~0x00020000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_video_click_in_search() {
  if (video_click_in_search_ != NULL) video_click_in_search_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick::Clear();
  clear_has_video_click_in_search();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick& UserData_UserVideoEvents_UserVideoEvent::video_click_in_search() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* p = video_click_in_search_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click_in_search)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::mutable_video_click_in_search() {
  set_has_video_click_in_search();
  if (video_click_in_search_ == NULL) {
    _slow_mutable_video_click_in_search();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click_in_search)
  return video_click_in_search_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::release_video_click_in_search() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click_in_search)
  clear_has_video_click_in_search();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_click_in_search();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* temp = video_click_in_search_;
    video_click_in_search_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_video_click_in_search(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click_in_search) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_click_in_search_;
  }
  if (video_click_in_search != NULL) {
    _slow_set_allocated_video_click_in_search(message_arena, &video_click_in_search);
  }
  video_click_in_search_ = video_click_in_search;
  if (video_click_in_search) {
    set_has_video_click_in_search();
  } else {
    clear_has_video_click_in_search();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click_in_search)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate cold_rate = 29;
bool UserData_UserVideoEvents_UserVideoEvent::has_cold_rate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_cold_rate() {
  _has_bits_[0] |= 0x00040000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_cold_rate() {
  _has_bits_[0] &= ~0x00040000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_cold_rate() {
  if (cold_rate_ != NULL) cold_rate_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate::Clear();
  clear_has_cold_rate();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate& UserData_UserVideoEvents_UserVideoEvent::cold_rate() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* p = cold_rate_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.cold_rate)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Rate_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::mutable_cold_rate() {
  set_has_cold_rate();
  if (cold_rate_ == NULL) {
    _slow_mutable_cold_rate();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.cold_rate)
  return cold_rate_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::release_cold_rate() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.cold_rate)
  clear_has_cold_rate();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cold_rate();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* temp = cold_rate_;
    cold_rate_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_cold_rate(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* cold_rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cold_rate_;
  }
  if (cold_rate != NULL) {
    _slow_set_allocated_cold_rate(message_arena, &cold_rate);
  }
  cold_rate_ = cold_rate;
  if (cold_rate) {
    set_has_cold_rate();
  } else {
    clear_has_cold_rate();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.cold_rate)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_with_sound = 30;
bool UserData_UserVideoEvents_UserVideoEvent::has_watch_with_sound() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_watch_with_sound() {
  _has_bits_[0] |= 0x00080000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_watch_with_sound() {
  _has_bits_[0] &= ~0x00080000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_watch_with_sound() {
  if (watch_with_sound_ != NULL) watch_with_sound_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::Clear();
  clear_has_watch_with_sound();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch& UserData_UserVideoEvents_UserVideoEvent::watch_with_sound() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* p = watch_with_sound_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_with_sound)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::mutable_watch_with_sound() {
  set_has_watch_with_sound();
  if (watch_with_sound_ == NULL) {
    _slow_mutable_watch_with_sound();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_with_sound)
  return watch_with_sound_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::release_watch_with_sound() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_with_sound)
  clear_has_watch_with_sound();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_watch_with_sound();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = watch_with_sound_;
    watch_with_sound_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_watch_with_sound(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_with_sound) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete watch_with_sound_;
  }
  if (watch_with_sound != NULL) {
    _slow_set_allocated_watch_with_sound(message_arena, &watch_with_sound);
  }
  watch_with_sound_ = watch_with_sound;
  if (watch_with_sound) {
    set_has_watch_with_sound();
  } else {
    clear_has_watch_with_sound();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_with_sound)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart video_start = 31;
bool UserData_UserVideoEvents_UserVideoEvent::has_video_start() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void UserData_UserVideoEvents_UserVideoEvent::set_has_video_start() {
  _has_bits_[0] |= 0x00100000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_has_video_start() {
  _has_bits_[0] &= ~0x00100000u;
}
void UserData_UserVideoEvents_UserVideoEvent::clear_video_start() {
  if (video_start_ != NULL) video_start_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart::Clear();
  clear_has_video_start();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart& UserData_UserVideoEvents_UserVideoEvent::video_start() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* p = video_start_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_start)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_VideoStart_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* UserData_UserVideoEvents_UserVideoEvent::mutable_video_start() {
  set_has_video_start();
  if (video_start_ == NULL) {
    _slow_mutable_video_start();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_start)
  return video_start_;
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* UserData_UserVideoEvents_UserVideoEvent::release_video_start() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_start)
  clear_has_video_start();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_start();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* temp = video_start_;
    video_start_ = NULL;
    return temp;
  }
}
 void UserData_UserVideoEvents_UserVideoEvent::set_allocated_video_start(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* video_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_start_;
  }
  if (video_start != NULL) {
    _slow_set_allocated_video_start(message_arena, &video_start);
  }
  video_start_ = video_start;
  if (video_start) {
    set_has_video_start();
  } else {
    clear_has_video_start();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_start)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_UserVideoEvents::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_UserVideoEvents::UserData_UserVideoEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.UserVideoEvents)
}
UserData_UserVideoEvents::UserData_UserVideoEvents(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  events_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.UserVideoEvents)
}
UserData_UserVideoEvents::UserData_UserVideoEvents(const UserData_UserVideoEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.UserVideoEvents)
}

void UserData_UserVideoEvents::SharedCtor() {
  _cached_size_ = 0;
}

UserData_UserVideoEvents::~UserData_UserVideoEvents() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.UserVideoEvents)
  SharedDtor();
}

void UserData_UserVideoEvents::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_UserVideoEvents::ArenaDtor(void* object) {
  UserData_UserVideoEvents* _this = reinterpret_cast< UserData_UserVideoEvents* >(object);
  (void)_this;
}
void UserData_UserVideoEvents::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_UserVideoEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_UserVideoEvents::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_UserVideoEvents& UserData_UserVideoEvents::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_UserVideoEvents* UserData_UserVideoEvents::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_UserVideoEvents>(arena);
}

void UserData_UserVideoEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.UserVideoEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_UserVideoEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.UserVideoEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent events = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.UserVideoEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.UserVideoEvents)
  return false;
#undef DO_
}

void UserData_UserVideoEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.UserVideoEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.UserVideoEvents)
}

::google::protobuf::uint8* UserData_UserVideoEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.UserVideoEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->events(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.UserVideoEvents)
  return target;
}

size_t UserData_UserVideoEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.UserVideoEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_UserVideoEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.UserVideoEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_UserVideoEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_UserVideoEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.UserVideoEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.UserVideoEvents)
    MergeFrom(*source);
  }
}

void UserData_UserVideoEvents::MergeFrom(const UserData_UserVideoEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.UserVideoEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void UserData_UserVideoEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.UserVideoEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_UserVideoEvents::CopyFrom(const UserData_UserVideoEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.UserVideoEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_UserVideoEvents::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void UserData_UserVideoEvents::Swap(UserData_UserVideoEvents* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_UserVideoEvents* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_UserVideoEvents::UnsafeArenaSwap(UserData_UserVideoEvents* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_UserVideoEvents::InternalSwap(UserData_UserVideoEvents* other) {
  using std::swap;
  events_.InternalSwap(&other->events_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_UserVideoEvents::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_UserVideoEvents

// repeated .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent events = 1;
int UserData_UserVideoEvents::events_size() const {
  return events_.size();
}
void UserData_UserVideoEvents::clear_events() {
  events_.Clear();
}
const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent& UserData_UserVideoEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.events)
  return events_.Get(index);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent* UserData_UserVideoEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.events)
  return events_.Mutable(index);
}
::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent* UserData_UserVideoEvents::add_events() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserVideoEvents.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent >*
UserData_UserVideoEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserVideoEvents.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent >&
UserData_UserVideoEvents::events() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserVideoEvents.events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SubscriptionInfo_SubscriptionItem::kIdFieldNumber;
const int UserData_SubscriptionInfo_SubscriptionItem::kStatusFieldNumber;
const int UserData_SubscriptionInfo_SubscriptionItem::kLastTsFieldNumber;
const int UserData_SubscriptionInfo_SubscriptionItem::kShowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SubscriptionInfo_SubscriptionItem::UserData_SubscriptionInfo_SubscriptionItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
}
UserData_SubscriptionInfo_SubscriptionItem::UserData_SubscriptionInfo_SubscriptionItem(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
}
UserData_SubscriptionInfo_SubscriptionItem::UserData_SubscriptionInfo_SubscriptionItem(const UserData_SubscriptionInfo_SubscriptionItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shows_) -
    reinterpret_cast<char*>(&id_)) + sizeof(shows_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
}

void UserData_SubscriptionInfo_SubscriptionItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shows_) -
      reinterpret_cast<char*>(&id_)) + sizeof(shows_));
}

UserData_SubscriptionInfo_SubscriptionItem::~UserData_SubscriptionInfo_SubscriptionItem() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  SharedDtor();
}

void UserData_SubscriptionInfo_SubscriptionItem::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_SubscriptionInfo_SubscriptionItem::ArenaDtor(void* object) {
  UserData_SubscriptionInfo_SubscriptionItem* _this = reinterpret_cast< UserData_SubscriptionInfo_SubscriptionItem* >(object);
  (void)_this;
}
void UserData_SubscriptionInfo_SubscriptionItem::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_SubscriptionInfo_SubscriptionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SubscriptionInfo_SubscriptionItem::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SubscriptionInfo_SubscriptionItem& UserData_SubscriptionInfo_SubscriptionItem::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SubscriptionInfo_SubscriptionItem* UserData_SubscriptionInfo_SubscriptionItem::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_SubscriptionInfo_SubscriptionItem>(arena);
}

void UserData_SubscriptionInfo_SubscriptionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shows_) -
        reinterpret_cast<char*>(&id_)) + sizeof(shows_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SubscriptionInfo_SubscriptionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.SubscriptionStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_IsValid(value)) {
            set_status(static_cast< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_ts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shows = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_shows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  return false;
#undef DO_
}

void UserData_SubscriptionInfo_SubscriptionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.SubscriptionStatus status = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required int64 last_ts = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_ts(), output);
  }

  // optional int32 shows = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shows(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
}

::google::protobuf::uint8* UserData_SubscriptionInfo_SubscriptionItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.SubscriptionStatus status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required int64 last_ts = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_ts(), target);
  }

  // optional int32 shows = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shows(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  return target;
}

size_t UserData_SubscriptionInfo_SubscriptionItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  size_t total_size = 0;

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_last_ts()) {
    // required int64 last_ts = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_ts());
  }

  if (has_status()) {
    // required .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.SubscriptionStatus status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t UserData_SubscriptionInfo_SubscriptionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int64 last_ts = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_ts());

    // required .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.SubscriptionStatus status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 shows = 4;
  if (has_shows()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shows());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SubscriptionInfo_SubscriptionItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SubscriptionInfo_SubscriptionItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SubscriptionInfo_SubscriptionItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
    MergeFrom(*source);
  }
}

void UserData_SubscriptionInfo_SubscriptionItem::MergeFrom(const UserData_SubscriptionInfo_SubscriptionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_ts_ = from.last_ts_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      shows_ = from.shows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_SubscriptionInfo_SubscriptionItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SubscriptionInfo_SubscriptionItem::CopyFrom(const UserData_SubscriptionInfo_SubscriptionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SubscriptionInfo_SubscriptionItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UserData_SubscriptionInfo_SubscriptionItem::Swap(UserData_SubscriptionInfo_SubscriptionItem* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_SubscriptionInfo_SubscriptionItem* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_SubscriptionInfo_SubscriptionItem::UnsafeArenaSwap(UserData_SubscriptionInfo_SubscriptionItem* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_SubscriptionInfo_SubscriptionItem::InternalSwap(UserData_SubscriptionInfo_SubscriptionItem* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(last_ts_, other->last_ts_);
  swap(status_, other->status_);
  swap(shows_, other->shows_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SubscriptionInfo_SubscriptionItem::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SubscriptionInfo_SubscriptionItem

// required int64 id = 1;
bool UserData_SubscriptionInfo_SubscriptionItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SubscriptionInfo_SubscriptionItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SubscriptionInfo_SubscriptionItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SubscriptionInfo_SubscriptionItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 UserData_SubscriptionInfo_SubscriptionItem::id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.id)
  return id_;
}
void UserData_SubscriptionInfo_SubscriptionItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.id)
}

// required .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.SubscriptionStatus status = 2;
bool UserData_SubscriptionInfo_SubscriptionItem::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData_SubscriptionInfo_SubscriptionItem::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData_SubscriptionInfo_SubscriptionItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData_SubscriptionInfo_SubscriptionItem::clear_status() {
  status_ = 0;
  clear_has_status();
}
::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus UserData_SubscriptionInfo_SubscriptionItem::status() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.status)
  return static_cast< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus >(status_);
}
void UserData_SubscriptionInfo_SubscriptionItem::set_status(::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus value) {
  assert(::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.status)
}

// required int64 last_ts = 3;
bool UserData_SubscriptionInfo_SubscriptionItem::has_last_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_SubscriptionInfo_SubscriptionItem::set_has_last_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_SubscriptionInfo_SubscriptionItem::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_SubscriptionInfo_SubscriptionItem::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
::google::protobuf::int64 UserData_SubscriptionInfo_SubscriptionItem::last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.last_ts)
  return last_ts_;
}
void UserData_SubscriptionInfo_SubscriptionItem::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.last_ts)
}

// optional int32 shows = 4;
bool UserData_SubscriptionInfo_SubscriptionItem::has_shows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData_SubscriptionInfo_SubscriptionItem::set_has_shows() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData_SubscriptionInfo_SubscriptionItem::clear_has_shows() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData_SubscriptionInfo_SubscriptionItem::clear_shows() {
  shows_ = 0;
  clear_has_shows();
}
::google::protobuf::int32 UserData_SubscriptionInfo_SubscriptionItem::shows() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.shows)
  return shows_;
}
void UserData_SubscriptionInfo_SubscriptionItem::set_shows(::google::protobuf::int32 value) {
  set_has_shows();
  shows_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.shows)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData_SubscriptionInfo::kItemsFieldNumber;
const int UserData_SubscriptionInfo::kOnboardingShowsCountFieldNumber;
const int UserData_SubscriptionInfo::kLastOnboardingShowTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData_SubscriptionInfo::UserData_SubscriptionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData.SubscriptionInfo)
}
UserData_SubscriptionInfo::UserData_SubscriptionInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  items_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData.SubscriptionInfo)
}
UserData_SubscriptionInfo::UserData_SubscriptionInfo(const UserData_SubscriptionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_onboarding_show_ts_, &from.last_onboarding_show_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&onboarding_shows_count_) -
    reinterpret_cast<char*>(&last_onboarding_show_ts_)) + sizeof(onboarding_shows_count_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData.SubscriptionInfo)
}

void UserData_SubscriptionInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_onboarding_show_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onboarding_shows_count_) -
      reinterpret_cast<char*>(&last_onboarding_show_ts_)) + sizeof(onboarding_shows_count_));
}

UserData_SubscriptionInfo::~UserData_SubscriptionInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData.SubscriptionInfo)
  SharedDtor();
}

void UserData_SubscriptionInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void UserData_SubscriptionInfo::ArenaDtor(void* object) {
  UserData_SubscriptionInfo* _this = reinterpret_cast< UserData_SubscriptionInfo* >(object);
  (void)_this;
}
void UserData_SubscriptionInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData_SubscriptionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData_SubscriptionInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData_SubscriptionInfo& UserData_SubscriptionInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData_SubscriptionInfo* UserData_SubscriptionInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData_SubscriptionInfo>(arena);
}

void UserData_SubscriptionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData.SubscriptionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&last_onboarding_show_ts_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&onboarding_shows_count_) -
        reinterpret_cast<char*>(&last_onboarding_show_ts_)) + sizeof(onboarding_shows_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData_SubscriptionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData.SubscriptionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 onboarding_shows_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_onboarding_shows_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onboarding_shows_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_onboarding_show_ts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_onboarding_show_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_onboarding_show_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData.SubscriptionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData.SubscriptionInfo)
  return false;
#undef DO_
}

void UserData_SubscriptionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData.SubscriptionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 onboarding_shows_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onboarding_shows_count(), output);
  }

  // optional int64 last_onboarding_show_ts = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_onboarding_show_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData.SubscriptionInfo)
}

::google::protobuf::uint8* UserData_SubscriptionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData.SubscriptionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 onboarding_shows_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onboarding_shows_count(), target);
  }

  // optional int64 last_onboarding_show_ts = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_onboarding_show_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData.SubscriptionInfo)
  return target;
}

size_t UserData_SubscriptionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData.SubscriptionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 last_onboarding_show_ts = 3;
    if (has_last_onboarding_show_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_onboarding_show_ts());
    }

    // optional int32 onboarding_shows_count = 2;
    if (has_onboarding_shows_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onboarding_shows_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData_SubscriptionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData.SubscriptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData_SubscriptionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData_SubscriptionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData.SubscriptionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData.SubscriptionInfo)
    MergeFrom(*source);
  }
}

void UserData_SubscriptionInfo::MergeFrom(const UserData_SubscriptionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData.SubscriptionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_onboarding_show_ts_ = from.last_onboarding_show_ts_;
    }
    if (cached_has_bits & 0x00000002u) {
      onboarding_shows_count_ = from.onboarding_shows_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserData_SubscriptionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData.SubscriptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData_SubscriptionInfo::CopyFrom(const UserData_SubscriptionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData.SubscriptionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData_SubscriptionInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void UserData_SubscriptionInfo::Swap(UserData_SubscriptionInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData_SubscriptionInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData_SubscriptionInfo::UnsafeArenaSwap(UserData_SubscriptionInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData_SubscriptionInfo::InternalSwap(UserData_SubscriptionInfo* other) {
  using std::swap;
  items_.InternalSwap(&other->items_);
  swap(last_onboarding_show_ts_, other->last_onboarding_show_ts_);
  swap(onboarding_shows_count_, other->onboarding_shows_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData_SubscriptionInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData_SubscriptionInfo

// repeated .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem items = 1;
int UserData_SubscriptionInfo::items_size() const {
  return items_.size();
}
void UserData_SubscriptionInfo::clear_items() {
  items_.Clear();
}
const ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem& UserData_SubscriptionInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.items)
  return items_.Get(index);
}
::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem* UserData_SubscriptionInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.SubscriptionInfo.items)
  return items_.Mutable(index);
}
::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem* UserData_SubscriptionInfo::add_items() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SubscriptionInfo.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem >*
UserData_SubscriptionInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SubscriptionInfo.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem >&
UserData_SubscriptionInfo::items() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SubscriptionInfo.items)
  return items_;
}

// optional int32 onboarding_shows_count = 2;
bool UserData_SubscriptionInfo::has_onboarding_shows_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData_SubscriptionInfo::set_has_onboarding_shows_count() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData_SubscriptionInfo::clear_has_onboarding_shows_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData_SubscriptionInfo::clear_onboarding_shows_count() {
  onboarding_shows_count_ = 0;
  clear_has_onboarding_shows_count();
}
::google::protobuf::int32 UserData_SubscriptionInfo::onboarding_shows_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.onboarding_shows_count)
  return onboarding_shows_count_;
}
void UserData_SubscriptionInfo::set_onboarding_shows_count(::google::protobuf::int32 value) {
  set_has_onboarding_shows_count();
  onboarding_shows_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.onboarding_shows_count)
}

// optional int64 last_onboarding_show_ts = 3;
bool UserData_SubscriptionInfo::has_last_onboarding_show_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData_SubscriptionInfo::set_has_last_onboarding_show_ts() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData_SubscriptionInfo::clear_has_last_onboarding_show_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData_SubscriptionInfo::clear_last_onboarding_show_ts() {
  last_onboarding_show_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_onboarding_show_ts();
}
::google::protobuf::int64 UserData_SubscriptionInfo::last_onboarding_show_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.last_onboarding_show_ts)
  return last_onboarding_show_ts_;
}
void UserData_SubscriptionInfo::set_last_onboarding_show_ts(::google::protobuf::int64 value) {
  set_has_last_onboarding_show_ts();
  last_onboarding_show_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.last_onboarding_show_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UserData::_slow_mutable_socdem_fea() {
  socdem_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SocDemFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SocDemFea* UserData::_slow_release_socdem_fea() {
  if (socdem_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SocDemFea* temp = new ::cosmo::pb::UserData_SocDemFea(*socdem_fea_);
    socdem_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SocDemFea* UserData::unsafe_arena_release_socdem_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.socdem_fea)
  clear_has_socdem_fea();
  ::cosmo::pb::UserData_SocDemFea* temp = socdem_fea_;
  socdem_fea_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_socdem_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SocDemFea** socdem_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*socdem_fea) == NULL) {
      message_arena->Own(*socdem_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*socdem_fea)) {
      ::cosmo::pb::UserData_SocDemFea* new_socdem_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SocDemFea >(
            message_arena);
      new_socdem_fea->CopyFrom(**socdem_fea);
      *socdem_fea = new_socdem_fea;
    }
}
void UserData::unsafe_arena_set_allocated_socdem_fea(
    ::cosmo::pb::UserData_SocDemFea* socdem_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete socdem_fea_;
  }
  socdem_fea_ = socdem_fea;
  if (socdem_fea) {
    set_has_socdem_fea();
  } else {
    clear_has_socdem_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.socdem_fea)
}
void UserData::_slow_mutable_als_fea() {
  als_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_AlsFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_AlsFea* UserData::_slow_release_als_fea() {
  if (als_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_AlsFea* temp = new ::cosmo::pb::UserData_AlsFea(*als_fea_);
    als_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_AlsFea* UserData::unsafe_arena_release_als_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.als_fea)
  clear_has_als_fea();
  ::cosmo::pb::UserData_AlsFea* temp = als_fea_;
  als_fea_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_als_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_AlsFea** als_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*als_fea) == NULL) {
      message_arena->Own(*als_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*als_fea)) {
      ::cosmo::pb::UserData_AlsFea* new_als_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_AlsFea >(
            message_arena);
      new_als_fea->CopyFrom(**als_fea);
      *als_fea = new_als_fea;
    }
}
void UserData::unsafe_arena_set_allocated_als_fea(
    ::cosmo::pb::UserData_AlsFea* als_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete als_fea_;
  }
  als_fea_ = als_fea;
  if (als_fea) {
    set_has_als_fea();
  } else {
    clear_has_als_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.als_fea)
}
void UserData::_slow_mutable_ok_info() {
  ok_info_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_OkInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_OkInfo* UserData::_slow_release_ok_info() {
  if (ok_info_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_OkInfo* temp = new ::cosmo::pb::UserData_OkInfo(*ok_info_);
    ok_info_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_OkInfo* UserData::unsafe_arena_release_ok_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.ok_info)
  clear_has_ok_info();
  ::cosmo::pb::UserData_OkInfo* temp = ok_info_;
  ok_info_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_ok_info(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_OkInfo** ok_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*ok_info) == NULL) {
      message_arena->Own(*ok_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*ok_info)) {
      ::cosmo::pb::UserData_OkInfo* new_ok_info = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_OkInfo >(
            message_arena);
      new_ok_info->CopyFrom(**ok_info);
      *ok_info = new_ok_info;
    }
}
void UserData::unsafe_arena_set_allocated_ok_info(
    ::cosmo::pb::UserData_OkInfo* ok_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete ok_info_;
  }
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.ok_info)
}
void UserData::_slow_mutable_deti_reco() {
  deti_reco_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_DetiRecos >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_DetiRecos* UserData::_slow_release_deti_reco() {
  if (deti_reco_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_DetiRecos* temp = new ::cosmo::pb::UserData_DetiRecos(*deti_reco_);
    deti_reco_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_DetiRecos* UserData::unsafe_arena_release_deti_reco() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.deti_reco)
  clear_has_deti_reco();
  ::cosmo::pb::UserData_DetiRecos* temp = deti_reco_;
  deti_reco_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_deti_reco(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_DetiRecos** deti_reco) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*deti_reco) == NULL) {
      message_arena->Own(*deti_reco);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*deti_reco)) {
      ::cosmo::pb::UserData_DetiRecos* new_deti_reco = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_DetiRecos >(
            message_arena);
      new_deti_reco->CopyFrom(**deti_reco);
      *deti_reco = new_deti_reco;
    }
}
void UserData::unsafe_arena_set_allocated_deti_reco(
    ::cosmo::pb::UserData_DetiRecos* deti_reco) {
  if (GetArenaNoVirtual() == NULL) {
    delete deti_reco_;
  }
  deti_reco_ = deti_reco;
  if (deti_reco) {
    set_has_deti_reco();
  } else {
    clear_has_deti_reco();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.deti_reco)
}
void UserData::_slow_mutable_als_items_fea() {
  als_items_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_AlsItemsBiases >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_AlsItemsBiases* UserData::_slow_release_als_items_fea() {
  if (als_items_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_AlsItemsBiases* temp = new ::cosmo::pb::UserData_AlsItemsBiases(*als_items_fea_);
    als_items_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_AlsItemsBiases* UserData::unsafe_arena_release_als_items_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.als_items_fea)
  clear_has_als_items_fea();
  ::cosmo::pb::UserData_AlsItemsBiases* temp = als_items_fea_;
  als_items_fea_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_als_items_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_AlsItemsBiases** als_items_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*als_items_fea) == NULL) {
      message_arena->Own(*als_items_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*als_items_fea)) {
      ::cosmo::pb::UserData_AlsItemsBiases* new_als_items_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_AlsItemsBiases >(
            message_arena);
      new_als_items_fea->CopyFrom(**als_items_fea);
      *als_items_fea = new_als_items_fea;
    }
}
void UserData::unsafe_arena_set_allocated_als_items_fea(
    ::cosmo::pb::UserData_AlsItemsBiases* als_items_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete als_items_fea_;
  }
  als_items_fea_ = als_items_fea;
  if (als_items_fea) {
    set_has_als_items_fea();
  } else {
    clear_has_als_items_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.als_items_fea)
}
void UserData::_slow_mutable_news_sources() {
  news_sources_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_NewsSources >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_NewsSources* UserData::_slow_release_news_sources() {
  if (news_sources_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_NewsSources* temp = new ::cosmo::pb::UserData_NewsSources(*news_sources_);
    news_sources_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_NewsSources* UserData::unsafe_arena_release_news_sources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.news_sources)
  clear_has_news_sources();
  ::cosmo::pb::UserData_NewsSources* temp = news_sources_;
  news_sources_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_news_sources(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_NewsSources** news_sources) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*news_sources) == NULL) {
      message_arena->Own(*news_sources);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*news_sources)) {
      ::cosmo::pb::UserData_NewsSources* new_news_sources = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_NewsSources >(
            message_arena);
      new_news_sources->CopyFrom(**news_sources);
      *news_sources = new_news_sources;
    }
}
void UserData::unsafe_arena_set_allocated_news_sources(
    ::cosmo::pb::UserData_NewsSources* news_sources) {
  if (GetArenaNoVirtual() == NULL) {
    delete news_sources_;
  }
  news_sources_ = news_sources;
  if (news_sources) {
    set_has_news_sources();
  } else {
    clear_has_news_sources();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.news_sources)
}
void UserData::_slow_mutable_stats() {
  stats_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_Stats >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_Stats* UserData::_slow_release_stats() {
  if (stats_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_Stats* temp = new ::cosmo::pb::UserData_Stats(*stats_);
    stats_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_Stats* UserData::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.stats)
  clear_has_stats();
  ::cosmo::pb::UserData_Stats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_stats(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_Stats** stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stats) == NULL) {
      message_arena->Own(*stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stats)) {
      ::cosmo::pb::UserData_Stats* new_stats = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_Stats >(
            message_arena);
      new_stats->CopyFrom(**stats);
      *stats = new_stats;
    }
}
void UserData::unsafe_arena_set_allocated_stats(
    ::cosmo::pb::UserData_Stats* stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete stats_;
  }
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.stats)
}
void UserData::_slow_mutable_original_info() {
  original_info_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_OriginalInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_OriginalInfo* UserData::_slow_release_original_info() {
  if (original_info_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_OriginalInfo* temp = new ::cosmo::pb::UserData_OriginalInfo(*original_info_);
    original_info_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_OriginalInfo* UserData::unsafe_arena_release_original_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.original_info)
  clear_has_original_info();
  ::cosmo::pb::UserData_OriginalInfo* temp = original_info_;
  original_info_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_original_info(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_OriginalInfo** original_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*original_info) == NULL) {
      message_arena->Own(*original_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*original_info)) {
      ::cosmo::pb::UserData_OriginalInfo* new_original_info = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_OriginalInfo >(
            message_arena);
      new_original_info->CopyFrom(**original_info);
      *original_info = new_original_info;
    }
}
void UserData::unsafe_arena_set_allocated_original_info(
    ::cosmo::pb::UserData_OriginalInfo* original_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete original_info_;
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.original_info)
}
void UserData::_slow_mutable_als_fea_2() {
  als_fea_2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_AlsFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_AlsFea* UserData::_slow_release_als_fea_2() {
  if (als_fea_2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_AlsFea* temp = new ::cosmo::pb::UserData_AlsFea(*als_fea_2_);
    als_fea_2_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_AlsFea* UserData::unsafe_arena_release_als_fea_2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.als_fea_2)
  clear_has_als_fea_2();
  ::cosmo::pb::UserData_AlsFea* temp = als_fea_2_;
  als_fea_2_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_als_fea_2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_AlsFea** als_fea_2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*als_fea_2) == NULL) {
      message_arena->Own(*als_fea_2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*als_fea_2)) {
      ::cosmo::pb::UserData_AlsFea* new_als_fea_2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_AlsFea >(
            message_arena);
      new_als_fea_2->CopyFrom(**als_fea_2);
      *als_fea_2 = new_als_fea_2;
    }
}
void UserData::unsafe_arena_set_allocated_als_fea_2(
    ::cosmo::pb::UserData_AlsFea* als_fea_2) {
  if (GetArenaNoVirtual() == NULL) {
    delete als_fea_2_;
  }
  als_fea_2_ = als_fea_2;
  if (als_fea_2) {
    set_has_als_fea_2();
  } else {
    clear_has_als_fea_2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.als_fea_2)
}
void UserData::_slow_mutable_sources_web_stats() {
  sources_web_stats_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SourcesWebStats >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SourcesWebStats* UserData::_slow_release_sources_web_stats() {
  if (sources_web_stats_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SourcesWebStats* temp = new ::cosmo::pb::UserData_SourcesWebStats(*sources_web_stats_);
    sources_web_stats_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SourcesWebStats* UserData::unsafe_arena_release_sources_web_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.sources_web_stats)
  clear_has_sources_web_stats();
  ::cosmo::pb::UserData_SourcesWebStats* temp = sources_web_stats_;
  sources_web_stats_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_sources_web_stats(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SourcesWebStats** sources_web_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*sources_web_stats) == NULL) {
      message_arena->Own(*sources_web_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*sources_web_stats)) {
      ::cosmo::pb::UserData_SourcesWebStats* new_sources_web_stats = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SourcesWebStats >(
            message_arena);
      new_sources_web_stats->CopyFrom(**sources_web_stats);
      *sources_web_stats = new_sources_web_stats;
    }
}
void UserData::unsafe_arena_set_allocated_sources_web_stats(
    ::cosmo::pb::UserData_SourcesWebStats* sources_web_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete sources_web_stats_;
  }
  sources_web_stats_ = sources_web_stats;
  if (sources_web_stats) {
    set_has_sources_web_stats();
  } else {
    clear_has_sources_web_stats();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.sources_web_stats)
}
void UserData::_slow_mutable_sources_reco_stats() {
  sources_reco_stats_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_Stats >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_Stats* UserData::_slow_release_sources_reco_stats() {
  if (sources_reco_stats_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_Stats* temp = new ::cosmo::pb::UserData_Stats(*sources_reco_stats_);
    sources_reco_stats_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_Stats* UserData::unsafe_arena_release_sources_reco_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.sources_reco_stats)
  clear_has_sources_reco_stats();
  ::cosmo::pb::UserData_Stats* temp = sources_reco_stats_;
  sources_reco_stats_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_sources_reco_stats(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_Stats** sources_reco_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*sources_reco_stats) == NULL) {
      message_arena->Own(*sources_reco_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*sources_reco_stats)) {
      ::cosmo::pb::UserData_Stats* new_sources_reco_stats = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_Stats >(
            message_arena);
      new_sources_reco_stats->CopyFrom(**sources_reco_stats);
      *sources_reco_stats = new_sources_reco_stats;
    }
}
void UserData::unsafe_arena_set_allocated_sources_reco_stats(
    ::cosmo::pb::UserData_Stats* sources_reco_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete sources_reco_stats_;
  }
  sources_reco_stats_ = sources_reco_stats;
  if (sources_reco_stats) {
    set_has_sources_reco_stats();
  } else {
    clear_has_sources_reco_stats();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.sources_reco_stats)
}
void UserData::_slow_mutable_user_links() {
  user_links_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserLinks >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserLinks* UserData::_slow_release_user_links() {
  if (user_links_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserLinks* temp = new ::cosmo::pb::UserData_UserLinks(*user_links_);
    user_links_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserLinks* UserData::unsafe_arena_release_user_links() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.user_links)
  clear_has_user_links();
  ::cosmo::pb::UserData_UserLinks* temp = user_links_;
  user_links_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_user_links(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserLinks** user_links) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_links) == NULL) {
      message_arena->Own(*user_links);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_links)) {
      ::cosmo::pb::UserData_UserLinks* new_user_links = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserLinks >(
            message_arena);
      new_user_links->CopyFrom(**user_links);
      *user_links = new_user_links;
    }
}
void UserData::unsafe_arena_set_allocated_user_links(
    ::cosmo::pb::UserData_UserLinks* user_links) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_links_;
  }
  user_links_ = user_links;
  if (user_links) {
    set_has_user_links();
  } else {
    clear_has_user_links();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.user_links)
}
void UserData::_slow_mutable_user_clusters() {
  user_clusters_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserClusters >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserClusters* UserData::_slow_release_user_clusters() {
  if (user_clusters_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserClusters* temp = new ::cosmo::pb::UserData_UserClusters(*user_clusters_);
    user_clusters_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserClusters* UserData::unsafe_arena_release_user_clusters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.user_clusters)
  clear_has_user_clusters();
  ::cosmo::pb::UserData_UserClusters* temp = user_clusters_;
  user_clusters_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_user_clusters(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserClusters** user_clusters) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_clusters) == NULL) {
      message_arena->Own(*user_clusters);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_clusters)) {
      ::cosmo::pb::UserData_UserClusters* new_user_clusters = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserClusters >(
            message_arena);
      new_user_clusters->CopyFrom(**user_clusters);
      *user_clusters = new_user_clusters;
    }
}
void UserData::unsafe_arena_set_allocated_user_clusters(
    ::cosmo::pb::UserData_UserClusters* user_clusters) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_clusters_;
  }
  user_clusters_ = user_clusters;
  if (user_clusters) {
    set_has_user_clusters();
  } else {
    clear_has_user_clusters();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.user_clusters)
}
void UserData::_slow_mutable_similar_sites() {
  similar_sites_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SimilarSites >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SimilarSites* UserData::_slow_release_similar_sites() {
  if (similar_sites_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SimilarSites* temp = new ::cosmo::pb::UserData_SimilarSites(*similar_sites_);
    similar_sites_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SimilarSites* UserData::unsafe_arena_release_similar_sites() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.similar_sites)
  clear_has_similar_sites();
  ::cosmo::pb::UserData_SimilarSites* temp = similar_sites_;
  similar_sites_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_similar_sites(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SimilarSites** similar_sites) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*similar_sites) == NULL) {
      message_arena->Own(*similar_sites);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*similar_sites)) {
      ::cosmo::pb::UserData_SimilarSites* new_similar_sites = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SimilarSites >(
            message_arena);
      new_similar_sites->CopyFrom(**similar_sites);
      *similar_sites = new_similar_sites;
    }
}
void UserData::unsafe_arena_set_allocated_similar_sites(
    ::cosmo::pb::UserData_SimilarSites* similar_sites) {
  if (GetArenaNoVirtual() == NULL) {
    delete similar_sites_;
  }
  similar_sites_ = similar_sites;
  if (similar_sites) {
    set_has_similar_sites();
  } else {
    clear_has_similar_sites();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.similar_sites)
}
void UserData::_slow_mutable_content_themes() {
  content_themes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_ContentThemes >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_ContentThemes* UserData::_slow_release_content_themes() {
  if (content_themes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_ContentThemes* temp = new ::cosmo::pb::UserData_ContentThemes(*content_themes_);
    content_themes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_ContentThemes* UserData::unsafe_arena_release_content_themes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.content_themes)
  clear_has_content_themes();
  ::cosmo::pb::UserData_ContentThemes* temp = content_themes_;
  content_themes_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_content_themes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_ContentThemes** content_themes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*content_themes) == NULL) {
      message_arena->Own(*content_themes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*content_themes)) {
      ::cosmo::pb::UserData_ContentThemes* new_content_themes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_ContentThemes >(
            message_arena);
      new_content_themes->CopyFrom(**content_themes);
      *content_themes = new_content_themes;
    }
}
void UserData::unsafe_arena_set_allocated_content_themes(
    ::cosmo::pb::UserData_ContentThemes* content_themes) {
  if (GetArenaNoVirtual() == NULL) {
    delete content_themes_;
  }
  content_themes_ = content_themes;
  if (content_themes) {
    set_has_content_themes();
  } else {
    clear_has_content_themes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.content_themes)
}
void UserData::_slow_mutable_static_recos_1() {
  static_recos_1_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_StaticRecos >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_StaticRecos* UserData::_slow_release_static_recos_1() {
  if (static_recos_1_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_StaticRecos* temp = new ::cosmo::pb::UserData_StaticRecos(*static_recos_1_);
    static_recos_1_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_StaticRecos* UserData::unsafe_arena_release_static_recos_1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.static_recos_1)
  clear_has_static_recos_1();
  ::cosmo::pb::UserData_StaticRecos* temp = static_recos_1_;
  static_recos_1_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_static_recos_1(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_StaticRecos** static_recos_1) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*static_recos_1) == NULL) {
      message_arena->Own(*static_recos_1);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*static_recos_1)) {
      ::cosmo::pb::UserData_StaticRecos* new_static_recos_1 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_StaticRecos >(
            message_arena);
      new_static_recos_1->CopyFrom(**static_recos_1);
      *static_recos_1 = new_static_recos_1;
    }
}
void UserData::unsafe_arena_set_allocated_static_recos_1(
    ::cosmo::pb::UserData_StaticRecos* static_recos_1) {
  if (GetArenaNoVirtual() == NULL) {
    delete static_recos_1_;
  }
  static_recos_1_ = static_recos_1;
  if (static_recos_1) {
    set_has_static_recos_1();
  } else {
    clear_has_static_recos_1();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.static_recos_1)
}
void UserData::_slow_mutable_static_recos_2() {
  static_recos_2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_StaticRecos >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_StaticRecos* UserData::_slow_release_static_recos_2() {
  if (static_recos_2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_StaticRecos* temp = new ::cosmo::pb::UserData_StaticRecos(*static_recos_2_);
    static_recos_2_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_StaticRecos* UserData::unsafe_arena_release_static_recos_2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.static_recos_2)
  clear_has_static_recos_2();
  ::cosmo::pb::UserData_StaticRecos* temp = static_recos_2_;
  static_recos_2_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_static_recos_2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_StaticRecos** static_recos_2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*static_recos_2) == NULL) {
      message_arena->Own(*static_recos_2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*static_recos_2)) {
      ::cosmo::pb::UserData_StaticRecos* new_static_recos_2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_StaticRecos >(
            message_arena);
      new_static_recos_2->CopyFrom(**static_recos_2);
      *static_recos_2 = new_static_recos_2;
    }
}
void UserData::unsafe_arena_set_allocated_static_recos_2(
    ::cosmo::pb::UserData_StaticRecos* static_recos_2) {
  if (GetArenaNoVirtual() == NULL) {
    delete static_recos_2_;
  }
  static_recos_2_ = static_recos_2;
  if (static_recos_2) {
    set_has_static_recos_2();
  } else {
    clear_has_static_recos_2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.static_recos_2)
}
void UserData::_slow_mutable_sites_for_user() {
  sites_for_user_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SitesForUser* UserData::_slow_release_sites_for_user() {
  if (sites_for_user_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = new ::cosmo::pb::UserData_SitesForUser(*sites_for_user_);
    sites_for_user_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SitesForUser* UserData::unsafe_arena_release_sites_for_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.sites_for_user)
  clear_has_sites_for_user();
  ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user_;
  sites_for_user_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_sites_for_user(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** sites_for_user) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*sites_for_user) == NULL) {
      message_arena->Own(*sites_for_user);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*sites_for_user)) {
      ::cosmo::pb::UserData_SitesForUser* new_sites_for_user = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
            message_arena);
      new_sites_for_user->CopyFrom(**sites_for_user);
      *sites_for_user = new_sites_for_user;
    }
}
void UserData::unsafe_arena_set_allocated_sites_for_user(
    ::cosmo::pb::UserData_SitesForUser* sites_for_user) {
  if (GetArenaNoVirtual() == NULL) {
    delete sites_for_user_;
  }
  sites_for_user_ = sites_for_user;
  if (sites_for_user) {
    set_has_sites_for_user();
  } else {
    clear_has_sites_for_user();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.sites_for_user)
}
void UserData::_slow_mutable_keywords_daily() {
  keywords_daily_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserKeywords >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserKeywords* UserData::_slow_release_keywords_daily() {
  if (keywords_daily_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserKeywords* temp = new ::cosmo::pb::UserData_UserKeywords(*keywords_daily_);
    keywords_daily_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserKeywords* UserData::unsafe_arena_release_keywords_daily() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.keywords_daily)
  clear_has_keywords_daily();
  ::cosmo::pb::UserData_UserKeywords* temp = keywords_daily_;
  keywords_daily_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_keywords_daily(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserKeywords** keywords_daily) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*keywords_daily) == NULL) {
      message_arena->Own(*keywords_daily);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*keywords_daily)) {
      ::cosmo::pb::UserData_UserKeywords* new_keywords_daily = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserKeywords >(
            message_arena);
      new_keywords_daily->CopyFrom(**keywords_daily);
      *keywords_daily = new_keywords_daily;
    }
}
void UserData::unsafe_arena_set_allocated_keywords_daily(
    ::cosmo::pb::UserData_UserKeywords* keywords_daily) {
  if (GetArenaNoVirtual() == NULL) {
    delete keywords_daily_;
  }
  keywords_daily_ = keywords_daily;
  if (keywords_daily) {
    set_has_keywords_daily();
  } else {
    clear_has_keywords_daily();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.keywords_daily)
}
void UserData::_slow_mutable_keywords_monthly() {
  keywords_monthly_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserKeywords >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserKeywords* UserData::_slow_release_keywords_monthly() {
  if (keywords_monthly_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserKeywords* temp = new ::cosmo::pb::UserData_UserKeywords(*keywords_monthly_);
    keywords_monthly_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserKeywords* UserData::unsafe_arena_release_keywords_monthly() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.keywords_monthly)
  clear_has_keywords_monthly();
  ::cosmo::pb::UserData_UserKeywords* temp = keywords_monthly_;
  keywords_monthly_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_keywords_monthly(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserKeywords** keywords_monthly) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*keywords_monthly) == NULL) {
      message_arena->Own(*keywords_monthly);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*keywords_monthly)) {
      ::cosmo::pb::UserData_UserKeywords* new_keywords_monthly = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserKeywords >(
            message_arena);
      new_keywords_monthly->CopyFrom(**keywords_monthly);
      *keywords_monthly = new_keywords_monthly;
    }
}
void UserData::unsafe_arena_set_allocated_keywords_monthly(
    ::cosmo::pb::UserData_UserKeywords* keywords_monthly) {
  if (GetArenaNoVirtual() == NULL) {
    delete keywords_monthly_;
  }
  keywords_monthly_ = keywords_monthly;
  if (keywords_monthly) {
    set_has_keywords_monthly();
  } else {
    clear_has_keywords_monthly();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.keywords_monthly)
}
void UserData::_slow_mutable_sites_for_user1() {
  sites_for_user1_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SitesForUser* UserData::_slow_release_sites_for_user1() {
  if (sites_for_user1_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = new ::cosmo::pb::UserData_SitesForUser(*sites_for_user1_);
    sites_for_user1_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SitesForUser* UserData::unsafe_arena_release_sites_for_user1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.sites_for_user1)
  clear_has_sites_for_user1();
  ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user1_;
  sites_for_user1_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_sites_for_user1(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** sites_for_user1) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*sites_for_user1) == NULL) {
      message_arena->Own(*sites_for_user1);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*sites_for_user1)) {
      ::cosmo::pb::UserData_SitesForUser* new_sites_for_user1 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
            message_arena);
      new_sites_for_user1->CopyFrom(**sites_for_user1);
      *sites_for_user1 = new_sites_for_user1;
    }
}
void UserData::unsafe_arena_set_allocated_sites_for_user1(
    ::cosmo::pb::UserData_SitesForUser* sites_for_user1) {
  if (GetArenaNoVirtual() == NULL) {
    delete sites_for_user1_;
  }
  sites_for_user1_ = sites_for_user1;
  if (sites_for_user1) {
    set_has_sites_for_user1();
  } else {
    clear_has_sites_for_user1();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.sites_for_user1)
}
void UserData::_slow_mutable_sites_for_user2() {
  sites_for_user2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SitesForUser* UserData::_slow_release_sites_for_user2() {
  if (sites_for_user2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = new ::cosmo::pb::UserData_SitesForUser(*sites_for_user2_);
    sites_for_user2_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SitesForUser* UserData::unsafe_arena_release_sites_for_user2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.sites_for_user2)
  clear_has_sites_for_user2();
  ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user2_;
  sites_for_user2_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_sites_for_user2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** sites_for_user2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*sites_for_user2) == NULL) {
      message_arena->Own(*sites_for_user2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*sites_for_user2)) {
      ::cosmo::pb::UserData_SitesForUser* new_sites_for_user2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
            message_arena);
      new_sites_for_user2->CopyFrom(**sites_for_user2);
      *sites_for_user2 = new_sites_for_user2;
    }
}
void UserData::unsafe_arena_set_allocated_sites_for_user2(
    ::cosmo::pb::UserData_SitesForUser* sites_for_user2) {
  if (GetArenaNoVirtual() == NULL) {
    delete sites_for_user2_;
  }
  sites_for_user2_ = sites_for_user2;
  if (sites_for_user2) {
    set_has_sites_for_user2();
  } else {
    clear_has_sites_for_user2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.sites_for_user2)
}
void UserData::_slow_mutable_visited_docs() {
  visited_docs_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_VisitedDocs >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_VisitedDocs* UserData::_slow_release_visited_docs() {
  if (visited_docs_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_VisitedDocs* temp = new ::cosmo::pb::UserData_VisitedDocs(*visited_docs_);
    visited_docs_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_VisitedDocs* UserData::unsafe_arena_release_visited_docs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.visited_docs)
  clear_has_visited_docs();
  ::cosmo::pb::UserData_VisitedDocs* temp = visited_docs_;
  visited_docs_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_visited_docs(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_VisitedDocs** visited_docs) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*visited_docs) == NULL) {
      message_arena->Own(*visited_docs);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*visited_docs)) {
      ::cosmo::pb::UserData_VisitedDocs* new_visited_docs = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_VisitedDocs >(
            message_arena);
      new_visited_docs->CopyFrom(**visited_docs);
      *visited_docs = new_visited_docs;
    }
}
void UserData::unsafe_arena_set_allocated_visited_docs(
    ::cosmo::pb::UserData_VisitedDocs* visited_docs) {
  if (GetArenaNoVirtual() == NULL) {
    delete visited_docs_;
  }
  visited_docs_ = visited_docs;
  if (visited_docs) {
    set_has_visited_docs();
  } else {
    clear_has_visited_docs();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.visited_docs)
}
void UserData::_slow_mutable_sites_for_user3() {
  sites_for_user3_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SitesForUser* UserData::_slow_release_sites_for_user3() {
  if (sites_for_user3_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = new ::cosmo::pb::UserData_SitesForUser(*sites_for_user3_);
    sites_for_user3_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SitesForUser* UserData::unsafe_arena_release_sites_for_user3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.sites_for_user3)
  clear_has_sites_for_user3();
  ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user3_;
  sites_for_user3_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_sites_for_user3(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** sites_for_user3) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*sites_for_user3) == NULL) {
      message_arena->Own(*sites_for_user3);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*sites_for_user3)) {
      ::cosmo::pb::UserData_SitesForUser* new_sites_for_user3 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
            message_arena);
      new_sites_for_user3->CopyFrom(**sites_for_user3);
      *sites_for_user3 = new_sites_for_user3;
    }
}
void UserData::unsafe_arena_set_allocated_sites_for_user3(
    ::cosmo::pb::UserData_SitesForUser* sites_for_user3) {
  if (GetArenaNoVirtual() == NULL) {
    delete sites_for_user3_;
  }
  sites_for_user3_ = sites_for_user3;
  if (sites_for_user3) {
    set_has_sites_for_user3();
  } else {
    clear_has_sites_for_user3();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.sites_for_user3)
}
void UserData::_slow_mutable_logs_visited_docs() {
  logs_visited_docs_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_LogsVisitedDocs >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_LogsVisitedDocs* UserData::_slow_release_logs_visited_docs() {
  if (logs_visited_docs_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_LogsVisitedDocs* temp = new ::cosmo::pb::UserData_LogsVisitedDocs(*logs_visited_docs_);
    logs_visited_docs_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_LogsVisitedDocs* UserData::unsafe_arena_release_logs_visited_docs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.logs_visited_docs)
  clear_has_logs_visited_docs();
  ::cosmo::pb::UserData_LogsVisitedDocs* temp = logs_visited_docs_;
  logs_visited_docs_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_logs_visited_docs(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_LogsVisitedDocs** logs_visited_docs) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*logs_visited_docs) == NULL) {
      message_arena->Own(*logs_visited_docs);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*logs_visited_docs)) {
      ::cosmo::pb::UserData_LogsVisitedDocs* new_logs_visited_docs = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_LogsVisitedDocs >(
            message_arena);
      new_logs_visited_docs->CopyFrom(**logs_visited_docs);
      *logs_visited_docs = new_logs_visited_docs;
    }
}
void UserData::unsafe_arena_set_allocated_logs_visited_docs(
    ::cosmo::pb::UserData_LogsVisitedDocs* logs_visited_docs) {
  if (GetArenaNoVirtual() == NULL) {
    delete logs_visited_docs_;
  }
  logs_visited_docs_ = logs_visited_docs;
  if (logs_visited_docs) {
    set_has_logs_visited_docs();
  } else {
    clear_has_logs_visited_docs();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.logs_visited_docs)
}
void UserData::_slow_mutable_sites_for_user4() {
  sites_for_user4_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SitesForUser* UserData::_slow_release_sites_for_user4() {
  if (sites_for_user4_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = new ::cosmo::pb::UserData_SitesForUser(*sites_for_user4_);
    sites_for_user4_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SitesForUser* UserData::unsafe_arena_release_sites_for_user4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.sites_for_user4)
  clear_has_sites_for_user4();
  ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user4_;
  sites_for_user4_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_sites_for_user4(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** sites_for_user4) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*sites_for_user4) == NULL) {
      message_arena->Own(*sites_for_user4);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*sites_for_user4)) {
      ::cosmo::pb::UserData_SitesForUser* new_sites_for_user4 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
            message_arena);
      new_sites_for_user4->CopyFrom(**sites_for_user4);
      *sites_for_user4 = new_sites_for_user4;
    }
}
void UserData::unsafe_arena_set_allocated_sites_for_user4(
    ::cosmo::pb::UserData_SitesForUser* sites_for_user4) {
  if (GetArenaNoVirtual() == NULL) {
    delete sites_for_user4_;
  }
  sites_for_user4_ = sites_for_user4;
  if (sites_for_user4) {
    set_has_sites_for_user4();
  } else {
    clear_has_sites_for_user4();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.sites_for_user4)
}
void UserData::_slow_mutable_user_themes() {
  user_themes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserThemesEvents* UserData::_slow_release_user_themes() {
  if (user_themes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserThemesEvents* temp = new ::cosmo::pb::UserData_UserThemesEvents(*user_themes_);
    user_themes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserThemesEvents* UserData::unsafe_arena_release_user_themes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.user_themes)
  clear_has_user_themes();
  ::cosmo::pb::UserData_UserThemesEvents* temp = user_themes_;
  user_themes_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_user_themes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents** user_themes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_themes) == NULL) {
      message_arena->Own(*user_themes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_themes)) {
      ::cosmo::pb::UserData_UserThemesEvents* new_user_themes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserThemesEvents >(
            message_arena);
      new_user_themes->CopyFrom(**user_themes);
      *user_themes = new_user_themes;
    }
}
void UserData::unsafe_arena_set_allocated_user_themes(
    ::cosmo::pb::UserData_UserThemesEvents* user_themes) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_themes_;
  }
  user_themes_ = user_themes;
  if (user_themes) {
    set_has_user_themes();
  } else {
    clear_has_user_themes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.user_themes)
}
void UserData::_slow_mutable_user_dislikes() {
  user_dislikes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserEvents >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserEvents* UserData::_slow_release_user_dislikes() {
  if (user_dislikes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = new ::cosmo::pb::UserData_UserEvents(*user_dislikes_);
    user_dislikes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserEvents* UserData::unsafe_arena_release_user_dislikes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.user_dislikes)
  clear_has_user_dislikes();
  ::cosmo::pb::UserData_UserEvents* temp = user_dislikes_;
  user_dislikes_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_user_dislikes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserEvents** user_dislikes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_dislikes) == NULL) {
      message_arena->Own(*user_dislikes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_dislikes)) {
      ::cosmo::pb::UserData_UserEvents* new_user_dislikes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserEvents >(
            message_arena);
      new_user_dislikes->CopyFrom(**user_dislikes);
      *user_dislikes = new_user_dislikes;
    }
}
void UserData::unsafe_arena_set_allocated_user_dislikes(
    ::cosmo::pb::UserData_UserEvents* user_dislikes) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_dislikes_;
  }
  user_dislikes_ = user_dislikes;
  if (user_dislikes) {
    set_has_user_dislikes();
  } else {
    clear_has_user_dislikes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.user_dislikes)
}
void UserData::_slow_mutable_user_videos() {
  user_videos_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideos >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideos* UserData::_slow_release_user_videos() {
  if (user_videos_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideos* temp = new ::cosmo::pb::UserData_UserVideos(*user_videos_);
    user_videos_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideos* UserData::unsafe_arena_release_user_videos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.user_videos)
  clear_has_user_videos();
  ::cosmo::pb::UserData_UserVideos* temp = user_videos_;
  user_videos_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_user_videos(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideos** user_videos) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_videos) == NULL) {
      message_arena->Own(*user_videos);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_videos)) {
      ::cosmo::pb::UserData_UserVideos* new_user_videos = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideos >(
            message_arena);
      new_user_videos->CopyFrom(**user_videos);
      *user_videos = new_user_videos;
    }
}
void UserData::unsafe_arena_set_allocated_user_videos(
    ::cosmo::pb::UserData_UserVideos* user_videos) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_videos_;
  }
  user_videos_ = user_videos;
  if (user_videos) {
    set_has_user_videos();
  } else {
    clear_has_user_videos();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.user_videos)
}
void UserData::_slow_mutable_user_video_events() {
  user_video_events_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserVideoEvents* UserData::_slow_release_user_video_events() {
  if (user_video_events_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserVideoEvents* temp = new ::cosmo::pb::UserData_UserVideoEvents(*user_video_events_);
    user_video_events_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserVideoEvents* UserData::unsafe_arena_release_user_video_events() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.user_video_events)
  clear_has_user_video_events();
  ::cosmo::pb::UserData_UserVideoEvents* temp = user_video_events_;
  user_video_events_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_user_video_events(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents** user_video_events) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_video_events) == NULL) {
      message_arena->Own(*user_video_events);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_video_events)) {
      ::cosmo::pb::UserData_UserVideoEvents* new_user_video_events = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserVideoEvents >(
            message_arena);
      new_user_video_events->CopyFrom(**user_video_events);
      *user_video_events = new_user_video_events;
    }
}
void UserData::unsafe_arena_set_allocated_user_video_events(
    ::cosmo::pb::UserData_UserVideoEvents* user_video_events) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_video_events_;
  }
  user_video_events_ = user_video_events;
  if (user_video_events) {
    set_has_user_video_events();
  } else {
    clear_has_user_video_events();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.user_video_events)
}
void UserData::_slow_mutable_user_music() {
  user_music_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserMusic >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserMusic* UserData::_slow_release_user_music() {
  if (user_music_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserMusic* temp = new ::cosmo::pb::UserData_UserMusic(*user_music_);
    user_music_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserMusic* UserData::unsafe_arena_release_user_music() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.user_music)
  clear_has_user_music();
  ::cosmo::pb::UserData_UserMusic* temp = user_music_;
  user_music_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_user_music(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserMusic** user_music) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_music) == NULL) {
      message_arena->Own(*user_music);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_music)) {
      ::cosmo::pb::UserData_UserMusic* new_user_music = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserMusic >(
            message_arena);
      new_user_music->CopyFrom(**user_music);
      *user_music = new_user_music;
    }
}
void UserData::unsafe_arena_set_allocated_user_music(
    ::cosmo::pb::UserData_UserMusic* user_music) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_music_;
  }
  user_music_ = user_music;
  if (user_music) {
    set_has_user_music();
  } else {
    clear_has_user_music();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.user_music)
}
void UserData::_slow_mutable_recostream_categories_subscriptions() {
  recostream_categories_subscriptions_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::_slow_release_recostream_categories_subscriptions() {
  if (recostream_categories_subscriptions_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = new ::cosmo::pb::UserData_SubscriptionInfo(*recostream_categories_subscriptions_);
    recostream_categories_subscriptions_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::unsafe_arena_release_recostream_categories_subscriptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.recostream_categories_subscriptions)
  clear_has_recostream_categories_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* temp = recostream_categories_subscriptions_;
  recostream_categories_subscriptions_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_recostream_categories_subscriptions(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** recostream_categories_subscriptions) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*recostream_categories_subscriptions) == NULL) {
      message_arena->Own(*recostream_categories_subscriptions);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*recostream_categories_subscriptions)) {
      ::cosmo::pb::UserData_SubscriptionInfo* new_recostream_categories_subscriptions = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
            message_arena);
      new_recostream_categories_subscriptions->CopyFrom(**recostream_categories_subscriptions);
      *recostream_categories_subscriptions = new_recostream_categories_subscriptions;
    }
}
void UserData::unsafe_arena_set_allocated_recostream_categories_subscriptions(
    ::cosmo::pb::UserData_SubscriptionInfo* recostream_categories_subscriptions) {
  if (GetArenaNoVirtual() == NULL) {
    delete recostream_categories_subscriptions_;
  }
  recostream_categories_subscriptions_ = recostream_categories_subscriptions;
  if (recostream_categories_subscriptions) {
    set_has_recostream_categories_subscriptions();
  } else {
    clear_has_recostream_categories_subscriptions();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.recostream_categories_subscriptions)
}
void UserData::_slow_mutable_recostream_domains_subscriptions() {
  recostream_domains_subscriptions_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::_slow_release_recostream_domains_subscriptions() {
  if (recostream_domains_subscriptions_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = new ::cosmo::pb::UserData_SubscriptionInfo(*recostream_domains_subscriptions_);
    recostream_domains_subscriptions_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::unsafe_arena_release_recostream_domains_subscriptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.recostream_domains_subscriptions)
  clear_has_recostream_domains_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* temp = recostream_domains_subscriptions_;
  recostream_domains_subscriptions_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_recostream_domains_subscriptions(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** recostream_domains_subscriptions) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*recostream_domains_subscriptions) == NULL) {
      message_arena->Own(*recostream_domains_subscriptions);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*recostream_domains_subscriptions)) {
      ::cosmo::pb::UserData_SubscriptionInfo* new_recostream_domains_subscriptions = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
            message_arena);
      new_recostream_domains_subscriptions->CopyFrom(**recostream_domains_subscriptions);
      *recostream_domains_subscriptions = new_recostream_domains_subscriptions;
    }
}
void UserData::unsafe_arena_set_allocated_recostream_domains_subscriptions(
    ::cosmo::pb::UserData_SubscriptionInfo* recostream_domains_subscriptions) {
  if (GetArenaNoVirtual() == NULL) {
    delete recostream_domains_subscriptions_;
  }
  recostream_domains_subscriptions_ = recostream_domains_subscriptions;
  if (recostream_domains_subscriptions) {
    set_has_recostream_domains_subscriptions();
  } else {
    clear_has_recostream_domains_subscriptions();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.recostream_domains_subscriptions)
}
void UserData::_slow_mutable_kafka_categories_subscriptions() {
  kafka_categories_subscriptions_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::_slow_release_kafka_categories_subscriptions() {
  if (kafka_categories_subscriptions_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = new ::cosmo::pb::UserData_SubscriptionInfo(*kafka_categories_subscriptions_);
    kafka_categories_subscriptions_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::unsafe_arena_release_kafka_categories_subscriptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.kafka_categories_subscriptions)
  clear_has_kafka_categories_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* temp = kafka_categories_subscriptions_;
  kafka_categories_subscriptions_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_kafka_categories_subscriptions(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** kafka_categories_subscriptions) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*kafka_categories_subscriptions) == NULL) {
      message_arena->Own(*kafka_categories_subscriptions);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*kafka_categories_subscriptions)) {
      ::cosmo::pb::UserData_SubscriptionInfo* new_kafka_categories_subscriptions = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
            message_arena);
      new_kafka_categories_subscriptions->CopyFrom(**kafka_categories_subscriptions);
      *kafka_categories_subscriptions = new_kafka_categories_subscriptions;
    }
}
void UserData::unsafe_arena_set_allocated_kafka_categories_subscriptions(
    ::cosmo::pb::UserData_SubscriptionInfo* kafka_categories_subscriptions) {
  if (GetArenaNoVirtual() == NULL) {
    delete kafka_categories_subscriptions_;
  }
  kafka_categories_subscriptions_ = kafka_categories_subscriptions;
  if (kafka_categories_subscriptions) {
    set_has_kafka_categories_subscriptions();
  } else {
    clear_has_kafka_categories_subscriptions();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.kafka_categories_subscriptions)
}
void UserData::_slow_mutable_kafka_domains_subscriptions() {
  kafka_domains_subscriptions_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::_slow_release_kafka_domains_subscriptions() {
  if (kafka_domains_subscriptions_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = new ::cosmo::pb::UserData_SubscriptionInfo(*kafka_domains_subscriptions_);
    kafka_domains_subscriptions_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::unsafe_arena_release_kafka_domains_subscriptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.kafka_domains_subscriptions)
  clear_has_kafka_domains_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* temp = kafka_domains_subscriptions_;
  kafka_domains_subscriptions_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_kafka_domains_subscriptions(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** kafka_domains_subscriptions) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*kafka_domains_subscriptions) == NULL) {
      message_arena->Own(*kafka_domains_subscriptions);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*kafka_domains_subscriptions)) {
      ::cosmo::pb::UserData_SubscriptionInfo* new_kafka_domains_subscriptions = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
            message_arena);
      new_kafka_domains_subscriptions->CopyFrom(**kafka_domains_subscriptions);
      *kafka_domains_subscriptions = new_kafka_domains_subscriptions;
    }
}
void UserData::unsafe_arena_set_allocated_kafka_domains_subscriptions(
    ::cosmo::pb::UserData_SubscriptionInfo* kafka_domains_subscriptions) {
  if (GetArenaNoVirtual() == NULL) {
    delete kafka_domains_subscriptions_;
  }
  kafka_domains_subscriptions_ = kafka_domains_subscriptions;
  if (kafka_domains_subscriptions) {
    set_has_kafka_domains_subscriptions();
  } else {
    clear_has_kafka_domains_subscriptions();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.kafka_domains_subscriptions)
}
void UserData::_slow_mutable_recostream_sources_subscriptions() {
  recostream_sources_subscriptions_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::_slow_release_recostream_sources_subscriptions() {
  if (recostream_sources_subscriptions_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = new ::cosmo::pb::UserData_SubscriptionInfo(*recostream_sources_subscriptions_);
    recostream_sources_subscriptions_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::unsafe_arena_release_recostream_sources_subscriptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.recostream_sources_subscriptions)
  clear_has_recostream_sources_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* temp = recostream_sources_subscriptions_;
  recostream_sources_subscriptions_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_recostream_sources_subscriptions(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** recostream_sources_subscriptions) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*recostream_sources_subscriptions) == NULL) {
      message_arena->Own(*recostream_sources_subscriptions);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*recostream_sources_subscriptions)) {
      ::cosmo::pb::UserData_SubscriptionInfo* new_recostream_sources_subscriptions = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
            message_arena);
      new_recostream_sources_subscriptions->CopyFrom(**recostream_sources_subscriptions);
      *recostream_sources_subscriptions = new_recostream_sources_subscriptions;
    }
}
void UserData::unsafe_arena_set_allocated_recostream_sources_subscriptions(
    ::cosmo::pb::UserData_SubscriptionInfo* recostream_sources_subscriptions) {
  if (GetArenaNoVirtual() == NULL) {
    delete recostream_sources_subscriptions_;
  }
  recostream_sources_subscriptions_ = recostream_sources_subscriptions;
  if (recostream_sources_subscriptions) {
    set_has_recostream_sources_subscriptions();
  } else {
    clear_has_recostream_sources_subscriptions();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.recostream_sources_subscriptions)
}
void UserData::_slow_mutable_recostream_dislikes() {
  recostream_dislikes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserEvents >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserEvents* UserData::_slow_release_recostream_dislikes() {
  if (recostream_dislikes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = new ::cosmo::pb::UserData_UserEvents(*recostream_dislikes_);
    recostream_dislikes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserEvents* UserData::unsafe_arena_release_recostream_dislikes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.recostream_dislikes)
  clear_has_recostream_dislikes();
  ::cosmo::pb::UserData_UserEvents* temp = recostream_dislikes_;
  recostream_dislikes_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_recostream_dislikes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserEvents** recostream_dislikes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*recostream_dislikes) == NULL) {
      message_arena->Own(*recostream_dislikes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*recostream_dislikes)) {
      ::cosmo::pb::UserData_UserEvents* new_recostream_dislikes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserEvents >(
            message_arena);
      new_recostream_dislikes->CopyFrom(**recostream_dislikes);
      *recostream_dislikes = new_recostream_dislikes;
    }
}
void UserData::unsafe_arena_set_allocated_recostream_dislikes(
    ::cosmo::pb::UserData_UserEvents* recostream_dislikes) {
  if (GetArenaNoVirtual() == NULL) {
    delete recostream_dislikes_;
  }
  recostream_dislikes_ = recostream_dislikes;
  if (recostream_dislikes) {
    set_has_recostream_dislikes();
  } else {
    clear_has_recostream_dislikes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.recostream_dislikes)
}
void UserData::_slow_mutable_vk_groups_for_user() {
  vk_groups_for_user_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_VkGroupsForUser >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_VkGroupsForUser* UserData::_slow_release_vk_groups_for_user() {
  if (vk_groups_for_user_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_VkGroupsForUser* temp = new ::cosmo::pb::UserData_VkGroupsForUser(*vk_groups_for_user_);
    vk_groups_for_user_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_VkGroupsForUser* UserData::unsafe_arena_release_vk_groups_for_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.vk_groups_for_user)
  clear_has_vk_groups_for_user();
  ::cosmo::pb::UserData_VkGroupsForUser* temp = vk_groups_for_user_;
  vk_groups_for_user_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_vk_groups_for_user(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_VkGroupsForUser** vk_groups_for_user) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*vk_groups_for_user) == NULL) {
      message_arena->Own(*vk_groups_for_user);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*vk_groups_for_user)) {
      ::cosmo::pb::UserData_VkGroupsForUser* new_vk_groups_for_user = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_VkGroupsForUser >(
            message_arena);
      new_vk_groups_for_user->CopyFrom(**vk_groups_for_user);
      *vk_groups_for_user = new_vk_groups_for_user;
    }
}
void UserData::unsafe_arena_set_allocated_vk_groups_for_user(
    ::cosmo::pb::UserData_VkGroupsForUser* vk_groups_for_user) {
  if (GetArenaNoVirtual() == NULL) {
    delete vk_groups_for_user_;
  }
  vk_groups_for_user_ = vk_groups_for_user;
  if (vk_groups_for_user) {
    set_has_vk_groups_for_user();
  } else {
    clear_has_vk_groups_for_user();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.vk_groups_for_user)
}
void UserData::_slow_mutable_logs_visited_sources() {
  logs_visited_sources_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_LogsVisitedSources >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_LogsVisitedSources* UserData::_slow_release_logs_visited_sources() {
  if (logs_visited_sources_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_LogsVisitedSources* temp = new ::cosmo::pb::UserData_LogsVisitedSources(*logs_visited_sources_);
    logs_visited_sources_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_LogsVisitedSources* UserData::unsafe_arena_release_logs_visited_sources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.logs_visited_sources)
  clear_has_logs_visited_sources();
  ::cosmo::pb::UserData_LogsVisitedSources* temp = logs_visited_sources_;
  logs_visited_sources_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_logs_visited_sources(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_LogsVisitedSources** logs_visited_sources) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*logs_visited_sources) == NULL) {
      message_arena->Own(*logs_visited_sources);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*logs_visited_sources)) {
      ::cosmo::pb::UserData_LogsVisitedSources* new_logs_visited_sources = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_LogsVisitedSources >(
            message_arena);
      new_logs_visited_sources->CopyFrom(**logs_visited_sources);
      *logs_visited_sources = new_logs_visited_sources;
    }
}
void UserData::unsafe_arena_set_allocated_logs_visited_sources(
    ::cosmo::pb::UserData_LogsVisitedSources* logs_visited_sources) {
  if (GetArenaNoVirtual() == NULL) {
    delete logs_visited_sources_;
  }
  logs_visited_sources_ = logs_visited_sources;
  if (logs_visited_sources) {
    set_has_logs_visited_sources();
  } else {
    clear_has_logs_visited_sources();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.logs_visited_sources)
}
void UserData::_slow_mutable_kafka_sources_subscriptions() {
  kafka_sources_subscriptions_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::_slow_release_kafka_sources_subscriptions() {
  if (kafka_sources_subscriptions_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = new ::cosmo::pb::UserData_SubscriptionInfo(*kafka_sources_subscriptions_);
    kafka_sources_subscriptions_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::unsafe_arena_release_kafka_sources_subscriptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.kafka_sources_subscriptions)
  clear_has_kafka_sources_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* temp = kafka_sources_subscriptions_;
  kafka_sources_subscriptions_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_kafka_sources_subscriptions(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** kafka_sources_subscriptions) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*kafka_sources_subscriptions) == NULL) {
      message_arena->Own(*kafka_sources_subscriptions);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*kafka_sources_subscriptions)) {
      ::cosmo::pb::UserData_SubscriptionInfo* new_kafka_sources_subscriptions = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SubscriptionInfo >(
            message_arena);
      new_kafka_sources_subscriptions->CopyFrom(**kafka_sources_subscriptions);
      *kafka_sources_subscriptions = new_kafka_sources_subscriptions;
    }
}
void UserData::unsafe_arena_set_allocated_kafka_sources_subscriptions(
    ::cosmo::pb::UserData_SubscriptionInfo* kafka_sources_subscriptions) {
  if (GetArenaNoVirtual() == NULL) {
    delete kafka_sources_subscriptions_;
  }
  kafka_sources_subscriptions_ = kafka_sources_subscriptions;
  if (kafka_sources_subscriptions) {
    set_has_kafka_sources_subscriptions();
  } else {
    clear_has_kafka_sources_subscriptions();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.kafka_sources_subscriptions)
}
void UserData::_slow_mutable_recostream_likes() {
  recostream_likes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserEvents >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserEvents* UserData::_slow_release_recostream_likes() {
  if (recostream_likes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = new ::cosmo::pb::UserData_UserEvents(*recostream_likes_);
    recostream_likes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserEvents* UserData::unsafe_arena_release_recostream_likes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.recostream_likes)
  clear_has_recostream_likes();
  ::cosmo::pb::UserData_UserEvents* temp = recostream_likes_;
  recostream_likes_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_recostream_likes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserEvents** recostream_likes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*recostream_likes) == NULL) {
      message_arena->Own(*recostream_likes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*recostream_likes)) {
      ::cosmo::pb::UserData_UserEvents* new_recostream_likes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserEvents >(
            message_arena);
      new_recostream_likes->CopyFrom(**recostream_likes);
      *recostream_likes = new_recostream_likes;
    }
}
void UserData::unsafe_arena_set_allocated_recostream_likes(
    ::cosmo::pb::UserData_UserEvents* recostream_likes) {
  if (GetArenaNoVirtual() == NULL) {
    delete recostream_likes_;
  }
  recostream_likes_ = recostream_likes;
  if (recostream_likes) {
    set_has_recostream_likes();
  } else {
    clear_has_recostream_likes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.recostream_likes)
}
void UserData::_slow_mutable_user_likes() {
  user_likes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserEvents >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserEvents* UserData::_slow_release_user_likes() {
  if (user_likes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = new ::cosmo::pb::UserData_UserEvents(*user_likes_);
    user_likes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserEvents* UserData::unsafe_arena_release_user_likes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.user_likes)
  clear_has_user_likes();
  ::cosmo::pb::UserData_UserEvents* temp = user_likes_;
  user_likes_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_user_likes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserEvents** user_likes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_likes) == NULL) {
      message_arena->Own(*user_likes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_likes)) {
      ::cosmo::pb::UserData_UserEvents* new_user_likes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserEvents >(
            message_arena);
      new_user_likes->CopyFrom(**user_likes);
      *user_likes = new_user_likes;
    }
}
void UserData::unsafe_arena_set_allocated_user_likes(
    ::cosmo::pb::UserData_UserEvents* user_likes) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_likes_;
  }
  user_likes_ = user_likes;
  if (user_likes) {
    set_has_user_likes();
  } else {
    clear_has_user_likes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.user_likes)
}
void UserData::_slow_mutable_user_sources_events() {
  user_sources_events_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserSourcesEvents >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserSourcesEvents* UserData::_slow_release_user_sources_events() {
  if (user_sources_events_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserSourcesEvents* temp = new ::cosmo::pb::UserData_UserSourcesEvents(*user_sources_events_);
    user_sources_events_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserSourcesEvents* UserData::unsafe_arena_release_user_sources_events() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.user_sources_events)
  clear_has_user_sources_events();
  ::cosmo::pb::UserData_UserSourcesEvents* temp = user_sources_events_;
  user_sources_events_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_user_sources_events(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserSourcesEvents** user_sources_events) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_sources_events) == NULL) {
      message_arena->Own(*user_sources_events);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_sources_events)) {
      ::cosmo::pb::UserData_UserSourcesEvents* new_user_sources_events = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserSourcesEvents >(
            message_arena);
      new_user_sources_events->CopyFrom(**user_sources_events);
      *user_sources_events = new_user_sources_events;
    }
}
void UserData::unsafe_arena_set_allocated_user_sources_events(
    ::cosmo::pb::UserData_UserSourcesEvents* user_sources_events) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_sources_events_;
  }
  user_sources_events_ = user_sources_events;
  if (user_sources_events) {
    set_has_user_sources_events();
  } else {
    clear_has_user_sources_events();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.user_sources_events)
}
void UserData::_slow_mutable_narrow_sites() {
  narrow_sites_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SitesForUser* UserData::_slow_release_narrow_sites() {
  if (narrow_sites_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = new ::cosmo::pb::UserData_SitesForUser(*narrow_sites_);
    narrow_sites_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SitesForUser* UserData::unsafe_arena_release_narrow_sites() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.narrow_sites)
  clear_has_narrow_sites();
  ::cosmo::pb::UserData_SitesForUser* temp = narrow_sites_;
  narrow_sites_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_narrow_sites(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** narrow_sites) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*narrow_sites) == NULL) {
      message_arena->Own(*narrow_sites);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*narrow_sites)) {
      ::cosmo::pb::UserData_SitesForUser* new_narrow_sites = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
            message_arena);
      new_narrow_sites->CopyFrom(**narrow_sites);
      *narrow_sites = new_narrow_sites;
    }
}
void UserData::unsafe_arena_set_allocated_narrow_sites(
    ::cosmo::pb::UserData_SitesForUser* narrow_sites) {
  if (GetArenaNoVirtual() == NULL) {
    delete narrow_sites_;
  }
  narrow_sites_ = narrow_sites;
  if (narrow_sites) {
    set_has_narrow_sites();
  } else {
    clear_has_narrow_sites();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.narrow_sites)
}
void UserData::_slow_mutable_narrow_sites1() {
  narrow_sites1_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_SitesForUser* UserData::_slow_release_narrow_sites1() {
  if (narrow_sites1_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = new ::cosmo::pb::UserData_SitesForUser(*narrow_sites1_);
    narrow_sites1_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_SitesForUser* UserData::unsafe_arena_release_narrow_sites1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.narrow_sites1)
  clear_has_narrow_sites1();
  ::cosmo::pb::UserData_SitesForUser* temp = narrow_sites1_;
  narrow_sites1_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_narrow_sites1(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** narrow_sites1) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*narrow_sites1) == NULL) {
      message_arena->Own(*narrow_sites1);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*narrow_sites1)) {
      ::cosmo::pb::UserData_SitesForUser* new_narrow_sites1 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_SitesForUser >(
            message_arena);
      new_narrow_sites1->CopyFrom(**narrow_sites1);
      *narrow_sites1 = new_narrow_sites1;
    }
}
void UserData::unsafe_arena_set_allocated_narrow_sites1(
    ::cosmo::pb::UserData_SitesForUser* narrow_sites1) {
  if (GetArenaNoVirtual() == NULL) {
    delete narrow_sites1_;
  }
  narrow_sites1_ = narrow_sites1;
  if (narrow_sites1) {
    set_has_narrow_sites1();
  } else {
    clear_has_narrow_sites1();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.narrow_sites1)
}
void UserData::_slow_mutable_reactions() {
  reactions_ = ::google::protobuf::Arena::Create< ::cosmo::pb::PackedReactionsArr >(
      GetArenaNoVirtual());
}
::cosmo::pb::PackedReactionsArr* UserData::_slow_release_reactions() {
  if (reactions_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::PackedReactionsArr* temp = new ::cosmo::pb::PackedReactionsArr(*reactions_);
    reactions_ = NULL;
    return temp;
  }
}
::cosmo::pb::PackedReactionsArr* UserData::unsafe_arena_release_reactions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.reactions)
  clear_has_reactions();
  ::cosmo::pb::PackedReactionsArr* temp = reactions_;
  reactions_ = NULL;
  return temp;
}
void UserData::unsafe_arena_set_allocated_reactions(
    ::cosmo::pb::PackedReactionsArr* reactions) {
  if (GetArenaNoVirtual() == NULL) {
    delete reactions_;
  }
  reactions_ = reactions;
  if (reactions) {
    set_has_reactions();
  } else {
    clear_has_reactions();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.reactions)
}
void UserData::_slow_mutable_shows() {
  shows_ = ::google::protobuf::Arena::Create< ::cosmo::pb::ShowsArr >(
      GetArenaNoVirtual());
}
::cosmo::pb::ShowsArr* UserData::_slow_release_shows() {
  if (shows_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::ShowsArr* temp = new ::cosmo::pb::ShowsArr(*shows_);
    shows_ = NULL;
    return temp;
  }
}
::cosmo::pb::ShowsArr* UserData::unsafe_arena_release_shows() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.shows)
  clear_has_shows();
  ::cosmo::pb::ShowsArr* temp = shows_;
  shows_ = NULL;
  return temp;
}
void UserData::unsafe_arena_set_allocated_shows(
    ::cosmo::pb::ShowsArr* shows) {
  if (GetArenaNoVirtual() == NULL) {
    delete shows_;
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.shows)
}
void UserData::_slow_mutable_i2i_user_themes() {
  i2i_user_themes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData_UserI2IEvents* UserData::_slow_release_i2i_user_themes() {
  if (i2i_user_themes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData_UserI2IEvents* temp = new ::cosmo::pb::UserData_UserI2IEvents(*i2i_user_themes_);
    i2i_user_themes_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData_UserI2IEvents* UserData::unsafe_arena_release_i2i_user_themes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.i2i_user_themes)
  clear_has_i2i_user_themes();
  ::cosmo::pb::UserData_UserI2IEvents* temp = i2i_user_themes_;
  i2i_user_themes_ = NULL;
  return temp;
}
void UserData::_slow_set_allocated_i2i_user_themes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents** i2i_user_themes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*i2i_user_themes) == NULL) {
      message_arena->Own(*i2i_user_themes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*i2i_user_themes)) {
      ::cosmo::pb::UserData_UserI2IEvents* new_i2i_user_themes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData_UserI2IEvents >(
            message_arena);
      new_i2i_user_themes->CopyFrom(**i2i_user_themes);
      *i2i_user_themes = new_i2i_user_themes;
    }
}
void UserData::unsafe_arena_set_allocated_i2i_user_themes(
    ::cosmo::pb::UserData_UserI2IEvents* i2i_user_themes) {
  if (GetArenaNoVirtual() == NULL) {
    delete i2i_user_themes_;
  }
  i2i_user_themes_ = i2i_user_themes;
  if (i2i_user_themes) {
    set_has_i2i_user_themes();
  } else {
    clear_has_i2i_user_themes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.i2i_user_themes)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserData::kUserIdFieldNumber;
const int UserData::kSocdemFeaFieldNumber;
const int UserData::kAlsFeaFieldNumber;
const int UserData::kOkInfoFieldNumber;
const int UserData::kDetiRecoFieldNumber;
const int UserData::kAlsItemsFeaFieldNumber;
const int UserData::kNewsSourcesFieldNumber;
const int UserData::kStatsFieldNumber;
const int UserData::kOriginalInfoFieldNumber;
const int UserData::kAlsFea2FieldNumber;
const int UserData::kSourcesWebStatsFieldNumber;
const int UserData::kSourcesRecoStatsFieldNumber;
const int UserData::kUserLinksFieldNumber;
const int UserData::kUserClustersFieldNumber;
const int UserData::kSimilarSitesFieldNumber;
const int UserData::kContentThemesFieldNumber;
const int UserData::kStaticRecos1FieldNumber;
const int UserData::kStaticRecos2FieldNumber;
const int UserData::kSitesForUserFieldNumber;
const int UserData::kKeywordsDailyFieldNumber;
const int UserData::kKeywordsMonthlyFieldNumber;
const int UserData::kSitesForUser1FieldNumber;
const int UserData::kSitesForUser2FieldNumber;
const int UserData::kVisitedDocsFieldNumber;
const int UserData::kSitesForUser3FieldNumber;
const int UserData::kLogsVisitedDocsFieldNumber;
const int UserData::kSitesForUser4FieldNumber;
const int UserData::kUserThemesFieldNumber;
const int UserData::kUserDislikesFieldNumber;
const int UserData::kUserVideosFieldNumber;
const int UserData::kUserVideoEventsFieldNumber;
const int UserData::kUserMusicFieldNumber;
const int UserData::kRecostreamCategoriesSubscriptionsFieldNumber;
const int UserData::kRecostreamDomainsSubscriptionsFieldNumber;
const int UserData::kKafkaCategoriesSubscriptionsFieldNumber;
const int UserData::kKafkaDomainsSubscriptionsFieldNumber;
const int UserData::kRecostreamSourcesSubscriptionsFieldNumber;
const int UserData::kRecostreamDislikesFieldNumber;
const int UserData::kVkGroupsForUserFieldNumber;
const int UserData::kLogsVisitedSourcesFieldNumber;
const int UserData::kKafkaSourcesSubscriptionsFieldNumber;
const int UserData::kRecostreamLikesFieldNumber;
const int UserData::kUserLikesFieldNumber;
const int UserData::kUserSourcesEventsFieldNumber;
const int UserData::kNarrowSitesFieldNumber;
const int UserData::kNarrowSites1FieldNumber;
const int UserData::kReactionsFieldNumber;
const int UserData::kShowsFieldNumber;
const int UserData::kI2IUserThemesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserData::UserData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.UserData)
}
UserData::UserData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.UserData)
}
UserData::UserData(const UserData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_socdem_fea()) {
    socdem_fea_ = new ::cosmo::pb::UserData_SocDemFea(*from.socdem_fea_);
  } else {
    socdem_fea_ = NULL;
  }
  if (from.has_als_fea()) {
    als_fea_ = new ::cosmo::pb::UserData_AlsFea(*from.als_fea_);
  } else {
    als_fea_ = NULL;
  }
  if (from.has_ok_info()) {
    ok_info_ = new ::cosmo::pb::UserData_OkInfo(*from.ok_info_);
  } else {
    ok_info_ = NULL;
  }
  if (from.has_deti_reco()) {
    deti_reco_ = new ::cosmo::pb::UserData_DetiRecos(*from.deti_reco_);
  } else {
    deti_reco_ = NULL;
  }
  if (from.has_als_items_fea()) {
    als_items_fea_ = new ::cosmo::pb::UserData_AlsItemsBiases(*from.als_items_fea_);
  } else {
    als_items_fea_ = NULL;
  }
  if (from.has_news_sources()) {
    news_sources_ = new ::cosmo::pb::UserData_NewsSources(*from.news_sources_);
  } else {
    news_sources_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::cosmo::pb::UserData_Stats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  if (from.has_original_info()) {
    original_info_ = new ::cosmo::pb::UserData_OriginalInfo(*from.original_info_);
  } else {
    original_info_ = NULL;
  }
  if (from.has_als_fea_2()) {
    als_fea_2_ = new ::cosmo::pb::UserData_AlsFea(*from.als_fea_2_);
  } else {
    als_fea_2_ = NULL;
  }
  if (from.has_sources_web_stats()) {
    sources_web_stats_ = new ::cosmo::pb::UserData_SourcesWebStats(*from.sources_web_stats_);
  } else {
    sources_web_stats_ = NULL;
  }
  if (from.has_sources_reco_stats()) {
    sources_reco_stats_ = new ::cosmo::pb::UserData_Stats(*from.sources_reco_stats_);
  } else {
    sources_reco_stats_ = NULL;
  }
  if (from.has_user_links()) {
    user_links_ = new ::cosmo::pb::UserData_UserLinks(*from.user_links_);
  } else {
    user_links_ = NULL;
  }
  if (from.has_user_clusters()) {
    user_clusters_ = new ::cosmo::pb::UserData_UserClusters(*from.user_clusters_);
  } else {
    user_clusters_ = NULL;
  }
  if (from.has_similar_sites()) {
    similar_sites_ = new ::cosmo::pb::UserData_SimilarSites(*from.similar_sites_);
  } else {
    similar_sites_ = NULL;
  }
  if (from.has_content_themes()) {
    content_themes_ = new ::cosmo::pb::UserData_ContentThemes(*from.content_themes_);
  } else {
    content_themes_ = NULL;
  }
  if (from.has_static_recos_1()) {
    static_recos_1_ = new ::cosmo::pb::UserData_StaticRecos(*from.static_recos_1_);
  } else {
    static_recos_1_ = NULL;
  }
  if (from.has_static_recos_2()) {
    static_recos_2_ = new ::cosmo::pb::UserData_StaticRecos(*from.static_recos_2_);
  } else {
    static_recos_2_ = NULL;
  }
  if (from.has_sites_for_user()) {
    sites_for_user_ = new ::cosmo::pb::UserData_SitesForUser(*from.sites_for_user_);
  } else {
    sites_for_user_ = NULL;
  }
  if (from.has_keywords_daily()) {
    keywords_daily_ = new ::cosmo::pb::UserData_UserKeywords(*from.keywords_daily_);
  } else {
    keywords_daily_ = NULL;
  }
  if (from.has_keywords_monthly()) {
    keywords_monthly_ = new ::cosmo::pb::UserData_UserKeywords(*from.keywords_monthly_);
  } else {
    keywords_monthly_ = NULL;
  }
  if (from.has_sites_for_user1()) {
    sites_for_user1_ = new ::cosmo::pb::UserData_SitesForUser(*from.sites_for_user1_);
  } else {
    sites_for_user1_ = NULL;
  }
  if (from.has_sites_for_user2()) {
    sites_for_user2_ = new ::cosmo::pb::UserData_SitesForUser(*from.sites_for_user2_);
  } else {
    sites_for_user2_ = NULL;
  }
  if (from.has_visited_docs()) {
    visited_docs_ = new ::cosmo::pb::UserData_VisitedDocs(*from.visited_docs_);
  } else {
    visited_docs_ = NULL;
  }
  if (from.has_sites_for_user3()) {
    sites_for_user3_ = new ::cosmo::pb::UserData_SitesForUser(*from.sites_for_user3_);
  } else {
    sites_for_user3_ = NULL;
  }
  if (from.has_logs_visited_docs()) {
    logs_visited_docs_ = new ::cosmo::pb::UserData_LogsVisitedDocs(*from.logs_visited_docs_);
  } else {
    logs_visited_docs_ = NULL;
  }
  if (from.has_sites_for_user4()) {
    sites_for_user4_ = new ::cosmo::pb::UserData_SitesForUser(*from.sites_for_user4_);
  } else {
    sites_for_user4_ = NULL;
  }
  if (from.has_user_themes()) {
    user_themes_ = new ::cosmo::pb::UserData_UserThemesEvents(*from.user_themes_);
  } else {
    user_themes_ = NULL;
  }
  if (from.has_user_dislikes()) {
    user_dislikes_ = new ::cosmo::pb::UserData_UserEvents(*from.user_dislikes_);
  } else {
    user_dislikes_ = NULL;
  }
  if (from.has_user_videos()) {
    user_videos_ = new ::cosmo::pb::UserData_UserVideos(*from.user_videos_);
  } else {
    user_videos_ = NULL;
  }
  if (from.has_user_video_events()) {
    user_video_events_ = new ::cosmo::pb::UserData_UserVideoEvents(*from.user_video_events_);
  } else {
    user_video_events_ = NULL;
  }
  if (from.has_user_music()) {
    user_music_ = new ::cosmo::pb::UserData_UserMusic(*from.user_music_);
  } else {
    user_music_ = NULL;
  }
  if (from.has_recostream_categories_subscriptions()) {
    recostream_categories_subscriptions_ = new ::cosmo::pb::UserData_SubscriptionInfo(*from.recostream_categories_subscriptions_);
  } else {
    recostream_categories_subscriptions_ = NULL;
  }
  if (from.has_recostream_domains_subscriptions()) {
    recostream_domains_subscriptions_ = new ::cosmo::pb::UserData_SubscriptionInfo(*from.recostream_domains_subscriptions_);
  } else {
    recostream_domains_subscriptions_ = NULL;
  }
  if (from.has_kafka_categories_subscriptions()) {
    kafka_categories_subscriptions_ = new ::cosmo::pb::UserData_SubscriptionInfo(*from.kafka_categories_subscriptions_);
  } else {
    kafka_categories_subscriptions_ = NULL;
  }
  if (from.has_kafka_domains_subscriptions()) {
    kafka_domains_subscriptions_ = new ::cosmo::pb::UserData_SubscriptionInfo(*from.kafka_domains_subscriptions_);
  } else {
    kafka_domains_subscriptions_ = NULL;
  }
  if (from.has_recostream_sources_subscriptions()) {
    recostream_sources_subscriptions_ = new ::cosmo::pb::UserData_SubscriptionInfo(*from.recostream_sources_subscriptions_);
  } else {
    recostream_sources_subscriptions_ = NULL;
  }
  if (from.has_recostream_dislikes()) {
    recostream_dislikes_ = new ::cosmo::pb::UserData_UserEvents(*from.recostream_dislikes_);
  } else {
    recostream_dislikes_ = NULL;
  }
  if (from.has_vk_groups_for_user()) {
    vk_groups_for_user_ = new ::cosmo::pb::UserData_VkGroupsForUser(*from.vk_groups_for_user_);
  } else {
    vk_groups_for_user_ = NULL;
  }
  if (from.has_logs_visited_sources()) {
    logs_visited_sources_ = new ::cosmo::pb::UserData_LogsVisitedSources(*from.logs_visited_sources_);
  } else {
    logs_visited_sources_ = NULL;
  }
  if (from.has_kafka_sources_subscriptions()) {
    kafka_sources_subscriptions_ = new ::cosmo::pb::UserData_SubscriptionInfo(*from.kafka_sources_subscriptions_);
  } else {
    kafka_sources_subscriptions_ = NULL;
  }
  if (from.has_recostream_likes()) {
    recostream_likes_ = new ::cosmo::pb::UserData_UserEvents(*from.recostream_likes_);
  } else {
    recostream_likes_ = NULL;
  }
  if (from.has_user_likes()) {
    user_likes_ = new ::cosmo::pb::UserData_UserEvents(*from.user_likes_);
  } else {
    user_likes_ = NULL;
  }
  if (from.has_user_sources_events()) {
    user_sources_events_ = new ::cosmo::pb::UserData_UserSourcesEvents(*from.user_sources_events_);
  } else {
    user_sources_events_ = NULL;
  }
  if (from.has_narrow_sites()) {
    narrow_sites_ = new ::cosmo::pb::UserData_SitesForUser(*from.narrow_sites_);
  } else {
    narrow_sites_ = NULL;
  }
  if (from.has_narrow_sites1()) {
    narrow_sites1_ = new ::cosmo::pb::UserData_SitesForUser(*from.narrow_sites1_);
  } else {
    narrow_sites1_ = NULL;
  }
  if (from.has_reactions()) {
    reactions_ = new ::cosmo::pb::PackedReactionsArr(*from.reactions_);
  } else {
    reactions_ = NULL;
  }
  if (from.has_shows()) {
    shows_ = new ::cosmo::pb::ShowsArr(*from.shows_);
  } else {
    shows_ = NULL;
  }
  if (from.has_i2i_user_themes()) {
    i2i_user_themes_ = new ::cosmo::pb::UserData_UserI2IEvents(*from.i2i_user_themes_);
  } else {
    i2i_user_themes_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.UserData)
}

void UserData::SharedCtor() {
  ::memset(&socdem_fea_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&socdem_fea_)) + sizeof(user_id_));
  _cached_size_ = 0;
}

UserData::~UserData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.UserData)
  SharedDtor();
}

void UserData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete socdem_fea_;
  if (this != internal_default_instance()) delete als_fea_;
  if (this != internal_default_instance()) delete ok_info_;
  if (this != internal_default_instance()) delete deti_reco_;
  if (this != internal_default_instance()) delete als_items_fea_;
  if (this != internal_default_instance()) delete news_sources_;
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete original_info_;
  if (this != internal_default_instance()) delete als_fea_2_;
  if (this != internal_default_instance()) delete sources_web_stats_;
  if (this != internal_default_instance()) delete sources_reco_stats_;
  if (this != internal_default_instance()) delete user_links_;
  if (this != internal_default_instance()) delete user_clusters_;
  if (this != internal_default_instance()) delete similar_sites_;
  if (this != internal_default_instance()) delete content_themes_;
  if (this != internal_default_instance()) delete static_recos_1_;
  if (this != internal_default_instance()) delete static_recos_2_;
  if (this != internal_default_instance()) delete sites_for_user_;
  if (this != internal_default_instance()) delete keywords_daily_;
  if (this != internal_default_instance()) delete keywords_monthly_;
  if (this != internal_default_instance()) delete sites_for_user1_;
  if (this != internal_default_instance()) delete sites_for_user2_;
  if (this != internal_default_instance()) delete visited_docs_;
  if (this != internal_default_instance()) delete sites_for_user3_;
  if (this != internal_default_instance()) delete logs_visited_docs_;
  if (this != internal_default_instance()) delete sites_for_user4_;
  if (this != internal_default_instance()) delete user_themes_;
  if (this != internal_default_instance()) delete user_dislikes_;
  if (this != internal_default_instance()) delete user_videos_;
  if (this != internal_default_instance()) delete user_video_events_;
  if (this != internal_default_instance()) delete user_music_;
  if (this != internal_default_instance()) delete recostream_categories_subscriptions_;
  if (this != internal_default_instance()) delete recostream_domains_subscriptions_;
  if (this != internal_default_instance()) delete kafka_categories_subscriptions_;
  if (this != internal_default_instance()) delete kafka_domains_subscriptions_;
  if (this != internal_default_instance()) delete recostream_sources_subscriptions_;
  if (this != internal_default_instance()) delete recostream_dislikes_;
  if (this != internal_default_instance()) delete vk_groups_for_user_;
  if (this != internal_default_instance()) delete logs_visited_sources_;
  if (this != internal_default_instance()) delete kafka_sources_subscriptions_;
  if (this != internal_default_instance()) delete recostream_likes_;
  if (this != internal_default_instance()) delete user_likes_;
  if (this != internal_default_instance()) delete user_sources_events_;
  if (this != internal_default_instance()) delete narrow_sites_;
  if (this != internal_default_instance()) delete narrow_sites1_;
  if (this != internal_default_instance()) delete reactions_;
  if (this != internal_default_instance()) delete shows_;
  if (this != internal_default_instance()) delete i2i_user_themes_;
}

void UserData::ArenaDtor(void* object) {
  UserData* _this = reinterpret_cast< UserData* >(object);
  (void)_this;
}
void UserData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserData& UserData::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserData* UserData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UserData>(arena);
}

void UserData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.UserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(socdem_fea_ != NULL);
      socdem_fea_->::cosmo::pb::UserData_SocDemFea::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(als_fea_ != NULL);
      als_fea_->::cosmo::pb::UserData_AlsFea::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ok_info_ != NULL);
      ok_info_->::cosmo::pb::UserData_OkInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(deti_reco_ != NULL);
      deti_reco_->::cosmo::pb::UserData_DetiRecos::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(als_items_fea_ != NULL);
      als_items_fea_->::cosmo::pb::UserData_AlsItemsBiases::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(news_sources_ != NULL);
      news_sources_->::cosmo::pb::UserData_NewsSources::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(stats_ != NULL);
      stats_->::cosmo::pb::UserData_Stats::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(original_info_ != NULL);
      original_info_->::cosmo::pb::UserData_OriginalInfo::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(als_fea_2_ != NULL);
      als_fea_2_->::cosmo::pb::UserData_AlsFea::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(sources_web_stats_ != NULL);
      sources_web_stats_->::cosmo::pb::UserData_SourcesWebStats::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(sources_reco_stats_ != NULL);
      sources_reco_stats_->::cosmo::pb::UserData_Stats::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(user_links_ != NULL);
      user_links_->::cosmo::pb::UserData_UserLinks::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(user_clusters_ != NULL);
      user_clusters_->::cosmo::pb::UserData_UserClusters::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(similar_sites_ != NULL);
      similar_sites_->::cosmo::pb::UserData_SimilarSites::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(content_themes_ != NULL);
      content_themes_->::cosmo::pb::UserData_ContentThemes::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(static_recos_1_ != NULL);
      static_recos_1_->::cosmo::pb::UserData_StaticRecos::Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(static_recos_2_ != NULL);
      static_recos_2_->::cosmo::pb::UserData_StaticRecos::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(sites_for_user_ != NULL);
      sites_for_user_->::cosmo::pb::UserData_SitesForUser::Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(keywords_daily_ != NULL);
      keywords_daily_->::cosmo::pb::UserData_UserKeywords::Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(keywords_monthly_ != NULL);
      keywords_monthly_->::cosmo::pb::UserData_UserKeywords::Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(sites_for_user1_ != NULL);
      sites_for_user1_->::cosmo::pb::UserData_SitesForUser::Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(sites_for_user2_ != NULL);
      sites_for_user2_->::cosmo::pb::UserData_SitesForUser::Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(visited_docs_ != NULL);
      visited_docs_->::cosmo::pb::UserData_VisitedDocs::Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(sites_for_user3_ != NULL);
      sites_for_user3_->::cosmo::pb::UserData_SitesForUser::Clear();
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(logs_visited_docs_ != NULL);
      logs_visited_docs_->::cosmo::pb::UserData_LogsVisitedDocs::Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(sites_for_user4_ != NULL);
      sites_for_user4_->::cosmo::pb::UserData_SitesForUser::Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(user_themes_ != NULL);
      user_themes_->::cosmo::pb::UserData_UserThemesEvents::Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(user_dislikes_ != NULL);
      user_dislikes_->::cosmo::pb::UserData_UserEvents::Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(user_videos_ != NULL);
      user_videos_->::cosmo::pb::UserData_UserVideos::Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(user_video_events_ != NULL);
      user_video_events_->::cosmo::pb::UserData_UserVideoEvents::Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(user_music_ != NULL);
      user_music_->::cosmo::pb::UserData_UserMusic::Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(recostream_categories_subscriptions_ != NULL);
      recostream_categories_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(recostream_domains_subscriptions_ != NULL);
      recostream_domains_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(kafka_categories_subscriptions_ != NULL);
      kafka_categories_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kafka_domains_subscriptions_ != NULL);
      kafka_domains_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(recostream_sources_subscriptions_ != NULL);
      recostream_sources_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(recostream_dislikes_ != NULL);
      recostream_dislikes_->::cosmo::pb::UserData_UserEvents::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(vk_groups_for_user_ != NULL);
      vk_groups_for_user_->::cosmo::pb::UserData_VkGroupsForUser::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(logs_visited_sources_ != NULL);
      logs_visited_sources_->::cosmo::pb::UserData_LogsVisitedSources::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(kafka_sources_subscriptions_ != NULL);
      kafka_sources_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(recostream_likes_ != NULL);
      recostream_likes_->::cosmo::pb::UserData_UserEvents::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(user_likes_ != NULL);
      user_likes_->::cosmo::pb::UserData_UserEvents::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(user_sources_events_ != NULL);
      user_sources_events_->::cosmo::pb::UserData_UserSourcesEvents::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(narrow_sites_ != NULL);
      narrow_sites_->::cosmo::pb::UserData_SitesForUser::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(narrow_sites1_ != NULL);
      narrow_sites1_->::cosmo::pb::UserData_SitesForUser::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(reactions_ != NULL);
      reactions_->::cosmo::pb::PackedReactionsArr::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(shows_ != NULL);
      shows_->::cosmo::pb::ShowsArr::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(i2i_user_themes_ != NULL);
      i2i_user_themes_->::cosmo::pb::UserData_UserI2IEvents::Clear();
    }
  }
  user_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.UserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socdem_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.AlsFea als_fea = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_als_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.OkInfo ok_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ok_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deti_reco()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_als_items_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.NewsSources news_sources = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.Stats stats = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_als_fea_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sources_web_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sources_reco_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserLinks user_links = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserClusters user_clusters = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SimilarSites similar_sites = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_similar_sites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.ContentThemes content_themes = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content_themes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.StaticRecos static_recos_1 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_static_recos_1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.StaticRecos static_recos_2 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_static_recos_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SitesForUser sites_for_user = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sites_for_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserKeywords keywords_daily = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keywords_daily()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserKeywords keywords_monthly = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keywords_monthly()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SitesForUser sites_for_user1 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sites_for_user1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SitesForUser sites_for_user2 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sites_for_user2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.VisitedDocs visited_docs = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visited_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SitesForUser sites_for_user3 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sites_for_user3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.LogsVisitedDocs logs_visited_docs = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logs_visited_docs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SitesForUser sites_for_user4 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sites_for_user4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserThemesEvents user_themes = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_themes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserEvents user_dislikes = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideos user_videos = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_videos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserVideoEvents user_video_events = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_video_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserMusic user_music = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_music()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SubscriptionInfo recostream_categories_subscriptions = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recostream_categories_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SubscriptionInfo recostream_domains_subscriptions = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recostream_domains_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SubscriptionInfo kafka_categories_subscriptions = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kafka_categories_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SubscriptionInfo kafka_domains_subscriptions = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kafka_domains_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SubscriptionInfo recostream_sources_subscriptions = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recostream_sources_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserEvents recostream_dislikes = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recostream_dislikes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.VkGroupsForUser vk_groups_for_user = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_groups_for_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.LogsVisitedSources logs_visited_sources = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logs_visited_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SubscriptionInfo kafka_sources_subscriptions = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kafka_sources_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserEvents recostream_likes = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recostream_likes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserEvents user_likes = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_likes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserSourcesEvents user_sources_events = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sources_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SitesForUser narrow_sites = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_narrow_sites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.SitesForUser narrow_sites1 = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_narrow_sites1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.PackedReactionsArr reactions = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.ShowsArr shows = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.UserData.UserI2IEvents i2i_user_themes = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_i2i_user_themes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.UserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.UserData)
  return false;
#undef DO_
}

void UserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.UserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->socdem_fea_, output);
  }

  // optional .cosmo.pb.UserData.AlsFea als_fea = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->als_fea_, output);
  }

  // optional .cosmo.pb.UserData.OkInfo ok_info = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ok_info_, output);
  }

  // optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->deti_reco_, output);
  }

  // optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->als_items_fea_, output);
  }

  // optional .cosmo.pb.UserData.NewsSources news_sources = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->news_sources_, output);
  }

  // optional .cosmo.pb.UserData.Stats stats = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->stats_, output);
  }

  // optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->original_info_, output);
  }

  // optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->als_fea_2_, output);
  }

  // optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->sources_web_stats_, output);
  }

  // optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->sources_reco_stats_, output);
  }

  // optional .cosmo.pb.UserData.UserLinks user_links = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->user_links_, output);
  }

  // optional .cosmo.pb.UserData.UserClusters user_clusters = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->user_clusters_, output);
  }

  // optional .cosmo.pb.UserData.SimilarSites similar_sites = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->similar_sites_, output);
  }

  // optional .cosmo.pb.UserData.ContentThemes content_themes = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->content_themes_, output);
  }

  // optional .cosmo.pb.UserData.StaticRecos static_recos_1 = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->static_recos_1_, output);
  }

  // optional .cosmo.pb.UserData.StaticRecos static_recos_2 = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->static_recos_2_, output);
  }

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->sites_for_user_, output);
  }

  // optional .cosmo.pb.UserData.UserKeywords keywords_daily = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->keywords_daily_, output);
  }

  // optional .cosmo.pb.UserData.UserKeywords keywords_monthly = 22;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->keywords_monthly_, output);
  }

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user1 = 23;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->sites_for_user1_, output);
  }

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user2 = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->sites_for_user2_, output);
  }

  // optional .cosmo.pb.UserData.VisitedDocs visited_docs = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->visited_docs_, output);
  }

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user3 = 26;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->sites_for_user3_, output);
  }

  // optional .cosmo.pb.UserData.LogsVisitedDocs logs_visited_docs = 27;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->logs_visited_docs_, output);
  }

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user4 = 28;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->sites_for_user4_, output);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents user_themes = 29;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->user_themes_, output);
  }

  // optional .cosmo.pb.UserData.UserEvents user_dislikes = 30;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->user_dislikes_, output);
  }

  // optional .cosmo.pb.UserData.UserVideos user_videos = 31;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->user_videos_, output);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents user_video_events = 32;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->user_video_events_, output);
  }

  // optional .cosmo.pb.UserData.UserMusic user_music = 33;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->user_music_, output);
  }

  // optional .cosmo.pb.UserData.SubscriptionInfo recostream_categories_subscriptions = 34;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->recostream_categories_subscriptions_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .cosmo.pb.UserData.SubscriptionInfo recostream_domains_subscriptions = 35;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->recostream_domains_subscriptions_, output);
  }

  // optional .cosmo.pb.UserData.SubscriptionInfo kafka_categories_subscriptions = 36;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->kafka_categories_subscriptions_, output);
  }

  // optional .cosmo.pb.UserData.SubscriptionInfo kafka_domains_subscriptions = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->kafka_domains_subscriptions_, output);
  }

  // optional .cosmo.pb.UserData.SubscriptionInfo recostream_sources_subscriptions = 38;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->recostream_sources_subscriptions_, output);
  }

  // optional .cosmo.pb.UserData.UserEvents recostream_dislikes = 39;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->recostream_dislikes_, output);
  }

  // optional .cosmo.pb.UserData.VkGroupsForUser vk_groups_for_user = 40;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->vk_groups_for_user_, output);
  }

  // optional .cosmo.pb.UserData.LogsVisitedSources logs_visited_sources = 41;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->logs_visited_sources_, output);
  }

  // optional .cosmo.pb.UserData.SubscriptionInfo kafka_sources_subscriptions = 42;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->kafka_sources_subscriptions_, output);
  }

  // optional .cosmo.pb.UserData.UserEvents recostream_likes = 43;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->recostream_likes_, output);
  }

  // optional .cosmo.pb.UserData.UserEvents user_likes = 44;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, *this->user_likes_, output);
  }

  // optional .cosmo.pb.UserData.UserSourcesEvents user_sources_events = 45;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *this->user_sources_events_, output);
  }

  // optional .cosmo.pb.UserData.SitesForUser narrow_sites = 46;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *this->narrow_sites_, output);
  }

  // optional .cosmo.pb.UserData.SitesForUser narrow_sites1 = 47;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, *this->narrow_sites1_, output);
  }

  // optional .cosmo.pb.PackedReactionsArr reactions = 48;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *this->reactions_, output);
  }

  // optional .cosmo.pb.ShowsArr shows = 49;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, *this->shows_, output);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents i2i_user_themes = 50;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->i2i_user_themes_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.UserData)
}

::google::protobuf::uint8* UserData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.UserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional int64 user_id = 1;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->socdem_fea_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.AlsFea als_fea = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->als_fea_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.OkInfo ok_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ok_info_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->deti_reco_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->als_items_fea_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.NewsSources news_sources = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->news_sources_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.Stats stats = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->stats_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->original_info_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->als_fea_2_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->sources_web_stats_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->sources_reco_stats_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserLinks user_links = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->user_links_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserClusters user_clusters = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->user_clusters_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SimilarSites similar_sites = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->similar_sites_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.ContentThemes content_themes = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->content_themes_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.StaticRecos static_recos_1 = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->static_recos_1_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.StaticRecos static_recos_2 = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->static_recos_2_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->sites_for_user_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserKeywords keywords_daily = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->keywords_daily_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserKeywords keywords_monthly = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->keywords_monthly_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user1 = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->sites_for_user1_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user2 = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->sites_for_user2_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.VisitedDocs visited_docs = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->visited_docs_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user3 = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->sites_for_user3_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.LogsVisitedDocs logs_visited_docs = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->logs_visited_docs_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user4 = 28;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->sites_for_user4_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserThemesEvents user_themes = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->user_themes_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserEvents user_dislikes = 30;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->user_dislikes_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideos user_videos = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->user_videos_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserVideoEvents user_video_events = 32;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->user_video_events_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserMusic user_music = 33;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->user_music_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SubscriptionInfo recostream_categories_subscriptions = 34;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->recostream_categories_subscriptions_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .cosmo.pb.UserData.SubscriptionInfo recostream_domains_subscriptions = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->recostream_domains_subscriptions_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SubscriptionInfo kafka_categories_subscriptions = 36;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->kafka_categories_subscriptions_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SubscriptionInfo kafka_domains_subscriptions = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->kafka_domains_subscriptions_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SubscriptionInfo recostream_sources_subscriptions = 38;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->recostream_sources_subscriptions_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserEvents recostream_dislikes = 39;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *this->recostream_dislikes_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.VkGroupsForUser vk_groups_for_user = 40;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->vk_groups_for_user_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.LogsVisitedSources logs_visited_sources = 41;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *this->logs_visited_sources_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SubscriptionInfo kafka_sources_subscriptions = 42;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->kafka_sources_subscriptions_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserEvents recostream_likes = 43;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, *this->recostream_likes_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserEvents user_likes = 44;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        44, *this->user_likes_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserSourcesEvents user_sources_events = 45;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, *this->user_sources_events_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SitesForUser narrow_sites = 46;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, *this->narrow_sites_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.SitesForUser narrow_sites1 = 47;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        47, *this->narrow_sites1_, deterministic, target);
  }

  // optional .cosmo.pb.PackedReactionsArr reactions = 48;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, *this->reactions_, deterministic, target);
  }

  // optional .cosmo.pb.ShowsArr shows = 49;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        49, *this->shows_, deterministic, target);
  }

  // optional .cosmo.pb.UserData.UserI2IEvents i2i_user_themes = 50;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->i2i_user_themes_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.UserData)
  return target;
}

size_t UserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.UserData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
    if (has_socdem_fea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->socdem_fea_);
    }

    // optional .cosmo.pb.UserData.AlsFea als_fea = 3;
    if (has_als_fea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->als_fea_);
    }

    // optional .cosmo.pb.UserData.OkInfo ok_info = 4;
    if (has_ok_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ok_info_);
    }

    // optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
    if (has_deti_reco()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deti_reco_);
    }

    // optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
    if (has_als_items_fea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->als_items_fea_);
    }

    // optional .cosmo.pb.UserData.NewsSources news_sources = 7;
    if (has_news_sources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->news_sources_);
    }

    // optional .cosmo.pb.UserData.Stats stats = 8;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_);
    }

    // optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
    if (has_original_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->original_info_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
    if (has_als_fea_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->als_fea_2_);
    }

    // optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
    if (has_sources_web_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sources_web_stats_);
    }

    // optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
    if (has_sources_reco_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sources_reco_stats_);
    }

    // optional .cosmo.pb.UserData.UserLinks user_links = 13;
    if (has_user_links()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_links_);
    }

    // optional .cosmo.pb.UserData.UserClusters user_clusters = 14;
    if (has_user_clusters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_clusters_);
    }

    // optional .cosmo.pb.UserData.SimilarSites similar_sites = 15;
    if (has_similar_sites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->similar_sites_);
    }

    // optional .cosmo.pb.UserData.ContentThemes content_themes = 17;
    if (has_content_themes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->content_themes_);
    }

    // optional .cosmo.pb.UserData.StaticRecos static_recos_1 = 18;
    if (has_static_recos_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->static_recos_1_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .cosmo.pb.UserData.StaticRecos static_recos_2 = 19;
    if (has_static_recos_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->static_recos_2_);
    }

    // optional .cosmo.pb.UserData.SitesForUser sites_for_user = 20;
    if (has_sites_for_user()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sites_for_user_);
    }

    // optional .cosmo.pb.UserData.UserKeywords keywords_daily = 21;
    if (has_keywords_daily()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->keywords_daily_);
    }

    // optional .cosmo.pb.UserData.UserKeywords keywords_monthly = 22;
    if (has_keywords_monthly()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->keywords_monthly_);
    }

    // optional .cosmo.pb.UserData.SitesForUser sites_for_user1 = 23;
    if (has_sites_for_user1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sites_for_user1_);
    }

    // optional .cosmo.pb.UserData.SitesForUser sites_for_user2 = 24;
    if (has_sites_for_user2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sites_for_user2_);
    }

    // optional .cosmo.pb.UserData.VisitedDocs visited_docs = 25;
    if (has_visited_docs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->visited_docs_);
    }

    // optional .cosmo.pb.UserData.SitesForUser sites_for_user3 = 26;
    if (has_sites_for_user3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sites_for_user3_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .cosmo.pb.UserData.LogsVisitedDocs logs_visited_docs = 27;
    if (has_logs_visited_docs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->logs_visited_docs_);
    }

    // optional .cosmo.pb.UserData.SitesForUser sites_for_user4 = 28;
    if (has_sites_for_user4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sites_for_user4_);
    }

    // optional .cosmo.pb.UserData.UserThemesEvents user_themes = 29;
    if (has_user_themes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_themes_);
    }

    // optional .cosmo.pb.UserData.UserEvents user_dislikes = 30;
    if (has_user_dislikes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_dislikes_);
    }

    // optional .cosmo.pb.UserData.UserVideos user_videos = 31;
    if (has_user_videos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_videos_);
    }

    // optional .cosmo.pb.UserData.UserVideoEvents user_video_events = 32;
    if (has_user_video_events()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_video_events_);
    }

    // optional .cosmo.pb.UserData.UserMusic user_music = 33;
    if (has_user_music()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_music_);
    }

    // optional .cosmo.pb.UserData.SubscriptionInfo recostream_categories_subscriptions = 34;
    if (has_recostream_categories_subscriptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->recostream_categories_subscriptions_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .cosmo.pb.UserData.SubscriptionInfo recostream_domains_subscriptions = 35;
    if (has_recostream_domains_subscriptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->recostream_domains_subscriptions_);
    }

    // optional .cosmo.pb.UserData.SubscriptionInfo kafka_categories_subscriptions = 36;
    if (has_kafka_categories_subscriptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kafka_categories_subscriptions_);
    }

    // optional .cosmo.pb.UserData.SubscriptionInfo kafka_domains_subscriptions = 37;
    if (has_kafka_domains_subscriptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kafka_domains_subscriptions_);
    }

    // optional .cosmo.pb.UserData.SubscriptionInfo recostream_sources_subscriptions = 38;
    if (has_recostream_sources_subscriptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->recostream_sources_subscriptions_);
    }

    // optional .cosmo.pb.UserData.UserEvents recostream_dislikes = 39;
    if (has_recostream_dislikes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->recostream_dislikes_);
    }

    // optional .cosmo.pb.UserData.VkGroupsForUser vk_groups_for_user = 40;
    if (has_vk_groups_for_user()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_groups_for_user_);
    }

    // optional .cosmo.pb.UserData.LogsVisitedSources logs_visited_sources = 41;
    if (has_logs_visited_sources()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->logs_visited_sources_);
    }

    // optional .cosmo.pb.UserData.SubscriptionInfo kafka_sources_subscriptions = 42;
    if (has_kafka_sources_subscriptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kafka_sources_subscriptions_);
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .cosmo.pb.UserData.UserEvents recostream_likes = 43;
    if (has_recostream_likes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->recostream_likes_);
    }

    // optional .cosmo.pb.UserData.UserEvents user_likes = 44;
    if (has_user_likes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_likes_);
    }

    // optional .cosmo.pb.UserData.UserSourcesEvents user_sources_events = 45;
    if (has_user_sources_events()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_sources_events_);
    }

    // optional .cosmo.pb.UserData.SitesForUser narrow_sites = 46;
    if (has_narrow_sites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->narrow_sites_);
    }

    // optional .cosmo.pb.UserData.SitesForUser narrow_sites1 = 47;
    if (has_narrow_sites1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->narrow_sites1_);
    }

    // optional .cosmo.pb.PackedReactionsArr reactions = 48;
    if (has_reactions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reactions_);
    }

    // optional .cosmo.pb.ShowsArr shows = 49;
    if (has_shows()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shows_);
    }

    // optional .cosmo.pb.UserData.UserI2IEvents i2i_user_themes = 50;
    if (has_i2i_user_themes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->i2i_user_themes_);
    }

  }
  // optional int64 user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.UserData)
  GOOGLE_DCHECK_NE(&from, this);
  const UserData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.UserData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.UserData)
    MergeFrom(*source);
  }
}

void UserData::MergeFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.UserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_socdem_fea()->::cosmo::pb::UserData_SocDemFea::MergeFrom(from.socdem_fea());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_als_fea()->::cosmo::pb::UserData_AlsFea::MergeFrom(from.als_fea());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ok_info()->::cosmo::pb::UserData_OkInfo::MergeFrom(from.ok_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_deti_reco()->::cosmo::pb::UserData_DetiRecos::MergeFrom(from.deti_reco());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_als_items_fea()->::cosmo::pb::UserData_AlsItemsBiases::MergeFrom(from.als_items_fea());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_news_sources()->::cosmo::pb::UserData_NewsSources::MergeFrom(from.news_sources());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_stats()->::cosmo::pb::UserData_Stats::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_original_info()->::cosmo::pb::UserData_OriginalInfo::MergeFrom(from.original_info());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_als_fea_2()->::cosmo::pb::UserData_AlsFea::MergeFrom(from.als_fea_2());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_sources_web_stats()->::cosmo::pb::UserData_SourcesWebStats::MergeFrom(from.sources_web_stats());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_sources_reco_stats()->::cosmo::pb::UserData_Stats::MergeFrom(from.sources_reco_stats());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_user_links()->::cosmo::pb::UserData_UserLinks::MergeFrom(from.user_links());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_user_clusters()->::cosmo::pb::UserData_UserClusters::MergeFrom(from.user_clusters());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_similar_sites()->::cosmo::pb::UserData_SimilarSites::MergeFrom(from.similar_sites());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_content_themes()->::cosmo::pb::UserData_ContentThemes::MergeFrom(from.content_themes());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_static_recos_1()->::cosmo::pb::UserData_StaticRecos::MergeFrom(from.static_recos_1());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_static_recos_2()->::cosmo::pb::UserData_StaticRecos::MergeFrom(from.static_recos_2());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_sites_for_user()->::cosmo::pb::UserData_SitesForUser::MergeFrom(from.sites_for_user());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_keywords_daily()->::cosmo::pb::UserData_UserKeywords::MergeFrom(from.keywords_daily());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_keywords_monthly()->::cosmo::pb::UserData_UserKeywords::MergeFrom(from.keywords_monthly());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_sites_for_user1()->::cosmo::pb::UserData_SitesForUser::MergeFrom(from.sites_for_user1());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_sites_for_user2()->::cosmo::pb::UserData_SitesForUser::MergeFrom(from.sites_for_user2());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_visited_docs()->::cosmo::pb::UserData_VisitedDocs::MergeFrom(from.visited_docs());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_sites_for_user3()->::cosmo::pb::UserData_SitesForUser::MergeFrom(from.sites_for_user3());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_logs_visited_docs()->::cosmo::pb::UserData_LogsVisitedDocs::MergeFrom(from.logs_visited_docs());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_sites_for_user4()->::cosmo::pb::UserData_SitesForUser::MergeFrom(from.sites_for_user4());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_user_themes()->::cosmo::pb::UserData_UserThemesEvents::MergeFrom(from.user_themes());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_user_dislikes()->::cosmo::pb::UserData_UserEvents::MergeFrom(from.user_dislikes());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_user_videos()->::cosmo::pb::UserData_UserVideos::MergeFrom(from.user_videos());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_user_video_events()->::cosmo::pb::UserData_UserVideoEvents::MergeFrom(from.user_video_events());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_user_music()->::cosmo::pb::UserData_UserMusic::MergeFrom(from.user_music());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_recostream_categories_subscriptions()->::cosmo::pb::UserData_SubscriptionInfo::MergeFrom(from.recostream_categories_subscriptions());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_recostream_domains_subscriptions()->::cosmo::pb::UserData_SubscriptionInfo::MergeFrom(from.recostream_domains_subscriptions());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_kafka_categories_subscriptions()->::cosmo::pb::UserData_SubscriptionInfo::MergeFrom(from.kafka_categories_subscriptions());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_kafka_domains_subscriptions()->::cosmo::pb::UserData_SubscriptionInfo::MergeFrom(from.kafka_domains_subscriptions());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_recostream_sources_subscriptions()->::cosmo::pb::UserData_SubscriptionInfo::MergeFrom(from.recostream_sources_subscriptions());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_recostream_dislikes()->::cosmo::pb::UserData_UserEvents::MergeFrom(from.recostream_dislikes());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_vk_groups_for_user()->::cosmo::pb::UserData_VkGroupsForUser::MergeFrom(from.vk_groups_for_user());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_logs_visited_sources()->::cosmo::pb::UserData_LogsVisitedSources::MergeFrom(from.logs_visited_sources());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_kafka_sources_subscriptions()->::cosmo::pb::UserData_SubscriptionInfo::MergeFrom(from.kafka_sources_subscriptions());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_recostream_likes()->::cosmo::pb::UserData_UserEvents::MergeFrom(from.recostream_likes());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_user_likes()->::cosmo::pb::UserData_UserEvents::MergeFrom(from.user_likes());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_user_sources_events()->::cosmo::pb::UserData_UserSourcesEvents::MergeFrom(from.user_sources_events());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_narrow_sites()->::cosmo::pb::UserData_SitesForUser::MergeFrom(from.narrow_sites());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_narrow_sites1()->::cosmo::pb::UserData_SitesForUser::MergeFrom(from.narrow_sites1());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_reactions()->::cosmo::pb::PackedReactionsArr::MergeFrom(from.reactions());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_shows()->::cosmo::pb::ShowsArr::MergeFrom(from.shows());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_i2i_user_themes()->::cosmo::pb::UserData_UserI2IEvents::MergeFrom(from.i2i_user_themes());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    set_user_id(from.user_id());
  }
}

void UserData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData::CopyFrom(const UserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.UserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {
  if (has_ok_info()) {
    if (!this->ok_info_->IsInitialized()) return false;
  }
  if (has_stats()) {
    if (!this->stats_->IsInitialized()) return false;
  }
  if (has_sources_web_stats()) {
    if (!this->sources_web_stats_->IsInitialized()) return false;
  }
  if (has_sources_reco_stats()) {
    if (!this->sources_reco_stats_->IsInitialized()) return false;
  }
  if (has_similar_sites()) {
    if (!this->similar_sites_->IsInitialized()) return false;
  }
  if (has_sites_for_user()) {
    if (!this->sites_for_user_->IsInitialized()) return false;
  }
  if (has_keywords_daily()) {
    if (!this->keywords_daily_->IsInitialized()) return false;
  }
  if (has_keywords_monthly()) {
    if (!this->keywords_monthly_->IsInitialized()) return false;
  }
  if (has_sites_for_user1()) {
    if (!this->sites_for_user1_->IsInitialized()) return false;
  }
  if (has_sites_for_user2()) {
    if (!this->sites_for_user2_->IsInitialized()) return false;
  }
  if (has_sites_for_user3()) {
    if (!this->sites_for_user3_->IsInitialized()) return false;
  }
  if (has_sites_for_user4()) {
    if (!this->sites_for_user4_->IsInitialized()) return false;
  }
  if (has_user_themes()) {
    if (!this->user_themes_->IsInitialized()) return false;
  }
  if (has_user_dislikes()) {
    if (!this->user_dislikes_->IsInitialized()) return false;
  }
  if (has_user_videos()) {
    if (!this->user_videos_->IsInitialized()) return false;
  }
  if (has_user_video_events()) {
    if (!this->user_video_events_->IsInitialized()) return false;
  }
  if (has_user_music()) {
    if (!this->user_music_->IsInitialized()) return false;
  }
  if (has_recostream_categories_subscriptions()) {
    if (!this->recostream_categories_subscriptions_->IsInitialized()) return false;
  }
  if (has_recostream_domains_subscriptions()) {
    if (!this->recostream_domains_subscriptions_->IsInitialized()) return false;
  }
  if (has_kafka_categories_subscriptions()) {
    if (!this->kafka_categories_subscriptions_->IsInitialized()) return false;
  }
  if (has_kafka_domains_subscriptions()) {
    if (!this->kafka_domains_subscriptions_->IsInitialized()) return false;
  }
  if (has_recostream_sources_subscriptions()) {
    if (!this->recostream_sources_subscriptions_->IsInitialized()) return false;
  }
  if (has_recostream_dislikes()) {
    if (!this->recostream_dislikes_->IsInitialized()) return false;
  }
  if (has_vk_groups_for_user()) {
    if (!this->vk_groups_for_user_->IsInitialized()) return false;
  }
  if (has_kafka_sources_subscriptions()) {
    if (!this->kafka_sources_subscriptions_->IsInitialized()) return false;
  }
  if (has_recostream_likes()) {
    if (!this->recostream_likes_->IsInitialized()) return false;
  }
  if (has_user_likes()) {
    if (!this->user_likes_->IsInitialized()) return false;
  }
  if (has_user_sources_events()) {
    if (!this->user_sources_events_->IsInitialized()) return false;
  }
  if (has_narrow_sites()) {
    if (!this->narrow_sites_->IsInitialized()) return false;
  }
  if (has_narrow_sites1()) {
    if (!this->narrow_sites1_->IsInitialized()) return false;
  }
  if (has_reactions()) {
    if (!this->reactions_->IsInitialized()) return false;
  }
  if (has_shows()) {
    if (!this->shows_->IsInitialized()) return false;
  }
  if (has_i2i_user_themes()) {
    if (!this->i2i_user_themes_->IsInitialized()) return false;
  }
  return true;
}

void UserData::Swap(UserData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UserData::UnsafeArenaSwap(UserData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserData::InternalSwap(UserData* other) {
  using std::swap;
  swap(socdem_fea_, other->socdem_fea_);
  swap(als_fea_, other->als_fea_);
  swap(ok_info_, other->ok_info_);
  swap(deti_reco_, other->deti_reco_);
  swap(als_items_fea_, other->als_items_fea_);
  swap(news_sources_, other->news_sources_);
  swap(stats_, other->stats_);
  swap(original_info_, other->original_info_);
  swap(als_fea_2_, other->als_fea_2_);
  swap(sources_web_stats_, other->sources_web_stats_);
  swap(sources_reco_stats_, other->sources_reco_stats_);
  swap(user_links_, other->user_links_);
  swap(user_clusters_, other->user_clusters_);
  swap(similar_sites_, other->similar_sites_);
  swap(content_themes_, other->content_themes_);
  swap(static_recos_1_, other->static_recos_1_);
  swap(static_recos_2_, other->static_recos_2_);
  swap(sites_for_user_, other->sites_for_user_);
  swap(keywords_daily_, other->keywords_daily_);
  swap(keywords_monthly_, other->keywords_monthly_);
  swap(sites_for_user1_, other->sites_for_user1_);
  swap(sites_for_user2_, other->sites_for_user2_);
  swap(visited_docs_, other->visited_docs_);
  swap(sites_for_user3_, other->sites_for_user3_);
  swap(logs_visited_docs_, other->logs_visited_docs_);
  swap(sites_for_user4_, other->sites_for_user4_);
  swap(user_themes_, other->user_themes_);
  swap(user_dislikes_, other->user_dislikes_);
  swap(user_videos_, other->user_videos_);
  swap(user_video_events_, other->user_video_events_);
  swap(user_music_, other->user_music_);
  swap(recostream_categories_subscriptions_, other->recostream_categories_subscriptions_);
  swap(recostream_domains_subscriptions_, other->recostream_domains_subscriptions_);
  swap(kafka_categories_subscriptions_, other->kafka_categories_subscriptions_);
  swap(kafka_domains_subscriptions_, other->kafka_domains_subscriptions_);
  swap(recostream_sources_subscriptions_, other->recostream_sources_subscriptions_);
  swap(recostream_dislikes_, other->recostream_dislikes_);
  swap(vk_groups_for_user_, other->vk_groups_for_user_);
  swap(logs_visited_sources_, other->logs_visited_sources_);
  swap(kafka_sources_subscriptions_, other->kafka_sources_subscriptions_);
  swap(recostream_likes_, other->recostream_likes_);
  swap(user_likes_, other->user_likes_);
  swap(user_sources_events_, other->user_sources_events_);
  swap(narrow_sites_, other->narrow_sites_);
  swap(narrow_sites1_, other->narrow_sites1_);
  swap(reactions_, other->reactions_);
  swap(shows_, other->shows_);
  swap(i2i_user_themes_, other->i2i_user_themes_);
  swap(user_id_, other->user_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserData

// optional int64 user_id = 1;
bool UserData::has_user_id() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void UserData::set_has_user_id() {
  _has_bits_[1] |= 0x00010000u;
}
void UserData::clear_has_user_id() {
  _has_bits_[1] &= ~0x00010000u;
}
void UserData::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
::google::protobuf::int64 UserData::user_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_id)
  return user_id_;
}
void UserData::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.user_id)
}

// optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
bool UserData::has_socdem_fea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserData::set_has_socdem_fea() {
  _has_bits_[0] |= 0x00000001u;
}
void UserData::clear_has_socdem_fea() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserData::clear_socdem_fea() {
  if (socdem_fea_ != NULL) socdem_fea_->::cosmo::pb::UserData_SocDemFea::Clear();
  clear_has_socdem_fea();
}
const ::cosmo::pb::UserData_SocDemFea& UserData::socdem_fea() const {
  const ::cosmo::pb::UserData_SocDemFea* p = socdem_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.socdem_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SocDemFea*>(
      &::cosmo::pb::_UserData_SocDemFea_default_instance_);
}
::cosmo::pb::UserData_SocDemFea* UserData::mutable_socdem_fea() {
  set_has_socdem_fea();
  if (socdem_fea_ == NULL) {
    _slow_mutable_socdem_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.socdem_fea)
  return socdem_fea_;
}
::cosmo::pb::UserData_SocDemFea* UserData::release_socdem_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.socdem_fea)
  clear_has_socdem_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_socdem_fea();
  } else {
    ::cosmo::pb::UserData_SocDemFea* temp = socdem_fea_;
    socdem_fea_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_socdem_fea(::cosmo::pb::UserData_SocDemFea* socdem_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete socdem_fea_;
  }
  if (socdem_fea != NULL) {
    _slow_set_allocated_socdem_fea(message_arena, &socdem_fea);
  }
  socdem_fea_ = socdem_fea;
  if (socdem_fea) {
    set_has_socdem_fea();
  } else {
    clear_has_socdem_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.socdem_fea)
}

// optional .cosmo.pb.UserData.AlsFea als_fea = 3;
bool UserData::has_als_fea() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserData::set_has_als_fea() {
  _has_bits_[0] |= 0x00000002u;
}
void UserData::clear_has_als_fea() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserData::clear_als_fea() {
  if (als_fea_ != NULL) als_fea_->::cosmo::pb::UserData_AlsFea::Clear();
  clear_has_als_fea();
}
const ::cosmo::pb::UserData_AlsFea& UserData::als_fea() const {
  const ::cosmo::pb::UserData_AlsFea* p = als_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsFea*>(
      &::cosmo::pb::_UserData_AlsFea_default_instance_);
}
::cosmo::pb::UserData_AlsFea* UserData::mutable_als_fea() {
  set_has_als_fea();
  if (als_fea_ == NULL) {
    _slow_mutable_als_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_fea)
  return als_fea_;
}
::cosmo::pb::UserData_AlsFea* UserData::release_als_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_fea)
  clear_has_als_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_fea();
  } else {
    ::cosmo::pb::UserData_AlsFea* temp = als_fea_;
    als_fea_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_als_fea(::cosmo::pb::UserData_AlsFea* als_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_fea_;
  }
  if (als_fea != NULL) {
    _slow_set_allocated_als_fea(message_arena, &als_fea);
  }
  als_fea_ = als_fea;
  if (als_fea) {
    set_has_als_fea();
  } else {
    clear_has_als_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_fea)
}

// optional .cosmo.pb.UserData.OkInfo ok_info = 4;
bool UserData::has_ok_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserData::set_has_ok_info() {
  _has_bits_[0] |= 0x00000004u;
}
void UserData::clear_has_ok_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserData::clear_ok_info() {
  if (ok_info_ != NULL) ok_info_->::cosmo::pb::UserData_OkInfo::Clear();
  clear_has_ok_info();
}
const ::cosmo::pb::UserData_OkInfo& UserData::ok_info() const {
  const ::cosmo::pb::UserData_OkInfo* p = ok_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ok_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_OkInfo*>(
      &::cosmo::pb::_UserData_OkInfo_default_instance_);
}
::cosmo::pb::UserData_OkInfo* UserData::mutable_ok_info() {
  set_has_ok_info();
  if (ok_info_ == NULL) {
    _slow_mutable_ok_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.ok_info)
  return ok_info_;
}
::cosmo::pb::UserData_OkInfo* UserData::release_ok_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.ok_info)
  clear_has_ok_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_info();
  } else {
    ::cosmo::pb::UserData_OkInfo* temp = ok_info_;
    ok_info_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_ok_info(::cosmo::pb::UserData_OkInfo* ok_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_info_;
  }
  if (ok_info != NULL) {
    _slow_set_allocated_ok_info(message_arena, &ok_info);
  }
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.ok_info)
}

// optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
bool UserData::has_deti_reco() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserData::set_has_deti_reco() {
  _has_bits_[0] |= 0x00000008u;
}
void UserData::clear_has_deti_reco() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserData::clear_deti_reco() {
  if (deti_reco_ != NULL) deti_reco_->::cosmo::pb::UserData_DetiRecos::Clear();
  clear_has_deti_reco();
}
const ::cosmo::pb::UserData_DetiRecos& UserData::deti_reco() const {
  const ::cosmo::pb::UserData_DetiRecos* p = deti_reco_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.deti_reco)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_DetiRecos*>(
      &::cosmo::pb::_UserData_DetiRecos_default_instance_);
}
::cosmo::pb::UserData_DetiRecos* UserData::mutable_deti_reco() {
  set_has_deti_reco();
  if (deti_reco_ == NULL) {
    _slow_mutable_deti_reco();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.deti_reco)
  return deti_reco_;
}
::cosmo::pb::UserData_DetiRecos* UserData::release_deti_reco() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.deti_reco)
  clear_has_deti_reco();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_deti_reco();
  } else {
    ::cosmo::pb::UserData_DetiRecos* temp = deti_reco_;
    deti_reco_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_deti_reco(::cosmo::pb::UserData_DetiRecos* deti_reco) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deti_reco_;
  }
  if (deti_reco != NULL) {
    _slow_set_allocated_deti_reco(message_arena, &deti_reco);
  }
  deti_reco_ = deti_reco;
  if (deti_reco) {
    set_has_deti_reco();
  } else {
    clear_has_deti_reco();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.deti_reco)
}

// optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
bool UserData::has_als_items_fea() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserData::set_has_als_items_fea() {
  _has_bits_[0] |= 0x00000010u;
}
void UserData::clear_has_als_items_fea() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserData::clear_als_items_fea() {
  if (als_items_fea_ != NULL) als_items_fea_->::cosmo::pb::UserData_AlsItemsBiases::Clear();
  clear_has_als_items_fea();
}
const ::cosmo::pb::UserData_AlsItemsBiases& UserData::als_items_fea() const {
  const ::cosmo::pb::UserData_AlsItemsBiases* p = als_items_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_items_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsItemsBiases*>(
      &::cosmo::pb::_UserData_AlsItemsBiases_default_instance_);
}
::cosmo::pb::UserData_AlsItemsBiases* UserData::mutable_als_items_fea() {
  set_has_als_items_fea();
  if (als_items_fea_ == NULL) {
    _slow_mutable_als_items_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_items_fea)
  return als_items_fea_;
}
::cosmo::pb::UserData_AlsItemsBiases* UserData::release_als_items_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_items_fea)
  clear_has_als_items_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_items_fea();
  } else {
    ::cosmo::pb::UserData_AlsItemsBiases* temp = als_items_fea_;
    als_items_fea_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_als_items_fea(::cosmo::pb::UserData_AlsItemsBiases* als_items_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_items_fea_;
  }
  if (als_items_fea != NULL) {
    _slow_set_allocated_als_items_fea(message_arena, &als_items_fea);
  }
  als_items_fea_ = als_items_fea;
  if (als_items_fea) {
    set_has_als_items_fea();
  } else {
    clear_has_als_items_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_items_fea)
}

// optional .cosmo.pb.UserData.NewsSources news_sources = 7;
bool UserData::has_news_sources() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserData::set_has_news_sources() {
  _has_bits_[0] |= 0x00000020u;
}
void UserData::clear_has_news_sources() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserData::clear_news_sources() {
  if (news_sources_ != NULL) news_sources_->::cosmo::pb::UserData_NewsSources::Clear();
  clear_has_news_sources();
}
const ::cosmo::pb::UserData_NewsSources& UserData::news_sources() const {
  const ::cosmo::pb::UserData_NewsSources* p = news_sources_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.news_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_NewsSources*>(
      &::cosmo::pb::_UserData_NewsSources_default_instance_);
}
::cosmo::pb::UserData_NewsSources* UserData::mutable_news_sources() {
  set_has_news_sources();
  if (news_sources_ == NULL) {
    _slow_mutable_news_sources();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.news_sources)
  return news_sources_;
}
::cosmo::pb::UserData_NewsSources* UserData::release_news_sources() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.news_sources)
  clear_has_news_sources();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_news_sources();
  } else {
    ::cosmo::pb::UserData_NewsSources* temp = news_sources_;
    news_sources_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_news_sources(::cosmo::pb::UserData_NewsSources* news_sources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete news_sources_;
  }
  if (news_sources != NULL) {
    _slow_set_allocated_news_sources(message_arena, &news_sources);
  }
  news_sources_ = news_sources;
  if (news_sources) {
    set_has_news_sources();
  } else {
    clear_has_news_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.news_sources)
}

// optional .cosmo.pb.UserData.Stats stats = 8;
bool UserData::has_stats() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserData::set_has_stats() {
  _has_bits_[0] |= 0x00000040u;
}
void UserData::clear_has_stats() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserData::clear_stats() {
  if (stats_ != NULL) stats_->::cosmo::pb::UserData_Stats::Clear();
  clear_has_stats();
}
const ::cosmo::pb::UserData_Stats& UserData::stats() const {
  const ::cosmo::pb::UserData_Stats* p = stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_Stats*>(
      &::cosmo::pb::_UserData_Stats_default_instance_);
}
::cosmo::pb::UserData_Stats* UserData::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    _slow_mutable_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.stats)
  return stats_;
}
::cosmo::pb::UserData_Stats* UserData::release_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.stats)
  clear_has_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stats();
  } else {
    ::cosmo::pb::UserData_Stats* temp = stats_;
    stats_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_stats(::cosmo::pb::UserData_Stats* stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stats_;
  }
  if (stats != NULL) {
    _slow_set_allocated_stats(message_arena, &stats);
  }
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.stats)
}

// optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
bool UserData::has_original_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserData::set_has_original_info() {
  _has_bits_[0] |= 0x00000080u;
}
void UserData::clear_has_original_info() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserData::clear_original_info() {
  if (original_info_ != NULL) original_info_->::cosmo::pb::UserData_OriginalInfo::Clear();
  clear_has_original_info();
}
const ::cosmo::pb::UserData_OriginalInfo& UserData::original_info() const {
  const ::cosmo::pb::UserData_OriginalInfo* p = original_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.original_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_OriginalInfo*>(
      &::cosmo::pb::_UserData_OriginalInfo_default_instance_);
}
::cosmo::pb::UserData_OriginalInfo* UserData::mutable_original_info() {
  set_has_original_info();
  if (original_info_ == NULL) {
    _slow_mutable_original_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.original_info)
  return original_info_;
}
::cosmo::pb::UserData_OriginalInfo* UserData::release_original_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.original_info)
  clear_has_original_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_info();
  } else {
    ::cosmo::pb::UserData_OriginalInfo* temp = original_info_;
    original_info_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_original_info(::cosmo::pb::UserData_OriginalInfo* original_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_info_;
  }
  if (original_info != NULL) {
    _slow_set_allocated_original_info(message_arena, &original_info);
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.original_info)
}

// optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
bool UserData::has_als_fea_2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserData::set_has_als_fea_2() {
  _has_bits_[0] |= 0x00000100u;
}
void UserData::clear_has_als_fea_2() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserData::clear_als_fea_2() {
  if (als_fea_2_ != NULL) als_fea_2_->::cosmo::pb::UserData_AlsFea::Clear();
  clear_has_als_fea_2();
}
const ::cosmo::pb::UserData_AlsFea& UserData::als_fea_2() const {
  const ::cosmo::pb::UserData_AlsFea* p = als_fea_2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_fea_2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsFea*>(
      &::cosmo::pb::_UserData_AlsFea_default_instance_);
}
::cosmo::pb::UserData_AlsFea* UserData::mutable_als_fea_2() {
  set_has_als_fea_2();
  if (als_fea_2_ == NULL) {
    _slow_mutable_als_fea_2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_fea_2)
  return als_fea_2_;
}
::cosmo::pb::UserData_AlsFea* UserData::release_als_fea_2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_fea_2)
  clear_has_als_fea_2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_fea_2();
  } else {
    ::cosmo::pb::UserData_AlsFea* temp = als_fea_2_;
    als_fea_2_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_als_fea_2(::cosmo::pb::UserData_AlsFea* als_fea_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_fea_2_;
  }
  if (als_fea_2 != NULL) {
    _slow_set_allocated_als_fea_2(message_arena, &als_fea_2);
  }
  als_fea_2_ = als_fea_2;
  if (als_fea_2) {
    set_has_als_fea_2();
  } else {
    clear_has_als_fea_2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_fea_2)
}

// optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
bool UserData::has_sources_web_stats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserData::set_has_sources_web_stats() {
  _has_bits_[0] |= 0x00000200u;
}
void UserData::clear_has_sources_web_stats() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserData::clear_sources_web_stats() {
  if (sources_web_stats_ != NULL) sources_web_stats_->::cosmo::pb::UserData_SourcesWebStats::Clear();
  clear_has_sources_web_stats();
}
const ::cosmo::pb::UserData_SourcesWebStats& UserData::sources_web_stats() const {
  const ::cosmo::pb::UserData_SourcesWebStats* p = sources_web_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sources_web_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SourcesWebStats*>(
      &::cosmo::pb::_UserData_SourcesWebStats_default_instance_);
}
::cosmo::pb::UserData_SourcesWebStats* UserData::mutable_sources_web_stats() {
  set_has_sources_web_stats();
  if (sources_web_stats_ == NULL) {
    _slow_mutable_sources_web_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sources_web_stats)
  return sources_web_stats_;
}
::cosmo::pb::UserData_SourcesWebStats* UserData::release_sources_web_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sources_web_stats)
  clear_has_sources_web_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sources_web_stats();
  } else {
    ::cosmo::pb::UserData_SourcesWebStats* temp = sources_web_stats_;
    sources_web_stats_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_sources_web_stats(::cosmo::pb::UserData_SourcesWebStats* sources_web_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sources_web_stats_;
  }
  if (sources_web_stats != NULL) {
    _slow_set_allocated_sources_web_stats(message_arena, &sources_web_stats);
  }
  sources_web_stats_ = sources_web_stats;
  if (sources_web_stats) {
    set_has_sources_web_stats();
  } else {
    clear_has_sources_web_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sources_web_stats)
}

// optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
bool UserData::has_sources_reco_stats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserData::set_has_sources_reco_stats() {
  _has_bits_[0] |= 0x00000400u;
}
void UserData::clear_has_sources_reco_stats() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserData::clear_sources_reco_stats() {
  if (sources_reco_stats_ != NULL) sources_reco_stats_->::cosmo::pb::UserData_Stats::Clear();
  clear_has_sources_reco_stats();
}
const ::cosmo::pb::UserData_Stats& UserData::sources_reco_stats() const {
  const ::cosmo::pb::UserData_Stats* p = sources_reco_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sources_reco_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_Stats*>(
      &::cosmo::pb::_UserData_Stats_default_instance_);
}
::cosmo::pb::UserData_Stats* UserData::mutable_sources_reco_stats() {
  set_has_sources_reco_stats();
  if (sources_reco_stats_ == NULL) {
    _slow_mutable_sources_reco_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sources_reco_stats)
  return sources_reco_stats_;
}
::cosmo::pb::UserData_Stats* UserData::release_sources_reco_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sources_reco_stats)
  clear_has_sources_reco_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sources_reco_stats();
  } else {
    ::cosmo::pb::UserData_Stats* temp = sources_reco_stats_;
    sources_reco_stats_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_sources_reco_stats(::cosmo::pb::UserData_Stats* sources_reco_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sources_reco_stats_;
  }
  if (sources_reco_stats != NULL) {
    _slow_set_allocated_sources_reco_stats(message_arena, &sources_reco_stats);
  }
  sources_reco_stats_ = sources_reco_stats;
  if (sources_reco_stats) {
    set_has_sources_reco_stats();
  } else {
    clear_has_sources_reco_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sources_reco_stats)
}

// optional .cosmo.pb.UserData.UserLinks user_links = 13;
bool UserData::has_user_links() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UserData::set_has_user_links() {
  _has_bits_[0] |= 0x00000800u;
}
void UserData::clear_has_user_links() {
  _has_bits_[0] &= ~0x00000800u;
}
void UserData::clear_user_links() {
  if (user_links_ != NULL) user_links_->::cosmo::pb::UserData_UserLinks::Clear();
  clear_has_user_links();
}
const ::cosmo::pb::UserData_UserLinks& UserData::user_links() const {
  const ::cosmo::pb::UserData_UserLinks* p = user_links_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_links)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserLinks*>(
      &::cosmo::pb::_UserData_UserLinks_default_instance_);
}
::cosmo::pb::UserData_UserLinks* UserData::mutable_user_links() {
  set_has_user_links();
  if (user_links_ == NULL) {
    _slow_mutable_user_links();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_links)
  return user_links_;
}
::cosmo::pb::UserData_UserLinks* UserData::release_user_links() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_links)
  clear_has_user_links();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_links();
  } else {
    ::cosmo::pb::UserData_UserLinks* temp = user_links_;
    user_links_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_user_links(::cosmo::pb::UserData_UserLinks* user_links) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_links_;
  }
  if (user_links != NULL) {
    _slow_set_allocated_user_links(message_arena, &user_links);
  }
  user_links_ = user_links;
  if (user_links) {
    set_has_user_links();
  } else {
    clear_has_user_links();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_links)
}

// optional .cosmo.pb.UserData.UserClusters user_clusters = 14;
bool UserData::has_user_clusters() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UserData::set_has_user_clusters() {
  _has_bits_[0] |= 0x00001000u;
}
void UserData::clear_has_user_clusters() {
  _has_bits_[0] &= ~0x00001000u;
}
void UserData::clear_user_clusters() {
  if (user_clusters_ != NULL) user_clusters_->::cosmo::pb::UserData_UserClusters::Clear();
  clear_has_user_clusters();
}
const ::cosmo::pb::UserData_UserClusters& UserData::user_clusters() const {
  const ::cosmo::pb::UserData_UserClusters* p = user_clusters_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_clusters)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserClusters*>(
      &::cosmo::pb::_UserData_UserClusters_default_instance_);
}
::cosmo::pb::UserData_UserClusters* UserData::mutable_user_clusters() {
  set_has_user_clusters();
  if (user_clusters_ == NULL) {
    _slow_mutable_user_clusters();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_clusters)
  return user_clusters_;
}
::cosmo::pb::UserData_UserClusters* UserData::release_user_clusters() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_clusters)
  clear_has_user_clusters();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_clusters();
  } else {
    ::cosmo::pb::UserData_UserClusters* temp = user_clusters_;
    user_clusters_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_user_clusters(::cosmo::pb::UserData_UserClusters* user_clusters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_clusters_;
  }
  if (user_clusters != NULL) {
    _slow_set_allocated_user_clusters(message_arena, &user_clusters);
  }
  user_clusters_ = user_clusters;
  if (user_clusters) {
    set_has_user_clusters();
  } else {
    clear_has_user_clusters();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_clusters)
}

// optional .cosmo.pb.UserData.SimilarSites similar_sites = 15;
bool UserData::has_similar_sites() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void UserData::set_has_similar_sites() {
  _has_bits_[0] |= 0x00002000u;
}
void UserData::clear_has_similar_sites() {
  _has_bits_[0] &= ~0x00002000u;
}
void UserData::clear_similar_sites() {
  if (similar_sites_ != NULL) similar_sites_->::cosmo::pb::UserData_SimilarSites::Clear();
  clear_has_similar_sites();
}
const ::cosmo::pb::UserData_SimilarSites& UserData::similar_sites() const {
  const ::cosmo::pb::UserData_SimilarSites* p = similar_sites_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.similar_sites)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SimilarSites*>(
      &::cosmo::pb::_UserData_SimilarSites_default_instance_);
}
::cosmo::pb::UserData_SimilarSites* UserData::mutable_similar_sites() {
  set_has_similar_sites();
  if (similar_sites_ == NULL) {
    _slow_mutable_similar_sites();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.similar_sites)
  return similar_sites_;
}
::cosmo::pb::UserData_SimilarSites* UserData::release_similar_sites() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.similar_sites)
  clear_has_similar_sites();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_similar_sites();
  } else {
    ::cosmo::pb::UserData_SimilarSites* temp = similar_sites_;
    similar_sites_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_similar_sites(::cosmo::pb::UserData_SimilarSites* similar_sites) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete similar_sites_;
  }
  if (similar_sites != NULL) {
    _slow_set_allocated_similar_sites(message_arena, &similar_sites);
  }
  similar_sites_ = similar_sites;
  if (similar_sites) {
    set_has_similar_sites();
  } else {
    clear_has_similar_sites();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.similar_sites)
}

// optional .cosmo.pb.UserData.ContentThemes content_themes = 17;
bool UserData::has_content_themes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UserData::set_has_content_themes() {
  _has_bits_[0] |= 0x00004000u;
}
void UserData::clear_has_content_themes() {
  _has_bits_[0] &= ~0x00004000u;
}
void UserData::clear_content_themes() {
  if (content_themes_ != NULL) content_themes_->::cosmo::pb::UserData_ContentThemes::Clear();
  clear_has_content_themes();
}
const ::cosmo::pb::UserData_ContentThemes& UserData::content_themes() const {
  const ::cosmo::pb::UserData_ContentThemes* p = content_themes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.content_themes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_ContentThemes*>(
      &::cosmo::pb::_UserData_ContentThemes_default_instance_);
}
::cosmo::pb::UserData_ContentThemes* UserData::mutable_content_themes() {
  set_has_content_themes();
  if (content_themes_ == NULL) {
    _slow_mutable_content_themes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.content_themes)
  return content_themes_;
}
::cosmo::pb::UserData_ContentThemes* UserData::release_content_themes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.content_themes)
  clear_has_content_themes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_content_themes();
  } else {
    ::cosmo::pb::UserData_ContentThemes* temp = content_themes_;
    content_themes_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_content_themes(::cosmo::pb::UserData_ContentThemes* content_themes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_themes_;
  }
  if (content_themes != NULL) {
    _slow_set_allocated_content_themes(message_arena, &content_themes);
  }
  content_themes_ = content_themes;
  if (content_themes) {
    set_has_content_themes();
  } else {
    clear_has_content_themes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.content_themes)
}

// optional .cosmo.pb.UserData.StaticRecos static_recos_1 = 18;
bool UserData::has_static_recos_1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void UserData::set_has_static_recos_1() {
  _has_bits_[0] |= 0x00008000u;
}
void UserData::clear_has_static_recos_1() {
  _has_bits_[0] &= ~0x00008000u;
}
void UserData::clear_static_recos_1() {
  if (static_recos_1_ != NULL) static_recos_1_->::cosmo::pb::UserData_StaticRecos::Clear();
  clear_has_static_recos_1();
}
const ::cosmo::pb::UserData_StaticRecos& UserData::static_recos_1() const {
  const ::cosmo::pb::UserData_StaticRecos* p = static_recos_1_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.static_recos_1)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_StaticRecos*>(
      &::cosmo::pb::_UserData_StaticRecos_default_instance_);
}
::cosmo::pb::UserData_StaticRecos* UserData::mutable_static_recos_1() {
  set_has_static_recos_1();
  if (static_recos_1_ == NULL) {
    _slow_mutable_static_recos_1();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.static_recos_1)
  return static_recos_1_;
}
::cosmo::pb::UserData_StaticRecos* UserData::release_static_recos_1() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.static_recos_1)
  clear_has_static_recos_1();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_static_recos_1();
  } else {
    ::cosmo::pb::UserData_StaticRecos* temp = static_recos_1_;
    static_recos_1_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_static_recos_1(::cosmo::pb::UserData_StaticRecos* static_recos_1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete static_recos_1_;
  }
  if (static_recos_1 != NULL) {
    _slow_set_allocated_static_recos_1(message_arena, &static_recos_1);
  }
  static_recos_1_ = static_recos_1;
  if (static_recos_1) {
    set_has_static_recos_1();
  } else {
    clear_has_static_recos_1();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.static_recos_1)
}

// optional .cosmo.pb.UserData.StaticRecos static_recos_2 = 19;
bool UserData::has_static_recos_2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void UserData::set_has_static_recos_2() {
  _has_bits_[0] |= 0x00010000u;
}
void UserData::clear_has_static_recos_2() {
  _has_bits_[0] &= ~0x00010000u;
}
void UserData::clear_static_recos_2() {
  if (static_recos_2_ != NULL) static_recos_2_->::cosmo::pb::UserData_StaticRecos::Clear();
  clear_has_static_recos_2();
}
const ::cosmo::pb::UserData_StaticRecos& UserData::static_recos_2() const {
  const ::cosmo::pb::UserData_StaticRecos* p = static_recos_2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.static_recos_2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_StaticRecos*>(
      &::cosmo::pb::_UserData_StaticRecos_default_instance_);
}
::cosmo::pb::UserData_StaticRecos* UserData::mutable_static_recos_2() {
  set_has_static_recos_2();
  if (static_recos_2_ == NULL) {
    _slow_mutable_static_recos_2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.static_recos_2)
  return static_recos_2_;
}
::cosmo::pb::UserData_StaticRecos* UserData::release_static_recos_2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.static_recos_2)
  clear_has_static_recos_2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_static_recos_2();
  } else {
    ::cosmo::pb::UserData_StaticRecos* temp = static_recos_2_;
    static_recos_2_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_static_recos_2(::cosmo::pb::UserData_StaticRecos* static_recos_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete static_recos_2_;
  }
  if (static_recos_2 != NULL) {
    _slow_set_allocated_static_recos_2(message_arena, &static_recos_2);
  }
  static_recos_2_ = static_recos_2;
  if (static_recos_2) {
    set_has_static_recos_2();
  } else {
    clear_has_static_recos_2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.static_recos_2)
}

// optional .cosmo.pb.UserData.SitesForUser sites_for_user = 20;
bool UserData::has_sites_for_user() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void UserData::set_has_sites_for_user() {
  _has_bits_[0] |= 0x00020000u;
}
void UserData::clear_has_sites_for_user() {
  _has_bits_[0] &= ~0x00020000u;
}
void UserData::clear_sites_for_user() {
  if (sites_for_user_ != NULL) sites_for_user_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_sites_for_user();
}
const ::cosmo::pb::UserData_SitesForUser& UserData::sites_for_user() const {
  const ::cosmo::pb::UserData_SitesForUser* p = sites_for_user_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sites_for_user)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
::cosmo::pb::UserData_SitesForUser* UserData::mutable_sites_for_user() {
  set_has_sites_for_user();
  if (sites_for_user_ == NULL) {
    _slow_mutable_sites_for_user();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sites_for_user)
  return sites_for_user_;
}
::cosmo::pb::UserData_SitesForUser* UserData::release_sites_for_user() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sites_for_user)
  clear_has_sites_for_user();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sites_for_user();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user_;
    sites_for_user_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_sites_for_user(::cosmo::pb::UserData_SitesForUser* sites_for_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sites_for_user_;
  }
  if (sites_for_user != NULL) {
    _slow_set_allocated_sites_for_user(message_arena, &sites_for_user);
  }
  sites_for_user_ = sites_for_user;
  if (sites_for_user) {
    set_has_sites_for_user();
  } else {
    clear_has_sites_for_user();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sites_for_user)
}

// optional .cosmo.pb.UserData.UserKeywords keywords_daily = 21;
bool UserData::has_keywords_daily() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void UserData::set_has_keywords_daily() {
  _has_bits_[0] |= 0x00040000u;
}
void UserData::clear_has_keywords_daily() {
  _has_bits_[0] &= ~0x00040000u;
}
void UserData::clear_keywords_daily() {
  if (keywords_daily_ != NULL) keywords_daily_->::cosmo::pb::UserData_UserKeywords::Clear();
  clear_has_keywords_daily();
}
const ::cosmo::pb::UserData_UserKeywords& UserData::keywords_daily() const {
  const ::cosmo::pb::UserData_UserKeywords* p = keywords_daily_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.keywords_daily)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserKeywords*>(
      &::cosmo::pb::_UserData_UserKeywords_default_instance_);
}
::cosmo::pb::UserData_UserKeywords* UserData::mutable_keywords_daily() {
  set_has_keywords_daily();
  if (keywords_daily_ == NULL) {
    _slow_mutable_keywords_daily();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.keywords_daily)
  return keywords_daily_;
}
::cosmo::pb::UserData_UserKeywords* UserData::release_keywords_daily() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.keywords_daily)
  clear_has_keywords_daily();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_keywords_daily();
  } else {
    ::cosmo::pb::UserData_UserKeywords* temp = keywords_daily_;
    keywords_daily_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_keywords_daily(::cosmo::pb::UserData_UserKeywords* keywords_daily) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete keywords_daily_;
  }
  if (keywords_daily != NULL) {
    _slow_set_allocated_keywords_daily(message_arena, &keywords_daily);
  }
  keywords_daily_ = keywords_daily;
  if (keywords_daily) {
    set_has_keywords_daily();
  } else {
    clear_has_keywords_daily();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.keywords_daily)
}

// optional .cosmo.pb.UserData.UserKeywords keywords_monthly = 22;
bool UserData::has_keywords_monthly() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void UserData::set_has_keywords_monthly() {
  _has_bits_[0] |= 0x00080000u;
}
void UserData::clear_has_keywords_monthly() {
  _has_bits_[0] &= ~0x00080000u;
}
void UserData::clear_keywords_monthly() {
  if (keywords_monthly_ != NULL) keywords_monthly_->::cosmo::pb::UserData_UserKeywords::Clear();
  clear_has_keywords_monthly();
}
const ::cosmo::pb::UserData_UserKeywords& UserData::keywords_monthly() const {
  const ::cosmo::pb::UserData_UserKeywords* p = keywords_monthly_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.keywords_monthly)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserKeywords*>(
      &::cosmo::pb::_UserData_UserKeywords_default_instance_);
}
::cosmo::pb::UserData_UserKeywords* UserData::mutable_keywords_monthly() {
  set_has_keywords_monthly();
  if (keywords_monthly_ == NULL) {
    _slow_mutable_keywords_monthly();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.keywords_monthly)
  return keywords_monthly_;
}
::cosmo::pb::UserData_UserKeywords* UserData::release_keywords_monthly() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.keywords_monthly)
  clear_has_keywords_monthly();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_keywords_monthly();
  } else {
    ::cosmo::pb::UserData_UserKeywords* temp = keywords_monthly_;
    keywords_monthly_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_keywords_monthly(::cosmo::pb::UserData_UserKeywords* keywords_monthly) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete keywords_monthly_;
  }
  if (keywords_monthly != NULL) {
    _slow_set_allocated_keywords_monthly(message_arena, &keywords_monthly);
  }
  keywords_monthly_ = keywords_monthly;
  if (keywords_monthly) {
    set_has_keywords_monthly();
  } else {
    clear_has_keywords_monthly();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.keywords_monthly)
}

// optional .cosmo.pb.UserData.SitesForUser sites_for_user1 = 23;
bool UserData::has_sites_for_user1() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void UserData::set_has_sites_for_user1() {
  _has_bits_[0] |= 0x00100000u;
}
void UserData::clear_has_sites_for_user1() {
  _has_bits_[0] &= ~0x00100000u;
}
void UserData::clear_sites_for_user1() {
  if (sites_for_user1_ != NULL) sites_for_user1_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_sites_for_user1();
}
const ::cosmo::pb::UserData_SitesForUser& UserData::sites_for_user1() const {
  const ::cosmo::pb::UserData_SitesForUser* p = sites_for_user1_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sites_for_user1)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
::cosmo::pb::UserData_SitesForUser* UserData::mutable_sites_for_user1() {
  set_has_sites_for_user1();
  if (sites_for_user1_ == NULL) {
    _slow_mutable_sites_for_user1();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sites_for_user1)
  return sites_for_user1_;
}
::cosmo::pb::UserData_SitesForUser* UserData::release_sites_for_user1() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sites_for_user1)
  clear_has_sites_for_user1();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sites_for_user1();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user1_;
    sites_for_user1_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_sites_for_user1(::cosmo::pb::UserData_SitesForUser* sites_for_user1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sites_for_user1_;
  }
  if (sites_for_user1 != NULL) {
    _slow_set_allocated_sites_for_user1(message_arena, &sites_for_user1);
  }
  sites_for_user1_ = sites_for_user1;
  if (sites_for_user1) {
    set_has_sites_for_user1();
  } else {
    clear_has_sites_for_user1();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sites_for_user1)
}

// optional .cosmo.pb.UserData.SitesForUser sites_for_user2 = 24;
bool UserData::has_sites_for_user2() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void UserData::set_has_sites_for_user2() {
  _has_bits_[0] |= 0x00200000u;
}
void UserData::clear_has_sites_for_user2() {
  _has_bits_[0] &= ~0x00200000u;
}
void UserData::clear_sites_for_user2() {
  if (sites_for_user2_ != NULL) sites_for_user2_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_sites_for_user2();
}
const ::cosmo::pb::UserData_SitesForUser& UserData::sites_for_user2() const {
  const ::cosmo::pb::UserData_SitesForUser* p = sites_for_user2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sites_for_user2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
::cosmo::pb::UserData_SitesForUser* UserData::mutable_sites_for_user2() {
  set_has_sites_for_user2();
  if (sites_for_user2_ == NULL) {
    _slow_mutable_sites_for_user2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sites_for_user2)
  return sites_for_user2_;
}
::cosmo::pb::UserData_SitesForUser* UserData::release_sites_for_user2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sites_for_user2)
  clear_has_sites_for_user2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sites_for_user2();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user2_;
    sites_for_user2_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_sites_for_user2(::cosmo::pb::UserData_SitesForUser* sites_for_user2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sites_for_user2_;
  }
  if (sites_for_user2 != NULL) {
    _slow_set_allocated_sites_for_user2(message_arena, &sites_for_user2);
  }
  sites_for_user2_ = sites_for_user2;
  if (sites_for_user2) {
    set_has_sites_for_user2();
  } else {
    clear_has_sites_for_user2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sites_for_user2)
}

// optional .cosmo.pb.UserData.VisitedDocs visited_docs = 25;
bool UserData::has_visited_docs() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void UserData::set_has_visited_docs() {
  _has_bits_[0] |= 0x00400000u;
}
void UserData::clear_has_visited_docs() {
  _has_bits_[0] &= ~0x00400000u;
}
void UserData::clear_visited_docs() {
  if (visited_docs_ != NULL) visited_docs_->::cosmo::pb::UserData_VisitedDocs::Clear();
  clear_has_visited_docs();
}
const ::cosmo::pb::UserData_VisitedDocs& UserData::visited_docs() const {
  const ::cosmo::pb::UserData_VisitedDocs* p = visited_docs_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.visited_docs)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_VisitedDocs*>(
      &::cosmo::pb::_UserData_VisitedDocs_default_instance_);
}
::cosmo::pb::UserData_VisitedDocs* UserData::mutable_visited_docs() {
  set_has_visited_docs();
  if (visited_docs_ == NULL) {
    _slow_mutable_visited_docs();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.visited_docs)
  return visited_docs_;
}
::cosmo::pb::UserData_VisitedDocs* UserData::release_visited_docs() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.visited_docs)
  clear_has_visited_docs();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_visited_docs();
  } else {
    ::cosmo::pb::UserData_VisitedDocs* temp = visited_docs_;
    visited_docs_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_visited_docs(::cosmo::pb::UserData_VisitedDocs* visited_docs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete visited_docs_;
  }
  if (visited_docs != NULL) {
    _slow_set_allocated_visited_docs(message_arena, &visited_docs);
  }
  visited_docs_ = visited_docs;
  if (visited_docs) {
    set_has_visited_docs();
  } else {
    clear_has_visited_docs();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.visited_docs)
}

// optional .cosmo.pb.UserData.SitesForUser sites_for_user3 = 26;
bool UserData::has_sites_for_user3() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void UserData::set_has_sites_for_user3() {
  _has_bits_[0] |= 0x00800000u;
}
void UserData::clear_has_sites_for_user3() {
  _has_bits_[0] &= ~0x00800000u;
}
void UserData::clear_sites_for_user3() {
  if (sites_for_user3_ != NULL) sites_for_user3_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_sites_for_user3();
}
const ::cosmo::pb::UserData_SitesForUser& UserData::sites_for_user3() const {
  const ::cosmo::pb::UserData_SitesForUser* p = sites_for_user3_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sites_for_user3)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
::cosmo::pb::UserData_SitesForUser* UserData::mutable_sites_for_user3() {
  set_has_sites_for_user3();
  if (sites_for_user3_ == NULL) {
    _slow_mutable_sites_for_user3();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sites_for_user3)
  return sites_for_user3_;
}
::cosmo::pb::UserData_SitesForUser* UserData::release_sites_for_user3() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sites_for_user3)
  clear_has_sites_for_user3();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sites_for_user3();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user3_;
    sites_for_user3_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_sites_for_user3(::cosmo::pb::UserData_SitesForUser* sites_for_user3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sites_for_user3_;
  }
  if (sites_for_user3 != NULL) {
    _slow_set_allocated_sites_for_user3(message_arena, &sites_for_user3);
  }
  sites_for_user3_ = sites_for_user3;
  if (sites_for_user3) {
    set_has_sites_for_user3();
  } else {
    clear_has_sites_for_user3();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sites_for_user3)
}

// optional .cosmo.pb.UserData.LogsVisitedDocs logs_visited_docs = 27;
bool UserData::has_logs_visited_docs() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void UserData::set_has_logs_visited_docs() {
  _has_bits_[0] |= 0x01000000u;
}
void UserData::clear_has_logs_visited_docs() {
  _has_bits_[0] &= ~0x01000000u;
}
void UserData::clear_logs_visited_docs() {
  if (logs_visited_docs_ != NULL) logs_visited_docs_->::cosmo::pb::UserData_LogsVisitedDocs::Clear();
  clear_has_logs_visited_docs();
}
const ::cosmo::pb::UserData_LogsVisitedDocs& UserData::logs_visited_docs() const {
  const ::cosmo::pb::UserData_LogsVisitedDocs* p = logs_visited_docs_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.logs_visited_docs)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_LogsVisitedDocs*>(
      &::cosmo::pb::_UserData_LogsVisitedDocs_default_instance_);
}
::cosmo::pb::UserData_LogsVisitedDocs* UserData::mutable_logs_visited_docs() {
  set_has_logs_visited_docs();
  if (logs_visited_docs_ == NULL) {
    _slow_mutable_logs_visited_docs();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.logs_visited_docs)
  return logs_visited_docs_;
}
::cosmo::pb::UserData_LogsVisitedDocs* UserData::release_logs_visited_docs() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.logs_visited_docs)
  clear_has_logs_visited_docs();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_logs_visited_docs();
  } else {
    ::cosmo::pb::UserData_LogsVisitedDocs* temp = logs_visited_docs_;
    logs_visited_docs_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_logs_visited_docs(::cosmo::pb::UserData_LogsVisitedDocs* logs_visited_docs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logs_visited_docs_;
  }
  if (logs_visited_docs != NULL) {
    _slow_set_allocated_logs_visited_docs(message_arena, &logs_visited_docs);
  }
  logs_visited_docs_ = logs_visited_docs;
  if (logs_visited_docs) {
    set_has_logs_visited_docs();
  } else {
    clear_has_logs_visited_docs();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.logs_visited_docs)
}

// optional .cosmo.pb.UserData.SitesForUser sites_for_user4 = 28;
bool UserData::has_sites_for_user4() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void UserData::set_has_sites_for_user4() {
  _has_bits_[0] |= 0x02000000u;
}
void UserData::clear_has_sites_for_user4() {
  _has_bits_[0] &= ~0x02000000u;
}
void UserData::clear_sites_for_user4() {
  if (sites_for_user4_ != NULL) sites_for_user4_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_sites_for_user4();
}
const ::cosmo::pb::UserData_SitesForUser& UserData::sites_for_user4() const {
  const ::cosmo::pb::UserData_SitesForUser* p = sites_for_user4_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sites_for_user4)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
::cosmo::pb::UserData_SitesForUser* UserData::mutable_sites_for_user4() {
  set_has_sites_for_user4();
  if (sites_for_user4_ == NULL) {
    _slow_mutable_sites_for_user4();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sites_for_user4)
  return sites_for_user4_;
}
::cosmo::pb::UserData_SitesForUser* UserData::release_sites_for_user4() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sites_for_user4)
  clear_has_sites_for_user4();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sites_for_user4();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user4_;
    sites_for_user4_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_sites_for_user4(::cosmo::pb::UserData_SitesForUser* sites_for_user4) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sites_for_user4_;
  }
  if (sites_for_user4 != NULL) {
    _slow_set_allocated_sites_for_user4(message_arena, &sites_for_user4);
  }
  sites_for_user4_ = sites_for_user4;
  if (sites_for_user4) {
    set_has_sites_for_user4();
  } else {
    clear_has_sites_for_user4();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sites_for_user4)
}

// optional .cosmo.pb.UserData.UserThemesEvents user_themes = 29;
bool UserData::has_user_themes() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void UserData::set_has_user_themes() {
  _has_bits_[0] |= 0x04000000u;
}
void UserData::clear_has_user_themes() {
  _has_bits_[0] &= ~0x04000000u;
}
void UserData::clear_user_themes() {
  if (user_themes_ != NULL) user_themes_->::cosmo::pb::UserData_UserThemesEvents::Clear();
  clear_has_user_themes();
}
const ::cosmo::pb::UserData_UserThemesEvents& UserData::user_themes() const {
  const ::cosmo::pb::UserData_UserThemesEvents* p = user_themes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_themes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents*>(
      &::cosmo::pb::_UserData_UserThemesEvents_default_instance_);
}
::cosmo::pb::UserData_UserThemesEvents* UserData::mutable_user_themes() {
  set_has_user_themes();
  if (user_themes_ == NULL) {
    _slow_mutable_user_themes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_themes)
  return user_themes_;
}
::cosmo::pb::UserData_UserThemesEvents* UserData::release_user_themes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_themes)
  clear_has_user_themes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_themes();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents* temp = user_themes_;
    user_themes_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_user_themes(::cosmo::pb::UserData_UserThemesEvents* user_themes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_themes_;
  }
  if (user_themes != NULL) {
    _slow_set_allocated_user_themes(message_arena, &user_themes);
  }
  user_themes_ = user_themes;
  if (user_themes) {
    set_has_user_themes();
  } else {
    clear_has_user_themes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_themes)
}

// optional .cosmo.pb.UserData.UserEvents user_dislikes = 30;
bool UserData::has_user_dislikes() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void UserData::set_has_user_dislikes() {
  _has_bits_[0] |= 0x08000000u;
}
void UserData::clear_has_user_dislikes() {
  _has_bits_[0] &= ~0x08000000u;
}
void UserData::clear_user_dislikes() {
  if (user_dislikes_ != NULL) user_dislikes_->::cosmo::pb::UserData_UserEvents::Clear();
  clear_has_user_dislikes();
}
const ::cosmo::pb::UserData_UserEvents& UserData::user_dislikes() const {
  const ::cosmo::pb::UserData_UserEvents* p = user_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserEvents*>(
      &::cosmo::pb::_UserData_UserEvents_default_instance_);
}
::cosmo::pb::UserData_UserEvents* UserData::mutable_user_dislikes() {
  set_has_user_dislikes();
  if (user_dislikes_ == NULL) {
    _slow_mutable_user_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_dislikes)
  return user_dislikes_;
}
::cosmo::pb::UserData_UserEvents* UserData::release_user_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_dislikes)
  clear_has_user_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_dislikes();
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = user_dislikes_;
    user_dislikes_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_user_dislikes(::cosmo::pb::UserData_UserEvents* user_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_dislikes_;
  }
  if (user_dislikes != NULL) {
    _slow_set_allocated_user_dislikes(message_arena, &user_dislikes);
  }
  user_dislikes_ = user_dislikes;
  if (user_dislikes) {
    set_has_user_dislikes();
  } else {
    clear_has_user_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_dislikes)
}

// optional .cosmo.pb.UserData.UserVideos user_videos = 31;
bool UserData::has_user_videos() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void UserData::set_has_user_videos() {
  _has_bits_[0] |= 0x10000000u;
}
void UserData::clear_has_user_videos() {
  _has_bits_[0] &= ~0x10000000u;
}
void UserData::clear_user_videos() {
  if (user_videos_ != NULL) user_videos_->::cosmo::pb::UserData_UserVideos::Clear();
  clear_has_user_videos();
}
const ::cosmo::pb::UserData_UserVideos& UserData::user_videos() const {
  const ::cosmo::pb::UserData_UserVideos* p = user_videos_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_videos)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideos*>(
      &::cosmo::pb::_UserData_UserVideos_default_instance_);
}
::cosmo::pb::UserData_UserVideos* UserData::mutable_user_videos() {
  set_has_user_videos();
  if (user_videos_ == NULL) {
    _slow_mutable_user_videos();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_videos)
  return user_videos_;
}
::cosmo::pb::UserData_UserVideos* UserData::release_user_videos() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_videos)
  clear_has_user_videos();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_videos();
  } else {
    ::cosmo::pb::UserData_UserVideos* temp = user_videos_;
    user_videos_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_user_videos(::cosmo::pb::UserData_UserVideos* user_videos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_videos_;
  }
  if (user_videos != NULL) {
    _slow_set_allocated_user_videos(message_arena, &user_videos);
  }
  user_videos_ = user_videos;
  if (user_videos) {
    set_has_user_videos();
  } else {
    clear_has_user_videos();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_videos)
}

// optional .cosmo.pb.UserData.UserVideoEvents user_video_events = 32;
bool UserData::has_user_video_events() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void UserData::set_has_user_video_events() {
  _has_bits_[0] |= 0x20000000u;
}
void UserData::clear_has_user_video_events() {
  _has_bits_[0] &= ~0x20000000u;
}
void UserData::clear_user_video_events() {
  if (user_video_events_ != NULL) user_video_events_->::cosmo::pb::UserData_UserVideoEvents::Clear();
  clear_has_user_video_events();
}
const ::cosmo::pb::UserData_UserVideoEvents& UserData::user_video_events() const {
  const ::cosmo::pb::UserData_UserVideoEvents* p = user_video_events_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_video_events)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents*>(
      &::cosmo::pb::_UserData_UserVideoEvents_default_instance_);
}
::cosmo::pb::UserData_UserVideoEvents* UserData::mutable_user_video_events() {
  set_has_user_video_events();
  if (user_video_events_ == NULL) {
    _slow_mutable_user_video_events();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_video_events)
  return user_video_events_;
}
::cosmo::pb::UserData_UserVideoEvents* UserData::release_user_video_events() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_video_events)
  clear_has_user_video_events();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_video_events();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents* temp = user_video_events_;
    user_video_events_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_user_video_events(::cosmo::pb::UserData_UserVideoEvents* user_video_events) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_video_events_;
  }
  if (user_video_events != NULL) {
    _slow_set_allocated_user_video_events(message_arena, &user_video_events);
  }
  user_video_events_ = user_video_events;
  if (user_video_events) {
    set_has_user_video_events();
  } else {
    clear_has_user_video_events();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_video_events)
}

// optional .cosmo.pb.UserData.UserMusic user_music = 33;
bool UserData::has_user_music() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void UserData::set_has_user_music() {
  _has_bits_[0] |= 0x40000000u;
}
void UserData::clear_has_user_music() {
  _has_bits_[0] &= ~0x40000000u;
}
void UserData::clear_user_music() {
  if (user_music_ != NULL) user_music_->::cosmo::pb::UserData_UserMusic::Clear();
  clear_has_user_music();
}
const ::cosmo::pb::UserData_UserMusic& UserData::user_music() const {
  const ::cosmo::pb::UserData_UserMusic* p = user_music_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_music)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserMusic*>(
      &::cosmo::pb::_UserData_UserMusic_default_instance_);
}
::cosmo::pb::UserData_UserMusic* UserData::mutable_user_music() {
  set_has_user_music();
  if (user_music_ == NULL) {
    _slow_mutable_user_music();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_music)
  return user_music_;
}
::cosmo::pb::UserData_UserMusic* UserData::release_user_music() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_music)
  clear_has_user_music();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_music();
  } else {
    ::cosmo::pb::UserData_UserMusic* temp = user_music_;
    user_music_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_user_music(::cosmo::pb::UserData_UserMusic* user_music) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_music_;
  }
  if (user_music != NULL) {
    _slow_set_allocated_user_music(message_arena, &user_music);
  }
  user_music_ = user_music;
  if (user_music) {
    set_has_user_music();
  } else {
    clear_has_user_music();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_music)
}

// optional .cosmo.pb.UserData.SubscriptionInfo recostream_categories_subscriptions = 34;
bool UserData::has_recostream_categories_subscriptions() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void UserData::set_has_recostream_categories_subscriptions() {
  _has_bits_[0] |= 0x80000000u;
}
void UserData::clear_has_recostream_categories_subscriptions() {
  _has_bits_[0] &= ~0x80000000u;
}
void UserData::clear_recostream_categories_subscriptions() {
  if (recostream_categories_subscriptions_ != NULL) recostream_categories_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_recostream_categories_subscriptions();
}
const ::cosmo::pb::UserData_SubscriptionInfo& UserData::recostream_categories_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = recostream_categories_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.recostream_categories_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_recostream_categories_subscriptions() {
  set_has_recostream_categories_subscriptions();
  if (recostream_categories_subscriptions_ == NULL) {
    _slow_mutable_recostream_categories_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.recostream_categories_subscriptions)
  return recostream_categories_subscriptions_;
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::release_recostream_categories_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.recostream_categories_subscriptions)
  clear_has_recostream_categories_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_recostream_categories_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = recostream_categories_subscriptions_;
    recostream_categories_subscriptions_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_recostream_categories_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* recostream_categories_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recostream_categories_subscriptions_;
  }
  if (recostream_categories_subscriptions != NULL) {
    _slow_set_allocated_recostream_categories_subscriptions(message_arena, &recostream_categories_subscriptions);
  }
  recostream_categories_subscriptions_ = recostream_categories_subscriptions;
  if (recostream_categories_subscriptions) {
    set_has_recostream_categories_subscriptions();
  } else {
    clear_has_recostream_categories_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.recostream_categories_subscriptions)
}

// optional .cosmo.pb.UserData.SubscriptionInfo recostream_domains_subscriptions = 35;
bool UserData::has_recostream_domains_subscriptions() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void UserData::set_has_recostream_domains_subscriptions() {
  _has_bits_[1] |= 0x00000001u;
}
void UserData::clear_has_recostream_domains_subscriptions() {
  _has_bits_[1] &= ~0x00000001u;
}
void UserData::clear_recostream_domains_subscriptions() {
  if (recostream_domains_subscriptions_ != NULL) recostream_domains_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_recostream_domains_subscriptions();
}
const ::cosmo::pb::UserData_SubscriptionInfo& UserData::recostream_domains_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = recostream_domains_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.recostream_domains_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_recostream_domains_subscriptions() {
  set_has_recostream_domains_subscriptions();
  if (recostream_domains_subscriptions_ == NULL) {
    _slow_mutable_recostream_domains_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.recostream_domains_subscriptions)
  return recostream_domains_subscriptions_;
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::release_recostream_domains_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.recostream_domains_subscriptions)
  clear_has_recostream_domains_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_recostream_domains_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = recostream_domains_subscriptions_;
    recostream_domains_subscriptions_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_recostream_domains_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* recostream_domains_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recostream_domains_subscriptions_;
  }
  if (recostream_domains_subscriptions != NULL) {
    _slow_set_allocated_recostream_domains_subscriptions(message_arena, &recostream_domains_subscriptions);
  }
  recostream_domains_subscriptions_ = recostream_domains_subscriptions;
  if (recostream_domains_subscriptions) {
    set_has_recostream_domains_subscriptions();
  } else {
    clear_has_recostream_domains_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.recostream_domains_subscriptions)
}

// optional .cosmo.pb.UserData.SubscriptionInfo kafka_categories_subscriptions = 36;
bool UserData::has_kafka_categories_subscriptions() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void UserData::set_has_kafka_categories_subscriptions() {
  _has_bits_[1] |= 0x00000002u;
}
void UserData::clear_has_kafka_categories_subscriptions() {
  _has_bits_[1] &= ~0x00000002u;
}
void UserData::clear_kafka_categories_subscriptions() {
  if (kafka_categories_subscriptions_ != NULL) kafka_categories_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_kafka_categories_subscriptions();
}
const ::cosmo::pb::UserData_SubscriptionInfo& UserData::kafka_categories_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = kafka_categories_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.kafka_categories_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_kafka_categories_subscriptions() {
  set_has_kafka_categories_subscriptions();
  if (kafka_categories_subscriptions_ == NULL) {
    _slow_mutable_kafka_categories_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.kafka_categories_subscriptions)
  return kafka_categories_subscriptions_;
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::release_kafka_categories_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.kafka_categories_subscriptions)
  clear_has_kafka_categories_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_kafka_categories_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = kafka_categories_subscriptions_;
    kafka_categories_subscriptions_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_kafka_categories_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* kafka_categories_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kafka_categories_subscriptions_;
  }
  if (kafka_categories_subscriptions != NULL) {
    _slow_set_allocated_kafka_categories_subscriptions(message_arena, &kafka_categories_subscriptions);
  }
  kafka_categories_subscriptions_ = kafka_categories_subscriptions;
  if (kafka_categories_subscriptions) {
    set_has_kafka_categories_subscriptions();
  } else {
    clear_has_kafka_categories_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.kafka_categories_subscriptions)
}

// optional .cosmo.pb.UserData.SubscriptionInfo kafka_domains_subscriptions = 37;
bool UserData::has_kafka_domains_subscriptions() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void UserData::set_has_kafka_domains_subscriptions() {
  _has_bits_[1] |= 0x00000004u;
}
void UserData::clear_has_kafka_domains_subscriptions() {
  _has_bits_[1] &= ~0x00000004u;
}
void UserData::clear_kafka_domains_subscriptions() {
  if (kafka_domains_subscriptions_ != NULL) kafka_domains_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_kafka_domains_subscriptions();
}
const ::cosmo::pb::UserData_SubscriptionInfo& UserData::kafka_domains_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = kafka_domains_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.kafka_domains_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_kafka_domains_subscriptions() {
  set_has_kafka_domains_subscriptions();
  if (kafka_domains_subscriptions_ == NULL) {
    _slow_mutable_kafka_domains_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.kafka_domains_subscriptions)
  return kafka_domains_subscriptions_;
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::release_kafka_domains_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.kafka_domains_subscriptions)
  clear_has_kafka_domains_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_kafka_domains_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = kafka_domains_subscriptions_;
    kafka_domains_subscriptions_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_kafka_domains_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* kafka_domains_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kafka_domains_subscriptions_;
  }
  if (kafka_domains_subscriptions != NULL) {
    _slow_set_allocated_kafka_domains_subscriptions(message_arena, &kafka_domains_subscriptions);
  }
  kafka_domains_subscriptions_ = kafka_domains_subscriptions;
  if (kafka_domains_subscriptions) {
    set_has_kafka_domains_subscriptions();
  } else {
    clear_has_kafka_domains_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.kafka_domains_subscriptions)
}

// optional .cosmo.pb.UserData.SubscriptionInfo recostream_sources_subscriptions = 38;
bool UserData::has_recostream_sources_subscriptions() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void UserData::set_has_recostream_sources_subscriptions() {
  _has_bits_[1] |= 0x00000008u;
}
void UserData::clear_has_recostream_sources_subscriptions() {
  _has_bits_[1] &= ~0x00000008u;
}
void UserData::clear_recostream_sources_subscriptions() {
  if (recostream_sources_subscriptions_ != NULL) recostream_sources_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_recostream_sources_subscriptions();
}
const ::cosmo::pb::UserData_SubscriptionInfo& UserData::recostream_sources_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = recostream_sources_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.recostream_sources_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_recostream_sources_subscriptions() {
  set_has_recostream_sources_subscriptions();
  if (recostream_sources_subscriptions_ == NULL) {
    _slow_mutable_recostream_sources_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.recostream_sources_subscriptions)
  return recostream_sources_subscriptions_;
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::release_recostream_sources_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.recostream_sources_subscriptions)
  clear_has_recostream_sources_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_recostream_sources_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = recostream_sources_subscriptions_;
    recostream_sources_subscriptions_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_recostream_sources_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* recostream_sources_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recostream_sources_subscriptions_;
  }
  if (recostream_sources_subscriptions != NULL) {
    _slow_set_allocated_recostream_sources_subscriptions(message_arena, &recostream_sources_subscriptions);
  }
  recostream_sources_subscriptions_ = recostream_sources_subscriptions;
  if (recostream_sources_subscriptions) {
    set_has_recostream_sources_subscriptions();
  } else {
    clear_has_recostream_sources_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.recostream_sources_subscriptions)
}

// optional .cosmo.pb.UserData.UserEvents recostream_dislikes = 39;
bool UserData::has_recostream_dislikes() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void UserData::set_has_recostream_dislikes() {
  _has_bits_[1] |= 0x00000010u;
}
void UserData::clear_has_recostream_dislikes() {
  _has_bits_[1] &= ~0x00000010u;
}
void UserData::clear_recostream_dislikes() {
  if (recostream_dislikes_ != NULL) recostream_dislikes_->::cosmo::pb::UserData_UserEvents::Clear();
  clear_has_recostream_dislikes();
}
const ::cosmo::pb::UserData_UserEvents& UserData::recostream_dislikes() const {
  const ::cosmo::pb::UserData_UserEvents* p = recostream_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.recostream_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserEvents*>(
      &::cosmo::pb::_UserData_UserEvents_default_instance_);
}
::cosmo::pb::UserData_UserEvents* UserData::mutable_recostream_dislikes() {
  set_has_recostream_dislikes();
  if (recostream_dislikes_ == NULL) {
    _slow_mutable_recostream_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.recostream_dislikes)
  return recostream_dislikes_;
}
::cosmo::pb::UserData_UserEvents* UserData::release_recostream_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.recostream_dislikes)
  clear_has_recostream_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_recostream_dislikes();
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = recostream_dislikes_;
    recostream_dislikes_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_recostream_dislikes(::cosmo::pb::UserData_UserEvents* recostream_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recostream_dislikes_;
  }
  if (recostream_dislikes != NULL) {
    _slow_set_allocated_recostream_dislikes(message_arena, &recostream_dislikes);
  }
  recostream_dislikes_ = recostream_dislikes;
  if (recostream_dislikes) {
    set_has_recostream_dislikes();
  } else {
    clear_has_recostream_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.recostream_dislikes)
}

// optional .cosmo.pb.UserData.VkGroupsForUser vk_groups_for_user = 40;
bool UserData::has_vk_groups_for_user() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void UserData::set_has_vk_groups_for_user() {
  _has_bits_[1] |= 0x00000020u;
}
void UserData::clear_has_vk_groups_for_user() {
  _has_bits_[1] &= ~0x00000020u;
}
void UserData::clear_vk_groups_for_user() {
  if (vk_groups_for_user_ != NULL) vk_groups_for_user_->::cosmo::pb::UserData_VkGroupsForUser::Clear();
  clear_has_vk_groups_for_user();
}
const ::cosmo::pb::UserData_VkGroupsForUser& UserData::vk_groups_for_user() const {
  const ::cosmo::pb::UserData_VkGroupsForUser* p = vk_groups_for_user_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.vk_groups_for_user)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_VkGroupsForUser*>(
      &::cosmo::pb::_UserData_VkGroupsForUser_default_instance_);
}
::cosmo::pb::UserData_VkGroupsForUser* UserData::mutable_vk_groups_for_user() {
  set_has_vk_groups_for_user();
  if (vk_groups_for_user_ == NULL) {
    _slow_mutable_vk_groups_for_user();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.vk_groups_for_user)
  return vk_groups_for_user_;
}
::cosmo::pb::UserData_VkGroupsForUser* UserData::release_vk_groups_for_user() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.vk_groups_for_user)
  clear_has_vk_groups_for_user();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_groups_for_user();
  } else {
    ::cosmo::pb::UserData_VkGroupsForUser* temp = vk_groups_for_user_;
    vk_groups_for_user_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_vk_groups_for_user(::cosmo::pb::UserData_VkGroupsForUser* vk_groups_for_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_groups_for_user_;
  }
  if (vk_groups_for_user != NULL) {
    _slow_set_allocated_vk_groups_for_user(message_arena, &vk_groups_for_user);
  }
  vk_groups_for_user_ = vk_groups_for_user;
  if (vk_groups_for_user) {
    set_has_vk_groups_for_user();
  } else {
    clear_has_vk_groups_for_user();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.vk_groups_for_user)
}

// optional .cosmo.pb.UserData.LogsVisitedSources logs_visited_sources = 41;
bool UserData::has_logs_visited_sources() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void UserData::set_has_logs_visited_sources() {
  _has_bits_[1] |= 0x00000040u;
}
void UserData::clear_has_logs_visited_sources() {
  _has_bits_[1] &= ~0x00000040u;
}
void UserData::clear_logs_visited_sources() {
  if (logs_visited_sources_ != NULL) logs_visited_sources_->::cosmo::pb::UserData_LogsVisitedSources::Clear();
  clear_has_logs_visited_sources();
}
const ::cosmo::pb::UserData_LogsVisitedSources& UserData::logs_visited_sources() const {
  const ::cosmo::pb::UserData_LogsVisitedSources* p = logs_visited_sources_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.logs_visited_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_LogsVisitedSources*>(
      &::cosmo::pb::_UserData_LogsVisitedSources_default_instance_);
}
::cosmo::pb::UserData_LogsVisitedSources* UserData::mutable_logs_visited_sources() {
  set_has_logs_visited_sources();
  if (logs_visited_sources_ == NULL) {
    _slow_mutable_logs_visited_sources();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.logs_visited_sources)
  return logs_visited_sources_;
}
::cosmo::pb::UserData_LogsVisitedSources* UserData::release_logs_visited_sources() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.logs_visited_sources)
  clear_has_logs_visited_sources();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_logs_visited_sources();
  } else {
    ::cosmo::pb::UserData_LogsVisitedSources* temp = logs_visited_sources_;
    logs_visited_sources_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_logs_visited_sources(::cosmo::pb::UserData_LogsVisitedSources* logs_visited_sources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logs_visited_sources_;
  }
  if (logs_visited_sources != NULL) {
    _slow_set_allocated_logs_visited_sources(message_arena, &logs_visited_sources);
  }
  logs_visited_sources_ = logs_visited_sources;
  if (logs_visited_sources) {
    set_has_logs_visited_sources();
  } else {
    clear_has_logs_visited_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.logs_visited_sources)
}

// optional .cosmo.pb.UserData.SubscriptionInfo kafka_sources_subscriptions = 42;
bool UserData::has_kafka_sources_subscriptions() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void UserData::set_has_kafka_sources_subscriptions() {
  _has_bits_[1] |= 0x00000080u;
}
void UserData::clear_has_kafka_sources_subscriptions() {
  _has_bits_[1] &= ~0x00000080u;
}
void UserData::clear_kafka_sources_subscriptions() {
  if (kafka_sources_subscriptions_ != NULL) kafka_sources_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_kafka_sources_subscriptions();
}
const ::cosmo::pb::UserData_SubscriptionInfo& UserData::kafka_sources_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = kafka_sources_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.kafka_sources_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_kafka_sources_subscriptions() {
  set_has_kafka_sources_subscriptions();
  if (kafka_sources_subscriptions_ == NULL) {
    _slow_mutable_kafka_sources_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.kafka_sources_subscriptions)
  return kafka_sources_subscriptions_;
}
::cosmo::pb::UserData_SubscriptionInfo* UserData::release_kafka_sources_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.kafka_sources_subscriptions)
  clear_has_kafka_sources_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_kafka_sources_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = kafka_sources_subscriptions_;
    kafka_sources_subscriptions_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_kafka_sources_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* kafka_sources_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kafka_sources_subscriptions_;
  }
  if (kafka_sources_subscriptions != NULL) {
    _slow_set_allocated_kafka_sources_subscriptions(message_arena, &kafka_sources_subscriptions);
  }
  kafka_sources_subscriptions_ = kafka_sources_subscriptions;
  if (kafka_sources_subscriptions) {
    set_has_kafka_sources_subscriptions();
  } else {
    clear_has_kafka_sources_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.kafka_sources_subscriptions)
}

// optional .cosmo.pb.UserData.UserEvents recostream_likes = 43;
bool UserData::has_recostream_likes() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void UserData::set_has_recostream_likes() {
  _has_bits_[1] |= 0x00000100u;
}
void UserData::clear_has_recostream_likes() {
  _has_bits_[1] &= ~0x00000100u;
}
void UserData::clear_recostream_likes() {
  if (recostream_likes_ != NULL) recostream_likes_->::cosmo::pb::UserData_UserEvents::Clear();
  clear_has_recostream_likes();
}
const ::cosmo::pb::UserData_UserEvents& UserData::recostream_likes() const {
  const ::cosmo::pb::UserData_UserEvents* p = recostream_likes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.recostream_likes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserEvents*>(
      &::cosmo::pb::_UserData_UserEvents_default_instance_);
}
::cosmo::pb::UserData_UserEvents* UserData::mutable_recostream_likes() {
  set_has_recostream_likes();
  if (recostream_likes_ == NULL) {
    _slow_mutable_recostream_likes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.recostream_likes)
  return recostream_likes_;
}
::cosmo::pb::UserData_UserEvents* UserData::release_recostream_likes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.recostream_likes)
  clear_has_recostream_likes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_recostream_likes();
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = recostream_likes_;
    recostream_likes_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_recostream_likes(::cosmo::pb::UserData_UserEvents* recostream_likes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recostream_likes_;
  }
  if (recostream_likes != NULL) {
    _slow_set_allocated_recostream_likes(message_arena, &recostream_likes);
  }
  recostream_likes_ = recostream_likes;
  if (recostream_likes) {
    set_has_recostream_likes();
  } else {
    clear_has_recostream_likes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.recostream_likes)
}

// optional .cosmo.pb.UserData.UserEvents user_likes = 44;
bool UserData::has_user_likes() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void UserData::set_has_user_likes() {
  _has_bits_[1] |= 0x00000200u;
}
void UserData::clear_has_user_likes() {
  _has_bits_[1] &= ~0x00000200u;
}
void UserData::clear_user_likes() {
  if (user_likes_ != NULL) user_likes_->::cosmo::pb::UserData_UserEvents::Clear();
  clear_has_user_likes();
}
const ::cosmo::pb::UserData_UserEvents& UserData::user_likes() const {
  const ::cosmo::pb::UserData_UserEvents* p = user_likes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_likes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserEvents*>(
      &::cosmo::pb::_UserData_UserEvents_default_instance_);
}
::cosmo::pb::UserData_UserEvents* UserData::mutable_user_likes() {
  set_has_user_likes();
  if (user_likes_ == NULL) {
    _slow_mutable_user_likes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_likes)
  return user_likes_;
}
::cosmo::pb::UserData_UserEvents* UserData::release_user_likes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_likes)
  clear_has_user_likes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_likes();
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = user_likes_;
    user_likes_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_user_likes(::cosmo::pb::UserData_UserEvents* user_likes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_likes_;
  }
  if (user_likes != NULL) {
    _slow_set_allocated_user_likes(message_arena, &user_likes);
  }
  user_likes_ = user_likes;
  if (user_likes) {
    set_has_user_likes();
  } else {
    clear_has_user_likes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_likes)
}

// optional .cosmo.pb.UserData.UserSourcesEvents user_sources_events = 45;
bool UserData::has_user_sources_events() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void UserData::set_has_user_sources_events() {
  _has_bits_[1] |= 0x00000400u;
}
void UserData::clear_has_user_sources_events() {
  _has_bits_[1] &= ~0x00000400u;
}
void UserData::clear_user_sources_events() {
  if (user_sources_events_ != NULL) user_sources_events_->::cosmo::pb::UserData_UserSourcesEvents::Clear();
  clear_has_user_sources_events();
}
const ::cosmo::pb::UserData_UserSourcesEvents& UserData::user_sources_events() const {
  const ::cosmo::pb::UserData_UserSourcesEvents* p = user_sources_events_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_sources_events)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserSourcesEvents*>(
      &::cosmo::pb::_UserData_UserSourcesEvents_default_instance_);
}
::cosmo::pb::UserData_UserSourcesEvents* UserData::mutable_user_sources_events() {
  set_has_user_sources_events();
  if (user_sources_events_ == NULL) {
    _slow_mutable_user_sources_events();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_sources_events)
  return user_sources_events_;
}
::cosmo::pb::UserData_UserSourcesEvents* UserData::release_user_sources_events() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_sources_events)
  clear_has_user_sources_events();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_sources_events();
  } else {
    ::cosmo::pb::UserData_UserSourcesEvents* temp = user_sources_events_;
    user_sources_events_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_user_sources_events(::cosmo::pb::UserData_UserSourcesEvents* user_sources_events) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_sources_events_;
  }
  if (user_sources_events != NULL) {
    _slow_set_allocated_user_sources_events(message_arena, &user_sources_events);
  }
  user_sources_events_ = user_sources_events;
  if (user_sources_events) {
    set_has_user_sources_events();
  } else {
    clear_has_user_sources_events();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_sources_events)
}

// optional .cosmo.pb.UserData.SitesForUser narrow_sites = 46;
bool UserData::has_narrow_sites() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void UserData::set_has_narrow_sites() {
  _has_bits_[1] |= 0x00000800u;
}
void UserData::clear_has_narrow_sites() {
  _has_bits_[1] &= ~0x00000800u;
}
void UserData::clear_narrow_sites() {
  if (narrow_sites_ != NULL) narrow_sites_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_narrow_sites();
}
const ::cosmo::pb::UserData_SitesForUser& UserData::narrow_sites() const {
  const ::cosmo::pb::UserData_SitesForUser* p = narrow_sites_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.narrow_sites)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
::cosmo::pb::UserData_SitesForUser* UserData::mutable_narrow_sites() {
  set_has_narrow_sites();
  if (narrow_sites_ == NULL) {
    _slow_mutable_narrow_sites();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.narrow_sites)
  return narrow_sites_;
}
::cosmo::pb::UserData_SitesForUser* UserData::release_narrow_sites() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.narrow_sites)
  clear_has_narrow_sites();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_narrow_sites();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = narrow_sites_;
    narrow_sites_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_narrow_sites(::cosmo::pb::UserData_SitesForUser* narrow_sites) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete narrow_sites_;
  }
  if (narrow_sites != NULL) {
    _slow_set_allocated_narrow_sites(message_arena, &narrow_sites);
  }
  narrow_sites_ = narrow_sites;
  if (narrow_sites) {
    set_has_narrow_sites();
  } else {
    clear_has_narrow_sites();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.narrow_sites)
}

// optional .cosmo.pb.UserData.SitesForUser narrow_sites1 = 47;
bool UserData::has_narrow_sites1() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void UserData::set_has_narrow_sites1() {
  _has_bits_[1] |= 0x00001000u;
}
void UserData::clear_has_narrow_sites1() {
  _has_bits_[1] &= ~0x00001000u;
}
void UserData::clear_narrow_sites1() {
  if (narrow_sites1_ != NULL) narrow_sites1_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_narrow_sites1();
}
const ::cosmo::pb::UserData_SitesForUser& UserData::narrow_sites1() const {
  const ::cosmo::pb::UserData_SitesForUser* p = narrow_sites1_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.narrow_sites1)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
::cosmo::pb::UserData_SitesForUser* UserData::mutable_narrow_sites1() {
  set_has_narrow_sites1();
  if (narrow_sites1_ == NULL) {
    _slow_mutable_narrow_sites1();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.narrow_sites1)
  return narrow_sites1_;
}
::cosmo::pb::UserData_SitesForUser* UserData::release_narrow_sites1() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.narrow_sites1)
  clear_has_narrow_sites1();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_narrow_sites1();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = narrow_sites1_;
    narrow_sites1_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_narrow_sites1(::cosmo::pb::UserData_SitesForUser* narrow_sites1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete narrow_sites1_;
  }
  if (narrow_sites1 != NULL) {
    _slow_set_allocated_narrow_sites1(message_arena, &narrow_sites1);
  }
  narrow_sites1_ = narrow_sites1;
  if (narrow_sites1) {
    set_has_narrow_sites1();
  } else {
    clear_has_narrow_sites1();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.narrow_sites1)
}

// optional .cosmo.pb.PackedReactionsArr reactions = 48;
bool UserData::has_reactions() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void UserData::set_has_reactions() {
  _has_bits_[1] |= 0x00002000u;
}
void UserData::clear_has_reactions() {
  _has_bits_[1] &= ~0x00002000u;
}
void UserData::clear_reactions() {
  if (reactions_ != NULL) reactions_->::cosmo::pb::PackedReactionsArr::Clear();
  clear_has_reactions();
}
const ::cosmo::pb::PackedReactionsArr& UserData::reactions() const {
  const ::cosmo::pb::PackedReactionsArr* p = reactions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.reactions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::PackedReactionsArr*>(
      &::cosmo::pb::_PackedReactionsArr_default_instance_);
}
::cosmo::pb::PackedReactionsArr* UserData::mutable_reactions() {
  set_has_reactions();
  if (reactions_ == NULL) {
    _slow_mutable_reactions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.reactions)
  return reactions_;
}
::cosmo::pb::PackedReactionsArr* UserData::release_reactions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.reactions)
  clear_has_reactions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_reactions();
  } else {
    ::cosmo::pb::PackedReactionsArr* temp = reactions_;
    reactions_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_reactions(::cosmo::pb::PackedReactionsArr* reactions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reactions_;
  }
  if (reactions != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(reactions);
    }
  }
  reactions_ = reactions;
  if (reactions) {
    set_has_reactions();
  } else {
    clear_has_reactions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.reactions)
}

// optional .cosmo.pb.ShowsArr shows = 49;
bool UserData::has_shows() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void UserData::set_has_shows() {
  _has_bits_[1] |= 0x00004000u;
}
void UserData::clear_has_shows() {
  _has_bits_[1] &= ~0x00004000u;
}
void UserData::clear_shows() {
  if (shows_ != NULL) shows_->::cosmo::pb::ShowsArr::Clear();
  clear_has_shows();
}
const ::cosmo::pb::ShowsArr& UserData::shows() const {
  const ::cosmo::pb::ShowsArr* p = shows_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.shows)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::ShowsArr*>(
      &::cosmo::pb::_ShowsArr_default_instance_);
}
::cosmo::pb::ShowsArr* UserData::mutable_shows() {
  set_has_shows();
  if (shows_ == NULL) {
    _slow_mutable_shows();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.shows)
  return shows_;
}
::cosmo::pb::ShowsArr* UserData::release_shows() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.shows)
  clear_has_shows();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows();
  } else {
    ::cosmo::pb::ShowsArr* temp = shows_;
    shows_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_shows(::cosmo::pb::ShowsArr* shows) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_;
  }
  if (shows != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(shows);
    }
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.shows)
}

// optional .cosmo.pb.UserData.UserI2IEvents i2i_user_themes = 50;
bool UserData::has_i2i_user_themes() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void UserData::set_has_i2i_user_themes() {
  _has_bits_[1] |= 0x00008000u;
}
void UserData::clear_has_i2i_user_themes() {
  _has_bits_[1] &= ~0x00008000u;
}
void UserData::clear_i2i_user_themes() {
  if (i2i_user_themes_ != NULL) i2i_user_themes_->::cosmo::pb::UserData_UserI2IEvents::Clear();
  clear_has_i2i_user_themes();
}
const ::cosmo::pb::UserData_UserI2IEvents& UserData::i2i_user_themes() const {
  const ::cosmo::pb::UserData_UserI2IEvents* p = i2i_user_themes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.i2i_user_themes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents*>(
      &::cosmo::pb::_UserData_UserI2IEvents_default_instance_);
}
::cosmo::pb::UserData_UserI2IEvents* UserData::mutable_i2i_user_themes() {
  set_has_i2i_user_themes();
  if (i2i_user_themes_ == NULL) {
    _slow_mutable_i2i_user_themes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.i2i_user_themes)
  return i2i_user_themes_;
}
::cosmo::pb::UserData_UserI2IEvents* UserData::release_i2i_user_themes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.i2i_user_themes)
  clear_has_i2i_user_themes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_i2i_user_themes();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents* temp = i2i_user_themes_;
    i2i_user_themes_ = NULL;
    return temp;
  }
}
 void UserData::set_allocated_i2i_user_themes(::cosmo::pb::UserData_UserI2IEvents* i2i_user_themes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete i2i_user_themes_;
  }
  if (i2i_user_themes != NULL) {
    _slow_set_allocated_i2i_user_themes(message_arena, &i2i_user_themes);
  }
  i2i_user_themes_ = i2i_user_themes;
  if (i2i_user_themes) {
    set_has_i2i_user_themes();
  } else {
    clear_has_i2i_user_themes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.i2i_user_themes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GroupedUserData::_slow_mutable_data() {
  data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData* GroupedUserData::_slow_release_data() {
  if (data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData* temp = new ::cosmo::pb::UserData(*data_);
    data_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData* GroupedUserData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.GroupedUserData.data)
  clear_has_data();
  ::cosmo::pb::UserData* temp = data_;
  data_ = NULL;
  return temp;
}
void GroupedUserData::_slow_set_allocated_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData** data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*data) == NULL) {
      message_arena->Own(*data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*data)) {
      ::cosmo::pb::UserData* new_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData >(
            message_arena);
      new_data->CopyFrom(**data);
      *data = new_data;
    }
}
void GroupedUserData::unsafe_arena_set_allocated_data(
    ::cosmo::pb::UserData* data) {
  if (GetArenaNoVirtual() == NULL) {
    delete data_;
  }
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.GroupedUserData.data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupedUserData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupedUserData::GroupedUserData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.GroupedUserData)
}
GroupedUserData::GroupedUserData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.GroupedUserData)
}
GroupedUserData::GroupedUserData(const GroupedUserData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::cosmo::pb::UserData(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.GroupedUserData)
}

void GroupedUserData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
}

GroupedUserData::~GroupedUserData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.GroupedUserData)
  SharedDtor();
}

void GroupedUserData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete data_;
}

void GroupedUserData::ArenaDtor(void* object) {
  GroupedUserData* _this = reinterpret_cast< GroupedUserData* >(object);
  (void)_this;
}
void GroupedUserData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GroupedUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupedUserData::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroupedUserData& GroupedUserData::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroupedUserData* GroupedUserData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GroupedUserData>(arena);
}

void GroupedUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.GroupedUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::cosmo::pb::UserData::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupedUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.GroupedUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cosmo.pb.UserData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.GroupedUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.GroupedUserData)
  return false;
#undef DO_
}

void GroupedUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.GroupedUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.UserData data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.GroupedUserData)
}

::google::protobuf::uint8* GroupedUserData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.GroupedUserData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.UserData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.GroupedUserData)
  return target;
}

size_t GroupedUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.GroupedUserData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .cosmo.pb.UserData data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupedUserData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.GroupedUserData)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupedUserData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupedUserData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.GroupedUserData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.GroupedUserData)
    MergeFrom(*source);
  }
}

void GroupedUserData::MergeFrom(const GroupedUserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.GroupedUserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::cosmo::pb::UserData::MergeFrom(from.data());
  }
}

void GroupedUserData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.GroupedUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupedUserData::CopyFrom(const GroupedUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.GroupedUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupedUserData::IsInitialized() const {
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void GroupedUserData::Swap(GroupedUserData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GroupedUserData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GroupedUserData::UnsafeArenaSwap(GroupedUserData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GroupedUserData::InternalSwap(GroupedUserData* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupedUserData::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupedUserData

// optional .cosmo.pb.UserData data = 1;
bool GroupedUserData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GroupedUserData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void GroupedUserData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void GroupedUserData::clear_data() {
  if (data_ != NULL) data_->::cosmo::pb::UserData::Clear();
  clear_has_data();
}
const ::cosmo::pb::UserData& GroupedUserData::data() const {
  const ::cosmo::pb::UserData* p = data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.GroupedUserData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData*>(
      &::cosmo::pb::_UserData_default_instance_);
}
::cosmo::pb::UserData* GroupedUserData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    _slow_mutable_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.GroupedUserData.data)
  return data_;
}
::cosmo::pb::UserData* GroupedUserData::release_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.GroupedUserData.data)
  clear_has_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_data();
  } else {
    ::cosmo::pb::UserData* temp = data_;
    data_ = NULL;
    return temp;
  }
}
 void GroupedUserData::set_allocated_data(::cosmo::pb::UserData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data != NULL) {
    _slow_set_allocated_data(message_arena, &data);
  }
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.GroupedUserData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_OriginalInfo::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_OriginalInfo::SourceData_OriginalInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.OriginalInfo)
}
SourceData_OriginalInfo::SourceData_OriginalInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.OriginalInfo)
}
SourceData_OriginalInfo::SourceData_OriginalInfo(const SourceData_OriginalInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.OriginalInfo)
}

void SourceData_OriginalInfo::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SourceData_OriginalInfo::~SourceData_OriginalInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.OriginalInfo)
  SharedDtor();
}

void SourceData_OriginalInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SourceData_OriginalInfo::ArenaDtor(void* object) {
  SourceData_OriginalInfo* _this = reinterpret_cast< SourceData_OriginalInfo* >(object);
  (void)_this;
}
void SourceData_OriginalInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_OriginalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_OriginalInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_OriginalInfo& SourceData_OriginalInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_OriginalInfo* SourceData_OriginalInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_OriginalInfo>(arena);
}

void SourceData_OriginalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_OriginalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.OriginalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.SourceData.OriginalInfo.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.OriginalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.OriginalInfo)
  return false;
#undef DO_
}

void SourceData_OriginalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.SourceData.OriginalInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.OriginalInfo)
}

::google::protobuf::uint8* SourceData_OriginalInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.SourceData.OriginalInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.OriginalInfo)
  return target;
}

size_t SourceData_OriginalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.OriginalInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_OriginalInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.OriginalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_OriginalInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_OriginalInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.OriginalInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.OriginalInfo)
    MergeFrom(*source);
  }
}

void SourceData_OriginalInfo::MergeFrom(const SourceData_OriginalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.OriginalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void SourceData_OriginalInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.OriginalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_OriginalInfo::CopyFrom(const SourceData_OriginalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.OriginalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_OriginalInfo::IsInitialized() const {
  return true;
}

void SourceData_OriginalInfo::Swap(SourceData_OriginalInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_OriginalInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_OriginalInfo::UnsafeArenaSwap(SourceData_OriginalInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_OriginalInfo::InternalSwap(SourceData_OriginalInfo* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_OriginalInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_OriginalInfo

// optional string id = 1;
bool SourceData_OriginalInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_OriginalInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_OriginalInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_OriginalInfo::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_id();
}
const ::std::string& SourceData_OriginalInfo::id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.OriginalInfo.id)
  return id_.Get();
}
void SourceData_OriginalInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.OriginalInfo.id)
}
#if LANG_CXX11
void SourceData_OriginalInfo::set_id(::std::string&& value) {
  set_has_id();
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.SourceData.OriginalInfo.id)
}
#endif
void SourceData_OriginalInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.SourceData.OriginalInfo.id)
}
void SourceData_OriginalInfo::set_id(const char* value,
    size_t size) {
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.SourceData.OriginalInfo.id)
}
::std::string* SourceData_OriginalInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.OriginalInfo.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SourceData_OriginalInfo::release_id() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.OriginalInfo.id)
  clear_has_id();
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SourceData_OriginalInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.OriginalInfo.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_id();
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SourceData_OriginalInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.OriginalInfo.id)
}
void SourceData_OriginalInfo::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.OriginalInfo.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_OkInfo::kSourceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_OkInfo::SourceData_OkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.OkInfo)
}
SourceData_OkInfo::SourceData_OkInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.OkInfo)
}
SourceData_OkInfo::SourceData_OkInfo(const SourceData_OkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_ = from.source_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.OkInfo)
}

void SourceData_OkInfo::SharedCtor() {
  _cached_size_ = 0;
  source_id_ = GOOGLE_LONGLONG(0);
}

SourceData_OkInfo::~SourceData_OkInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.OkInfo)
  SharedDtor();
}

void SourceData_OkInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_OkInfo::ArenaDtor(void* object) {
  SourceData_OkInfo* _this = reinterpret_cast< SourceData_OkInfo* >(object);
  (void)_this;
}
void SourceData_OkInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_OkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_OkInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_OkInfo& SourceData_OkInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_OkInfo* SourceData_OkInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_OkInfo>(arena);
}

void SourceData_OkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_OkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.OkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.OkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.OkInfo)
  return false;
#undef DO_
}

void SourceData_OkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.OkInfo)
}

::google::protobuf::uint8* SourceData_OkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.OkInfo)
  return target;
}

size_t SourceData_OkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.OkInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 source_id = 1;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_OkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.OkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_OkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_OkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.OkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.OkInfo)
    MergeFrom(*source);
  }
}

void SourceData_OkInfo::MergeFrom(const SourceData_OkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.OkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_id()) {
    set_source_id(from.source_id());
  }
}

void SourceData_OkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.OkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_OkInfo::CopyFrom(const SourceData_OkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.OkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_OkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SourceData_OkInfo::Swap(SourceData_OkInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_OkInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_OkInfo::UnsafeArenaSwap(SourceData_OkInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_OkInfo::InternalSwap(SourceData_OkInfo* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_OkInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_OkInfo

// required int64 source_id = 1;
bool SourceData_OkInfo::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_OkInfo::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_OkInfo::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_OkInfo::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 SourceData_OkInfo::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.OkInfo.source_id)
  return source_id_;
}
void SourceData_OkInfo::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.OkInfo.source_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_NewsData::kRubricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_NewsData::SourceData_NewsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.NewsData)
}
SourceData_NewsData::SourceData_NewsData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.NewsData)
}
SourceData_NewsData::SourceData_NewsData(const SourceData_NewsData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rubric_ = from.rubric_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.NewsData)
}

void SourceData_NewsData::SharedCtor() {
  _cached_size_ = 0;
  rubric_ = 0;
}

SourceData_NewsData::~SourceData_NewsData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.NewsData)
  SharedDtor();
}

void SourceData_NewsData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_NewsData::ArenaDtor(void* object) {
  SourceData_NewsData* _this = reinterpret_cast< SourceData_NewsData* >(object);
  (void)_this;
}
void SourceData_NewsData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_NewsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_NewsData::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_NewsData& SourceData_NewsData::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_NewsData* SourceData_NewsData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_NewsData>(arena);
}

void SourceData_NewsData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.NewsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rubric_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_NewsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.NewsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rubric = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rubric();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rubric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.NewsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.NewsData)
  return false;
#undef DO_
}

void SourceData_NewsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.NewsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rubric = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rubric(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.NewsData)
}

::google::protobuf::uint8* SourceData_NewsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.NewsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rubric = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rubric(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.NewsData)
  return target;
}

size_t SourceData_NewsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.NewsData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 rubric = 1;
  if (has_rubric()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rubric());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_NewsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.NewsData)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_NewsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_NewsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.NewsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.NewsData)
    MergeFrom(*source);
  }
}

void SourceData_NewsData::MergeFrom(const SourceData_NewsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.NewsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rubric()) {
    set_rubric(from.rubric());
  }
}

void SourceData_NewsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.NewsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_NewsData::CopyFrom(const SourceData_NewsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.NewsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_NewsData::IsInitialized() const {
  return true;
}

void SourceData_NewsData::Swap(SourceData_NewsData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_NewsData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_NewsData::UnsafeArenaSwap(SourceData_NewsData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_NewsData::InternalSwap(SourceData_NewsData* other) {
  using std::swap;
  swap(rubric_, other->rubric_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_NewsData::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_NewsData

// optional int32 rubric = 1;
bool SourceData_NewsData::has_rubric() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_NewsData::set_has_rubric() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_NewsData::clear_has_rubric() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_NewsData::clear_rubric() {
  rubric_ = 0;
  clear_has_rubric();
}
::google::protobuf::int32 SourceData_NewsData::rubric() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.NewsData.rubric)
  return rubric_;
}
void SourceData_NewsData::set_rubric(::google::protobuf::int32 value) {
  set_has_rubric();
  rubric_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.NewsData.rubric)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourceInfo::kTypeFieldNumber;
const int SourceData_SourceInfo::kIsCensoredFieldNumber;
const int SourceData_SourceInfo::kCategoryFieldNumber;
const int SourceData_SourceInfo::kTapeShowFieldNumber;
const int SourceData_SourceInfo::kTapeWhitelistFieldNumber;
const int SourceData_SourceInfo::kTapeBlacklistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourceInfo::SourceData_SourceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourceInfo)
}
SourceData_SourceInfo::SourceData_SourceInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  category_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourceInfo)
}
SourceData_SourceInfo::SourceData_SourceInfo(const SourceData_SourceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      category_(from.category_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tape_blacklist_) -
    reinterpret_cast<char*>(&type_)) + sizeof(tape_blacklist_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourceInfo)
}

void SourceData_SourceInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tape_blacklist_) -
      reinterpret_cast<char*>(&type_)) + sizeof(tape_blacklist_));
}

SourceData_SourceInfo::~SourceData_SourceInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourceInfo)
  SharedDtor();
}

void SourceData_SourceInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_SourceInfo::ArenaDtor(void* object) {
  SourceData_SourceInfo* _this = reinterpret_cast< SourceData_SourceInfo* >(object);
  (void)_this;
}
void SourceData_SourceInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourceInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourceInfo& SourceData_SourceInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourceInfo* SourceData_SourceInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourceInfo>(arena);
}

void SourceData_SourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  category_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tape_blacklist_) -
        reinterpret_cast<char*>(&type_)) + sizeof(tape_blacklist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cosmo.pb.SourceData.SourceInfo.SourceType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cosmo::pb::SourceData_SourceInfo_SourceType_IsValid(value)) {
            set_type(static_cast< ::cosmo::pb::SourceData_SourceInfo_SourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_censored = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_censored();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_censored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 category = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_category())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tape_show = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_tape_show();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tape_show_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tape_whitelist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_tape_whitelist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tape_whitelist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tape_blacklist = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_tape_blacklist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tape_blacklist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourceInfo)
  return false;
#undef DO_
}

void SourceData_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cosmo.pb.SourceData.SourceInfo.SourceType type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool is_censored = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_censored(), output);
  }

  // repeated int32 category = 3;
  for (int i = 0, n = this->category_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->category(i), output);
  }

  // optional bool tape_show = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->tape_show(), output);
  }

  // optional bool tape_whitelist = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->tape_whitelist(), output);
  }

  // optional bool tape_blacklist = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tape_blacklist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourceInfo)
}

::google::protobuf::uint8* SourceData_SourceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cosmo.pb.SourceData.SourceInfo.SourceType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool is_censored = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_censored(), target);
  }

  // repeated int32 category = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->category_, target);

  // optional bool tape_show = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->tape_show(), target);
  }

  // optional bool tape_whitelist = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->tape_whitelist(), target);
  }

  // optional bool tape_blacklist = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->tape_blacklist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourceInfo)
  return target;
}

size_t SourceData_SourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .cosmo.pb.SourceData.SourceInfo.SourceType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated int32 category = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->category_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->category_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 30u) {
    // optional bool is_censored = 2;
    if (has_is_censored()) {
      total_size += 1 + 1;
    }

    // optional bool tape_show = 4;
    if (has_tape_show()) {
      total_size += 1 + 1;
    }

    // optional bool tape_whitelist = 5;
    if (has_tape_whitelist()) {
      total_size += 1 + 1;
    }

    // optional bool tape_blacklist = 6;
    if (has_tape_blacklist()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourceInfo)
    MergeFrom(*source);
  }
}

void SourceData_SourceInfo::MergeFrom(const SourceData_SourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  category_.MergeFrom(from.category_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_censored_ = from.is_censored_;
    }
    if (cached_has_bits & 0x00000004u) {
      tape_show_ = from.tape_show_;
    }
    if (cached_has_bits & 0x00000008u) {
      tape_whitelist_ = from.tape_whitelist_;
    }
    if (cached_has_bits & 0x00000010u) {
      tape_blacklist_ = from.tape_blacklist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourceInfo::CopyFrom(const SourceData_SourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SourceData_SourceInfo::Swap(SourceData_SourceInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourceInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourceInfo::UnsafeArenaSwap(SourceData_SourceInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourceInfo::InternalSwap(SourceData_SourceInfo* other) {
  using std::swap;
  category_.InternalSwap(&other->category_);
  swap(type_, other->type_);
  swap(is_censored_, other->is_censored_);
  swap(tape_show_, other->tape_show_);
  swap(tape_whitelist_, other->tape_whitelist_);
  swap(tape_blacklist_, other->tape_blacklist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourceInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourceInfo

// required .cosmo.pb.SourceData.SourceInfo.SourceType type = 1;
bool SourceData_SourceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourceInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::cosmo::pb::SourceData_SourceInfo_SourceType SourceData_SourceInfo::type() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.type)
  return static_cast< ::cosmo::pb::SourceData_SourceInfo_SourceType >(type_);
}
void SourceData_SourceInfo::set_type(::cosmo::pb::SourceData_SourceInfo_SourceType value) {
  assert(::cosmo::pb::SourceData_SourceInfo_SourceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.type)
}

// optional bool is_censored = 2;
bool SourceData_SourceInfo::has_is_censored() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourceInfo::set_has_is_censored() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourceInfo::clear_has_is_censored() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourceInfo::clear_is_censored() {
  is_censored_ = false;
  clear_has_is_censored();
}
bool SourceData_SourceInfo::is_censored() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.is_censored)
  return is_censored_;
}
void SourceData_SourceInfo::set_is_censored(bool value) {
  set_has_is_censored();
  is_censored_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.is_censored)
}

// repeated int32 category = 3;
int SourceData_SourceInfo::category_size() const {
  return category_.size();
}
void SourceData_SourceInfo::clear_category() {
  category_.Clear();
}
::google::protobuf::int32 SourceData_SourceInfo::category(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.category)
  return category_.Get(index);
}
void SourceData_SourceInfo::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.category)
}
void SourceData_SourceInfo::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceInfo.category)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SourceData_SourceInfo::category() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceInfo.category)
  return category_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SourceData_SourceInfo::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceInfo.category)
  return &category_;
}

// optional bool tape_show = 4;
bool SourceData_SourceInfo::has_tape_show() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData_SourceInfo::set_has_tape_show() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData_SourceInfo::clear_has_tape_show() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData_SourceInfo::clear_tape_show() {
  tape_show_ = false;
  clear_has_tape_show();
}
bool SourceData_SourceInfo::tape_show() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.tape_show)
  return tape_show_;
}
void SourceData_SourceInfo::set_tape_show(bool value) {
  set_has_tape_show();
  tape_show_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.tape_show)
}

// optional bool tape_whitelist = 5;
bool SourceData_SourceInfo::has_tape_whitelist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SourceData_SourceInfo::set_has_tape_whitelist() {
  _has_bits_[0] |= 0x00000008u;
}
void SourceData_SourceInfo::clear_has_tape_whitelist() {
  _has_bits_[0] &= ~0x00000008u;
}
void SourceData_SourceInfo::clear_tape_whitelist() {
  tape_whitelist_ = false;
  clear_has_tape_whitelist();
}
bool SourceData_SourceInfo::tape_whitelist() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.tape_whitelist)
  return tape_whitelist_;
}
void SourceData_SourceInfo::set_tape_whitelist(bool value) {
  set_has_tape_whitelist();
  tape_whitelist_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.tape_whitelist)
}

// optional bool tape_blacklist = 6;
bool SourceData_SourceInfo::has_tape_blacklist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SourceData_SourceInfo::set_has_tape_blacklist() {
  _has_bits_[0] |= 0x00000010u;
}
void SourceData_SourceInfo::clear_has_tape_blacklist() {
  _has_bits_[0] &= ~0x00000010u;
}
void SourceData_SourceInfo::clear_tape_blacklist() {
  tape_blacklist_ = false;
  clear_has_tape_blacklist();
}
bool SourceData_SourceInfo::tape_blacklist() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.tape_blacklist)
  return tape_blacklist_;
}
void SourceData_SourceInfo::set_tape_blacklist(bool value) {
  set_has_tape_blacklist();
  tape_blacklist_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.tape_blacklist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_LentaAdminSourceInfo::kUseInLentaFieldNumber;
const int SourceData_LentaAdminSourceInfo::kUseInMainFieldNumber;
const int SourceData_LentaAdminSourceInfo::kRegionsFieldNumber;
const int SourceData_LentaAdminSourceInfo::kUseFulltextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_LentaAdminSourceInfo::SourceData_LentaAdminSourceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.LentaAdminSourceInfo)
}
SourceData_LentaAdminSourceInfo::SourceData_LentaAdminSourceInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  regions_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.LentaAdminSourceInfo)
}
SourceData_LentaAdminSourceInfo::SourceData_LentaAdminSourceInfo(const SourceData_LentaAdminSourceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_in_lenta_, &from.use_in_lenta_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_fulltext_) -
    reinterpret_cast<char*>(&use_in_lenta_)) + sizeof(use_fulltext_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.LentaAdminSourceInfo)
}

void SourceData_LentaAdminSourceInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&use_in_lenta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_fulltext_) -
      reinterpret_cast<char*>(&use_in_lenta_)) + sizeof(use_fulltext_));
}

SourceData_LentaAdminSourceInfo::~SourceData_LentaAdminSourceInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.LentaAdminSourceInfo)
  SharedDtor();
}

void SourceData_LentaAdminSourceInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_LentaAdminSourceInfo::ArenaDtor(void* object) {
  SourceData_LentaAdminSourceInfo* _this = reinterpret_cast< SourceData_LentaAdminSourceInfo* >(object);
  (void)_this;
}
void SourceData_LentaAdminSourceInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_LentaAdminSourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_LentaAdminSourceInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_LentaAdminSourceInfo& SourceData_LentaAdminSourceInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_LentaAdminSourceInfo* SourceData_LentaAdminSourceInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_LentaAdminSourceInfo>(arena);
}

void SourceData_LentaAdminSourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.LentaAdminSourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&use_in_lenta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_fulltext_) -
        reinterpret_cast<char*>(&use_in_lenta_)) + sizeof(use_fulltext_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_LentaAdminSourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.LentaAdminSourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_in_lenta = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_use_in_lenta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_in_lenta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_in_main = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_use_in_main();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_in_main_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 regions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_regions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_regions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_fulltext = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_use_fulltext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fulltext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.LentaAdminSourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.LentaAdminSourceInfo)
  return false;
#undef DO_
}

void SourceData_LentaAdminSourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.LentaAdminSourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_in_lenta = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_in_lenta(), output);
  }

  // optional bool use_in_main = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_in_main(), output);
  }

  // repeated uint32 regions = 3;
  for (int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->regions(i), output);
  }

  // optional bool use_fulltext = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_fulltext(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.LentaAdminSourceInfo)
}

::google::protobuf::uint8* SourceData_LentaAdminSourceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.LentaAdminSourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_in_lenta = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_in_lenta(), target);
  }

  // optional bool use_in_main = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_in_main(), target);
  }

  // repeated uint32 regions = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->regions_, target);

  // optional bool use_fulltext = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_fulltext(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.LentaAdminSourceInfo)
  return target;
}

size_t SourceData_LentaAdminSourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.LentaAdminSourceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 regions = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->regions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->regions_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool use_in_lenta = 1;
    if (has_use_in_lenta()) {
      total_size += 1 + 1;
    }

    // optional bool use_in_main = 2;
    if (has_use_in_main()) {
      total_size += 1 + 1;
    }

    // optional bool use_fulltext = 4;
    if (has_use_fulltext()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_LentaAdminSourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.LentaAdminSourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_LentaAdminSourceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_LentaAdminSourceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.LentaAdminSourceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.LentaAdminSourceInfo)
    MergeFrom(*source);
  }
}

void SourceData_LentaAdminSourceInfo::MergeFrom(const SourceData_LentaAdminSourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.LentaAdminSourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      use_in_lenta_ = from.use_in_lenta_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_in_main_ = from.use_in_main_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_fulltext_ = from.use_fulltext_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_LentaAdminSourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.LentaAdminSourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_LentaAdminSourceInfo::CopyFrom(const SourceData_LentaAdminSourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.LentaAdminSourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_LentaAdminSourceInfo::IsInitialized() const {
  return true;
}

void SourceData_LentaAdminSourceInfo::Swap(SourceData_LentaAdminSourceInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_LentaAdminSourceInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_LentaAdminSourceInfo::UnsafeArenaSwap(SourceData_LentaAdminSourceInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_LentaAdminSourceInfo::InternalSwap(SourceData_LentaAdminSourceInfo* other) {
  using std::swap;
  regions_.InternalSwap(&other->regions_);
  swap(use_in_lenta_, other->use_in_lenta_);
  swap(use_in_main_, other->use_in_main_);
  swap(use_fulltext_, other->use_fulltext_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_LentaAdminSourceInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_LentaAdminSourceInfo

// optional bool use_in_lenta = 1;
bool SourceData_LentaAdminSourceInfo::has_use_in_lenta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_LentaAdminSourceInfo::set_has_use_in_lenta() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_LentaAdminSourceInfo::clear_has_use_in_lenta() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_LentaAdminSourceInfo::clear_use_in_lenta() {
  use_in_lenta_ = false;
  clear_has_use_in_lenta();
}
bool SourceData_LentaAdminSourceInfo::use_in_lenta() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LentaAdminSourceInfo.use_in_lenta)
  return use_in_lenta_;
}
void SourceData_LentaAdminSourceInfo::set_use_in_lenta(bool value) {
  set_has_use_in_lenta();
  use_in_lenta_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LentaAdminSourceInfo.use_in_lenta)
}

// optional bool use_in_main = 2;
bool SourceData_LentaAdminSourceInfo::has_use_in_main() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_LentaAdminSourceInfo::set_has_use_in_main() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_LentaAdminSourceInfo::clear_has_use_in_main() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_LentaAdminSourceInfo::clear_use_in_main() {
  use_in_main_ = false;
  clear_has_use_in_main();
}
bool SourceData_LentaAdminSourceInfo::use_in_main() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LentaAdminSourceInfo.use_in_main)
  return use_in_main_;
}
void SourceData_LentaAdminSourceInfo::set_use_in_main(bool value) {
  set_has_use_in_main();
  use_in_main_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LentaAdminSourceInfo.use_in_main)
}

// repeated uint32 regions = 3;
int SourceData_LentaAdminSourceInfo::regions_size() const {
  return regions_.size();
}
void SourceData_LentaAdminSourceInfo::clear_regions() {
  regions_.Clear();
}
::google::protobuf::uint32 SourceData_LentaAdminSourceInfo::regions(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LentaAdminSourceInfo.regions)
  return regions_.Get(index);
}
void SourceData_LentaAdminSourceInfo::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LentaAdminSourceInfo.regions)
}
void SourceData_LentaAdminSourceInfo::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.LentaAdminSourceInfo.regions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SourceData_LentaAdminSourceInfo::regions() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.LentaAdminSourceInfo.regions)
  return regions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SourceData_LentaAdminSourceInfo::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.LentaAdminSourceInfo.regions)
  return &regions_;
}

// optional bool use_fulltext = 4;
bool SourceData_LentaAdminSourceInfo::has_use_fulltext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData_LentaAdminSourceInfo::set_has_use_fulltext() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData_LentaAdminSourceInfo::clear_has_use_fulltext() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData_LentaAdminSourceInfo::clear_use_fulltext() {
  use_fulltext_ = false;
  clear_has_use_fulltext();
}
bool SourceData_LentaAdminSourceInfo::use_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LentaAdminSourceInfo.use_fulltext)
  return use_fulltext_;
}
void SourceData_LentaAdminSourceInfo::set_use_fulltext(bool value) {
  set_has_use_fulltext();
  use_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LentaAdminSourceInfo.use_fulltext)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_GroupStat::kSigmaFieldNumber;
const int SourceData_GroupStat::kMeanFieldNumber;
const int SourceData_GroupStat::kLikesFieldNumber;
const int SourceData_GroupStat::kNormLikesFieldNumber;
const int SourceData_GroupStat::kNormLikesKafkaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_GroupStat::SourceData_GroupStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.GroupStat)
}
SourceData_GroupStat::SourceData_GroupStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.GroupStat)
}
SourceData_GroupStat::SourceData_GroupStat(const SourceData_GroupStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sigma_, &from.sigma_,
    static_cast<size_t>(reinterpret_cast<char*>(&norm_likes_kafka_) -
    reinterpret_cast<char*>(&sigma_)) + sizeof(norm_likes_kafka_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.GroupStat)
}

void SourceData_GroupStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sigma_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&norm_likes_kafka_) -
      reinterpret_cast<char*>(&sigma_)) + sizeof(norm_likes_kafka_));
}

SourceData_GroupStat::~SourceData_GroupStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.GroupStat)
  SharedDtor();
}

void SourceData_GroupStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_GroupStat::ArenaDtor(void* object) {
  SourceData_GroupStat* _this = reinterpret_cast< SourceData_GroupStat* >(object);
  (void)_this;
}
void SourceData_GroupStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_GroupStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_GroupStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_GroupStat& SourceData_GroupStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_GroupStat* SourceData_GroupStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_GroupStat>(arena);
}

void SourceData_GroupStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.GroupStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&sigma_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&norm_likes_kafka_) -
        reinterpret_cast<char*>(&sigma_)) + sizeof(norm_likes_kafka_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_GroupStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.GroupStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float sigma = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_sigma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mean = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float likes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float norm_likes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_norm_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &norm_likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float norm_likes_kafka = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_norm_likes_kafka();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &norm_likes_kafka_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.GroupStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.GroupStat)
  return false;
#undef DO_
}

void SourceData_GroupStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.GroupStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float sigma = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sigma(), output);
  }

  // optional float mean = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean(), output);
  }

  // optional float likes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->likes(), output);
  }

  // optional float norm_likes = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->norm_likes(), output);
  }

  // optional float norm_likes_kafka = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->norm_likes_kafka(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.GroupStat)
}

::google::protobuf::uint8* SourceData_GroupStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.GroupStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float sigma = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->sigma(), target);
  }

  // optional float mean = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean(), target);
  }

  // optional float likes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->likes(), target);
  }

  // optional float norm_likes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->norm_likes(), target);
  }

  // optional float norm_likes_kafka = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->norm_likes_kafka(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.GroupStat)
  return target;
}

size_t SourceData_GroupStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.GroupStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional float sigma = 1;
    if (has_sigma()) {
      total_size += 1 + 4;
    }

    // optional float mean = 2;
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // optional float likes = 3;
    if (has_likes()) {
      total_size += 1 + 4;
    }

    // optional float norm_likes = 4;
    if (has_norm_likes()) {
      total_size += 1 + 4;
    }

    // optional float norm_likes_kafka = 5;
    if (has_norm_likes_kafka()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_GroupStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.GroupStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_GroupStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_GroupStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.GroupStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.GroupStat)
    MergeFrom(*source);
  }
}

void SourceData_GroupStat::MergeFrom(const SourceData_GroupStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.GroupStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      sigma_ = from.sigma_;
    }
    if (cached_has_bits & 0x00000002u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000004u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000008u) {
      norm_likes_ = from.norm_likes_;
    }
    if (cached_has_bits & 0x00000010u) {
      norm_likes_kafka_ = from.norm_likes_kafka_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_GroupStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.GroupStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_GroupStat::CopyFrom(const SourceData_GroupStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.GroupStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_GroupStat::IsInitialized() const {
  return true;
}

void SourceData_GroupStat::Swap(SourceData_GroupStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_GroupStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_GroupStat::UnsafeArenaSwap(SourceData_GroupStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_GroupStat::InternalSwap(SourceData_GroupStat* other) {
  using std::swap;
  swap(sigma_, other->sigma_);
  swap(mean_, other->mean_);
  swap(likes_, other->likes_);
  swap(norm_likes_, other->norm_likes_);
  swap(norm_likes_kafka_, other->norm_likes_kafka_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_GroupStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_GroupStat

// optional float sigma = 1;
bool SourceData_GroupStat::has_sigma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_GroupStat::set_has_sigma() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_GroupStat::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_GroupStat::clear_sigma() {
  sigma_ = 0;
  clear_has_sigma();
}
float SourceData_GroupStat::sigma() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupStat.sigma)
  return sigma_;
}
void SourceData_GroupStat::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupStat.sigma)
}

// optional float mean = 2;
bool SourceData_GroupStat::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_GroupStat::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_GroupStat::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_GroupStat::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
float SourceData_GroupStat::mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupStat.mean)
  return mean_;
}
void SourceData_GroupStat::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupStat.mean)
}

// optional float likes = 3;
bool SourceData_GroupStat::has_likes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData_GroupStat::set_has_likes() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData_GroupStat::clear_has_likes() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData_GroupStat::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
float SourceData_GroupStat::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupStat.likes)
  return likes_;
}
void SourceData_GroupStat::set_likes(float value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupStat.likes)
}

// optional float norm_likes = 4;
bool SourceData_GroupStat::has_norm_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SourceData_GroupStat::set_has_norm_likes() {
  _has_bits_[0] |= 0x00000008u;
}
void SourceData_GroupStat::clear_has_norm_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
void SourceData_GroupStat::clear_norm_likes() {
  norm_likes_ = 0;
  clear_has_norm_likes();
}
float SourceData_GroupStat::norm_likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupStat.norm_likes)
  return norm_likes_;
}
void SourceData_GroupStat::set_norm_likes(float value) {
  set_has_norm_likes();
  norm_likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupStat.norm_likes)
}

// optional float norm_likes_kafka = 5;
bool SourceData_GroupStat::has_norm_likes_kafka() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SourceData_GroupStat::set_has_norm_likes_kafka() {
  _has_bits_[0] |= 0x00000010u;
}
void SourceData_GroupStat::clear_has_norm_likes_kafka() {
  _has_bits_[0] &= ~0x00000010u;
}
void SourceData_GroupStat::clear_norm_likes_kafka() {
  norm_likes_kafka_ = 0;
  clear_has_norm_likes_kafka();
}
float SourceData_GroupStat::norm_likes_kafka() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupStat.norm_likes_kafka)
  return norm_likes_kafka_;
}
void SourceData_GroupStat::set_norm_likes_kafka(float value) {
  set_has_norm_likes_kafka();
  norm_likes_kafka_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupStat.norm_likes_kafka)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_AlsFea::_slow_mutable_als_c_stat() {
  als_c_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupStat* SourceData_AlsFea::_slow_release_als_c_stat() {
  if (als_c_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupStat* temp = new ::cosmo::pb::SourceData_GroupStat(*als_c_stat_);
    als_c_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupStat* SourceData_AlsFea::unsafe_arena_release_als_c_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.AlsFea.als_c_stat)
  clear_has_als_c_stat();
  ::cosmo::pb::SourceData_GroupStat* temp = als_c_stat_;
  als_c_stat_ = NULL;
  return temp;
}
void SourceData_AlsFea::_slow_set_allocated_als_c_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupStat** als_c_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*als_c_stat) == NULL) {
      message_arena->Own(*als_c_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*als_c_stat)) {
      ::cosmo::pb::SourceData_GroupStat* new_als_c_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupStat >(
            message_arena);
      new_als_c_stat->CopyFrom(**als_c_stat);
      *als_c_stat = new_als_c_stat;
    }
}
void SourceData_AlsFea::unsafe_arena_set_allocated_als_c_stat(
    ::cosmo::pb::SourceData_GroupStat* als_c_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete als_c_stat_;
  }
  als_c_stat_ = als_c_stat;
  if (als_c_stat) {
    set_has_als_c_stat();
  } else {
    clear_has_als_c_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.AlsFea.als_c_stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_AlsFea::kAlsFieldNumber;
const int SourceData_AlsFea::kVectorLengthFieldNumber;
const int SourceData_AlsFea::kAlsCStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_AlsFea::SourceData_AlsFea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.AlsFea)
}
SourceData_AlsFea::SourceData_AlsFea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  als_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.AlsFea)
}
SourceData_AlsFea::SourceData_AlsFea(const SourceData_AlsFea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      als_(from.als_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_als_c_stat()) {
    als_c_stat_ = new ::cosmo::pb::SourceData_GroupStat(*from.als_c_stat_);
  } else {
    als_c_stat_ = NULL;
  }
  vector_length_ = from.vector_length_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.AlsFea)
}

void SourceData_AlsFea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&als_c_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vector_length_) -
      reinterpret_cast<char*>(&als_c_stat_)) + sizeof(vector_length_));
}

SourceData_AlsFea::~SourceData_AlsFea() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.AlsFea)
  SharedDtor();
}

void SourceData_AlsFea::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete als_c_stat_;
}

void SourceData_AlsFea::ArenaDtor(void* object) {
  SourceData_AlsFea* _this = reinterpret_cast< SourceData_AlsFea* >(object);
  (void)_this;
}
void SourceData_AlsFea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_AlsFea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_AlsFea::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_AlsFea& SourceData_AlsFea::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_AlsFea* SourceData_AlsFea::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_AlsFea>(arena);
}

void SourceData_AlsFea::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.AlsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  als_.Clear();
  if (has_als_c_stat()) {
    GOOGLE_DCHECK(als_c_stat_ != NULL);
    als_c_stat_->::cosmo::pb::SourceData_GroupStat::Clear();
  }
  vector_length_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_AlsFea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.AlsFea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float als = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_als())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_als())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vector_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_vector_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vector_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_als_c_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.AlsFea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.AlsFea)
  return false;
#undef DO_
}

void SourceData_AlsFea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.AlsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float als = 1;
  for (int i = 0, n = this->als_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->als(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float vector_length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->vector_length(), output);
  }

  // optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->als_c_stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.AlsFea)
}

::google::protobuf::uint8* SourceData_AlsFea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.AlsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float als = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->als_, target);

  cached_has_bits = _has_bits_[0];
  // optional float vector_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->vector_length(), target);
  }

  // optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->als_c_stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.AlsFea)
  return target;
}

size_t SourceData_AlsFea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.AlsFea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float als = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->als_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->als_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
    if (has_als_c_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->als_c_stat_);
    }

    // optional float vector_length = 2;
    if (has_vector_length()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_AlsFea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.AlsFea)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_AlsFea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_AlsFea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.AlsFea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.AlsFea)
    MergeFrom(*source);
  }
}

void SourceData_AlsFea::MergeFrom(const SourceData_AlsFea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.AlsFea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  als_.MergeFrom(from.als_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_als_c_stat()->::cosmo::pb::SourceData_GroupStat::MergeFrom(from.als_c_stat());
    }
    if (cached_has_bits & 0x00000002u) {
      vector_length_ = from.vector_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_AlsFea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.AlsFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_AlsFea::CopyFrom(const SourceData_AlsFea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.AlsFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_AlsFea::IsInitialized() const {
  return true;
}

void SourceData_AlsFea::Swap(SourceData_AlsFea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_AlsFea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_AlsFea::UnsafeArenaSwap(SourceData_AlsFea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_AlsFea::InternalSwap(SourceData_AlsFea* other) {
  using std::swap;
  als_.InternalSwap(&other->als_);
  swap(als_c_stat_, other->als_c_stat_);
  swap(vector_length_, other->vector_length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_AlsFea::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_AlsFea

// repeated float als = 1;
int SourceData_AlsFea::als_size() const {
  return als_.size();
}
void SourceData_AlsFea::clear_als() {
  als_.Clear();
}
float SourceData_AlsFea::als(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.AlsFea.als)
  return als_.Get(index);
}
void SourceData_AlsFea::set_als(int index, float value) {
  als_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.AlsFea.als)
}
void SourceData_AlsFea::add_als(float value) {
  als_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.AlsFea.als)
}
const ::google::protobuf::RepeatedField< float >&
SourceData_AlsFea::als() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.AlsFea.als)
  return als_;
}
::google::protobuf::RepeatedField< float >*
SourceData_AlsFea::mutable_als() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.AlsFea.als)
  return &als_;
}

// optional float vector_length = 2;
bool SourceData_AlsFea::has_vector_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_AlsFea::set_has_vector_length() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_AlsFea::clear_has_vector_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_AlsFea::clear_vector_length() {
  vector_length_ = 0;
  clear_has_vector_length();
}
float SourceData_AlsFea::vector_length() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.AlsFea.vector_length)
  return vector_length_;
}
void SourceData_AlsFea::set_vector_length(float value) {
  set_has_vector_length();
  vector_length_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.AlsFea.vector_length)
}

// optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
bool SourceData_AlsFea::has_als_c_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_AlsFea::set_has_als_c_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_AlsFea::clear_has_als_c_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_AlsFea::clear_als_c_stat() {
  if (als_c_stat_ != NULL) als_c_stat_->::cosmo::pb::SourceData_GroupStat::Clear();
  clear_has_als_c_stat();
}
const ::cosmo::pb::SourceData_GroupStat& SourceData_AlsFea::als_c_stat() const {
  const ::cosmo::pb::SourceData_GroupStat* p = als_c_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.AlsFea.als_c_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupStat*>(
      &::cosmo::pb::_SourceData_GroupStat_default_instance_);
}
::cosmo::pb::SourceData_GroupStat* SourceData_AlsFea::mutable_als_c_stat() {
  set_has_als_c_stat();
  if (als_c_stat_ == NULL) {
    _slow_mutable_als_c_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.AlsFea.als_c_stat)
  return als_c_stat_;
}
::cosmo::pb::SourceData_GroupStat* SourceData_AlsFea::release_als_c_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.AlsFea.als_c_stat)
  clear_has_als_c_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_c_stat();
  } else {
    ::cosmo::pb::SourceData_GroupStat* temp = als_c_stat_;
    als_c_stat_ = NULL;
    return temp;
  }
}
 void SourceData_AlsFea::set_allocated_als_c_stat(::cosmo::pb::SourceData_GroupStat* als_c_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_c_stat_;
  }
  if (als_c_stat != NULL) {
    _slow_set_allocated_als_c_stat(message_arena, &als_c_stat);
  }
  als_c_stat_ = als_c_stat;
  if (als_c_stat) {
    set_has_als_c_stat();
  } else {
    clear_has_als_c_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.AlsFea.als_c_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_LdaFea::_slow_mutable_als_c_stat() {
  als_c_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupStat* SourceData_LdaFea::_slow_release_als_c_stat() {
  if (als_c_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupStat* temp = new ::cosmo::pb::SourceData_GroupStat(*als_c_stat_);
    als_c_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupStat* SourceData_LdaFea::unsafe_arena_release_als_c_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.LdaFea.als_c_stat)
  clear_has_als_c_stat();
  ::cosmo::pb::SourceData_GroupStat* temp = als_c_stat_;
  als_c_stat_ = NULL;
  return temp;
}
void SourceData_LdaFea::_slow_set_allocated_als_c_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupStat** als_c_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*als_c_stat) == NULL) {
      message_arena->Own(*als_c_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*als_c_stat)) {
      ::cosmo::pb::SourceData_GroupStat* new_als_c_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupStat >(
            message_arena);
      new_als_c_stat->CopyFrom(**als_c_stat);
      *als_c_stat = new_als_c_stat;
    }
}
void SourceData_LdaFea::unsafe_arena_set_allocated_als_c_stat(
    ::cosmo::pb::SourceData_GroupStat* als_c_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete als_c_stat_;
  }
  als_c_stat_ = als_c_stat;
  if (als_c_stat) {
    set_has_als_c_stat();
  } else {
    clear_has_als_c_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.LdaFea.als_c_stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_LdaFea::kLdaFieldNumber;
const int SourceData_LdaFea::kVectorLengthFieldNumber;
const int SourceData_LdaFea::kAlsCStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_LdaFea::SourceData_LdaFea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.LdaFea)
}
SourceData_LdaFea::SourceData_LdaFea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  lda_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.LdaFea)
}
SourceData_LdaFea::SourceData_LdaFea(const SourceData_LdaFea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lda_(from.lda_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_als_c_stat()) {
    als_c_stat_ = new ::cosmo::pb::SourceData_GroupStat(*from.als_c_stat_);
  } else {
    als_c_stat_ = NULL;
  }
  vector_length_ = from.vector_length_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.LdaFea)
}

void SourceData_LdaFea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&als_c_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vector_length_) -
      reinterpret_cast<char*>(&als_c_stat_)) + sizeof(vector_length_));
}

SourceData_LdaFea::~SourceData_LdaFea() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.LdaFea)
  SharedDtor();
}

void SourceData_LdaFea::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete als_c_stat_;
}

void SourceData_LdaFea::ArenaDtor(void* object) {
  SourceData_LdaFea* _this = reinterpret_cast< SourceData_LdaFea* >(object);
  (void)_this;
}
void SourceData_LdaFea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_LdaFea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_LdaFea::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_LdaFea& SourceData_LdaFea::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_LdaFea* SourceData_LdaFea::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_LdaFea>(arena);
}

void SourceData_LdaFea::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.LdaFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lda_.Clear();
  if (has_als_c_stat()) {
    GOOGLE_DCHECK(als_c_stat_ != NULL);
    als_c_stat_->::cosmo::pb::SourceData_GroupStat::Clear();
  }
  vector_length_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_LdaFea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.LdaFea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float lda = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_lda())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lda())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vector_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_vector_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vector_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_als_c_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.LdaFea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.LdaFea)
  return false;
#undef DO_
}

void SourceData_LdaFea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.LdaFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float lda = 1;
  for (int i = 0, n = this->lda_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->lda(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float vector_length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->vector_length(), output);
  }

  // optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->als_c_stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.LdaFea)
}

::google::protobuf::uint8* SourceData_LdaFea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.LdaFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float lda = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->lda_, target);

  cached_has_bits = _has_bits_[0];
  // optional float vector_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->vector_length(), target);
  }

  // optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->als_c_stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.LdaFea)
  return target;
}

size_t SourceData_LdaFea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.LdaFea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float lda = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lda_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->lda_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
    if (has_als_c_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->als_c_stat_);
    }

    // optional float vector_length = 2;
    if (has_vector_length()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_LdaFea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.LdaFea)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_LdaFea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_LdaFea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.LdaFea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.LdaFea)
    MergeFrom(*source);
  }
}

void SourceData_LdaFea::MergeFrom(const SourceData_LdaFea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.LdaFea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lda_.MergeFrom(from.lda_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_als_c_stat()->::cosmo::pb::SourceData_GroupStat::MergeFrom(from.als_c_stat());
    }
    if (cached_has_bits & 0x00000002u) {
      vector_length_ = from.vector_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_LdaFea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.LdaFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_LdaFea::CopyFrom(const SourceData_LdaFea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.LdaFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_LdaFea::IsInitialized() const {
  return true;
}

void SourceData_LdaFea::Swap(SourceData_LdaFea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_LdaFea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_LdaFea::UnsafeArenaSwap(SourceData_LdaFea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_LdaFea::InternalSwap(SourceData_LdaFea* other) {
  using std::swap;
  lda_.InternalSwap(&other->lda_);
  swap(als_c_stat_, other->als_c_stat_);
  swap(vector_length_, other->vector_length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_LdaFea::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_LdaFea

// repeated float lda = 1;
int SourceData_LdaFea::lda_size() const {
  return lda_.size();
}
void SourceData_LdaFea::clear_lda() {
  lda_.Clear();
}
float SourceData_LdaFea::lda(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LdaFea.lda)
  return lda_.Get(index);
}
void SourceData_LdaFea::set_lda(int index, float value) {
  lda_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LdaFea.lda)
}
void SourceData_LdaFea::add_lda(float value) {
  lda_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.LdaFea.lda)
}
const ::google::protobuf::RepeatedField< float >&
SourceData_LdaFea::lda() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.LdaFea.lda)
  return lda_;
}
::google::protobuf::RepeatedField< float >*
SourceData_LdaFea::mutable_lda() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.LdaFea.lda)
  return &lda_;
}

// optional float vector_length = 2;
bool SourceData_LdaFea::has_vector_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_LdaFea::set_has_vector_length() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_LdaFea::clear_has_vector_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_LdaFea::clear_vector_length() {
  vector_length_ = 0;
  clear_has_vector_length();
}
float SourceData_LdaFea::vector_length() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LdaFea.vector_length)
  return vector_length_;
}
void SourceData_LdaFea::set_vector_length(float value) {
  set_has_vector_length();
  vector_length_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LdaFea.vector_length)
}

// optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
bool SourceData_LdaFea::has_als_c_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_LdaFea::set_has_als_c_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_LdaFea::clear_has_als_c_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_LdaFea::clear_als_c_stat() {
  if (als_c_stat_ != NULL) als_c_stat_->::cosmo::pb::SourceData_GroupStat::Clear();
  clear_has_als_c_stat();
}
const ::cosmo::pb::SourceData_GroupStat& SourceData_LdaFea::als_c_stat() const {
  const ::cosmo::pb::SourceData_GroupStat* p = als_c_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LdaFea.als_c_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupStat*>(
      &::cosmo::pb::_SourceData_GroupStat_default_instance_);
}
::cosmo::pb::SourceData_GroupStat* SourceData_LdaFea::mutable_als_c_stat() {
  set_has_als_c_stat();
  if (als_c_stat_ == NULL) {
    _slow_mutable_als_c_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.LdaFea.als_c_stat)
  return als_c_stat_;
}
::cosmo::pb::SourceData_GroupStat* SourceData_LdaFea::release_als_c_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.LdaFea.als_c_stat)
  clear_has_als_c_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_c_stat();
  } else {
    ::cosmo::pb::SourceData_GroupStat* temp = als_c_stat_;
    als_c_stat_ = NULL;
    return temp;
  }
}
 void SourceData_LdaFea::set_allocated_als_c_stat(::cosmo::pb::SourceData_GroupStat* als_c_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_c_stat_;
  }
  if (als_c_stat != NULL) {
    _slow_set_allocated_als_c_stat(message_arena, &als_c_stat);
  }
  als_c_stat_ = als_c_stat;
  if (als_c_stat) {
    set_has_als_c_stat();
  } else {
    clear_has_als_c_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.LdaFea.als_c_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_GroupPeriodStats::kAllLikesMeanFieldNumber;
const int SourceData_GroupPeriodStats::kAllLikesVarianceFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodLikesMeanFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodLikesVarianceFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodClicksMeanFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodClicksVarianceFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodResharesMeanFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodResharesVarianceFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodCommentsMeanFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodCommentsVarianceFieldNumber;
const int SourceData_GroupPeriodStats::kAllLikesFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodLikesFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodClicksFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodResharesFieldNumber;
const int SourceData_GroupPeriodStats::kPeriodCommentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_GroupPeriodStats::SourceData_GroupPeriodStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.GroupPeriodStats)
}
SourceData_GroupPeriodStats::SourceData_GroupPeriodStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.GroupPeriodStats)
}
SourceData_GroupPeriodStats::SourceData_GroupPeriodStats(const SourceData_GroupPeriodStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&all_likes_mean_, &from.all_likes_mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_comments_) -
    reinterpret_cast<char*>(&all_likes_mean_)) + sizeof(period_comments_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.GroupPeriodStats)
}

void SourceData_GroupPeriodStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&all_likes_mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_comments_) -
      reinterpret_cast<char*>(&all_likes_mean_)) + sizeof(period_comments_));
}

SourceData_GroupPeriodStats::~SourceData_GroupPeriodStats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.GroupPeriodStats)
  SharedDtor();
}

void SourceData_GroupPeriodStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_GroupPeriodStats::ArenaDtor(void* object) {
  SourceData_GroupPeriodStats* _this = reinterpret_cast< SourceData_GroupPeriodStats* >(object);
  (void)_this;
}
void SourceData_GroupPeriodStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_GroupPeriodStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_GroupPeriodStats::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_GroupPeriodStats& SourceData_GroupPeriodStats::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_GroupPeriodStats* SourceData_GroupPeriodStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_GroupPeriodStats>(arena);
}

void SourceData_GroupPeriodStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.GroupPeriodStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&all_likes_mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&period_reshares_variance_) -
        reinterpret_cast<char*>(&all_likes_mean_)) + sizeof(period_reshares_variance_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&period_comments_mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&period_comments_) -
        reinterpret_cast<char*>(&period_comments_mean_)) + sizeof(period_comments_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_GroupPeriodStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.GroupPeriodStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double all_likes_mean = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_all_likes_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &all_likes_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double all_likes_variance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_all_likes_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &all_likes_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double period_likes_mean = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_period_likes_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &period_likes_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double period_likes_variance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_period_likes_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &period_likes_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double period_clicks_mean = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_period_clicks_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &period_clicks_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double period_clicks_variance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_period_clicks_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &period_clicks_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double period_reshares_mean = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_period_reshares_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &period_reshares_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double period_reshares_variance = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_period_reshares_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &period_reshares_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double period_comments_mean = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_period_comments_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &period_comments_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double period_comments_variance = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_period_comments_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &period_comments_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 all_likes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_all_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_likes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_period_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_clicks = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_period_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_reshares = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_period_reshares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_reshares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_comments = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_period_comments();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_comments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.GroupPeriodStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.GroupPeriodStats)
  return false;
#undef DO_
}

void SourceData_GroupPeriodStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.GroupPeriodStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double all_likes_mean = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->all_likes_mean(), output);
  }

  // optional double all_likes_variance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->all_likes_variance(), output);
  }

  // optional double period_likes_mean = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->period_likes_mean(), output);
  }

  // optional double period_likes_variance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->period_likes_variance(), output);
  }

  // optional double period_clicks_mean = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->period_clicks_mean(), output);
  }

  // optional double period_clicks_variance = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->period_clicks_variance(), output);
  }

  // optional double period_reshares_mean = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->period_reshares_mean(), output);
  }

  // optional double period_reshares_variance = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->period_reshares_variance(), output);
  }

  // optional double period_comments_mean = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->period_comments_mean(), output);
  }

  // optional double period_comments_variance = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->period_comments_variance(), output);
  }

  // optional int64 all_likes = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->all_likes(), output);
  }

  // optional int64 period_likes = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->period_likes(), output);
  }

  // optional int64 period_clicks = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->period_clicks(), output);
  }

  // optional int64 period_reshares = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->period_reshares(), output);
  }

  // optional int64 period_comments = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->period_comments(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.GroupPeriodStats)
}

::google::protobuf::uint8* SourceData_GroupPeriodStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.GroupPeriodStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double all_likes_mean = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->all_likes_mean(), target);
  }

  // optional double all_likes_variance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->all_likes_variance(), target);
  }

  // optional double period_likes_mean = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->period_likes_mean(), target);
  }

  // optional double period_likes_variance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->period_likes_variance(), target);
  }

  // optional double period_clicks_mean = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->period_clicks_mean(), target);
  }

  // optional double period_clicks_variance = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->period_clicks_variance(), target);
  }

  // optional double period_reshares_mean = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->period_reshares_mean(), target);
  }

  // optional double period_reshares_variance = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->period_reshares_variance(), target);
  }

  // optional double period_comments_mean = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->period_comments_mean(), target);
  }

  // optional double period_comments_variance = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->period_comments_variance(), target);
  }

  // optional int64 all_likes = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->all_likes(), target);
  }

  // optional int64 period_likes = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->period_likes(), target);
  }

  // optional int64 period_clicks = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->period_clicks(), target);
  }

  // optional int64 period_reshares = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->period_reshares(), target);
  }

  // optional int64 period_comments = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->period_comments(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.GroupPeriodStats)
  return target;
}

size_t SourceData_GroupPeriodStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.GroupPeriodStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double all_likes_mean = 1;
    if (has_all_likes_mean()) {
      total_size += 1 + 8;
    }

    // optional double all_likes_variance = 2;
    if (has_all_likes_variance()) {
      total_size += 1 + 8;
    }

    // optional double period_likes_mean = 3;
    if (has_period_likes_mean()) {
      total_size += 1 + 8;
    }

    // optional double period_likes_variance = 4;
    if (has_period_likes_variance()) {
      total_size += 1 + 8;
    }

    // optional double period_clicks_mean = 5;
    if (has_period_clicks_mean()) {
      total_size += 1 + 8;
    }

    // optional double period_clicks_variance = 6;
    if (has_period_clicks_variance()) {
      total_size += 1 + 8;
    }

    // optional double period_reshares_mean = 7;
    if (has_period_reshares_mean()) {
      total_size += 1 + 8;
    }

    // optional double period_reshares_variance = 8;
    if (has_period_reshares_variance()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional double period_comments_mean = 9;
    if (has_period_comments_mean()) {
      total_size += 1 + 8;
    }

    // optional double period_comments_variance = 10;
    if (has_period_comments_variance()) {
      total_size += 1 + 8;
    }

    // optional int64 all_likes = 11;
    if (has_all_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->all_likes());
    }

    // optional int64 period_likes = 12;
    if (has_period_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->period_likes());
    }

    // optional int64 period_clicks = 13;
    if (has_period_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->period_clicks());
    }

    // optional int64 period_reshares = 14;
    if (has_period_reshares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->period_reshares());
    }

    // optional int64 period_comments = 15;
    if (has_period_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->period_comments());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_GroupPeriodStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.GroupPeriodStats)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_GroupPeriodStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_GroupPeriodStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.GroupPeriodStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.GroupPeriodStats)
    MergeFrom(*source);
  }
}

void SourceData_GroupPeriodStats::MergeFrom(const SourceData_GroupPeriodStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.GroupPeriodStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      all_likes_mean_ = from.all_likes_mean_;
    }
    if (cached_has_bits & 0x00000002u) {
      all_likes_variance_ = from.all_likes_variance_;
    }
    if (cached_has_bits & 0x00000004u) {
      period_likes_mean_ = from.period_likes_mean_;
    }
    if (cached_has_bits & 0x00000008u) {
      period_likes_variance_ = from.period_likes_variance_;
    }
    if (cached_has_bits & 0x00000010u) {
      period_clicks_mean_ = from.period_clicks_mean_;
    }
    if (cached_has_bits & 0x00000020u) {
      period_clicks_variance_ = from.period_clicks_variance_;
    }
    if (cached_has_bits & 0x00000040u) {
      period_reshares_mean_ = from.period_reshares_mean_;
    }
    if (cached_has_bits & 0x00000080u) {
      period_reshares_variance_ = from.period_reshares_variance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      period_comments_mean_ = from.period_comments_mean_;
    }
    if (cached_has_bits & 0x00000200u) {
      period_comments_variance_ = from.period_comments_variance_;
    }
    if (cached_has_bits & 0x00000400u) {
      all_likes_ = from.all_likes_;
    }
    if (cached_has_bits & 0x00000800u) {
      period_likes_ = from.period_likes_;
    }
    if (cached_has_bits & 0x00001000u) {
      period_clicks_ = from.period_clicks_;
    }
    if (cached_has_bits & 0x00002000u) {
      period_reshares_ = from.period_reshares_;
    }
    if (cached_has_bits & 0x00004000u) {
      period_comments_ = from.period_comments_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_GroupPeriodStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.GroupPeriodStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_GroupPeriodStats::CopyFrom(const SourceData_GroupPeriodStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.GroupPeriodStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_GroupPeriodStats::IsInitialized() const {
  return true;
}

void SourceData_GroupPeriodStats::Swap(SourceData_GroupPeriodStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_GroupPeriodStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_GroupPeriodStats::UnsafeArenaSwap(SourceData_GroupPeriodStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_GroupPeriodStats::InternalSwap(SourceData_GroupPeriodStats* other) {
  using std::swap;
  swap(all_likes_mean_, other->all_likes_mean_);
  swap(all_likes_variance_, other->all_likes_variance_);
  swap(period_likes_mean_, other->period_likes_mean_);
  swap(period_likes_variance_, other->period_likes_variance_);
  swap(period_clicks_mean_, other->period_clicks_mean_);
  swap(period_clicks_variance_, other->period_clicks_variance_);
  swap(period_reshares_mean_, other->period_reshares_mean_);
  swap(period_reshares_variance_, other->period_reshares_variance_);
  swap(period_comments_mean_, other->period_comments_mean_);
  swap(period_comments_variance_, other->period_comments_variance_);
  swap(all_likes_, other->all_likes_);
  swap(period_likes_, other->period_likes_);
  swap(period_clicks_, other->period_clicks_);
  swap(period_reshares_, other->period_reshares_);
  swap(period_comments_, other->period_comments_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_GroupPeriodStats::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_GroupPeriodStats

// optional double all_likes_mean = 1;
bool SourceData_GroupPeriodStats::has_all_likes_mean() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_GroupPeriodStats::set_has_all_likes_mean() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_GroupPeriodStats::clear_has_all_likes_mean() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_GroupPeriodStats::clear_all_likes_mean() {
  all_likes_mean_ = 0;
  clear_has_all_likes_mean();
}
double SourceData_GroupPeriodStats::all_likes_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.all_likes_mean)
  return all_likes_mean_;
}
void SourceData_GroupPeriodStats::set_all_likes_mean(double value) {
  set_has_all_likes_mean();
  all_likes_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.all_likes_mean)
}

// optional double all_likes_variance = 2;
bool SourceData_GroupPeriodStats::has_all_likes_variance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_GroupPeriodStats::set_has_all_likes_variance() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_GroupPeriodStats::clear_has_all_likes_variance() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_GroupPeriodStats::clear_all_likes_variance() {
  all_likes_variance_ = 0;
  clear_has_all_likes_variance();
}
double SourceData_GroupPeriodStats::all_likes_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.all_likes_variance)
  return all_likes_variance_;
}
void SourceData_GroupPeriodStats::set_all_likes_variance(double value) {
  set_has_all_likes_variance();
  all_likes_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.all_likes_variance)
}

// optional double period_likes_mean = 3;
bool SourceData_GroupPeriodStats::has_period_likes_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_likes_mean() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData_GroupPeriodStats::clear_has_period_likes_mean() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData_GroupPeriodStats::clear_period_likes_mean() {
  period_likes_mean_ = 0;
  clear_has_period_likes_mean();
}
double SourceData_GroupPeriodStats::period_likes_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_likes_mean)
  return period_likes_mean_;
}
void SourceData_GroupPeriodStats::set_period_likes_mean(double value) {
  set_has_period_likes_mean();
  period_likes_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_likes_mean)
}

// optional double period_likes_variance = 4;
bool SourceData_GroupPeriodStats::has_period_likes_variance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_likes_variance() {
  _has_bits_[0] |= 0x00000008u;
}
void SourceData_GroupPeriodStats::clear_has_period_likes_variance() {
  _has_bits_[0] &= ~0x00000008u;
}
void SourceData_GroupPeriodStats::clear_period_likes_variance() {
  period_likes_variance_ = 0;
  clear_has_period_likes_variance();
}
double SourceData_GroupPeriodStats::period_likes_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_likes_variance)
  return period_likes_variance_;
}
void SourceData_GroupPeriodStats::set_period_likes_variance(double value) {
  set_has_period_likes_variance();
  period_likes_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_likes_variance)
}

// optional double period_clicks_mean = 5;
bool SourceData_GroupPeriodStats::has_period_clicks_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_clicks_mean() {
  _has_bits_[0] |= 0x00000010u;
}
void SourceData_GroupPeriodStats::clear_has_period_clicks_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
void SourceData_GroupPeriodStats::clear_period_clicks_mean() {
  period_clicks_mean_ = 0;
  clear_has_period_clicks_mean();
}
double SourceData_GroupPeriodStats::period_clicks_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_clicks_mean)
  return period_clicks_mean_;
}
void SourceData_GroupPeriodStats::set_period_clicks_mean(double value) {
  set_has_period_clicks_mean();
  period_clicks_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_clicks_mean)
}

// optional double period_clicks_variance = 6;
bool SourceData_GroupPeriodStats::has_period_clicks_variance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_clicks_variance() {
  _has_bits_[0] |= 0x00000020u;
}
void SourceData_GroupPeriodStats::clear_has_period_clicks_variance() {
  _has_bits_[0] &= ~0x00000020u;
}
void SourceData_GroupPeriodStats::clear_period_clicks_variance() {
  period_clicks_variance_ = 0;
  clear_has_period_clicks_variance();
}
double SourceData_GroupPeriodStats::period_clicks_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_clicks_variance)
  return period_clicks_variance_;
}
void SourceData_GroupPeriodStats::set_period_clicks_variance(double value) {
  set_has_period_clicks_variance();
  period_clicks_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_clicks_variance)
}

// optional double period_reshares_mean = 7;
bool SourceData_GroupPeriodStats::has_period_reshares_mean() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_reshares_mean() {
  _has_bits_[0] |= 0x00000040u;
}
void SourceData_GroupPeriodStats::clear_has_period_reshares_mean() {
  _has_bits_[0] &= ~0x00000040u;
}
void SourceData_GroupPeriodStats::clear_period_reshares_mean() {
  period_reshares_mean_ = 0;
  clear_has_period_reshares_mean();
}
double SourceData_GroupPeriodStats::period_reshares_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_reshares_mean)
  return period_reshares_mean_;
}
void SourceData_GroupPeriodStats::set_period_reshares_mean(double value) {
  set_has_period_reshares_mean();
  period_reshares_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_reshares_mean)
}

// optional double period_reshares_variance = 8;
bool SourceData_GroupPeriodStats::has_period_reshares_variance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_reshares_variance() {
  _has_bits_[0] |= 0x00000080u;
}
void SourceData_GroupPeriodStats::clear_has_period_reshares_variance() {
  _has_bits_[0] &= ~0x00000080u;
}
void SourceData_GroupPeriodStats::clear_period_reshares_variance() {
  period_reshares_variance_ = 0;
  clear_has_period_reshares_variance();
}
double SourceData_GroupPeriodStats::period_reshares_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_reshares_variance)
  return period_reshares_variance_;
}
void SourceData_GroupPeriodStats::set_period_reshares_variance(double value) {
  set_has_period_reshares_variance();
  period_reshares_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_reshares_variance)
}

// optional double period_comments_mean = 9;
bool SourceData_GroupPeriodStats::has_period_comments_mean() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_comments_mean() {
  _has_bits_[0] |= 0x00000100u;
}
void SourceData_GroupPeriodStats::clear_has_period_comments_mean() {
  _has_bits_[0] &= ~0x00000100u;
}
void SourceData_GroupPeriodStats::clear_period_comments_mean() {
  period_comments_mean_ = 0;
  clear_has_period_comments_mean();
}
double SourceData_GroupPeriodStats::period_comments_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_comments_mean)
  return period_comments_mean_;
}
void SourceData_GroupPeriodStats::set_period_comments_mean(double value) {
  set_has_period_comments_mean();
  period_comments_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_comments_mean)
}

// optional double period_comments_variance = 10;
bool SourceData_GroupPeriodStats::has_period_comments_variance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_comments_variance() {
  _has_bits_[0] |= 0x00000200u;
}
void SourceData_GroupPeriodStats::clear_has_period_comments_variance() {
  _has_bits_[0] &= ~0x00000200u;
}
void SourceData_GroupPeriodStats::clear_period_comments_variance() {
  period_comments_variance_ = 0;
  clear_has_period_comments_variance();
}
double SourceData_GroupPeriodStats::period_comments_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_comments_variance)
  return period_comments_variance_;
}
void SourceData_GroupPeriodStats::set_period_comments_variance(double value) {
  set_has_period_comments_variance();
  period_comments_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_comments_variance)
}

// optional int64 all_likes = 11;
bool SourceData_GroupPeriodStats::has_all_likes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SourceData_GroupPeriodStats::set_has_all_likes() {
  _has_bits_[0] |= 0x00000400u;
}
void SourceData_GroupPeriodStats::clear_has_all_likes() {
  _has_bits_[0] &= ~0x00000400u;
}
void SourceData_GroupPeriodStats::clear_all_likes() {
  all_likes_ = GOOGLE_LONGLONG(0);
  clear_has_all_likes();
}
::google::protobuf::int64 SourceData_GroupPeriodStats::all_likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.all_likes)
  return all_likes_;
}
void SourceData_GroupPeriodStats::set_all_likes(::google::protobuf::int64 value) {
  set_has_all_likes();
  all_likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.all_likes)
}

// optional int64 period_likes = 12;
bool SourceData_GroupPeriodStats::has_period_likes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_likes() {
  _has_bits_[0] |= 0x00000800u;
}
void SourceData_GroupPeriodStats::clear_has_period_likes() {
  _has_bits_[0] &= ~0x00000800u;
}
void SourceData_GroupPeriodStats::clear_period_likes() {
  period_likes_ = GOOGLE_LONGLONG(0);
  clear_has_period_likes();
}
::google::protobuf::int64 SourceData_GroupPeriodStats::period_likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_likes)
  return period_likes_;
}
void SourceData_GroupPeriodStats::set_period_likes(::google::protobuf::int64 value) {
  set_has_period_likes();
  period_likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_likes)
}

// optional int64 period_clicks = 13;
bool SourceData_GroupPeriodStats::has_period_clicks() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_clicks() {
  _has_bits_[0] |= 0x00001000u;
}
void SourceData_GroupPeriodStats::clear_has_period_clicks() {
  _has_bits_[0] &= ~0x00001000u;
}
void SourceData_GroupPeriodStats::clear_period_clicks() {
  period_clicks_ = GOOGLE_LONGLONG(0);
  clear_has_period_clicks();
}
::google::protobuf::int64 SourceData_GroupPeriodStats::period_clicks() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_clicks)
  return period_clicks_;
}
void SourceData_GroupPeriodStats::set_period_clicks(::google::protobuf::int64 value) {
  set_has_period_clicks();
  period_clicks_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_clicks)
}

// optional int64 period_reshares = 14;
bool SourceData_GroupPeriodStats::has_period_reshares() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_reshares() {
  _has_bits_[0] |= 0x00002000u;
}
void SourceData_GroupPeriodStats::clear_has_period_reshares() {
  _has_bits_[0] &= ~0x00002000u;
}
void SourceData_GroupPeriodStats::clear_period_reshares() {
  period_reshares_ = GOOGLE_LONGLONG(0);
  clear_has_period_reshares();
}
::google::protobuf::int64 SourceData_GroupPeriodStats::period_reshares() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_reshares)
  return period_reshares_;
}
void SourceData_GroupPeriodStats::set_period_reshares(::google::protobuf::int64 value) {
  set_has_period_reshares();
  period_reshares_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_reshares)
}

// optional int64 period_comments = 15;
bool SourceData_GroupPeriodStats::has_period_comments() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SourceData_GroupPeriodStats::set_has_period_comments() {
  _has_bits_[0] |= 0x00004000u;
}
void SourceData_GroupPeriodStats::clear_has_period_comments() {
  _has_bits_[0] &= ~0x00004000u;
}
void SourceData_GroupPeriodStats::clear_period_comments() {
  period_comments_ = GOOGLE_LONGLONG(0);
  clear_has_period_comments();
}
::google::protobuf::int64 SourceData_GroupPeriodStats::period_comments() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_comments)
  return period_comments_;
}
void SourceData_GroupPeriodStats::set_period_comments(::google::protobuf::int64 value) {
  set_has_period_comments();
  period_comments_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_comments)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourcePopularityStat_PopularityStat::kHitsFieldNumber;
const int SourceData_SourcePopularityStat_PopularityStat::kHitsMeanFieldNumber;
const int SourceData_SourcePopularityStat_PopularityStat::kHitsVarianceFieldNumber;
const int SourceData_SourcePopularityStat_PopularityStat::kUrlsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourcePopularityStat_PopularityStat::SourceData_SourcePopularityStat_PopularityStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
}
SourceData_SourcePopularityStat_PopularityStat::SourceData_SourcePopularityStat_PopularityStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
}
SourceData_SourcePopularityStat_PopularityStat::SourceData_SourcePopularityStat_PopularityStat(const SourceData_SourcePopularityStat_PopularityStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hits_, &from.hits_,
    static_cast<size_t>(reinterpret_cast<char*>(&urls_) -
    reinterpret_cast<char*>(&hits_)) + sizeof(urls_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
}

void SourceData_SourcePopularityStat_PopularityStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&urls_) -
      reinterpret_cast<char*>(&hits_)) + sizeof(urls_));
}

SourceData_SourcePopularityStat_PopularityStat::~SourceData_SourcePopularityStat_PopularityStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  SharedDtor();
}

void SourceData_SourcePopularityStat_PopularityStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_SourcePopularityStat_PopularityStat::ArenaDtor(void* object) {
  SourceData_SourcePopularityStat_PopularityStat* _this = reinterpret_cast< SourceData_SourcePopularityStat_PopularityStat* >(object);
  (void)_this;
}
void SourceData_SourcePopularityStat_PopularityStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourcePopularityStat_PopularityStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourcePopularityStat_PopularityStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourcePopularityStat_PopularityStat& SourceData_SourcePopularityStat_PopularityStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat_PopularityStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourcePopularityStat_PopularityStat>(arena);
}

void SourceData_SourcePopularityStat_PopularityStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&urls_) -
        reinterpret_cast<char*>(&hits_)) + sizeof(urls_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourcePopularityStat_PopularityStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hits_mean = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_hits_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hits_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hits_variance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_hits_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hits_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 urls = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_urls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  return false;
#undef DO_
}

void SourceData_SourcePopularityStat_PopularityStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hits = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hits(), output);
  }

  // optional float hits_mean = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->hits_mean(), output);
  }

  // optional float hits_variance = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->hits_variance(), output);
  }

  // optional uint32 urls = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->urls(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
}

::google::protobuf::uint8* SourceData_SourcePopularityStat_PopularityStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hits = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hits(), target);
  }

  // optional float hits_mean = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->hits_mean(), target);
  }

  // optional float hits_variance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->hits_variance(), target);
  }

  // optional uint32 urls = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->urls(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  return target;
}

size_t SourceData_SourcePopularityStat_PopularityStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 hits = 1;
    if (has_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hits());
    }

    // optional float hits_mean = 2;
    if (has_hits_mean()) {
      total_size += 1 + 4;
    }

    // optional float hits_variance = 3;
    if (has_hits_variance()) {
      total_size += 1 + 4;
    }

    // optional uint32 urls = 4;
    if (has_urls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->urls());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourcePopularityStat_PopularityStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourcePopularityStat_PopularityStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourcePopularityStat_PopularityStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
    MergeFrom(*source);
  }
}

void SourceData_SourcePopularityStat_PopularityStat::MergeFrom(const SourceData_SourcePopularityStat_PopularityStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      hits_ = from.hits_;
    }
    if (cached_has_bits & 0x00000002u) {
      hits_mean_ = from.hits_mean_;
    }
    if (cached_has_bits & 0x00000004u) {
      hits_variance_ = from.hits_variance_;
    }
    if (cached_has_bits & 0x00000008u) {
      urls_ = from.urls_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_SourcePopularityStat_PopularityStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourcePopularityStat_PopularityStat::CopyFrom(const SourceData_SourcePopularityStat_PopularityStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourcePopularityStat_PopularityStat::IsInitialized() const {
  return true;
}

void SourceData_SourcePopularityStat_PopularityStat::Swap(SourceData_SourcePopularityStat_PopularityStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourcePopularityStat_PopularityStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourcePopularityStat_PopularityStat::UnsafeArenaSwap(SourceData_SourcePopularityStat_PopularityStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourcePopularityStat_PopularityStat::InternalSwap(SourceData_SourcePopularityStat_PopularityStat* other) {
  using std::swap;
  swap(hits_, other->hits_);
  swap(hits_mean_, other->hits_mean_);
  swap(hits_variance_, other->hits_variance_);
  swap(urls_, other->urls_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourcePopularityStat_PopularityStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourcePopularityStat_PopularityStat

// optional uint32 hits = 1;
bool SourceData_SourcePopularityStat_PopularityStat::has_hits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourcePopularityStat_PopularityStat::set_has_hits() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourcePopularityStat_PopularityStat::clear_has_hits() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourcePopularityStat_PopularityStat::clear_hits() {
  hits_ = 0u;
  clear_has_hits();
}
::google::protobuf::uint32 SourceData_SourcePopularityStat_PopularityStat::hits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits)
  return hits_;
}
void SourceData_SourcePopularityStat_PopularityStat::set_hits(::google::protobuf::uint32 value) {
  set_has_hits();
  hits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits)
}

// optional float hits_mean = 2;
bool SourceData_SourcePopularityStat_PopularityStat::has_hits_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourcePopularityStat_PopularityStat::set_has_hits_mean() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourcePopularityStat_PopularityStat::clear_has_hits_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourcePopularityStat_PopularityStat::clear_hits_mean() {
  hits_mean_ = 0;
  clear_has_hits_mean();
}
float SourceData_SourcePopularityStat_PopularityStat::hits_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits_mean)
  return hits_mean_;
}
void SourceData_SourcePopularityStat_PopularityStat::set_hits_mean(float value) {
  set_has_hits_mean();
  hits_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits_mean)
}

// optional float hits_variance = 3;
bool SourceData_SourcePopularityStat_PopularityStat::has_hits_variance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData_SourcePopularityStat_PopularityStat::set_has_hits_variance() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData_SourcePopularityStat_PopularityStat::clear_has_hits_variance() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData_SourcePopularityStat_PopularityStat::clear_hits_variance() {
  hits_variance_ = 0;
  clear_has_hits_variance();
}
float SourceData_SourcePopularityStat_PopularityStat::hits_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits_variance)
  return hits_variance_;
}
void SourceData_SourcePopularityStat_PopularityStat::set_hits_variance(float value) {
  set_has_hits_variance();
  hits_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits_variance)
}

// optional uint32 urls = 4;
bool SourceData_SourcePopularityStat_PopularityStat::has_urls() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SourceData_SourcePopularityStat_PopularityStat::set_has_urls() {
  _has_bits_[0] |= 0x00000008u;
}
void SourceData_SourcePopularityStat_PopularityStat::clear_has_urls() {
  _has_bits_[0] &= ~0x00000008u;
}
void SourceData_SourcePopularityStat_PopularityStat::clear_urls() {
  urls_ = 0u;
  clear_has_urls();
}
::google::protobuf::uint32 SourceData_SourcePopularityStat_PopularityStat::urls() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.urls)
  return urls_;
}
void SourceData_SourcePopularityStat_PopularityStat::set_urls(::google::protobuf::uint32 value) {
  set_has_urls();
  urls_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.urls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_SourcePopularityStat_GeoPopularity::_slow_mutable_stat() {
  stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat_GeoPopularity::_slow_release_stat() {
  if (stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* temp = new ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat(*stat_);
    stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat_GeoPopularity::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.stat)
  clear_has_stat();
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void SourceData_SourcePopularityStat_GeoPopularity::_slow_set_allocated_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat** stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stat) == NULL) {
      message_arena->Own(*stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stat)) {
      ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* new_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >(
            message_arena);
      new_stat->CopyFrom(**stat);
      *stat = new_stat;
    }
}
void SourceData_SourcePopularityStat_GeoPopularity::unsafe_arena_set_allocated_stat(
    ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete stat_;
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourcePopularityStat_GeoPopularity::kGeoFieldNumber;
const int SourceData_SourcePopularityStat_GeoPopularity::kStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourcePopularityStat_GeoPopularity::SourceData_SourcePopularityStat_GeoPopularity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
}
SourceData_SourcePopularityStat_GeoPopularity::SourceData_SourcePopularityStat_GeoPopularity(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
}
SourceData_SourcePopularityStat_GeoPopularity::SourceData_SourcePopularityStat_GeoPopularity(const SourceData_SourcePopularityStat_GeoPopularity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stat()) {
    stat_ = new ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  geo_ = from.geo_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
}

void SourceData_SourcePopularityStat_GeoPopularity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geo_) -
      reinterpret_cast<char*>(&stat_)) + sizeof(geo_));
}

SourceData_SourcePopularityStat_GeoPopularity::~SourceData_SourcePopularityStat_GeoPopularity() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  SharedDtor();
}

void SourceData_SourcePopularityStat_GeoPopularity::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete stat_;
}

void SourceData_SourcePopularityStat_GeoPopularity::ArenaDtor(void* object) {
  SourceData_SourcePopularityStat_GeoPopularity* _this = reinterpret_cast< SourceData_SourcePopularityStat_GeoPopularity* >(object);
  (void)_this;
}
void SourceData_SourcePopularityStat_GeoPopularity::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourcePopularityStat_GeoPopularity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourcePopularityStat_GeoPopularity::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourcePopularityStat_GeoPopularity& SourceData_SourcePopularityStat_GeoPopularity::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourcePopularityStat_GeoPopularity* SourceData_SourcePopularityStat_GeoPopularity::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourcePopularityStat_GeoPopularity>(arena);
}

void SourceData_SourcePopularityStat_GeoPopularity::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_stat()) {
    GOOGLE_DCHECK(stat_ != NULL);
    stat_->::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat::Clear();
  }
  geo_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourcePopularityStat_GeoPopularity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 geo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  return false;
#undef DO_
}

void SourceData_SourcePopularityStat_GeoPopularity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->geo(), output);
  }

  // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
}

::google::protobuf::uint8* SourceData_SourcePopularityStat_GeoPopularity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->geo(), target);
  }

  // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  return target;
}

size_t SourceData_SourcePopularityStat_GeoPopularity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  size_t total_size = 0;

  if (has_stat()) {
    // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stat_);
  }

  if (has_geo()) {
    // required uint32 geo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());
  }

  return total_size;
}
size_t SourceData_SourcePopularityStat_GeoPopularity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stat_);

    // required uint32 geo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourcePopularityStat_GeoPopularity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourcePopularityStat_GeoPopularity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourcePopularityStat_GeoPopularity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
    MergeFrom(*source);
  }
}

void SourceData_SourcePopularityStat_GeoPopularity::MergeFrom(const SourceData_SourcePopularityStat_GeoPopularity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stat()->::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat::MergeFrom(from.stat());
    }
    if (cached_has_bits & 0x00000002u) {
      geo_ = from.geo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_SourcePopularityStat_GeoPopularity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourcePopularityStat_GeoPopularity::CopyFrom(const SourceData_SourcePopularityStat_GeoPopularity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourcePopularityStat_GeoPopularity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SourceData_SourcePopularityStat_GeoPopularity::Swap(SourceData_SourcePopularityStat_GeoPopularity* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourcePopularityStat_GeoPopularity* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourcePopularityStat_GeoPopularity::UnsafeArenaSwap(SourceData_SourcePopularityStat_GeoPopularity* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourcePopularityStat_GeoPopularity::InternalSwap(SourceData_SourcePopularityStat_GeoPopularity* other) {
  using std::swap;
  swap(stat_, other->stat_);
  swap(geo_, other->geo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourcePopularityStat_GeoPopularity::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourcePopularityStat_GeoPopularity

// required uint32 geo = 1;
bool SourceData_SourcePopularityStat_GeoPopularity::has_geo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourcePopularityStat_GeoPopularity::set_has_geo() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourcePopularityStat_GeoPopularity::clear_has_geo() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourcePopularityStat_GeoPopularity::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
::google::protobuf::uint32 SourceData_SourcePopularityStat_GeoPopularity::geo() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.geo)
  return geo_;
}
void SourceData_SourcePopularityStat_GeoPopularity::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.geo)
}

// required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 2;
bool SourceData_SourcePopularityStat_GeoPopularity::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourcePopularityStat_GeoPopularity::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourcePopularityStat_GeoPopularity::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourcePopularityStat_GeoPopularity::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat::Clear();
  clear_has_stat();
}
const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& SourceData_SourcePopularityStat_GeoPopularity::stat() const {
  const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat*>(
      &::cosmo::pb::_SourceData_SourcePopularityStat_PopularityStat_default_instance_);
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat_GeoPopularity::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.stat)
  return stat_;
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat_GeoPopularity::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourcePopularityStat_GeoPopularity::set_allocated_stat(::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_SourcePopularityStat::_slow_mutable_stat() {
  stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::_slow_release_stat() {
  if (stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* temp = new ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat(*stat_);
    stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourcePopularityStat.stat)
  clear_has_stat();
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void SourceData_SourcePopularityStat::_slow_set_allocated_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat** stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stat) == NULL) {
      message_arena->Own(*stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stat)) {
      ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* new_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >(
            message_arena);
      new_stat->CopyFrom(**stat);
      *stat = new_stat;
    }
}
void SourceData_SourcePopularityStat::unsafe_arena_set_allocated_stat(
    ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete stat_;
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourcePopularityStat.stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourcePopularityStat::kStatFieldNumber;
const int SourceData_SourcePopularityStat::kGeoStatFieldNumber;
const int SourceData_SourcePopularityStat::kMaleStatFieldNumber;
const int SourceData_SourcePopularityStat::kFemaleStatFieldNumber;
const int SourceData_SourcePopularityStat::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourcePopularityStat::SourceData_SourcePopularityStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourcePopularityStat)
}
SourceData_SourcePopularityStat::SourceData_SourcePopularityStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  geo_stat_(arena),
  male_stat_(arena),
  female_stat_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourcePopularityStat)
}
SourceData_SourcePopularityStat::SourceData_SourcePopularityStat(const SourceData_SourcePopularityStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      geo_stat_(from.geo_stat_),
      male_stat_(from.male_stat_),
      female_stat_(from.female_stat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stat()) {
    stat_ = new ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourcePopularityStat)
}

void SourceData_SourcePopularityStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&stat_)) + sizeof(version_));
}

SourceData_SourcePopularityStat::~SourceData_SourcePopularityStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourcePopularityStat)
  SharedDtor();
}

void SourceData_SourcePopularityStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete stat_;
}

void SourceData_SourcePopularityStat::ArenaDtor(void* object) {
  SourceData_SourcePopularityStat* _this = reinterpret_cast< SourceData_SourcePopularityStat* >(object);
  (void)_this;
}
void SourceData_SourcePopularityStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourcePopularityStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourcePopularityStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourcePopularityStat& SourceData_SourcePopularityStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourcePopularityStat* SourceData_SourcePopularityStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourcePopularityStat>(arena);
}

void SourceData_SourcePopularityStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourcePopularityStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_stat_.Clear();
  male_stat_.Clear();
  female_stat_.Clear();
  if (has_stat()) {
    GOOGLE_DCHECK(stat_ != NULL);
    stat_->::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat::Clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourcePopularityStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourcePopularityStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity geo_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geo_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat male_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_male_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat female_stat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_female_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourcePopularityStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourcePopularityStat)
  return false;
#undef DO_
}

void SourceData_SourcePopularityStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourcePopularityStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stat_, output);
  }

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity geo_stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geo_stat(static_cast<int>(i)), output);
  }

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat male_stat = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->male_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->male_stat(static_cast<int>(i)), output);
  }

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat female_stat = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->female_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->female_stat(static_cast<int>(i)), output);
  }

  // required uint32 version = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourcePopularityStat)
}

::google::protobuf::uint8* SourceData_SourcePopularityStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourcePopularityStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stat_, deterministic, target);
  }

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity geo_stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->geo_stat(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat male_stat = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->male_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->male_stat(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat female_stat = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->female_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->female_stat(static_cast<int>(i)), deterministic, target);
  }

  // required uint32 version = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourcePopularityStat)
  return target;
}

size_t SourceData_SourcePopularityStat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.SourceData.SourcePopularityStat)
  size_t total_size = 0;

  if (has_stat()) {
    // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stat_);
  }

  if (has_version()) {
    // required uint32 version = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t SourceData_SourcePopularityStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourcePopularityStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stat_);

    // required uint32 version = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity geo_stat = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->geo_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_stat(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat male_stat = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->male_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->male_stat(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat female_stat = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->female_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->female_stat(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourcePopularityStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourcePopularityStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourcePopularityStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourcePopularityStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourcePopularityStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourcePopularityStat)
    MergeFrom(*source);
  }
}

void SourceData_SourcePopularityStat::MergeFrom(const SourceData_SourcePopularityStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourcePopularityStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_stat_.MergeFrom(from.geo_stat_);
  male_stat_.MergeFrom(from.male_stat_);
  female_stat_.MergeFrom(from.female_stat_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stat()->::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat::MergeFrom(from.stat());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_SourcePopularityStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourcePopularityStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourcePopularityStat::CopyFrom(const SourceData_SourcePopularityStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourcePopularityStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourcePopularityStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->geo_stat())) return false;
  return true;
}

void SourceData_SourcePopularityStat::Swap(SourceData_SourcePopularityStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourcePopularityStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourcePopularityStat::UnsafeArenaSwap(SourceData_SourcePopularityStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourcePopularityStat::InternalSwap(SourceData_SourcePopularityStat* other) {
  using std::swap;
  geo_stat_.InternalSwap(&other->geo_stat_);
  male_stat_.InternalSwap(&other->male_stat_);
  female_stat_.InternalSwap(&other->female_stat_);
  swap(stat_, other->stat_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourcePopularityStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourcePopularityStat

// required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 1;
bool SourceData_SourcePopularityStat::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourcePopularityStat::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourcePopularityStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourcePopularityStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat::Clear();
  clear_has_stat();
}
const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& SourceData_SourcePopularityStat::stat() const {
  const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat*>(
      &::cosmo::pb::_SourceData_SourcePopularityStat_PopularityStat_default_instance_);
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourcePopularityStat.stat)
  return stat_;
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourcePopularityStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourcePopularityStat::set_allocated_stat(::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourcePopularityStat.stat)
}

// repeated .cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity geo_stat = 2;
int SourceData_SourcePopularityStat::geo_stat_size() const {
  return geo_stat_.size();
}
void SourceData_SourcePopularityStat::clear_geo_stat() {
  geo_stat_.Clear();
}
const ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity& SourceData_SourcePopularityStat::geo_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.geo_stat)
  return geo_stat_.Get(index);
}
::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity* SourceData_SourcePopularityStat::mutable_geo_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourcePopularityStat.geo_stat)
  return geo_stat_.Mutable(index);
}
::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity* SourceData_SourcePopularityStat::add_geo_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourcePopularityStat.geo_stat)
  return geo_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity >*
SourceData_SourcePopularityStat::mutable_geo_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourcePopularityStat.geo_stat)
  return &geo_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity >&
SourceData_SourcePopularityStat::geo_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourcePopularityStat.geo_stat)
  return geo_stat_;
}

// repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat male_stat = 3;
int SourceData_SourcePopularityStat::male_stat_size() const {
  return male_stat_.size();
}
void SourceData_SourcePopularityStat::clear_male_stat() {
  male_stat_.Clear();
}
const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& SourceData_SourcePopularityStat::male_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.male_stat)
  return male_stat_.Get(index);
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::mutable_male_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourcePopularityStat.male_stat)
  return male_stat_.Mutable(index);
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::add_male_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourcePopularityStat.male_stat)
  return male_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >*
SourceData_SourcePopularityStat::mutable_male_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourcePopularityStat.male_stat)
  return &male_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >&
SourceData_SourcePopularityStat::male_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourcePopularityStat.male_stat)
  return male_stat_;
}

// repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat female_stat = 4;
int SourceData_SourcePopularityStat::female_stat_size() const {
  return female_stat_.size();
}
void SourceData_SourcePopularityStat::clear_female_stat() {
  female_stat_.Clear();
}
const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& SourceData_SourcePopularityStat::female_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.female_stat)
  return female_stat_.Get(index);
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::mutable_female_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourcePopularityStat.female_stat)
  return female_stat_.Mutable(index);
}
::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::add_female_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourcePopularityStat.female_stat)
  return female_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >*
SourceData_SourcePopularityStat::mutable_female_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourcePopularityStat.female_stat)
  return &female_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >&
SourceData_SourcePopularityStat::female_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourcePopularityStat.female_stat)
  return female_stat_;
}

// required uint32 version = 5;
bool SourceData_SourcePopularityStat::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourcePopularityStat::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourcePopularityStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourcePopularityStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 SourceData_SourcePopularityStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.version)
  return version_;
}
void SourceData_SourcePopularityStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourceEventStat_EventStat::kEventsCountFieldNumber;
const int SourceData_SourceEventStat_EventStat::kEventsMeanFieldNumber;
const int SourceData_SourceEventStat_EventStat::kEventsSigmaFieldNumber;
const int SourceData_SourceEventStat_EventStat::kDocumentsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourceEventStat_EventStat::SourceData_SourceEventStat_EventStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourceEventStat.EventStat)
}
SourceData_SourceEventStat_EventStat::SourceData_SourceEventStat_EventStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourceEventStat.EventStat)
}
SourceData_SourceEventStat_EventStat::SourceData_SourceEventStat_EventStat(const SourceData_SourceEventStat_EventStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&events_count_, &from.events_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&documents_count_) -
    reinterpret_cast<char*>(&events_count_)) + sizeof(documents_count_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourceEventStat.EventStat)
}

void SourceData_SourceEventStat_EventStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&events_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&documents_count_) -
      reinterpret_cast<char*>(&events_count_)) + sizeof(documents_count_));
}

SourceData_SourceEventStat_EventStat::~SourceData_SourceEventStat_EventStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourceEventStat.EventStat)
  SharedDtor();
}

void SourceData_SourceEventStat_EventStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_SourceEventStat_EventStat::ArenaDtor(void* object) {
  SourceData_SourceEventStat_EventStat* _this = reinterpret_cast< SourceData_SourceEventStat_EventStat* >(object);
  (void)_this;
}
void SourceData_SourceEventStat_EventStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourceEventStat_EventStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourceEventStat_EventStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourceEventStat_EventStat& SourceData_SourceEventStat_EventStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_EventStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourceEventStat_EventStat>(arena);
}

void SourceData_SourceEventStat_EventStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourceEventStat.EventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&events_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&documents_count_) -
        reinterpret_cast<char*>(&events_count_)) + sizeof(documents_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourceEventStat_EventStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourceEventStat.EventStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 events_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_events_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &events_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float events_mean = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_events_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &events_mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float events_sigma = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_events_sigma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &events_sigma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 documents_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_documents_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &documents_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourceEventStat.EventStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourceEventStat.EventStat)
  return false;
#undef DO_
}

void SourceData_SourceEventStat_EventStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourceEventStat.EventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 events_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->events_count(), output);
  }

  // optional float events_mean = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->events_mean(), output);
  }

  // optional float events_sigma = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->events_sigma(), output);
  }

  // optional uint32 documents_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->documents_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourceEventStat.EventStat)
}

::google::protobuf::uint8* SourceData_SourceEventStat_EventStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourceEventStat.EventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 events_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->events_count(), target);
  }

  // optional float events_mean = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->events_mean(), target);
  }

  // optional float events_sigma = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->events_sigma(), target);
  }

  // optional uint32 documents_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->documents_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourceEventStat.EventStat)
  return target;
}

size_t SourceData_SourceEventStat_EventStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourceEventStat.EventStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 events_count = 1;
    if (has_events_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->events_count());
    }

    // optional float events_mean = 2;
    if (has_events_mean()) {
      total_size += 1 + 4;
    }

    // optional float events_sigma = 3;
    if (has_events_sigma()) {
      total_size += 1 + 4;
    }

    // optional uint32 documents_count = 4;
    if (has_documents_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->documents_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourceEventStat_EventStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourceEventStat.EventStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourceEventStat_EventStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourceEventStat_EventStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourceEventStat.EventStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourceEventStat.EventStat)
    MergeFrom(*source);
  }
}

void SourceData_SourceEventStat_EventStat::MergeFrom(const SourceData_SourceEventStat_EventStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourceEventStat.EventStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      events_count_ = from.events_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      events_mean_ = from.events_mean_;
    }
    if (cached_has_bits & 0x00000004u) {
      events_sigma_ = from.events_sigma_;
    }
    if (cached_has_bits & 0x00000008u) {
      documents_count_ = from.documents_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_SourceEventStat_EventStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourceEventStat.EventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourceEventStat_EventStat::CopyFrom(const SourceData_SourceEventStat_EventStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourceEventStat.EventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourceEventStat_EventStat::IsInitialized() const {
  return true;
}

void SourceData_SourceEventStat_EventStat::Swap(SourceData_SourceEventStat_EventStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourceEventStat_EventStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourceEventStat_EventStat::UnsafeArenaSwap(SourceData_SourceEventStat_EventStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourceEventStat_EventStat::InternalSwap(SourceData_SourceEventStat_EventStat* other) {
  using std::swap;
  swap(events_count_, other->events_count_);
  swap(events_mean_, other->events_mean_);
  swap(events_sigma_, other->events_sigma_);
  swap(documents_count_, other->documents_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourceEventStat_EventStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourceEventStat_EventStat

// optional uint32 events_count = 1;
bool SourceData_SourceEventStat_EventStat::has_events_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourceEventStat_EventStat::set_has_events_count() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourceEventStat_EventStat::clear_has_events_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourceEventStat_EventStat::clear_events_count() {
  events_count_ = 0u;
  clear_has_events_count();
}
::google::protobuf::uint32 SourceData_SourceEventStat_EventStat::events_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.EventStat.events_count)
  return events_count_;
}
void SourceData_SourceEventStat_EventStat::set_events_count(::google::protobuf::uint32 value) {
  set_has_events_count();
  events_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.EventStat.events_count)
}

// optional float events_mean = 2;
bool SourceData_SourceEventStat_EventStat::has_events_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourceEventStat_EventStat::set_has_events_mean() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourceEventStat_EventStat::clear_has_events_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourceEventStat_EventStat::clear_events_mean() {
  events_mean_ = 0;
  clear_has_events_mean();
}
float SourceData_SourceEventStat_EventStat::events_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.EventStat.events_mean)
  return events_mean_;
}
void SourceData_SourceEventStat_EventStat::set_events_mean(float value) {
  set_has_events_mean();
  events_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.EventStat.events_mean)
}

// optional float events_sigma = 3;
bool SourceData_SourceEventStat_EventStat::has_events_sigma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData_SourceEventStat_EventStat::set_has_events_sigma() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData_SourceEventStat_EventStat::clear_has_events_sigma() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData_SourceEventStat_EventStat::clear_events_sigma() {
  events_sigma_ = 0;
  clear_has_events_sigma();
}
float SourceData_SourceEventStat_EventStat::events_sigma() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.EventStat.events_sigma)
  return events_sigma_;
}
void SourceData_SourceEventStat_EventStat::set_events_sigma(float value) {
  set_has_events_sigma();
  events_sigma_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.EventStat.events_sigma)
}

// optional uint32 documents_count = 4;
bool SourceData_SourceEventStat_EventStat::has_documents_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SourceData_SourceEventStat_EventStat::set_has_documents_count() {
  _has_bits_[0] |= 0x00000008u;
}
void SourceData_SourceEventStat_EventStat::clear_has_documents_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void SourceData_SourceEventStat_EventStat::clear_documents_count() {
  documents_count_ = 0u;
  clear_has_documents_count();
}
::google::protobuf::uint32 SourceData_SourceEventStat_EventStat::documents_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.EventStat.documents_count)
  return documents_count_;
}
void SourceData_SourceEventStat_EventStat::set_documents_count(::google::protobuf::uint32 value) {
  set_has_documents_count();
  documents_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.EventStat.documents_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_SourceEventStat_GeoEventStat::_slow_mutable_stat() {
  stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat_EventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_GeoEventStat::_slow_release_stat() {
  if (stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat_EventStat(*stat_);
    stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_GeoEventStat::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.stat)
  clear_has_stat();
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void SourceData_SourceEventStat_GeoEventStat::_slow_set_allocated_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat_EventStat** stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stat) == NULL) {
      message_arena->Own(*stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stat)) {
      ::cosmo::pb::SourceData_SourceEventStat_EventStat* new_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat_EventStat >(
            message_arena);
      new_stat->CopyFrom(**stat);
      *stat = new_stat;
    }
}
void SourceData_SourceEventStat_GeoEventStat::unsafe_arena_set_allocated_stat(
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete stat_;
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourceEventStat_GeoEventStat::kGeoFieldNumber;
const int SourceData_SourceEventStat_GeoEventStat::kStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourceEventStat_GeoEventStat::SourceData_SourceEventStat_GeoEventStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
}
SourceData_SourceEventStat_GeoEventStat::SourceData_SourceEventStat_GeoEventStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
}
SourceData_SourceEventStat_GeoEventStat::SourceData_SourceEventStat_GeoEventStat(const SourceData_SourceEventStat_GeoEventStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stat()) {
    stat_ = new ::cosmo::pb::SourceData_SourceEventStat_EventStat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  geo_ = from.geo_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
}

void SourceData_SourceEventStat_GeoEventStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geo_) -
      reinterpret_cast<char*>(&stat_)) + sizeof(geo_));
}

SourceData_SourceEventStat_GeoEventStat::~SourceData_SourceEventStat_GeoEventStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  SharedDtor();
}

void SourceData_SourceEventStat_GeoEventStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete stat_;
}

void SourceData_SourceEventStat_GeoEventStat::ArenaDtor(void* object) {
  SourceData_SourceEventStat_GeoEventStat* _this = reinterpret_cast< SourceData_SourceEventStat_GeoEventStat* >(object);
  (void)_this;
}
void SourceData_SourceEventStat_GeoEventStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourceEventStat_GeoEventStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourceEventStat_GeoEventStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourceEventStat_GeoEventStat& SourceData_SourceEventStat_GeoEventStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourceEventStat_GeoEventStat* SourceData_SourceEventStat_GeoEventStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourceEventStat_GeoEventStat>(arena);
}

void SourceData_SourceEventStat_GeoEventStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_stat()) {
    GOOGLE_DCHECK(stat_ != NULL);
    stat_->::cosmo::pb::SourceData_SourceEventStat_EventStat::Clear();
  }
  geo_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourceEventStat_GeoEventStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 geo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  return false;
#undef DO_
}

void SourceData_SourceEventStat_GeoEventStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->geo(), output);
  }

  // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
}

::google::protobuf::uint8* SourceData_SourceEventStat_GeoEventStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->geo(), target);
  }

  // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  return target;
}

size_t SourceData_SourceEventStat_GeoEventStat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  size_t total_size = 0;

  if (has_stat()) {
    // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stat_);
  }

  if (has_geo()) {
    // required uint32 geo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());
  }

  return total_size;
}
size_t SourceData_SourceEventStat_GeoEventStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stat_);

    // required uint32 geo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourceEventStat_GeoEventStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourceEventStat_GeoEventStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourceEventStat_GeoEventStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
    MergeFrom(*source);
  }
}

void SourceData_SourceEventStat_GeoEventStat::MergeFrom(const SourceData_SourceEventStat_GeoEventStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stat()->::cosmo::pb::SourceData_SourceEventStat_EventStat::MergeFrom(from.stat());
    }
    if (cached_has_bits & 0x00000002u) {
      geo_ = from.geo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_SourceEventStat_GeoEventStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourceEventStat_GeoEventStat::CopyFrom(const SourceData_SourceEventStat_GeoEventStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourceEventStat_GeoEventStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SourceData_SourceEventStat_GeoEventStat::Swap(SourceData_SourceEventStat_GeoEventStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourceEventStat_GeoEventStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourceEventStat_GeoEventStat::UnsafeArenaSwap(SourceData_SourceEventStat_GeoEventStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourceEventStat_GeoEventStat::InternalSwap(SourceData_SourceEventStat_GeoEventStat* other) {
  using std::swap;
  swap(stat_, other->stat_);
  swap(geo_, other->geo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourceEventStat_GeoEventStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourceEventStat_GeoEventStat

// required uint32 geo = 1;
bool SourceData_SourceEventStat_GeoEventStat::has_geo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourceEventStat_GeoEventStat::set_has_geo() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourceEventStat_GeoEventStat::clear_has_geo() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourceEventStat_GeoEventStat::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
::google::protobuf::uint32 SourceData_SourceEventStat_GeoEventStat::geo() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.geo)
  return geo_;
}
void SourceData_SourceEventStat_GeoEventStat::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.geo)
}

// required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
bool SourceData_SourceEventStat_GeoEventStat::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourceEventStat_GeoEventStat::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourceEventStat_GeoEventStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourceEventStat_GeoEventStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourceEventStat_EventStat::Clear();
  clear_has_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat_EventStat& SourceData_SourceEventStat_GeoEventStat::stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat_EventStat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat_EventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_EventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_GeoEventStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.stat)
  return stat_;
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_GeoEventStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourceEventStat_GeoEventStat::set_allocated_stat(::cosmo::pb::SourceData_SourceEventStat_EventStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_SourceEventStat_SocDemEventStat::_slow_mutable_stat() {
  stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat_EventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_SocDemEventStat::_slow_release_stat() {
  if (stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat_EventStat(*stat_);
    stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_SocDemEventStat::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.stat)
  clear_has_stat();
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void SourceData_SourceEventStat_SocDemEventStat::_slow_set_allocated_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat_EventStat** stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stat) == NULL) {
      message_arena->Own(*stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stat)) {
      ::cosmo::pb::SourceData_SourceEventStat_EventStat* new_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat_EventStat >(
            message_arena);
      new_stat->CopyFrom(**stat);
      *stat = new_stat;
    }
}
void SourceData_SourceEventStat_SocDemEventStat::unsafe_arena_set_allocated_stat(
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete stat_;
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourceEventStat_SocDemEventStat::kSocdemIdFieldNumber;
const int SourceData_SourceEventStat_SocDemEventStat::kStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourceEventStat_SocDemEventStat::SourceData_SourceEventStat_SocDemEventStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
}
SourceData_SourceEventStat_SocDemEventStat::SourceData_SourceEventStat_SocDemEventStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
}
SourceData_SourceEventStat_SocDemEventStat::SourceData_SourceEventStat_SocDemEventStat(const SourceData_SourceEventStat_SocDemEventStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stat()) {
    stat_ = new ::cosmo::pb::SourceData_SourceEventStat_EventStat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  socdem_id_ = from.socdem_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
}

void SourceData_SourceEventStat_SocDemEventStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socdem_id_) -
      reinterpret_cast<char*>(&stat_)) + sizeof(socdem_id_));
}

SourceData_SourceEventStat_SocDemEventStat::~SourceData_SourceEventStat_SocDemEventStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  SharedDtor();
}

void SourceData_SourceEventStat_SocDemEventStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete stat_;
}

void SourceData_SourceEventStat_SocDemEventStat::ArenaDtor(void* object) {
  SourceData_SourceEventStat_SocDemEventStat* _this = reinterpret_cast< SourceData_SourceEventStat_SocDemEventStat* >(object);
  (void)_this;
}
void SourceData_SourceEventStat_SocDemEventStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourceEventStat_SocDemEventStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourceEventStat_SocDemEventStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourceEventStat_SocDemEventStat& SourceData_SourceEventStat_SocDemEventStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourceEventStat_SocDemEventStat* SourceData_SourceEventStat_SocDemEventStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourceEventStat_SocDemEventStat>(arena);
}

void SourceData_SourceEventStat_SocDemEventStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_stat()) {
    GOOGLE_DCHECK(stat_ != NULL);
    stat_->::cosmo::pb::SourceData_SourceEventStat_EventStat::Clear();
  }
  socdem_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourceEventStat_SocDemEventStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 socdem_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_socdem_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socdem_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  return false;
#undef DO_
}

void SourceData_SourceEventStat_SocDemEventStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 socdem_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->socdem_id(), output);
  }

  // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
}

::google::protobuf::uint8* SourceData_SourceEventStat_SocDemEventStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 socdem_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->socdem_id(), target);
  }

  // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  return target;
}

size_t SourceData_SourceEventStat_SocDemEventStat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  size_t total_size = 0;

  if (has_stat()) {
    // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stat_);
  }

  if (has_socdem_id()) {
    // required uint32 socdem_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socdem_id());
  }

  return total_size;
}
size_t SourceData_SourceEventStat_SocDemEventStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stat_);

    // required uint32 socdem_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socdem_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourceEventStat_SocDemEventStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourceEventStat_SocDemEventStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourceEventStat_SocDemEventStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
    MergeFrom(*source);
  }
}

void SourceData_SourceEventStat_SocDemEventStat::MergeFrom(const SourceData_SourceEventStat_SocDemEventStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stat()->::cosmo::pb::SourceData_SourceEventStat_EventStat::MergeFrom(from.stat());
    }
    if (cached_has_bits & 0x00000002u) {
      socdem_id_ = from.socdem_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_SourceEventStat_SocDemEventStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourceEventStat_SocDemEventStat::CopyFrom(const SourceData_SourceEventStat_SocDemEventStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourceEventStat_SocDemEventStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SourceData_SourceEventStat_SocDemEventStat::Swap(SourceData_SourceEventStat_SocDemEventStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourceEventStat_SocDemEventStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourceEventStat_SocDemEventStat::UnsafeArenaSwap(SourceData_SourceEventStat_SocDemEventStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourceEventStat_SocDemEventStat::InternalSwap(SourceData_SourceEventStat_SocDemEventStat* other) {
  using std::swap;
  swap(stat_, other->stat_);
  swap(socdem_id_, other->socdem_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourceEventStat_SocDemEventStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourceEventStat_SocDemEventStat

// required uint32 socdem_id = 1;
bool SourceData_SourceEventStat_SocDemEventStat::has_socdem_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourceEventStat_SocDemEventStat::set_has_socdem_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourceEventStat_SocDemEventStat::clear_has_socdem_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourceEventStat_SocDemEventStat::clear_socdem_id() {
  socdem_id_ = 0u;
  clear_has_socdem_id();
}
::google::protobuf::uint32 SourceData_SourceEventStat_SocDemEventStat::socdem_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.socdem_id)
  return socdem_id_;
}
void SourceData_SourceEventStat_SocDemEventStat::set_socdem_id(::google::protobuf::uint32 value) {
  set_has_socdem_id();
  socdem_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.socdem_id)
}

// required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
bool SourceData_SourceEventStat_SocDemEventStat::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourceEventStat_SocDemEventStat::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourceEventStat_SocDemEventStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourceEventStat_SocDemEventStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourceEventStat_EventStat::Clear();
  clear_has_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat_EventStat& SourceData_SourceEventStat_SocDemEventStat::stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat_EventStat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat_EventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_EventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_SocDemEventStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.stat)
  return stat_;
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_SocDemEventStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourceEventStat_SocDemEventStat::set_allocated_stat(::cosmo::pb::SourceData_SourceEventStat_EventStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_SourceEventStat::_slow_mutable_stat() {
  stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat_EventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat::_slow_release_stat() {
  if (stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat_EventStat(*stat_);
    stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceEventStat.stat)
  clear_has_stat();
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void SourceData_SourceEventStat::_slow_set_allocated_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat_EventStat** stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stat) == NULL) {
      message_arena->Own(*stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stat)) {
      ::cosmo::pb::SourceData_SourceEventStat_EventStat* new_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat_EventStat >(
            message_arena);
      new_stat->CopyFrom(**stat);
      *stat = new_stat;
    }
}
void SourceData_SourceEventStat::unsafe_arena_set_allocated_stat(
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete stat_;
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceEventStat.stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourceEventStat::kStatFieldNumber;
const int SourceData_SourceEventStat::kGeoStatFieldNumber;
const int SourceData_SourceEventStat::kSocDemStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourceEventStat::SourceData_SourceEventStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourceEventStat)
}
SourceData_SourceEventStat::SourceData_SourceEventStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  geo_stat_(arena),
  soc_dem_stat_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourceEventStat)
}
SourceData_SourceEventStat::SourceData_SourceEventStat(const SourceData_SourceEventStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      geo_stat_(from.geo_stat_),
      soc_dem_stat_(from.soc_dem_stat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stat()) {
    stat_ = new ::cosmo::pb::SourceData_SourceEventStat_EventStat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourceEventStat)
}

void SourceData_SourceEventStat::SharedCtor() {
  _cached_size_ = 0;
  stat_ = NULL;
}

SourceData_SourceEventStat::~SourceData_SourceEventStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourceEventStat)
  SharedDtor();
}

void SourceData_SourceEventStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete stat_;
}

void SourceData_SourceEventStat::ArenaDtor(void* object) {
  SourceData_SourceEventStat* _this = reinterpret_cast< SourceData_SourceEventStat* >(object);
  (void)_this;
}
void SourceData_SourceEventStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourceEventStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourceEventStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourceEventStat& SourceData_SourceEventStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourceEventStat* SourceData_SourceEventStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourceEventStat>(arena);
}

void SourceData_SourceEventStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourceEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_stat_.Clear();
  soc_dem_stat_.Clear();
  if (has_stat()) {
    GOOGLE_DCHECK(stat_ != NULL);
    stat_->::cosmo::pb::SourceData_SourceEventStat_EventStat::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourceEventStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourceEventStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.SourceData.SourceEventStat.GeoEventStat geo_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geo_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.SourceData.SourceEventStat.SocDemEventStat soc_dem_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soc_dem_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourceEventStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourceEventStat)
  return false;
#undef DO_
}

void SourceData_SourceEventStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourceEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stat_, output);
  }

  // repeated .cosmo.pb.SourceData.SourceEventStat.GeoEventStat geo_stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geo_stat(static_cast<int>(i)), output);
  }

  // repeated .cosmo.pb.SourceData.SourceEventStat.SocDemEventStat soc_dem_stat = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->soc_dem_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->soc_dem_stat(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourceEventStat)
}

::google::protobuf::uint8* SourceData_SourceEventStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourceEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stat_, deterministic, target);
  }

  // repeated .cosmo.pb.SourceData.SourceEventStat.GeoEventStat geo_stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->geo_stat(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cosmo.pb.SourceData.SourceEventStat.SocDemEventStat soc_dem_stat = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->soc_dem_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->soc_dem_stat(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourceEventStat)
  return target;
}

size_t SourceData_SourceEventStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourceEventStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 1;
  if (has_stat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stat_);
  }
  // repeated .cosmo.pb.SourceData.SourceEventStat.GeoEventStat geo_stat = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->geo_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_stat(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.SourceData.SourceEventStat.SocDemEventStat soc_dem_stat = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->soc_dem_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soc_dem_stat(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourceEventStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourceEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourceEventStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourceEventStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourceEventStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourceEventStat)
    MergeFrom(*source);
  }
}

void SourceData_SourceEventStat::MergeFrom(const SourceData_SourceEventStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourceEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_stat_.MergeFrom(from.geo_stat_);
  soc_dem_stat_.MergeFrom(from.soc_dem_stat_);
  if (from.has_stat()) {
    mutable_stat()->::cosmo::pb::SourceData_SourceEventStat_EventStat::MergeFrom(from.stat());
  }
}

void SourceData_SourceEventStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourceEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourceEventStat::CopyFrom(const SourceData_SourceEventStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourceEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourceEventStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->geo_stat())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->soc_dem_stat())) return false;
  return true;
}

void SourceData_SourceEventStat::Swap(SourceData_SourceEventStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourceEventStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourceEventStat::UnsafeArenaSwap(SourceData_SourceEventStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourceEventStat::InternalSwap(SourceData_SourceEventStat* other) {
  using std::swap;
  geo_stat_.InternalSwap(&other->geo_stat_);
  soc_dem_stat_.InternalSwap(&other->soc_dem_stat_);
  swap(stat_, other->stat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourceEventStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourceEventStat

// required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 1;
bool SourceData_SourceEventStat::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourceEventStat::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourceEventStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourceEventStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourceEventStat_EventStat::Clear();
  clear_has_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat_EventStat& SourceData_SourceEventStat::stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat_EventStat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat_EventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_EventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceEventStat.stat)
  return stat_;
}
::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceEventStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourceEventStat::set_allocated_stat(::cosmo::pb::SourceData_SourceEventStat_EventStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceEventStat.stat)
}

// repeated .cosmo.pb.SourceData.SourceEventStat.GeoEventStat geo_stat = 2;
int SourceData_SourceEventStat::geo_stat_size() const {
  return geo_stat_.size();
}
void SourceData_SourceEventStat::clear_geo_stat() {
  geo_stat_.Clear();
}
const ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat& SourceData_SourceEventStat::geo_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.geo_stat)
  return geo_stat_.Get(index);
}
::cosmo::pb::SourceData_SourceEventStat_GeoEventStat* SourceData_SourceEventStat::mutable_geo_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceEventStat.geo_stat)
  return geo_stat_.Mutable(index);
}
::cosmo::pb::SourceData_SourceEventStat_GeoEventStat* SourceData_SourceEventStat::add_geo_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceEventStat.geo_stat)
  return geo_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat >*
SourceData_SourceEventStat::mutable_geo_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceEventStat.geo_stat)
  return &geo_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat >&
SourceData_SourceEventStat::geo_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceEventStat.geo_stat)
  return geo_stat_;
}

// repeated .cosmo.pb.SourceData.SourceEventStat.SocDemEventStat soc_dem_stat = 3;
int SourceData_SourceEventStat::soc_dem_stat_size() const {
  return soc_dem_stat_.size();
}
void SourceData_SourceEventStat::clear_soc_dem_stat() {
  soc_dem_stat_.Clear();
}
const ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat& SourceData_SourceEventStat::soc_dem_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.soc_dem_stat)
  return soc_dem_stat_.Get(index);
}
::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat* SourceData_SourceEventStat::mutable_soc_dem_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceEventStat.soc_dem_stat)
  return soc_dem_stat_.Mutable(index);
}
::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat* SourceData_SourceEventStat::add_soc_dem_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceEventStat.soc_dem_stat)
  return soc_dem_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat >*
SourceData_SourceEventStat::mutable_soc_dem_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceEventStat.soc_dem_stat)
  return &soc_dem_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat >&
SourceData_SourceEventStat::soc_dem_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceEventStat.soc_dem_stat)
  return soc_dem_stat_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_GroupEventStat::_slow_mutable_likes_stat() {
  likes_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::_slow_release_likes_stat() {
  if (likes_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat(*likes_stat_);
    likes_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::unsafe_arena_release_likes_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.GroupEventStat.likes_stat)
  clear_has_likes_stat();
  ::cosmo::pb::SourceData_SourceEventStat* temp = likes_stat_;
  likes_stat_ = NULL;
  return temp;
}
void SourceData_GroupEventStat::_slow_set_allocated_likes_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** likes_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*likes_stat) == NULL) {
      message_arena->Own(*likes_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*likes_stat)) {
      ::cosmo::pb::SourceData_SourceEventStat* new_likes_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
            message_arena);
      new_likes_stat->CopyFrom(**likes_stat);
      *likes_stat = new_likes_stat;
    }
}
void SourceData_GroupEventStat::unsafe_arena_set_allocated_likes_stat(
    ::cosmo::pb::SourceData_SourceEventStat* likes_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete likes_stat_;
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.GroupEventStat.likes_stat)
}
void SourceData_GroupEventStat::_slow_mutable_clicks_stat() {
  clicks_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::_slow_release_clicks_stat() {
  if (clicks_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat(*clicks_stat_);
    clicks_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::unsafe_arena_release_clicks_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.GroupEventStat.clicks_stat)
  clear_has_clicks_stat();
  ::cosmo::pb::SourceData_SourceEventStat* temp = clicks_stat_;
  clicks_stat_ = NULL;
  return temp;
}
void SourceData_GroupEventStat::_slow_set_allocated_clicks_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** clicks_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clicks_stat) == NULL) {
      message_arena->Own(*clicks_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clicks_stat)) {
      ::cosmo::pb::SourceData_SourceEventStat* new_clicks_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
            message_arena);
      new_clicks_stat->CopyFrom(**clicks_stat);
      *clicks_stat = new_clicks_stat;
    }
}
void SourceData_GroupEventStat::unsafe_arena_set_allocated_clicks_stat(
    ::cosmo::pb::SourceData_SourceEventStat* clicks_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete clicks_stat_;
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.GroupEventStat.clicks_stat)
}
void SourceData_GroupEventStat::_slow_mutable_reshares_stat() {
  reshares_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::_slow_release_reshares_stat() {
  if (reshares_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat(*reshares_stat_);
    reshares_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::unsafe_arena_release_reshares_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.GroupEventStat.reshares_stat)
  clear_has_reshares_stat();
  ::cosmo::pb::SourceData_SourceEventStat* temp = reshares_stat_;
  reshares_stat_ = NULL;
  return temp;
}
void SourceData_GroupEventStat::_slow_set_allocated_reshares_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** reshares_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*reshares_stat) == NULL) {
      message_arena->Own(*reshares_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*reshares_stat)) {
      ::cosmo::pb::SourceData_SourceEventStat* new_reshares_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
            message_arena);
      new_reshares_stat->CopyFrom(**reshares_stat);
      *reshares_stat = new_reshares_stat;
    }
}
void SourceData_GroupEventStat::unsafe_arena_set_allocated_reshares_stat(
    ::cosmo::pb::SourceData_SourceEventStat* reshares_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete reshares_stat_;
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.GroupEventStat.reshares_stat)
}
void SourceData_GroupEventStat::_slow_mutable_comments_stat() {
  comments_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::_slow_release_comments_stat() {
  if (comments_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat(*comments_stat_);
    comments_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::unsafe_arena_release_comments_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.GroupEventStat.comments_stat)
  clear_has_comments_stat();
  ::cosmo::pb::SourceData_SourceEventStat* temp = comments_stat_;
  comments_stat_ = NULL;
  return temp;
}
void SourceData_GroupEventStat::_slow_set_allocated_comments_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** comments_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*comments_stat) == NULL) {
      message_arena->Own(*comments_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*comments_stat)) {
      ::cosmo::pb::SourceData_SourceEventStat* new_comments_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
            message_arena);
      new_comments_stat->CopyFrom(**comments_stat);
      *comments_stat = new_comments_stat;
    }
}
void SourceData_GroupEventStat::unsafe_arena_set_allocated_comments_stat(
    ::cosmo::pb::SourceData_SourceEventStat* comments_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete comments_stat_;
  }
  comments_stat_ = comments_stat;
  if (comments_stat) {
    set_has_comments_stat();
  } else {
    clear_has_comments_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.GroupEventStat.comments_stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_GroupEventStat::kVersionFieldNumber;
const int SourceData_GroupEventStat::kLikesStatFieldNumber;
const int SourceData_GroupEventStat::kClicksStatFieldNumber;
const int SourceData_GroupEventStat::kResharesStatFieldNumber;
const int SourceData_GroupEventStat::kCommentsStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_GroupEventStat::SourceData_GroupEventStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.GroupEventStat)
}
SourceData_GroupEventStat::SourceData_GroupEventStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.GroupEventStat)
}
SourceData_GroupEventStat::SourceData_GroupEventStat(const SourceData_GroupEventStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_likes_stat()) {
    likes_stat_ = new ::cosmo::pb::SourceData_SourceEventStat(*from.likes_stat_);
  } else {
    likes_stat_ = NULL;
  }
  if (from.has_clicks_stat()) {
    clicks_stat_ = new ::cosmo::pb::SourceData_SourceEventStat(*from.clicks_stat_);
  } else {
    clicks_stat_ = NULL;
  }
  if (from.has_reshares_stat()) {
    reshares_stat_ = new ::cosmo::pb::SourceData_SourceEventStat(*from.reshares_stat_);
  } else {
    reshares_stat_ = NULL;
  }
  if (from.has_comments_stat()) {
    comments_stat_ = new ::cosmo::pb::SourceData_SourceEventStat(*from.comments_stat_);
  } else {
    comments_stat_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.GroupEventStat)
}

void SourceData_GroupEventStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&likes_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&likes_stat_)) + sizeof(version_));
}

SourceData_GroupEventStat::~SourceData_GroupEventStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.GroupEventStat)
  SharedDtor();
}

void SourceData_GroupEventStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete likes_stat_;
  if (this != internal_default_instance()) delete clicks_stat_;
  if (this != internal_default_instance()) delete reshares_stat_;
  if (this != internal_default_instance()) delete comments_stat_;
}

void SourceData_GroupEventStat::ArenaDtor(void* object) {
  SourceData_GroupEventStat* _this = reinterpret_cast< SourceData_GroupEventStat* >(object);
  (void)_this;
}
void SourceData_GroupEventStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_GroupEventStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_GroupEventStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_GroupEventStat& SourceData_GroupEventStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_GroupEventStat* SourceData_GroupEventStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_GroupEventStat>(arena);
}

void SourceData_GroupEventStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.GroupEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(likes_stat_ != NULL);
      likes_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(clicks_stat_ != NULL);
      clicks_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reshares_stat_ != NULL);
      reshares_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(comments_stat_ != NULL);
      comments_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
    }
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_GroupEventStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.GroupEventStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_likes_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clicks_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshares_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceEventStat comments_stat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comments_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.GroupEventStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.GroupEventStat)
  return false;
#undef DO_
}

void SourceData_GroupEventStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.GroupEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->likes_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->clicks_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->reshares_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat comments_stat = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->comments_stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.GroupEventStat)
}

::google::protobuf::uint8* SourceData_GroupEventStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.GroupEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->likes_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->clicks_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->reshares_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat comments_stat = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->comments_stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.GroupEventStat)
  return target;
}

size_t SourceData_GroupEventStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.GroupEventStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 2;
    if (has_likes_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->likes_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 3;
    if (has_clicks_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clicks_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 4;
    if (has_reshares_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reshares_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceEventStat comments_stat = 5;
    if (has_comments_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->comments_stat_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_GroupEventStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.GroupEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_GroupEventStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_GroupEventStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.GroupEventStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.GroupEventStat)
    MergeFrom(*source);
  }
}

void SourceData_GroupEventStat::MergeFrom(const SourceData_GroupEventStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.GroupEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_likes_stat()->::cosmo::pb::SourceData_SourceEventStat::MergeFrom(from.likes_stat());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_clicks_stat()->::cosmo::pb::SourceData_SourceEventStat::MergeFrom(from.clicks_stat());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reshares_stat()->::cosmo::pb::SourceData_SourceEventStat::MergeFrom(from.reshares_stat());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_comments_stat()->::cosmo::pb::SourceData_SourceEventStat::MergeFrom(from.comments_stat());
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_GroupEventStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.GroupEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_GroupEventStat::CopyFrom(const SourceData_GroupEventStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.GroupEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_GroupEventStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_likes_stat()) {
    if (!this->likes_stat_->IsInitialized()) return false;
  }
  if (has_clicks_stat()) {
    if (!this->clicks_stat_->IsInitialized()) return false;
  }
  if (has_reshares_stat()) {
    if (!this->reshares_stat_->IsInitialized()) return false;
  }
  if (has_comments_stat()) {
    if (!this->comments_stat_->IsInitialized()) return false;
  }
  return true;
}

void SourceData_GroupEventStat::Swap(SourceData_GroupEventStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_GroupEventStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_GroupEventStat::UnsafeArenaSwap(SourceData_GroupEventStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_GroupEventStat::InternalSwap(SourceData_GroupEventStat* other) {
  using std::swap;
  swap(likes_stat_, other->likes_stat_);
  swap(clicks_stat_, other->clicks_stat_);
  swap(reshares_stat_, other->reshares_stat_);
  swap(comments_stat_, other->comments_stat_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_GroupEventStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_GroupEventStat

// required uint32 version = 1;
bool SourceData_GroupEventStat::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SourceData_GroupEventStat::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
void SourceData_GroupEventStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void SourceData_GroupEventStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 SourceData_GroupEventStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupEventStat.version)
  return version_;
}
void SourceData_GroupEventStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupEventStat.version)
}

// optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 2;
bool SourceData_GroupEventStat::has_likes_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_GroupEventStat::set_has_likes_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_GroupEventStat::clear_has_likes_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_GroupEventStat::clear_likes_stat() {
  if (likes_stat_ != NULL) likes_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_likes_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat& SourceData_GroupEventStat::likes_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = likes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupEventStat.likes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::mutable_likes_stat() {
  set_has_likes_stat();
  if (likes_stat_ == NULL) {
    _slow_mutable_likes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.GroupEventStat.likes_stat)
  return likes_stat_;
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::release_likes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.GroupEventStat.likes_stat)
  clear_has_likes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_likes_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = likes_stat_;
    likes_stat_ = NULL;
    return temp;
  }
}
 void SourceData_GroupEventStat::set_allocated_likes_stat(::cosmo::pb::SourceData_SourceEventStat* likes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete likes_stat_;
  }
  if (likes_stat != NULL) {
    _slow_set_allocated_likes_stat(message_arena, &likes_stat);
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.GroupEventStat.likes_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 3;
bool SourceData_GroupEventStat::has_clicks_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_GroupEventStat::set_has_clicks_stat() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_GroupEventStat::clear_has_clicks_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_GroupEventStat::clear_clicks_stat() {
  if (clicks_stat_ != NULL) clicks_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_clicks_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat& SourceData_GroupEventStat::clicks_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = clicks_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupEventStat.clicks_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::mutable_clicks_stat() {
  set_has_clicks_stat();
  if (clicks_stat_ == NULL) {
    _slow_mutable_clicks_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.GroupEventStat.clicks_stat)
  return clicks_stat_;
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::release_clicks_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.GroupEventStat.clicks_stat)
  clear_has_clicks_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = clicks_stat_;
    clicks_stat_ = NULL;
    return temp;
  }
}
 void SourceData_GroupEventStat::set_allocated_clicks_stat(::cosmo::pb::SourceData_SourceEventStat* clicks_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_stat_;
  }
  if (clicks_stat != NULL) {
    _slow_set_allocated_clicks_stat(message_arena, &clicks_stat);
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.GroupEventStat.clicks_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 4;
bool SourceData_GroupEventStat::has_reshares_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData_GroupEventStat::set_has_reshares_stat() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData_GroupEventStat::clear_has_reshares_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData_GroupEventStat::clear_reshares_stat() {
  if (reshares_stat_ != NULL) reshares_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_reshares_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat& SourceData_GroupEventStat::reshares_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = reshares_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupEventStat.reshares_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::mutable_reshares_stat() {
  set_has_reshares_stat();
  if (reshares_stat_ == NULL) {
    _slow_mutable_reshares_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.GroupEventStat.reshares_stat)
  return reshares_stat_;
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::release_reshares_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.GroupEventStat.reshares_stat)
  clear_has_reshares_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_reshares_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = reshares_stat_;
    reshares_stat_ = NULL;
    return temp;
  }
}
 void SourceData_GroupEventStat::set_allocated_reshares_stat(::cosmo::pb::SourceData_SourceEventStat* reshares_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reshares_stat_;
  }
  if (reshares_stat != NULL) {
    _slow_set_allocated_reshares_stat(message_arena, &reshares_stat);
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.GroupEventStat.reshares_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat comments_stat = 5;
bool SourceData_GroupEventStat::has_comments_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SourceData_GroupEventStat::set_has_comments_stat() {
  _has_bits_[0] |= 0x00000008u;
}
void SourceData_GroupEventStat::clear_has_comments_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
void SourceData_GroupEventStat::clear_comments_stat() {
  if (comments_stat_ != NULL) comments_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_comments_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat& SourceData_GroupEventStat::comments_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = comments_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupEventStat.comments_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::mutable_comments_stat() {
  set_has_comments_stat();
  if (comments_stat_ == NULL) {
    _slow_mutable_comments_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.GroupEventStat.comments_stat)
  return comments_stat_;
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::release_comments_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.GroupEventStat.comments_stat)
  clear_has_comments_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_comments_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = comments_stat_;
    comments_stat_ = NULL;
    return temp;
  }
}
 void SourceData_GroupEventStat::set_allocated_comments_stat(::cosmo::pb::SourceData_SourceEventStat* comments_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comments_stat_;
  }
  if (comments_stat != NULL) {
    _slow_set_allocated_comments_stat(message_arena, &comments_stat);
  }
  comments_stat_ = comments_stat;
  if (comments_stat) {
    set_has_comments_stat();
  } else {
    clear_has_comments_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.GroupEventStat.comments_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_SourceLocationStat_Stat::_slow_mutable_shows_stat() {
  shows_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::_slow_release_shows_stat() {
  if (shows_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat(*shows_stat_);
    shows_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::unsafe_arena_release_shows_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceLocationStat.Stat.shows_stat)
  clear_has_shows_stat();
  ::cosmo::pb::SourceData_SourceEventStat* temp = shows_stat_;
  shows_stat_ = NULL;
  return temp;
}
void SourceData_SourceLocationStat_Stat::_slow_set_allocated_shows_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** shows_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shows_stat) == NULL) {
      message_arena->Own(*shows_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shows_stat)) {
      ::cosmo::pb::SourceData_SourceEventStat* new_shows_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
            message_arena);
      new_shows_stat->CopyFrom(**shows_stat);
      *shows_stat = new_shows_stat;
    }
}
void SourceData_SourceLocationStat_Stat::unsafe_arena_set_allocated_shows_stat(
    ::cosmo::pb::SourceData_SourceEventStat* shows_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete shows_stat_;
  }
  shows_stat_ = shows_stat;
  if (shows_stat) {
    set_has_shows_stat();
  } else {
    clear_has_shows_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.shows_stat)
}
void SourceData_SourceLocationStat_Stat::_slow_mutable_clicks_stat() {
  clicks_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::_slow_release_clicks_stat() {
  if (clicks_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat(*clicks_stat_);
    clicks_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::unsafe_arena_release_clicks_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceLocationStat.Stat.clicks_stat)
  clear_has_clicks_stat();
  ::cosmo::pb::SourceData_SourceEventStat* temp = clicks_stat_;
  clicks_stat_ = NULL;
  return temp;
}
void SourceData_SourceLocationStat_Stat::_slow_set_allocated_clicks_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** clicks_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clicks_stat) == NULL) {
      message_arena->Own(*clicks_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clicks_stat)) {
      ::cosmo::pb::SourceData_SourceEventStat* new_clicks_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
            message_arena);
      new_clicks_stat->CopyFrom(**clicks_stat);
      *clicks_stat = new_clicks_stat;
    }
}
void SourceData_SourceLocationStat_Stat::unsafe_arena_set_allocated_clicks_stat(
    ::cosmo::pb::SourceData_SourceEventStat* clicks_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete clicks_stat_;
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.clicks_stat)
}
void SourceData_SourceLocationStat_Stat::_slow_mutable_likes_stat() {
  likes_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::_slow_release_likes_stat() {
  if (likes_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat(*likes_stat_);
    likes_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::unsafe_arena_release_likes_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceLocationStat.Stat.likes_stat)
  clear_has_likes_stat();
  ::cosmo::pb::SourceData_SourceEventStat* temp = likes_stat_;
  likes_stat_ = NULL;
  return temp;
}
void SourceData_SourceLocationStat_Stat::_slow_set_allocated_likes_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** likes_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*likes_stat) == NULL) {
      message_arena->Own(*likes_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*likes_stat)) {
      ::cosmo::pb::SourceData_SourceEventStat* new_likes_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
            message_arena);
      new_likes_stat->CopyFrom(**likes_stat);
      *likes_stat = new_likes_stat;
    }
}
void SourceData_SourceLocationStat_Stat::unsafe_arena_set_allocated_likes_stat(
    ::cosmo::pb::SourceData_SourceEventStat* likes_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete likes_stat_;
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.likes_stat)
}
void SourceData_SourceLocationStat_Stat::_slow_mutable_dislikes_stat() {
  dislikes_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::_slow_release_dislikes_stat() {
  if (dislikes_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat(*dislikes_stat_);
    dislikes_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::unsafe_arena_release_dislikes_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceLocationStat.Stat.dislikes_stat)
  clear_has_dislikes_stat();
  ::cosmo::pb::SourceData_SourceEventStat* temp = dislikes_stat_;
  dislikes_stat_ = NULL;
  return temp;
}
void SourceData_SourceLocationStat_Stat::_slow_set_allocated_dislikes_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** dislikes_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*dislikes_stat) == NULL) {
      message_arena->Own(*dislikes_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*dislikes_stat)) {
      ::cosmo::pb::SourceData_SourceEventStat* new_dislikes_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
            message_arena);
      new_dislikes_stat->CopyFrom(**dislikes_stat);
      *dislikes_stat = new_dislikes_stat;
    }
}
void SourceData_SourceLocationStat_Stat::unsafe_arena_set_allocated_dislikes_stat(
    ::cosmo::pb::SourceData_SourceEventStat* dislikes_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete dislikes_stat_;
  }
  dislikes_stat_ = dislikes_stat;
  if (dislikes_stat) {
    set_has_dislikes_stat();
  } else {
    clear_has_dislikes_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.dislikes_stat)
}
void SourceData_SourceLocationStat_Stat::_slow_mutable_reshares_stat() {
  reshares_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::_slow_release_reshares_stat() {
  if (reshares_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = new ::cosmo::pb::SourceData_SourceEventStat(*reshares_stat_);
    reshares_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::unsafe_arena_release_reshares_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceLocationStat.Stat.reshares_stat)
  clear_has_reshares_stat();
  ::cosmo::pb::SourceData_SourceEventStat* temp = reshares_stat_;
  reshares_stat_ = NULL;
  return temp;
}
void SourceData_SourceLocationStat_Stat::_slow_set_allocated_reshares_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** reshares_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*reshares_stat) == NULL) {
      message_arena->Own(*reshares_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*reshares_stat)) {
      ::cosmo::pb::SourceData_SourceEventStat* new_reshares_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceEventStat >(
            message_arena);
      new_reshares_stat->CopyFrom(**reshares_stat);
      *reshares_stat = new_reshares_stat;
    }
}
void SourceData_SourceLocationStat_Stat::unsafe_arena_set_allocated_reshares_stat(
    ::cosmo::pb::SourceData_SourceEventStat* reshares_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete reshares_stat_;
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.reshares_stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourceLocationStat_Stat::kShowsStatFieldNumber;
const int SourceData_SourceLocationStat_Stat::kClicksStatFieldNumber;
const int SourceData_SourceLocationStat_Stat::kLikesStatFieldNumber;
const int SourceData_SourceLocationStat_Stat::kDislikesStatFieldNumber;
const int SourceData_SourceLocationStat_Stat::kResharesStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourceLocationStat_Stat::SourceData_SourceLocationStat_Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourceLocationStat.Stat)
}
SourceData_SourceLocationStat_Stat::SourceData_SourceLocationStat_Stat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourceLocationStat.Stat)
}
SourceData_SourceLocationStat_Stat::SourceData_SourceLocationStat_Stat(const SourceData_SourceLocationStat_Stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shows_stat()) {
    shows_stat_ = new ::cosmo::pb::SourceData_SourceEventStat(*from.shows_stat_);
  } else {
    shows_stat_ = NULL;
  }
  if (from.has_clicks_stat()) {
    clicks_stat_ = new ::cosmo::pb::SourceData_SourceEventStat(*from.clicks_stat_);
  } else {
    clicks_stat_ = NULL;
  }
  if (from.has_likes_stat()) {
    likes_stat_ = new ::cosmo::pb::SourceData_SourceEventStat(*from.likes_stat_);
  } else {
    likes_stat_ = NULL;
  }
  if (from.has_dislikes_stat()) {
    dislikes_stat_ = new ::cosmo::pb::SourceData_SourceEventStat(*from.dislikes_stat_);
  } else {
    dislikes_stat_ = NULL;
  }
  if (from.has_reshares_stat()) {
    reshares_stat_ = new ::cosmo::pb::SourceData_SourceEventStat(*from.reshares_stat_);
  } else {
    reshares_stat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourceLocationStat.Stat)
}

void SourceData_SourceLocationStat_Stat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&shows_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reshares_stat_) -
      reinterpret_cast<char*>(&shows_stat_)) + sizeof(reshares_stat_));
}

SourceData_SourceLocationStat_Stat::~SourceData_SourceLocationStat_Stat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourceLocationStat.Stat)
  SharedDtor();
}

void SourceData_SourceLocationStat_Stat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete shows_stat_;
  if (this != internal_default_instance()) delete clicks_stat_;
  if (this != internal_default_instance()) delete likes_stat_;
  if (this != internal_default_instance()) delete dislikes_stat_;
  if (this != internal_default_instance()) delete reshares_stat_;
}

void SourceData_SourceLocationStat_Stat::ArenaDtor(void* object) {
  SourceData_SourceLocationStat_Stat* _this = reinterpret_cast< SourceData_SourceLocationStat_Stat* >(object);
  (void)_this;
}
void SourceData_SourceLocationStat_Stat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourceLocationStat_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourceLocationStat_Stat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourceLocationStat_Stat& SourceData_SourceLocationStat_Stat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat_Stat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourceLocationStat_Stat>(arena);
}

void SourceData_SourceLocationStat_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourceLocationStat.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(shows_stat_ != NULL);
      shows_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(clicks_stat_ != NULL);
      clicks_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(likes_stat_ != NULL);
      likes_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dislikes_stat_ != NULL);
      dislikes_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reshares_stat_ != NULL);
      reshares_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourceLocationStat_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourceLocationStat.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cosmo.pb.SourceData.SourceEventStat shows_stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shows_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clicks_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_likes_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceEventStat dislikes_stat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dislikes_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshares_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourceLocationStat.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourceLocationStat.Stat)
  return false;
#undef DO_
}

void SourceData_SourceLocationStat_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourceLocationStat.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.SourceData.SourceEventStat shows_stat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shows_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clicks_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->likes_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat dislikes_stat = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dislikes_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->reshares_stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourceLocationStat.Stat)
}

::google::protobuf::uint8* SourceData_SourceLocationStat_Stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourceLocationStat.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.SourceData.SourceEventStat shows_stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shows_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->clicks_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->likes_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat dislikes_stat = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->dislikes_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->reshares_stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourceLocationStat.Stat)
  return target;
}

size_t SourceData_SourceLocationStat_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourceLocationStat.Stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .cosmo.pb.SourceData.SourceEventStat shows_stat = 1;
    if (has_shows_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shows_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 2;
    if (has_clicks_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clicks_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 3;
    if (has_likes_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->likes_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceEventStat dislikes_stat = 4;
    if (has_dislikes_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dislikes_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 5;
    if (has_reshares_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reshares_stat_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourceLocationStat_Stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourceLocationStat.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourceLocationStat_Stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourceLocationStat_Stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourceLocationStat.Stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourceLocationStat.Stat)
    MergeFrom(*source);
  }
}

void SourceData_SourceLocationStat_Stat::MergeFrom(const SourceData_SourceLocationStat_Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourceLocationStat.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shows_stat()->::cosmo::pb::SourceData_SourceEventStat::MergeFrom(from.shows_stat());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_clicks_stat()->::cosmo::pb::SourceData_SourceEventStat::MergeFrom(from.clicks_stat());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_likes_stat()->::cosmo::pb::SourceData_SourceEventStat::MergeFrom(from.likes_stat());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_dislikes_stat()->::cosmo::pb::SourceData_SourceEventStat::MergeFrom(from.dislikes_stat());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_reshares_stat()->::cosmo::pb::SourceData_SourceEventStat::MergeFrom(from.reshares_stat());
    }
  }
}

void SourceData_SourceLocationStat_Stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourceLocationStat.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourceLocationStat_Stat::CopyFrom(const SourceData_SourceLocationStat_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourceLocationStat.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourceLocationStat_Stat::IsInitialized() const {
  if (has_shows_stat()) {
    if (!this->shows_stat_->IsInitialized()) return false;
  }
  if (has_clicks_stat()) {
    if (!this->clicks_stat_->IsInitialized()) return false;
  }
  if (has_likes_stat()) {
    if (!this->likes_stat_->IsInitialized()) return false;
  }
  if (has_dislikes_stat()) {
    if (!this->dislikes_stat_->IsInitialized()) return false;
  }
  if (has_reshares_stat()) {
    if (!this->reshares_stat_->IsInitialized()) return false;
  }
  return true;
}

void SourceData_SourceLocationStat_Stat::Swap(SourceData_SourceLocationStat_Stat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourceLocationStat_Stat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourceLocationStat_Stat::UnsafeArenaSwap(SourceData_SourceLocationStat_Stat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourceLocationStat_Stat::InternalSwap(SourceData_SourceLocationStat_Stat* other) {
  using std::swap;
  swap(shows_stat_, other->shows_stat_);
  swap(clicks_stat_, other->clicks_stat_);
  swap(likes_stat_, other->likes_stat_);
  swap(dislikes_stat_, other->dislikes_stat_);
  swap(reshares_stat_, other->reshares_stat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourceLocationStat_Stat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourceLocationStat_Stat

// optional .cosmo.pb.SourceData.SourceEventStat shows_stat = 1;
bool SourceData_SourceLocationStat_Stat::has_shows_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourceLocationStat_Stat::set_has_shows_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourceLocationStat_Stat::clear_has_shows_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourceLocationStat_Stat::clear_shows_stat() {
  if (shows_stat_ != NULL) shows_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_shows_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat& SourceData_SourceLocationStat_Stat::shows_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = shows_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.Stat.shows_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::mutable_shows_stat() {
  set_has_shows_stat();
  if (shows_stat_ == NULL) {
    _slow_mutable_shows_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.Stat.shows_stat)
  return shows_stat_;
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::release_shows_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.Stat.shows_stat)
  clear_has_shows_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = shows_stat_;
    shows_stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourceLocationStat_Stat::set_allocated_shows_stat(::cosmo::pb::SourceData_SourceEventStat* shows_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_stat_;
  }
  if (shows_stat != NULL) {
    _slow_set_allocated_shows_stat(message_arena, &shows_stat);
  }
  shows_stat_ = shows_stat;
  if (shows_stat) {
    set_has_shows_stat();
  } else {
    clear_has_shows_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.shows_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 2;
bool SourceData_SourceLocationStat_Stat::has_clicks_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourceLocationStat_Stat::set_has_clicks_stat() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourceLocationStat_Stat::clear_has_clicks_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourceLocationStat_Stat::clear_clicks_stat() {
  if (clicks_stat_ != NULL) clicks_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_clicks_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat& SourceData_SourceLocationStat_Stat::clicks_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = clicks_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.Stat.clicks_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::mutable_clicks_stat() {
  set_has_clicks_stat();
  if (clicks_stat_ == NULL) {
    _slow_mutable_clicks_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.Stat.clicks_stat)
  return clicks_stat_;
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::release_clicks_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.Stat.clicks_stat)
  clear_has_clicks_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = clicks_stat_;
    clicks_stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourceLocationStat_Stat::set_allocated_clicks_stat(::cosmo::pb::SourceData_SourceEventStat* clicks_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_stat_;
  }
  if (clicks_stat != NULL) {
    _slow_set_allocated_clicks_stat(message_arena, &clicks_stat);
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.clicks_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 3;
bool SourceData_SourceLocationStat_Stat::has_likes_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData_SourceLocationStat_Stat::set_has_likes_stat() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData_SourceLocationStat_Stat::clear_has_likes_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData_SourceLocationStat_Stat::clear_likes_stat() {
  if (likes_stat_ != NULL) likes_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_likes_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat& SourceData_SourceLocationStat_Stat::likes_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = likes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.Stat.likes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::mutable_likes_stat() {
  set_has_likes_stat();
  if (likes_stat_ == NULL) {
    _slow_mutable_likes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.Stat.likes_stat)
  return likes_stat_;
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::release_likes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.Stat.likes_stat)
  clear_has_likes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_likes_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = likes_stat_;
    likes_stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourceLocationStat_Stat::set_allocated_likes_stat(::cosmo::pb::SourceData_SourceEventStat* likes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete likes_stat_;
  }
  if (likes_stat != NULL) {
    _slow_set_allocated_likes_stat(message_arena, &likes_stat);
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.likes_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat dislikes_stat = 4;
bool SourceData_SourceLocationStat_Stat::has_dislikes_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SourceData_SourceLocationStat_Stat::set_has_dislikes_stat() {
  _has_bits_[0] |= 0x00000008u;
}
void SourceData_SourceLocationStat_Stat::clear_has_dislikes_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
void SourceData_SourceLocationStat_Stat::clear_dislikes_stat() {
  if (dislikes_stat_ != NULL) dislikes_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_dislikes_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat& SourceData_SourceLocationStat_Stat::dislikes_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = dislikes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.Stat.dislikes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::mutable_dislikes_stat() {
  set_has_dislikes_stat();
  if (dislikes_stat_ == NULL) {
    _slow_mutable_dislikes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.Stat.dislikes_stat)
  return dislikes_stat_;
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::release_dislikes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.Stat.dislikes_stat)
  clear_has_dislikes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dislikes_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = dislikes_stat_;
    dislikes_stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourceLocationStat_Stat::set_allocated_dislikes_stat(::cosmo::pb::SourceData_SourceEventStat* dislikes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dislikes_stat_;
  }
  if (dislikes_stat != NULL) {
    _slow_set_allocated_dislikes_stat(message_arena, &dislikes_stat);
  }
  dislikes_stat_ = dislikes_stat;
  if (dislikes_stat) {
    set_has_dislikes_stat();
  } else {
    clear_has_dislikes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.dislikes_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 5;
bool SourceData_SourceLocationStat_Stat::has_reshares_stat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SourceData_SourceLocationStat_Stat::set_has_reshares_stat() {
  _has_bits_[0] |= 0x00000010u;
}
void SourceData_SourceLocationStat_Stat::clear_has_reshares_stat() {
  _has_bits_[0] &= ~0x00000010u;
}
void SourceData_SourceLocationStat_Stat::clear_reshares_stat() {
  if (reshares_stat_ != NULL) reshares_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_reshares_stat();
}
const ::cosmo::pb::SourceData_SourceEventStat& SourceData_SourceLocationStat_Stat::reshares_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = reshares_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.Stat.reshares_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::mutable_reshares_stat() {
  set_has_reshares_stat();
  if (reshares_stat_ == NULL) {
    _slow_mutable_reshares_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.Stat.reshares_stat)
  return reshares_stat_;
}
::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::release_reshares_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.Stat.reshares_stat)
  clear_has_reshares_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_reshares_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = reshares_stat_;
    reshares_stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourceLocationStat_Stat::set_allocated_reshares_stat(::cosmo::pb::SourceData_SourceEventStat* reshares_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reshares_stat_;
  }
  if (reshares_stat != NULL) {
    _slow_set_allocated_reshares_stat(message_arena, &reshares_stat);
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.reshares_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_SourceLocationStat_LocationStat::_slow_mutable_stat() {
  stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat_Stat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat_LocationStat::_slow_release_stat() {
  if (stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat_Stat* temp = new ::cosmo::pb::SourceData_SourceLocationStat_Stat(*stat_);
    stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat_LocationStat::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceLocationStat.LocationStat.stat)
  clear_has_stat();
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void SourceData_SourceLocationStat_LocationStat::_slow_set_allocated_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat_Stat** stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stat) == NULL) {
      message_arena->Own(*stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stat)) {
      ::cosmo::pb::SourceData_SourceLocationStat_Stat* new_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat_Stat >(
            message_arena);
      new_stat->CopyFrom(**stat);
      *stat = new_stat;
    }
}
void SourceData_SourceLocationStat_LocationStat::unsafe_arena_set_allocated_stat(
    ::cosmo::pb::SourceData_SourceLocationStat_Stat* stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete stat_;
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceLocationStat.LocationStat.stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourceLocationStat_LocationStat::kLocationFieldNumber;
const int SourceData_SourceLocationStat_LocationStat::kStatFieldNumber;
const int SourceData_SourceLocationStat_LocationStat::kLastEventTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourceLocationStat_LocationStat::SourceData_SourceLocationStat_LocationStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
}
SourceData_SourceLocationStat_LocationStat::SourceData_SourceLocationStat_LocationStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
}
SourceData_SourceLocationStat_LocationStat::SourceData_SourceLocationStat_LocationStat(const SourceData_SourceLocationStat_LocationStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_location()) {
    location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location(),
      GetArenaNoVirtual());
  }
  if (from.has_stat()) {
    stat_ = new ::cosmo::pb::SourceData_SourceLocationStat_Stat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  last_event_ts_ = from.last_event_ts_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
}

void SourceData_SourceLocationStat_LocationStat::SharedCtor() {
  _cached_size_ = 0;
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_event_ts_) -
      reinterpret_cast<char*>(&stat_)) + sizeof(last_event_ts_));
}

SourceData_SourceLocationStat_LocationStat::~SourceData_SourceLocationStat_LocationStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  SharedDtor();
}

void SourceData_SourceLocationStat_LocationStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  location_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete stat_;
}

void SourceData_SourceLocationStat_LocationStat::ArenaDtor(void* object) {
  SourceData_SourceLocationStat_LocationStat* _this = reinterpret_cast< SourceData_SourceLocationStat_LocationStat* >(object);
  (void)_this;
}
void SourceData_SourceLocationStat_LocationStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourceLocationStat_LocationStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourceLocationStat_LocationStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourceLocationStat_LocationStat& SourceData_SourceLocationStat_LocationStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourceLocationStat_LocationStat* SourceData_SourceLocationStat_LocationStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourceLocationStat_LocationStat>(arena);
}

void SourceData_SourceLocationStat_LocationStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!location_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      location_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stat_ != NULL);
      stat_->::cosmo::pb::SourceData_SourceLocationStat_Stat::Clear();
    }
  }
  last_event_ts_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourceLocationStat_LocationStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.SourceData.SourceLocationStat.LocationStat.location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceLocationStat.Stat stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_event_ts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_event_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_event_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  return false;
#undef DO_
}

void SourceData_SourceLocationStat_LocationStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.SourceData.SourceLocationStat.LocationStat.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat.Stat stat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stat_, output);
  }

  // optional uint64 last_event_ts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_event_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
}

::google::protobuf::uint8* SourceData_SourceLocationStat_LocationStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.SourceData.SourceLocationStat.LocationStat.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat.Stat stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stat_, deterministic, target);
  }

  // optional uint64 last_event_ts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_event_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  return target;
}

size_t SourceData_SourceLocationStat_LocationStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string location = 1;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .cosmo.pb.SourceData.SourceLocationStat.Stat stat = 2;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stat_);
    }

    // optional uint64 last_event_ts = 3;
    if (has_last_event_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_event_ts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourceLocationStat_LocationStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourceLocationStat_LocationStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourceLocationStat_LocationStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
    MergeFrom(*source);
  }
}

void SourceData_SourceLocationStat_LocationStat::MergeFrom(const SourceData_SourceLocationStat_LocationStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_location(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stat()->::cosmo::pb::SourceData_SourceLocationStat_Stat::MergeFrom(from.stat());
    }
    if (cached_has_bits & 0x00000004u) {
      last_event_ts_ = from.last_event_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_SourceLocationStat_LocationStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourceLocationStat_LocationStat::CopyFrom(const SourceData_SourceLocationStat_LocationStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourceLocationStat_LocationStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_stat()) {
    if (!this->stat_->IsInitialized()) return false;
  }
  return true;
}

void SourceData_SourceLocationStat_LocationStat::Swap(SourceData_SourceLocationStat_LocationStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourceLocationStat_LocationStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourceLocationStat_LocationStat::UnsafeArenaSwap(SourceData_SourceLocationStat_LocationStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourceLocationStat_LocationStat::InternalSwap(SourceData_SourceLocationStat_LocationStat* other) {
  using std::swap;
  location_.Swap(&other->location_);
  swap(stat_, other->stat_);
  swap(last_event_ts_, other->last_event_ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourceLocationStat_LocationStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourceLocationStat_LocationStat

// required string location = 1;
bool SourceData_SourceLocationStat_LocationStat::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourceLocationStat_LocationStat::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourceLocationStat_LocationStat::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourceLocationStat_LocationStat::clear_location() {
  location_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_location();
}
const ::std::string& SourceData_SourceLocationStat_LocationStat::location() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
  return location_.Get();
}
void SourceData_SourceLocationStat_LocationStat::set_location(const ::std::string& value) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}
#if LANG_CXX11
void SourceData_SourceLocationStat_LocationStat::set_location(::std::string&& value) {
  set_has_location();
  location_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}
#endif
void SourceData_SourceLocationStat_LocationStat::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}
void SourceData_SourceLocationStat_LocationStat::set_location(const char* value,
    size_t size) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}
::std::string* SourceData_SourceLocationStat_LocationStat::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
  return location_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SourceData_SourceLocationStat_LocationStat::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
  clear_has_location();
  return location_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SourceData_SourceLocationStat_LocationStat::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_location();
  return location_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SourceData_SourceLocationStat_LocationStat::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}
void SourceData_SourceLocationStat_LocationStat::unsafe_arena_set_allocated_location(
    ::std::string* location) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      location, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}

// optional .cosmo.pb.SourceData.SourceLocationStat.Stat stat = 2;
bool SourceData_SourceLocationStat_LocationStat::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourceLocationStat_LocationStat::set_has_stat() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourceLocationStat_LocationStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourceLocationStat_LocationStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourceLocationStat_Stat::Clear();
  clear_has_stat();
}
const ::cosmo::pb::SourceData_SourceLocationStat_Stat& SourceData_SourceLocationStat_LocationStat::stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat_Stat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.LocationStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat_Stat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_Stat_default_instance_);
}
::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat_LocationStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.LocationStat.stat)
  return stat_;
}
::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat_LocationStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.LocationStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat_Stat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourceLocationStat_LocationStat::set_allocated_stat(::cosmo::pb::SourceData_SourceLocationStat_Stat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.LocationStat.stat)
}

// optional uint64 last_event_ts = 3;
bool SourceData_SourceLocationStat_LocationStat::has_last_event_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData_SourceLocationStat_LocationStat::set_has_last_event_ts() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData_SourceLocationStat_LocationStat::clear_has_last_event_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData_SourceLocationStat_LocationStat::clear_last_event_ts() {
  last_event_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_last_event_ts();
}
::google::protobuf::uint64 SourceData_SourceLocationStat_LocationStat::last_event_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.LocationStat.last_event_ts)
  return last_event_ts_;
}
void SourceData_SourceLocationStat_LocationStat::set_last_event_ts(::google::protobuf::uint64 value) {
  set_has_last_event_ts();
  last_event_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceLocationStat.LocationStat.last_event_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData_SourceLocationStat::_slow_mutable_summary_stat() {
  summary_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat_Stat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat::_slow_release_summary_stat() {
  if (summary_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat_Stat* temp = new ::cosmo::pb::SourceData_SourceLocationStat_Stat(*summary_stat_);
    summary_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat::unsafe_arena_release_summary_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceLocationStat.summary_stat)
  clear_has_summary_stat();
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* temp = summary_stat_;
  summary_stat_ = NULL;
  return temp;
}
void SourceData_SourceLocationStat::_slow_set_allocated_summary_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat_Stat** summary_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*summary_stat) == NULL) {
      message_arena->Own(*summary_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*summary_stat)) {
      ::cosmo::pb::SourceData_SourceLocationStat_Stat* new_summary_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat_Stat >(
            message_arena);
      new_summary_stat->CopyFrom(**summary_stat);
      *summary_stat = new_summary_stat;
    }
}
void SourceData_SourceLocationStat::unsafe_arena_set_allocated_summary_stat(
    ::cosmo::pb::SourceData_SourceLocationStat_Stat* summary_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete summary_stat_;
  }
  summary_stat_ = summary_stat;
  if (summary_stat) {
    set_has_summary_stat();
  } else {
    clear_has_summary_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceLocationStat.summary_stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourceLocationStat::kVersionFieldNumber;
const int SourceData_SourceLocationStat::kStatByLocationFieldNumber;
const int SourceData_SourceLocationStat::kSummaryStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourceLocationStat::SourceData_SourceLocationStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourceLocationStat)
}
SourceData_SourceLocationStat::SourceData_SourceLocationStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  stat_by_location_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourceLocationStat)
}
SourceData_SourceLocationStat::SourceData_SourceLocationStat(const SourceData_SourceLocationStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stat_by_location_(from.stat_by_location_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_summary_stat()) {
    summary_stat_ = new ::cosmo::pb::SourceData_SourceLocationStat_Stat(*from.summary_stat_);
  } else {
    summary_stat_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourceLocationStat)
}

void SourceData_SourceLocationStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&summary_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&summary_stat_)) + sizeof(version_));
}

SourceData_SourceLocationStat::~SourceData_SourceLocationStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourceLocationStat)
  SharedDtor();
}

void SourceData_SourceLocationStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete summary_stat_;
}

void SourceData_SourceLocationStat::ArenaDtor(void* object) {
  SourceData_SourceLocationStat* _this = reinterpret_cast< SourceData_SourceLocationStat* >(object);
  (void)_this;
}
void SourceData_SourceLocationStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourceLocationStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourceLocationStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourceLocationStat& SourceData_SourceLocationStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourceLocationStat* SourceData_SourceLocationStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourceLocationStat>(arena);
}

void SourceData_SourceLocationStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourceLocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_by_location_.Clear();
  if (has_summary_stat()) {
    GOOGLE_DCHECK(summary_stat_ != NULL);
    summary_stat_->::cosmo::pb::SourceData_SourceLocationStat_Stat::Clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourceLocationStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourceLocationStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.SourceData.SourceLocationStat.LocationStat stat_by_location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat_by_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceLocationStat.Stat summary_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summary_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourceLocationStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourceLocationStat)
  return false;
#undef DO_
}

void SourceData_SourceLocationStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourceLocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .cosmo.pb.SourceData.SourceLocationStat.LocationStat stat_by_location = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_by_location_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat_by_location(static_cast<int>(i)), output);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat.Stat summary_stat = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->summary_stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourceLocationStat)
}

::google::protobuf::uint8* SourceData_SourceLocationStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourceLocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .cosmo.pb.SourceData.SourceLocationStat.LocationStat stat_by_location = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_by_location_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stat_by_location(static_cast<int>(i)), deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat.Stat summary_stat = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->summary_stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourceLocationStat)
  return target;
}

size_t SourceData_SourceLocationStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourceLocationStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated .cosmo.pb.SourceData.SourceLocationStat.LocationStat stat_by_location = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stat_by_location_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat_by_location(static_cast<int>(i)));
    }
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat.Stat summary_stat = 3;
  if (has_summary_stat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->summary_stat_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourceLocationStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourceLocationStat)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourceLocationStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourceLocationStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourceLocationStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourceLocationStat)
    MergeFrom(*source);
  }
}

void SourceData_SourceLocationStat::MergeFrom(const SourceData_SourceLocationStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourceLocationStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_by_location_.MergeFrom(from.stat_by_location_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_summary_stat()->::cosmo::pb::SourceData_SourceLocationStat_Stat::MergeFrom(from.summary_stat());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_SourceLocationStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourceLocationStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourceLocationStat::CopyFrom(const SourceData_SourceLocationStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourceLocationStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourceLocationStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stat_by_location())) return false;
  if (has_summary_stat()) {
    if (!this->summary_stat_->IsInitialized()) return false;
  }
  return true;
}

void SourceData_SourceLocationStat::Swap(SourceData_SourceLocationStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourceLocationStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourceLocationStat::UnsafeArenaSwap(SourceData_SourceLocationStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourceLocationStat::InternalSwap(SourceData_SourceLocationStat* other) {
  using std::swap;
  stat_by_location_.InternalSwap(&other->stat_by_location_);
  swap(summary_stat_, other->summary_stat_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourceLocationStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourceLocationStat

// required uint32 version = 1;
bool SourceData_SourceLocationStat::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourceLocationStat::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourceLocationStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourceLocationStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 SourceData_SourceLocationStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.version)
  return version_;
}
void SourceData_SourceLocationStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceLocationStat.version)
}

// repeated .cosmo.pb.SourceData.SourceLocationStat.LocationStat stat_by_location = 2;
int SourceData_SourceLocationStat::stat_by_location_size() const {
  return stat_by_location_.size();
}
void SourceData_SourceLocationStat::clear_stat_by_location() {
  stat_by_location_.Clear();
}
const ::cosmo::pb::SourceData_SourceLocationStat_LocationStat& SourceData_SourceLocationStat::stat_by_location(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.stat_by_location)
  return stat_by_location_.Get(index);
}
::cosmo::pb::SourceData_SourceLocationStat_LocationStat* SourceData_SourceLocationStat::mutable_stat_by_location(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.stat_by_location)
  return stat_by_location_.Mutable(index);
}
::cosmo::pb::SourceData_SourceLocationStat_LocationStat* SourceData_SourceLocationStat::add_stat_by_location() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceLocationStat.stat_by_location)
  return stat_by_location_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceLocationStat_LocationStat >*
SourceData_SourceLocationStat::mutable_stat_by_location() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceLocationStat.stat_by_location)
  return &stat_by_location_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceLocationStat_LocationStat >&
SourceData_SourceLocationStat::stat_by_location() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceLocationStat.stat_by_location)
  return stat_by_location_;
}

// optional .cosmo.pb.SourceData.SourceLocationStat.Stat summary_stat = 3;
bool SourceData_SourceLocationStat::has_summary_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourceLocationStat::set_has_summary_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourceLocationStat::clear_has_summary_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourceLocationStat::clear_summary_stat() {
  if (summary_stat_ != NULL) summary_stat_->::cosmo::pb::SourceData_SourceLocationStat_Stat::Clear();
  clear_has_summary_stat();
}
const ::cosmo::pb::SourceData_SourceLocationStat_Stat& SourceData_SourceLocationStat::summary_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat_Stat* p = summary_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.summary_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat_Stat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_Stat_default_instance_);
}
::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat::mutable_summary_stat() {
  set_has_summary_stat();
  if (summary_stat_ == NULL) {
    _slow_mutable_summary_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.summary_stat)
  return summary_stat_;
}
::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat::release_summary_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.summary_stat)
  clear_has_summary_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_summary_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat_Stat* temp = summary_stat_;
    summary_stat_ = NULL;
    return temp;
  }
}
 void SourceData_SourceLocationStat::set_allocated_summary_stat(::cosmo::pb::SourceData_SourceLocationStat_Stat* summary_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete summary_stat_;
  }
  if (summary_stat != NULL) {
    _slow_set_allocated_summary_stat(message_arena, &summary_stat);
  }
  summary_stat_ = summary_stat;
  if (summary_stat) {
    set_has_summary_stat();
  } else {
    clear_has_summary_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.summary_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourceSimilarity::kVersionFieldNumber;
const int SourceData_SourceSimilarity::kSourceFieldNumber;
const int SourceData_SourceSimilarity::kJaccardSimilarityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourceSimilarity::SourceData_SourceSimilarity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourceSimilarity)
}
SourceData_SourceSimilarity::SourceData_SourceSimilarity(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  source_(arena),
  jaccard_similarity_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourceSimilarity)
}
SourceData_SourceSimilarity::SourceData_SourceSimilarity(const SourceData_SourceSimilarity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      source_(from.source_),
      jaccard_similarity_(from.jaccard_similarity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourceSimilarity)
}

void SourceData_SourceSimilarity::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

SourceData_SourceSimilarity::~SourceData_SourceSimilarity() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourceSimilarity)
  SharedDtor();
}

void SourceData_SourceSimilarity::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_SourceSimilarity::ArenaDtor(void* object) {
  SourceData_SourceSimilarity* _this = reinterpret_cast< SourceData_SourceSimilarity* >(object);
  (void)_this;
}
void SourceData_SourceSimilarity::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourceSimilarity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourceSimilarity::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourceSimilarity& SourceData_SourceSimilarity::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourceSimilarity* SourceData_SourceSimilarity::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourceSimilarity>(arena);
}

void SourceData_SourceSimilarity::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourceSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.Clear();
  jaccard_similarity_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourceSimilarity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourceSimilarity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_source())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_source())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float jaccard_similarity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_jaccard_similarity())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jaccard_similarity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourceSimilarity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourceSimilarity)
  return false;
#undef DO_
}

void SourceData_SourceSimilarity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourceSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated int64 source = 2;
  for (int i = 0, n = this->source_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->source(i), output);
  }

  // repeated float jaccard_similarity = 3;
  for (int i = 0, n = this->jaccard_similarity_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->jaccard_similarity(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourceSimilarity)
}

::google::protobuf::uint8* SourceData_SourceSimilarity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourceSimilarity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated int64 source = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->source_, target);

  // repeated float jaccard_similarity = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->jaccard_similarity_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourceSimilarity)
  return target;
}

size_t SourceData_SourceSimilarity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourceSimilarity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated int64 source = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->source_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->source_size());
    total_size += data_size;
  }

  // repeated float jaccard_similarity = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->jaccard_similarity_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->jaccard_similarity_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourceSimilarity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourceSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourceSimilarity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourceSimilarity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourceSimilarity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourceSimilarity)
    MergeFrom(*source);
  }
}

void SourceData_SourceSimilarity::MergeFrom(const SourceData_SourceSimilarity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourceSimilarity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_.MergeFrom(from.source_);
  jaccard_similarity_.MergeFrom(from.jaccard_similarity_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void SourceData_SourceSimilarity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourceSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourceSimilarity::CopyFrom(const SourceData_SourceSimilarity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourceSimilarity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourceSimilarity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SourceData_SourceSimilarity::Swap(SourceData_SourceSimilarity* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourceSimilarity* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourceSimilarity::UnsafeArenaSwap(SourceData_SourceSimilarity* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourceSimilarity::InternalSwap(SourceData_SourceSimilarity* other) {
  using std::swap;
  source_.InternalSwap(&other->source_);
  jaccard_similarity_.InternalSwap(&other->jaccard_similarity_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourceSimilarity::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourceSimilarity

// required uint32 version = 1;
bool SourceData_SourceSimilarity::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourceSimilarity::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourceSimilarity::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourceSimilarity::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 SourceData_SourceSimilarity::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceSimilarity.version)
  return version_;
}
void SourceData_SourceSimilarity::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceSimilarity.version)
}

// repeated int64 source = 2;
int SourceData_SourceSimilarity::source_size() const {
  return source_.size();
}
void SourceData_SourceSimilarity::clear_source() {
  source_.Clear();
}
::google::protobuf::int64 SourceData_SourceSimilarity::source(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceSimilarity.source)
  return source_.Get(index);
}
void SourceData_SourceSimilarity::set_source(int index, ::google::protobuf::int64 value) {
  source_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceSimilarity.source)
}
void SourceData_SourceSimilarity::add_source(::google::protobuf::int64 value) {
  source_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceSimilarity.source)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SourceData_SourceSimilarity::source() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceSimilarity.source)
  return source_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SourceData_SourceSimilarity::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceSimilarity.source)
  return &source_;
}

// repeated float jaccard_similarity = 3;
int SourceData_SourceSimilarity::jaccard_similarity_size() const {
  return jaccard_similarity_.size();
}
void SourceData_SourceSimilarity::clear_jaccard_similarity() {
  jaccard_similarity_.Clear();
}
float SourceData_SourceSimilarity::jaccard_similarity(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceSimilarity.jaccard_similarity)
  return jaccard_similarity_.Get(index);
}
void SourceData_SourceSimilarity::set_jaccard_similarity(int index, float value) {
  jaccard_similarity_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceSimilarity.jaccard_similarity)
}
void SourceData_SourceSimilarity::add_jaccard_similarity(float value) {
  jaccard_similarity_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceSimilarity.jaccard_similarity)
}
const ::google::protobuf::RepeatedField< float >&
SourceData_SourceSimilarity::jaccard_similarity() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceSimilarity.jaccard_similarity)
  return jaccard_similarity_;
}
::google::protobuf::RepeatedField< float >*
SourceData_SourceSimilarity::mutable_jaccard_similarity() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceSimilarity.jaccard_similarity)
  return &jaccard_similarity_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_SourceGeo::kVersionFieldNumber;
const int SourceData_SourceGeo::kCountryIdFieldNumber;
const int SourceData_SourceGeo::kRegionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_SourceGeo::SourceData_SourceGeo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.SourceGeo)
}
SourceData_SourceGeo::SourceData_SourceGeo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.SourceGeo)
}
SourceData_SourceGeo::SourceData_SourceGeo(const SourceData_SourceGeo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(region_id_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.SourceGeo)
}

void SourceData_SourceGeo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(region_id_));
}

SourceData_SourceGeo::~SourceData_SourceGeo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.SourceGeo)
  SharedDtor();
}

void SourceData_SourceGeo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_SourceGeo::ArenaDtor(void* object) {
  SourceData_SourceGeo* _this = reinterpret_cast< SourceData_SourceGeo* >(object);
  (void)_this;
}
void SourceData_SourceGeo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_SourceGeo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_SourceGeo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_SourceGeo& SourceData_SourceGeo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_SourceGeo* SourceData_SourceGeo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_SourceGeo>(arena);
}

void SourceData_SourceGeo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.SourceGeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&region_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(region_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_SourceGeo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.SourceGeo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 country_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_country_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.SourceGeo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.SourceGeo)
  return false;
#undef DO_
}

void SourceData_SourceGeo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.SourceGeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 country_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->country_id(), output);
  }

  // optional uint32 region_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->region_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.SourceGeo)
}

::google::protobuf::uint8* SourceData_SourceGeo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.SourceGeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 country_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->country_id(), target);
  }

  // optional uint32 region_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->region_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.SourceGeo)
  return target;
}

size_t SourceData_SourceGeo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.SourceGeo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional uint32 country_id = 2;
    if (has_country_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country_id());
    }

    // optional uint32 region_id = 3;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_SourceGeo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.SourceGeo)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_SourceGeo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_SourceGeo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.SourceGeo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.SourceGeo)
    MergeFrom(*source);
  }
}

void SourceData_SourceGeo::MergeFrom(const SourceData_SourceGeo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.SourceGeo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      country_id_ = from.country_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_id_ = from.region_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_SourceGeo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.SourceGeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_SourceGeo::CopyFrom(const SourceData_SourceGeo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.SourceGeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_SourceGeo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SourceData_SourceGeo::Swap(SourceData_SourceGeo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_SourceGeo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_SourceGeo::UnsafeArenaSwap(SourceData_SourceGeo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_SourceGeo::InternalSwap(SourceData_SourceGeo* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(country_id_, other->country_id_);
  swap(region_id_, other->region_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_SourceGeo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_SourceGeo

// required uint32 version = 1;
bool SourceData_SourceGeo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_SourceGeo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_SourceGeo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_SourceGeo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 SourceData_SourceGeo::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceGeo.version)
  return version_;
}
void SourceData_SourceGeo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceGeo.version)
}

// optional uint32 country_id = 2;
bool SourceData_SourceGeo::has_country_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_SourceGeo::set_has_country_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_SourceGeo::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_SourceGeo::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
::google::protobuf::uint32 SourceData_SourceGeo::country_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceGeo.country_id)
  return country_id_;
}
void SourceData_SourceGeo::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceGeo.country_id)
}

// optional uint32 region_id = 3;
bool SourceData_SourceGeo::has_region_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData_SourceGeo::set_has_region_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData_SourceGeo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData_SourceGeo::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
::google::protobuf::uint32 SourceData_SourceGeo::region_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceGeo.region_id)
  return region_id_;
}
void SourceData_SourceGeo::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceGeo.region_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData_ContentThemes::kVersionFieldNumber;
const int SourceData_ContentThemes::kThemesVectorFieldNumber;
const int SourceData_ContentThemes::kBadContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData_ContentThemes::SourceData_ContentThemes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData.ContentThemes)
}
SourceData_ContentThemes::SourceData_ContentThemes(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  themes_vector_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData.ContentThemes)
}
SourceData_ContentThemes::SourceData_ContentThemes(const SourceData_ContentThemes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      themes_vector_(from.themes_vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&bad_content_) -
    reinterpret_cast<char*>(&version_)) + sizeof(bad_content_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData.ContentThemes)
}

void SourceData_ContentThemes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bad_content_) -
      reinterpret_cast<char*>(&version_)) + sizeof(bad_content_));
}

SourceData_ContentThemes::~SourceData_ContentThemes() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData.ContentThemes)
  SharedDtor();
}

void SourceData_ContentThemes::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void SourceData_ContentThemes::ArenaDtor(void* object) {
  SourceData_ContentThemes* _this = reinterpret_cast< SourceData_ContentThemes* >(object);
  (void)_this;
}
void SourceData_ContentThemes::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData_ContentThemes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData_ContentThemes::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData_ContentThemes& SourceData_ContentThemes::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData_ContentThemes* SourceData_ContentThemes::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData_ContentThemes>(arena);
}

void SourceData_ContentThemes::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData.ContentThemes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  themes_vector_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bad_content_) -
        reinterpret_cast<char*>(&version_)) + sizeof(bad_content_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData_ContentThemes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData.ContentThemes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float themes_vector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_themes_vector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_themes_vector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bad_content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bad_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bad_content_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData.ContentThemes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData.ContentThemes)
  return false;
#undef DO_
}

void SourceData_ContentThemes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData.ContentThemes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated float themes_vector = 2;
  for (int i = 0, n = this->themes_vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->themes_vector(i), output);
  }

  // optional bool bad_content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bad_content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData.ContentThemes)
}

::google::protobuf::uint8* SourceData_ContentThemes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData.ContentThemes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated float themes_vector = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->themes_vector_, target);

  // optional bool bad_content = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bad_content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData.ContentThemes)
  return target;
}

size_t SourceData_ContentThemes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData.ContentThemes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated float themes_vector = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->themes_vector_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->themes_vector_size());
    total_size += data_size;
  }

  // optional bool bad_content = 3;
  if (has_bad_content()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData_ContentThemes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData.ContentThemes)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData_ContentThemes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData_ContentThemes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData.ContentThemes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData.ContentThemes)
    MergeFrom(*source);
  }
}

void SourceData_ContentThemes::MergeFrom(const SourceData_ContentThemes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData.ContentThemes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  themes_vector_.MergeFrom(from.themes_vector_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      bad_content_ = from.bad_content_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourceData_ContentThemes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData.ContentThemes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData_ContentThemes::CopyFrom(const SourceData_ContentThemes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData.ContentThemes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData_ContentThemes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SourceData_ContentThemes::Swap(SourceData_ContentThemes* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData_ContentThemes* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData_ContentThemes::UnsafeArenaSwap(SourceData_ContentThemes* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData_ContentThemes::InternalSwap(SourceData_ContentThemes* other) {
  using std::swap;
  themes_vector_.InternalSwap(&other->themes_vector_);
  swap(version_, other->version_);
  swap(bad_content_, other->bad_content_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData_ContentThemes::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData_ContentThemes

// required uint32 version = 1;
bool SourceData_ContentThemes::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData_ContentThemes::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData_ContentThemes::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData_ContentThemes::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 SourceData_ContentThemes::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ContentThemes.version)
  return version_;
}
void SourceData_ContentThemes::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.ContentThemes.version)
}

// repeated float themes_vector = 2;
int SourceData_ContentThemes::themes_vector_size() const {
  return themes_vector_.size();
}
void SourceData_ContentThemes::clear_themes_vector() {
  themes_vector_.Clear();
}
float SourceData_ContentThemes::themes_vector(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ContentThemes.themes_vector)
  return themes_vector_.Get(index);
}
void SourceData_ContentThemes::set_themes_vector(int index, float value) {
  themes_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.ContentThemes.themes_vector)
}
void SourceData_ContentThemes::add_themes_vector(float value) {
  themes_vector_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.ContentThemes.themes_vector)
}
const ::google::protobuf::RepeatedField< float >&
SourceData_ContentThemes::themes_vector() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.ContentThemes.themes_vector)
  return themes_vector_;
}
::google::protobuf::RepeatedField< float >*
SourceData_ContentThemes::mutable_themes_vector() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.ContentThemes.themes_vector)
  return &themes_vector_;
}

// optional bool bad_content = 3;
bool SourceData_ContentThemes::has_bad_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData_ContentThemes::set_has_bad_content() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData_ContentThemes::clear_has_bad_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData_ContentThemes::clear_bad_content() {
  bad_content_ = false;
  clear_has_bad_content();
}
bool SourceData_ContentThemes::bad_content() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ContentThemes.bad_content)
  return bad_content_;
}
void SourceData_ContentThemes::set_bad_content(bool value) {
  set_has_bad_content();
  bad_content_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.ContentThemes.bad_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SourceData::_slow_mutable_lda_fea() {
  lda_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_LdaFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_LdaFea* SourceData::_slow_release_lda_fea() {
  if (lda_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_LdaFea* temp = new ::cosmo::pb::SourceData_LdaFea(*lda_fea_);
    lda_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_LdaFea* SourceData::unsafe_arena_release_lda_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.lda_fea)
  clear_has_lda_fea();
  ::cosmo::pb::SourceData_LdaFea* temp = lda_fea_;
  lda_fea_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_lda_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_LdaFea** lda_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*lda_fea) == NULL) {
      message_arena->Own(*lda_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*lda_fea)) {
      ::cosmo::pb::SourceData_LdaFea* new_lda_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_LdaFea >(
            message_arena);
      new_lda_fea->CopyFrom(**lda_fea);
      *lda_fea = new_lda_fea;
    }
}
void SourceData::unsafe_arena_set_allocated_lda_fea(
    ::cosmo::pb::SourceData_LdaFea* lda_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete lda_fea_;
  }
  lda_fea_ = lda_fea;
  if (lda_fea) {
    set_has_lda_fea();
  } else {
    clear_has_lda_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.lda_fea)
}
void SourceData::_slow_mutable_als_fea() {
  als_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_AlsFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_AlsFea* SourceData::_slow_release_als_fea() {
  if (als_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_AlsFea* temp = new ::cosmo::pb::SourceData_AlsFea(*als_fea_);
    als_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_AlsFea* SourceData::unsafe_arena_release_als_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.als_fea)
  clear_has_als_fea();
  ::cosmo::pb::SourceData_AlsFea* temp = als_fea_;
  als_fea_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_als_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_AlsFea** als_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*als_fea) == NULL) {
      message_arena->Own(*als_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*als_fea)) {
      ::cosmo::pb::SourceData_AlsFea* new_als_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_AlsFea >(
            message_arena);
      new_als_fea->CopyFrom(**als_fea);
      *als_fea = new_als_fea;
    }
}
void SourceData::unsafe_arena_set_allocated_als_fea(
    ::cosmo::pb::SourceData_AlsFea* als_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete als_fea_;
  }
  als_fea_ = als_fea;
  if (als_fea) {
    set_has_als_fea();
  } else {
    clear_has_als_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.als_fea)
}
void SourceData::_slow_mutable_ok_info() {
  ok_info_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_OkInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_OkInfo* SourceData::_slow_release_ok_info() {
  if (ok_info_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_OkInfo* temp = new ::cosmo::pb::SourceData_OkInfo(*ok_info_);
    ok_info_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_OkInfo* SourceData::unsafe_arena_release_ok_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.ok_info)
  clear_has_ok_info();
  ::cosmo::pb::SourceData_OkInfo* temp = ok_info_;
  ok_info_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_ok_info(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_OkInfo** ok_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*ok_info) == NULL) {
      message_arena->Own(*ok_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*ok_info)) {
      ::cosmo::pb::SourceData_OkInfo* new_ok_info = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_OkInfo >(
            message_arena);
      new_ok_info->CopyFrom(**ok_info);
      *ok_info = new_ok_info;
    }
}
void SourceData::unsafe_arena_set_allocated_ok_info(
    ::cosmo::pb::SourceData_OkInfo* ok_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete ok_info_;
  }
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.ok_info)
}
void SourceData::_slow_mutable_source_info() {
  source_info_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceInfo* SourceData::_slow_release_source_info() {
  if (source_info_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceInfo* temp = new ::cosmo::pb::SourceData_SourceInfo(*source_info_);
    source_info_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceInfo* SourceData::unsafe_arena_release_source_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.source_info)
  clear_has_source_info();
  ::cosmo::pb::SourceData_SourceInfo* temp = source_info_;
  source_info_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_source_info(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceInfo** source_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*source_info) == NULL) {
      message_arena->Own(*source_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*source_info)) {
      ::cosmo::pb::SourceData_SourceInfo* new_source_info = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceInfo >(
            message_arena);
      new_source_info->CopyFrom(**source_info);
      *source_info = new_source_info;
    }
}
void SourceData::unsafe_arena_set_allocated_source_info(
    ::cosmo::pb::SourceData_SourceInfo* source_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete source_info_;
  }
  source_info_ = source_info;
  if (source_info) {
    set_has_source_info();
  } else {
    clear_has_source_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.source_info)
}
void SourceData::_slow_mutable_original_info() {
  original_info_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_OriginalInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_OriginalInfo* SourceData::_slow_release_original_info() {
  if (original_info_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_OriginalInfo* temp = new ::cosmo::pb::SourceData_OriginalInfo(*original_info_);
    original_info_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_OriginalInfo* SourceData::unsafe_arena_release_original_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.original_info)
  clear_has_original_info();
  ::cosmo::pb::SourceData_OriginalInfo* temp = original_info_;
  original_info_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_original_info(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_OriginalInfo** original_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*original_info) == NULL) {
      message_arena->Own(*original_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*original_info)) {
      ::cosmo::pb::SourceData_OriginalInfo* new_original_info = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_OriginalInfo >(
            message_arena);
      new_original_info->CopyFrom(**original_info);
      *original_info = new_original_info;
    }
}
void SourceData::unsafe_arena_set_allocated_original_info(
    ::cosmo::pb::SourceData_OriginalInfo* original_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete original_info_;
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.original_info)
}
void SourceData::_slow_mutable_group_period_stats() {
  group_period_stats_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupPeriodStats >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupPeriodStats* SourceData::_slow_release_group_period_stats() {
  if (group_period_stats_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupPeriodStats* temp = new ::cosmo::pb::SourceData_GroupPeriodStats(*group_period_stats_);
    group_period_stats_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupPeriodStats* SourceData::unsafe_arena_release_group_period_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.group_period_stats)
  clear_has_group_period_stats();
  ::cosmo::pb::SourceData_GroupPeriodStats* temp = group_period_stats_;
  group_period_stats_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_group_period_stats(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupPeriodStats** group_period_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*group_period_stats) == NULL) {
      message_arena->Own(*group_period_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*group_period_stats)) {
      ::cosmo::pb::SourceData_GroupPeriodStats* new_group_period_stats = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupPeriodStats >(
            message_arena);
      new_group_period_stats->CopyFrom(**group_period_stats);
      *group_period_stats = new_group_period_stats;
    }
}
void SourceData::unsafe_arena_set_allocated_group_period_stats(
    ::cosmo::pb::SourceData_GroupPeriodStats* group_period_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete group_period_stats_;
  }
  group_period_stats_ = group_period_stats;
  if (group_period_stats) {
    set_has_group_period_stats();
  } else {
    clear_has_group_period_stats();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.group_period_stats)
}
void SourceData::_slow_mutable_news_data() {
  news_data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_NewsData >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_NewsData* SourceData::_slow_release_news_data() {
  if (news_data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_NewsData* temp = new ::cosmo::pb::SourceData_NewsData(*news_data_);
    news_data_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_NewsData* SourceData::unsafe_arena_release_news_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.news_data)
  clear_has_news_data();
  ::cosmo::pb::SourceData_NewsData* temp = news_data_;
  news_data_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_news_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_NewsData** news_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*news_data) == NULL) {
      message_arena->Own(*news_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*news_data)) {
      ::cosmo::pb::SourceData_NewsData* new_news_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_NewsData >(
            message_arena);
      new_news_data->CopyFrom(**news_data);
      *news_data = new_news_data;
    }
}
void SourceData::unsafe_arena_set_allocated_news_data(
    ::cosmo::pb::SourceData_NewsData* news_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete news_data_;
  }
  news_data_ = news_data;
  if (news_data) {
    set_has_news_data();
  } else {
    clear_has_news_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.news_data)
}
void SourceData::_slow_mutable_source_popularity() {
  source_popularity_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourcePopularityStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::_slow_release_source_popularity() {
  if (source_popularity_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat* temp = new ::cosmo::pb::SourceData_SourcePopularityStat(*source_popularity_);
    source_popularity_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::unsafe_arena_release_source_popularity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.source_popularity)
  clear_has_source_popularity();
  ::cosmo::pb::SourceData_SourcePopularityStat* temp = source_popularity_;
  source_popularity_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_source_popularity(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourcePopularityStat** source_popularity) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*source_popularity) == NULL) {
      message_arena->Own(*source_popularity);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*source_popularity)) {
      ::cosmo::pb::SourceData_SourcePopularityStat* new_source_popularity = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourcePopularityStat >(
            message_arena);
      new_source_popularity->CopyFrom(**source_popularity);
      *source_popularity = new_source_popularity;
    }
}
void SourceData::unsafe_arena_set_allocated_source_popularity(
    ::cosmo::pb::SourceData_SourcePopularityStat* source_popularity) {
  if (GetArenaNoVirtual() == NULL) {
    delete source_popularity_;
  }
  source_popularity_ = source_popularity;
  if (source_popularity) {
    set_has_source_popularity();
  } else {
    clear_has_source_popularity();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.source_popularity)
}
void SourceData::_slow_mutable_lda_fea_2() {
  lda_fea_2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_LdaFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_LdaFea* SourceData::_slow_release_lda_fea_2() {
  if (lda_fea_2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_LdaFea* temp = new ::cosmo::pb::SourceData_LdaFea(*lda_fea_2_);
    lda_fea_2_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_LdaFea* SourceData::unsafe_arena_release_lda_fea_2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.lda_fea_2)
  clear_has_lda_fea_2();
  ::cosmo::pb::SourceData_LdaFea* temp = lda_fea_2_;
  lda_fea_2_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_lda_fea_2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_LdaFea** lda_fea_2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*lda_fea_2) == NULL) {
      message_arena->Own(*lda_fea_2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*lda_fea_2)) {
      ::cosmo::pb::SourceData_LdaFea* new_lda_fea_2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_LdaFea >(
            message_arena);
      new_lda_fea_2->CopyFrom(**lda_fea_2);
      *lda_fea_2 = new_lda_fea_2;
    }
}
void SourceData::unsafe_arena_set_allocated_lda_fea_2(
    ::cosmo::pb::SourceData_LdaFea* lda_fea_2) {
  if (GetArenaNoVirtual() == NULL) {
    delete lda_fea_2_;
  }
  lda_fea_2_ = lda_fea_2;
  if (lda_fea_2) {
    set_has_lda_fea_2();
  } else {
    clear_has_lda_fea_2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.lda_fea_2)
}
void SourceData::_slow_mutable_als_fea_2() {
  als_fea_2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_AlsFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_AlsFea* SourceData::_slow_release_als_fea_2() {
  if (als_fea_2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_AlsFea* temp = new ::cosmo::pb::SourceData_AlsFea(*als_fea_2_);
    als_fea_2_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_AlsFea* SourceData::unsafe_arena_release_als_fea_2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.als_fea_2)
  clear_has_als_fea_2();
  ::cosmo::pb::SourceData_AlsFea* temp = als_fea_2_;
  als_fea_2_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_als_fea_2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_AlsFea** als_fea_2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*als_fea_2) == NULL) {
      message_arena->Own(*als_fea_2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*als_fea_2)) {
      ::cosmo::pb::SourceData_AlsFea* new_als_fea_2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_AlsFea >(
            message_arena);
      new_als_fea_2->CopyFrom(**als_fea_2);
      *als_fea_2 = new_als_fea_2;
    }
}
void SourceData::unsafe_arena_set_allocated_als_fea_2(
    ::cosmo::pb::SourceData_AlsFea* als_fea_2) {
  if (GetArenaNoVirtual() == NULL) {
    delete als_fea_2_;
  }
  als_fea_2_ = als_fea_2;
  if (als_fea_2) {
    set_has_als_fea_2();
  } else {
    clear_has_als_fea_2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.als_fea_2)
}
void SourceData::_slow_mutable_source_fresh_popularity() {
  source_fresh_popularity_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourcePopularityStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::_slow_release_source_fresh_popularity() {
  if (source_fresh_popularity_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat* temp = new ::cosmo::pb::SourceData_SourcePopularityStat(*source_fresh_popularity_);
    source_fresh_popularity_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::unsafe_arena_release_source_fresh_popularity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.source_fresh_popularity)
  clear_has_source_fresh_popularity();
  ::cosmo::pb::SourceData_SourcePopularityStat* temp = source_fresh_popularity_;
  source_fresh_popularity_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_source_fresh_popularity(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourcePopularityStat** source_fresh_popularity) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*source_fresh_popularity) == NULL) {
      message_arena->Own(*source_fresh_popularity);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*source_fresh_popularity)) {
      ::cosmo::pb::SourceData_SourcePopularityStat* new_source_fresh_popularity = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourcePopularityStat >(
            message_arena);
      new_source_fresh_popularity->CopyFrom(**source_fresh_popularity);
      *source_fresh_popularity = new_source_fresh_popularity;
    }
}
void SourceData::unsafe_arena_set_allocated_source_fresh_popularity(
    ::cosmo::pb::SourceData_SourcePopularityStat* source_fresh_popularity) {
  if (GetArenaNoVirtual() == NULL) {
    delete source_fresh_popularity_;
  }
  source_fresh_popularity_ = source_fresh_popularity;
  if (source_fresh_popularity) {
    set_has_source_fresh_popularity();
  } else {
    clear_has_source_fresh_popularity();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.source_fresh_popularity)
}
void SourceData::_slow_mutable_ok_group_event_stat() {
  ok_group_event_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::_slow_release_ok_group_event_stat() {
  if (ok_group_event_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = new ::cosmo::pb::SourceData_GroupEventStat(*ok_group_event_stat_);
    ok_group_event_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::unsafe_arena_release_ok_group_event_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.ok_group_event_stat)
  clear_has_ok_group_event_stat();
  ::cosmo::pb::SourceData_GroupEventStat* temp = ok_group_event_stat_;
  ok_group_event_stat_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_ok_group_event_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** ok_group_event_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*ok_group_event_stat) == NULL) {
      message_arena->Own(*ok_group_event_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*ok_group_event_stat)) {
      ::cosmo::pb::SourceData_GroupEventStat* new_ok_group_event_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
            message_arena);
      new_ok_group_event_stat->CopyFrom(**ok_group_event_stat);
      *ok_group_event_stat = new_ok_group_event_stat;
    }
}
void SourceData::unsafe_arena_set_allocated_ok_group_event_stat(
    ::cosmo::pb::SourceData_GroupEventStat* ok_group_event_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete ok_group_event_stat_;
  }
  ok_group_event_stat_ = ok_group_event_stat;
  if (ok_group_event_stat) {
    set_has_ok_group_event_stat();
  } else {
    clear_has_ok_group_event_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.ok_group_event_stat)
}
void SourceData::_slow_mutable_vk_group_event_stat() {
  vk_group_event_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::_slow_release_vk_group_event_stat() {
  if (vk_group_event_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = new ::cosmo::pb::SourceData_GroupEventStat(*vk_group_event_stat_);
    vk_group_event_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::unsafe_arena_release_vk_group_event_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.vk_group_event_stat)
  clear_has_vk_group_event_stat();
  ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_;
  vk_group_event_stat_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_vk_group_event_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** vk_group_event_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*vk_group_event_stat) == NULL) {
      message_arena->Own(*vk_group_event_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*vk_group_event_stat)) {
      ::cosmo::pb::SourceData_GroupEventStat* new_vk_group_event_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
            message_arena);
      new_vk_group_event_stat->CopyFrom(**vk_group_event_stat);
      *vk_group_event_stat = new_vk_group_event_stat;
    }
}
void SourceData::unsafe_arena_set_allocated_vk_group_event_stat(
    ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete vk_group_event_stat_;
  }
  vk_group_event_stat_ = vk_group_event_stat;
  if (vk_group_event_stat) {
    set_has_vk_group_event_stat();
  } else {
    clear_has_vk_group_event_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.vk_group_event_stat)
}
void SourceData::_slow_mutable_vk_group_event_stat_week() {
  vk_group_event_stat_week_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::_slow_release_vk_group_event_stat_week() {
  if (vk_group_event_stat_week_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = new ::cosmo::pb::SourceData_GroupEventStat(*vk_group_event_stat_week_);
    vk_group_event_stat_week_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::unsafe_arena_release_vk_group_event_stat_week() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.vk_group_event_stat_week)
  clear_has_vk_group_event_stat_week();
  ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_week_;
  vk_group_event_stat_week_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_vk_group_event_stat_week(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** vk_group_event_stat_week) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*vk_group_event_stat_week) == NULL) {
      message_arena->Own(*vk_group_event_stat_week);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*vk_group_event_stat_week)) {
      ::cosmo::pb::SourceData_GroupEventStat* new_vk_group_event_stat_week = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
            message_arena);
      new_vk_group_event_stat_week->CopyFrom(**vk_group_event_stat_week);
      *vk_group_event_stat_week = new_vk_group_event_stat_week;
    }
}
void SourceData::unsafe_arena_set_allocated_vk_group_event_stat_week(
    ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week) {
  if (GetArenaNoVirtual() == NULL) {
    delete vk_group_event_stat_week_;
  }
  vk_group_event_stat_week_ = vk_group_event_stat_week;
  if (vk_group_event_stat_week) {
    set_has_vk_group_event_stat_week();
  } else {
    clear_has_vk_group_event_stat_week();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.vk_group_event_stat_week)
}
void SourceData::_slow_mutable_youtube_group_event_stat() {
  youtube_group_event_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::_slow_release_youtube_group_event_stat() {
  if (youtube_group_event_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = new ::cosmo::pb::SourceData_GroupEventStat(*youtube_group_event_stat_);
    youtube_group_event_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::unsafe_arena_release_youtube_group_event_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.youtube_group_event_stat)
  clear_has_youtube_group_event_stat();
  ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_;
  youtube_group_event_stat_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_youtube_group_event_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** youtube_group_event_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*youtube_group_event_stat) == NULL) {
      message_arena->Own(*youtube_group_event_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*youtube_group_event_stat)) {
      ::cosmo::pb::SourceData_GroupEventStat* new_youtube_group_event_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
            message_arena);
      new_youtube_group_event_stat->CopyFrom(**youtube_group_event_stat);
      *youtube_group_event_stat = new_youtube_group_event_stat;
    }
}
void SourceData::unsafe_arena_set_allocated_youtube_group_event_stat(
    ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete youtube_group_event_stat_;
  }
  youtube_group_event_stat_ = youtube_group_event_stat;
  if (youtube_group_event_stat) {
    set_has_youtube_group_event_stat();
  } else {
    clear_has_youtube_group_event_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat)
}
void SourceData::_slow_mutable_youtube_group_event_stat_week() {
  youtube_group_event_stat_week_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::_slow_release_youtube_group_event_stat_week() {
  if (youtube_group_event_stat_week_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = new ::cosmo::pb::SourceData_GroupEventStat(*youtube_group_event_stat_week_);
    youtube_group_event_stat_week_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::unsafe_arena_release_youtube_group_event_stat_week() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.youtube_group_event_stat_week)
  clear_has_youtube_group_event_stat_week();
  ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_week_;
  youtube_group_event_stat_week_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_youtube_group_event_stat_week(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** youtube_group_event_stat_week) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*youtube_group_event_stat_week) == NULL) {
      message_arena->Own(*youtube_group_event_stat_week);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*youtube_group_event_stat_week)) {
      ::cosmo::pb::SourceData_GroupEventStat* new_youtube_group_event_stat_week = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
            message_arena);
      new_youtube_group_event_stat_week->CopyFrom(**youtube_group_event_stat_week);
      *youtube_group_event_stat_week = new_youtube_group_event_stat_week;
    }
}
void SourceData::unsafe_arena_set_allocated_youtube_group_event_stat_week(
    ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week) {
  if (GetArenaNoVirtual() == NULL) {
    delete youtube_group_event_stat_week_;
  }
  youtube_group_event_stat_week_ = youtube_group_event_stat_week;
  if (youtube_group_event_stat_week) {
    set_has_youtube_group_event_stat_week();
  } else {
    clear_has_youtube_group_event_stat_week();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat_week)
}
void SourceData::_slow_mutable_taped_location_stat() {
  taped_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::_slow_release_taped_location_stat() {
  if (taped_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = new ::cosmo::pb::SourceData_SourceLocationStat(*taped_location_stat_);
    taped_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::unsafe_arena_release_taped_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.taped_location_stat)
  clear_has_taped_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* temp = taped_location_stat_;
  taped_location_stat_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_taped_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** taped_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*taped_location_stat) == NULL) {
      message_arena->Own(*taped_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*taped_location_stat)) {
      ::cosmo::pb::SourceData_SourceLocationStat* new_taped_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
            message_arena);
      new_taped_location_stat->CopyFrom(**taped_location_stat);
      *taped_location_stat = new_taped_location_stat;
    }
}
void SourceData::unsafe_arena_set_allocated_taped_location_stat(
    ::cosmo::pb::SourceData_SourceLocationStat* taped_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete taped_location_stat_;
  }
  taped_location_stat_ = taped_location_stat;
  if (taped_location_stat) {
    set_has_taped_location_stat();
  } else {
    clear_has_taped_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.taped_location_stat)
}
void SourceData::_slow_mutable_homer_location_stat() {
  homer_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::_slow_release_homer_location_stat() {
  if (homer_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = new ::cosmo::pb::SourceData_SourceLocationStat(*homer_location_stat_);
    homer_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::unsafe_arena_release_homer_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.homer_location_stat)
  clear_has_homer_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* temp = homer_location_stat_;
  homer_location_stat_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_homer_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** homer_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*homer_location_stat) == NULL) {
      message_arena->Own(*homer_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*homer_location_stat)) {
      ::cosmo::pb::SourceData_SourceLocationStat* new_homer_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
            message_arena);
      new_homer_location_stat->CopyFrom(**homer_location_stat);
      *homer_location_stat = new_homer_location_stat;
    }
}
void SourceData::unsafe_arena_set_allocated_homer_location_stat(
    ::cosmo::pb::SourceData_SourceLocationStat* homer_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete homer_location_stat_;
  }
  homer_location_stat_ = homer_location_stat;
  if (homer_location_stat) {
    set_has_homer_location_stat();
  } else {
    clear_has_homer_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.homer_location_stat)
}
void SourceData::_slow_mutable_web_top_similar_sources() {
  web_top_similar_sources_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceSimilarity >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceSimilarity* SourceData::_slow_release_web_top_similar_sources() {
  if (web_top_similar_sources_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceSimilarity* temp = new ::cosmo::pb::SourceData_SourceSimilarity(*web_top_similar_sources_);
    web_top_similar_sources_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceSimilarity* SourceData::unsafe_arena_release_web_top_similar_sources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.web_top_similar_sources)
  clear_has_web_top_similar_sources();
  ::cosmo::pb::SourceData_SourceSimilarity* temp = web_top_similar_sources_;
  web_top_similar_sources_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_web_top_similar_sources(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceSimilarity** web_top_similar_sources) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*web_top_similar_sources) == NULL) {
      message_arena->Own(*web_top_similar_sources);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*web_top_similar_sources)) {
      ::cosmo::pb::SourceData_SourceSimilarity* new_web_top_similar_sources = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceSimilarity >(
            message_arena);
      new_web_top_similar_sources->CopyFrom(**web_top_similar_sources);
      *web_top_similar_sources = new_web_top_similar_sources;
    }
}
void SourceData::unsafe_arena_set_allocated_web_top_similar_sources(
    ::cosmo::pb::SourceData_SourceSimilarity* web_top_similar_sources) {
  if (GetArenaNoVirtual() == NULL) {
    delete web_top_similar_sources_;
  }
  web_top_similar_sources_ = web_top_similar_sources;
  if (web_top_similar_sources) {
    set_has_web_top_similar_sources();
  } else {
    clear_has_web_top_similar_sources();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.web_top_similar_sources)
}
void SourceData::_slow_mutable_ok_top_similar_groups() {
  ok_top_similar_groups_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceSimilarity >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceSimilarity* SourceData::_slow_release_ok_top_similar_groups() {
  if (ok_top_similar_groups_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceSimilarity* temp = new ::cosmo::pb::SourceData_SourceSimilarity(*ok_top_similar_groups_);
    ok_top_similar_groups_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceSimilarity* SourceData::unsafe_arena_release_ok_top_similar_groups() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.ok_top_similar_groups)
  clear_has_ok_top_similar_groups();
  ::cosmo::pb::SourceData_SourceSimilarity* temp = ok_top_similar_groups_;
  ok_top_similar_groups_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_ok_top_similar_groups(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceSimilarity** ok_top_similar_groups) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*ok_top_similar_groups) == NULL) {
      message_arena->Own(*ok_top_similar_groups);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*ok_top_similar_groups)) {
      ::cosmo::pb::SourceData_SourceSimilarity* new_ok_top_similar_groups = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceSimilarity >(
            message_arena);
      new_ok_top_similar_groups->CopyFrom(**ok_top_similar_groups);
      *ok_top_similar_groups = new_ok_top_similar_groups;
    }
}
void SourceData::unsafe_arena_set_allocated_ok_top_similar_groups(
    ::cosmo::pb::SourceData_SourceSimilarity* ok_top_similar_groups) {
  if (GetArenaNoVirtual() == NULL) {
    delete ok_top_similar_groups_;
  }
  ok_top_similar_groups_ = ok_top_similar_groups;
  if (ok_top_similar_groups) {
    set_has_ok_top_similar_groups();
  } else {
    clear_has_ok_top_similar_groups();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.ok_top_similar_groups)
}
void SourceData::_slow_mutable_hourly_location_stat() {
  hourly_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::_slow_release_hourly_location_stat() {
  if (hourly_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = new ::cosmo::pb::SourceData_SourceLocationStat(*hourly_location_stat_);
    hourly_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::unsafe_arena_release_hourly_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.hourly_location_stat)
  clear_has_hourly_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* temp = hourly_location_stat_;
  hourly_location_stat_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_hourly_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** hourly_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*hourly_location_stat) == NULL) {
      message_arena->Own(*hourly_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*hourly_location_stat)) {
      ::cosmo::pb::SourceData_SourceLocationStat* new_hourly_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
            message_arena);
      new_hourly_location_stat->CopyFrom(**hourly_location_stat);
      *hourly_location_stat = new_hourly_location_stat;
    }
}
void SourceData::unsafe_arena_set_allocated_hourly_location_stat(
    ::cosmo::pb::SourceData_SourceLocationStat* hourly_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete hourly_location_stat_;
  }
  hourly_location_stat_ = hourly_location_stat;
  if (hourly_location_stat) {
    set_has_hourly_location_stat();
  } else {
    clear_has_hourly_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.hourly_location_stat)
}
void SourceData::_slow_mutable_daily_location_stat() {
  daily_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::_slow_release_daily_location_stat() {
  if (daily_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = new ::cosmo::pb::SourceData_SourceLocationStat(*daily_location_stat_);
    daily_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::unsafe_arena_release_daily_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.daily_location_stat)
  clear_has_daily_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* temp = daily_location_stat_;
  daily_location_stat_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_daily_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** daily_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*daily_location_stat) == NULL) {
      message_arena->Own(*daily_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*daily_location_stat)) {
      ::cosmo::pb::SourceData_SourceLocationStat* new_daily_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
            message_arena);
      new_daily_location_stat->CopyFrom(**daily_location_stat);
      *daily_location_stat = new_daily_location_stat;
    }
}
void SourceData::unsafe_arena_set_allocated_daily_location_stat(
    ::cosmo::pb::SourceData_SourceLocationStat* daily_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete daily_location_stat_;
  }
  daily_location_stat_ = daily_location_stat;
  if (daily_location_stat) {
    set_has_daily_location_stat();
  } else {
    clear_has_daily_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.daily_location_stat)
}
void SourceData::_slow_mutable_weekly_location_stat() {
  weekly_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::_slow_release_weekly_location_stat() {
  if (weekly_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = new ::cosmo::pb::SourceData_SourceLocationStat(*weekly_location_stat_);
    weekly_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::unsafe_arena_release_weekly_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.weekly_location_stat)
  clear_has_weekly_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* temp = weekly_location_stat_;
  weekly_location_stat_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_weekly_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** weekly_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*weekly_location_stat) == NULL) {
      message_arena->Own(*weekly_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*weekly_location_stat)) {
      ::cosmo::pb::SourceData_SourceLocationStat* new_weekly_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
            message_arena);
      new_weekly_location_stat->CopyFrom(**weekly_location_stat);
      *weekly_location_stat = new_weekly_location_stat;
    }
}
void SourceData::unsafe_arena_set_allocated_weekly_location_stat(
    ::cosmo::pb::SourceData_SourceLocationStat* weekly_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete weekly_location_stat_;
  }
  weekly_location_stat_ = weekly_location_stat;
  if (weekly_location_stat) {
    set_has_weekly_location_stat();
  } else {
    clear_has_weekly_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.weekly_location_stat)
}
void SourceData::_slow_mutable_monthly_location_stat() {
  monthly_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::_slow_release_monthly_location_stat() {
  if (monthly_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = new ::cosmo::pb::SourceData_SourceLocationStat(*monthly_location_stat_);
    monthly_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::unsafe_arena_release_monthly_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.monthly_location_stat)
  clear_has_monthly_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* temp = monthly_location_stat_;
  monthly_location_stat_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_monthly_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** monthly_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*monthly_location_stat) == NULL) {
      message_arena->Own(*monthly_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*monthly_location_stat)) {
      ::cosmo::pb::SourceData_SourceLocationStat* new_monthly_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
            message_arena);
      new_monthly_location_stat->CopyFrom(**monthly_location_stat);
      *monthly_location_stat = new_monthly_location_stat;
    }
}
void SourceData::unsafe_arena_set_allocated_monthly_location_stat(
    ::cosmo::pb::SourceData_SourceLocationStat* monthly_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete monthly_location_stat_;
  }
  monthly_location_stat_ = monthly_location_stat;
  if (monthly_location_stat) {
    set_has_monthly_location_stat();
  } else {
    clear_has_monthly_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.monthly_location_stat)
}
void SourceData::_slow_mutable_source_new_popularity() {
  source_new_popularity_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourcePopularityStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::_slow_release_source_new_popularity() {
  if (source_new_popularity_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat* temp = new ::cosmo::pb::SourceData_SourcePopularityStat(*source_new_popularity_);
    source_new_popularity_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::unsafe_arena_release_source_new_popularity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.source_new_popularity)
  clear_has_source_new_popularity();
  ::cosmo::pb::SourceData_SourcePopularityStat* temp = source_new_popularity_;
  source_new_popularity_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_source_new_popularity(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourcePopularityStat** source_new_popularity) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*source_new_popularity) == NULL) {
      message_arena->Own(*source_new_popularity);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*source_new_popularity)) {
      ::cosmo::pb::SourceData_SourcePopularityStat* new_source_new_popularity = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourcePopularityStat >(
            message_arena);
      new_source_new_popularity->CopyFrom(**source_new_popularity);
      *source_new_popularity = new_source_new_popularity;
    }
}
void SourceData::unsafe_arena_set_allocated_source_new_popularity(
    ::cosmo::pb::SourceData_SourcePopularityStat* source_new_popularity) {
  if (GetArenaNoVirtual() == NULL) {
    delete source_new_popularity_;
  }
  source_new_popularity_ = source_new_popularity;
  if (source_new_popularity) {
    set_has_source_new_popularity();
  } else {
    clear_has_source_new_popularity();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.source_new_popularity)
}
void SourceData::_slow_mutable_vk_group_event_stat_v2() {
  vk_group_event_stat_v2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::_slow_release_vk_group_event_stat_v2() {
  if (vk_group_event_stat_v2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = new ::cosmo::pb::SourceData_GroupEventStat(*vk_group_event_stat_v2_);
    vk_group_event_stat_v2_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::unsafe_arena_release_vk_group_event_stat_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.vk_group_event_stat_v2)
  clear_has_vk_group_event_stat_v2();
  ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_v2_;
  vk_group_event_stat_v2_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_vk_group_event_stat_v2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** vk_group_event_stat_v2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*vk_group_event_stat_v2) == NULL) {
      message_arena->Own(*vk_group_event_stat_v2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*vk_group_event_stat_v2)) {
      ::cosmo::pb::SourceData_GroupEventStat* new_vk_group_event_stat_v2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
            message_arena);
      new_vk_group_event_stat_v2->CopyFrom(**vk_group_event_stat_v2);
      *vk_group_event_stat_v2 = new_vk_group_event_stat_v2;
    }
}
void SourceData::unsafe_arena_set_allocated_vk_group_event_stat_v2(
    ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_v2) {
  if (GetArenaNoVirtual() == NULL) {
    delete vk_group_event_stat_v2_;
  }
  vk_group_event_stat_v2_ = vk_group_event_stat_v2;
  if (vk_group_event_stat_v2) {
    set_has_vk_group_event_stat_v2();
  } else {
    clear_has_vk_group_event_stat_v2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.vk_group_event_stat_v2)
}
void SourceData::_slow_mutable_vk_group_event_stat_week_v2() {
  vk_group_event_stat_week_v2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::_slow_release_vk_group_event_stat_week_v2() {
  if (vk_group_event_stat_week_v2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = new ::cosmo::pb::SourceData_GroupEventStat(*vk_group_event_stat_week_v2_);
    vk_group_event_stat_week_v2_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::unsafe_arena_release_vk_group_event_stat_week_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.vk_group_event_stat_week_v2)
  clear_has_vk_group_event_stat_week_v2();
  ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_week_v2_;
  vk_group_event_stat_week_v2_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_vk_group_event_stat_week_v2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** vk_group_event_stat_week_v2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*vk_group_event_stat_week_v2) == NULL) {
      message_arena->Own(*vk_group_event_stat_week_v2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*vk_group_event_stat_week_v2)) {
      ::cosmo::pb::SourceData_GroupEventStat* new_vk_group_event_stat_week_v2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
            message_arena);
      new_vk_group_event_stat_week_v2->CopyFrom(**vk_group_event_stat_week_v2);
      *vk_group_event_stat_week_v2 = new_vk_group_event_stat_week_v2;
    }
}
void SourceData::unsafe_arena_set_allocated_vk_group_event_stat_week_v2(
    ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week_v2) {
  if (GetArenaNoVirtual() == NULL) {
    delete vk_group_event_stat_week_v2_;
  }
  vk_group_event_stat_week_v2_ = vk_group_event_stat_week_v2;
  if (vk_group_event_stat_week_v2) {
    set_has_vk_group_event_stat_week_v2();
  } else {
    clear_has_vk_group_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.vk_group_event_stat_week_v2)
}
void SourceData::_slow_mutable_youtube_group_event_stat_v2() {
  youtube_group_event_stat_v2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::_slow_release_youtube_group_event_stat_v2() {
  if (youtube_group_event_stat_v2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = new ::cosmo::pb::SourceData_GroupEventStat(*youtube_group_event_stat_v2_);
    youtube_group_event_stat_v2_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::unsafe_arena_release_youtube_group_event_stat_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.youtube_group_event_stat_v2)
  clear_has_youtube_group_event_stat_v2();
  ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_v2_;
  youtube_group_event_stat_v2_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_youtube_group_event_stat_v2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** youtube_group_event_stat_v2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*youtube_group_event_stat_v2) == NULL) {
      message_arena->Own(*youtube_group_event_stat_v2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*youtube_group_event_stat_v2)) {
      ::cosmo::pb::SourceData_GroupEventStat* new_youtube_group_event_stat_v2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
            message_arena);
      new_youtube_group_event_stat_v2->CopyFrom(**youtube_group_event_stat_v2);
      *youtube_group_event_stat_v2 = new_youtube_group_event_stat_v2;
    }
}
void SourceData::unsafe_arena_set_allocated_youtube_group_event_stat_v2(
    ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_v2) {
  if (GetArenaNoVirtual() == NULL) {
    delete youtube_group_event_stat_v2_;
  }
  youtube_group_event_stat_v2_ = youtube_group_event_stat_v2;
  if (youtube_group_event_stat_v2) {
    set_has_youtube_group_event_stat_v2();
  } else {
    clear_has_youtube_group_event_stat_v2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat_v2)
}
void SourceData::_slow_mutable_youtube_group_event_stat_week_v2() {
  youtube_group_event_stat_week_v2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::_slow_release_youtube_group_event_stat_week_v2() {
  if (youtube_group_event_stat_week_v2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = new ::cosmo::pb::SourceData_GroupEventStat(*youtube_group_event_stat_week_v2_);
    youtube_group_event_stat_week_v2_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::unsafe_arena_release_youtube_group_event_stat_week_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.youtube_group_event_stat_week_v2)
  clear_has_youtube_group_event_stat_week_v2();
  ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_week_v2_;
  youtube_group_event_stat_week_v2_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_youtube_group_event_stat_week_v2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** youtube_group_event_stat_week_v2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*youtube_group_event_stat_week_v2) == NULL) {
      message_arena->Own(*youtube_group_event_stat_week_v2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*youtube_group_event_stat_week_v2)) {
      ::cosmo::pb::SourceData_GroupEventStat* new_youtube_group_event_stat_week_v2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_GroupEventStat >(
            message_arena);
      new_youtube_group_event_stat_week_v2->CopyFrom(**youtube_group_event_stat_week_v2);
      *youtube_group_event_stat_week_v2 = new_youtube_group_event_stat_week_v2;
    }
}
void SourceData::unsafe_arena_set_allocated_youtube_group_event_stat_week_v2(
    ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week_v2) {
  if (GetArenaNoVirtual() == NULL) {
    delete youtube_group_event_stat_week_v2_;
  }
  youtube_group_event_stat_week_v2_ = youtube_group_event_stat_week_v2;
  if (youtube_group_event_stat_week_v2) {
    set_has_youtube_group_event_stat_week_v2();
  } else {
    clear_has_youtube_group_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat_week_v2)
}
void SourceData::_slow_mutable_fast_location_stat() {
  fast_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::_slow_release_fast_location_stat() {
  if (fast_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = new ::cosmo::pb::SourceData_SourceLocationStat(*fast_location_stat_);
    fast_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::unsafe_arena_release_fast_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.fast_location_stat)
  clear_has_fast_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* temp = fast_location_stat_;
  fast_location_stat_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_fast_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** fast_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*fast_location_stat) == NULL) {
      message_arena->Own(*fast_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*fast_location_stat)) {
      ::cosmo::pb::SourceData_SourceLocationStat* new_fast_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceLocationStat >(
            message_arena);
      new_fast_location_stat->CopyFrom(**fast_location_stat);
      *fast_location_stat = new_fast_location_stat;
    }
}
void SourceData::unsafe_arena_set_allocated_fast_location_stat(
    ::cosmo::pb::SourceData_SourceLocationStat* fast_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete fast_location_stat_;
  }
  fast_location_stat_ = fast_location_stat;
  if (fast_location_stat) {
    set_has_fast_location_stat();
  } else {
    clear_has_fast_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.fast_location_stat)
}
void SourceData::_slow_mutable_source_stat_geo() {
  source_stat_geo_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceGeo >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_SourceGeo* SourceData::_slow_release_source_stat_geo() {
  if (source_stat_geo_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_SourceGeo* temp = new ::cosmo::pb::SourceData_SourceGeo(*source_stat_geo_);
    source_stat_geo_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_SourceGeo* SourceData::unsafe_arena_release_source_stat_geo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.source_stat_geo)
  clear_has_source_stat_geo();
  ::cosmo::pb::SourceData_SourceGeo* temp = source_stat_geo_;
  source_stat_geo_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_source_stat_geo(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceGeo** source_stat_geo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*source_stat_geo) == NULL) {
      message_arena->Own(*source_stat_geo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*source_stat_geo)) {
      ::cosmo::pb::SourceData_SourceGeo* new_source_stat_geo = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_SourceGeo >(
            message_arena);
      new_source_stat_geo->CopyFrom(**source_stat_geo);
      *source_stat_geo = new_source_stat_geo;
    }
}
void SourceData::unsafe_arena_set_allocated_source_stat_geo(
    ::cosmo::pb::SourceData_SourceGeo* source_stat_geo) {
  if (GetArenaNoVirtual() == NULL) {
    delete source_stat_geo_;
  }
  source_stat_geo_ = source_stat_geo;
  if (source_stat_geo) {
    set_has_source_stat_geo();
  } else {
    clear_has_source_stat_geo();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.source_stat_geo)
}
void SourceData::_slow_mutable_content_themes() {
  content_themes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_ContentThemes >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_ContentThemes* SourceData::_slow_release_content_themes() {
  if (content_themes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_ContentThemes* temp = new ::cosmo::pb::SourceData_ContentThemes(*content_themes_);
    content_themes_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_ContentThemes* SourceData::unsafe_arena_release_content_themes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.content_themes)
  clear_has_content_themes();
  ::cosmo::pb::SourceData_ContentThemes* temp = content_themes_;
  content_themes_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_content_themes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_ContentThemes** content_themes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*content_themes) == NULL) {
      message_arena->Own(*content_themes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*content_themes)) {
      ::cosmo::pb::SourceData_ContentThemes* new_content_themes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_ContentThemes >(
            message_arena);
      new_content_themes->CopyFrom(**content_themes);
      *content_themes = new_content_themes;
    }
}
void SourceData::unsafe_arena_set_allocated_content_themes(
    ::cosmo::pb::SourceData_ContentThemes* content_themes) {
  if (GetArenaNoVirtual() == NULL) {
    delete content_themes_;
  }
  content_themes_ = content_themes;
  if (content_themes) {
    set_has_content_themes();
  } else {
    clear_has_content_themes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.content_themes)
}
void SourceData::_slow_mutable_lenta_admin_source_info() {
  lenta_admin_source_info_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_LentaAdminSourceInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData_LentaAdminSourceInfo* SourceData::_slow_release_lenta_admin_source_info() {
  if (lenta_admin_source_info_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData_LentaAdminSourceInfo* temp = new ::cosmo::pb::SourceData_LentaAdminSourceInfo(*lenta_admin_source_info_);
    lenta_admin_source_info_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData_LentaAdminSourceInfo* SourceData::unsafe_arena_release_lenta_admin_source_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.lenta_admin_source_info)
  clear_has_lenta_admin_source_info();
  ::cosmo::pb::SourceData_LentaAdminSourceInfo* temp = lenta_admin_source_info_;
  lenta_admin_source_info_ = NULL;
  return temp;
}
void SourceData::_slow_set_allocated_lenta_admin_source_info(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_LentaAdminSourceInfo** lenta_admin_source_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*lenta_admin_source_info) == NULL) {
      message_arena->Own(*lenta_admin_source_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*lenta_admin_source_info)) {
      ::cosmo::pb::SourceData_LentaAdminSourceInfo* new_lenta_admin_source_info = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData_LentaAdminSourceInfo >(
            message_arena);
      new_lenta_admin_source_info->CopyFrom(**lenta_admin_source_info);
      *lenta_admin_source_info = new_lenta_admin_source_info;
    }
}
void SourceData::unsafe_arena_set_allocated_lenta_admin_source_info(
    ::cosmo::pb::SourceData_LentaAdminSourceInfo* lenta_admin_source_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete lenta_admin_source_info_;
  }
  lenta_admin_source_info_ = lenta_admin_source_info;
  if (lenta_admin_source_info) {
    set_has_lenta_admin_source_info();
  } else {
    clear_has_lenta_admin_source_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.lenta_admin_source_info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SourceData::kSourceIdFieldNumber;
const int SourceData::kLdaFeaFieldNumber;
const int SourceData::kAlsFeaFieldNumber;
const int SourceData::kOkInfoFieldNumber;
const int SourceData::kSourceInfoFieldNumber;
const int SourceData::kOriginalInfoFieldNumber;
const int SourceData::kGroupPeriodStatsFieldNumber;
const int SourceData::kNewsDataFieldNumber;
const int SourceData::kSourcePopularityFieldNumber;
const int SourceData::kLdaFea2FieldNumber;
const int SourceData::kAlsFea2FieldNumber;
const int SourceData::kSourceFreshPopularityFieldNumber;
const int SourceData::kOkGroupEventStatFieldNumber;
const int SourceData::kVkGroupEventStatFieldNumber;
const int SourceData::kVkGroupEventStatWeekFieldNumber;
const int SourceData::kYoutubeGroupEventStatFieldNumber;
const int SourceData::kYoutubeGroupEventStatWeekFieldNumber;
const int SourceData::kTapedLocationStatFieldNumber;
const int SourceData::kHomerLocationStatFieldNumber;
const int SourceData::kWebTopSimilarSourcesFieldNumber;
const int SourceData::kOkTopSimilarGroupsFieldNumber;
const int SourceData::kHourlyLocationStatFieldNumber;
const int SourceData::kDailyLocationStatFieldNumber;
const int SourceData::kWeeklyLocationStatFieldNumber;
const int SourceData::kMonthlyLocationStatFieldNumber;
const int SourceData::kSourceNewPopularityFieldNumber;
const int SourceData::kVkGroupEventStatV2FieldNumber;
const int SourceData::kVkGroupEventStatWeekV2FieldNumber;
const int SourceData::kYoutubeGroupEventStatV2FieldNumber;
const int SourceData::kYoutubeGroupEventStatWeekV2FieldNumber;
const int SourceData::kFastLocationStatFieldNumber;
const int SourceData::kSourceStatGeoFieldNumber;
const int SourceData::kContentThemesFieldNumber;
const int SourceData::kLentaAdminSourceInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SourceData::SourceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.SourceData)
}
SourceData::SourceData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.SourceData)
}
SourceData::SourceData(const SourceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lda_fea()) {
    lda_fea_ = new ::cosmo::pb::SourceData_LdaFea(*from.lda_fea_);
  } else {
    lda_fea_ = NULL;
  }
  if (from.has_als_fea()) {
    als_fea_ = new ::cosmo::pb::SourceData_AlsFea(*from.als_fea_);
  } else {
    als_fea_ = NULL;
  }
  if (from.has_ok_info()) {
    ok_info_ = new ::cosmo::pb::SourceData_OkInfo(*from.ok_info_);
  } else {
    ok_info_ = NULL;
  }
  if (from.has_source_info()) {
    source_info_ = new ::cosmo::pb::SourceData_SourceInfo(*from.source_info_);
  } else {
    source_info_ = NULL;
  }
  if (from.has_original_info()) {
    original_info_ = new ::cosmo::pb::SourceData_OriginalInfo(*from.original_info_);
  } else {
    original_info_ = NULL;
  }
  if (from.has_group_period_stats()) {
    group_period_stats_ = new ::cosmo::pb::SourceData_GroupPeriodStats(*from.group_period_stats_);
  } else {
    group_period_stats_ = NULL;
  }
  if (from.has_news_data()) {
    news_data_ = new ::cosmo::pb::SourceData_NewsData(*from.news_data_);
  } else {
    news_data_ = NULL;
  }
  if (from.has_source_popularity()) {
    source_popularity_ = new ::cosmo::pb::SourceData_SourcePopularityStat(*from.source_popularity_);
  } else {
    source_popularity_ = NULL;
  }
  if (from.has_lda_fea_2()) {
    lda_fea_2_ = new ::cosmo::pb::SourceData_LdaFea(*from.lda_fea_2_);
  } else {
    lda_fea_2_ = NULL;
  }
  if (from.has_als_fea_2()) {
    als_fea_2_ = new ::cosmo::pb::SourceData_AlsFea(*from.als_fea_2_);
  } else {
    als_fea_2_ = NULL;
  }
  if (from.has_source_fresh_popularity()) {
    source_fresh_popularity_ = new ::cosmo::pb::SourceData_SourcePopularityStat(*from.source_fresh_popularity_);
  } else {
    source_fresh_popularity_ = NULL;
  }
  if (from.has_ok_group_event_stat()) {
    ok_group_event_stat_ = new ::cosmo::pb::SourceData_GroupEventStat(*from.ok_group_event_stat_);
  } else {
    ok_group_event_stat_ = NULL;
  }
  if (from.has_vk_group_event_stat()) {
    vk_group_event_stat_ = new ::cosmo::pb::SourceData_GroupEventStat(*from.vk_group_event_stat_);
  } else {
    vk_group_event_stat_ = NULL;
  }
  if (from.has_vk_group_event_stat_week()) {
    vk_group_event_stat_week_ = new ::cosmo::pb::SourceData_GroupEventStat(*from.vk_group_event_stat_week_);
  } else {
    vk_group_event_stat_week_ = NULL;
  }
  if (from.has_youtube_group_event_stat()) {
    youtube_group_event_stat_ = new ::cosmo::pb::SourceData_GroupEventStat(*from.youtube_group_event_stat_);
  } else {
    youtube_group_event_stat_ = NULL;
  }
  if (from.has_youtube_group_event_stat_week()) {
    youtube_group_event_stat_week_ = new ::cosmo::pb::SourceData_GroupEventStat(*from.youtube_group_event_stat_week_);
  } else {
    youtube_group_event_stat_week_ = NULL;
  }
  if (from.has_taped_location_stat()) {
    taped_location_stat_ = new ::cosmo::pb::SourceData_SourceLocationStat(*from.taped_location_stat_);
  } else {
    taped_location_stat_ = NULL;
  }
  if (from.has_homer_location_stat()) {
    homer_location_stat_ = new ::cosmo::pb::SourceData_SourceLocationStat(*from.homer_location_stat_);
  } else {
    homer_location_stat_ = NULL;
  }
  if (from.has_web_top_similar_sources()) {
    web_top_similar_sources_ = new ::cosmo::pb::SourceData_SourceSimilarity(*from.web_top_similar_sources_);
  } else {
    web_top_similar_sources_ = NULL;
  }
  if (from.has_ok_top_similar_groups()) {
    ok_top_similar_groups_ = new ::cosmo::pb::SourceData_SourceSimilarity(*from.ok_top_similar_groups_);
  } else {
    ok_top_similar_groups_ = NULL;
  }
  if (from.has_hourly_location_stat()) {
    hourly_location_stat_ = new ::cosmo::pb::SourceData_SourceLocationStat(*from.hourly_location_stat_);
  } else {
    hourly_location_stat_ = NULL;
  }
  if (from.has_daily_location_stat()) {
    daily_location_stat_ = new ::cosmo::pb::SourceData_SourceLocationStat(*from.daily_location_stat_);
  } else {
    daily_location_stat_ = NULL;
  }
  if (from.has_weekly_location_stat()) {
    weekly_location_stat_ = new ::cosmo::pb::SourceData_SourceLocationStat(*from.weekly_location_stat_);
  } else {
    weekly_location_stat_ = NULL;
  }
  if (from.has_monthly_location_stat()) {
    monthly_location_stat_ = new ::cosmo::pb::SourceData_SourceLocationStat(*from.monthly_location_stat_);
  } else {
    monthly_location_stat_ = NULL;
  }
  if (from.has_source_new_popularity()) {
    source_new_popularity_ = new ::cosmo::pb::SourceData_SourcePopularityStat(*from.source_new_popularity_);
  } else {
    source_new_popularity_ = NULL;
  }
  if (from.has_vk_group_event_stat_v2()) {
    vk_group_event_stat_v2_ = new ::cosmo::pb::SourceData_GroupEventStat(*from.vk_group_event_stat_v2_);
  } else {
    vk_group_event_stat_v2_ = NULL;
  }
  if (from.has_vk_group_event_stat_week_v2()) {
    vk_group_event_stat_week_v2_ = new ::cosmo::pb::SourceData_GroupEventStat(*from.vk_group_event_stat_week_v2_);
  } else {
    vk_group_event_stat_week_v2_ = NULL;
  }
  if (from.has_youtube_group_event_stat_v2()) {
    youtube_group_event_stat_v2_ = new ::cosmo::pb::SourceData_GroupEventStat(*from.youtube_group_event_stat_v2_);
  } else {
    youtube_group_event_stat_v2_ = NULL;
  }
  if (from.has_youtube_group_event_stat_week_v2()) {
    youtube_group_event_stat_week_v2_ = new ::cosmo::pb::SourceData_GroupEventStat(*from.youtube_group_event_stat_week_v2_);
  } else {
    youtube_group_event_stat_week_v2_ = NULL;
  }
  if (from.has_fast_location_stat()) {
    fast_location_stat_ = new ::cosmo::pb::SourceData_SourceLocationStat(*from.fast_location_stat_);
  } else {
    fast_location_stat_ = NULL;
  }
  if (from.has_source_stat_geo()) {
    source_stat_geo_ = new ::cosmo::pb::SourceData_SourceGeo(*from.source_stat_geo_);
  } else {
    source_stat_geo_ = NULL;
  }
  if (from.has_content_themes()) {
    content_themes_ = new ::cosmo::pb::SourceData_ContentThemes(*from.content_themes_);
  } else {
    content_themes_ = NULL;
  }
  if (from.has_lenta_admin_source_info()) {
    lenta_admin_source_info_ = new ::cosmo::pb::SourceData_LentaAdminSourceInfo(*from.lenta_admin_source_info_);
  } else {
    lenta_admin_source_info_ = NULL;
  }
  source_id_ = from.source_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.SourceData)
}

void SourceData::SharedCtor() {
  ::memset(&lda_fea_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_id_) -
      reinterpret_cast<char*>(&lda_fea_)) + sizeof(source_id_));
  _cached_size_ = 0;
}

SourceData::~SourceData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.SourceData)
  SharedDtor();
}

void SourceData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete lda_fea_;
  if (this != internal_default_instance()) delete als_fea_;
  if (this != internal_default_instance()) delete ok_info_;
  if (this != internal_default_instance()) delete source_info_;
  if (this != internal_default_instance()) delete original_info_;
  if (this != internal_default_instance()) delete group_period_stats_;
  if (this != internal_default_instance()) delete news_data_;
  if (this != internal_default_instance()) delete source_popularity_;
  if (this != internal_default_instance()) delete lda_fea_2_;
  if (this != internal_default_instance()) delete als_fea_2_;
  if (this != internal_default_instance()) delete source_fresh_popularity_;
  if (this != internal_default_instance()) delete ok_group_event_stat_;
  if (this != internal_default_instance()) delete vk_group_event_stat_;
  if (this != internal_default_instance()) delete vk_group_event_stat_week_;
  if (this != internal_default_instance()) delete youtube_group_event_stat_;
  if (this != internal_default_instance()) delete youtube_group_event_stat_week_;
  if (this != internal_default_instance()) delete taped_location_stat_;
  if (this != internal_default_instance()) delete homer_location_stat_;
  if (this != internal_default_instance()) delete web_top_similar_sources_;
  if (this != internal_default_instance()) delete ok_top_similar_groups_;
  if (this != internal_default_instance()) delete hourly_location_stat_;
  if (this != internal_default_instance()) delete daily_location_stat_;
  if (this != internal_default_instance()) delete weekly_location_stat_;
  if (this != internal_default_instance()) delete monthly_location_stat_;
  if (this != internal_default_instance()) delete source_new_popularity_;
  if (this != internal_default_instance()) delete vk_group_event_stat_v2_;
  if (this != internal_default_instance()) delete vk_group_event_stat_week_v2_;
  if (this != internal_default_instance()) delete youtube_group_event_stat_v2_;
  if (this != internal_default_instance()) delete youtube_group_event_stat_week_v2_;
  if (this != internal_default_instance()) delete fast_location_stat_;
  if (this != internal_default_instance()) delete source_stat_geo_;
  if (this != internal_default_instance()) delete content_themes_;
  if (this != internal_default_instance()) delete lenta_admin_source_info_;
}

void SourceData::ArenaDtor(void* object) {
  SourceData* _this = reinterpret_cast< SourceData* >(object);
  (void)_this;
}
void SourceData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SourceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceData::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SourceData& SourceData::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

SourceData* SourceData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SourceData>(arena);
}

void SourceData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.SourceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lda_fea_ != NULL);
      lda_fea_->::cosmo::pb::SourceData_LdaFea::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(als_fea_ != NULL);
      als_fea_->::cosmo::pb::SourceData_AlsFea::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ok_info_ != NULL);
      ok_info_->::cosmo::pb::SourceData_OkInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(source_info_ != NULL);
      source_info_->::cosmo::pb::SourceData_SourceInfo::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(original_info_ != NULL);
      original_info_->::cosmo::pb::SourceData_OriginalInfo::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(group_period_stats_ != NULL);
      group_period_stats_->::cosmo::pb::SourceData_GroupPeriodStats::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(news_data_ != NULL);
      news_data_->::cosmo::pb::SourceData_NewsData::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(source_popularity_ != NULL);
      source_popularity_->::cosmo::pb::SourceData_SourcePopularityStat::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(lda_fea_2_ != NULL);
      lda_fea_2_->::cosmo::pb::SourceData_LdaFea::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(als_fea_2_ != NULL);
      als_fea_2_->::cosmo::pb::SourceData_AlsFea::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(source_fresh_popularity_ != NULL);
      source_fresh_popularity_->::cosmo::pb::SourceData_SourcePopularityStat::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(ok_group_event_stat_ != NULL);
      ok_group_event_stat_->::cosmo::pb::SourceData_GroupEventStat::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(vk_group_event_stat_ != NULL);
      vk_group_event_stat_->::cosmo::pb::SourceData_GroupEventStat::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(vk_group_event_stat_week_ != NULL);
      vk_group_event_stat_week_->::cosmo::pb::SourceData_GroupEventStat::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(youtube_group_event_stat_ != NULL);
      youtube_group_event_stat_->::cosmo::pb::SourceData_GroupEventStat::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(youtube_group_event_stat_week_ != NULL);
      youtube_group_event_stat_week_->::cosmo::pb::SourceData_GroupEventStat::Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(taped_location_stat_ != NULL);
      taped_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(homer_location_stat_ != NULL);
      homer_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(web_top_similar_sources_ != NULL);
      web_top_similar_sources_->::cosmo::pb::SourceData_SourceSimilarity::Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(ok_top_similar_groups_ != NULL);
      ok_top_similar_groups_->::cosmo::pb::SourceData_SourceSimilarity::Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(hourly_location_stat_ != NULL);
      hourly_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(daily_location_stat_ != NULL);
      daily_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(weekly_location_stat_ != NULL);
      weekly_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(monthly_location_stat_ != NULL);
      monthly_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(source_new_popularity_ != NULL);
      source_new_popularity_->::cosmo::pb::SourceData_SourcePopularityStat::Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(vk_group_event_stat_v2_ != NULL);
      vk_group_event_stat_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(vk_group_event_stat_week_v2_ != NULL);
      vk_group_event_stat_week_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(youtube_group_event_stat_v2_ != NULL);
      youtube_group_event_stat_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(youtube_group_event_stat_week_v2_ != NULL);
      youtube_group_event_stat_week_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(fast_location_stat_ != NULL);
      fast_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(source_stat_geo_ != NULL);
      source_stat_geo_->::cosmo::pb::SourceData_SourceGeo::Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(content_themes_ != NULL);
      content_themes_->::cosmo::pb::SourceData_ContentThemes::Clear();
    }
  }
  if (has_lenta_admin_source_info()) {
    GOOGLE_DCHECK(lenta_admin_source_info_ != NULL);
    lenta_admin_source_info_->::cosmo::pb::SourceData_LentaAdminSourceInfo::Clear();
  }
  source_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SourceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.SourceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.LdaFea lda_fea = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lda_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.AlsFea als_fea = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_als_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.OkInfo ok_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ok_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceInfo source_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.OriginalInfo original_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupPeriodStats group_period_stats = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_period_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.NewsData news_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourcePopularityStat source_popularity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_popularity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.LdaFea lda_fea_2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lda_fea_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.AlsFea als_fea_2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_als_fea_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourcePopularityStat source_fresh_popularity = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_fresh_popularity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupEventStat ok_group_event_stat = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ok_group_event_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_group_event_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_group_event_stat_week()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youtube_group_event_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youtube_group_event_stat_week()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceLocationStat taped_location_stat = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taped_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceLocationStat homer_location_stat = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_homer_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceSimilarity web_top_similar_sources = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_web_top_similar_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceSimilarity ok_top_similar_groups = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ok_top_similar_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceLocationStat hourly_location_stat = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hourly_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceLocationStat daily_location_stat = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceLocationStat weekly_location_stat = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weekly_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceLocationStat monthly_location_stat = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monthly_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourcePopularityStat source_new_popularity = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_new_popularity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_v2 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_group_event_stat_v2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week_v2 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_group_event_stat_week_v2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_v2 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youtube_group_event_stat_v2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week_v2 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youtube_group_event_stat_week_v2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceLocationStat fast_location_stat = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fast_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.SourceGeo source_stat_geo = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_stat_geo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.ContentThemes content_themes = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content_themes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData.LentaAdminSourceInfo lenta_admin_source_info = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lenta_admin_source_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.SourceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.SourceData)
  return false;
#undef DO_
}

void SourceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.SourceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.SourceData.LdaFea lda_fea = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lda_fea_, output);
  }

  // optional .cosmo.pb.SourceData.AlsFea als_fea = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->als_fea_, output);
  }

  // optional .cosmo.pb.SourceData.OkInfo ok_info = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ok_info_, output);
  }

  // optional .cosmo.pb.SourceData.SourceInfo source_info = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->source_info_, output);
  }

  // optional .cosmo.pb.SourceData.OriginalInfo original_info = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->original_info_, output);
  }

  // optional .cosmo.pb.SourceData.GroupPeriodStats group_period_stats = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->group_period_stats_, output);
  }

  // optional .cosmo.pb.SourceData.NewsData news_data = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->news_data_, output);
  }

  // optional .cosmo.pb.SourceData.SourcePopularityStat source_popularity = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->source_popularity_, output);
  }

  // optional .cosmo.pb.SourceData.LdaFea lda_fea_2 = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->lda_fea_2_, output);
  }

  // optional .cosmo.pb.SourceData.AlsFea als_fea_2 = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->als_fea_2_, output);
  }

  // optional .cosmo.pb.SourceData.SourcePopularityStat source_fresh_popularity = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->source_fresh_popularity_, output);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat ok_group_event_stat = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->ok_group_event_stat_, output);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->vk_group_event_stat_, output);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->vk_group_event_stat_week_, output);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->youtube_group_event_stat_, output);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->youtube_group_event_stat_week_, output);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat taped_location_stat = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->taped_location_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat homer_location_stat = 22;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->homer_location_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceSimilarity web_top_similar_sources = 23;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->web_top_similar_sources_, output);
  }

  // optional .cosmo.pb.SourceData.SourceSimilarity ok_top_similar_groups = 24;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->ok_top_similar_groups_, output);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat hourly_location_stat = 25;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->hourly_location_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat daily_location_stat = 26;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->daily_location_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat weekly_location_stat = 27;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->weekly_location_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat monthly_location_stat = 28;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->monthly_location_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourcePopularityStat source_new_popularity = 29;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->source_new_popularity_, output);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_v2 = 30;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->vk_group_event_stat_v2_, output);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week_v2 = 31;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->vk_group_event_stat_week_v2_, output);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_v2 = 32;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->youtube_group_event_stat_v2_, output);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week_v2 = 33;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->youtube_group_event_stat_week_v2_, output);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat fast_location_stat = 34;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->fast_location_stat_, output);
  }

  // optional .cosmo.pb.SourceData.SourceGeo source_stat_geo = 35;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->source_stat_geo_, output);
  }

  // optional .cosmo.pb.SourceData.ContentThemes content_themes = 36;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->content_themes_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .cosmo.pb.SourceData.LentaAdminSourceInfo lenta_admin_source_info = 37;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->lenta_admin_source_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.SourceData)
}

::google::protobuf::uint8* SourceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.SourceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.SourceData.LdaFea lda_fea = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lda_fea_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.AlsFea als_fea = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->als_fea_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.OkInfo ok_info = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ok_info_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceInfo source_info = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->source_info_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.OriginalInfo original_info = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->original_info_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.GroupPeriodStats group_period_stats = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->group_period_stats_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.NewsData news_data = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->news_data_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourcePopularityStat source_popularity = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->source_popularity_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.LdaFea lda_fea_2 = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->lda_fea_2_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.AlsFea als_fea_2 = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->als_fea_2_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourcePopularityStat source_fresh_popularity = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->source_fresh_popularity_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat ok_group_event_stat = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->ok_group_event_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->vk_group_event_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->vk_group_event_stat_week_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->youtube_group_event_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->youtube_group_event_stat_week_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat taped_location_stat = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->taped_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat homer_location_stat = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->homer_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceSimilarity web_top_similar_sources = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->web_top_similar_sources_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceSimilarity ok_top_similar_groups = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->ok_top_similar_groups_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat hourly_location_stat = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->hourly_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat daily_location_stat = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->daily_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat weekly_location_stat = 27;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->weekly_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat monthly_location_stat = 28;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->monthly_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourcePopularityStat source_new_popularity = 29;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->source_new_popularity_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_v2 = 30;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->vk_group_event_stat_v2_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week_v2 = 31;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->vk_group_event_stat_week_v2_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_v2 = 32;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->youtube_group_event_stat_v2_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week_v2 = 33;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->youtube_group_event_stat_week_v2_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceLocationStat fast_location_stat = 34;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->fast_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.SourceGeo source_stat_geo = 35;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->source_stat_geo_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData.ContentThemes content_themes = 36;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->content_themes_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .cosmo.pb.SourceData.LentaAdminSourceInfo lenta_admin_source_info = 37;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->lenta_admin_source_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.SourceData)
  return target;
}

size_t SourceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.SourceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 source_id = 1;
  if (has_source_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .cosmo.pb.SourceData.LdaFea lda_fea = 2;
    if (has_lda_fea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lda_fea_);
    }

    // optional .cosmo.pb.SourceData.AlsFea als_fea = 3;
    if (has_als_fea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->als_fea_);
    }

    // optional .cosmo.pb.SourceData.OkInfo ok_info = 6;
    if (has_ok_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ok_info_);
    }

    // optional .cosmo.pb.SourceData.SourceInfo source_info = 7;
    if (has_source_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_info_);
    }

    // optional .cosmo.pb.SourceData.OriginalInfo original_info = 8;
    if (has_original_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->original_info_);
    }

    // optional .cosmo.pb.SourceData.GroupPeriodStats group_period_stats = 9;
    if (has_group_period_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->group_period_stats_);
    }

    // optional .cosmo.pb.SourceData.NewsData news_data = 10;
    if (has_news_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->news_data_);
    }

    // optional .cosmo.pb.SourceData.SourcePopularityStat source_popularity = 11;
    if (has_source_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_popularity_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .cosmo.pb.SourceData.LdaFea lda_fea_2 = 12;
    if (has_lda_fea_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lda_fea_2_);
    }

    // optional .cosmo.pb.SourceData.AlsFea als_fea_2 = 13;
    if (has_als_fea_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->als_fea_2_);
    }

    // optional .cosmo.pb.SourceData.SourcePopularityStat source_fresh_popularity = 14;
    if (has_source_fresh_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_fresh_popularity_);
    }

    // optional .cosmo.pb.SourceData.GroupEventStat ok_group_event_stat = 15;
    if (has_ok_group_event_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ok_group_event_stat_);
    }

    // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat = 16;
    if (has_vk_group_event_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_group_event_stat_);
    }

    // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week = 17;
    if (has_vk_group_event_stat_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_group_event_stat_week_);
    }

    // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat = 18;
    if (has_youtube_group_event_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youtube_group_event_stat_);
    }

    // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week = 19;
    if (has_youtube_group_event_stat_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youtube_group_event_stat_week_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .cosmo.pb.SourceData.SourceLocationStat taped_location_stat = 21;
    if (has_taped_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->taped_location_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceLocationStat homer_location_stat = 22;
    if (has_homer_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->homer_location_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceSimilarity web_top_similar_sources = 23;
    if (has_web_top_similar_sources()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->web_top_similar_sources_);
    }

    // optional .cosmo.pb.SourceData.SourceSimilarity ok_top_similar_groups = 24;
    if (has_ok_top_similar_groups()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ok_top_similar_groups_);
    }

    // optional .cosmo.pb.SourceData.SourceLocationStat hourly_location_stat = 25;
    if (has_hourly_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hourly_location_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceLocationStat daily_location_stat = 26;
    if (has_daily_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->daily_location_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceLocationStat weekly_location_stat = 27;
    if (has_weekly_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weekly_location_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceLocationStat monthly_location_stat = 28;
    if (has_monthly_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->monthly_location_stat_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .cosmo.pb.SourceData.SourcePopularityStat source_new_popularity = 29;
    if (has_source_new_popularity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_new_popularity_);
    }

    // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_v2 = 30;
    if (has_vk_group_event_stat_v2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_group_event_stat_v2_);
    }

    // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week_v2 = 31;
    if (has_vk_group_event_stat_week_v2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_group_event_stat_week_v2_);
    }

    // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_v2 = 32;
    if (has_youtube_group_event_stat_v2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youtube_group_event_stat_v2_);
    }

    // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week_v2 = 33;
    if (has_youtube_group_event_stat_week_v2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youtube_group_event_stat_week_v2_);
    }

    // optional .cosmo.pb.SourceData.SourceLocationStat fast_location_stat = 34;
    if (has_fast_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fast_location_stat_);
    }

    // optional .cosmo.pb.SourceData.SourceGeo source_stat_geo = 35;
    if (has_source_stat_geo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_stat_geo_);
    }

    // optional .cosmo.pb.SourceData.ContentThemes content_themes = 36;
    if (has_content_themes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->content_themes_);
    }

  }
  // optional .cosmo.pb.SourceData.LentaAdminSourceInfo lenta_admin_source_info = 37;
  if (has_lenta_admin_source_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lenta_admin_source_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.SourceData)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SourceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.SourceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.SourceData)
    MergeFrom(*source);
  }
}

void SourceData::MergeFrom(const SourceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.SourceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lda_fea()->::cosmo::pb::SourceData_LdaFea::MergeFrom(from.lda_fea());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_als_fea()->::cosmo::pb::SourceData_AlsFea::MergeFrom(from.als_fea());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ok_info()->::cosmo::pb::SourceData_OkInfo::MergeFrom(from.ok_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_source_info()->::cosmo::pb::SourceData_SourceInfo::MergeFrom(from.source_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_original_info()->::cosmo::pb::SourceData_OriginalInfo::MergeFrom(from.original_info());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_group_period_stats()->::cosmo::pb::SourceData_GroupPeriodStats::MergeFrom(from.group_period_stats());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_news_data()->::cosmo::pb::SourceData_NewsData::MergeFrom(from.news_data());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_source_popularity()->::cosmo::pb::SourceData_SourcePopularityStat::MergeFrom(from.source_popularity());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_lda_fea_2()->::cosmo::pb::SourceData_LdaFea::MergeFrom(from.lda_fea_2());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_als_fea_2()->::cosmo::pb::SourceData_AlsFea::MergeFrom(from.als_fea_2());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_source_fresh_popularity()->::cosmo::pb::SourceData_SourcePopularityStat::MergeFrom(from.source_fresh_popularity());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_ok_group_event_stat()->::cosmo::pb::SourceData_GroupEventStat::MergeFrom(from.ok_group_event_stat());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_vk_group_event_stat()->::cosmo::pb::SourceData_GroupEventStat::MergeFrom(from.vk_group_event_stat());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_vk_group_event_stat_week()->::cosmo::pb::SourceData_GroupEventStat::MergeFrom(from.vk_group_event_stat_week());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_youtube_group_event_stat()->::cosmo::pb::SourceData_GroupEventStat::MergeFrom(from.youtube_group_event_stat());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_youtube_group_event_stat_week()->::cosmo::pb::SourceData_GroupEventStat::MergeFrom(from.youtube_group_event_stat_week());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_taped_location_stat()->::cosmo::pb::SourceData_SourceLocationStat::MergeFrom(from.taped_location_stat());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_homer_location_stat()->::cosmo::pb::SourceData_SourceLocationStat::MergeFrom(from.homer_location_stat());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_web_top_similar_sources()->::cosmo::pb::SourceData_SourceSimilarity::MergeFrom(from.web_top_similar_sources());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_ok_top_similar_groups()->::cosmo::pb::SourceData_SourceSimilarity::MergeFrom(from.ok_top_similar_groups());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_hourly_location_stat()->::cosmo::pb::SourceData_SourceLocationStat::MergeFrom(from.hourly_location_stat());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_daily_location_stat()->::cosmo::pb::SourceData_SourceLocationStat::MergeFrom(from.daily_location_stat());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_weekly_location_stat()->::cosmo::pb::SourceData_SourceLocationStat::MergeFrom(from.weekly_location_stat());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_monthly_location_stat()->::cosmo::pb::SourceData_SourceLocationStat::MergeFrom(from.monthly_location_stat());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_source_new_popularity()->::cosmo::pb::SourceData_SourcePopularityStat::MergeFrom(from.source_new_popularity());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_vk_group_event_stat_v2()->::cosmo::pb::SourceData_GroupEventStat::MergeFrom(from.vk_group_event_stat_v2());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_vk_group_event_stat_week_v2()->::cosmo::pb::SourceData_GroupEventStat::MergeFrom(from.vk_group_event_stat_week_v2());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_youtube_group_event_stat_v2()->::cosmo::pb::SourceData_GroupEventStat::MergeFrom(from.youtube_group_event_stat_v2());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_youtube_group_event_stat_week_v2()->::cosmo::pb::SourceData_GroupEventStat::MergeFrom(from.youtube_group_event_stat_week_v2());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_fast_location_stat()->::cosmo::pb::SourceData_SourceLocationStat::MergeFrom(from.fast_location_stat());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_source_stat_geo()->::cosmo::pb::SourceData_SourceGeo::MergeFrom(from.source_stat_geo());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_content_themes()->::cosmo::pb::SourceData_ContentThemes::MergeFrom(from.content_themes());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lenta_admin_source_info()->::cosmo::pb::SourceData_LentaAdminSourceInfo::MergeFrom(from.lenta_admin_source_info());
    }
    if (cached_has_bits & 0x00000002u) {
      source_id_ = from.source_id_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void SourceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.SourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceData::CopyFrom(const SourceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.SourceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceData::IsInitialized() const {
  if ((_has_bits_[1] & 0x00000002) != 0x00000002) return false;
  if (has_ok_info()) {
    if (!this->ok_info_->IsInitialized()) return false;
  }
  if (has_source_info()) {
    if (!this->source_info_->IsInitialized()) return false;
  }
  if (has_source_popularity()) {
    if (!this->source_popularity_->IsInitialized()) return false;
  }
  if (has_source_fresh_popularity()) {
    if (!this->source_fresh_popularity_->IsInitialized()) return false;
  }
  if (has_ok_group_event_stat()) {
    if (!this->ok_group_event_stat_->IsInitialized()) return false;
  }
  if (has_vk_group_event_stat()) {
    if (!this->vk_group_event_stat_->IsInitialized()) return false;
  }
  if (has_vk_group_event_stat_week()) {
    if (!this->vk_group_event_stat_week_->IsInitialized()) return false;
  }
  if (has_youtube_group_event_stat()) {
    if (!this->youtube_group_event_stat_->IsInitialized()) return false;
  }
  if (has_youtube_group_event_stat_week()) {
    if (!this->youtube_group_event_stat_week_->IsInitialized()) return false;
  }
  if (has_taped_location_stat()) {
    if (!this->taped_location_stat_->IsInitialized()) return false;
  }
  if (has_homer_location_stat()) {
    if (!this->homer_location_stat_->IsInitialized()) return false;
  }
  if (has_web_top_similar_sources()) {
    if (!this->web_top_similar_sources_->IsInitialized()) return false;
  }
  if (has_ok_top_similar_groups()) {
    if (!this->ok_top_similar_groups_->IsInitialized()) return false;
  }
  if (has_hourly_location_stat()) {
    if (!this->hourly_location_stat_->IsInitialized()) return false;
  }
  if (has_daily_location_stat()) {
    if (!this->daily_location_stat_->IsInitialized()) return false;
  }
  if (has_weekly_location_stat()) {
    if (!this->weekly_location_stat_->IsInitialized()) return false;
  }
  if (has_monthly_location_stat()) {
    if (!this->monthly_location_stat_->IsInitialized()) return false;
  }
  if (has_source_new_popularity()) {
    if (!this->source_new_popularity_->IsInitialized()) return false;
  }
  if (has_vk_group_event_stat_v2()) {
    if (!this->vk_group_event_stat_v2_->IsInitialized()) return false;
  }
  if (has_vk_group_event_stat_week_v2()) {
    if (!this->vk_group_event_stat_week_v2_->IsInitialized()) return false;
  }
  if (has_youtube_group_event_stat_v2()) {
    if (!this->youtube_group_event_stat_v2_->IsInitialized()) return false;
  }
  if (has_youtube_group_event_stat_week_v2()) {
    if (!this->youtube_group_event_stat_week_v2_->IsInitialized()) return false;
  }
  if (has_fast_location_stat()) {
    if (!this->fast_location_stat_->IsInitialized()) return false;
  }
  if (has_source_stat_geo()) {
    if (!this->source_stat_geo_->IsInitialized()) return false;
  }
  if (has_content_themes()) {
    if (!this->content_themes_->IsInitialized()) return false;
  }
  return true;
}

void SourceData::Swap(SourceData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SourceData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SourceData::UnsafeArenaSwap(SourceData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SourceData::InternalSwap(SourceData* other) {
  using std::swap;
  swap(lda_fea_, other->lda_fea_);
  swap(als_fea_, other->als_fea_);
  swap(ok_info_, other->ok_info_);
  swap(source_info_, other->source_info_);
  swap(original_info_, other->original_info_);
  swap(group_period_stats_, other->group_period_stats_);
  swap(news_data_, other->news_data_);
  swap(source_popularity_, other->source_popularity_);
  swap(lda_fea_2_, other->lda_fea_2_);
  swap(als_fea_2_, other->als_fea_2_);
  swap(source_fresh_popularity_, other->source_fresh_popularity_);
  swap(ok_group_event_stat_, other->ok_group_event_stat_);
  swap(vk_group_event_stat_, other->vk_group_event_stat_);
  swap(vk_group_event_stat_week_, other->vk_group_event_stat_week_);
  swap(youtube_group_event_stat_, other->youtube_group_event_stat_);
  swap(youtube_group_event_stat_week_, other->youtube_group_event_stat_week_);
  swap(taped_location_stat_, other->taped_location_stat_);
  swap(homer_location_stat_, other->homer_location_stat_);
  swap(web_top_similar_sources_, other->web_top_similar_sources_);
  swap(ok_top_similar_groups_, other->ok_top_similar_groups_);
  swap(hourly_location_stat_, other->hourly_location_stat_);
  swap(daily_location_stat_, other->daily_location_stat_);
  swap(weekly_location_stat_, other->weekly_location_stat_);
  swap(monthly_location_stat_, other->monthly_location_stat_);
  swap(source_new_popularity_, other->source_new_popularity_);
  swap(vk_group_event_stat_v2_, other->vk_group_event_stat_v2_);
  swap(vk_group_event_stat_week_v2_, other->vk_group_event_stat_week_v2_);
  swap(youtube_group_event_stat_v2_, other->youtube_group_event_stat_v2_);
  swap(youtube_group_event_stat_week_v2_, other->youtube_group_event_stat_week_v2_);
  swap(fast_location_stat_, other->fast_location_stat_);
  swap(source_stat_geo_, other->source_stat_geo_);
  swap(content_themes_, other->content_themes_);
  swap(lenta_admin_source_info_, other->lenta_admin_source_info_);
  swap(source_id_, other->source_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SourceData::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SourceData

// required int64 source_id = 1;
bool SourceData::has_source_id() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void SourceData::set_has_source_id() {
  _has_bits_[1] |= 0x00000002u;
}
void SourceData::clear_has_source_id() {
  _has_bits_[1] &= ~0x00000002u;
}
void SourceData::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 SourceData::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_id)
  return source_id_;
}
void SourceData::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.source_id)
}

// optional .cosmo.pb.SourceData.LdaFea lda_fea = 2;
bool SourceData::has_lda_fea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SourceData::set_has_lda_fea() {
  _has_bits_[0] |= 0x00000001u;
}
void SourceData::clear_has_lda_fea() {
  _has_bits_[0] &= ~0x00000001u;
}
void SourceData::clear_lda_fea() {
  if (lda_fea_ != NULL) lda_fea_->::cosmo::pb::SourceData_LdaFea::Clear();
  clear_has_lda_fea();
}
const ::cosmo::pb::SourceData_LdaFea& SourceData::lda_fea() const {
  const ::cosmo::pb::SourceData_LdaFea* p = lda_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.lda_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_LdaFea*>(
      &::cosmo::pb::_SourceData_LdaFea_default_instance_);
}
::cosmo::pb::SourceData_LdaFea* SourceData::mutable_lda_fea() {
  set_has_lda_fea();
  if (lda_fea_ == NULL) {
    _slow_mutable_lda_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.lda_fea)
  return lda_fea_;
}
::cosmo::pb::SourceData_LdaFea* SourceData::release_lda_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.lda_fea)
  clear_has_lda_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lda_fea();
  } else {
    ::cosmo::pb::SourceData_LdaFea* temp = lda_fea_;
    lda_fea_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_lda_fea(::cosmo::pb::SourceData_LdaFea* lda_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lda_fea_;
  }
  if (lda_fea != NULL) {
    _slow_set_allocated_lda_fea(message_arena, &lda_fea);
  }
  lda_fea_ = lda_fea;
  if (lda_fea) {
    set_has_lda_fea();
  } else {
    clear_has_lda_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.lda_fea)
}

// optional .cosmo.pb.SourceData.AlsFea als_fea = 3;
bool SourceData::has_als_fea() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SourceData::set_has_als_fea() {
  _has_bits_[0] |= 0x00000002u;
}
void SourceData::clear_has_als_fea() {
  _has_bits_[0] &= ~0x00000002u;
}
void SourceData::clear_als_fea() {
  if (als_fea_ != NULL) als_fea_->::cosmo::pb::SourceData_AlsFea::Clear();
  clear_has_als_fea();
}
const ::cosmo::pb::SourceData_AlsFea& SourceData::als_fea() const {
  const ::cosmo::pb::SourceData_AlsFea* p = als_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.als_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_AlsFea*>(
      &::cosmo::pb::_SourceData_AlsFea_default_instance_);
}
::cosmo::pb::SourceData_AlsFea* SourceData::mutable_als_fea() {
  set_has_als_fea();
  if (als_fea_ == NULL) {
    _slow_mutable_als_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.als_fea)
  return als_fea_;
}
::cosmo::pb::SourceData_AlsFea* SourceData::release_als_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.als_fea)
  clear_has_als_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_fea();
  } else {
    ::cosmo::pb::SourceData_AlsFea* temp = als_fea_;
    als_fea_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_als_fea(::cosmo::pb::SourceData_AlsFea* als_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_fea_;
  }
  if (als_fea != NULL) {
    _slow_set_allocated_als_fea(message_arena, &als_fea);
  }
  als_fea_ = als_fea;
  if (als_fea) {
    set_has_als_fea();
  } else {
    clear_has_als_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.als_fea)
}

// optional .cosmo.pb.SourceData.OkInfo ok_info = 6;
bool SourceData::has_ok_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SourceData::set_has_ok_info() {
  _has_bits_[0] |= 0x00000004u;
}
void SourceData::clear_has_ok_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void SourceData::clear_ok_info() {
  if (ok_info_ != NULL) ok_info_->::cosmo::pb::SourceData_OkInfo::Clear();
  clear_has_ok_info();
}
const ::cosmo::pb::SourceData_OkInfo& SourceData::ok_info() const {
  const ::cosmo::pb::SourceData_OkInfo* p = ok_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ok_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_OkInfo*>(
      &::cosmo::pb::_SourceData_OkInfo_default_instance_);
}
::cosmo::pb::SourceData_OkInfo* SourceData::mutable_ok_info() {
  set_has_ok_info();
  if (ok_info_ == NULL) {
    _slow_mutable_ok_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.ok_info)
  return ok_info_;
}
::cosmo::pb::SourceData_OkInfo* SourceData::release_ok_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.ok_info)
  clear_has_ok_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_info();
  } else {
    ::cosmo::pb::SourceData_OkInfo* temp = ok_info_;
    ok_info_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_ok_info(::cosmo::pb::SourceData_OkInfo* ok_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_info_;
  }
  if (ok_info != NULL) {
    _slow_set_allocated_ok_info(message_arena, &ok_info);
  }
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.ok_info)
}

// optional .cosmo.pb.SourceData.SourceInfo source_info = 7;
bool SourceData::has_source_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SourceData::set_has_source_info() {
  _has_bits_[0] |= 0x00000008u;
}
void SourceData::clear_has_source_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void SourceData::clear_source_info() {
  if (source_info_ != NULL) source_info_->::cosmo::pb::SourceData_SourceInfo::Clear();
  clear_has_source_info();
}
const ::cosmo::pb::SourceData_SourceInfo& SourceData::source_info() const {
  const ::cosmo::pb::SourceData_SourceInfo* p = source_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceInfo*>(
      &::cosmo::pb::_SourceData_SourceInfo_default_instance_);
}
::cosmo::pb::SourceData_SourceInfo* SourceData::mutable_source_info() {
  set_has_source_info();
  if (source_info_ == NULL) {
    _slow_mutable_source_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.source_info)
  return source_info_;
}
::cosmo::pb::SourceData_SourceInfo* SourceData::release_source_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.source_info)
  clear_has_source_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_info();
  } else {
    ::cosmo::pb::SourceData_SourceInfo* temp = source_info_;
    source_info_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_source_info(::cosmo::pb::SourceData_SourceInfo* source_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_info_;
  }
  if (source_info != NULL) {
    _slow_set_allocated_source_info(message_arena, &source_info);
  }
  source_info_ = source_info;
  if (source_info) {
    set_has_source_info();
  } else {
    clear_has_source_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.source_info)
}

// optional .cosmo.pb.SourceData.OriginalInfo original_info = 8;
bool SourceData::has_original_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SourceData::set_has_original_info() {
  _has_bits_[0] |= 0x00000010u;
}
void SourceData::clear_has_original_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void SourceData::clear_original_info() {
  if (original_info_ != NULL) original_info_->::cosmo::pb::SourceData_OriginalInfo::Clear();
  clear_has_original_info();
}
const ::cosmo::pb::SourceData_OriginalInfo& SourceData::original_info() const {
  const ::cosmo::pb::SourceData_OriginalInfo* p = original_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.original_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_OriginalInfo*>(
      &::cosmo::pb::_SourceData_OriginalInfo_default_instance_);
}
::cosmo::pb::SourceData_OriginalInfo* SourceData::mutable_original_info() {
  set_has_original_info();
  if (original_info_ == NULL) {
    _slow_mutable_original_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.original_info)
  return original_info_;
}
::cosmo::pb::SourceData_OriginalInfo* SourceData::release_original_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.original_info)
  clear_has_original_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_info();
  } else {
    ::cosmo::pb::SourceData_OriginalInfo* temp = original_info_;
    original_info_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_original_info(::cosmo::pb::SourceData_OriginalInfo* original_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_info_;
  }
  if (original_info != NULL) {
    _slow_set_allocated_original_info(message_arena, &original_info);
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.original_info)
}

// optional .cosmo.pb.SourceData.GroupPeriodStats group_period_stats = 9;
bool SourceData::has_group_period_stats() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SourceData::set_has_group_period_stats() {
  _has_bits_[0] |= 0x00000020u;
}
void SourceData::clear_has_group_period_stats() {
  _has_bits_[0] &= ~0x00000020u;
}
void SourceData::clear_group_period_stats() {
  if (group_period_stats_ != NULL) group_period_stats_->::cosmo::pb::SourceData_GroupPeriodStats::Clear();
  clear_has_group_period_stats();
}
const ::cosmo::pb::SourceData_GroupPeriodStats& SourceData::group_period_stats() const {
  const ::cosmo::pb::SourceData_GroupPeriodStats* p = group_period_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.group_period_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupPeriodStats*>(
      &::cosmo::pb::_SourceData_GroupPeriodStats_default_instance_);
}
::cosmo::pb::SourceData_GroupPeriodStats* SourceData::mutable_group_period_stats() {
  set_has_group_period_stats();
  if (group_period_stats_ == NULL) {
    _slow_mutable_group_period_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.group_period_stats)
  return group_period_stats_;
}
::cosmo::pb::SourceData_GroupPeriodStats* SourceData::release_group_period_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.group_period_stats)
  clear_has_group_period_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_group_period_stats();
  } else {
    ::cosmo::pb::SourceData_GroupPeriodStats* temp = group_period_stats_;
    group_period_stats_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_group_period_stats(::cosmo::pb::SourceData_GroupPeriodStats* group_period_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete group_period_stats_;
  }
  if (group_period_stats != NULL) {
    _slow_set_allocated_group_period_stats(message_arena, &group_period_stats);
  }
  group_period_stats_ = group_period_stats;
  if (group_period_stats) {
    set_has_group_period_stats();
  } else {
    clear_has_group_period_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.group_period_stats)
}

// optional .cosmo.pb.SourceData.NewsData news_data = 10;
bool SourceData::has_news_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SourceData::set_has_news_data() {
  _has_bits_[0] |= 0x00000040u;
}
void SourceData::clear_has_news_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void SourceData::clear_news_data() {
  if (news_data_ != NULL) news_data_->::cosmo::pb::SourceData_NewsData::Clear();
  clear_has_news_data();
}
const ::cosmo::pb::SourceData_NewsData& SourceData::news_data() const {
  const ::cosmo::pb::SourceData_NewsData* p = news_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.news_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_NewsData*>(
      &::cosmo::pb::_SourceData_NewsData_default_instance_);
}
::cosmo::pb::SourceData_NewsData* SourceData::mutable_news_data() {
  set_has_news_data();
  if (news_data_ == NULL) {
    _slow_mutable_news_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.news_data)
  return news_data_;
}
::cosmo::pb::SourceData_NewsData* SourceData::release_news_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.news_data)
  clear_has_news_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_news_data();
  } else {
    ::cosmo::pb::SourceData_NewsData* temp = news_data_;
    news_data_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_news_data(::cosmo::pb::SourceData_NewsData* news_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete news_data_;
  }
  if (news_data != NULL) {
    _slow_set_allocated_news_data(message_arena, &news_data);
  }
  news_data_ = news_data;
  if (news_data) {
    set_has_news_data();
  } else {
    clear_has_news_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.news_data)
}

// optional .cosmo.pb.SourceData.SourcePopularityStat source_popularity = 11;
bool SourceData::has_source_popularity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SourceData::set_has_source_popularity() {
  _has_bits_[0] |= 0x00000080u;
}
void SourceData::clear_has_source_popularity() {
  _has_bits_[0] &= ~0x00000080u;
}
void SourceData::clear_source_popularity() {
  if (source_popularity_ != NULL) source_popularity_->::cosmo::pb::SourceData_SourcePopularityStat::Clear();
  clear_has_source_popularity();
}
const ::cosmo::pb::SourceData_SourcePopularityStat& SourceData::source_popularity() const {
  const ::cosmo::pb::SourceData_SourcePopularityStat* p = source_popularity_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_popularity)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourcePopularityStat*>(
      &::cosmo::pb::_SourceData_SourcePopularityStat_default_instance_);
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::mutable_source_popularity() {
  set_has_source_popularity();
  if (source_popularity_ == NULL) {
    _slow_mutable_source_popularity();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.source_popularity)
  return source_popularity_;
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::release_source_popularity() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.source_popularity)
  clear_has_source_popularity();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_popularity();
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat* temp = source_popularity_;
    source_popularity_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_source_popularity(::cosmo::pb::SourceData_SourcePopularityStat* source_popularity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_popularity_;
  }
  if (source_popularity != NULL) {
    _slow_set_allocated_source_popularity(message_arena, &source_popularity);
  }
  source_popularity_ = source_popularity;
  if (source_popularity) {
    set_has_source_popularity();
  } else {
    clear_has_source_popularity();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.source_popularity)
}

// optional .cosmo.pb.SourceData.LdaFea lda_fea_2 = 12;
bool SourceData::has_lda_fea_2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SourceData::set_has_lda_fea_2() {
  _has_bits_[0] |= 0x00000100u;
}
void SourceData::clear_has_lda_fea_2() {
  _has_bits_[0] &= ~0x00000100u;
}
void SourceData::clear_lda_fea_2() {
  if (lda_fea_2_ != NULL) lda_fea_2_->::cosmo::pb::SourceData_LdaFea::Clear();
  clear_has_lda_fea_2();
}
const ::cosmo::pb::SourceData_LdaFea& SourceData::lda_fea_2() const {
  const ::cosmo::pb::SourceData_LdaFea* p = lda_fea_2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.lda_fea_2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_LdaFea*>(
      &::cosmo::pb::_SourceData_LdaFea_default_instance_);
}
::cosmo::pb::SourceData_LdaFea* SourceData::mutable_lda_fea_2() {
  set_has_lda_fea_2();
  if (lda_fea_2_ == NULL) {
    _slow_mutable_lda_fea_2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.lda_fea_2)
  return lda_fea_2_;
}
::cosmo::pb::SourceData_LdaFea* SourceData::release_lda_fea_2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.lda_fea_2)
  clear_has_lda_fea_2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lda_fea_2();
  } else {
    ::cosmo::pb::SourceData_LdaFea* temp = lda_fea_2_;
    lda_fea_2_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_lda_fea_2(::cosmo::pb::SourceData_LdaFea* lda_fea_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lda_fea_2_;
  }
  if (lda_fea_2 != NULL) {
    _slow_set_allocated_lda_fea_2(message_arena, &lda_fea_2);
  }
  lda_fea_2_ = lda_fea_2;
  if (lda_fea_2) {
    set_has_lda_fea_2();
  } else {
    clear_has_lda_fea_2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.lda_fea_2)
}

// optional .cosmo.pb.SourceData.AlsFea als_fea_2 = 13;
bool SourceData::has_als_fea_2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SourceData::set_has_als_fea_2() {
  _has_bits_[0] |= 0x00000200u;
}
void SourceData::clear_has_als_fea_2() {
  _has_bits_[0] &= ~0x00000200u;
}
void SourceData::clear_als_fea_2() {
  if (als_fea_2_ != NULL) als_fea_2_->::cosmo::pb::SourceData_AlsFea::Clear();
  clear_has_als_fea_2();
}
const ::cosmo::pb::SourceData_AlsFea& SourceData::als_fea_2() const {
  const ::cosmo::pb::SourceData_AlsFea* p = als_fea_2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.als_fea_2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_AlsFea*>(
      &::cosmo::pb::_SourceData_AlsFea_default_instance_);
}
::cosmo::pb::SourceData_AlsFea* SourceData::mutable_als_fea_2() {
  set_has_als_fea_2();
  if (als_fea_2_ == NULL) {
    _slow_mutable_als_fea_2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.als_fea_2)
  return als_fea_2_;
}
::cosmo::pb::SourceData_AlsFea* SourceData::release_als_fea_2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.als_fea_2)
  clear_has_als_fea_2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_fea_2();
  } else {
    ::cosmo::pb::SourceData_AlsFea* temp = als_fea_2_;
    als_fea_2_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_als_fea_2(::cosmo::pb::SourceData_AlsFea* als_fea_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_fea_2_;
  }
  if (als_fea_2 != NULL) {
    _slow_set_allocated_als_fea_2(message_arena, &als_fea_2);
  }
  als_fea_2_ = als_fea_2;
  if (als_fea_2) {
    set_has_als_fea_2();
  } else {
    clear_has_als_fea_2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.als_fea_2)
}

// optional .cosmo.pb.SourceData.SourcePopularityStat source_fresh_popularity = 14;
bool SourceData::has_source_fresh_popularity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SourceData::set_has_source_fresh_popularity() {
  _has_bits_[0] |= 0x00000400u;
}
void SourceData::clear_has_source_fresh_popularity() {
  _has_bits_[0] &= ~0x00000400u;
}
void SourceData::clear_source_fresh_popularity() {
  if (source_fresh_popularity_ != NULL) source_fresh_popularity_->::cosmo::pb::SourceData_SourcePopularityStat::Clear();
  clear_has_source_fresh_popularity();
}
const ::cosmo::pb::SourceData_SourcePopularityStat& SourceData::source_fresh_popularity() const {
  const ::cosmo::pb::SourceData_SourcePopularityStat* p = source_fresh_popularity_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_fresh_popularity)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourcePopularityStat*>(
      &::cosmo::pb::_SourceData_SourcePopularityStat_default_instance_);
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::mutable_source_fresh_popularity() {
  set_has_source_fresh_popularity();
  if (source_fresh_popularity_ == NULL) {
    _slow_mutable_source_fresh_popularity();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.source_fresh_popularity)
  return source_fresh_popularity_;
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::release_source_fresh_popularity() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.source_fresh_popularity)
  clear_has_source_fresh_popularity();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_fresh_popularity();
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat* temp = source_fresh_popularity_;
    source_fresh_popularity_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_source_fresh_popularity(::cosmo::pb::SourceData_SourcePopularityStat* source_fresh_popularity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_fresh_popularity_;
  }
  if (source_fresh_popularity != NULL) {
    _slow_set_allocated_source_fresh_popularity(message_arena, &source_fresh_popularity);
  }
  source_fresh_popularity_ = source_fresh_popularity;
  if (source_fresh_popularity) {
    set_has_source_fresh_popularity();
  } else {
    clear_has_source_fresh_popularity();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.source_fresh_popularity)
}

// optional .cosmo.pb.SourceData.GroupEventStat ok_group_event_stat = 15;
bool SourceData::has_ok_group_event_stat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SourceData::set_has_ok_group_event_stat() {
  _has_bits_[0] |= 0x00000800u;
}
void SourceData::clear_has_ok_group_event_stat() {
  _has_bits_[0] &= ~0x00000800u;
}
void SourceData::clear_ok_group_event_stat() {
  if (ok_group_event_stat_ != NULL) ok_group_event_stat_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_ok_group_event_stat();
}
const ::cosmo::pb::SourceData_GroupEventStat& SourceData::ok_group_event_stat() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = ok_group_event_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ok_group_event_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_ok_group_event_stat() {
  set_has_ok_group_event_stat();
  if (ok_group_event_stat_ == NULL) {
    _slow_mutable_ok_group_event_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.ok_group_event_stat)
  return ok_group_event_stat_;
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::release_ok_group_event_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.ok_group_event_stat)
  clear_has_ok_group_event_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_group_event_stat();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = ok_group_event_stat_;
    ok_group_event_stat_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_ok_group_event_stat(::cosmo::pb::SourceData_GroupEventStat* ok_group_event_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_group_event_stat_;
  }
  if (ok_group_event_stat != NULL) {
    _slow_set_allocated_ok_group_event_stat(message_arena, &ok_group_event_stat);
  }
  ok_group_event_stat_ = ok_group_event_stat;
  if (ok_group_event_stat) {
    set_has_ok_group_event_stat();
  } else {
    clear_has_ok_group_event_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.ok_group_event_stat)
}

// optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat = 16;
bool SourceData::has_vk_group_event_stat() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SourceData::set_has_vk_group_event_stat() {
  _has_bits_[0] |= 0x00001000u;
}
void SourceData::clear_has_vk_group_event_stat() {
  _has_bits_[0] &= ~0x00001000u;
}
void SourceData::clear_vk_group_event_stat() {
  if (vk_group_event_stat_ != NULL) vk_group_event_stat_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_vk_group_event_stat();
}
const ::cosmo::pb::SourceData_GroupEventStat& SourceData::vk_group_event_stat() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = vk_group_event_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.vk_group_event_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_vk_group_event_stat() {
  set_has_vk_group_event_stat();
  if (vk_group_event_stat_ == NULL) {
    _slow_mutable_vk_group_event_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.vk_group_event_stat)
  return vk_group_event_stat_;
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::release_vk_group_event_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.vk_group_event_stat)
  clear_has_vk_group_event_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_group_event_stat();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_;
    vk_group_event_stat_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_vk_group_event_stat(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_group_event_stat_;
  }
  if (vk_group_event_stat != NULL) {
    _slow_set_allocated_vk_group_event_stat(message_arena, &vk_group_event_stat);
  }
  vk_group_event_stat_ = vk_group_event_stat;
  if (vk_group_event_stat) {
    set_has_vk_group_event_stat();
  } else {
    clear_has_vk_group_event_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.vk_group_event_stat)
}

// optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week = 17;
bool SourceData::has_vk_group_event_stat_week() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SourceData::set_has_vk_group_event_stat_week() {
  _has_bits_[0] |= 0x00002000u;
}
void SourceData::clear_has_vk_group_event_stat_week() {
  _has_bits_[0] &= ~0x00002000u;
}
void SourceData::clear_vk_group_event_stat_week() {
  if (vk_group_event_stat_week_ != NULL) vk_group_event_stat_week_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_vk_group_event_stat_week();
}
const ::cosmo::pb::SourceData_GroupEventStat& SourceData::vk_group_event_stat_week() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = vk_group_event_stat_week_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.vk_group_event_stat_week)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_vk_group_event_stat_week() {
  set_has_vk_group_event_stat_week();
  if (vk_group_event_stat_week_ == NULL) {
    _slow_mutable_vk_group_event_stat_week();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.vk_group_event_stat_week)
  return vk_group_event_stat_week_;
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::release_vk_group_event_stat_week() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.vk_group_event_stat_week)
  clear_has_vk_group_event_stat_week();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_group_event_stat_week();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_week_;
    vk_group_event_stat_week_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_vk_group_event_stat_week(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_group_event_stat_week_;
  }
  if (vk_group_event_stat_week != NULL) {
    _slow_set_allocated_vk_group_event_stat_week(message_arena, &vk_group_event_stat_week);
  }
  vk_group_event_stat_week_ = vk_group_event_stat_week;
  if (vk_group_event_stat_week) {
    set_has_vk_group_event_stat_week();
  } else {
    clear_has_vk_group_event_stat_week();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.vk_group_event_stat_week)
}

// optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat = 18;
bool SourceData::has_youtube_group_event_stat() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SourceData::set_has_youtube_group_event_stat() {
  _has_bits_[0] |= 0x00004000u;
}
void SourceData::clear_has_youtube_group_event_stat() {
  _has_bits_[0] &= ~0x00004000u;
}
void SourceData::clear_youtube_group_event_stat() {
  if (youtube_group_event_stat_ != NULL) youtube_group_event_stat_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_youtube_group_event_stat();
}
const ::cosmo::pb::SourceData_GroupEventStat& SourceData::youtube_group_event_stat() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = youtube_group_event_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.youtube_group_event_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_youtube_group_event_stat() {
  set_has_youtube_group_event_stat();
  if (youtube_group_event_stat_ == NULL) {
    _slow_mutable_youtube_group_event_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.youtube_group_event_stat)
  return youtube_group_event_stat_;
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::release_youtube_group_event_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.youtube_group_event_stat)
  clear_has_youtube_group_event_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_group_event_stat();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_;
    youtube_group_event_stat_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_youtube_group_event_stat(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_group_event_stat_;
  }
  if (youtube_group_event_stat != NULL) {
    _slow_set_allocated_youtube_group_event_stat(message_arena, &youtube_group_event_stat);
  }
  youtube_group_event_stat_ = youtube_group_event_stat;
  if (youtube_group_event_stat) {
    set_has_youtube_group_event_stat();
  } else {
    clear_has_youtube_group_event_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat)
}

// optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week = 19;
bool SourceData::has_youtube_group_event_stat_week() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SourceData::set_has_youtube_group_event_stat_week() {
  _has_bits_[0] |= 0x00008000u;
}
void SourceData::clear_has_youtube_group_event_stat_week() {
  _has_bits_[0] &= ~0x00008000u;
}
void SourceData::clear_youtube_group_event_stat_week() {
  if (youtube_group_event_stat_week_ != NULL) youtube_group_event_stat_week_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_youtube_group_event_stat_week();
}
const ::cosmo::pb::SourceData_GroupEventStat& SourceData::youtube_group_event_stat_week() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = youtube_group_event_stat_week_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.youtube_group_event_stat_week)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_youtube_group_event_stat_week() {
  set_has_youtube_group_event_stat_week();
  if (youtube_group_event_stat_week_ == NULL) {
    _slow_mutable_youtube_group_event_stat_week();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.youtube_group_event_stat_week)
  return youtube_group_event_stat_week_;
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::release_youtube_group_event_stat_week() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.youtube_group_event_stat_week)
  clear_has_youtube_group_event_stat_week();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_group_event_stat_week();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_week_;
    youtube_group_event_stat_week_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_youtube_group_event_stat_week(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_group_event_stat_week_;
  }
  if (youtube_group_event_stat_week != NULL) {
    _slow_set_allocated_youtube_group_event_stat_week(message_arena, &youtube_group_event_stat_week);
  }
  youtube_group_event_stat_week_ = youtube_group_event_stat_week;
  if (youtube_group_event_stat_week) {
    set_has_youtube_group_event_stat_week();
  } else {
    clear_has_youtube_group_event_stat_week();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat_week)
}

// optional .cosmo.pb.SourceData.SourceLocationStat taped_location_stat = 21;
bool SourceData::has_taped_location_stat() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SourceData::set_has_taped_location_stat() {
  _has_bits_[0] |= 0x00010000u;
}
void SourceData::clear_has_taped_location_stat() {
  _has_bits_[0] &= ~0x00010000u;
}
void SourceData::clear_taped_location_stat() {
  if (taped_location_stat_ != NULL) taped_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_taped_location_stat();
}
const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::taped_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = taped_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.taped_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_taped_location_stat() {
  set_has_taped_location_stat();
  if (taped_location_stat_ == NULL) {
    _slow_mutable_taped_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.taped_location_stat)
  return taped_location_stat_;
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_taped_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.taped_location_stat)
  clear_has_taped_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_taped_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = taped_location_stat_;
    taped_location_stat_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_taped_location_stat(::cosmo::pb::SourceData_SourceLocationStat* taped_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete taped_location_stat_;
  }
  if (taped_location_stat != NULL) {
    _slow_set_allocated_taped_location_stat(message_arena, &taped_location_stat);
  }
  taped_location_stat_ = taped_location_stat;
  if (taped_location_stat) {
    set_has_taped_location_stat();
  } else {
    clear_has_taped_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.taped_location_stat)
}

// optional .cosmo.pb.SourceData.SourceLocationStat homer_location_stat = 22;
bool SourceData::has_homer_location_stat() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SourceData::set_has_homer_location_stat() {
  _has_bits_[0] |= 0x00020000u;
}
void SourceData::clear_has_homer_location_stat() {
  _has_bits_[0] &= ~0x00020000u;
}
void SourceData::clear_homer_location_stat() {
  if (homer_location_stat_ != NULL) homer_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_homer_location_stat();
}
const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::homer_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = homer_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.homer_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_homer_location_stat() {
  set_has_homer_location_stat();
  if (homer_location_stat_ == NULL) {
    _slow_mutable_homer_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.homer_location_stat)
  return homer_location_stat_;
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_homer_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.homer_location_stat)
  clear_has_homer_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_homer_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = homer_location_stat_;
    homer_location_stat_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_homer_location_stat(::cosmo::pb::SourceData_SourceLocationStat* homer_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete homer_location_stat_;
  }
  if (homer_location_stat != NULL) {
    _slow_set_allocated_homer_location_stat(message_arena, &homer_location_stat);
  }
  homer_location_stat_ = homer_location_stat;
  if (homer_location_stat) {
    set_has_homer_location_stat();
  } else {
    clear_has_homer_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.homer_location_stat)
}

// optional .cosmo.pb.SourceData.SourceSimilarity web_top_similar_sources = 23;
bool SourceData::has_web_top_similar_sources() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SourceData::set_has_web_top_similar_sources() {
  _has_bits_[0] |= 0x00040000u;
}
void SourceData::clear_has_web_top_similar_sources() {
  _has_bits_[0] &= ~0x00040000u;
}
void SourceData::clear_web_top_similar_sources() {
  if (web_top_similar_sources_ != NULL) web_top_similar_sources_->::cosmo::pb::SourceData_SourceSimilarity::Clear();
  clear_has_web_top_similar_sources();
}
const ::cosmo::pb::SourceData_SourceSimilarity& SourceData::web_top_similar_sources() const {
  const ::cosmo::pb::SourceData_SourceSimilarity* p = web_top_similar_sources_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.web_top_similar_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceSimilarity*>(
      &::cosmo::pb::_SourceData_SourceSimilarity_default_instance_);
}
::cosmo::pb::SourceData_SourceSimilarity* SourceData::mutable_web_top_similar_sources() {
  set_has_web_top_similar_sources();
  if (web_top_similar_sources_ == NULL) {
    _slow_mutable_web_top_similar_sources();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.web_top_similar_sources)
  return web_top_similar_sources_;
}
::cosmo::pb::SourceData_SourceSimilarity* SourceData::release_web_top_similar_sources() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.web_top_similar_sources)
  clear_has_web_top_similar_sources();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_web_top_similar_sources();
  } else {
    ::cosmo::pb::SourceData_SourceSimilarity* temp = web_top_similar_sources_;
    web_top_similar_sources_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_web_top_similar_sources(::cosmo::pb::SourceData_SourceSimilarity* web_top_similar_sources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete web_top_similar_sources_;
  }
  if (web_top_similar_sources != NULL) {
    _slow_set_allocated_web_top_similar_sources(message_arena, &web_top_similar_sources);
  }
  web_top_similar_sources_ = web_top_similar_sources;
  if (web_top_similar_sources) {
    set_has_web_top_similar_sources();
  } else {
    clear_has_web_top_similar_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.web_top_similar_sources)
}

// optional .cosmo.pb.SourceData.SourceSimilarity ok_top_similar_groups = 24;
bool SourceData::has_ok_top_similar_groups() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SourceData::set_has_ok_top_similar_groups() {
  _has_bits_[0] |= 0x00080000u;
}
void SourceData::clear_has_ok_top_similar_groups() {
  _has_bits_[0] &= ~0x00080000u;
}
void SourceData::clear_ok_top_similar_groups() {
  if (ok_top_similar_groups_ != NULL) ok_top_similar_groups_->::cosmo::pb::SourceData_SourceSimilarity::Clear();
  clear_has_ok_top_similar_groups();
}
const ::cosmo::pb::SourceData_SourceSimilarity& SourceData::ok_top_similar_groups() const {
  const ::cosmo::pb::SourceData_SourceSimilarity* p = ok_top_similar_groups_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ok_top_similar_groups)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceSimilarity*>(
      &::cosmo::pb::_SourceData_SourceSimilarity_default_instance_);
}
::cosmo::pb::SourceData_SourceSimilarity* SourceData::mutable_ok_top_similar_groups() {
  set_has_ok_top_similar_groups();
  if (ok_top_similar_groups_ == NULL) {
    _slow_mutable_ok_top_similar_groups();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.ok_top_similar_groups)
  return ok_top_similar_groups_;
}
::cosmo::pb::SourceData_SourceSimilarity* SourceData::release_ok_top_similar_groups() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.ok_top_similar_groups)
  clear_has_ok_top_similar_groups();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_top_similar_groups();
  } else {
    ::cosmo::pb::SourceData_SourceSimilarity* temp = ok_top_similar_groups_;
    ok_top_similar_groups_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_ok_top_similar_groups(::cosmo::pb::SourceData_SourceSimilarity* ok_top_similar_groups) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_top_similar_groups_;
  }
  if (ok_top_similar_groups != NULL) {
    _slow_set_allocated_ok_top_similar_groups(message_arena, &ok_top_similar_groups);
  }
  ok_top_similar_groups_ = ok_top_similar_groups;
  if (ok_top_similar_groups) {
    set_has_ok_top_similar_groups();
  } else {
    clear_has_ok_top_similar_groups();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.ok_top_similar_groups)
}

// optional .cosmo.pb.SourceData.SourceLocationStat hourly_location_stat = 25;
bool SourceData::has_hourly_location_stat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SourceData::set_has_hourly_location_stat() {
  _has_bits_[0] |= 0x00100000u;
}
void SourceData::clear_has_hourly_location_stat() {
  _has_bits_[0] &= ~0x00100000u;
}
void SourceData::clear_hourly_location_stat() {
  if (hourly_location_stat_ != NULL) hourly_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_hourly_location_stat();
}
const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::hourly_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = hourly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.hourly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_hourly_location_stat() {
  set_has_hourly_location_stat();
  if (hourly_location_stat_ == NULL) {
    _slow_mutable_hourly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.hourly_location_stat)
  return hourly_location_stat_;
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_hourly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.hourly_location_stat)
  clear_has_hourly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_hourly_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = hourly_location_stat_;
    hourly_location_stat_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_hourly_location_stat(::cosmo::pb::SourceData_SourceLocationStat* hourly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hourly_location_stat_;
  }
  if (hourly_location_stat != NULL) {
    _slow_set_allocated_hourly_location_stat(message_arena, &hourly_location_stat);
  }
  hourly_location_stat_ = hourly_location_stat;
  if (hourly_location_stat) {
    set_has_hourly_location_stat();
  } else {
    clear_has_hourly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.hourly_location_stat)
}

// optional .cosmo.pb.SourceData.SourceLocationStat daily_location_stat = 26;
bool SourceData::has_daily_location_stat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SourceData::set_has_daily_location_stat() {
  _has_bits_[0] |= 0x00200000u;
}
void SourceData::clear_has_daily_location_stat() {
  _has_bits_[0] &= ~0x00200000u;
}
void SourceData::clear_daily_location_stat() {
  if (daily_location_stat_ != NULL) daily_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_daily_location_stat();
}
const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::daily_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = daily_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.daily_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_daily_location_stat() {
  set_has_daily_location_stat();
  if (daily_location_stat_ == NULL) {
    _slow_mutable_daily_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.daily_location_stat)
  return daily_location_stat_;
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_daily_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.daily_location_stat)
  clear_has_daily_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_daily_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = daily_location_stat_;
    daily_location_stat_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_daily_location_stat(::cosmo::pb::SourceData_SourceLocationStat* daily_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete daily_location_stat_;
  }
  if (daily_location_stat != NULL) {
    _slow_set_allocated_daily_location_stat(message_arena, &daily_location_stat);
  }
  daily_location_stat_ = daily_location_stat;
  if (daily_location_stat) {
    set_has_daily_location_stat();
  } else {
    clear_has_daily_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.daily_location_stat)
}

// optional .cosmo.pb.SourceData.SourceLocationStat weekly_location_stat = 27;
bool SourceData::has_weekly_location_stat() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SourceData::set_has_weekly_location_stat() {
  _has_bits_[0] |= 0x00400000u;
}
void SourceData::clear_has_weekly_location_stat() {
  _has_bits_[0] &= ~0x00400000u;
}
void SourceData::clear_weekly_location_stat() {
  if (weekly_location_stat_ != NULL) weekly_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_weekly_location_stat();
}
const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::weekly_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = weekly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.weekly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_weekly_location_stat() {
  set_has_weekly_location_stat();
  if (weekly_location_stat_ == NULL) {
    _slow_mutable_weekly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.weekly_location_stat)
  return weekly_location_stat_;
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_weekly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.weekly_location_stat)
  clear_has_weekly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_weekly_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = weekly_location_stat_;
    weekly_location_stat_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_weekly_location_stat(::cosmo::pb::SourceData_SourceLocationStat* weekly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weekly_location_stat_;
  }
  if (weekly_location_stat != NULL) {
    _slow_set_allocated_weekly_location_stat(message_arena, &weekly_location_stat);
  }
  weekly_location_stat_ = weekly_location_stat;
  if (weekly_location_stat) {
    set_has_weekly_location_stat();
  } else {
    clear_has_weekly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.weekly_location_stat)
}

// optional .cosmo.pb.SourceData.SourceLocationStat monthly_location_stat = 28;
bool SourceData::has_monthly_location_stat() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SourceData::set_has_monthly_location_stat() {
  _has_bits_[0] |= 0x00800000u;
}
void SourceData::clear_has_monthly_location_stat() {
  _has_bits_[0] &= ~0x00800000u;
}
void SourceData::clear_monthly_location_stat() {
  if (monthly_location_stat_ != NULL) monthly_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_monthly_location_stat();
}
const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::monthly_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = monthly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.monthly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_monthly_location_stat() {
  set_has_monthly_location_stat();
  if (monthly_location_stat_ == NULL) {
    _slow_mutable_monthly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.monthly_location_stat)
  return monthly_location_stat_;
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_monthly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.monthly_location_stat)
  clear_has_monthly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_monthly_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = monthly_location_stat_;
    monthly_location_stat_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_monthly_location_stat(::cosmo::pb::SourceData_SourceLocationStat* monthly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete monthly_location_stat_;
  }
  if (monthly_location_stat != NULL) {
    _slow_set_allocated_monthly_location_stat(message_arena, &monthly_location_stat);
  }
  monthly_location_stat_ = monthly_location_stat;
  if (monthly_location_stat) {
    set_has_monthly_location_stat();
  } else {
    clear_has_monthly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.monthly_location_stat)
}

// optional .cosmo.pb.SourceData.SourcePopularityStat source_new_popularity = 29;
bool SourceData::has_source_new_popularity() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SourceData::set_has_source_new_popularity() {
  _has_bits_[0] |= 0x01000000u;
}
void SourceData::clear_has_source_new_popularity() {
  _has_bits_[0] &= ~0x01000000u;
}
void SourceData::clear_source_new_popularity() {
  if (source_new_popularity_ != NULL) source_new_popularity_->::cosmo::pb::SourceData_SourcePopularityStat::Clear();
  clear_has_source_new_popularity();
}
const ::cosmo::pb::SourceData_SourcePopularityStat& SourceData::source_new_popularity() const {
  const ::cosmo::pb::SourceData_SourcePopularityStat* p = source_new_popularity_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_new_popularity)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourcePopularityStat*>(
      &::cosmo::pb::_SourceData_SourcePopularityStat_default_instance_);
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::mutable_source_new_popularity() {
  set_has_source_new_popularity();
  if (source_new_popularity_ == NULL) {
    _slow_mutable_source_new_popularity();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.source_new_popularity)
  return source_new_popularity_;
}
::cosmo::pb::SourceData_SourcePopularityStat* SourceData::release_source_new_popularity() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.source_new_popularity)
  clear_has_source_new_popularity();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_new_popularity();
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat* temp = source_new_popularity_;
    source_new_popularity_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_source_new_popularity(::cosmo::pb::SourceData_SourcePopularityStat* source_new_popularity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_new_popularity_;
  }
  if (source_new_popularity != NULL) {
    _slow_set_allocated_source_new_popularity(message_arena, &source_new_popularity);
  }
  source_new_popularity_ = source_new_popularity;
  if (source_new_popularity) {
    set_has_source_new_popularity();
  } else {
    clear_has_source_new_popularity();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.source_new_popularity)
}

// optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_v2 = 30;
bool SourceData::has_vk_group_event_stat_v2() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SourceData::set_has_vk_group_event_stat_v2() {
  _has_bits_[0] |= 0x02000000u;
}
void SourceData::clear_has_vk_group_event_stat_v2() {
  _has_bits_[0] &= ~0x02000000u;
}
void SourceData::clear_vk_group_event_stat_v2() {
  if (vk_group_event_stat_v2_ != NULL) vk_group_event_stat_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_vk_group_event_stat_v2();
}
const ::cosmo::pb::SourceData_GroupEventStat& SourceData::vk_group_event_stat_v2() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = vk_group_event_stat_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.vk_group_event_stat_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_vk_group_event_stat_v2() {
  set_has_vk_group_event_stat_v2();
  if (vk_group_event_stat_v2_ == NULL) {
    _slow_mutable_vk_group_event_stat_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.vk_group_event_stat_v2)
  return vk_group_event_stat_v2_;
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::release_vk_group_event_stat_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.vk_group_event_stat_v2)
  clear_has_vk_group_event_stat_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_group_event_stat_v2();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_v2_;
    vk_group_event_stat_v2_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_vk_group_event_stat_v2(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_group_event_stat_v2_;
  }
  if (vk_group_event_stat_v2 != NULL) {
    _slow_set_allocated_vk_group_event_stat_v2(message_arena, &vk_group_event_stat_v2);
  }
  vk_group_event_stat_v2_ = vk_group_event_stat_v2;
  if (vk_group_event_stat_v2) {
    set_has_vk_group_event_stat_v2();
  } else {
    clear_has_vk_group_event_stat_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.vk_group_event_stat_v2)
}

// optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week_v2 = 31;
bool SourceData::has_vk_group_event_stat_week_v2() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SourceData::set_has_vk_group_event_stat_week_v2() {
  _has_bits_[0] |= 0x04000000u;
}
void SourceData::clear_has_vk_group_event_stat_week_v2() {
  _has_bits_[0] &= ~0x04000000u;
}
void SourceData::clear_vk_group_event_stat_week_v2() {
  if (vk_group_event_stat_week_v2_ != NULL) vk_group_event_stat_week_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_vk_group_event_stat_week_v2();
}
const ::cosmo::pb::SourceData_GroupEventStat& SourceData::vk_group_event_stat_week_v2() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = vk_group_event_stat_week_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.vk_group_event_stat_week_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_vk_group_event_stat_week_v2() {
  set_has_vk_group_event_stat_week_v2();
  if (vk_group_event_stat_week_v2_ == NULL) {
    _slow_mutable_vk_group_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.vk_group_event_stat_week_v2)
  return vk_group_event_stat_week_v2_;
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::release_vk_group_event_stat_week_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.vk_group_event_stat_week_v2)
  clear_has_vk_group_event_stat_week_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_group_event_stat_week_v2();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_week_v2_;
    vk_group_event_stat_week_v2_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_vk_group_event_stat_week_v2(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_group_event_stat_week_v2_;
  }
  if (vk_group_event_stat_week_v2 != NULL) {
    _slow_set_allocated_vk_group_event_stat_week_v2(message_arena, &vk_group_event_stat_week_v2);
  }
  vk_group_event_stat_week_v2_ = vk_group_event_stat_week_v2;
  if (vk_group_event_stat_week_v2) {
    set_has_vk_group_event_stat_week_v2();
  } else {
    clear_has_vk_group_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.vk_group_event_stat_week_v2)
}

// optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_v2 = 32;
bool SourceData::has_youtube_group_event_stat_v2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SourceData::set_has_youtube_group_event_stat_v2() {
  _has_bits_[0] |= 0x08000000u;
}
void SourceData::clear_has_youtube_group_event_stat_v2() {
  _has_bits_[0] &= ~0x08000000u;
}
void SourceData::clear_youtube_group_event_stat_v2() {
  if (youtube_group_event_stat_v2_ != NULL) youtube_group_event_stat_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_youtube_group_event_stat_v2();
}
const ::cosmo::pb::SourceData_GroupEventStat& SourceData::youtube_group_event_stat_v2() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = youtube_group_event_stat_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.youtube_group_event_stat_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_youtube_group_event_stat_v2() {
  set_has_youtube_group_event_stat_v2();
  if (youtube_group_event_stat_v2_ == NULL) {
    _slow_mutable_youtube_group_event_stat_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.youtube_group_event_stat_v2)
  return youtube_group_event_stat_v2_;
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::release_youtube_group_event_stat_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.youtube_group_event_stat_v2)
  clear_has_youtube_group_event_stat_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_group_event_stat_v2();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_v2_;
    youtube_group_event_stat_v2_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_youtube_group_event_stat_v2(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_group_event_stat_v2_;
  }
  if (youtube_group_event_stat_v2 != NULL) {
    _slow_set_allocated_youtube_group_event_stat_v2(message_arena, &youtube_group_event_stat_v2);
  }
  youtube_group_event_stat_v2_ = youtube_group_event_stat_v2;
  if (youtube_group_event_stat_v2) {
    set_has_youtube_group_event_stat_v2();
  } else {
    clear_has_youtube_group_event_stat_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat_v2)
}

// optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week_v2 = 33;
bool SourceData::has_youtube_group_event_stat_week_v2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SourceData::set_has_youtube_group_event_stat_week_v2() {
  _has_bits_[0] |= 0x10000000u;
}
void SourceData::clear_has_youtube_group_event_stat_week_v2() {
  _has_bits_[0] &= ~0x10000000u;
}
void SourceData::clear_youtube_group_event_stat_week_v2() {
  if (youtube_group_event_stat_week_v2_ != NULL) youtube_group_event_stat_week_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_youtube_group_event_stat_week_v2();
}
const ::cosmo::pb::SourceData_GroupEventStat& SourceData::youtube_group_event_stat_week_v2() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = youtube_group_event_stat_week_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.youtube_group_event_stat_week_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_youtube_group_event_stat_week_v2() {
  set_has_youtube_group_event_stat_week_v2();
  if (youtube_group_event_stat_week_v2_ == NULL) {
    _slow_mutable_youtube_group_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.youtube_group_event_stat_week_v2)
  return youtube_group_event_stat_week_v2_;
}
::cosmo::pb::SourceData_GroupEventStat* SourceData::release_youtube_group_event_stat_week_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.youtube_group_event_stat_week_v2)
  clear_has_youtube_group_event_stat_week_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_group_event_stat_week_v2();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_week_v2_;
    youtube_group_event_stat_week_v2_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_youtube_group_event_stat_week_v2(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_group_event_stat_week_v2_;
  }
  if (youtube_group_event_stat_week_v2 != NULL) {
    _slow_set_allocated_youtube_group_event_stat_week_v2(message_arena, &youtube_group_event_stat_week_v2);
  }
  youtube_group_event_stat_week_v2_ = youtube_group_event_stat_week_v2;
  if (youtube_group_event_stat_week_v2) {
    set_has_youtube_group_event_stat_week_v2();
  } else {
    clear_has_youtube_group_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat_week_v2)
}

// optional .cosmo.pb.SourceData.SourceLocationStat fast_location_stat = 34;
bool SourceData::has_fast_location_stat() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SourceData::set_has_fast_location_stat() {
  _has_bits_[0] |= 0x20000000u;
}
void SourceData::clear_has_fast_location_stat() {
  _has_bits_[0] &= ~0x20000000u;
}
void SourceData::clear_fast_location_stat() {
  if (fast_location_stat_ != NULL) fast_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_fast_location_stat();
}
const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::fast_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = fast_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.fast_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_fast_location_stat() {
  set_has_fast_location_stat();
  if (fast_location_stat_ == NULL) {
    _slow_mutable_fast_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.fast_location_stat)
  return fast_location_stat_;
}
::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_fast_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.fast_location_stat)
  clear_has_fast_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fast_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = fast_location_stat_;
    fast_location_stat_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_fast_location_stat(::cosmo::pb::SourceData_SourceLocationStat* fast_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fast_location_stat_;
  }
  if (fast_location_stat != NULL) {
    _slow_set_allocated_fast_location_stat(message_arena, &fast_location_stat);
  }
  fast_location_stat_ = fast_location_stat;
  if (fast_location_stat) {
    set_has_fast_location_stat();
  } else {
    clear_has_fast_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.fast_location_stat)
}

// optional .cosmo.pb.SourceData.SourceGeo source_stat_geo = 35;
bool SourceData::has_source_stat_geo() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void SourceData::set_has_source_stat_geo() {
  _has_bits_[0] |= 0x40000000u;
}
void SourceData::clear_has_source_stat_geo() {
  _has_bits_[0] &= ~0x40000000u;
}
void SourceData::clear_source_stat_geo() {
  if (source_stat_geo_ != NULL) source_stat_geo_->::cosmo::pb::SourceData_SourceGeo::Clear();
  clear_has_source_stat_geo();
}
const ::cosmo::pb::SourceData_SourceGeo& SourceData::source_stat_geo() const {
  const ::cosmo::pb::SourceData_SourceGeo* p = source_stat_geo_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_stat_geo)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceGeo*>(
      &::cosmo::pb::_SourceData_SourceGeo_default_instance_);
}
::cosmo::pb::SourceData_SourceGeo* SourceData::mutable_source_stat_geo() {
  set_has_source_stat_geo();
  if (source_stat_geo_ == NULL) {
    _slow_mutable_source_stat_geo();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.source_stat_geo)
  return source_stat_geo_;
}
::cosmo::pb::SourceData_SourceGeo* SourceData::release_source_stat_geo() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.source_stat_geo)
  clear_has_source_stat_geo();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_stat_geo();
  } else {
    ::cosmo::pb::SourceData_SourceGeo* temp = source_stat_geo_;
    source_stat_geo_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_source_stat_geo(::cosmo::pb::SourceData_SourceGeo* source_stat_geo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_stat_geo_;
  }
  if (source_stat_geo != NULL) {
    _slow_set_allocated_source_stat_geo(message_arena, &source_stat_geo);
  }
  source_stat_geo_ = source_stat_geo;
  if (source_stat_geo) {
    set_has_source_stat_geo();
  } else {
    clear_has_source_stat_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.source_stat_geo)
}

// optional .cosmo.pb.SourceData.ContentThemes content_themes = 36;
bool SourceData::has_content_themes() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void SourceData::set_has_content_themes() {
  _has_bits_[0] |= 0x80000000u;
}
void SourceData::clear_has_content_themes() {
  _has_bits_[0] &= ~0x80000000u;
}
void SourceData::clear_content_themes() {
  if (content_themes_ != NULL) content_themes_->::cosmo::pb::SourceData_ContentThemes::Clear();
  clear_has_content_themes();
}
const ::cosmo::pb::SourceData_ContentThemes& SourceData::content_themes() const {
  const ::cosmo::pb::SourceData_ContentThemes* p = content_themes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.content_themes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_ContentThemes*>(
      &::cosmo::pb::_SourceData_ContentThemes_default_instance_);
}
::cosmo::pb::SourceData_ContentThemes* SourceData::mutable_content_themes() {
  set_has_content_themes();
  if (content_themes_ == NULL) {
    _slow_mutable_content_themes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.content_themes)
  return content_themes_;
}
::cosmo::pb::SourceData_ContentThemes* SourceData::release_content_themes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.content_themes)
  clear_has_content_themes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_content_themes();
  } else {
    ::cosmo::pb::SourceData_ContentThemes* temp = content_themes_;
    content_themes_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_content_themes(::cosmo::pb::SourceData_ContentThemes* content_themes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_themes_;
  }
  if (content_themes != NULL) {
    _slow_set_allocated_content_themes(message_arena, &content_themes);
  }
  content_themes_ = content_themes;
  if (content_themes) {
    set_has_content_themes();
  } else {
    clear_has_content_themes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.content_themes)
}

// optional .cosmo.pb.SourceData.LentaAdminSourceInfo lenta_admin_source_info = 37;
bool SourceData::has_lenta_admin_source_info() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void SourceData::set_has_lenta_admin_source_info() {
  _has_bits_[1] |= 0x00000001u;
}
void SourceData::clear_has_lenta_admin_source_info() {
  _has_bits_[1] &= ~0x00000001u;
}
void SourceData::clear_lenta_admin_source_info() {
  if (lenta_admin_source_info_ != NULL) lenta_admin_source_info_->::cosmo::pb::SourceData_LentaAdminSourceInfo::Clear();
  clear_has_lenta_admin_source_info();
}
const ::cosmo::pb::SourceData_LentaAdminSourceInfo& SourceData::lenta_admin_source_info() const {
  const ::cosmo::pb::SourceData_LentaAdminSourceInfo* p = lenta_admin_source_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.lenta_admin_source_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_LentaAdminSourceInfo*>(
      &::cosmo::pb::_SourceData_LentaAdminSourceInfo_default_instance_);
}
::cosmo::pb::SourceData_LentaAdminSourceInfo* SourceData::mutable_lenta_admin_source_info() {
  set_has_lenta_admin_source_info();
  if (lenta_admin_source_info_ == NULL) {
    _slow_mutable_lenta_admin_source_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.lenta_admin_source_info)
  return lenta_admin_source_info_;
}
::cosmo::pb::SourceData_LentaAdminSourceInfo* SourceData::release_lenta_admin_source_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.lenta_admin_source_info)
  clear_has_lenta_admin_source_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lenta_admin_source_info();
  } else {
    ::cosmo::pb::SourceData_LentaAdminSourceInfo* temp = lenta_admin_source_info_;
    lenta_admin_source_info_ = NULL;
    return temp;
  }
}
 void SourceData::set_allocated_lenta_admin_source_info(::cosmo::pb::SourceData_LentaAdminSourceInfo* lenta_admin_source_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lenta_admin_source_info_;
  }
  if (lenta_admin_source_info != NULL) {
    _slow_set_allocated_lenta_admin_source_info(message_arena, &lenta_admin_source_info);
  }
  lenta_admin_source_info_ = lenta_admin_source_info;
  if (lenta_admin_source_info) {
    set_has_lenta_admin_source_info();
  } else {
    clear_has_lenta_admin_source_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.lenta_admin_source_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_OriginalInfo::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_OriginalInfo::DocumentData_OriginalInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.OriginalInfo)
}
DocumentData_OriginalInfo::DocumentData_OriginalInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.OriginalInfo)
}
DocumentData_OriginalInfo::DocumentData_OriginalInfo(const DocumentData_OriginalInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.OriginalInfo)
}

void DocumentData_OriginalInfo::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DocumentData_OriginalInfo::~DocumentData_OriginalInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.OriginalInfo)
  SharedDtor();
}

void DocumentData_OriginalInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  url_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DocumentData_OriginalInfo::ArenaDtor(void* object) {
  DocumentData_OriginalInfo* _this = reinterpret_cast< DocumentData_OriginalInfo* >(object);
  (void)_this;
}
void DocumentData_OriginalInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_OriginalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_OriginalInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_OriginalInfo& DocumentData_OriginalInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_OriginalInfo* DocumentData_OriginalInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_OriginalInfo>(arena);
}

void DocumentData_OriginalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_OriginalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.OriginalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.DocumentData.OriginalInfo.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.OriginalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.OriginalInfo)
  return false;
#undef DO_
}

void DocumentData_OriginalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.DocumentData.OriginalInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.OriginalInfo)
}

::google::protobuf::uint8* DocumentData_OriginalInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.OriginalInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.DocumentData.OriginalInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.OriginalInfo)
  return target;
}

size_t DocumentData_OriginalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.OriginalInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string url = 2;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_OriginalInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.OriginalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_OriginalInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_OriginalInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.OriginalInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.OriginalInfo)
    MergeFrom(*source);
  }
}

void DocumentData_OriginalInfo::MergeFrom(const DocumentData_OriginalInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.OriginalInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_url()) {
    set_url(from.url());
  }
}

void DocumentData_OriginalInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.OriginalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_OriginalInfo::CopyFrom(const DocumentData_OriginalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.OriginalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_OriginalInfo::IsInitialized() const {
  return true;
}

void DocumentData_OriginalInfo::Swap(DocumentData_OriginalInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_OriginalInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_OriginalInfo::UnsafeArenaSwap(DocumentData_OriginalInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_OriginalInfo::InternalSwap(DocumentData_OriginalInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_OriginalInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_OriginalInfo

// optional string url = 2;
bool DocumentData_OriginalInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_OriginalInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_OriginalInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_OriginalInfo::clear_url() {
  url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_url();
}
const ::std::string& DocumentData_OriginalInfo::url() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.OriginalInfo.url)
  return url_.Get();
}
void DocumentData_OriginalInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.OriginalInfo.url)
}
#if LANG_CXX11
void DocumentData_OriginalInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.DocumentData.OriginalInfo.url)
}
#endif
void DocumentData_OriginalInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.DocumentData.OriginalInfo.url)
}
void DocumentData_OriginalInfo::set_url(const char* value,
    size_t size) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.DocumentData.OriginalInfo.url)
}
::std::string* DocumentData_OriginalInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.OriginalInfo.url)
  return url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DocumentData_OriginalInfo::release_url() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.OriginalInfo.url)
  clear_has_url();
  return url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DocumentData_OriginalInfo::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.OriginalInfo.url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_url();
  return url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DocumentData_OriginalInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.OriginalInfo.url)
}
void DocumentData_OriginalInfo::unsafe_arena_set_allocated_url(
    ::std::string* url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.OriginalInfo.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_OkInfo::kSourceIdFieldNumber;
const int DocumentData_OkInfo::kDocIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_OkInfo::DocumentData_OkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.OkInfo)
}
DocumentData_OkInfo::DocumentData_OkInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.OkInfo)
}
DocumentData_OkInfo::DocumentData_OkInfo(const DocumentData_OkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&doc_id_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(doc_id_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.OkInfo)
}

void DocumentData_OkInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doc_id_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(doc_id_));
}

DocumentData_OkInfo::~DocumentData_OkInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.OkInfo)
  SharedDtor();
}

void DocumentData_OkInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_OkInfo::ArenaDtor(void* object) {
  DocumentData_OkInfo* _this = reinterpret_cast< DocumentData_OkInfo* >(object);
  (void)_this;
}
void DocumentData_OkInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_OkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_OkInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_OkInfo& DocumentData_OkInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_OkInfo* DocumentData_OkInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_OkInfo>(arena);
}

void DocumentData_OkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&doc_id_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(doc_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_OkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.OkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 doc_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.OkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.OkInfo)
  return false;
#undef DO_
}

void DocumentData_OkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // required int64 doc_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->doc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.OkInfo)
}

::google::protobuf::uint8* DocumentData_OkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.OkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // required int64 doc_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->doc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.OkInfo)
  return target;
}

size_t DocumentData_OkInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentData.OkInfo)
  size_t total_size = 0;

  if (has_source_id()) {
    // required int64 source_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }

  if (has_doc_id()) {
    // required int64 doc_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }

  return total_size;
}
size_t DocumentData_OkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.OkInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 source_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());

    // required int64 doc_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_OkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.OkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_OkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_OkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.OkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.OkInfo)
    MergeFrom(*source);
  }
}

void DocumentData_OkInfo::MergeFrom(const DocumentData_OkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.OkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      doc_id_ = from.doc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_OkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.OkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_OkInfo::CopyFrom(const DocumentData_OkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.OkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_OkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DocumentData_OkInfo::Swap(DocumentData_OkInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_OkInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_OkInfo::UnsafeArenaSwap(DocumentData_OkInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_OkInfo::InternalSwap(DocumentData_OkInfo* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(doc_id_, other->doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_OkInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_OkInfo

// required int64 source_id = 1;
bool DocumentData_OkInfo::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_OkInfo::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_OkInfo::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_OkInfo::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 DocumentData_OkInfo::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.OkInfo.source_id)
  return source_id_;
}
void DocumentData_OkInfo::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.OkInfo.source_id)
}

// required int64 doc_id = 2;
bool DocumentData_OkInfo::has_doc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_OkInfo::set_has_doc_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_OkInfo::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_OkInfo::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 DocumentData_OkInfo::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.OkInfo.doc_id)
  return doc_id_;
}
void DocumentData_OkInfo::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.OkInfo.doc_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_ContentData::kContentVectorFieldNumber;
const int DocumentData_ContentData::kAlgoVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_ContentData::DocumentData_ContentData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.ContentData)
}
DocumentData_ContentData::DocumentData_ContentData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  content_vector_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.ContentData)
}
DocumentData_ContentData::DocumentData_ContentData(const DocumentData_ContentData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      content_vector_(from.content_vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algo_version_ = from.algo_version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.ContentData)
}

void DocumentData_ContentData::SharedCtor() {
  _cached_size_ = 0;
  algo_version_ = GOOGLE_ULONGLONG(0);
}

DocumentData_ContentData::~DocumentData_ContentData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.ContentData)
  SharedDtor();
}

void DocumentData_ContentData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_ContentData::ArenaDtor(void* object) {
  DocumentData_ContentData* _this = reinterpret_cast< DocumentData_ContentData* >(object);
  (void)_this;
}
void DocumentData_ContentData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_ContentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_ContentData::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_ContentData& DocumentData_ContentData::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_ContentData* DocumentData_ContentData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_ContentData>(arena);
}

void DocumentData_ContentData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.ContentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_vector_.Clear();
  algo_version_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_ContentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.ContentData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float content_vector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_content_vector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_content_vector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 algo_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_algo_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &algo_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.ContentData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.ContentData)
  return false;
#undef DO_
}

void DocumentData_ContentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.ContentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float content_vector = 1;
  for (int i = 0, n = this->content_vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->content_vector(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required uint64 algo_version = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->algo_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.ContentData)
}

::google::protobuf::uint8* DocumentData_ContentData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.ContentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float content_vector = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->content_vector_, target);

  cached_has_bits = _has_bits_[0];
  // required uint64 algo_version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->algo_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.ContentData)
  return target;
}

size_t DocumentData_ContentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.ContentData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 algo_version = 2;
  if (has_algo_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->algo_version());
  }
  // repeated float content_vector = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->content_vector_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->content_vector_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_ContentData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.ContentData)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_ContentData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_ContentData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.ContentData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.ContentData)
    MergeFrom(*source);
  }
}

void DocumentData_ContentData::MergeFrom(const DocumentData_ContentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.ContentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_vector_.MergeFrom(from.content_vector_);
  if (from.has_algo_version()) {
    set_algo_version(from.algo_version());
  }
}

void DocumentData_ContentData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.ContentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_ContentData::CopyFrom(const DocumentData_ContentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.ContentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_ContentData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DocumentData_ContentData::Swap(DocumentData_ContentData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_ContentData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_ContentData::UnsafeArenaSwap(DocumentData_ContentData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_ContentData::InternalSwap(DocumentData_ContentData* other) {
  using std::swap;
  content_vector_.InternalSwap(&other->content_vector_);
  swap(algo_version_, other->algo_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_ContentData::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_ContentData

// repeated float content_vector = 1;
int DocumentData_ContentData::content_vector_size() const {
  return content_vector_.size();
}
void DocumentData_ContentData::clear_content_vector() {
  content_vector_.Clear();
}
float DocumentData_ContentData::content_vector(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentData.content_vector)
  return content_vector_.Get(index);
}
void DocumentData_ContentData::set_content_vector(int index, float value) {
  content_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentData.content_vector)
}
void DocumentData_ContentData::add_content_vector(float value) {
  content_vector_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.ContentData.content_vector)
}
const ::google::protobuf::RepeatedField< float >&
DocumentData_ContentData::content_vector() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.ContentData.content_vector)
  return content_vector_;
}
::google::protobuf::RepeatedField< float >*
DocumentData_ContentData::mutable_content_vector() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.ContentData.content_vector)
  return &content_vector_;
}

// required uint64 algo_version = 2;
bool DocumentData_ContentData::has_algo_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_ContentData::set_has_algo_version() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_ContentData::clear_has_algo_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_ContentData::clear_algo_version() {
  algo_version_ = GOOGLE_ULONGLONG(0);
  clear_has_algo_version();
}
::google::protobuf::uint64 DocumentData_ContentData::algo_version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentData.algo_version)
  return algo_version_;
}
void DocumentData_ContentData::set_algo_version(::google::protobuf::uint64 value) {
  set_has_algo_version();
  algo_version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentData.algo_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_FreshnessData::kExpirationTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_FreshnessData::DocumentData_FreshnessData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.FreshnessData)
}
DocumentData_FreshnessData::DocumentData_FreshnessData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.FreshnessData)
}
DocumentData_FreshnessData::DocumentData_FreshnessData(const DocumentData_FreshnessData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  expiration_timestamp_ = from.expiration_timestamp_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.FreshnessData)
}

void DocumentData_FreshnessData::SharedCtor() {
  _cached_size_ = 0;
  expiration_timestamp_ = GOOGLE_LONGLONG(0);
}

DocumentData_FreshnessData::~DocumentData_FreshnessData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.FreshnessData)
  SharedDtor();
}

void DocumentData_FreshnessData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_FreshnessData::ArenaDtor(void* object) {
  DocumentData_FreshnessData* _this = reinterpret_cast< DocumentData_FreshnessData* >(object);
  (void)_this;
}
void DocumentData_FreshnessData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_FreshnessData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_FreshnessData::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_FreshnessData& DocumentData_FreshnessData::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_FreshnessData* DocumentData_FreshnessData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_FreshnessData>(arena);
}

void DocumentData_FreshnessData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.FreshnessData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expiration_timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_FreshnessData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.FreshnessData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 expiration_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_expiration_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.FreshnessData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.FreshnessData)
  return false;
#undef DO_
}

void DocumentData_FreshnessData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.FreshnessData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 expiration_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expiration_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.FreshnessData)
}

::google::protobuf::uint8* DocumentData_FreshnessData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.FreshnessData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 expiration_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->expiration_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.FreshnessData)
  return target;
}

size_t DocumentData_FreshnessData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.FreshnessData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 expiration_timestamp = 1;
  if (has_expiration_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expiration_timestamp());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_FreshnessData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.FreshnessData)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_FreshnessData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_FreshnessData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.FreshnessData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.FreshnessData)
    MergeFrom(*source);
  }
}

void DocumentData_FreshnessData::MergeFrom(const DocumentData_FreshnessData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.FreshnessData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expiration_timestamp()) {
    set_expiration_timestamp(from.expiration_timestamp());
  }
}

void DocumentData_FreshnessData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.FreshnessData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_FreshnessData::CopyFrom(const DocumentData_FreshnessData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.FreshnessData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_FreshnessData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DocumentData_FreshnessData::Swap(DocumentData_FreshnessData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_FreshnessData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_FreshnessData::UnsafeArenaSwap(DocumentData_FreshnessData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_FreshnessData::InternalSwap(DocumentData_FreshnessData* other) {
  using std::swap;
  swap(expiration_timestamp_, other->expiration_timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_FreshnessData::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_FreshnessData

// required int64 expiration_timestamp = 1;
bool DocumentData_FreshnessData::has_expiration_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_FreshnessData::set_has_expiration_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_FreshnessData::clear_has_expiration_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_FreshnessData::clear_expiration_timestamp() {
  expiration_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_expiration_timestamp();
}
::google::protobuf::int64 DocumentData_FreshnessData::expiration_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FreshnessData.expiration_timestamp)
  return expiration_timestamp_;
}
void DocumentData_FreshnessData::set_expiration_timestamp(::google::protobuf::int64 value) {
  set_has_expiration_timestamp();
  expiration_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FreshnessData.expiration_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_NewsData::kClusterIdFieldNumber;
const int DocumentData_NewsData::kIssueTsFieldNumber;
const int DocumentData_NewsData::kRegionIdFieldNumber;
const int DocumentData_NewsData::kParentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_NewsData::DocumentData_NewsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.NewsData)
}
DocumentData_NewsData::DocumentData_NewsData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.NewsData)
}
DocumentData_NewsData::DocumentData_NewsData(const DocumentData_NewsData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clusterid_, &from.clusterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_id_) -
    reinterpret_cast<char*>(&clusterid_)) + sizeof(parent_id_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.NewsData)
}

void DocumentData_NewsData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&clusterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_id_) -
      reinterpret_cast<char*>(&clusterid_)) + sizeof(parent_id_));
}

DocumentData_NewsData::~DocumentData_NewsData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.NewsData)
  SharedDtor();
}

void DocumentData_NewsData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_NewsData::ArenaDtor(void* object) {
  DocumentData_NewsData* _this = reinterpret_cast< DocumentData_NewsData* >(object);
  (void)_this;
}
void DocumentData_NewsData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_NewsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_NewsData::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_NewsData& DocumentData_NewsData::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_NewsData* DocumentData_NewsData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_NewsData>(arena);
}

void DocumentData_NewsData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.NewsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&clusterid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_id_) -
        reinterpret_cast<char*>(&clusterid_)) + sizeof(parent_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_NewsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.NewsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clusterId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_clusterid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clusterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 issue_ts = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_issue_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issue_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 region_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 parent_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_parent_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.NewsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.NewsData)
  return false;
#undef DO_
}

void DocumentData_NewsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.NewsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 clusterId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clusterid(), output);
  }

  // required int32 issue_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->issue_ts(), output);
  }

  // optional int32 region_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region_id(), output);
  }

  // optional int32 parent_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->parent_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.NewsData)
}

::google::protobuf::uint8* DocumentData_NewsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.NewsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 clusterId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clusterid(), target);
  }

  // required int32 issue_ts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->issue_ts(), target);
  }

  // optional int32 region_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region_id(), target);
  }

  // optional int32 parent_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->parent_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.NewsData)
  return target;
}

size_t DocumentData_NewsData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentData.NewsData)
  size_t total_size = 0;

  if (has_clusterid()) {
    // required int32 clusterId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clusterid());
  }

  if (has_issue_ts()) {
    // required int32 issue_ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->issue_ts());
  }

  return total_size;
}
size_t DocumentData_NewsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.NewsData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 clusterId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clusterid());

    // required int32 issue_ts = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->issue_ts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional int32 region_id = 3;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region_id());
    }

    // optional int32 parent_id = 4;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_NewsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.NewsData)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_NewsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_NewsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.NewsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.NewsData)
    MergeFrom(*source);
  }
}

void DocumentData_NewsData::MergeFrom(const DocumentData_NewsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.NewsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      clusterid_ = from.clusterid_;
    }
    if (cached_has_bits & 0x00000002u) {
      issue_ts_ = from.issue_ts_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      parent_id_ = from.parent_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_NewsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.NewsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_NewsData::CopyFrom(const DocumentData_NewsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.NewsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_NewsData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DocumentData_NewsData::Swap(DocumentData_NewsData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_NewsData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_NewsData::UnsafeArenaSwap(DocumentData_NewsData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_NewsData::InternalSwap(DocumentData_NewsData* other) {
  using std::swap;
  swap(clusterid_, other->clusterid_);
  swap(issue_ts_, other->issue_ts_);
  swap(region_id_, other->region_id_);
  swap(parent_id_, other->parent_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_NewsData::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_NewsData

// required int32 clusterId = 1;
bool DocumentData_NewsData::has_clusterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_NewsData::set_has_clusterid() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_NewsData::clear_has_clusterid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_NewsData::clear_clusterid() {
  clusterid_ = 0;
  clear_has_clusterid();
}
::google::protobuf::int32 DocumentData_NewsData::clusterid() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsData.clusterId)
  return clusterid_;
}
void DocumentData_NewsData::set_clusterid(::google::protobuf::int32 value) {
  set_has_clusterid();
  clusterid_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsData.clusterId)
}

// required int32 issue_ts = 2;
bool DocumentData_NewsData::has_issue_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_NewsData::set_has_issue_ts() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_NewsData::clear_has_issue_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_NewsData::clear_issue_ts() {
  issue_ts_ = 0;
  clear_has_issue_ts();
}
::google::protobuf::int32 DocumentData_NewsData::issue_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsData.issue_ts)
  return issue_ts_;
}
void DocumentData_NewsData::set_issue_ts(::google::protobuf::int32 value) {
  set_has_issue_ts();
  issue_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsData.issue_ts)
}

// optional int32 region_id = 3;
bool DocumentData_NewsData::has_region_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_NewsData::set_has_region_id() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_NewsData::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_NewsData::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
::google::protobuf::int32 DocumentData_NewsData::region_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsData.region_id)
  return region_id_;
}
void DocumentData_NewsData::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsData.region_id)
}

// optional int32 parent_id = 4;
bool DocumentData_NewsData::has_parent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentData_NewsData::set_has_parent_id() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentData_NewsData::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentData_NewsData::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
::google::protobuf::int32 DocumentData_NewsData::parent_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsData.parent_id)
  return parent_id_;
}
void DocumentData_NewsData::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsData.parent_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_Censor::kIsAllowedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_Censor::DocumentData_Censor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.Censor)
}
DocumentData_Censor::DocumentData_Censor(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.Censor)
}
DocumentData_Censor::DocumentData_Censor(const DocumentData_Censor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_allowed_ = from.is_allowed_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.Censor)
}

void DocumentData_Censor::SharedCtor() {
  _cached_size_ = 0;
  is_allowed_ = false;
}

DocumentData_Censor::~DocumentData_Censor() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.Censor)
  SharedDtor();
}

void DocumentData_Censor::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_Censor::ArenaDtor(void* object) {
  DocumentData_Censor* _this = reinterpret_cast< DocumentData_Censor* >(object);
  (void)_this;
}
void DocumentData_Censor::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_Censor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_Censor::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_Censor& DocumentData_Censor::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_Censor* DocumentData_Censor::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_Censor>(arena);
}

void DocumentData_Censor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.Censor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_allowed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_Censor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.Censor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_allowed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_allowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_allowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.Censor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.Censor)
  return false;
#undef DO_
}

void DocumentData_Censor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.Censor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_allowed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.Censor)
}

::google::protobuf::uint8* DocumentData_Censor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.Censor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_allowed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_allowed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.Censor)
  return target;
}

size_t DocumentData_Censor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.Censor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool is_allowed = 1;
  if (has_is_allowed()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_Censor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.Censor)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_Censor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_Censor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.Censor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.Censor)
    MergeFrom(*source);
  }
}

void DocumentData_Censor::MergeFrom(const DocumentData_Censor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.Censor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_allowed()) {
    set_is_allowed(from.is_allowed());
  }
}

void DocumentData_Censor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.Censor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_Censor::CopyFrom(const DocumentData_Censor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.Censor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_Censor::IsInitialized() const {
  return true;
}

void DocumentData_Censor::Swap(DocumentData_Censor* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_Censor* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_Censor::UnsafeArenaSwap(DocumentData_Censor* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_Censor::InternalSwap(DocumentData_Censor* other) {
  using std::swap;
  swap(is_allowed_, other->is_allowed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_Censor::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_Censor

// optional bool is_allowed = 1;
bool DocumentData_Censor::has_is_allowed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_Censor::set_has_is_allowed() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_Censor::clear_has_is_allowed() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_Censor::clear_is_allowed() {
  is_allowed_ = false;
  clear_has_is_allowed();
}
bool DocumentData_Censor::is_allowed() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Censor.is_allowed)
  return is_allowed_;
}
void DocumentData_Censor::set_is_allowed(bool value) {
  set_has_is_allowed();
  is_allowed_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Censor.is_allowed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_UserStats::kLikesFieldNumber;
const int DocumentData_UserStats::kDislikesFieldNumber;
const int DocumentData_UserStats::kViewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_UserStats::DocumentData_UserStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.UserStats)
}
DocumentData_UserStats::DocumentData_UserStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.UserStats)
}
DocumentData_UserStats::DocumentData_UserStats(const DocumentData_UserStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&likes_, &from.likes_,
    static_cast<size_t>(reinterpret_cast<char*>(&views_) -
    reinterpret_cast<char*>(&likes_)) + sizeof(views_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.UserStats)
}

void DocumentData_UserStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&likes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&views_) -
      reinterpret_cast<char*>(&likes_)) + sizeof(views_));
}

DocumentData_UserStats::~DocumentData_UserStats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.UserStats)
  SharedDtor();
}

void DocumentData_UserStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_UserStats::ArenaDtor(void* object) {
  DocumentData_UserStats* _this = reinterpret_cast< DocumentData_UserStats* >(object);
  (void)_this;
}
void DocumentData_UserStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_UserStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_UserStats::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_UserStats& DocumentData_UserStats::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_UserStats* DocumentData_UserStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_UserStats>(arena);
}

void DocumentData_UserStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.UserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&likes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&views_) -
        reinterpret_cast<char*>(&likes_)) + sizeof(views_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_UserStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.UserStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 likes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dislikes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_dislikes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dislikes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.UserStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.UserStats)
  return false;
#undef DO_
}

void DocumentData_UserStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.UserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 likes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->likes(), output);
  }

  // optional uint32 dislikes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dislikes(), output);
  }

  // optional uint32 views = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->views(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.UserStats)
}

::google::protobuf::uint8* DocumentData_UserStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.UserStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 likes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->likes(), target);
  }

  // optional uint32 dislikes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dislikes(), target);
  }

  // optional uint32 views = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->views(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.UserStats)
  return target;
}

size_t DocumentData_UserStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.UserStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 likes = 1;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->likes());
    }

    // optional uint32 dislikes = 2;
    if (has_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dislikes());
    }

    // optional uint32 views = 3;
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_UserStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.UserStats)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_UserStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_UserStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.UserStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.UserStats)
    MergeFrom(*source);
  }
}

void DocumentData_UserStats::MergeFrom(const DocumentData_UserStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.UserStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000002u) {
      dislikes_ = from.dislikes_;
    }
    if (cached_has_bits & 0x00000004u) {
      views_ = from.views_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_UserStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.UserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_UserStats::CopyFrom(const DocumentData_UserStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.UserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_UserStats::IsInitialized() const {
  return true;
}

void DocumentData_UserStats::Swap(DocumentData_UserStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_UserStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_UserStats::UnsafeArenaSwap(DocumentData_UserStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_UserStats::InternalSwap(DocumentData_UserStats* other) {
  using std::swap;
  swap(likes_, other->likes_);
  swap(dislikes_, other->dislikes_);
  swap(views_, other->views_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_UserStats::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_UserStats

// optional uint32 likes = 1;
bool DocumentData_UserStats::has_likes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_UserStats::set_has_likes() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_UserStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_UserStats::clear_likes() {
  likes_ = 0u;
  clear_has_likes();
}
::google::protobuf::uint32 DocumentData_UserStats::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.UserStats.likes)
  return likes_;
}
void DocumentData_UserStats::set_likes(::google::protobuf::uint32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.UserStats.likes)
}

// optional uint32 dislikes = 2;
bool DocumentData_UserStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_UserStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_UserStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_UserStats::clear_dislikes() {
  dislikes_ = 0u;
  clear_has_dislikes();
}
::google::protobuf::uint32 DocumentData_UserStats::dislikes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.UserStats.dislikes)
  return dislikes_;
}
void DocumentData_UserStats::set_dislikes(::google::protobuf::uint32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.UserStats.dislikes)
}

// optional uint32 views = 3;
bool DocumentData_UserStats::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_UserStats::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_UserStats::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_UserStats::clear_views() {
  views_ = 0u;
  clear_has_views();
}
::google::protobuf::uint32 DocumentData_UserStats::views() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.UserStats.views)
  return views_;
}
void DocumentData_UserStats::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.UserStats.views)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_Trends::kVersionFieldNumber;
const int DocumentData_Trends::kLikesFieldNumber;
const int DocumentData_Trends::kViewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_Trends::DocumentData_Trends()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.Trends)
}
DocumentData_Trends::DocumentData_Trends(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.Trends)
}
DocumentData_Trends::DocumentData_Trends(const DocumentData_Trends& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&views_) -
    reinterpret_cast<char*>(&version_)) + sizeof(views_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.Trends)
}

void DocumentData_Trends::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&views_) -
      reinterpret_cast<char*>(&version_)) + sizeof(views_));
}

DocumentData_Trends::~DocumentData_Trends() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.Trends)
  SharedDtor();
}

void DocumentData_Trends::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_Trends::ArenaDtor(void* object) {
  DocumentData_Trends* _this = reinterpret_cast< DocumentData_Trends* >(object);
  (void)_this;
}
void DocumentData_Trends::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_Trends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_Trends::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_Trends& DocumentData_Trends::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_Trends* DocumentData_Trends::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_Trends>(arena);
}

void DocumentData_Trends::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.Trends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&views_) -
        reinterpret_cast<char*>(&version_)) + sizeof(views_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_Trends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.Trends)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 likes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 views = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.Trends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.Trends)
  return false;
#undef DO_
}

void DocumentData_Trends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.Trends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional int32 likes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->likes(), output);
  }

  // optional int32 views = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->views(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.Trends)
}

::google::protobuf::uint8* DocumentData_Trends::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.Trends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional int32 likes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->likes(), target);
  }

  // optional int32 views = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->views(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.Trends)
  return target;
}

size_t DocumentData_Trends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.Trends)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional int32 likes = 2;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->likes());
    }

    // optional int32 views = 3;
    if (has_views()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->views());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_Trends::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.Trends)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_Trends* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_Trends>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.Trends)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.Trends)
    MergeFrom(*source);
  }
}

void DocumentData_Trends::MergeFrom(const DocumentData_Trends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.Trends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000004u) {
      views_ = from.views_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_Trends::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.Trends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_Trends::CopyFrom(const DocumentData_Trends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.Trends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_Trends::IsInitialized() const {
  return true;
}

void DocumentData_Trends::Swap(DocumentData_Trends* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_Trends* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_Trends::UnsafeArenaSwap(DocumentData_Trends* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_Trends::InternalSwap(DocumentData_Trends* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(likes_, other->likes_);
  swap(views_, other->views_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_Trends::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_Trends

// optional uint32 version = 1;
bool DocumentData_Trends::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_Trends::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_Trends::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_Trends::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 DocumentData_Trends::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Trends.version)
  return version_;
}
void DocumentData_Trends::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Trends.version)
}

// optional int32 likes = 2;
bool DocumentData_Trends::has_likes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_Trends::set_has_likes() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_Trends::clear_has_likes() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_Trends::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
::google::protobuf::int32 DocumentData_Trends::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Trends.likes)
  return likes_;
}
void DocumentData_Trends::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Trends.likes)
}

// optional int32 views = 3;
bool DocumentData_Trends::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_Trends::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_Trends::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_Trends::clear_views() {
  views_ = 0;
  clear_has_views();
}
::google::protobuf::int32 DocumentData_Trends::views() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Trends.views)
  return views_;
}
void DocumentData_Trends::set_views(::google::protobuf::int32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Trends.views)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_GeoHits::kGeoFieldNumber;
const int DocumentData_GeoHits::kHitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_GeoHits::DocumentData_GeoHits()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.GeoHits)
}
DocumentData_GeoHits::DocumentData_GeoHits(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.GeoHits)
}
DocumentData_GeoHits::DocumentData_GeoHits(const DocumentData_GeoHits& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&geo_, &from.geo_,
    static_cast<size_t>(reinterpret_cast<char*>(&hits_) -
    reinterpret_cast<char*>(&geo_)) + sizeof(hits_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.GeoHits)
}

void DocumentData_GeoHits::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&geo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hits_) -
      reinterpret_cast<char*>(&geo_)) + sizeof(hits_));
}

DocumentData_GeoHits::~DocumentData_GeoHits() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.GeoHits)
  SharedDtor();
}

void DocumentData_GeoHits::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_GeoHits::ArenaDtor(void* object) {
  DocumentData_GeoHits* _this = reinterpret_cast< DocumentData_GeoHits* >(object);
  (void)_this;
}
void DocumentData_GeoHits::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_GeoHits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_GeoHits::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_GeoHits& DocumentData_GeoHits::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_GeoHits* DocumentData_GeoHits::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_GeoHits>(arena);
}

void DocumentData_GeoHits::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.GeoHits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&geo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hits_) -
        reinterpret_cast<char*>(&geo_)) + sizeof(hits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_GeoHits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.GeoHits)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 geo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hits = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.GeoHits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.GeoHits)
  return false;
#undef DO_
}

void DocumentData_GeoHits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.GeoHits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->geo(), output);
  }

  // required int32 hits = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.GeoHits)
}

::google::protobuf::uint8* DocumentData_GeoHits::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.GeoHits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->geo(), target);
  }

  // required int32 hits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.GeoHits)
  return target;
}

size_t DocumentData_GeoHits::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentData.GeoHits)
  size_t total_size = 0;

  if (has_geo()) {
    // required uint32 geo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());
  }

  if (has_hits()) {
    // required int32 hits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hits());
  }

  return total_size;
}
size_t DocumentData_GeoHits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.GeoHits)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 geo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());

    // required int32 hits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hits());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_GeoHits::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.GeoHits)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_GeoHits* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_GeoHits>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.GeoHits)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.GeoHits)
    MergeFrom(*source);
  }
}

void DocumentData_GeoHits::MergeFrom(const DocumentData_GeoHits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.GeoHits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      geo_ = from.geo_;
    }
    if (cached_has_bits & 0x00000002u) {
      hits_ = from.hits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_GeoHits::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.GeoHits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_GeoHits::CopyFrom(const DocumentData_GeoHits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.GeoHits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_GeoHits::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DocumentData_GeoHits::Swap(DocumentData_GeoHits* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_GeoHits* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_GeoHits::UnsafeArenaSwap(DocumentData_GeoHits* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_GeoHits::InternalSwap(DocumentData_GeoHits* other) {
  using std::swap;
  swap(geo_, other->geo_);
  swap(hits_, other->hits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_GeoHits::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_GeoHits

// required uint32 geo = 1;
bool DocumentData_GeoHits::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_GeoHits::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_GeoHits::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_GeoHits::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
::google::protobuf::uint32 DocumentData_GeoHits::geo() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.GeoHits.geo)
  return geo_;
}
void DocumentData_GeoHits::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.GeoHits.geo)
}

// required int32 hits = 2;
bool DocumentData_GeoHits::has_hits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_GeoHits::set_has_hits() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_GeoHits::clear_has_hits() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_GeoHits::clear_hits() {
  hits_ = 0;
  clear_has_hits();
}
::google::protobuf::int32 DocumentData_GeoHits::hits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.GeoHits.hits)
  return hits_;
}
void DocumentData_GeoHits::set_hits(::google::protobuf::int32 value) {
  set_has_hits();
  hits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.GeoHits.hits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_MediametricsFea::kHitsFieldNumber;
const int DocumentData_MediametricsFea::kVersionFieldNumber;
const int DocumentData_MediametricsFea::kGeoHitsFieldNumber;
const int DocumentData_MediametricsFea::kMaleHitsFieldNumber;
const int DocumentData_MediametricsFea::kFemaleHitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_MediametricsFea::DocumentData_MediametricsFea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.MediametricsFea)
}
DocumentData_MediametricsFea::DocumentData_MediametricsFea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  geo_hits_(arena),
  male_hits_(arena),
  female_hits_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.MediametricsFea)
}
DocumentData_MediametricsFea::DocumentData_MediametricsFea(const DocumentData_MediametricsFea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      geo_hits_(from.geo_hits_),
      male_hits_(from.male_hits_),
      female_hits_(from.female_hits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hits_, &from.hits_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&hits_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.MediametricsFea)
}

void DocumentData_MediametricsFea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&hits_)) + sizeof(version_));
}

DocumentData_MediametricsFea::~DocumentData_MediametricsFea() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.MediametricsFea)
  SharedDtor();
}

void DocumentData_MediametricsFea::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_MediametricsFea::ArenaDtor(void* object) {
  DocumentData_MediametricsFea* _this = reinterpret_cast< DocumentData_MediametricsFea* >(object);
  (void)_this;
}
void DocumentData_MediametricsFea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_MediametricsFea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_MediametricsFea::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_MediametricsFea& DocumentData_MediametricsFea::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_MediametricsFea* DocumentData_MediametricsFea::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_MediametricsFea>(arena);
}

void DocumentData_MediametricsFea::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.MediametricsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_hits_.Clear();
  male_hits_.Clear();
  female_hits_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&hits_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_MediametricsFea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.MediametricsFea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.DocumentData.GeoHits geo_hits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geo_hits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 male_hits = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_male_hits())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_male_hits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 female_hits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_female_hits())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_female_hits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.MediametricsFea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.MediametricsFea)
  return false;
#undef DO_
}

void DocumentData_MediametricsFea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.MediametricsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 hits = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hits(), output);
  }

  // required uint32 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // repeated .cosmo.pb.DocumentData.GeoHits geo_hits = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_hits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->geo_hits(static_cast<int>(i)), output);
  }

  // repeated uint32 male_hits = 4;
  for (int i = 0, n = this->male_hits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->male_hits(i), output);
  }

  // repeated uint32 female_hits = 5;
  for (int i = 0, n = this->female_hits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->female_hits(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.MediametricsFea)
}

::google::protobuf::uint8* DocumentData_MediametricsFea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.MediametricsFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 hits = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hits(), target);
  }

  // required uint32 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // repeated .cosmo.pb.DocumentData.GeoHits geo_hits = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_hits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->geo_hits(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 male_hits = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->male_hits_, target);

  // repeated uint32 female_hits = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->female_hits_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.MediametricsFea)
  return target;
}

size_t DocumentData_MediametricsFea::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentData.MediametricsFea)
  size_t total_size = 0;

  if (has_hits()) {
    // required int32 hits = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hits());
  }

  if (has_version()) {
    // required uint32 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t DocumentData_MediametricsFea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.MediametricsFea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 hits = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hits());

    // required uint32 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .cosmo.pb.DocumentData.GeoHits geo_hits = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->geo_hits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_hits(static_cast<int>(i)));
    }
  }

  // repeated uint32 male_hits = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->male_hits_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->male_hits_size());
    total_size += data_size;
  }

  // repeated uint32 female_hits = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->female_hits_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->female_hits_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_MediametricsFea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.MediametricsFea)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_MediametricsFea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_MediametricsFea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.MediametricsFea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.MediametricsFea)
    MergeFrom(*source);
  }
}

void DocumentData_MediametricsFea::MergeFrom(const DocumentData_MediametricsFea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.MediametricsFea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_hits_.MergeFrom(from.geo_hits_);
  male_hits_.MergeFrom(from.male_hits_);
  female_hits_.MergeFrom(from.female_hits_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      hits_ = from.hits_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_MediametricsFea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.MediametricsFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_MediametricsFea::CopyFrom(const DocumentData_MediametricsFea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.MediametricsFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_MediametricsFea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->geo_hits())) return false;
  return true;
}

void DocumentData_MediametricsFea::Swap(DocumentData_MediametricsFea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_MediametricsFea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_MediametricsFea::UnsafeArenaSwap(DocumentData_MediametricsFea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_MediametricsFea::InternalSwap(DocumentData_MediametricsFea* other) {
  using std::swap;
  geo_hits_.InternalSwap(&other->geo_hits_);
  male_hits_.InternalSwap(&other->male_hits_);
  female_hits_.InternalSwap(&other->female_hits_);
  swap(hits_, other->hits_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_MediametricsFea::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_MediametricsFea

// required int32 hits = 1;
bool DocumentData_MediametricsFea::has_hits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_MediametricsFea::set_has_hits() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_MediametricsFea::clear_has_hits() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_MediametricsFea::clear_hits() {
  hits_ = 0;
  clear_has_hits();
}
::google::protobuf::int32 DocumentData_MediametricsFea::hits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.MediametricsFea.hits)
  return hits_;
}
void DocumentData_MediametricsFea::set_hits(::google::protobuf::int32 value) {
  set_has_hits();
  hits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.MediametricsFea.hits)
}

// required uint32 version = 2;
bool DocumentData_MediametricsFea::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_MediametricsFea::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_MediametricsFea::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_MediametricsFea::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 DocumentData_MediametricsFea::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.MediametricsFea.version)
  return version_;
}
void DocumentData_MediametricsFea::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.MediametricsFea.version)
}

// repeated .cosmo.pb.DocumentData.GeoHits geo_hits = 3;
int DocumentData_MediametricsFea::geo_hits_size() const {
  return geo_hits_.size();
}
void DocumentData_MediametricsFea::clear_geo_hits() {
  geo_hits_.Clear();
}
const ::cosmo::pb::DocumentData_GeoHits& DocumentData_MediametricsFea::geo_hits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.MediametricsFea.geo_hits)
  return geo_hits_.Get(index);
}
::cosmo::pb::DocumentData_GeoHits* DocumentData_MediametricsFea::mutable_geo_hits(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.MediametricsFea.geo_hits)
  return geo_hits_.Mutable(index);
}
::cosmo::pb::DocumentData_GeoHits* DocumentData_MediametricsFea::add_geo_hits() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.MediametricsFea.geo_hits)
  return geo_hits_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_GeoHits >*
DocumentData_MediametricsFea::mutable_geo_hits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.MediametricsFea.geo_hits)
  return &geo_hits_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_GeoHits >&
DocumentData_MediametricsFea::geo_hits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.MediametricsFea.geo_hits)
  return geo_hits_;
}

// repeated uint32 male_hits = 4;
int DocumentData_MediametricsFea::male_hits_size() const {
  return male_hits_.size();
}
void DocumentData_MediametricsFea::clear_male_hits() {
  male_hits_.Clear();
}
::google::protobuf::uint32 DocumentData_MediametricsFea::male_hits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.MediametricsFea.male_hits)
  return male_hits_.Get(index);
}
void DocumentData_MediametricsFea::set_male_hits(int index, ::google::protobuf::uint32 value) {
  male_hits_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.MediametricsFea.male_hits)
}
void DocumentData_MediametricsFea::add_male_hits(::google::protobuf::uint32 value) {
  male_hits_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.MediametricsFea.male_hits)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DocumentData_MediametricsFea::male_hits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.MediametricsFea.male_hits)
  return male_hits_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DocumentData_MediametricsFea::mutable_male_hits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.MediametricsFea.male_hits)
  return &male_hits_;
}

// repeated uint32 female_hits = 5;
int DocumentData_MediametricsFea::female_hits_size() const {
  return female_hits_.size();
}
void DocumentData_MediametricsFea::clear_female_hits() {
  female_hits_.Clear();
}
::google::protobuf::uint32 DocumentData_MediametricsFea::female_hits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.MediametricsFea.female_hits)
  return female_hits_.Get(index);
}
void DocumentData_MediametricsFea::set_female_hits(int index, ::google::protobuf::uint32 value) {
  female_hits_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.MediametricsFea.female_hits)
}
void DocumentData_MediametricsFea::add_female_hits(::google::protobuf::uint32 value) {
  female_hits_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.MediametricsFea.female_hits)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DocumentData_MediametricsFea::female_hits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.MediametricsFea.female_hits)
  return female_hits_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DocumentData_MediametricsFea::mutable_female_hits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.MediametricsFea.female_hits)
  return &female_hits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_Fetcher::kFetchTimestampFieldNumber;
const int DocumentData_Fetcher::kRegionIdFieldNumber;
const int DocumentData_Fetcher::kHasTitleFieldNumber;
const int DocumentData_Fetcher::kHasImgFieldNumber;
const int DocumentData_Fetcher::kHasDescriptionFieldNumber;
const int DocumentData_Fetcher::kLastFetchTimestampFieldNumber;
const int DocumentData_Fetcher::kTitleLenFieldNumber;
const int DocumentData_Fetcher::kDescriptionLenFieldNumber;
const int DocumentData_Fetcher::kHasFulltextFieldNumber;
const int DocumentData_Fetcher::kHasVideoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_Fetcher::DocumentData_Fetcher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.Fetcher)
}
DocumentData_Fetcher::DocumentData_Fetcher(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.Fetcher)
}
DocumentData_Fetcher::DocumentData_Fetcher(const DocumentData_Fetcher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fetch_timestamp_, &from.fetch_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_video_) -
    reinterpret_cast<char*>(&fetch_timestamp_)) + sizeof(has_video_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.Fetcher)
}

void DocumentData_Fetcher::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fetch_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_video_) -
      reinterpret_cast<char*>(&fetch_timestamp_)) + sizeof(has_video_));
}

DocumentData_Fetcher::~DocumentData_Fetcher() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.Fetcher)
  SharedDtor();
}

void DocumentData_Fetcher::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_Fetcher::ArenaDtor(void* object) {
  DocumentData_Fetcher* _this = reinterpret_cast< DocumentData_Fetcher* >(object);
  (void)_this;
}
void DocumentData_Fetcher::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_Fetcher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_Fetcher::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_Fetcher& DocumentData_Fetcher::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_Fetcher* DocumentData_Fetcher::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_Fetcher>(arena);
}

void DocumentData_Fetcher::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.Fetcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&fetch_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&title_len_) -
        reinterpret_cast<char*>(&fetch_timestamp_)) + sizeof(title_len_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&description_len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_video_) -
        reinterpret_cast<char*>(&description_len_)) + sizeof(has_video_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_Fetcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.Fetcher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 fetch_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_fetch_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fetch_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_has_title();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_title_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_img = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_has_img();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_img_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_has_description();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_description_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_fetch_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_last_fetch_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_fetch_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 title_len = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_title_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 description_len = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_description_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &description_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_fulltext = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_has_fulltext();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_fulltext_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_video = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_has_video();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.Fetcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.Fetcher)
  return false;
#undef DO_
}

void DocumentData_Fetcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.Fetcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 fetch_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fetch_timestamp(), output);
  }

  // optional uint32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->region_id(), output);
  }

  // optional bool has_title = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_title(), output);
  }

  // optional bool has_img = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_img(), output);
  }

  // optional bool has_description = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_description(), output);
  }

  // optional int64 last_fetch_timestamp = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_fetch_timestamp(), output);
  }

  // optional int32 title_len = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->title_len(), output);
  }

  // optional int32 description_len = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->description_len(), output);
  }

  // optional bool has_fulltext = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_fulltext(), output);
  }

  // optional bool has_video = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->has_video(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.Fetcher)
}

::google::protobuf::uint8* DocumentData_Fetcher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.Fetcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 fetch_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fetch_timestamp(), target);
  }

  // optional uint32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->region_id(), target);
  }

  // optional bool has_title = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_title(), target);
  }

  // optional bool has_img = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_img(), target);
  }

  // optional bool has_description = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_description(), target);
  }

  // optional int64 last_fetch_timestamp = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_fetch_timestamp(), target);
  }

  // optional int32 title_len = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->title_len(), target);
  }

  // optional int32 description_len = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->description_len(), target);
  }

  // optional bool has_fulltext = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_fulltext(), target);
  }

  // optional bool has_video = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->has_video(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.Fetcher)
  return target;
}

size_t DocumentData_Fetcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.Fetcher)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 fetch_timestamp = 1;
    if (has_fetch_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fetch_timestamp());
    }

    // optional uint32 region_id = 2;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // optional bool has_title = 3;
    if (has_has_title()) {
      total_size += 1 + 1;
    }

    // optional bool has_img = 4;
    if (has_has_img()) {
      total_size += 1 + 1;
    }

    // optional bool has_description = 5;
    if (has_has_description()) {
      total_size += 1 + 1;
    }

    // optional bool has_fulltext = 9;
    if (has_has_fulltext()) {
      total_size += 1 + 1;
    }

    // optional int64 last_fetch_timestamp = 6;
    if (has_last_fetch_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_fetch_timestamp());
    }

    // optional int32 title_len = 7;
    if (has_title_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_len());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 description_len = 8;
    if (has_description_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->description_len());
    }

    // optional bool has_video = 10;
    if (has_has_video()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_Fetcher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.Fetcher)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_Fetcher* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_Fetcher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.Fetcher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.Fetcher)
    MergeFrom(*source);
  }
}

void DocumentData_Fetcher::MergeFrom(const DocumentData_Fetcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.Fetcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      fetch_timestamp_ = from.fetch_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      region_id_ = from.region_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      has_title_ = from.has_title_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_img_ = from.has_img_;
    }
    if (cached_has_bits & 0x00000010u) {
      has_description_ = from.has_description_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_fulltext_ = from.has_fulltext_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_fetch_timestamp_ = from.last_fetch_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      title_len_ = from.title_len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      description_len_ = from.description_len_;
    }
    if (cached_has_bits & 0x00000200u) {
      has_video_ = from.has_video_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_Fetcher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.Fetcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_Fetcher::CopyFrom(const DocumentData_Fetcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.Fetcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_Fetcher::IsInitialized() const {
  return true;
}

void DocumentData_Fetcher::Swap(DocumentData_Fetcher* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_Fetcher* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_Fetcher::UnsafeArenaSwap(DocumentData_Fetcher* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_Fetcher::InternalSwap(DocumentData_Fetcher* other) {
  using std::swap;
  swap(fetch_timestamp_, other->fetch_timestamp_);
  swap(region_id_, other->region_id_);
  swap(has_title_, other->has_title_);
  swap(has_img_, other->has_img_);
  swap(has_description_, other->has_description_);
  swap(has_fulltext_, other->has_fulltext_);
  swap(last_fetch_timestamp_, other->last_fetch_timestamp_);
  swap(title_len_, other->title_len_);
  swap(description_len_, other->description_len_);
  swap(has_video_, other->has_video_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_Fetcher::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_Fetcher

// optional int64 fetch_timestamp = 1;
bool DocumentData_Fetcher::has_fetch_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_Fetcher::set_has_fetch_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_Fetcher::clear_has_fetch_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_Fetcher::clear_fetch_timestamp() {
  fetch_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_fetch_timestamp();
}
::google::protobuf::int64 DocumentData_Fetcher::fetch_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.fetch_timestamp)
  return fetch_timestamp_;
}
void DocumentData_Fetcher::set_fetch_timestamp(::google::protobuf::int64 value) {
  set_has_fetch_timestamp();
  fetch_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.fetch_timestamp)
}

// optional uint32 region_id = 2;
bool DocumentData_Fetcher::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_Fetcher::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_Fetcher::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_Fetcher::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
::google::protobuf::uint32 DocumentData_Fetcher::region_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.region_id)
  return region_id_;
}
void DocumentData_Fetcher::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.region_id)
}

// optional bool has_title = 3;
bool DocumentData_Fetcher::has_has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_Fetcher::set_has_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_Fetcher::clear_has_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_Fetcher::clear_has_title() {
  has_title_ = false;
  clear_has_has_title();
}
bool DocumentData_Fetcher::has_title() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.has_title)
  return has_title_;
}
void DocumentData_Fetcher::set_has_title(bool value) {
  set_has_has_title();
  has_title_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.has_title)
}

// optional bool has_img = 4;
bool DocumentData_Fetcher::has_has_img() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentData_Fetcher::set_has_has_img() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentData_Fetcher::clear_has_has_img() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentData_Fetcher::clear_has_img() {
  has_img_ = false;
  clear_has_has_img();
}
bool DocumentData_Fetcher::has_img() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.has_img)
  return has_img_;
}
void DocumentData_Fetcher::set_has_img(bool value) {
  set_has_has_img();
  has_img_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.has_img)
}

// optional bool has_description = 5;
bool DocumentData_Fetcher::has_has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentData_Fetcher::set_has_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentData_Fetcher::clear_has_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentData_Fetcher::clear_has_description() {
  has_description_ = false;
  clear_has_has_description();
}
bool DocumentData_Fetcher::has_description() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.has_description)
  return has_description_;
}
void DocumentData_Fetcher::set_has_description(bool value) {
  set_has_has_description();
  has_description_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.has_description)
}

// optional int64 last_fetch_timestamp = 6;
bool DocumentData_Fetcher::has_last_fetch_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DocumentData_Fetcher::set_has_last_fetch_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void DocumentData_Fetcher::clear_has_last_fetch_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void DocumentData_Fetcher::clear_last_fetch_timestamp() {
  last_fetch_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_fetch_timestamp();
}
::google::protobuf::int64 DocumentData_Fetcher::last_fetch_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.last_fetch_timestamp)
  return last_fetch_timestamp_;
}
void DocumentData_Fetcher::set_last_fetch_timestamp(::google::protobuf::int64 value) {
  set_has_last_fetch_timestamp();
  last_fetch_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.last_fetch_timestamp)
}

// optional int32 title_len = 7;
bool DocumentData_Fetcher::has_title_len() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DocumentData_Fetcher::set_has_title_len() {
  _has_bits_[0] |= 0x00000080u;
}
void DocumentData_Fetcher::clear_has_title_len() {
  _has_bits_[0] &= ~0x00000080u;
}
void DocumentData_Fetcher::clear_title_len() {
  title_len_ = 0;
  clear_has_title_len();
}
::google::protobuf::int32 DocumentData_Fetcher::title_len() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.title_len)
  return title_len_;
}
void DocumentData_Fetcher::set_title_len(::google::protobuf::int32 value) {
  set_has_title_len();
  title_len_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.title_len)
}

// optional int32 description_len = 8;
bool DocumentData_Fetcher::has_description_len() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DocumentData_Fetcher::set_has_description_len() {
  _has_bits_[0] |= 0x00000100u;
}
void DocumentData_Fetcher::clear_has_description_len() {
  _has_bits_[0] &= ~0x00000100u;
}
void DocumentData_Fetcher::clear_description_len() {
  description_len_ = 0;
  clear_has_description_len();
}
::google::protobuf::int32 DocumentData_Fetcher::description_len() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.description_len)
  return description_len_;
}
void DocumentData_Fetcher::set_description_len(::google::protobuf::int32 value) {
  set_has_description_len();
  description_len_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.description_len)
}

// optional bool has_fulltext = 9;
bool DocumentData_Fetcher::has_has_fulltext() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DocumentData_Fetcher::set_has_has_fulltext() {
  _has_bits_[0] |= 0x00000020u;
}
void DocumentData_Fetcher::clear_has_has_fulltext() {
  _has_bits_[0] &= ~0x00000020u;
}
void DocumentData_Fetcher::clear_has_fulltext() {
  has_fulltext_ = false;
  clear_has_has_fulltext();
}
bool DocumentData_Fetcher::has_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.has_fulltext)
  return has_fulltext_;
}
void DocumentData_Fetcher::set_has_fulltext(bool value) {
  set_has_has_fulltext();
  has_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.has_fulltext)
}

// optional bool has_video = 10;
bool DocumentData_Fetcher::has_has_video() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DocumentData_Fetcher::set_has_has_video() {
  _has_bits_[0] |= 0x00000200u;
}
void DocumentData_Fetcher::clear_has_has_video() {
  _has_bits_[0] &= ~0x00000200u;
}
void DocumentData_Fetcher::clear_has_video() {
  has_video_ = false;
  clear_has_has_video();
}
bool DocumentData_Fetcher::has_video() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.has_video)
  return has_video_;
}
void DocumentData_Fetcher::set_has_video(bool value) {
  set_has_has_video();
  has_video_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.has_video)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_FetcherFirstmeet::kFirstmeetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_FetcherFirstmeet::DocumentData_FetcherFirstmeet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.FetcherFirstmeet)
}
DocumentData_FetcherFirstmeet::DocumentData_FetcherFirstmeet(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.FetcherFirstmeet)
}
DocumentData_FetcherFirstmeet::DocumentData_FetcherFirstmeet(const DocumentData_FetcherFirstmeet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firstmeet_ = from.firstmeet_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.FetcherFirstmeet)
}

void DocumentData_FetcherFirstmeet::SharedCtor() {
  _cached_size_ = 0;
  firstmeet_ = GOOGLE_LONGLONG(0);
}

DocumentData_FetcherFirstmeet::~DocumentData_FetcherFirstmeet() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.FetcherFirstmeet)
  SharedDtor();
}

void DocumentData_FetcherFirstmeet::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_FetcherFirstmeet::ArenaDtor(void* object) {
  DocumentData_FetcherFirstmeet* _this = reinterpret_cast< DocumentData_FetcherFirstmeet* >(object);
  (void)_this;
}
void DocumentData_FetcherFirstmeet::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_FetcherFirstmeet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_FetcherFirstmeet::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_FetcherFirstmeet& DocumentData_FetcherFirstmeet::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_FetcherFirstmeet* DocumentData_FetcherFirstmeet::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_FetcherFirstmeet>(arena);
}

void DocumentData_FetcherFirstmeet::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.FetcherFirstmeet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firstmeet_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_FetcherFirstmeet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.FetcherFirstmeet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 firstmeet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_firstmeet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &firstmeet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.FetcherFirstmeet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.FetcherFirstmeet)
  return false;
#undef DO_
}

void DocumentData_FetcherFirstmeet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.FetcherFirstmeet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 firstmeet = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->firstmeet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.FetcherFirstmeet)
}

::google::protobuf::uint8* DocumentData_FetcherFirstmeet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.FetcherFirstmeet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 firstmeet = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->firstmeet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.FetcherFirstmeet)
  return target;
}

size_t DocumentData_FetcherFirstmeet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.FetcherFirstmeet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int64 firstmeet = 1;
  if (has_firstmeet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->firstmeet());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_FetcherFirstmeet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.FetcherFirstmeet)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_FetcherFirstmeet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_FetcherFirstmeet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.FetcherFirstmeet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.FetcherFirstmeet)
    MergeFrom(*source);
  }
}

void DocumentData_FetcherFirstmeet::MergeFrom(const DocumentData_FetcherFirstmeet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.FetcherFirstmeet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_firstmeet()) {
    set_firstmeet(from.firstmeet());
  }
}

void DocumentData_FetcherFirstmeet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.FetcherFirstmeet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_FetcherFirstmeet::CopyFrom(const DocumentData_FetcherFirstmeet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.FetcherFirstmeet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_FetcherFirstmeet::IsInitialized() const {
  return true;
}

void DocumentData_FetcherFirstmeet::Swap(DocumentData_FetcherFirstmeet* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_FetcherFirstmeet* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_FetcherFirstmeet::UnsafeArenaSwap(DocumentData_FetcherFirstmeet* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_FetcherFirstmeet::InternalSwap(DocumentData_FetcherFirstmeet* other) {
  using std::swap;
  swap(firstmeet_, other->firstmeet_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_FetcherFirstmeet::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_FetcherFirstmeet

// optional int64 firstmeet = 1;
bool DocumentData_FetcherFirstmeet::has_firstmeet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_FetcherFirstmeet::set_has_firstmeet() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_FetcherFirstmeet::clear_has_firstmeet() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_FetcherFirstmeet::clear_firstmeet() {
  firstmeet_ = GOOGLE_LONGLONG(0);
  clear_has_firstmeet();
}
::google::protobuf::int64 DocumentData_FetcherFirstmeet::firstmeet() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherFirstmeet.firstmeet)
  return firstmeet_;
}
void DocumentData_FetcherFirstmeet::set_firstmeet(::google::protobuf::int64 value) {
  set_has_firstmeet();
  firstmeet_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherFirstmeet.firstmeet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_FetcherPubdate::kPubdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_FetcherPubdate::DocumentData_FetcherPubdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.FetcherPubdate)
}
DocumentData_FetcherPubdate::DocumentData_FetcherPubdate(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.FetcherPubdate)
}
DocumentData_FetcherPubdate::DocumentData_FetcherPubdate(const DocumentData_FetcherPubdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubdate_ = from.pubdate_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.FetcherPubdate)
}

void DocumentData_FetcherPubdate::SharedCtor() {
  _cached_size_ = 0;
  pubdate_ = GOOGLE_LONGLONG(0);
}

DocumentData_FetcherPubdate::~DocumentData_FetcherPubdate() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.FetcherPubdate)
  SharedDtor();
}

void DocumentData_FetcherPubdate::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_FetcherPubdate::ArenaDtor(void* object) {
  DocumentData_FetcherPubdate* _this = reinterpret_cast< DocumentData_FetcherPubdate* >(object);
  (void)_this;
}
void DocumentData_FetcherPubdate::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_FetcherPubdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_FetcherPubdate::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_FetcherPubdate& DocumentData_FetcherPubdate::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_FetcherPubdate* DocumentData_FetcherPubdate::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_FetcherPubdate>(arena);
}

void DocumentData_FetcherPubdate::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.FetcherPubdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubdate_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_FetcherPubdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.FetcherPubdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pubdate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pubdate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pubdate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.FetcherPubdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.FetcherPubdate)
  return false;
#undef DO_
}

void DocumentData_FetcherPubdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.FetcherPubdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 pubdate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pubdate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.FetcherPubdate)
}

::google::protobuf::uint8* DocumentData_FetcherPubdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.FetcherPubdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 pubdate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pubdate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.FetcherPubdate)
  return target;
}

size_t DocumentData_FetcherPubdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.FetcherPubdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int64 pubdate = 1;
  if (has_pubdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pubdate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_FetcherPubdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.FetcherPubdate)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_FetcherPubdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_FetcherPubdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.FetcherPubdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.FetcherPubdate)
    MergeFrom(*source);
  }
}

void DocumentData_FetcherPubdate::MergeFrom(const DocumentData_FetcherPubdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.FetcherPubdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pubdate()) {
    set_pubdate(from.pubdate());
  }
}

void DocumentData_FetcherPubdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.FetcherPubdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_FetcherPubdate::CopyFrom(const DocumentData_FetcherPubdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.FetcherPubdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_FetcherPubdate::IsInitialized() const {
  return true;
}

void DocumentData_FetcherPubdate::Swap(DocumentData_FetcherPubdate* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_FetcherPubdate* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_FetcherPubdate::UnsafeArenaSwap(DocumentData_FetcherPubdate* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_FetcherPubdate::InternalSwap(DocumentData_FetcherPubdate* other) {
  using std::swap;
  swap(pubdate_, other->pubdate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_FetcherPubdate::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_FetcherPubdate

// optional int64 pubdate = 1;
bool DocumentData_FetcherPubdate::has_pubdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_FetcherPubdate::set_has_pubdate() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_FetcherPubdate::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_FetcherPubdate::clear_pubdate() {
  pubdate_ = GOOGLE_LONGLONG(0);
  clear_has_pubdate();
}
::google::protobuf::int64 DocumentData_FetcherPubdate::pubdate() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherPubdate.pubdate)
  return pubdate_;
}
void DocumentData_FetcherPubdate::set_pubdate(::google::protobuf::int64 value) {
  set_has_pubdate();
  pubdate_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherPubdate.pubdate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_FetcherGeo::kRegionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_FetcherGeo::DocumentData_FetcherGeo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.FetcherGeo)
}
DocumentData_FetcherGeo::DocumentData_FetcherGeo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.FetcherGeo)
}
DocumentData_FetcherGeo::DocumentData_FetcherGeo(const DocumentData_FetcherGeo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.FetcherGeo)
}

void DocumentData_FetcherGeo::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0u;
}

DocumentData_FetcherGeo::~DocumentData_FetcherGeo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.FetcherGeo)
  SharedDtor();
}

void DocumentData_FetcherGeo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_FetcherGeo::ArenaDtor(void* object) {
  DocumentData_FetcherGeo* _this = reinterpret_cast< DocumentData_FetcherGeo* >(object);
  (void)_this;
}
void DocumentData_FetcherGeo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_FetcherGeo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_FetcherGeo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_FetcherGeo& DocumentData_FetcherGeo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_FetcherGeo* DocumentData_FetcherGeo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_FetcherGeo>(arena);
}

void DocumentData_FetcherGeo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.FetcherGeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_FetcherGeo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.FetcherGeo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 region_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_region_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.FetcherGeo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.FetcherGeo)
  return false;
#undef DO_
}

void DocumentData_FetcherGeo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.FetcherGeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 region_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.FetcherGeo)
}

::google::protobuf::uint8* DocumentData_FetcherGeo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.FetcherGeo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 region_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.FetcherGeo)
  return target;
}

size_t DocumentData_FetcherGeo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.FetcherGeo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 region_id = 1;
  if (has_region_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_FetcherGeo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.FetcherGeo)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_FetcherGeo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_FetcherGeo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.FetcherGeo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.FetcherGeo)
    MergeFrom(*source);
  }
}

void DocumentData_FetcherGeo::MergeFrom(const DocumentData_FetcherGeo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.FetcherGeo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_id()) {
    set_region_id(from.region_id());
  }
}

void DocumentData_FetcherGeo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.FetcherGeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_FetcherGeo::CopyFrom(const DocumentData_FetcherGeo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.FetcherGeo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_FetcherGeo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DocumentData_FetcherGeo::Swap(DocumentData_FetcherGeo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_FetcherGeo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_FetcherGeo::UnsafeArenaSwap(DocumentData_FetcherGeo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_FetcherGeo::InternalSwap(DocumentData_FetcherGeo* other) {
  using std::swap;
  swap(region_id_, other->region_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_FetcherGeo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_FetcherGeo

// required uint32 region_id = 1;
bool DocumentData_FetcherGeo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_FetcherGeo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_FetcherGeo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_FetcherGeo::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
::google::protobuf::uint32 DocumentData_FetcherGeo::region_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherGeo.region_id)
  return region_id_;
}
void DocumentData_FetcherGeo::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherGeo.region_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_FetcherImage::kWidthFieldNumber;
const int DocumentData_FetcherImage::kHeightFieldNumber;
const int DocumentData_FetcherImage::kSimhashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_FetcherImage::DocumentData_FetcherImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.FetcherImage)
}
DocumentData_FetcherImage::DocumentData_FetcherImage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.FetcherImage)
}
DocumentData_FetcherImage::DocumentData_FetcherImage(const DocumentData_FetcherImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&simhash_) -
    reinterpret_cast<char*>(&width_)) + sizeof(simhash_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.FetcherImage)
}

void DocumentData_FetcherImage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simhash_) -
      reinterpret_cast<char*>(&width_)) + sizeof(simhash_));
}

DocumentData_FetcherImage::~DocumentData_FetcherImage() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.FetcherImage)
  SharedDtor();
}

void DocumentData_FetcherImage::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_FetcherImage::ArenaDtor(void* object) {
  DocumentData_FetcherImage* _this = reinterpret_cast< DocumentData_FetcherImage* >(object);
  (void)_this;
}
void DocumentData_FetcherImage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_FetcherImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_FetcherImage::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_FetcherImage& DocumentData_FetcherImage::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_FetcherImage* DocumentData_FetcherImage::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_FetcherImage>(arena);
}

void DocumentData_FetcherImage::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.FetcherImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&simhash_) -
        reinterpret_cast<char*>(&width_)) + sizeof(simhash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_FetcherImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.FetcherImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 simhash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_simhash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &simhash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.FetcherImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.FetcherImage)
  return false;
#undef DO_
}

void DocumentData_FetcherImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.FetcherImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // required int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // required uint64 simhash = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->simhash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.FetcherImage)
}

::google::protobuf::uint8* DocumentData_FetcherImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.FetcherImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // required int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // required uint64 simhash = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->simhash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.FetcherImage)
  return target;
}

size_t DocumentData_FetcherImage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentData.FetcherImage)
  size_t total_size = 0;

  if (has_width()) {
    // required int32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_simhash()) {
    // required uint64 simhash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->simhash());
  }

  return total_size;
}
size_t DocumentData_FetcherImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.FetcherImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

    // required uint64 simhash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->simhash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_FetcherImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.FetcherImage)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_FetcherImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_FetcherImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.FetcherImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.FetcherImage)
    MergeFrom(*source);
  }
}

void DocumentData_FetcherImage::MergeFrom(const DocumentData_FetcherImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.FetcherImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      simhash_ = from.simhash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_FetcherImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.FetcherImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_FetcherImage::CopyFrom(const DocumentData_FetcherImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.FetcherImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_FetcherImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DocumentData_FetcherImage::Swap(DocumentData_FetcherImage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_FetcherImage* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_FetcherImage::UnsafeArenaSwap(DocumentData_FetcherImage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_FetcherImage::InternalSwap(DocumentData_FetcherImage* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(simhash_, other->simhash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_FetcherImage::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_FetcherImage

// required int32 width = 1;
bool DocumentData_FetcherImage::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_FetcherImage::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_FetcherImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_FetcherImage::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 DocumentData_FetcherImage::width() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherImage.width)
  return width_;
}
void DocumentData_FetcherImage::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherImage.width)
}

// required int32 height = 2;
bool DocumentData_FetcherImage::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_FetcherImage::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_FetcherImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_FetcherImage::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 DocumentData_FetcherImage::height() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherImage.height)
  return height_;
}
void DocumentData_FetcherImage::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherImage.height)
}

// required uint64 simhash = 3;
bool DocumentData_FetcherImage::has_simhash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_FetcherImage::set_has_simhash() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_FetcherImage::clear_has_simhash() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_FetcherImage::clear_simhash() {
  simhash_ = GOOGLE_ULONGLONG(0);
  clear_has_simhash();
}
::google::protobuf::uint64 DocumentData_FetcherImage::simhash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherImage.simhash)
  return simhash_;
}
void DocumentData_FetcherImage::set_simhash(::google::protobuf::uint64 value) {
  set_has_simhash();
  simhash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherImage.simhash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocState::kBannedFieldNumber;
const int DocumentData_DocState::kShadowedFieldNumber;
const int DocumentData_DocState::kDisabledInChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocState::DocumentData_DocState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocState)
}
DocumentData_DocState::DocumentData_DocState(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocState)
}
DocumentData_DocState::DocumentData_DocState(const DocumentData_DocState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&banned_, &from.banned_,
    static_cast<size_t>(reinterpret_cast<char*>(&disabled_in_channel_) -
    reinterpret_cast<char*>(&banned_)) + sizeof(disabled_in_channel_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocState)
}

void DocumentData_DocState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&banned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_in_channel_) -
      reinterpret_cast<char*>(&banned_)) + sizeof(disabled_in_channel_));
}

DocumentData_DocState::~DocumentData_DocState() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocState)
  SharedDtor();
}

void DocumentData_DocState::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_DocState::ArenaDtor(void* object) {
  DocumentData_DocState* _this = reinterpret_cast< DocumentData_DocState* >(object);
  (void)_this;
}
void DocumentData_DocState::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocState::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocState& DocumentData_DocState::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocState* DocumentData_DocState::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocState>(arena);
}

void DocumentData_DocState::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&banned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disabled_in_channel_) -
        reinterpret_cast<char*>(&banned_)) + sizeof(disabled_in_channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool banned = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool shadowed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_shadowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shadowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool disabled_in_channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_disabled_in_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disabled_in_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocState)
  return false;
#undef DO_
}

void DocumentData_DocState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool banned = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->banned(), output);
  }

  // required bool shadowed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->shadowed(), output);
  }

  // required bool disabled_in_channel = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->disabled_in_channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocState)
}

::google::protobuf::uint8* DocumentData_DocState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool banned = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->banned(), target);
  }

  // required bool shadowed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->shadowed(), target);
  }

  // required bool disabled_in_channel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->disabled_in_channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocState)
  return target;
}

size_t DocumentData_DocState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentData.DocState)
  size_t total_size = 0;

  if (has_banned()) {
    // required bool banned = 1;
    total_size += 1 + 1;
  }

  if (has_shadowed()) {
    // required bool shadowed = 2;
    total_size += 1 + 1;
  }

  if (has_disabled_in_channel()) {
    // required bool disabled_in_channel = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DocumentData_DocState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bool banned = 1;
    total_size += 1 + 1;

    // required bool shadowed = 2;
    total_size += 1 + 1;

    // required bool disabled_in_channel = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocState)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocState)
    MergeFrom(*source);
  }
}

void DocumentData_DocState::MergeFrom(const DocumentData_DocState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      banned_ = from.banned_;
    }
    if (cached_has_bits & 0x00000002u) {
      shadowed_ = from.shadowed_;
    }
    if (cached_has_bits & 0x00000004u) {
      disabled_in_channel_ = from.disabled_in_channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_DocState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocState::CopyFrom(const DocumentData_DocState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DocumentData_DocState::Swap(DocumentData_DocState* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocState* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocState::UnsafeArenaSwap(DocumentData_DocState* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocState::InternalSwap(DocumentData_DocState* other) {
  using std::swap;
  swap(banned_, other->banned_);
  swap(shadowed_, other->shadowed_);
  swap(disabled_in_channel_, other->disabled_in_channel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocState::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocState

// required bool banned = 1;
bool DocumentData_DocState::has_banned() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocState::set_has_banned() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocState::clear_has_banned() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocState::clear_banned() {
  banned_ = false;
  clear_has_banned();
}
bool DocumentData_DocState::banned() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocState.banned)
  return banned_;
}
void DocumentData_DocState::set_banned(bool value) {
  set_has_banned();
  banned_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocState.banned)
}

// required bool shadowed = 2;
bool DocumentData_DocState::has_shadowed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_DocState::set_has_shadowed() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_DocState::clear_has_shadowed() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_DocState::clear_shadowed() {
  shadowed_ = false;
  clear_has_shadowed();
}
bool DocumentData_DocState::shadowed() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocState.shadowed)
  return shadowed_;
}
void DocumentData_DocState::set_shadowed(bool value) {
  set_has_shadowed();
  shadowed_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocState.shadowed)
}

// required bool disabled_in_channel = 3;
bool DocumentData_DocState::has_disabled_in_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_DocState::set_has_disabled_in_channel() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_DocState::clear_has_disabled_in_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_DocState::clear_disabled_in_channel() {
  disabled_in_channel_ = false;
  clear_has_disabled_in_channel();
}
bool DocumentData_DocState::disabled_in_channel() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocState.disabled_in_channel)
  return disabled_in_channel_;
}
void DocumentData_DocState::set_disabled_in_channel(bool value) {
  set_has_disabled_in_channel();
  disabled_in_channel_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocState.disabled_in_channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_TopicPeriodStats::kAllLikesFieldNumber;
const int DocumentData_TopicPeriodStats::kPeriodLikesFieldNumber;
const int DocumentData_TopicPeriodStats::kPeriodClicksFieldNumber;
const int DocumentData_TopicPeriodStats::kPeriodResharesFieldNumber;
const int DocumentData_TopicPeriodStats::kPeriodCommentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_TopicPeriodStats::DocumentData_TopicPeriodStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.TopicPeriodStats)
}
DocumentData_TopicPeriodStats::DocumentData_TopicPeriodStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.TopicPeriodStats)
}
DocumentData_TopicPeriodStats::DocumentData_TopicPeriodStats(const DocumentData_TopicPeriodStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&all_likes_, &from.all_likes_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_comments_) -
    reinterpret_cast<char*>(&all_likes_)) + sizeof(period_comments_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.TopicPeriodStats)
}

void DocumentData_TopicPeriodStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&all_likes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_comments_) -
      reinterpret_cast<char*>(&all_likes_)) + sizeof(period_comments_));
}

DocumentData_TopicPeriodStats::~DocumentData_TopicPeriodStats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.TopicPeriodStats)
  SharedDtor();
}

void DocumentData_TopicPeriodStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_TopicPeriodStats::ArenaDtor(void* object) {
  DocumentData_TopicPeriodStats* _this = reinterpret_cast< DocumentData_TopicPeriodStats* >(object);
  (void)_this;
}
void DocumentData_TopicPeriodStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_TopicPeriodStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_TopicPeriodStats::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_TopicPeriodStats& DocumentData_TopicPeriodStats::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_TopicPeriodStats* DocumentData_TopicPeriodStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_TopicPeriodStats>(arena);
}

void DocumentData_TopicPeriodStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.TopicPeriodStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&all_likes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&period_comments_) -
        reinterpret_cast<char*>(&all_likes_)) + sizeof(period_comments_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_TopicPeriodStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.TopicPeriodStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 all_likes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_all_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_likes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_period_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_clicks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_period_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_reshares = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_period_reshares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_reshares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_comments = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_period_comments();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_comments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.TopicPeriodStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.TopicPeriodStats)
  return false;
#undef DO_
}

void DocumentData_TopicPeriodStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.TopicPeriodStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 all_likes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->all_likes(), output);
  }

  // optional int64 period_likes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->period_likes(), output);
  }

  // optional int64 period_clicks = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->period_clicks(), output);
  }

  // optional int64 period_reshares = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->period_reshares(), output);
  }

  // optional int64 period_comments = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->period_comments(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.TopicPeriodStats)
}

::google::protobuf::uint8* DocumentData_TopicPeriodStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.TopicPeriodStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 all_likes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->all_likes(), target);
  }

  // optional int64 period_likes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->period_likes(), target);
  }

  // optional int64 period_clicks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->period_clicks(), target);
  }

  // optional int64 period_reshares = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->period_reshares(), target);
  }

  // optional int64 period_comments = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->period_comments(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.TopicPeriodStats)
  return target;
}

size_t DocumentData_TopicPeriodStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.TopicPeriodStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 all_likes = 1;
    if (has_all_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->all_likes());
    }

    // optional int64 period_likes = 2;
    if (has_period_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->period_likes());
    }

    // optional int64 period_clicks = 3;
    if (has_period_clicks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->period_clicks());
    }

    // optional int64 period_reshares = 4;
    if (has_period_reshares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->period_reshares());
    }

    // optional int64 period_comments = 5;
    if (has_period_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->period_comments());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_TopicPeriodStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.TopicPeriodStats)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_TopicPeriodStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_TopicPeriodStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.TopicPeriodStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.TopicPeriodStats)
    MergeFrom(*source);
  }
}

void DocumentData_TopicPeriodStats::MergeFrom(const DocumentData_TopicPeriodStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.TopicPeriodStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      all_likes_ = from.all_likes_;
    }
    if (cached_has_bits & 0x00000002u) {
      period_likes_ = from.period_likes_;
    }
    if (cached_has_bits & 0x00000004u) {
      period_clicks_ = from.period_clicks_;
    }
    if (cached_has_bits & 0x00000008u) {
      period_reshares_ = from.period_reshares_;
    }
    if (cached_has_bits & 0x00000010u) {
      period_comments_ = from.period_comments_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_TopicPeriodStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.TopicPeriodStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_TopicPeriodStats::CopyFrom(const DocumentData_TopicPeriodStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.TopicPeriodStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_TopicPeriodStats::IsInitialized() const {
  return true;
}

void DocumentData_TopicPeriodStats::Swap(DocumentData_TopicPeriodStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_TopicPeriodStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_TopicPeriodStats::UnsafeArenaSwap(DocumentData_TopicPeriodStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_TopicPeriodStats::InternalSwap(DocumentData_TopicPeriodStats* other) {
  using std::swap;
  swap(all_likes_, other->all_likes_);
  swap(period_likes_, other->period_likes_);
  swap(period_clicks_, other->period_clicks_);
  swap(period_reshares_, other->period_reshares_);
  swap(period_comments_, other->period_comments_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_TopicPeriodStats::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_TopicPeriodStats

// optional int64 all_likes = 1;
bool DocumentData_TopicPeriodStats::has_all_likes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_TopicPeriodStats::set_has_all_likes() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_TopicPeriodStats::clear_has_all_likes() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_TopicPeriodStats::clear_all_likes() {
  all_likes_ = GOOGLE_LONGLONG(0);
  clear_has_all_likes();
}
::google::protobuf::int64 DocumentData_TopicPeriodStats::all_likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicPeriodStats.all_likes)
  return all_likes_;
}
void DocumentData_TopicPeriodStats::set_all_likes(::google::protobuf::int64 value) {
  set_has_all_likes();
  all_likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicPeriodStats.all_likes)
}

// optional int64 period_likes = 2;
bool DocumentData_TopicPeriodStats::has_period_likes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_TopicPeriodStats::set_has_period_likes() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_TopicPeriodStats::clear_has_period_likes() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_TopicPeriodStats::clear_period_likes() {
  period_likes_ = GOOGLE_LONGLONG(0);
  clear_has_period_likes();
}
::google::protobuf::int64 DocumentData_TopicPeriodStats::period_likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicPeriodStats.period_likes)
  return period_likes_;
}
void DocumentData_TopicPeriodStats::set_period_likes(::google::protobuf::int64 value) {
  set_has_period_likes();
  period_likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicPeriodStats.period_likes)
}

// optional int64 period_clicks = 3;
bool DocumentData_TopicPeriodStats::has_period_clicks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_TopicPeriodStats::set_has_period_clicks() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_TopicPeriodStats::clear_has_period_clicks() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_TopicPeriodStats::clear_period_clicks() {
  period_clicks_ = GOOGLE_LONGLONG(0);
  clear_has_period_clicks();
}
::google::protobuf::int64 DocumentData_TopicPeriodStats::period_clicks() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicPeriodStats.period_clicks)
  return period_clicks_;
}
void DocumentData_TopicPeriodStats::set_period_clicks(::google::protobuf::int64 value) {
  set_has_period_clicks();
  period_clicks_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicPeriodStats.period_clicks)
}

// optional int64 period_reshares = 4;
bool DocumentData_TopicPeriodStats::has_period_reshares() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentData_TopicPeriodStats::set_has_period_reshares() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentData_TopicPeriodStats::clear_has_period_reshares() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentData_TopicPeriodStats::clear_period_reshares() {
  period_reshares_ = GOOGLE_LONGLONG(0);
  clear_has_period_reshares();
}
::google::protobuf::int64 DocumentData_TopicPeriodStats::period_reshares() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicPeriodStats.period_reshares)
  return period_reshares_;
}
void DocumentData_TopicPeriodStats::set_period_reshares(::google::protobuf::int64 value) {
  set_has_period_reshares();
  period_reshares_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicPeriodStats.period_reshares)
}

// optional int64 period_comments = 5;
bool DocumentData_TopicPeriodStats::has_period_comments() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentData_TopicPeriodStats::set_has_period_comments() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentData_TopicPeriodStats::clear_has_period_comments() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentData_TopicPeriodStats::clear_period_comments() {
  period_comments_ = GOOGLE_LONGLONG(0);
  clear_has_period_comments();
}
::google::protobuf::int64 DocumentData_TopicPeriodStats::period_comments() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicPeriodStats.period_comments)
  return period_comments_;
}
void DocumentData_TopicPeriodStats::set_period_comments(::google::protobuf::int64 value) {
  set_has_period_comments();
  period_comments_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicPeriodStats.period_comments)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_AppFilterStats::kVersionFieldNumber;
const int DocumentData_AppFilterStats::kShowsFieldNumber;
const int DocumentData_AppFilterStats::kClicksFieldNumber;
const int DocumentData_AppFilterStats::kLikesFieldNumber;
const int DocumentData_AppFilterStats::kSharesFieldNumber;
const int DocumentData_AppFilterStats::kDislikesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_AppFilterStats::DocumentData_AppFilterStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.AppFilterStats)
}
DocumentData_AppFilterStats::DocumentData_AppFilterStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.AppFilterStats)
}
DocumentData_AppFilterStats::DocumentData_AppFilterStats(const DocumentData_AppFilterStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&dislikes_) -
    reinterpret_cast<char*>(&version_)) + sizeof(dislikes_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.AppFilterStats)
}

void DocumentData_AppFilterStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dislikes_) -
      reinterpret_cast<char*>(&version_)) + sizeof(dislikes_));
}

DocumentData_AppFilterStats::~DocumentData_AppFilterStats() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.AppFilterStats)
  SharedDtor();
}

void DocumentData_AppFilterStats::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_AppFilterStats::ArenaDtor(void* object) {
  DocumentData_AppFilterStats* _this = reinterpret_cast< DocumentData_AppFilterStats* >(object);
  (void)_this;
}
void DocumentData_AppFilterStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_AppFilterStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_AppFilterStats::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_AppFilterStats& DocumentData_AppFilterStats::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_AppFilterStats* DocumentData_AppFilterStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_AppFilterStats>(arena);
}

void DocumentData_AppFilterStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.AppFilterStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dislikes_) -
        reinterpret_cast<char*>(&version_)) + sizeof(dislikes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_AppFilterStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.AppFilterStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 shows = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_shows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 clicks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 likes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_likes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &likes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shares = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_shares();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shares_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dislikes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_dislikes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dislikes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.AppFilterStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.AppFilterStats)
  return false;
#undef DO_
}

void DocumentData_AppFilterStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.AppFilterStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required int32 shows = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shows(), output);
  }

  // required int32 clicks = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clicks(), output);
  }

  // optional int32 likes = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->likes(), output);
  }

  // optional int32 shares = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->shares(), output);
  }

  // optional int32 dislikes = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dislikes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.AppFilterStats)
}

::google::protobuf::uint8* DocumentData_AppFilterStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.AppFilterStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required int32 shows = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shows(), target);
  }

  // required int32 clicks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clicks(), target);
  }

  // optional int32 likes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->likes(), target);
  }

  // optional int32 shares = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->shares(), target);
  }

  // optional int32 dislikes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dislikes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.AppFilterStats)
  return target;
}

size_t DocumentData_AppFilterStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentData.AppFilterStats)
  size_t total_size = 0;

  if (has_version()) {
    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  if (has_shows()) {
    // required int32 shows = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shows());
  }

  if (has_clicks()) {
    // required int32 clicks = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clicks());
  }

  return total_size;
}
size_t DocumentData_AppFilterStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.AppFilterStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

    // required int32 shows = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shows());

    // required int32 clicks = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->clicks());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 56u) {
    // optional int32 likes = 4;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->likes());
    }

    // optional int32 shares = 5;
    if (has_shares()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shares());
    }

    // optional int32 dislikes = 6;
    if (has_dislikes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dislikes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_AppFilterStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.AppFilterStats)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_AppFilterStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_AppFilterStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.AppFilterStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.AppFilterStats)
    MergeFrom(*source);
  }
}

void DocumentData_AppFilterStats::MergeFrom(const DocumentData_AppFilterStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.AppFilterStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      shows_ = from.shows_;
    }
    if (cached_has_bits & 0x00000004u) {
      clicks_ = from.clicks_;
    }
    if (cached_has_bits & 0x00000008u) {
      likes_ = from.likes_;
    }
    if (cached_has_bits & 0x00000010u) {
      shares_ = from.shares_;
    }
    if (cached_has_bits & 0x00000020u) {
      dislikes_ = from.dislikes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_AppFilterStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.AppFilterStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_AppFilterStats::CopyFrom(const DocumentData_AppFilterStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.AppFilterStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_AppFilterStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DocumentData_AppFilterStats::Swap(DocumentData_AppFilterStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_AppFilterStats* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_AppFilterStats::UnsafeArenaSwap(DocumentData_AppFilterStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_AppFilterStats::InternalSwap(DocumentData_AppFilterStats* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(shows_, other->shows_);
  swap(clicks_, other->clicks_);
  swap(likes_, other->likes_);
  swap(shares_, other->shares_);
  swap(dislikes_, other->dislikes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_AppFilterStats::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_AppFilterStats

// required uint32 version = 1;
bool DocumentData_AppFilterStats::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_AppFilterStats::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_AppFilterStats::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_AppFilterStats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 DocumentData_AppFilterStats::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.version)
  return version_;
}
void DocumentData_AppFilterStats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.version)
}

// required int32 shows = 2;
bool DocumentData_AppFilterStats::has_shows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_AppFilterStats::set_has_shows() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_AppFilterStats::clear_has_shows() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_AppFilterStats::clear_shows() {
  shows_ = 0;
  clear_has_shows();
}
::google::protobuf::int32 DocumentData_AppFilterStats::shows() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.shows)
  return shows_;
}
void DocumentData_AppFilterStats::set_shows(::google::protobuf::int32 value) {
  set_has_shows();
  shows_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.shows)
}

// required int32 clicks = 3;
bool DocumentData_AppFilterStats::has_clicks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_AppFilterStats::set_has_clicks() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_AppFilterStats::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_AppFilterStats::clear_clicks() {
  clicks_ = 0;
  clear_has_clicks();
}
::google::protobuf::int32 DocumentData_AppFilterStats::clicks() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.clicks)
  return clicks_;
}
void DocumentData_AppFilterStats::set_clicks(::google::protobuf::int32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.clicks)
}

// optional int32 likes = 4;
bool DocumentData_AppFilterStats::has_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentData_AppFilterStats::set_has_likes() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentData_AppFilterStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentData_AppFilterStats::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
::google::protobuf::int32 DocumentData_AppFilterStats::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.likes)
  return likes_;
}
void DocumentData_AppFilterStats::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.likes)
}

// optional int32 shares = 5;
bool DocumentData_AppFilterStats::has_shares() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentData_AppFilterStats::set_has_shares() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentData_AppFilterStats::clear_has_shares() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentData_AppFilterStats::clear_shares() {
  shares_ = 0;
  clear_has_shares();
}
::google::protobuf::int32 DocumentData_AppFilterStats::shares() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.shares)
  return shares_;
}
void DocumentData_AppFilterStats::set_shares(::google::protobuf::int32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.shares)
}

// optional int32 dislikes = 6;
bool DocumentData_AppFilterStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DocumentData_AppFilterStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000020u;
}
void DocumentData_AppFilterStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000020u;
}
void DocumentData_AppFilterStats::clear_dislikes() {
  dislikes_ = 0;
  clear_has_dislikes();
}
::google::protobuf::int32 DocumentData_AppFilterStats::dislikes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.dislikes)
  return dislikes_;
}
void DocumentData_AppFilterStats::set_dislikes(::google::protobuf::int32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.dislikes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocumentEventStat_GeoEventStat::kGeoFieldNumber;
const int DocumentData_DocumentEventStat_GeoEventStat::kEventsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocumentEventStat_GeoEventStat::DocumentData_DocumentEventStat_GeoEventStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
}
DocumentData_DocumentEventStat_GeoEventStat::DocumentData_DocumentEventStat_GeoEventStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
}
DocumentData_DocumentEventStat_GeoEventStat::DocumentData_DocumentEventStat_GeoEventStat(const DocumentData_DocumentEventStat_GeoEventStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&geo_, &from.geo_,
    static_cast<size_t>(reinterpret_cast<char*>(&events_count_) -
    reinterpret_cast<char*>(&geo_)) + sizeof(events_count_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
}

void DocumentData_DocumentEventStat_GeoEventStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&geo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&events_count_) -
      reinterpret_cast<char*>(&geo_)) + sizeof(events_count_));
}

DocumentData_DocumentEventStat_GeoEventStat::~DocumentData_DocumentEventStat_GeoEventStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  SharedDtor();
}

void DocumentData_DocumentEventStat_GeoEventStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_DocumentEventStat_GeoEventStat::ArenaDtor(void* object) {
  DocumentData_DocumentEventStat_GeoEventStat* _this = reinterpret_cast< DocumentData_DocumentEventStat_GeoEventStat* >(object);
  (void)_this;
}
void DocumentData_DocumentEventStat_GeoEventStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocumentEventStat_GeoEventStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocumentEventStat_GeoEventStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocumentEventStat_GeoEventStat& DocumentData_DocumentEventStat_GeoEventStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocumentEventStat_GeoEventStat* DocumentData_DocumentEventStat_GeoEventStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocumentEventStat_GeoEventStat>(arena);
}

void DocumentData_DocumentEventStat_GeoEventStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&geo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&events_count_) -
        reinterpret_cast<char*>(&geo_)) + sizeof(events_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocumentEventStat_GeoEventStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 geo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_geo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &geo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 events_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_events_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &events_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  return false;
#undef DO_
}

void DocumentData_DocumentEventStat_GeoEventStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->geo(), output);
  }

  // required uint32 events_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->events_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
}

::google::protobuf::uint8* DocumentData_DocumentEventStat_GeoEventStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 geo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->geo(), target);
  }

  // required uint32 events_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->events_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  return target;
}

size_t DocumentData_DocumentEventStat_GeoEventStat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  size_t total_size = 0;

  if (has_geo()) {
    // required uint32 geo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());
  }

  if (has_events_count()) {
    // required uint32 events_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->events_count());
  }

  return total_size;
}
size_t DocumentData_DocumentEventStat_GeoEventStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 geo = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->geo());

    // required uint32 events_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->events_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocumentEventStat_GeoEventStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocumentEventStat_GeoEventStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocumentEventStat_GeoEventStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
    MergeFrom(*source);
  }
}

void DocumentData_DocumentEventStat_GeoEventStat::MergeFrom(const DocumentData_DocumentEventStat_GeoEventStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      geo_ = from.geo_;
    }
    if (cached_has_bits & 0x00000002u) {
      events_count_ = from.events_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_DocumentEventStat_GeoEventStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocumentEventStat_GeoEventStat::CopyFrom(const DocumentData_DocumentEventStat_GeoEventStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocumentEventStat_GeoEventStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DocumentData_DocumentEventStat_GeoEventStat::Swap(DocumentData_DocumentEventStat_GeoEventStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocumentEventStat_GeoEventStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocumentEventStat_GeoEventStat::UnsafeArenaSwap(DocumentData_DocumentEventStat_GeoEventStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocumentEventStat_GeoEventStat::InternalSwap(DocumentData_DocumentEventStat_GeoEventStat* other) {
  using std::swap;
  swap(geo_, other->geo_);
  swap(events_count_, other->events_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocumentEventStat_GeoEventStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocumentEventStat_GeoEventStat

// required uint32 geo = 1;
bool DocumentData_DocumentEventStat_GeoEventStat::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocumentEventStat_GeoEventStat::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocumentEventStat_GeoEventStat::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocumentEventStat_GeoEventStat::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
::google::protobuf::uint32 DocumentData_DocumentEventStat_GeoEventStat::geo() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat.geo)
  return geo_;
}
void DocumentData_DocumentEventStat_GeoEventStat::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat.geo)
}

// required uint32 events_count = 2;
bool DocumentData_DocumentEventStat_GeoEventStat::has_events_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_DocumentEventStat_GeoEventStat::set_has_events_count() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_DocumentEventStat_GeoEventStat::clear_has_events_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_DocumentEventStat_GeoEventStat::clear_events_count() {
  events_count_ = 0u;
  clear_has_events_count();
}
::google::protobuf::uint32 DocumentData_DocumentEventStat_GeoEventStat::events_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat.events_count)
  return events_count_;
}
void DocumentData_DocumentEventStat_GeoEventStat::set_events_count(::google::protobuf::uint32 value) {
  set_has_events_count();
  events_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat.events_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocumentEventStat_SocDemEventStat::kSocdemIdFieldNumber;
const int DocumentData_DocumentEventStat_SocDemEventStat::kEventsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocumentEventStat_SocDemEventStat::DocumentData_DocumentEventStat_SocDemEventStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
}
DocumentData_DocumentEventStat_SocDemEventStat::DocumentData_DocumentEventStat_SocDemEventStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
}
DocumentData_DocumentEventStat_SocDemEventStat::DocumentData_DocumentEventStat_SocDemEventStat(const DocumentData_DocumentEventStat_SocDemEventStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&socdem_id_, &from.socdem_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&events_count_) -
    reinterpret_cast<char*>(&socdem_id_)) + sizeof(events_count_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
}

void DocumentData_DocumentEventStat_SocDemEventStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&socdem_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&events_count_) -
      reinterpret_cast<char*>(&socdem_id_)) + sizeof(events_count_));
}

DocumentData_DocumentEventStat_SocDemEventStat::~DocumentData_DocumentEventStat_SocDemEventStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  SharedDtor();
}

void DocumentData_DocumentEventStat_SocDemEventStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_DocumentEventStat_SocDemEventStat::ArenaDtor(void* object) {
  DocumentData_DocumentEventStat_SocDemEventStat* _this = reinterpret_cast< DocumentData_DocumentEventStat_SocDemEventStat* >(object);
  (void)_this;
}
void DocumentData_DocumentEventStat_SocDemEventStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocumentEventStat_SocDemEventStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocumentEventStat_SocDemEventStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocumentEventStat_SocDemEventStat& DocumentData_DocumentEventStat_SocDemEventStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocumentEventStat_SocDemEventStat* DocumentData_DocumentEventStat_SocDemEventStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocumentEventStat_SocDemEventStat>(arena);
}

void DocumentData_DocumentEventStat_SocDemEventStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&socdem_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&events_count_) -
        reinterpret_cast<char*>(&socdem_id_)) + sizeof(events_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocumentEventStat_SocDemEventStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 socdem_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_socdem_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socdem_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 events_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_events_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &events_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  return false;
#undef DO_
}

void DocumentData_DocumentEventStat_SocDemEventStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 socdem_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->socdem_id(), output);
  }

  // required uint32 events_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->events_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
}

::google::protobuf::uint8* DocumentData_DocumentEventStat_SocDemEventStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 socdem_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->socdem_id(), target);
  }

  // required uint32 events_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->events_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  return target;
}

size_t DocumentData_DocumentEventStat_SocDemEventStat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  size_t total_size = 0;

  if (has_socdem_id()) {
    // required uint32 socdem_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socdem_id());
  }

  if (has_events_count()) {
    // required uint32 events_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->events_count());
  }

  return total_size;
}
size_t DocumentData_DocumentEventStat_SocDemEventStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 socdem_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socdem_id());

    // required uint32 events_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->events_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocumentEventStat_SocDemEventStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocumentEventStat_SocDemEventStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocumentEventStat_SocDemEventStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
    MergeFrom(*source);
  }
}

void DocumentData_DocumentEventStat_SocDemEventStat::MergeFrom(const DocumentData_DocumentEventStat_SocDemEventStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      socdem_id_ = from.socdem_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      events_count_ = from.events_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_DocumentEventStat_SocDemEventStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocumentEventStat_SocDemEventStat::CopyFrom(const DocumentData_DocumentEventStat_SocDemEventStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocumentEventStat_SocDemEventStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DocumentData_DocumentEventStat_SocDemEventStat::Swap(DocumentData_DocumentEventStat_SocDemEventStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocumentEventStat_SocDemEventStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocumentEventStat_SocDemEventStat::UnsafeArenaSwap(DocumentData_DocumentEventStat_SocDemEventStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocumentEventStat_SocDemEventStat::InternalSwap(DocumentData_DocumentEventStat_SocDemEventStat* other) {
  using std::swap;
  swap(socdem_id_, other->socdem_id_);
  swap(events_count_, other->events_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocumentEventStat_SocDemEventStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocumentEventStat_SocDemEventStat

// required uint32 socdem_id = 1;
bool DocumentData_DocumentEventStat_SocDemEventStat::has_socdem_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocumentEventStat_SocDemEventStat::set_has_socdem_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocumentEventStat_SocDemEventStat::clear_has_socdem_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocumentEventStat_SocDemEventStat::clear_socdem_id() {
  socdem_id_ = 0u;
  clear_has_socdem_id();
}
::google::protobuf::uint32 DocumentData_DocumentEventStat_SocDemEventStat::socdem_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat.socdem_id)
  return socdem_id_;
}
void DocumentData_DocumentEventStat_SocDemEventStat::set_socdem_id(::google::protobuf::uint32 value) {
  set_has_socdem_id();
  socdem_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat.socdem_id)
}

// required uint32 events_count = 2;
bool DocumentData_DocumentEventStat_SocDemEventStat::has_events_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_DocumentEventStat_SocDemEventStat::set_has_events_count() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_DocumentEventStat_SocDemEventStat::clear_has_events_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_DocumentEventStat_SocDemEventStat::clear_events_count() {
  events_count_ = 0u;
  clear_has_events_count();
}
::google::protobuf::uint32 DocumentData_DocumentEventStat_SocDemEventStat::events_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat.events_count)
  return events_count_;
}
void DocumentData_DocumentEventStat_SocDemEventStat::set_events_count(::google::protobuf::uint32 value) {
  set_has_events_count();
  events_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat.events_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocumentEventStat::kEventsCountFieldNumber;
const int DocumentData_DocumentEventStat::kGeoStatFieldNumber;
const int DocumentData_DocumentEventStat::kSocDemStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocumentEventStat::DocumentData_DocumentEventStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocumentEventStat)
}
DocumentData_DocumentEventStat::DocumentData_DocumentEventStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  geo_stat_(arena),
  soc_dem_stat_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocumentEventStat)
}
DocumentData_DocumentEventStat::DocumentData_DocumentEventStat(const DocumentData_DocumentEventStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      geo_stat_(from.geo_stat_),
      soc_dem_stat_(from.soc_dem_stat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  events_count_ = from.events_count_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocumentEventStat)
}

void DocumentData_DocumentEventStat::SharedCtor() {
  _cached_size_ = 0;
  events_count_ = 0u;
}

DocumentData_DocumentEventStat::~DocumentData_DocumentEventStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocumentEventStat)
  SharedDtor();
}

void DocumentData_DocumentEventStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_DocumentEventStat::ArenaDtor(void* object) {
  DocumentData_DocumentEventStat* _this = reinterpret_cast< DocumentData_DocumentEventStat* >(object);
  (void)_this;
}
void DocumentData_DocumentEventStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocumentEventStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocumentEventStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocumentEventStat& DocumentData_DocumentEventStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocumentEventStat* DocumentData_DocumentEventStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocumentEventStat>(arena);
}

void DocumentData_DocumentEventStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocumentEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_stat_.Clear();
  soc_dem_stat_.Clear();
  events_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocumentEventStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocumentEventStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 events_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_events_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &events_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat geo_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_geo_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat soc_dem_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soc_dem_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocumentEventStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocumentEventStat)
  return false;
#undef DO_
}

void DocumentData_DocumentEventStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocumentEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 events_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->events_count(), output);
  }

  // repeated .cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat geo_stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geo_stat(static_cast<int>(i)), output);
  }

  // repeated .cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat soc_dem_stat = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->soc_dem_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->soc_dem_stat(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocumentEventStat)
}

::google::protobuf::uint8* DocumentData_DocumentEventStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocumentEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 events_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->events_count(), target);
  }

  // repeated .cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat geo_stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->geo_stat(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat soc_dem_stat = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->soc_dem_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->soc_dem_stat(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocumentEventStat)
  return target;
}

size_t DocumentData_DocumentEventStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocumentEventStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 events_count = 1;
  if (has_events_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->events_count());
  }
  // repeated .cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat geo_stat = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->geo_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_stat(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat soc_dem_stat = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->soc_dem_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soc_dem_stat(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocumentEventStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocumentEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocumentEventStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocumentEventStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocumentEventStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocumentEventStat)
    MergeFrom(*source);
  }
}

void DocumentData_DocumentEventStat::MergeFrom(const DocumentData_DocumentEventStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocumentEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_stat_.MergeFrom(from.geo_stat_);
  soc_dem_stat_.MergeFrom(from.soc_dem_stat_);
  if (from.has_events_count()) {
    set_events_count(from.events_count());
  }
}

void DocumentData_DocumentEventStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocumentEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocumentEventStat::CopyFrom(const DocumentData_DocumentEventStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocumentEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocumentEventStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->geo_stat())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->soc_dem_stat())) return false;
  return true;
}

void DocumentData_DocumentEventStat::Swap(DocumentData_DocumentEventStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocumentEventStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocumentEventStat::UnsafeArenaSwap(DocumentData_DocumentEventStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocumentEventStat::InternalSwap(DocumentData_DocumentEventStat* other) {
  using std::swap;
  geo_stat_.InternalSwap(&other->geo_stat_);
  soc_dem_stat_.InternalSwap(&other->soc_dem_stat_);
  swap(events_count_, other->events_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocumentEventStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocumentEventStat

// required uint32 events_count = 1;
bool DocumentData_DocumentEventStat::has_events_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocumentEventStat::set_has_events_count() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocumentEventStat::clear_has_events_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocumentEventStat::clear_events_count() {
  events_count_ = 0u;
  clear_has_events_count();
}
::google::protobuf::uint32 DocumentData_DocumentEventStat::events_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.events_count)
  return events_count_;
}
void DocumentData_DocumentEventStat::set_events_count(::google::protobuf::uint32 value) {
  set_has_events_count();
  events_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentEventStat.events_count)
}

// repeated .cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat geo_stat = 2;
int DocumentData_DocumentEventStat::geo_stat_size() const {
  return geo_stat_.size();
}
void DocumentData_DocumentEventStat::clear_geo_stat() {
  geo_stat_.Clear();
}
const ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat& DocumentData_DocumentEventStat::geo_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.geo_stat)
  return geo_stat_.Get(index);
}
::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat* DocumentData_DocumentEventStat::mutable_geo_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentEventStat.geo_stat)
  return geo_stat_.Mutable(index);
}
::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat* DocumentData_DocumentEventStat::add_geo_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentEventStat.geo_stat)
  return geo_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat >*
DocumentData_DocumentEventStat::mutable_geo_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentEventStat.geo_stat)
  return &geo_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat >&
DocumentData_DocumentEventStat::geo_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentEventStat.geo_stat)
  return geo_stat_;
}

// repeated .cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat soc_dem_stat = 3;
int DocumentData_DocumentEventStat::soc_dem_stat_size() const {
  return soc_dem_stat_.size();
}
void DocumentData_DocumentEventStat::clear_soc_dem_stat() {
  soc_dem_stat_.Clear();
}
const ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat& DocumentData_DocumentEventStat::soc_dem_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.soc_dem_stat)
  return soc_dem_stat_.Get(index);
}
::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat* DocumentData_DocumentEventStat::mutable_soc_dem_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentEventStat.soc_dem_stat)
  return soc_dem_stat_.Mutable(index);
}
::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat* DocumentData_DocumentEventStat::add_soc_dem_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentEventStat.soc_dem_stat)
  return soc_dem_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat >*
DocumentData_DocumentEventStat::mutable_soc_dem_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentEventStat.soc_dem_stat)
  return &soc_dem_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat >&
DocumentData_DocumentEventStat::soc_dem_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentEventStat.soc_dem_stat)
  return soc_dem_stat_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DocumentData_TopicEventStat::_slow_mutable_likes_stat() {
  likes_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::_slow_release_likes_stat() {
  if (likes_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*likes_stat_);
    likes_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::unsafe_arena_release_likes_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.TopicEventStat.likes_stat)
  clear_has_likes_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = likes_stat_;
  likes_stat_ = NULL;
  return temp;
}
void DocumentData_TopicEventStat::_slow_set_allocated_likes_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** likes_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*likes_stat) == NULL) {
      message_arena->Own(*likes_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*likes_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_likes_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_likes_stat->CopyFrom(**likes_stat);
      *likes_stat = new_likes_stat;
    }
}
void DocumentData_TopicEventStat::unsafe_arena_set_allocated_likes_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* likes_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete likes_stat_;
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.TopicEventStat.likes_stat)
}
void DocumentData_TopicEventStat::_slow_mutable_clicks_stat() {
  clicks_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::_slow_release_clicks_stat() {
  if (clicks_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*clicks_stat_);
    clicks_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::unsafe_arena_release_clicks_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.TopicEventStat.clicks_stat)
  clear_has_clicks_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = clicks_stat_;
  clicks_stat_ = NULL;
  return temp;
}
void DocumentData_TopicEventStat::_slow_set_allocated_clicks_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** clicks_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clicks_stat) == NULL) {
      message_arena->Own(*clicks_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clicks_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_clicks_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_clicks_stat->CopyFrom(**clicks_stat);
      *clicks_stat = new_clicks_stat;
    }
}
void DocumentData_TopicEventStat::unsafe_arena_set_allocated_clicks_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete clicks_stat_;
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.TopicEventStat.clicks_stat)
}
void DocumentData_TopicEventStat::_slow_mutable_reshares_stat() {
  reshares_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::_slow_release_reshares_stat() {
  if (reshares_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*reshares_stat_);
    reshares_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::unsafe_arena_release_reshares_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.TopicEventStat.reshares_stat)
  clear_has_reshares_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = reshares_stat_;
  reshares_stat_ = NULL;
  return temp;
}
void DocumentData_TopicEventStat::_slow_set_allocated_reshares_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** reshares_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*reshares_stat) == NULL) {
      message_arena->Own(*reshares_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*reshares_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_reshares_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_reshares_stat->CopyFrom(**reshares_stat);
      *reshares_stat = new_reshares_stat;
    }
}
void DocumentData_TopicEventStat::unsafe_arena_set_allocated_reshares_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete reshares_stat_;
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.TopicEventStat.reshares_stat)
}
void DocumentData_TopicEventStat::_slow_mutable_comments_stat() {
  comments_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::_slow_release_comments_stat() {
  if (comments_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*comments_stat_);
    comments_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::unsafe_arena_release_comments_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.TopicEventStat.comments_stat)
  clear_has_comments_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = comments_stat_;
  comments_stat_ = NULL;
  return temp;
}
void DocumentData_TopicEventStat::_slow_set_allocated_comments_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** comments_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*comments_stat) == NULL) {
      message_arena->Own(*comments_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*comments_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_comments_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_comments_stat->CopyFrom(**comments_stat);
      *comments_stat = new_comments_stat;
    }
}
void DocumentData_TopicEventStat::unsafe_arena_set_allocated_comments_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* comments_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete comments_stat_;
  }
  comments_stat_ = comments_stat;
  if (comments_stat) {
    set_has_comments_stat();
  } else {
    clear_has_comments_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.TopicEventStat.comments_stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_TopicEventStat::kVersionFieldNumber;
const int DocumentData_TopicEventStat::kLikesStatFieldNumber;
const int DocumentData_TopicEventStat::kClicksStatFieldNumber;
const int DocumentData_TopicEventStat::kResharesStatFieldNumber;
const int DocumentData_TopicEventStat::kCommentsStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_TopicEventStat::DocumentData_TopicEventStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.TopicEventStat)
}
DocumentData_TopicEventStat::DocumentData_TopicEventStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.TopicEventStat)
}
DocumentData_TopicEventStat::DocumentData_TopicEventStat(const DocumentData_TopicEventStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_likes_stat()) {
    likes_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.likes_stat_);
  } else {
    likes_stat_ = NULL;
  }
  if (from.has_clicks_stat()) {
    clicks_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.clicks_stat_);
  } else {
    clicks_stat_ = NULL;
  }
  if (from.has_reshares_stat()) {
    reshares_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.reshares_stat_);
  } else {
    reshares_stat_ = NULL;
  }
  if (from.has_comments_stat()) {
    comments_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.comments_stat_);
  } else {
    comments_stat_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.TopicEventStat)
}

void DocumentData_TopicEventStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&likes_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&likes_stat_)) + sizeof(version_));
}

DocumentData_TopicEventStat::~DocumentData_TopicEventStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.TopicEventStat)
  SharedDtor();
}

void DocumentData_TopicEventStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete likes_stat_;
  if (this != internal_default_instance()) delete clicks_stat_;
  if (this != internal_default_instance()) delete reshares_stat_;
  if (this != internal_default_instance()) delete comments_stat_;
}

void DocumentData_TopicEventStat::ArenaDtor(void* object) {
  DocumentData_TopicEventStat* _this = reinterpret_cast< DocumentData_TopicEventStat* >(object);
  (void)_this;
}
void DocumentData_TopicEventStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_TopicEventStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_TopicEventStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_TopicEventStat& DocumentData_TopicEventStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_TopicEventStat* DocumentData_TopicEventStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_TopicEventStat>(arena);
}

void DocumentData_TopicEventStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.TopicEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(likes_stat_ != NULL);
      likes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(clicks_stat_ != NULL);
      clicks_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(reshares_stat_ != NULL);
      reshares_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(comments_stat_ != NULL);
      comments_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_TopicEventStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.TopicEventStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_likes_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clicks_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshares_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentEventStat comments_stat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comments_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.TopicEventStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.TopicEventStat)
  return false;
#undef DO_
}

void DocumentData_TopicEventStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.TopicEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->likes_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->clicks_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->reshares_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat comments_stat = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->comments_stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.TopicEventStat)
}

::google::protobuf::uint8* DocumentData_TopicEventStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.TopicEventStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->likes_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->clicks_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->reshares_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat comments_stat = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->comments_stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.TopicEventStat)
  return target;
}

size_t DocumentData_TopicEventStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.TopicEventStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 2;
    if (has_likes_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->likes_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 3;
    if (has_clicks_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clicks_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 4;
    if (has_reshares_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reshares_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentEventStat comments_stat = 5;
    if (has_comments_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->comments_stat_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_TopicEventStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.TopicEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_TopicEventStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_TopicEventStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.TopicEventStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.TopicEventStat)
    MergeFrom(*source);
  }
}

void DocumentData_TopicEventStat::MergeFrom(const DocumentData_TopicEventStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.TopicEventStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_likes_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.likes_stat());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_clicks_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.clicks_stat());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reshares_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.reshares_stat());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_comments_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.comments_stat());
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_TopicEventStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.TopicEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_TopicEventStat::CopyFrom(const DocumentData_TopicEventStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.TopicEventStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_TopicEventStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  if (has_likes_stat()) {
    if (!this->likes_stat_->IsInitialized()) return false;
  }
  if (has_clicks_stat()) {
    if (!this->clicks_stat_->IsInitialized()) return false;
  }
  if (has_reshares_stat()) {
    if (!this->reshares_stat_->IsInitialized()) return false;
  }
  if (has_comments_stat()) {
    if (!this->comments_stat_->IsInitialized()) return false;
  }
  return true;
}

void DocumentData_TopicEventStat::Swap(DocumentData_TopicEventStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_TopicEventStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_TopicEventStat::UnsafeArenaSwap(DocumentData_TopicEventStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_TopicEventStat::InternalSwap(DocumentData_TopicEventStat* other) {
  using std::swap;
  swap(likes_stat_, other->likes_stat_);
  swap(clicks_stat_, other->clicks_stat_);
  swap(reshares_stat_, other->reshares_stat_);
  swap(comments_stat_, other->comments_stat_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_TopicEventStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_TopicEventStat

// required uint32 version = 1;
bool DocumentData_TopicEventStat::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentData_TopicEventStat::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentData_TopicEventStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentData_TopicEventStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 DocumentData_TopicEventStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicEventStat.version)
  return version_;
}
void DocumentData_TopicEventStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicEventStat.version)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 2;
bool DocumentData_TopicEventStat::has_likes_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_TopicEventStat::set_has_likes_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_TopicEventStat::clear_has_likes_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_TopicEventStat::clear_likes_stat() {
  if (likes_stat_ != NULL) likes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_likes_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_TopicEventStat::likes_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = likes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicEventStat.likes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::mutable_likes_stat() {
  set_has_likes_stat();
  if (likes_stat_ == NULL) {
    _slow_mutable_likes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.TopicEventStat.likes_stat)
  return likes_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::release_likes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.TopicEventStat.likes_stat)
  clear_has_likes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_likes_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = likes_stat_;
    likes_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_TopicEventStat::set_allocated_likes_stat(::cosmo::pb::DocumentData_DocumentEventStat* likes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete likes_stat_;
  }
  if (likes_stat != NULL) {
    _slow_set_allocated_likes_stat(message_arena, &likes_stat);
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.TopicEventStat.likes_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 3;
bool DocumentData_TopicEventStat::has_clicks_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_TopicEventStat::set_has_clicks_stat() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_TopicEventStat::clear_has_clicks_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_TopicEventStat::clear_clicks_stat() {
  if (clicks_stat_ != NULL) clicks_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_clicks_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_TopicEventStat::clicks_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = clicks_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicEventStat.clicks_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::mutable_clicks_stat() {
  set_has_clicks_stat();
  if (clicks_stat_ == NULL) {
    _slow_mutable_clicks_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.TopicEventStat.clicks_stat)
  return clicks_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::release_clicks_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.TopicEventStat.clicks_stat)
  clear_has_clicks_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = clicks_stat_;
    clicks_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_TopicEventStat::set_allocated_clicks_stat(::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_stat_;
  }
  if (clicks_stat != NULL) {
    _slow_set_allocated_clicks_stat(message_arena, &clicks_stat);
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.TopicEventStat.clicks_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 4;
bool DocumentData_TopicEventStat::has_reshares_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_TopicEventStat::set_has_reshares_stat() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_TopicEventStat::clear_has_reshares_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_TopicEventStat::clear_reshares_stat() {
  if (reshares_stat_ != NULL) reshares_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_reshares_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_TopicEventStat::reshares_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = reshares_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicEventStat.reshares_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::mutable_reshares_stat() {
  set_has_reshares_stat();
  if (reshares_stat_ == NULL) {
    _slow_mutable_reshares_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.TopicEventStat.reshares_stat)
  return reshares_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::release_reshares_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.TopicEventStat.reshares_stat)
  clear_has_reshares_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_reshares_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = reshares_stat_;
    reshares_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_TopicEventStat::set_allocated_reshares_stat(::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reshares_stat_;
  }
  if (reshares_stat != NULL) {
    _slow_set_allocated_reshares_stat(message_arena, &reshares_stat);
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.TopicEventStat.reshares_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat comments_stat = 5;
bool DocumentData_TopicEventStat::has_comments_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentData_TopicEventStat::set_has_comments_stat() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentData_TopicEventStat::clear_has_comments_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentData_TopicEventStat::clear_comments_stat() {
  if (comments_stat_ != NULL) comments_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_comments_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_TopicEventStat::comments_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = comments_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicEventStat.comments_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::mutable_comments_stat() {
  set_has_comments_stat();
  if (comments_stat_ == NULL) {
    _slow_mutable_comments_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.TopicEventStat.comments_stat)
  return comments_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::release_comments_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.TopicEventStat.comments_stat)
  clear_has_comments_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_comments_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = comments_stat_;
    comments_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_TopicEventStat::set_allocated_comments_stat(::cosmo::pb::DocumentData_DocumentEventStat* comments_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comments_stat_;
  }
  if (comments_stat != NULL) {
    _slow_set_allocated_comments_stat(message_arena, &comments_stat);
  }
  comments_stat_ = comments_stat;
  if (comments_stat) {
    set_has_comments_stat();
  } else {
    clear_has_comments_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.TopicEventStat.comments_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DocumentData_DocumentLocationStat_Stat::_slow_mutable_shows_stat() {
  shows_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::_slow_release_shows_stat() {
  if (shows_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*shows_stat_);
    shows_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::unsafe_arena_release_shows_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.shows_stat)
  clear_has_shows_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = shows_stat_;
  shows_stat_ = NULL;
  return temp;
}
void DocumentData_DocumentLocationStat_Stat::_slow_set_allocated_shows_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** shows_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*shows_stat) == NULL) {
      message_arena->Own(*shows_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*shows_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_shows_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_shows_stat->CopyFrom(**shows_stat);
      *shows_stat = new_shows_stat;
    }
}
void DocumentData_DocumentLocationStat_Stat::unsafe_arena_set_allocated_shows_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* shows_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete shows_stat_;
  }
  shows_stat_ = shows_stat;
  if (shows_stat) {
    set_has_shows_stat();
  } else {
    clear_has_shows_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.shows_stat)
}
void DocumentData_DocumentLocationStat_Stat::_slow_mutable_clicks_stat() {
  clicks_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::_slow_release_clicks_stat() {
  if (clicks_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*clicks_stat_);
    clicks_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::unsafe_arena_release_clicks_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.clicks_stat)
  clear_has_clicks_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = clicks_stat_;
  clicks_stat_ = NULL;
  return temp;
}
void DocumentData_DocumentLocationStat_Stat::_slow_set_allocated_clicks_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** clicks_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*clicks_stat) == NULL) {
      message_arena->Own(*clicks_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*clicks_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_clicks_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_clicks_stat->CopyFrom(**clicks_stat);
      *clicks_stat = new_clicks_stat;
    }
}
void DocumentData_DocumentLocationStat_Stat::unsafe_arena_set_allocated_clicks_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete clicks_stat_;
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.clicks_stat)
}
void DocumentData_DocumentLocationStat_Stat::_slow_mutable_likes_stat() {
  likes_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::_slow_release_likes_stat() {
  if (likes_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*likes_stat_);
    likes_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::unsafe_arena_release_likes_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.likes_stat)
  clear_has_likes_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = likes_stat_;
  likes_stat_ = NULL;
  return temp;
}
void DocumentData_DocumentLocationStat_Stat::_slow_set_allocated_likes_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** likes_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*likes_stat) == NULL) {
      message_arena->Own(*likes_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*likes_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_likes_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_likes_stat->CopyFrom(**likes_stat);
      *likes_stat = new_likes_stat;
    }
}
void DocumentData_DocumentLocationStat_Stat::unsafe_arena_set_allocated_likes_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* likes_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete likes_stat_;
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.likes_stat)
}
void DocumentData_DocumentLocationStat_Stat::_slow_mutable_dislikes_stat() {
  dislikes_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::_slow_release_dislikes_stat() {
  if (dislikes_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*dislikes_stat_);
    dislikes_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::unsafe_arena_release_dislikes_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.dislikes_stat)
  clear_has_dislikes_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = dislikes_stat_;
  dislikes_stat_ = NULL;
  return temp;
}
void DocumentData_DocumentLocationStat_Stat::_slow_set_allocated_dislikes_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** dislikes_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*dislikes_stat) == NULL) {
      message_arena->Own(*dislikes_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*dislikes_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_dislikes_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_dislikes_stat->CopyFrom(**dislikes_stat);
      *dislikes_stat = new_dislikes_stat;
    }
}
void DocumentData_DocumentLocationStat_Stat::unsafe_arena_set_allocated_dislikes_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* dislikes_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete dislikes_stat_;
  }
  dislikes_stat_ = dislikes_stat;
  if (dislikes_stat) {
    set_has_dislikes_stat();
  } else {
    clear_has_dislikes_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.dislikes_stat)
}
void DocumentData_DocumentLocationStat_Stat::_slow_mutable_reshares_stat() {
  reshares_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::_slow_release_reshares_stat() {
  if (reshares_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*reshares_stat_);
    reshares_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::unsafe_arena_release_reshares_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.reshares_stat)
  clear_has_reshares_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = reshares_stat_;
  reshares_stat_ = NULL;
  return temp;
}
void DocumentData_DocumentLocationStat_Stat::_slow_set_allocated_reshares_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** reshares_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*reshares_stat) == NULL) {
      message_arena->Own(*reshares_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*reshares_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_reshares_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_reshares_stat->CopyFrom(**reshares_stat);
      *reshares_stat = new_reshares_stat;
    }
}
void DocumentData_DocumentLocationStat_Stat::unsafe_arena_set_allocated_reshares_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete reshares_stat_;
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.reshares_stat)
}
void DocumentData_DocumentLocationStat_Stat::_slow_mutable_unlikes_stat() {
  unlikes_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::_slow_release_unlikes_stat() {
  if (unlikes_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*unlikes_stat_);
    unlikes_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::unsafe_arena_release_unlikes_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.unlikes_stat)
  clear_has_unlikes_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = unlikes_stat_;
  unlikes_stat_ = NULL;
  return temp;
}
void DocumentData_DocumentLocationStat_Stat::_slow_set_allocated_unlikes_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** unlikes_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*unlikes_stat) == NULL) {
      message_arena->Own(*unlikes_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*unlikes_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_unlikes_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_unlikes_stat->CopyFrom(**unlikes_stat);
      *unlikes_stat = new_unlikes_stat;
    }
}
void DocumentData_DocumentLocationStat_Stat::unsafe_arena_set_allocated_unlikes_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* unlikes_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete unlikes_stat_;
  }
  unlikes_stat_ = unlikes_stat;
  if (unlikes_stat) {
    set_has_unlikes_stat();
  } else {
    clear_has_unlikes_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.unlikes_stat)
}
void DocumentData_DocumentLocationStat_Stat::_slow_mutable_undislikes_stat() {
  undislikes_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::_slow_release_undislikes_stat() {
  if (undislikes_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = new ::cosmo::pb::DocumentData_DocumentEventStat(*undislikes_stat_);
    undislikes_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::unsafe_arena_release_undislikes_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.undislikes_stat)
  clear_has_undislikes_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* temp = undislikes_stat_;
  undislikes_stat_ = NULL;
  return temp;
}
void DocumentData_DocumentLocationStat_Stat::_slow_set_allocated_undislikes_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** undislikes_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*undislikes_stat) == NULL) {
      message_arena->Own(*undislikes_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*undislikes_stat)) {
      ::cosmo::pb::DocumentData_DocumentEventStat* new_undislikes_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentEventStat >(
            message_arena);
      new_undislikes_stat->CopyFrom(**undislikes_stat);
      *undislikes_stat = new_undislikes_stat;
    }
}
void DocumentData_DocumentLocationStat_Stat::unsafe_arena_set_allocated_undislikes_stat(
    ::cosmo::pb::DocumentData_DocumentEventStat* undislikes_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete undislikes_stat_;
  }
  undislikes_stat_ = undislikes_stat;
  if (undislikes_stat) {
    set_has_undislikes_stat();
  } else {
    clear_has_undislikes_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.undislikes_stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocumentLocationStat_Stat::kShowsStatFieldNumber;
const int DocumentData_DocumentLocationStat_Stat::kClicksStatFieldNumber;
const int DocumentData_DocumentLocationStat_Stat::kLikesStatFieldNumber;
const int DocumentData_DocumentLocationStat_Stat::kDislikesStatFieldNumber;
const int DocumentData_DocumentLocationStat_Stat::kResharesStatFieldNumber;
const int DocumentData_DocumentLocationStat_Stat::kUnlikesStatFieldNumber;
const int DocumentData_DocumentLocationStat_Stat::kUndislikesStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocumentLocationStat_Stat::DocumentData_DocumentLocationStat_Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
}
DocumentData_DocumentLocationStat_Stat::DocumentData_DocumentLocationStat_Stat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
}
DocumentData_DocumentLocationStat_Stat::DocumentData_DocumentLocationStat_Stat(const DocumentData_DocumentLocationStat_Stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shows_stat()) {
    shows_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.shows_stat_);
  } else {
    shows_stat_ = NULL;
  }
  if (from.has_clicks_stat()) {
    clicks_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.clicks_stat_);
  } else {
    clicks_stat_ = NULL;
  }
  if (from.has_likes_stat()) {
    likes_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.likes_stat_);
  } else {
    likes_stat_ = NULL;
  }
  if (from.has_dislikes_stat()) {
    dislikes_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.dislikes_stat_);
  } else {
    dislikes_stat_ = NULL;
  }
  if (from.has_reshares_stat()) {
    reshares_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.reshares_stat_);
  } else {
    reshares_stat_ = NULL;
  }
  if (from.has_unlikes_stat()) {
    unlikes_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.unlikes_stat_);
  } else {
    unlikes_stat_ = NULL;
  }
  if (from.has_undislikes_stat()) {
    undislikes_stat_ = new ::cosmo::pb::DocumentData_DocumentEventStat(*from.undislikes_stat_);
  } else {
    undislikes_stat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
}

void DocumentData_DocumentLocationStat_Stat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&shows_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&undislikes_stat_) -
      reinterpret_cast<char*>(&shows_stat_)) + sizeof(undislikes_stat_));
}

DocumentData_DocumentLocationStat_Stat::~DocumentData_DocumentLocationStat_Stat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  SharedDtor();
}

void DocumentData_DocumentLocationStat_Stat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete shows_stat_;
  if (this != internal_default_instance()) delete clicks_stat_;
  if (this != internal_default_instance()) delete likes_stat_;
  if (this != internal_default_instance()) delete dislikes_stat_;
  if (this != internal_default_instance()) delete reshares_stat_;
  if (this != internal_default_instance()) delete unlikes_stat_;
  if (this != internal_default_instance()) delete undislikes_stat_;
}

void DocumentData_DocumentLocationStat_Stat::ArenaDtor(void* object) {
  DocumentData_DocumentLocationStat_Stat* _this = reinterpret_cast< DocumentData_DocumentLocationStat_Stat* >(object);
  (void)_this;
}
void DocumentData_DocumentLocationStat_Stat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocumentLocationStat_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocumentLocationStat_Stat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocumentLocationStat_Stat& DocumentData_DocumentLocationStat_Stat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat_Stat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocumentLocationStat_Stat>(arena);
}

void DocumentData_DocumentLocationStat_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(shows_stat_ != NULL);
      shows_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(clicks_stat_ != NULL);
      clicks_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(likes_stat_ != NULL);
      likes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dislikes_stat_ != NULL);
      dislikes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reshares_stat_ != NULL);
      reshares_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(unlikes_stat_ != NULL);
      unlikes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(undislikes_stat_ != NULL);
      undislikes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocumentLocationStat_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cosmo.pb.DocumentData.DocumentEventStat shows_stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shows_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clicks_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_likes_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentEventStat dislikes_stat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dislikes_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reshares_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentEventStat unlikes_stat = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlikes_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentEventStat undislikes_stat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_undislikes_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  return false;
#undef DO_
}

void DocumentData_DocumentLocationStat_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.DocumentData.DocumentEventStat shows_stat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->shows_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clicks_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->likes_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat dislikes_stat = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dislikes_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->reshares_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat unlikes_stat = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->unlikes_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat undislikes_stat = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->undislikes_stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
}

::google::protobuf::uint8* DocumentData_DocumentLocationStat_Stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.DocumentData.DocumentEventStat shows_stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->shows_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->clicks_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->likes_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat dislikes_stat = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->dislikes_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->reshares_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat unlikes_stat = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->unlikes_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentEventStat undislikes_stat = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->undislikes_stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  return target;
}

size_t DocumentData_DocumentLocationStat_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .cosmo.pb.DocumentData.DocumentEventStat shows_stat = 1;
    if (has_shows_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shows_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 2;
    if (has_clicks_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->clicks_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 3;
    if (has_likes_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->likes_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentEventStat dislikes_stat = 4;
    if (has_dislikes_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dislikes_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 5;
    if (has_reshares_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reshares_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentEventStat unlikes_stat = 6;
    if (has_unlikes_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unlikes_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentEventStat undislikes_stat = 7;
    if (has_undislikes_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->undislikes_stat_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocumentLocationStat_Stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocumentLocationStat_Stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocumentLocationStat_Stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
    MergeFrom(*source);
  }
}

void DocumentData_DocumentLocationStat_Stat::MergeFrom(const DocumentData_DocumentLocationStat_Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shows_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.shows_stat());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_clicks_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.clicks_stat());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_likes_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.likes_stat());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_dislikes_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.dislikes_stat());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_reshares_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.reshares_stat());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_unlikes_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.unlikes_stat());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_undislikes_stat()->::cosmo::pb::DocumentData_DocumentEventStat::MergeFrom(from.undislikes_stat());
    }
  }
}

void DocumentData_DocumentLocationStat_Stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocumentLocationStat_Stat::CopyFrom(const DocumentData_DocumentLocationStat_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocumentLocationStat_Stat::IsInitialized() const {
  if (has_shows_stat()) {
    if (!this->shows_stat_->IsInitialized()) return false;
  }
  if (has_clicks_stat()) {
    if (!this->clicks_stat_->IsInitialized()) return false;
  }
  if (has_likes_stat()) {
    if (!this->likes_stat_->IsInitialized()) return false;
  }
  if (has_dislikes_stat()) {
    if (!this->dislikes_stat_->IsInitialized()) return false;
  }
  if (has_reshares_stat()) {
    if (!this->reshares_stat_->IsInitialized()) return false;
  }
  if (has_unlikes_stat()) {
    if (!this->unlikes_stat_->IsInitialized()) return false;
  }
  if (has_undislikes_stat()) {
    if (!this->undislikes_stat_->IsInitialized()) return false;
  }
  return true;
}

void DocumentData_DocumentLocationStat_Stat::Swap(DocumentData_DocumentLocationStat_Stat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocumentLocationStat_Stat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocumentLocationStat_Stat::UnsafeArenaSwap(DocumentData_DocumentLocationStat_Stat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocumentLocationStat_Stat::InternalSwap(DocumentData_DocumentLocationStat_Stat* other) {
  using std::swap;
  swap(shows_stat_, other->shows_stat_);
  swap(clicks_stat_, other->clicks_stat_);
  swap(likes_stat_, other->likes_stat_);
  swap(dislikes_stat_, other->dislikes_stat_);
  swap(reshares_stat_, other->reshares_stat_);
  swap(unlikes_stat_, other->unlikes_stat_);
  swap(undislikes_stat_, other->undislikes_stat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocumentLocationStat_Stat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocumentLocationStat_Stat

// optional .cosmo.pb.DocumentData.DocumentEventStat shows_stat = 1;
bool DocumentData_DocumentLocationStat_Stat::has_shows_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocumentLocationStat_Stat::set_has_shows_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocumentLocationStat_Stat::clear_has_shows_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocumentLocationStat_Stat::clear_shows_stat() {
  if (shows_stat_ != NULL) shows_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_shows_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::shows_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = shows_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.shows_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_shows_stat() {
  set_has_shows_stat();
  if (shows_stat_ == NULL) {
    _slow_mutable_shows_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.shows_stat)
  return shows_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_shows_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.shows_stat)
  clear_has_shows_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = shows_stat_;
    shows_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_DocumentLocationStat_Stat::set_allocated_shows_stat(::cosmo::pb::DocumentData_DocumentEventStat* shows_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_stat_;
  }
  if (shows_stat != NULL) {
    _slow_set_allocated_shows_stat(message_arena, &shows_stat);
  }
  shows_stat_ = shows_stat;
  if (shows_stat) {
    set_has_shows_stat();
  } else {
    clear_has_shows_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.shows_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 2;
bool DocumentData_DocumentLocationStat_Stat::has_clicks_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_DocumentLocationStat_Stat::set_has_clicks_stat() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_DocumentLocationStat_Stat::clear_has_clicks_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_DocumentLocationStat_Stat::clear_clicks_stat() {
  if (clicks_stat_ != NULL) clicks_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_clicks_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::clicks_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = clicks_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.clicks_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_clicks_stat() {
  set_has_clicks_stat();
  if (clicks_stat_ == NULL) {
    _slow_mutable_clicks_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.clicks_stat)
  return clicks_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_clicks_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.clicks_stat)
  clear_has_clicks_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = clicks_stat_;
    clicks_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_DocumentLocationStat_Stat::set_allocated_clicks_stat(::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_stat_;
  }
  if (clicks_stat != NULL) {
    _slow_set_allocated_clicks_stat(message_arena, &clicks_stat);
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.clicks_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 3;
bool DocumentData_DocumentLocationStat_Stat::has_likes_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_DocumentLocationStat_Stat::set_has_likes_stat() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_DocumentLocationStat_Stat::clear_has_likes_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_DocumentLocationStat_Stat::clear_likes_stat() {
  if (likes_stat_ != NULL) likes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_likes_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::likes_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = likes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.likes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_likes_stat() {
  set_has_likes_stat();
  if (likes_stat_ == NULL) {
    _slow_mutable_likes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.likes_stat)
  return likes_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_likes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.likes_stat)
  clear_has_likes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_likes_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = likes_stat_;
    likes_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_DocumentLocationStat_Stat::set_allocated_likes_stat(::cosmo::pb::DocumentData_DocumentEventStat* likes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete likes_stat_;
  }
  if (likes_stat != NULL) {
    _slow_set_allocated_likes_stat(message_arena, &likes_stat);
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.likes_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat dislikes_stat = 4;
bool DocumentData_DocumentLocationStat_Stat::has_dislikes_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentData_DocumentLocationStat_Stat::set_has_dislikes_stat() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentData_DocumentLocationStat_Stat::clear_has_dislikes_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentData_DocumentLocationStat_Stat::clear_dislikes_stat() {
  if (dislikes_stat_ != NULL) dislikes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_dislikes_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::dislikes_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = dislikes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.dislikes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_dislikes_stat() {
  set_has_dislikes_stat();
  if (dislikes_stat_ == NULL) {
    _slow_mutable_dislikes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.dislikes_stat)
  return dislikes_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_dislikes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.dislikes_stat)
  clear_has_dislikes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dislikes_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = dislikes_stat_;
    dislikes_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_DocumentLocationStat_Stat::set_allocated_dislikes_stat(::cosmo::pb::DocumentData_DocumentEventStat* dislikes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dislikes_stat_;
  }
  if (dislikes_stat != NULL) {
    _slow_set_allocated_dislikes_stat(message_arena, &dislikes_stat);
  }
  dislikes_stat_ = dislikes_stat;
  if (dislikes_stat) {
    set_has_dislikes_stat();
  } else {
    clear_has_dislikes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.dislikes_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 5;
bool DocumentData_DocumentLocationStat_Stat::has_reshares_stat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentData_DocumentLocationStat_Stat::set_has_reshares_stat() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentData_DocumentLocationStat_Stat::clear_has_reshares_stat() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentData_DocumentLocationStat_Stat::clear_reshares_stat() {
  if (reshares_stat_ != NULL) reshares_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_reshares_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::reshares_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = reshares_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.reshares_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_reshares_stat() {
  set_has_reshares_stat();
  if (reshares_stat_ == NULL) {
    _slow_mutable_reshares_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.reshares_stat)
  return reshares_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_reshares_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.reshares_stat)
  clear_has_reshares_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_reshares_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = reshares_stat_;
    reshares_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_DocumentLocationStat_Stat::set_allocated_reshares_stat(::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reshares_stat_;
  }
  if (reshares_stat != NULL) {
    _slow_set_allocated_reshares_stat(message_arena, &reshares_stat);
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.reshares_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat unlikes_stat = 6;
bool DocumentData_DocumentLocationStat_Stat::has_unlikes_stat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DocumentData_DocumentLocationStat_Stat::set_has_unlikes_stat() {
  _has_bits_[0] |= 0x00000020u;
}
void DocumentData_DocumentLocationStat_Stat::clear_has_unlikes_stat() {
  _has_bits_[0] &= ~0x00000020u;
}
void DocumentData_DocumentLocationStat_Stat::clear_unlikes_stat() {
  if (unlikes_stat_ != NULL) unlikes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_unlikes_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::unlikes_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = unlikes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.unlikes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_unlikes_stat() {
  set_has_unlikes_stat();
  if (unlikes_stat_ == NULL) {
    _slow_mutable_unlikes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.unlikes_stat)
  return unlikes_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_unlikes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.unlikes_stat)
  clear_has_unlikes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_unlikes_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = unlikes_stat_;
    unlikes_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_DocumentLocationStat_Stat::set_allocated_unlikes_stat(::cosmo::pb::DocumentData_DocumentEventStat* unlikes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unlikes_stat_;
  }
  if (unlikes_stat != NULL) {
    _slow_set_allocated_unlikes_stat(message_arena, &unlikes_stat);
  }
  unlikes_stat_ = unlikes_stat;
  if (unlikes_stat) {
    set_has_unlikes_stat();
  } else {
    clear_has_unlikes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.unlikes_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat undislikes_stat = 7;
bool DocumentData_DocumentLocationStat_Stat::has_undislikes_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DocumentData_DocumentLocationStat_Stat::set_has_undislikes_stat() {
  _has_bits_[0] |= 0x00000040u;
}
void DocumentData_DocumentLocationStat_Stat::clear_has_undislikes_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
void DocumentData_DocumentLocationStat_Stat::clear_undislikes_stat() {
  if (undislikes_stat_ != NULL) undislikes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_undislikes_stat();
}
const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::undislikes_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = undislikes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.undislikes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_undislikes_stat() {
  set_has_undislikes_stat();
  if (undislikes_stat_ == NULL) {
    _slow_mutable_undislikes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.undislikes_stat)
  return undislikes_stat_;
}
::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_undislikes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.undislikes_stat)
  clear_has_undislikes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_undislikes_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = undislikes_stat_;
    undislikes_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_DocumentLocationStat_Stat::set_allocated_undislikes_stat(::cosmo::pb::DocumentData_DocumentEventStat* undislikes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete undislikes_stat_;
  }
  if (undislikes_stat != NULL) {
    _slow_set_allocated_undislikes_stat(message_arena, &undislikes_stat);
  }
  undislikes_stat_ = undislikes_stat;
  if (undislikes_stat) {
    set_has_undislikes_stat();
  } else {
    clear_has_undislikes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.undislikes_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DocumentData_DocumentLocationStat_LocationStat::_slow_mutable_stat() {
  stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat_Stat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat_LocationStat::_slow_release_stat() {
  if (stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* temp = new ::cosmo::pb::DocumentData_DocumentLocationStat_Stat(*stat_);
    stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat_LocationStat::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.stat)
  clear_has_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void DocumentData_DocumentLocationStat_LocationStat::_slow_set_allocated_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat_Stat** stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stat) == NULL) {
      message_arena->Own(*stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stat)) {
      ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* new_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat_Stat >(
            message_arena);
      new_stat->CopyFrom(**stat);
      *stat = new_stat;
    }
}
void DocumentData_DocumentLocationStat_LocationStat::unsafe_arena_set_allocated_stat(
    ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete stat_;
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocumentLocationStat_LocationStat::kLocationFieldNumber;
const int DocumentData_DocumentLocationStat_LocationStat::kStatFieldNumber;
const int DocumentData_DocumentLocationStat_LocationStat::kLastEventTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocumentLocationStat_LocationStat::DocumentData_DocumentLocationStat_LocationStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
}
DocumentData_DocumentLocationStat_LocationStat::DocumentData_DocumentLocationStat_LocationStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
}
DocumentData_DocumentLocationStat_LocationStat::DocumentData_DocumentLocationStat_LocationStat(const DocumentData_DocumentLocationStat_LocationStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_location()) {
    location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location(),
      GetArenaNoVirtual());
  }
  if (from.has_stat()) {
    stat_ = new ::cosmo::pb::DocumentData_DocumentLocationStat_Stat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  last_event_ts_ = from.last_event_ts_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
}

void DocumentData_DocumentLocationStat_LocationStat::SharedCtor() {
  _cached_size_ = 0;
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_event_ts_) -
      reinterpret_cast<char*>(&stat_)) + sizeof(last_event_ts_));
}

DocumentData_DocumentLocationStat_LocationStat::~DocumentData_DocumentLocationStat_LocationStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  SharedDtor();
}

void DocumentData_DocumentLocationStat_LocationStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  location_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete stat_;
}

void DocumentData_DocumentLocationStat_LocationStat::ArenaDtor(void* object) {
  DocumentData_DocumentLocationStat_LocationStat* _this = reinterpret_cast< DocumentData_DocumentLocationStat_LocationStat* >(object);
  (void)_this;
}
void DocumentData_DocumentLocationStat_LocationStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocumentLocationStat_LocationStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocumentLocationStat_LocationStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocumentLocationStat_LocationStat& DocumentData_DocumentLocationStat_LocationStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocumentLocationStat_LocationStat* DocumentData_DocumentLocationStat_LocationStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocumentLocationStat_LocationStat>(arena);
}

void DocumentData_DocumentLocationStat_LocationStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!location_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      location_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stat_ != NULL);
      stat_->::cosmo::pb::DocumentData_DocumentLocationStat_Stat::Clear();
    }
  }
  last_event_ts_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocumentLocationStat_LocationStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 last_event_ts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_last_event_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_event_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  return false;
#undef DO_
}

void DocumentData_DocumentLocationStat_LocationStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat stat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stat_, output);
  }

  // optional uint64 last_event_ts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_event_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
}

::google::protobuf::uint8* DocumentData_DocumentLocationStat_LocationStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat stat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stat_, deterministic, target);
  }

  // optional uint64 last_event_ts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_event_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  return target;
}

size_t DocumentData_DocumentLocationStat_LocationStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string location = 1;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat stat = 2;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stat_);
    }

    // optional uint64 last_event_ts = 3;
    if (has_last_event_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_event_ts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocumentLocationStat_LocationStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocumentLocationStat_LocationStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocumentLocationStat_LocationStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
    MergeFrom(*source);
  }
}

void DocumentData_DocumentLocationStat_LocationStat::MergeFrom(const DocumentData_DocumentLocationStat_LocationStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_location(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stat()->::cosmo::pb::DocumentData_DocumentLocationStat_Stat::MergeFrom(from.stat());
    }
    if (cached_has_bits & 0x00000004u) {
      last_event_ts_ = from.last_event_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_DocumentLocationStat_LocationStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocumentLocationStat_LocationStat::CopyFrom(const DocumentData_DocumentLocationStat_LocationStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocumentLocationStat_LocationStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_stat()) {
    if (!this->stat_->IsInitialized()) return false;
  }
  return true;
}

void DocumentData_DocumentLocationStat_LocationStat::Swap(DocumentData_DocumentLocationStat_LocationStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocumentLocationStat_LocationStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocumentLocationStat_LocationStat::UnsafeArenaSwap(DocumentData_DocumentLocationStat_LocationStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocumentLocationStat_LocationStat::InternalSwap(DocumentData_DocumentLocationStat_LocationStat* other) {
  using std::swap;
  location_.Swap(&other->location_);
  swap(stat_, other->stat_);
  swap(last_event_ts_, other->last_event_ts_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocumentLocationStat_LocationStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocumentLocationStat_LocationStat

// required string location = 1;
bool DocumentData_DocumentLocationStat_LocationStat::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocumentLocationStat_LocationStat::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocumentLocationStat_LocationStat::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocumentLocationStat_LocationStat::clear_location() {
  location_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_location();
}
const ::std::string& DocumentData_DocumentLocationStat_LocationStat::location() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
  return location_.Get();
}
void DocumentData_DocumentLocationStat_LocationStat::set_location(const ::std::string& value) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}
#if LANG_CXX11
void DocumentData_DocumentLocationStat_LocationStat::set_location(::std::string&& value) {
  set_has_location();
  location_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}
#endif
void DocumentData_DocumentLocationStat_LocationStat::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}
void DocumentData_DocumentLocationStat_LocationStat::set_location(const char* value,
    size_t size) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}
::std::string* DocumentData_DocumentLocationStat_LocationStat::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
  return location_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DocumentData_DocumentLocationStat_LocationStat::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
  clear_has_location();
  return location_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DocumentData_DocumentLocationStat_LocationStat::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_location();
  return location_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DocumentData_DocumentLocationStat_LocationStat::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}
void DocumentData_DocumentLocationStat_LocationStat::unsafe_arena_set_allocated_location(
    ::std::string* location) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      location, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat stat = 2;
bool DocumentData_DocumentLocationStat_LocationStat::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_DocumentLocationStat_LocationStat::set_has_stat() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_DocumentLocationStat_LocationStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_DocumentLocationStat_LocationStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::DocumentData_DocumentLocationStat_Stat::Clear();
  clear_has_stat();
}
const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat& DocumentData_DocumentLocationStat_LocationStat::stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_Stat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat_LocationStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.stat)
  return stat_;
}
::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat_LocationStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
 void DocumentData_DocumentLocationStat_LocationStat::set_allocated_stat(::cosmo::pb::DocumentData_DocumentLocationStat_Stat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.stat)
}

// optional uint64 last_event_ts = 3;
bool DocumentData_DocumentLocationStat_LocationStat::has_last_event_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_DocumentLocationStat_LocationStat::set_has_last_event_ts() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_DocumentLocationStat_LocationStat::clear_has_last_event_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_DocumentLocationStat_LocationStat::clear_last_event_ts() {
  last_event_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_last_event_ts();
}
::google::protobuf::uint64 DocumentData_DocumentLocationStat_LocationStat::last_event_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.last_event_ts)
  return last_event_ts_;
}
void DocumentData_DocumentLocationStat_LocationStat::set_last_event_ts(::google::protobuf::uint64 value) {
  set_has_last_event_ts();
  last_event_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.last_event_ts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DocumentData_DocumentLocationStat::_slow_mutable_summary_stat() {
  summary_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat_Stat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat::_slow_release_summary_stat() {
  if (summary_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* temp = new ::cosmo::pb::DocumentData_DocumentLocationStat_Stat(*summary_stat_);
    summary_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat::unsafe_arena_release_summary_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.summary_stat)
  clear_has_summary_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* temp = summary_stat_;
  summary_stat_ = NULL;
  return temp;
}
void DocumentData_DocumentLocationStat::_slow_set_allocated_summary_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat_Stat** summary_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*summary_stat) == NULL) {
      message_arena->Own(*summary_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*summary_stat)) {
      ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* new_summary_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat_Stat >(
            message_arena);
      new_summary_stat->CopyFrom(**summary_stat);
      *summary_stat = new_summary_stat;
    }
}
void DocumentData_DocumentLocationStat::unsafe_arena_set_allocated_summary_stat(
    ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* summary_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete summary_stat_;
  }
  summary_stat_ = summary_stat;
  if (summary_stat) {
    set_has_summary_stat();
  } else {
    clear_has_summary_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.summary_stat)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocumentLocationStat::kVersionFieldNumber;
const int DocumentData_DocumentLocationStat::kStatByLocationFieldNumber;
const int DocumentData_DocumentLocationStat::kSummaryStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocumentLocationStat::DocumentData_DocumentLocationStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocumentLocationStat)
}
DocumentData_DocumentLocationStat::DocumentData_DocumentLocationStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  stat_by_location_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocumentLocationStat)
}
DocumentData_DocumentLocationStat::DocumentData_DocumentLocationStat(const DocumentData_DocumentLocationStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stat_by_location_(from.stat_by_location_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_summary_stat()) {
    summary_stat_ = new ::cosmo::pb::DocumentData_DocumentLocationStat_Stat(*from.summary_stat_);
  } else {
    summary_stat_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocumentLocationStat)
}

void DocumentData_DocumentLocationStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&summary_stat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&summary_stat_)) + sizeof(version_));
}

DocumentData_DocumentLocationStat::~DocumentData_DocumentLocationStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocumentLocationStat)
  SharedDtor();
}

void DocumentData_DocumentLocationStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete summary_stat_;
}

void DocumentData_DocumentLocationStat::ArenaDtor(void* object) {
  DocumentData_DocumentLocationStat* _this = reinterpret_cast< DocumentData_DocumentLocationStat* >(object);
  (void)_this;
}
void DocumentData_DocumentLocationStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocumentLocationStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocumentLocationStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocumentLocationStat& DocumentData_DocumentLocationStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocumentLocationStat* DocumentData_DocumentLocationStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocumentLocationStat>(arena);
}

void DocumentData_DocumentLocationStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocumentLocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_by_location_.Clear();
  if (has_summary_stat()) {
    GOOGLE_DCHECK(summary_stat_ != NULL);
    summary_stat_->::cosmo::pb::DocumentData_DocumentLocationStat_Stat::Clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocumentLocationStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocumentLocationStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.DocumentData.DocumentLocationStat.LocationStat stat_by_location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat_by_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat summary_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summary_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocumentLocationStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocumentLocationStat)
  return false;
#undef DO_
}

void DocumentData_DocumentLocationStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocumentLocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .cosmo.pb.DocumentData.DocumentLocationStat.LocationStat stat_by_location = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_by_location_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat_by_location(static_cast<int>(i)), output);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat summary_stat = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->summary_stat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocumentLocationStat)
}

::google::protobuf::uint8* DocumentData_DocumentLocationStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocumentLocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .cosmo.pb.DocumentData.DocumentLocationStat.LocationStat stat_by_location = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stat_by_location_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stat_by_location(static_cast<int>(i)), deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat summary_stat = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->summary_stat_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocumentLocationStat)
  return target;
}

size_t DocumentData_DocumentLocationStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocumentLocationStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated .cosmo.pb.DocumentData.DocumentLocationStat.LocationStat stat_by_location = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stat_by_location_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat_by_location(static_cast<int>(i)));
    }
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat summary_stat = 3;
  if (has_summary_stat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->summary_stat_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocumentLocationStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocumentLocationStat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocumentLocationStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocumentLocationStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocumentLocationStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocumentLocationStat)
    MergeFrom(*source);
  }
}

void DocumentData_DocumentLocationStat::MergeFrom(const DocumentData_DocumentLocationStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocumentLocationStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_by_location_.MergeFrom(from.stat_by_location_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_summary_stat()->::cosmo::pb::DocumentData_DocumentLocationStat_Stat::MergeFrom(from.summary_stat());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_DocumentLocationStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocumentLocationStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocumentLocationStat::CopyFrom(const DocumentData_DocumentLocationStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocumentLocationStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocumentLocationStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stat_by_location())) return false;
  if (has_summary_stat()) {
    if (!this->summary_stat_->IsInitialized()) return false;
  }
  return true;
}

void DocumentData_DocumentLocationStat::Swap(DocumentData_DocumentLocationStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocumentLocationStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocumentLocationStat::UnsafeArenaSwap(DocumentData_DocumentLocationStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocumentLocationStat::InternalSwap(DocumentData_DocumentLocationStat* other) {
  using std::swap;
  stat_by_location_.InternalSwap(&other->stat_by_location_);
  swap(summary_stat_, other->summary_stat_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocumentLocationStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocumentLocationStat

// required uint32 version = 1;
bool DocumentData_DocumentLocationStat::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_DocumentLocationStat::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_DocumentLocationStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_DocumentLocationStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 DocumentData_DocumentLocationStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.version)
  return version_;
}
void DocumentData_DocumentLocationStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentLocationStat.version)
}

// repeated .cosmo.pb.DocumentData.DocumentLocationStat.LocationStat stat_by_location = 2;
int DocumentData_DocumentLocationStat::stat_by_location_size() const {
  return stat_by_location_.size();
}
void DocumentData_DocumentLocationStat::clear_stat_by_location() {
  stat_by_location_.Clear();
}
const ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat& DocumentData_DocumentLocationStat::stat_by_location(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.stat_by_location)
  return stat_by_location_.Get(index);
}
::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat* DocumentData_DocumentLocationStat::mutable_stat_by_location(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.stat_by_location)
  return stat_by_location_.Mutable(index);
}
::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat* DocumentData_DocumentLocationStat::add_stat_by_location() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentLocationStat.stat_by_location)
  return stat_by_location_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat >*
DocumentData_DocumentLocationStat::mutable_stat_by_location() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentLocationStat.stat_by_location)
  return &stat_by_location_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat >&
DocumentData_DocumentLocationStat::stat_by_location() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentLocationStat.stat_by_location)
  return stat_by_location_;
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat summary_stat = 3;
bool DocumentData_DocumentLocationStat::has_summary_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocumentLocationStat::set_has_summary_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocumentLocationStat::clear_has_summary_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocumentLocationStat::clear_summary_stat() {
  if (summary_stat_ != NULL) summary_stat_->::cosmo::pb::DocumentData_DocumentLocationStat_Stat::Clear();
  clear_has_summary_stat();
}
const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat& DocumentData_DocumentLocationStat::summary_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* p = summary_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.summary_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_Stat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat::mutable_summary_stat() {
  set_has_summary_stat();
  if (summary_stat_ == NULL) {
    _slow_mutable_summary_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.summary_stat)
  return summary_stat_;
}
::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat::release_summary_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.summary_stat)
  clear_has_summary_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_summary_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* temp = summary_stat_;
    summary_stat_ = NULL;
    return temp;
  }
}
 void DocumentData_DocumentLocationStat::set_allocated_summary_stat(::cosmo::pb::DocumentData_DocumentLocationStat_Stat* summary_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete summary_stat_;
  }
  if (summary_stat != NULL) {
    _slow_set_allocated_summary_stat(message_arena, &summary_stat);
  }
  summary_stat_ = summary_stat;
  if (summary_stat) {
    set_has_summary_stat();
  } else {
    clear_has_summary_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.summary_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocumentMutualStat_Stat::kDocIdFieldNumber;
const int DocumentData_DocumentMutualStat_Stat::kClicksFieldNumber;
const int DocumentData_DocumentMutualStat_Stat::kViewsFieldNumber;
const int DocumentData_DocumentMutualStat_Stat::kVisitsFieldNumber;
const int DocumentData_DocumentMutualStat_Stat::kTotalVisitsFieldNumber;
const int DocumentData_DocumentMutualStat_Stat::kSourceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocumentMutualStat_Stat::DocumentData_DocumentMutualStat_Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
}
DocumentData_DocumentMutualStat_Stat::DocumentData_DocumentMutualStat_Stat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  source_id_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
}
DocumentData_DocumentMutualStat_Stat::DocumentData_DocumentMutualStat_Stat(const DocumentData_DocumentMutualStat_Stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      source_id_(from.source_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_visits_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(total_visits_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
}

void DocumentData_DocumentMutualStat_Stat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&doc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_visits_) -
      reinterpret_cast<char*>(&doc_id_)) + sizeof(total_visits_));
}

DocumentData_DocumentMutualStat_Stat::~DocumentData_DocumentMutualStat_Stat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  SharedDtor();
}

void DocumentData_DocumentMutualStat_Stat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_DocumentMutualStat_Stat::ArenaDtor(void* object) {
  DocumentData_DocumentMutualStat_Stat* _this = reinterpret_cast< DocumentData_DocumentMutualStat_Stat* >(object);
  (void)_this;
}
void DocumentData_DocumentMutualStat_Stat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocumentMutualStat_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocumentMutualStat_Stat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocumentMutualStat_Stat& DocumentData_DocumentMutualStat_Stat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocumentMutualStat_Stat* DocumentData_DocumentMutualStat_Stat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocumentMutualStat_Stat>(arena);
}

void DocumentData_DocumentMutualStat_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&doc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_visits_) -
        reinterpret_cast<char*>(&doc_id_)) + sizeof(total_visits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocumentMutualStat_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float clicks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_clicks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &clicks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float views = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float visits = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_visits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &visits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float total_visits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_total_visits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_visits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 source_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48u, input, this->mutable_source_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_source_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  return false;
#undef DO_
}

void DocumentData_DocumentMutualStat_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->doc_id(), output);
  }

  // optional float clicks = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->clicks(), output);
  }

  // optional float views = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->views(), output);
  }

  // optional float visits = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->visits(), output);
  }

  // optional float total_visits = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->total_visits(), output);
  }

  // repeated int64 source_id = 6;
  for (int i = 0, n = this->source_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->source_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
}

::google::protobuf::uint8* DocumentData_DocumentMutualStat_Stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 doc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->doc_id(), target);
  }

  // optional float clicks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->clicks(), target);
  }

  // optional float views = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->views(), target);
  }

  // optional float visits = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->visits(), target);
  }

  // optional float total_visits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->total_visits(), target);
  }

  // repeated int64 source_id = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(6, this->source_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  return target;
}

size_t DocumentData_DocumentMutualStat_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 doc_id = 1;
  if (has_doc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }
  // repeated int64 source_id = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->source_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->source_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 30u) {
    // optional float clicks = 2;
    if (has_clicks()) {
      total_size += 1 + 4;
    }

    // optional float views = 3;
    if (has_views()) {
      total_size += 1 + 4;
    }

    // optional float visits = 4;
    if (has_visits()) {
      total_size += 1 + 4;
    }

    // optional float total_visits = 5;
    if (has_total_visits()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocumentMutualStat_Stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocumentMutualStat_Stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocumentMutualStat_Stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
    MergeFrom(*source);
  }
}

void DocumentData_DocumentMutualStat_Stat::MergeFrom(const DocumentData_DocumentMutualStat_Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_id_.MergeFrom(from.source_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      clicks_ = from.clicks_;
    }
    if (cached_has_bits & 0x00000004u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00000008u) {
      visits_ = from.visits_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_visits_ = from.total_visits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_DocumentMutualStat_Stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocumentMutualStat_Stat::CopyFrom(const DocumentData_DocumentMutualStat_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocumentMutualStat_Stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DocumentData_DocumentMutualStat_Stat::Swap(DocumentData_DocumentMutualStat_Stat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocumentMutualStat_Stat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocumentMutualStat_Stat::UnsafeArenaSwap(DocumentData_DocumentMutualStat_Stat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocumentMutualStat_Stat::InternalSwap(DocumentData_DocumentMutualStat_Stat* other) {
  using std::swap;
  source_id_.InternalSwap(&other->source_id_);
  swap(doc_id_, other->doc_id_);
  swap(clicks_, other->clicks_);
  swap(views_, other->views_);
  swap(visits_, other->visits_);
  swap(total_visits_, other->total_visits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocumentMutualStat_Stat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocumentMutualStat_Stat

// required int64 doc_id = 1;
bool DocumentData_DocumentMutualStat_Stat::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocumentMutualStat_Stat::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocumentMutualStat_Stat::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocumentMutualStat_Stat::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 DocumentData_DocumentMutualStat_Stat::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.doc_id)
  return doc_id_;
}
void DocumentData_DocumentMutualStat_Stat::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.doc_id)
}

// optional float clicks = 2;
bool DocumentData_DocumentMutualStat_Stat::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_DocumentMutualStat_Stat::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_DocumentMutualStat_Stat::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_DocumentMutualStat_Stat::clear_clicks() {
  clicks_ = 0;
  clear_has_clicks();
}
float DocumentData_DocumentMutualStat_Stat::clicks() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.clicks)
  return clicks_;
}
void DocumentData_DocumentMutualStat_Stat::set_clicks(float value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.clicks)
}

// optional float views = 3;
bool DocumentData_DocumentMutualStat_Stat::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_DocumentMutualStat_Stat::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_DocumentMutualStat_Stat::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_DocumentMutualStat_Stat::clear_views() {
  views_ = 0;
  clear_has_views();
}
float DocumentData_DocumentMutualStat_Stat::views() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.views)
  return views_;
}
void DocumentData_DocumentMutualStat_Stat::set_views(float value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.views)
}

// optional float visits = 4;
bool DocumentData_DocumentMutualStat_Stat::has_visits() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentData_DocumentMutualStat_Stat::set_has_visits() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentData_DocumentMutualStat_Stat::clear_has_visits() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentData_DocumentMutualStat_Stat::clear_visits() {
  visits_ = 0;
  clear_has_visits();
}
float DocumentData_DocumentMutualStat_Stat::visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.visits)
  return visits_;
}
void DocumentData_DocumentMutualStat_Stat::set_visits(float value) {
  set_has_visits();
  visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.visits)
}

// optional float total_visits = 5;
bool DocumentData_DocumentMutualStat_Stat::has_total_visits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentData_DocumentMutualStat_Stat::set_has_total_visits() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentData_DocumentMutualStat_Stat::clear_has_total_visits() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentData_DocumentMutualStat_Stat::clear_total_visits() {
  total_visits_ = 0;
  clear_has_total_visits();
}
float DocumentData_DocumentMutualStat_Stat::total_visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.total_visits)
  return total_visits_;
}
void DocumentData_DocumentMutualStat_Stat::set_total_visits(float value) {
  set_has_total_visits();
  total_visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.total_visits)
}

// repeated int64 source_id = 6;
int DocumentData_DocumentMutualStat_Stat::source_id_size() const {
  return source_id_.size();
}
void DocumentData_DocumentMutualStat_Stat::clear_source_id() {
  source_id_.Clear();
}
::google::protobuf::int64 DocumentData_DocumentMutualStat_Stat::source_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.source_id)
  return source_id_.Get(index);
}
void DocumentData_DocumentMutualStat_Stat::set_source_id(int index, ::google::protobuf::int64 value) {
  source_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.source_id)
}
void DocumentData_DocumentMutualStat_Stat::add_source_id(::google::protobuf::int64 value) {
  source_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentMutualStat.Stat.source_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DocumentData_DocumentMutualStat_Stat::source_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentMutualStat.Stat.source_id)
  return source_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DocumentData_DocumentMutualStat_Stat::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentMutualStat.Stat.source_id)
  return &source_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocumentMutualStat_LocationStat::kLocationFieldNumber;
const int DocumentData_DocumentMutualStat_LocationStat::kDocMutualStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocumentMutualStat_LocationStat::DocumentData_DocumentMutualStat_LocationStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
}
DocumentData_DocumentMutualStat_LocationStat::DocumentData_DocumentMutualStat_LocationStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  doc_mutual_stat_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
}
DocumentData_DocumentMutualStat_LocationStat::DocumentData_DocumentMutualStat_LocationStat(const DocumentData_DocumentMutualStat_LocationStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      doc_mutual_stat_(from.doc_mutual_stat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_location()) {
    location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
}

void DocumentData_DocumentMutualStat_LocationStat::SharedCtor() {
  _cached_size_ = 0;
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DocumentData_DocumentMutualStat_LocationStat::~DocumentData_DocumentMutualStat_LocationStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  SharedDtor();
}

void DocumentData_DocumentMutualStat_LocationStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  location_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DocumentData_DocumentMutualStat_LocationStat::ArenaDtor(void* object) {
  DocumentData_DocumentMutualStat_LocationStat* _this = reinterpret_cast< DocumentData_DocumentMutualStat_LocationStat* >(object);
  (void)_this;
}
void DocumentData_DocumentMutualStat_LocationStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocumentMutualStat_LocationStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocumentMutualStat_LocationStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocumentMutualStat_LocationStat& DocumentData_DocumentMutualStat_LocationStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocumentMutualStat_LocationStat* DocumentData_DocumentMutualStat_LocationStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocumentMutualStat_LocationStat>(arena);
}

void DocumentData_DocumentMutualStat_LocationStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_mutual_stat_.Clear();
  if (has_location()) {
    GOOGLE_DCHECK(!location_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    location_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocumentMutualStat_LocationStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->location().data(), static_cast<int>(this->location().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doc_mutual_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  return false;
#undef DO_
}

void DocumentData_DocumentMutualStat_LocationStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->location(), output);
  }

  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_mutual_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->doc_mutual_stat(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
}

::google::protobuf::uint8* DocumentData_DocumentMutualStat_LocationStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->location().data(), static_cast<int>(this->location().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->location(), target);
  }

  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_mutual_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->doc_mutual_stat(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  return target;
}

size_t DocumentData_DocumentMutualStat_LocationStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string location = 1;
  if (has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }
  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->doc_mutual_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc_mutual_stat(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocumentMutualStat_LocationStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocumentMutualStat_LocationStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocumentMutualStat_LocationStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
    MergeFrom(*source);
  }
}

void DocumentData_DocumentMutualStat_LocationStat::MergeFrom(const DocumentData_DocumentMutualStat_LocationStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doc_mutual_stat_.MergeFrom(from.doc_mutual_stat_);
  if (from.has_location()) {
    set_location(from.location());
  }
}

void DocumentData_DocumentMutualStat_LocationStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocumentMutualStat_LocationStat::CopyFrom(const DocumentData_DocumentMutualStat_LocationStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocumentMutualStat_LocationStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->doc_mutual_stat())) return false;
  return true;
}

void DocumentData_DocumentMutualStat_LocationStat::Swap(DocumentData_DocumentMutualStat_LocationStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocumentMutualStat_LocationStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocumentMutualStat_LocationStat::UnsafeArenaSwap(DocumentData_DocumentMutualStat_LocationStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocumentMutualStat_LocationStat::InternalSwap(DocumentData_DocumentMutualStat_LocationStat* other) {
  using std::swap;
  doc_mutual_stat_.InternalSwap(&other->doc_mutual_stat_);
  location_.Swap(&other->location_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocumentMutualStat_LocationStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocumentMutualStat_LocationStat

// required string location = 1;
bool DocumentData_DocumentMutualStat_LocationStat::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocumentMutualStat_LocationStat::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocumentMutualStat_LocationStat::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocumentMutualStat_LocationStat::clear_location() {
  location_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_location();
}
const ::std::string& DocumentData_DocumentMutualStat_LocationStat::location() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
  return location_.Get();
}
void DocumentData_DocumentMutualStat_LocationStat::set_location(const ::std::string& value) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}
#if LANG_CXX11
void DocumentData_DocumentMutualStat_LocationStat::set_location(::std::string&& value) {
  set_has_location();
  location_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}
#endif
void DocumentData_DocumentMutualStat_LocationStat::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}
void DocumentData_DocumentMutualStat_LocationStat::set_location(const char* value,
    size_t size) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}
::std::string* DocumentData_DocumentMutualStat_LocationStat::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
  return location_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DocumentData_DocumentMutualStat_LocationStat::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
  clear_has_location();
  return location_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DocumentData_DocumentMutualStat_LocationStat::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_location();
  return location_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DocumentData_DocumentMutualStat_LocationStat::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}
void DocumentData_DocumentMutualStat_LocationStat::unsafe_arena_set_allocated_location(
    ::std::string* location) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      location, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}

// repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
int DocumentData_DocumentMutualStat_LocationStat::doc_mutual_stat_size() const {
  return doc_mutual_stat_.size();
}
void DocumentData_DocumentMutualStat_LocationStat::clear_doc_mutual_stat() {
  doc_mutual_stat_.Clear();
}
const ::cosmo::pb::DocumentData_DocumentMutualStat_Stat& DocumentData_DocumentMutualStat_LocationStat::doc_mutual_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.doc_mutual_stat)
  return doc_mutual_stat_.Get(index);
}
::cosmo::pb::DocumentData_DocumentMutualStat_Stat* DocumentData_DocumentMutualStat_LocationStat::mutable_doc_mutual_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.doc_mutual_stat)
  return doc_mutual_stat_.Mutable(index);
}
::cosmo::pb::DocumentData_DocumentMutualStat_Stat* DocumentData_DocumentMutualStat_LocationStat::add_doc_mutual_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.doc_mutual_stat)
  return doc_mutual_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >*
DocumentData_DocumentMutualStat_LocationStat::mutable_doc_mutual_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.doc_mutual_stat)
  return &doc_mutual_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >&
DocumentData_DocumentMutualStat_LocationStat::doc_mutual_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.doc_mutual_stat)
  return doc_mutual_stat_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocumentMutualStat::kVersionFieldNumber;
const int DocumentData_DocumentMutualStat::kDocMutualStatFieldNumber;
const int DocumentData_DocumentMutualStat::kLocDocMutualStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocumentMutualStat::DocumentData_DocumentMutualStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocumentMutualStat)
}
DocumentData_DocumentMutualStat::DocumentData_DocumentMutualStat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  doc_mutual_stat_(arena),
  loc_doc_mutual_stat_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocumentMutualStat)
}
DocumentData_DocumentMutualStat::DocumentData_DocumentMutualStat(const DocumentData_DocumentMutualStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      doc_mutual_stat_(from.doc_mutual_stat_),
      loc_doc_mutual_stat_(from.loc_doc_mutual_stat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocumentMutualStat)
}

void DocumentData_DocumentMutualStat::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
}

DocumentData_DocumentMutualStat::~DocumentData_DocumentMutualStat() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocumentMutualStat)
  SharedDtor();
}

void DocumentData_DocumentMutualStat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_DocumentMutualStat::ArenaDtor(void* object) {
  DocumentData_DocumentMutualStat* _this = reinterpret_cast< DocumentData_DocumentMutualStat* >(object);
  (void)_this;
}
void DocumentData_DocumentMutualStat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocumentMutualStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocumentMutualStat::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocumentMutualStat& DocumentData_DocumentMutualStat::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocumentMutualStat* DocumentData_DocumentMutualStat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocumentMutualStat>(arena);
}

void DocumentData_DocumentMutualStat::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocumentMutualStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_mutual_stat_.Clear();
  loc_doc_mutual_stat_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocumentMutualStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocumentMutualStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doc_mutual_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.DocumentData.DocumentMutualStat.LocationStat loc_doc_mutual_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loc_doc_mutual_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocumentMutualStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocumentMutualStat)
  return false;
#undef DO_
}

void DocumentData_DocumentMutualStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocumentMutualStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_mutual_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->doc_mutual_stat(static_cast<int>(i)), output);
  }

  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.LocationStat loc_doc_mutual_stat = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->loc_doc_mutual_stat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->loc_doc_mutual_stat(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocumentMutualStat)
}

::google::protobuf::uint8* DocumentData_DocumentMutualStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocumentMutualStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_mutual_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->doc_mutual_stat(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.LocationStat loc_doc_mutual_stat = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->loc_doc_mutual_stat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->loc_doc_mutual_stat(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocumentMutualStat)
  return target;
}

size_t DocumentData_DocumentMutualStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocumentMutualStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->doc_mutual_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc_mutual_stat(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.LocationStat loc_doc_mutual_stat = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->loc_doc_mutual_stat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loc_doc_mutual_stat(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocumentMutualStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocumentMutualStat)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocumentMutualStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocumentMutualStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocumentMutualStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocumentMutualStat)
    MergeFrom(*source);
  }
}

void DocumentData_DocumentMutualStat::MergeFrom(const DocumentData_DocumentMutualStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocumentMutualStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doc_mutual_stat_.MergeFrom(from.doc_mutual_stat_);
  loc_doc_mutual_stat_.MergeFrom(from.loc_doc_mutual_stat_);
  if (from.has_version()) {
    set_version(from.version());
  }
}

void DocumentData_DocumentMutualStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocumentMutualStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocumentMutualStat::CopyFrom(const DocumentData_DocumentMutualStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocumentMutualStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocumentMutualStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->doc_mutual_stat())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->loc_doc_mutual_stat())) return false;
  return true;
}

void DocumentData_DocumentMutualStat::Swap(DocumentData_DocumentMutualStat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocumentMutualStat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocumentMutualStat::UnsafeArenaSwap(DocumentData_DocumentMutualStat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocumentMutualStat::InternalSwap(DocumentData_DocumentMutualStat* other) {
  using std::swap;
  doc_mutual_stat_.InternalSwap(&other->doc_mutual_stat_);
  loc_doc_mutual_stat_.InternalSwap(&other->loc_doc_mutual_stat_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocumentMutualStat::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocumentMutualStat

// required uint32 version = 1;
bool DocumentData_DocumentMutualStat::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocumentMutualStat::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocumentMutualStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocumentMutualStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 DocumentData_DocumentMutualStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.version)
  return version_;
}
void DocumentData_DocumentMutualStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.version)
}

// repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
int DocumentData_DocumentMutualStat::doc_mutual_stat_size() const {
  return doc_mutual_stat_.size();
}
void DocumentData_DocumentMutualStat::clear_doc_mutual_stat() {
  doc_mutual_stat_.Clear();
}
const ::cosmo::pb::DocumentData_DocumentMutualStat_Stat& DocumentData_DocumentMutualStat::doc_mutual_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.doc_mutual_stat)
  return doc_mutual_stat_.Get(index);
}
::cosmo::pb::DocumentData_DocumentMutualStat_Stat* DocumentData_DocumentMutualStat::mutable_doc_mutual_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentMutualStat.doc_mutual_stat)
  return doc_mutual_stat_.Mutable(index);
}
::cosmo::pb::DocumentData_DocumentMutualStat_Stat* DocumentData_DocumentMutualStat::add_doc_mutual_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentMutualStat.doc_mutual_stat)
  return doc_mutual_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >*
DocumentData_DocumentMutualStat::mutable_doc_mutual_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentMutualStat.doc_mutual_stat)
  return &doc_mutual_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >&
DocumentData_DocumentMutualStat::doc_mutual_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentMutualStat.doc_mutual_stat)
  return doc_mutual_stat_;
}

// repeated .cosmo.pb.DocumentData.DocumentMutualStat.LocationStat loc_doc_mutual_stat = 3;
int DocumentData_DocumentMutualStat::loc_doc_mutual_stat_size() const {
  return loc_doc_mutual_stat_.size();
}
void DocumentData_DocumentMutualStat::clear_loc_doc_mutual_stat() {
  loc_doc_mutual_stat_.Clear();
}
const ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat& DocumentData_DocumentMutualStat::loc_doc_mutual_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.loc_doc_mutual_stat)
  return loc_doc_mutual_stat_.Get(index);
}
::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat* DocumentData_DocumentMutualStat::mutable_loc_doc_mutual_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentMutualStat.loc_doc_mutual_stat)
  return loc_doc_mutual_stat_.Mutable(index);
}
::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat* DocumentData_DocumentMutualStat::add_loc_doc_mutual_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentMutualStat.loc_doc_mutual_stat)
  return loc_doc_mutual_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat >*
DocumentData_DocumentMutualStat::mutable_loc_doc_mutual_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentMutualStat.loc_doc_mutual_stat)
  return &loc_doc_mutual_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat >&
DocumentData_DocumentMutualStat::loc_doc_mutual_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentMutualStat.loc_doc_mutual_stat)
  return loc_doc_mutual_stat_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_ContentVector::kLabelFieldNumber;
const int DocumentData_ContentVector::kVectorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_ContentVector::DocumentData_ContentVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.ContentVector)
}
DocumentData_ContentVector::DocumentData_ContentVector(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  vector_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.ContentVector)
}
DocumentData_ContentVector::DocumentData_ContentVector(const DocumentData_ContentVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      vector_(from.vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.ContentVector)
}

void DocumentData_ContentVector::SharedCtor() {
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DocumentData_ContentVector::~DocumentData_ContentVector() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.ContentVector)
  SharedDtor();
}

void DocumentData_ContentVector::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  label_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DocumentData_ContentVector::ArenaDtor(void* object) {
  DocumentData_ContentVector* _this = reinterpret_cast< DocumentData_ContentVector* >(object);
  (void)_this;
}
void DocumentData_ContentVector::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_ContentVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_ContentVector::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_ContentVector& DocumentData_ContentVector::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_ContentVector* DocumentData_ContentVector::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_ContentVector>(arena);
}

void DocumentData_ContentVector::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.ContentVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_.Clear();
  if (has_label()) {
    GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    label_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_ContentVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.ContentVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.DocumentData.ContentVector.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float vector = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_vector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.ContentVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.ContentVector)
  return false;
#undef DO_
}

void DocumentData_ContentVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.ContentVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.DocumentData.ContentVector.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // repeated float vector = 2;
  for (int i = 0, n = this->vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->vector(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.ContentVector)
}

::google::protobuf::uint8* DocumentData_ContentVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.ContentVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.DocumentData.ContentVector.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // repeated float vector = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->vector_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.ContentVector)
  return target;
}

size_t DocumentData_ContentVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.ContentVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string label = 1;
  if (has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }
  // repeated float vector = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vector_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->vector_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_ContentVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.ContentVector)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_ContentVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_ContentVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.ContentVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.ContentVector)
    MergeFrom(*source);
  }
}

void DocumentData_ContentVector::MergeFrom(const DocumentData_ContentVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.ContentVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_.MergeFrom(from.vector_);
  if (from.has_label()) {
    set_label(from.label());
  }
}

void DocumentData_ContentVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.ContentVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_ContentVector::CopyFrom(const DocumentData_ContentVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.ContentVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_ContentVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DocumentData_ContentVector::Swap(DocumentData_ContentVector* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_ContentVector* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_ContentVector::UnsafeArenaSwap(DocumentData_ContentVector* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_ContentVector::InternalSwap(DocumentData_ContentVector* other) {
  using std::swap;
  vector_.InternalSwap(&other->vector_);
  label_.Swap(&other->label_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_ContentVector::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_ContentVector

// required string label = 1;
bool DocumentData_ContentVector::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_ContentVector::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_ContentVector::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_ContentVector::clear_label() {
  label_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_label();
}
const ::std::string& DocumentData_ContentVector::label() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentVector.label)
  return label_.Get();
}
void DocumentData_ContentVector::set_label(const ::std::string& value) {
  set_has_label();
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentVector.label)
}
#if LANG_CXX11
void DocumentData_ContentVector::set_label(::std::string&& value) {
  set_has_label();
  label_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.DocumentData.ContentVector.label)
}
#endif
void DocumentData_ContentVector::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.DocumentData.ContentVector.label)
}
void DocumentData_ContentVector::set_label(const char* value,
    size_t size) {
  set_has_label();
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.DocumentData.ContentVector.label)
}
::std::string* DocumentData_ContentVector::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.ContentVector.label)
  return label_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DocumentData_ContentVector::release_label() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.ContentVector.label)
  clear_has_label();
  return label_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DocumentData_ContentVector::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.ContentVector.label)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_label();
  return label_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DocumentData_ContentVector::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.ContentVector.label)
}
void DocumentData_ContentVector::unsafe_arena_set_allocated_label(
    ::std::string* label) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      label, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.ContentVector.label)
}

// repeated float vector = 2;
int DocumentData_ContentVector::vector_size() const {
  return vector_.size();
}
void DocumentData_ContentVector::clear_vector() {
  vector_.Clear();
}
float DocumentData_ContentVector::vector(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentVector.vector)
  return vector_.Get(index);
}
void DocumentData_ContentVector::set_vector(int index, float value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentVector.vector)
}
void DocumentData_ContentVector::add_vector(float value) {
  vector_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.ContentVector.vector)
}
const ::google::protobuf::RepeatedField< float >&
DocumentData_ContentVector::vector() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.ContentVector.vector)
  return vector_;
}
::google::protobuf::RepeatedField< float >*
DocumentData_ContentVector::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.ContentVector.vector)
  return &vector_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_TitleContentFea::kContentVectorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_TitleContentFea::DocumentData_TitleContentFea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.TitleContentFea)
}
DocumentData_TitleContentFea::DocumentData_TitleContentFea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  content_vectors_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.TitleContentFea)
}
DocumentData_TitleContentFea::DocumentData_TitleContentFea(const DocumentData_TitleContentFea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      content_vectors_(from.content_vectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.TitleContentFea)
}

void DocumentData_TitleContentFea::SharedCtor() {
  _cached_size_ = 0;
}

DocumentData_TitleContentFea::~DocumentData_TitleContentFea() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.TitleContentFea)
  SharedDtor();
}

void DocumentData_TitleContentFea::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_TitleContentFea::ArenaDtor(void* object) {
  DocumentData_TitleContentFea* _this = reinterpret_cast< DocumentData_TitleContentFea* >(object);
  (void)_this;
}
void DocumentData_TitleContentFea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_TitleContentFea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_TitleContentFea::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_TitleContentFea& DocumentData_TitleContentFea::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_TitleContentFea* DocumentData_TitleContentFea::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_TitleContentFea>(arena);
}

void DocumentData_TitleContentFea::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.TitleContentFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_vectors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_TitleContentFea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.TitleContentFea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.DocumentData.ContentVector content_vectors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content_vectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.TitleContentFea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.TitleContentFea)
  return false;
#undef DO_
}

void DocumentData_TitleContentFea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.TitleContentFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.DocumentData.ContentVector content_vectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_vectors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content_vectors(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.TitleContentFea)
}

::google::protobuf::uint8* DocumentData_TitleContentFea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.TitleContentFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.DocumentData.ContentVector content_vectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_vectors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->content_vectors(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.TitleContentFea)
  return target;
}

size_t DocumentData_TitleContentFea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.TitleContentFea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.DocumentData.ContentVector content_vectors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->content_vectors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content_vectors(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_TitleContentFea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.TitleContentFea)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_TitleContentFea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_TitleContentFea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.TitleContentFea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.TitleContentFea)
    MergeFrom(*source);
  }
}

void DocumentData_TitleContentFea::MergeFrom(const DocumentData_TitleContentFea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.TitleContentFea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_vectors_.MergeFrom(from.content_vectors_);
}

void DocumentData_TitleContentFea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.TitleContentFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_TitleContentFea::CopyFrom(const DocumentData_TitleContentFea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.TitleContentFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_TitleContentFea::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->content_vectors())) return false;
  return true;
}

void DocumentData_TitleContentFea::Swap(DocumentData_TitleContentFea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_TitleContentFea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_TitleContentFea::UnsafeArenaSwap(DocumentData_TitleContentFea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_TitleContentFea::InternalSwap(DocumentData_TitleContentFea* other) {
  using std::swap;
  content_vectors_.InternalSwap(&other->content_vectors_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_TitleContentFea::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_TitleContentFea

// repeated .cosmo.pb.DocumentData.ContentVector content_vectors = 1;
int DocumentData_TitleContentFea::content_vectors_size() const {
  return content_vectors_.size();
}
void DocumentData_TitleContentFea::clear_content_vectors() {
  content_vectors_.Clear();
}
const ::cosmo::pb::DocumentData_ContentVector& DocumentData_TitleContentFea::content_vectors(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TitleContentFea.content_vectors)
  return content_vectors_.Get(index);
}
::cosmo::pb::DocumentData_ContentVector* DocumentData_TitleContentFea::mutable_content_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.TitleContentFea.content_vectors)
  return content_vectors_.Mutable(index);
}
::cosmo::pb::DocumentData_ContentVector* DocumentData_TitleContentFea::add_content_vectors() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.TitleContentFea.content_vectors)
  return content_vectors_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_ContentVector >*
DocumentData_TitleContentFea::mutable_content_vectors() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.TitleContentFea.content_vectors)
  return &content_vectors_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_ContentVector >&
DocumentData_TitleContentFea::content_vectors() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.TitleContentFea.content_vectors)
  return content_vectors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_ContentPornFea::kWeightFieldNumber;
const int DocumentData_ContentPornFea::kBadContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_ContentPornFea::DocumentData_ContentPornFea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.ContentPornFea)
}
DocumentData_ContentPornFea::DocumentData_ContentPornFea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.ContentPornFea)
}
DocumentData_ContentPornFea::DocumentData_ContentPornFea(const DocumentData_ContentPornFea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&bad_content_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(bad_content_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.ContentPornFea)
}

void DocumentData_ContentPornFea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bad_content_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(bad_content_));
}

DocumentData_ContentPornFea::~DocumentData_ContentPornFea() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.ContentPornFea)
  SharedDtor();
}

void DocumentData_ContentPornFea::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_ContentPornFea::ArenaDtor(void* object) {
  DocumentData_ContentPornFea* _this = reinterpret_cast< DocumentData_ContentPornFea* >(object);
  (void)_this;
}
void DocumentData_ContentPornFea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_ContentPornFea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_ContentPornFea::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_ContentPornFea& DocumentData_ContentPornFea::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_ContentPornFea* DocumentData_ContentPornFea::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_ContentPornFea>(arena);
}

void DocumentData_ContentPornFea::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.ContentPornFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bad_content_) -
        reinterpret_cast<char*>(&weight_)) + sizeof(bad_content_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_ContentPornFea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.ContentPornFea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float weight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bad_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bad_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bad_content_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.ContentPornFea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.ContentPornFea)
  return false;
#undef DO_
}

void DocumentData_ContentPornFea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.ContentPornFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->weight(), output);
  }

  // optional bool bad_content = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bad_content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.ContentPornFea)
}

::google::protobuf::uint8* DocumentData_ContentPornFea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.ContentPornFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->weight(), target);
  }

  // optional bool bad_content = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bad_content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.ContentPornFea)
  return target;
}

size_t DocumentData_ContentPornFea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.ContentPornFea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float weight = 1;
    if (has_weight()) {
      total_size += 1 + 4;
    }

    // optional bool bad_content = 2;
    if (has_bad_content()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_ContentPornFea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.ContentPornFea)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_ContentPornFea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_ContentPornFea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.ContentPornFea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.ContentPornFea)
    MergeFrom(*source);
  }
}

void DocumentData_ContentPornFea::MergeFrom(const DocumentData_ContentPornFea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.ContentPornFea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      bad_content_ = from.bad_content_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_ContentPornFea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.ContentPornFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_ContentPornFea::CopyFrom(const DocumentData_ContentPornFea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.ContentPornFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_ContentPornFea::IsInitialized() const {
  return true;
}

void DocumentData_ContentPornFea::Swap(DocumentData_ContentPornFea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_ContentPornFea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_ContentPornFea::UnsafeArenaSwap(DocumentData_ContentPornFea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_ContentPornFea::InternalSwap(DocumentData_ContentPornFea* other) {
  using std::swap;
  swap(weight_, other->weight_);
  swap(bad_content_, other->bad_content_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_ContentPornFea::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_ContentPornFea

// optional float weight = 1;
bool DocumentData_ContentPornFea::has_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_ContentPornFea::set_has_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_ContentPornFea::clear_has_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_ContentPornFea::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
float DocumentData_ContentPornFea::weight() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentPornFea.weight)
  return weight_;
}
void DocumentData_ContentPornFea::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentPornFea.weight)
}

// optional bool bad_content = 2;
bool DocumentData_ContentPornFea::has_bad_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_ContentPornFea::set_has_bad_content() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_ContentPornFea::clear_has_bad_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_ContentPornFea::clear_bad_content() {
  bad_content_ = false;
  clear_has_bad_content();
}
bool DocumentData_ContentPornFea::bad_content() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentPornFea.bad_content)
  return bad_content_;
}
void DocumentData_ContentPornFea::set_bad_content(bool value) {
  set_has_bad_content();
  bad_content_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentPornFea.bad_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_ImagePornFea::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_ImagePornFea::DocumentData_ImagePornFea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.ImagePornFea)
}
DocumentData_ImagePornFea::DocumentData_ImagePornFea(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.ImagePornFea)
}
DocumentData_ImagePornFea::DocumentData_ImagePornFea(const DocumentData_ImagePornFea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.ImagePornFea)
}

void DocumentData_ImagePornFea::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
}

DocumentData_ImagePornFea::~DocumentData_ImagePornFea() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.ImagePornFea)
  SharedDtor();
}

void DocumentData_ImagePornFea::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_ImagePornFea::ArenaDtor(void* object) {
  DocumentData_ImagePornFea* _this = reinterpret_cast< DocumentData_ImagePornFea* >(object);
  (void)_this;
}
void DocumentData_ImagePornFea::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_ImagePornFea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_ImagePornFea::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_ImagePornFea& DocumentData_ImagePornFea::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_ImagePornFea* DocumentData_ImagePornFea::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_ImagePornFea>(arena);
}

void DocumentData_ImagePornFea::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.ImagePornFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_ImagePornFea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.ImagePornFea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float weight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.ImagePornFea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.ImagePornFea)
  return false;
#undef DO_
}

void DocumentData_ImagePornFea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.ImagePornFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.ImagePornFea)
}

::google::protobuf::uint8* DocumentData_ImagePornFea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.ImagePornFea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.ImagePornFea)
  return target;
}

size_t DocumentData_ImagePornFea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.ImagePornFea)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float weight = 1;
  if (has_weight()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_ImagePornFea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.ImagePornFea)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_ImagePornFea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_ImagePornFea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.ImagePornFea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.ImagePornFea)
    MergeFrom(*source);
  }
}

void DocumentData_ImagePornFea::MergeFrom(const DocumentData_ImagePornFea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.ImagePornFea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weight()) {
    set_weight(from.weight());
  }
}

void DocumentData_ImagePornFea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.ImagePornFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_ImagePornFea::CopyFrom(const DocumentData_ImagePornFea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.ImagePornFea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_ImagePornFea::IsInitialized() const {
  return true;
}

void DocumentData_ImagePornFea::Swap(DocumentData_ImagePornFea* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_ImagePornFea* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_ImagePornFea::UnsafeArenaSwap(DocumentData_ImagePornFea* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_ImagePornFea::InternalSwap(DocumentData_ImagePornFea* other) {
  using std::swap;
  swap(weight_, other->weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_ImagePornFea::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_ImagePornFea

// optional float weight = 1;
bool DocumentData_ImagePornFea::has_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_ImagePornFea::set_has_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_ImagePornFea::clear_has_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_ImagePornFea::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
float DocumentData_ImagePornFea::weight() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ImagePornFea.weight)
  return weight_;
}
void DocumentData_ImagePornFea::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ImagePornFea.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_ContentThemes::kThemesVectorFieldNumber;
const int DocumentData_ContentThemes::kBadContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_ContentThemes::DocumentData_ContentThemes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.ContentThemes)
}
DocumentData_ContentThemes::DocumentData_ContentThemes(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  themes_vector_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.ContentThemes)
}
DocumentData_ContentThemes::DocumentData_ContentThemes(const DocumentData_ContentThemes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      themes_vector_(from.themes_vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bad_content_ = from.bad_content_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.ContentThemes)
}

void DocumentData_ContentThemes::SharedCtor() {
  _cached_size_ = 0;
  bad_content_ = false;
}

DocumentData_ContentThemes::~DocumentData_ContentThemes() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.ContentThemes)
  SharedDtor();
}

void DocumentData_ContentThemes::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_ContentThemes::ArenaDtor(void* object) {
  DocumentData_ContentThemes* _this = reinterpret_cast< DocumentData_ContentThemes* >(object);
  (void)_this;
}
void DocumentData_ContentThemes::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_ContentThemes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_ContentThemes::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_ContentThemes& DocumentData_ContentThemes::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_ContentThemes* DocumentData_ContentThemes::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_ContentThemes>(arena);
}

void DocumentData_ContentThemes::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.ContentThemes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  themes_vector_.Clear();
  bad_content_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_ContentThemes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.ContentThemes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float themes_vector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_themes_vector())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_themes_vector())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bad_content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_bad_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bad_content_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.ContentThemes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.ContentThemes)
  return false;
#undef DO_
}

void DocumentData_ContentThemes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.ContentThemes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float themes_vector = 1;
  for (int i = 0, n = this->themes_vector_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->themes_vector(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool bad_content = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bad_content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.ContentThemes)
}

::google::protobuf::uint8* DocumentData_ContentThemes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.ContentThemes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float themes_vector = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->themes_vector_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool bad_content = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bad_content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.ContentThemes)
  return target;
}

size_t DocumentData_ContentThemes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.ContentThemes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float themes_vector = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->themes_vector_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->themes_vector_size());
    total_size += data_size;
  }

  // optional bool bad_content = 2;
  if (has_bad_content()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_ContentThemes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.ContentThemes)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_ContentThemes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_ContentThemes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.ContentThemes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.ContentThemes)
    MergeFrom(*source);
  }
}

void DocumentData_ContentThemes::MergeFrom(const DocumentData_ContentThemes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.ContentThemes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  themes_vector_.MergeFrom(from.themes_vector_);
  if (from.has_bad_content()) {
    set_bad_content(from.bad_content());
  }
}

void DocumentData_ContentThemes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.ContentThemes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_ContentThemes::CopyFrom(const DocumentData_ContentThemes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.ContentThemes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_ContentThemes::IsInitialized() const {
  return true;
}

void DocumentData_ContentThemes::Swap(DocumentData_ContentThemes* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_ContentThemes* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_ContentThemes::UnsafeArenaSwap(DocumentData_ContentThemes* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_ContentThemes::InternalSwap(DocumentData_ContentThemes* other) {
  using std::swap;
  themes_vector_.InternalSwap(&other->themes_vector_);
  swap(bad_content_, other->bad_content_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_ContentThemes::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_ContentThemes

// repeated float themes_vector = 1;
int DocumentData_ContentThemes::themes_vector_size() const {
  return themes_vector_.size();
}
void DocumentData_ContentThemes::clear_themes_vector() {
  themes_vector_.Clear();
}
float DocumentData_ContentThemes::themes_vector(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentThemes.themes_vector)
  return themes_vector_.Get(index);
}
void DocumentData_ContentThemes::set_themes_vector(int index, float value) {
  themes_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentThemes.themes_vector)
}
void DocumentData_ContentThemes::add_themes_vector(float value) {
  themes_vector_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.ContentThemes.themes_vector)
}
const ::google::protobuf::RepeatedField< float >&
DocumentData_ContentThemes::themes_vector() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.ContentThemes.themes_vector)
  return themes_vector_;
}
::google::protobuf::RepeatedField< float >*
DocumentData_ContentThemes::mutable_themes_vector() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.ContentThemes.themes_vector)
  return &themes_vector_;
}

// optional bool bad_content = 2;
bool DocumentData_ContentThemes::has_bad_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_ContentThemes::set_has_bad_content() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_ContentThemes::clear_has_bad_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_ContentThemes::clear_bad_content() {
  bad_content_ = false;
  clear_has_bad_content();
}
bool DocumentData_ContentThemes::bad_content() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentThemes.bad_content)
  return bad_content_;
}
void DocumentData_ContentThemes::set_bad_content(bool value) {
  set_has_bad_content();
  bad_content_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentThemes.bad_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_StoryClusterId::kVersionFieldNumber;
const int DocumentData_StoryClusterId::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_StoryClusterId::DocumentData_StoryClusterId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.StoryClusterId)
}
DocumentData_StoryClusterId::DocumentData_StoryClusterId(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.StoryClusterId)
}
DocumentData_StoryClusterId::DocumentData_StoryClusterId(const DocumentData_StoryClusterId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cluster_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(cluster_id_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.StoryClusterId)
}

void DocumentData_StoryClusterId::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(cluster_id_));
}

DocumentData_StoryClusterId::~DocumentData_StoryClusterId() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.StoryClusterId)
  SharedDtor();
}

void DocumentData_StoryClusterId::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_StoryClusterId::ArenaDtor(void* object) {
  DocumentData_StoryClusterId* _this = reinterpret_cast< DocumentData_StoryClusterId* >(object);
  (void)_this;
}
void DocumentData_StoryClusterId::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_StoryClusterId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_StoryClusterId::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_StoryClusterId& DocumentData_StoryClusterId::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_StoryClusterId* DocumentData_StoryClusterId::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_StoryClusterId>(arena);
}

void DocumentData_StoryClusterId::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.StoryClusterId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cluster_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(cluster_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_StoryClusterId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.StoryClusterId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cluster_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cluster_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.StoryClusterId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.StoryClusterId)
  return false;
#undef DO_
}

void DocumentData_StoryClusterId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.StoryClusterId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 cluster_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cluster_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.StoryClusterId)
}

::google::protobuf::uint8* DocumentData_StoryClusterId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.StoryClusterId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 cluster_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cluster_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.StoryClusterId)
  return target;
}

size_t DocumentData_StoryClusterId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.StoryClusterId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // optional uint32 cluster_id = 2;
  if (has_cluster_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_StoryClusterId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.StoryClusterId)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_StoryClusterId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_StoryClusterId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.StoryClusterId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.StoryClusterId)
    MergeFrom(*source);
  }
}

void DocumentData_StoryClusterId::MergeFrom(const DocumentData_StoryClusterId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.StoryClusterId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      cluster_id_ = from.cluster_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_StoryClusterId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.StoryClusterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_StoryClusterId::CopyFrom(const DocumentData_StoryClusterId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.StoryClusterId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_StoryClusterId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DocumentData_StoryClusterId::Swap(DocumentData_StoryClusterId* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_StoryClusterId* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_StoryClusterId::UnsafeArenaSwap(DocumentData_StoryClusterId* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_StoryClusterId::InternalSwap(DocumentData_StoryClusterId* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(cluster_id_, other->cluster_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_StoryClusterId::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_StoryClusterId

// required uint32 version = 1;
bool DocumentData_StoryClusterId::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_StoryClusterId::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_StoryClusterId::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_StoryClusterId::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 DocumentData_StoryClusterId::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.StoryClusterId.version)
  return version_;
}
void DocumentData_StoryClusterId::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.StoryClusterId.version)
}

// optional uint32 cluster_id = 2;
bool DocumentData_StoryClusterId::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_StoryClusterId::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_StoryClusterId::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_StoryClusterId::clear_cluster_id() {
  cluster_id_ = 0u;
  clear_has_cluster_id();
}
::google::protobuf::uint32 DocumentData_StoryClusterId::cluster_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.StoryClusterId.cluster_id)
  return cluster_id_;
}
void DocumentData_StoryClusterId::set_cluster_id(::google::protobuf::uint32 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.StoryClusterId.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_NewsTagsData::kTagIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_NewsTagsData::DocumentData_NewsTagsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.NewsTagsData)
}
DocumentData_NewsTagsData::DocumentData_NewsTagsData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  tag_ids_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.NewsTagsData)
}
DocumentData_NewsTagsData::DocumentData_NewsTagsData(const DocumentData_NewsTagsData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tag_ids_(from.tag_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.NewsTagsData)
}

void DocumentData_NewsTagsData::SharedCtor() {
  _cached_size_ = 0;
}

DocumentData_NewsTagsData::~DocumentData_NewsTagsData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.NewsTagsData)
  SharedDtor();
}

void DocumentData_NewsTagsData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_NewsTagsData::ArenaDtor(void* object) {
  DocumentData_NewsTagsData* _this = reinterpret_cast< DocumentData_NewsTagsData* >(object);
  (void)_this;
}
void DocumentData_NewsTagsData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_NewsTagsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_NewsTagsData::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_NewsTagsData& DocumentData_NewsTagsData::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_NewsTagsData* DocumentData_NewsTagsData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_NewsTagsData>(arena);
}

void DocumentData_NewsTagsData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.NewsTagsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_NewsTagsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.NewsTagsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 tag_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_tag_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tag_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.NewsTagsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.NewsTagsData)
  return false;
#undef DO_
}

void DocumentData_NewsTagsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.NewsTagsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 tag_ids = 1;
  for (int i = 0, n = this->tag_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->tag_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.NewsTagsData)
}

::google::protobuf::uint8* DocumentData_NewsTagsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.NewsTagsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 tag_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->tag_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.NewsTagsData)
  return target;
}

size_t DocumentData_NewsTagsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.NewsTagsData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 tag_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->tag_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tag_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_NewsTagsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.NewsTagsData)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_NewsTagsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_NewsTagsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.NewsTagsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.NewsTagsData)
    MergeFrom(*source);
  }
}

void DocumentData_NewsTagsData::MergeFrom(const DocumentData_NewsTagsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.NewsTagsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_ids_.MergeFrom(from.tag_ids_);
}

void DocumentData_NewsTagsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.NewsTagsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_NewsTagsData::CopyFrom(const DocumentData_NewsTagsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.NewsTagsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_NewsTagsData::IsInitialized() const {
  return true;
}

void DocumentData_NewsTagsData::Swap(DocumentData_NewsTagsData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_NewsTagsData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_NewsTagsData::UnsafeArenaSwap(DocumentData_NewsTagsData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_NewsTagsData::InternalSwap(DocumentData_NewsTagsData* other) {
  using std::swap;
  tag_ids_.InternalSwap(&other->tag_ids_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_NewsTagsData::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_NewsTagsData

// repeated int32 tag_ids = 1;
int DocumentData_NewsTagsData::tag_ids_size() const {
  return tag_ids_.size();
}
void DocumentData_NewsTagsData::clear_tag_ids() {
  tag_ids_.Clear();
}
::google::protobuf::int32 DocumentData_NewsTagsData::tag_ids(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsTagsData.tag_ids)
  return tag_ids_.Get(index);
}
void DocumentData_NewsTagsData::set_tag_ids(int index, ::google::protobuf::int32 value) {
  tag_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsTagsData.tag_ids)
}
void DocumentData_NewsTagsData::add_tag_ids(::google::protobuf::int32 value) {
  tag_ids_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.NewsTagsData.tag_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocumentData_NewsTagsData::tag_ids() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.NewsTagsData.tag_ids)
  return tag_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocumentData_NewsTagsData::mutable_tag_ids() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.NewsTagsData.tag_ids)
  return &tag_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_NewsStoryData::kStoryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_NewsStoryData::DocumentData_NewsStoryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.NewsStoryData)
}
DocumentData_NewsStoryData::DocumentData_NewsStoryData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.NewsStoryData)
}
DocumentData_NewsStoryData::DocumentData_NewsStoryData(const DocumentData_NewsStoryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  story_id_ = from.story_id_;
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.NewsStoryData)
}

void DocumentData_NewsStoryData::SharedCtor() {
  _cached_size_ = 0;
  story_id_ = 0;
}

DocumentData_NewsStoryData::~DocumentData_NewsStoryData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.NewsStoryData)
  SharedDtor();
}

void DocumentData_NewsStoryData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_NewsStoryData::ArenaDtor(void* object) {
  DocumentData_NewsStoryData* _this = reinterpret_cast< DocumentData_NewsStoryData* >(object);
  (void)_this;
}
void DocumentData_NewsStoryData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_NewsStoryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_NewsStoryData::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_NewsStoryData& DocumentData_NewsStoryData::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_NewsStoryData* DocumentData_NewsStoryData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_NewsStoryData>(arena);
}

void DocumentData_NewsStoryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.NewsStoryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  story_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_NewsStoryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.NewsStoryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 story_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_story_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &story_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.NewsStoryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.NewsStoryData)
  return false;
#undef DO_
}

void DocumentData_NewsStoryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.NewsStoryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 story_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->story_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.NewsStoryData)
}

::google::protobuf::uint8* DocumentData_NewsStoryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.NewsStoryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 story_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->story_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.NewsStoryData)
  return target;
}

size_t DocumentData_NewsStoryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.NewsStoryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 story_id = 1;
  if (has_story_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->story_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_NewsStoryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.NewsStoryData)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_NewsStoryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_NewsStoryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.NewsStoryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.NewsStoryData)
    MergeFrom(*source);
  }
}

void DocumentData_NewsStoryData::MergeFrom(const DocumentData_NewsStoryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.NewsStoryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_story_id()) {
    set_story_id(from.story_id());
  }
}

void DocumentData_NewsStoryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.NewsStoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_NewsStoryData::CopyFrom(const DocumentData_NewsStoryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.NewsStoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_NewsStoryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DocumentData_NewsStoryData::Swap(DocumentData_NewsStoryData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_NewsStoryData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_NewsStoryData::UnsafeArenaSwap(DocumentData_NewsStoryData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_NewsStoryData::InternalSwap(DocumentData_NewsStoryData* other) {
  using std::swap;
  swap(story_id_, other->story_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_NewsStoryData::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_NewsStoryData

// required int32 story_id = 1;
bool DocumentData_NewsStoryData::has_story_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_NewsStoryData::set_has_story_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_NewsStoryData::clear_has_story_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_NewsStoryData::clear_story_id() {
  story_id_ = 0;
  clear_has_story_id();
}
::google::protobuf::int32 DocumentData_NewsStoryData::story_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsStoryData.story_id)
  return story_id_;
}
void DocumentData_NewsStoryData::set_story_id(::google::protobuf::int32 value) {
  set_has_story_id();
  story_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsStoryData.story_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_NativeTargetIsActive::kVersionFieldNumber;
const int DocumentData_NativeTargetIsActive::kIsActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_NativeTargetIsActive::DocumentData_NativeTargetIsActive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.NativeTargetIsActive)
}
DocumentData_NativeTargetIsActive::DocumentData_NativeTargetIsActive(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.NativeTargetIsActive)
}
DocumentData_NativeTargetIsActive::DocumentData_NativeTargetIsActive(const DocumentData_NativeTargetIsActive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_active_) -
    reinterpret_cast<char*>(&version_)) + sizeof(is_active_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.NativeTargetIsActive)
}

void DocumentData_NativeTargetIsActive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_active_) -
      reinterpret_cast<char*>(&version_)) + sizeof(is_active_));
}

DocumentData_NativeTargetIsActive::~DocumentData_NativeTargetIsActive() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.NativeTargetIsActive)
  SharedDtor();
}

void DocumentData_NativeTargetIsActive::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_NativeTargetIsActive::ArenaDtor(void* object) {
  DocumentData_NativeTargetIsActive* _this = reinterpret_cast< DocumentData_NativeTargetIsActive* >(object);
  (void)_this;
}
void DocumentData_NativeTargetIsActive::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_NativeTargetIsActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_NativeTargetIsActive::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_NativeTargetIsActive& DocumentData_NativeTargetIsActive::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_NativeTargetIsActive* DocumentData_NativeTargetIsActive::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_NativeTargetIsActive>(arena);
}

void DocumentData_NativeTargetIsActive::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.NativeTargetIsActive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_active_) -
        reinterpret_cast<char*>(&version_)) + sizeof(is_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_NativeTargetIsActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.NativeTargetIsActive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.NativeTargetIsActive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.NativeTargetIsActive)
  return false;
#undef DO_
}

void DocumentData_NativeTargetIsActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.NativeTargetIsActive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required bool is_active = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.NativeTargetIsActive)
}

::google::protobuf::uint8* DocumentData_NativeTargetIsActive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.NativeTargetIsActive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required bool is_active = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.NativeTargetIsActive)
  return target;
}

size_t DocumentData_NativeTargetIsActive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentData.NativeTargetIsActive)
  size_t total_size = 0;

  if (has_version()) {
    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  if (has_is_active()) {
    // required bool is_active = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DocumentData_NativeTargetIsActive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.NativeTargetIsActive)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

    // required bool is_active = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_NativeTargetIsActive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.NativeTargetIsActive)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_NativeTargetIsActive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_NativeTargetIsActive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.NativeTargetIsActive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.NativeTargetIsActive)
    MergeFrom(*source);
  }
}

void DocumentData_NativeTargetIsActive::MergeFrom(const DocumentData_NativeTargetIsActive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.NativeTargetIsActive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_active_ = from.is_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_NativeTargetIsActive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.NativeTargetIsActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_NativeTargetIsActive::CopyFrom(const DocumentData_NativeTargetIsActive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.NativeTargetIsActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_NativeTargetIsActive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DocumentData_NativeTargetIsActive::Swap(DocumentData_NativeTargetIsActive* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_NativeTargetIsActive* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_NativeTargetIsActive::UnsafeArenaSwap(DocumentData_NativeTargetIsActive* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_NativeTargetIsActive::InternalSwap(DocumentData_NativeTargetIsActive* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(is_active_, other->is_active_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_NativeTargetIsActive::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_NativeTargetIsActive

// required uint32 version = 1;
bool DocumentData_NativeTargetIsActive::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_NativeTargetIsActive::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_NativeTargetIsActive::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_NativeTargetIsActive::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 DocumentData_NativeTargetIsActive::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NativeTargetIsActive.version)
  return version_;
}
void DocumentData_NativeTargetIsActive::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NativeTargetIsActive.version)
}

// required bool is_active = 2;
bool DocumentData_NativeTargetIsActive::has_is_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_NativeTargetIsActive::set_has_is_active() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_NativeTargetIsActive::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_NativeTargetIsActive::clear_is_active() {
  is_active_ = false;
  clear_has_is_active();
}
bool DocumentData_NativeTargetIsActive::is_active() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NativeTargetIsActive.is_active)
  return is_active_;
}
void DocumentData_NativeTargetIsActive::set_is_active(bool value) {
  set_has_is_active();
  is_active_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NativeTargetIsActive.is_active)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_DocumentKeywordsInfo::kVersionFieldNumber;
const int DocumentData_DocumentKeywordsInfo::kKeywordHashFieldNumber;
const int DocumentData_DocumentKeywordsInfo::kKeywordTypeFieldNumber;
const int DocumentData_DocumentKeywordsInfo::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_DocumentKeywordsInfo::DocumentData_DocumentKeywordsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.DocumentKeywordsInfo)
}
DocumentData_DocumentKeywordsInfo::DocumentData_DocumentKeywordsInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  keyword_hash_(arena),
  keyword_type_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.DocumentKeywordsInfo)
}
DocumentData_DocumentKeywordsInfo::DocumentData_DocumentKeywordsInfo(const DocumentData_DocumentKeywordsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keyword_hash_(from.keyword_hash_),
      keyword_type_(from.keyword_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cluster_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(cluster_id_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.DocumentKeywordsInfo)
}

void DocumentData_DocumentKeywordsInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_id_) -
      reinterpret_cast<char*>(&version_)) + sizeof(cluster_id_));
}

DocumentData_DocumentKeywordsInfo::~DocumentData_DocumentKeywordsInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  SharedDtor();
}

void DocumentData_DocumentKeywordsInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_DocumentKeywordsInfo::ArenaDtor(void* object) {
  DocumentData_DocumentKeywordsInfo* _this = reinterpret_cast< DocumentData_DocumentKeywordsInfo* >(object);
  (void)_this;
}
void DocumentData_DocumentKeywordsInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_DocumentKeywordsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_DocumentKeywordsInfo::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_DocumentKeywordsInfo& DocumentData_DocumentKeywordsInfo::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_DocumentKeywordsInfo* DocumentData_DocumentKeywordsInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_DocumentKeywordsInfo>(arena);
}

void DocumentData_DocumentKeywordsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyword_hash_.Clear();
  keyword_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cluster_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(cluster_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_DocumentKeywordsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 keyword_hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_keyword_hash())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_keyword_hash())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.DocumentData.DocumentKeywordsInfo.KeywordType keyword_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType_IsValid(value)) {
            add_keyword_type(static_cast< ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_keyword_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cluster_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cluster_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  return false;
#undef DO_
}

void DocumentData_DocumentKeywordsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated int64 keyword_hash = 2;
  for (int i = 0, n = this->keyword_hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->keyword_hash(i), output);
  }

  // repeated .cosmo.pb.DocumentData.DocumentKeywordsInfo.KeywordType keyword_type = 3;
  for (int i = 0, n = this->keyword_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->keyword_type(i), output);
  }

  // optional uint32 cluster_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cluster_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.DocumentKeywordsInfo)
}

::google::protobuf::uint8* DocumentData_DocumentKeywordsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated int64 keyword_hash = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(2, this->keyword_hash_, target);

  // repeated .cosmo.pb.DocumentData.DocumentKeywordsInfo.KeywordType keyword_type = 3;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    3, this->keyword_type_, target);

  // optional uint32 cluster_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cluster_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  return target;
}

size_t DocumentData_DocumentKeywordsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }
  // repeated int64 keyword_hash = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->keyword_hash_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->keyword_hash_size());
    total_size += data_size;
  }

  // repeated .cosmo.pb.DocumentData.DocumentKeywordsInfo.KeywordType keyword_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->keyword_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->keyword_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional uint32 cluster_id = 4;
  if (has_cluster_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_DocumentKeywordsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_DocumentKeywordsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_DocumentKeywordsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.DocumentKeywordsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.DocumentKeywordsInfo)
    MergeFrom(*source);
  }
}

void DocumentData_DocumentKeywordsInfo::MergeFrom(const DocumentData_DocumentKeywordsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keyword_hash_.MergeFrom(from.keyword_hash_);
  keyword_type_.MergeFrom(from.keyword_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      cluster_id_ = from.cluster_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_DocumentKeywordsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_DocumentKeywordsInfo::CopyFrom(const DocumentData_DocumentKeywordsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.DocumentKeywordsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_DocumentKeywordsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DocumentData_DocumentKeywordsInfo::Swap(DocumentData_DocumentKeywordsInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_DocumentKeywordsInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_DocumentKeywordsInfo::UnsafeArenaSwap(DocumentData_DocumentKeywordsInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_DocumentKeywordsInfo::InternalSwap(DocumentData_DocumentKeywordsInfo* other) {
  using std::swap;
  keyword_hash_.InternalSwap(&other->keyword_hash_);
  keyword_type_.InternalSwap(&other->keyword_type_);
  swap(version_, other->version_);
  swap(cluster_id_, other->cluster_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_DocumentKeywordsInfo::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_DocumentKeywordsInfo

// required uint32 version = 1;
bool DocumentData_DocumentKeywordsInfo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_DocumentKeywordsInfo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_DocumentKeywordsInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_DocumentKeywordsInfo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 DocumentData_DocumentKeywordsInfo::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentKeywordsInfo.version)
  return version_;
}
void DocumentData_DocumentKeywordsInfo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentKeywordsInfo.version)
}

// repeated int64 keyword_hash = 2;
int DocumentData_DocumentKeywordsInfo::keyword_hash_size() const {
  return keyword_hash_.size();
}
void DocumentData_DocumentKeywordsInfo::clear_keyword_hash() {
  keyword_hash_.Clear();
}
::google::protobuf::int64 DocumentData_DocumentKeywordsInfo::keyword_hash(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_hash)
  return keyword_hash_.Get(index);
}
void DocumentData_DocumentKeywordsInfo::set_keyword_hash(int index, ::google::protobuf::int64 value) {
  keyword_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_hash)
}
void DocumentData_DocumentKeywordsInfo::add_keyword_hash(::google::protobuf::int64 value) {
  keyword_hash_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_hash)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DocumentData_DocumentKeywordsInfo::keyword_hash() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_hash)
  return keyword_hash_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DocumentData_DocumentKeywordsInfo::mutable_keyword_hash() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_hash)
  return &keyword_hash_;
}

// repeated .cosmo.pb.DocumentData.DocumentKeywordsInfo.KeywordType keyword_type = 3;
int DocumentData_DocumentKeywordsInfo::keyword_type_size() const {
  return keyword_type_.size();
}
void DocumentData_DocumentKeywordsInfo::clear_keyword_type() {
  keyword_type_.Clear();
}
::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType DocumentData_DocumentKeywordsInfo::keyword_type(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_type)
  return static_cast< ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType >(keyword_type_.Get(index));
}
void DocumentData_DocumentKeywordsInfo::set_keyword_type(int index, ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType value) {
  assert(::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType_IsValid(value));
  keyword_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_type)
}
void DocumentData_DocumentKeywordsInfo::add_keyword_type(::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType value) {
  assert(::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType_IsValid(value));
  keyword_type_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_type)
}
const ::google::protobuf::RepeatedField<int>&
DocumentData_DocumentKeywordsInfo::keyword_type() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_type)
  return keyword_type_;
}
::google::protobuf::RepeatedField<int>*
DocumentData_DocumentKeywordsInfo::mutable_keyword_type() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_type)
  return &keyword_type_;
}

// optional uint32 cluster_id = 4;
bool DocumentData_DocumentKeywordsInfo::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_DocumentKeywordsInfo::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_DocumentKeywordsInfo::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_DocumentKeywordsInfo::clear_cluster_id() {
  cluster_id_ = 0u;
  clear_has_cluster_id();
}
::google::protobuf::uint32 DocumentData_DocumentKeywordsInfo::cluster_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentKeywordsInfo.cluster_id)
  return cluster_id_;
}
void DocumentData_DocumentKeywordsInfo::set_cluster_id(::google::protobuf::uint32 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentKeywordsInfo.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData_RisksFields::kEroScoreFieldNumber;
const int DocumentData_RisksFields::kPornoScoreFieldNumber;
const int DocumentData_RisksFields::kSafeContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData_RisksFields::DocumentData_RisksFields()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData.RisksFields)
}
DocumentData_RisksFields::DocumentData_RisksFields(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData.RisksFields)
}
DocumentData_RisksFields::DocumentData_RisksFields(const DocumentData_RisksFields& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ero_score_, &from.ero_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&safe_content_) -
    reinterpret_cast<char*>(&ero_score_)) + sizeof(safe_content_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData.RisksFields)
}

void DocumentData_RisksFields::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ero_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safe_content_) -
      reinterpret_cast<char*>(&ero_score_)) + sizeof(safe_content_));
}

DocumentData_RisksFields::~DocumentData_RisksFields() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData.RisksFields)
  SharedDtor();
}

void DocumentData_RisksFields::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentData_RisksFields::ArenaDtor(void* object) {
  DocumentData_RisksFields* _this = reinterpret_cast< DocumentData_RisksFields* >(object);
  (void)_this;
}
void DocumentData_RisksFields::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData_RisksFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData_RisksFields::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData_RisksFields& DocumentData_RisksFields::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData_RisksFields* DocumentData_RisksFields::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData_RisksFields>(arena);
}

void DocumentData_RisksFields::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData.RisksFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&ero_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&safe_content_) -
        reinterpret_cast<char*>(&ero_score_)) + sizeof(safe_content_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData_RisksFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData.RisksFields)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ero_score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_ero_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ero_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float porno_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_porno_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &porno_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float safe_content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_safe_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &safe_content_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData.RisksFields)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData.RisksFields)
  return false;
#undef DO_
}

void DocumentData_RisksFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData.RisksFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ero_score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ero_score(), output);
  }

  // optional float porno_score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->porno_score(), output);
  }

  // optional float safe_content = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->safe_content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData.RisksFields)
}

::google::protobuf::uint8* DocumentData_RisksFields::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData.RisksFields)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ero_score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ero_score(), target);
  }

  // optional float porno_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->porno_score(), target);
  }

  // optional float safe_content = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->safe_content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData.RisksFields)
  return target;
}

size_t DocumentData_RisksFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData.RisksFields)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float ero_score = 1;
    if (has_ero_score()) {
      total_size += 1 + 4;
    }

    // optional float porno_score = 2;
    if (has_porno_score()) {
      total_size += 1 + 4;
    }

    // optional float safe_content = 3;
    if (has_safe_content()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData_RisksFields::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData.RisksFields)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData_RisksFields* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData_RisksFields>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData.RisksFields)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData.RisksFields)
    MergeFrom(*source);
  }
}

void DocumentData_RisksFields::MergeFrom(const DocumentData_RisksFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData.RisksFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ero_score_ = from.ero_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      porno_score_ = from.porno_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      safe_content_ = from.safe_content_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentData_RisksFields::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData.RisksFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData_RisksFields::CopyFrom(const DocumentData_RisksFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData.RisksFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData_RisksFields::IsInitialized() const {
  return true;
}

void DocumentData_RisksFields::Swap(DocumentData_RisksFields* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData_RisksFields* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData_RisksFields::UnsafeArenaSwap(DocumentData_RisksFields* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData_RisksFields::InternalSwap(DocumentData_RisksFields* other) {
  using std::swap;
  swap(ero_score_, other->ero_score_);
  swap(porno_score_, other->porno_score_);
  swap(safe_content_, other->safe_content_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData_RisksFields::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData_RisksFields

// optional float ero_score = 1;
bool DocumentData_RisksFields::has_ero_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData_RisksFields::set_has_ero_score() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData_RisksFields::clear_has_ero_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData_RisksFields::clear_ero_score() {
  ero_score_ = 0;
  clear_has_ero_score();
}
float DocumentData_RisksFields::ero_score() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.RisksFields.ero_score)
  return ero_score_;
}
void DocumentData_RisksFields::set_ero_score(float value) {
  set_has_ero_score();
  ero_score_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.RisksFields.ero_score)
}

// optional float porno_score = 2;
bool DocumentData_RisksFields::has_porno_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData_RisksFields::set_has_porno_score() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData_RisksFields::clear_has_porno_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData_RisksFields::clear_porno_score() {
  porno_score_ = 0;
  clear_has_porno_score();
}
float DocumentData_RisksFields::porno_score() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.RisksFields.porno_score)
  return porno_score_;
}
void DocumentData_RisksFields::set_porno_score(float value) {
  set_has_porno_score();
  porno_score_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.RisksFields.porno_score)
}

// optional float safe_content = 3;
bool DocumentData_RisksFields::has_safe_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData_RisksFields::set_has_safe_content() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData_RisksFields::clear_has_safe_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData_RisksFields::clear_safe_content() {
  safe_content_ = 0;
  clear_has_safe_content();
}
float DocumentData_RisksFields::safe_content() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.RisksFields.safe_content)
  return safe_content_;
}
void DocumentData_RisksFields::set_safe_content(float value) {
  set_has_safe_content();
  safe_content_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.RisksFields.safe_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DocumentData::_slow_mutable_ok_info() {
  ok_info_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_OkInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_OkInfo* DocumentData::_slow_release_ok_info() {
  if (ok_info_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_OkInfo* temp = new ::cosmo::pb::DocumentData_OkInfo(*ok_info_);
    ok_info_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_OkInfo* DocumentData::unsafe_arena_release_ok_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.ok_info)
  clear_has_ok_info();
  ::cosmo::pb::DocumentData_OkInfo* temp = ok_info_;
  ok_info_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_ok_info(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_OkInfo** ok_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*ok_info) == NULL) {
      message_arena->Own(*ok_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*ok_info)) {
      ::cosmo::pb::DocumentData_OkInfo* new_ok_info = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_OkInfo >(
            message_arena);
      new_ok_info->CopyFrom(**ok_info);
      *ok_info = new_ok_info;
    }
}
void DocumentData::unsafe_arena_set_allocated_ok_info(
    ::cosmo::pb::DocumentData_OkInfo* ok_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete ok_info_;
  }
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.ok_info)
}
void DocumentData::_slow_mutable_news_data() {
  news_data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_NewsData >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_NewsData* DocumentData::_slow_release_news_data() {
  if (news_data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_NewsData* temp = new ::cosmo::pb::DocumentData_NewsData(*news_data_);
    news_data_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_NewsData* DocumentData::unsafe_arena_release_news_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.news_data)
  clear_has_news_data();
  ::cosmo::pb::DocumentData_NewsData* temp = news_data_;
  news_data_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_news_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_NewsData** news_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*news_data) == NULL) {
      message_arena->Own(*news_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*news_data)) {
      ::cosmo::pb::DocumentData_NewsData* new_news_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_NewsData >(
            message_arena);
      new_news_data->CopyFrom(**news_data);
      *news_data = new_news_data;
    }
}
void DocumentData::unsafe_arena_set_allocated_news_data(
    ::cosmo::pb::DocumentData_NewsData* news_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete news_data_;
  }
  news_data_ = news_data;
  if (news_data) {
    set_has_news_data();
  } else {
    clear_has_news_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.news_data)
}
void DocumentData::_slow_mutable_censor() {
  censor_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_Censor >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_Censor* DocumentData::_slow_release_censor() {
  if (censor_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_Censor* temp = new ::cosmo::pb::DocumentData_Censor(*censor_);
    censor_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_Censor* DocumentData::unsafe_arena_release_censor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.censor)
  clear_has_censor();
  ::cosmo::pb::DocumentData_Censor* temp = censor_;
  censor_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_censor(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_Censor** censor) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*censor) == NULL) {
      message_arena->Own(*censor);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*censor)) {
      ::cosmo::pb::DocumentData_Censor* new_censor = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_Censor >(
            message_arena);
      new_censor->CopyFrom(**censor);
      *censor = new_censor;
    }
}
void DocumentData::unsafe_arena_set_allocated_censor(
    ::cosmo::pb::DocumentData_Censor* censor) {
  if (GetArenaNoVirtual() == NULL) {
    delete censor_;
  }
  censor_ = censor;
  if (censor) {
    set_has_censor();
  } else {
    clear_has_censor();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.censor)
}
void DocumentData::_slow_mutable_user_stats() {
  user_stats_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_UserStats >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_UserStats* DocumentData::_slow_release_user_stats() {
  if (user_stats_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_UserStats* temp = new ::cosmo::pb::DocumentData_UserStats(*user_stats_);
    user_stats_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_UserStats* DocumentData::unsafe_arena_release_user_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.user_stats)
  clear_has_user_stats();
  ::cosmo::pb::DocumentData_UserStats* temp = user_stats_;
  user_stats_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_user_stats(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_UserStats** user_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_stats) == NULL) {
      message_arena->Own(*user_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_stats)) {
      ::cosmo::pb::DocumentData_UserStats* new_user_stats = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_UserStats >(
            message_arena);
      new_user_stats->CopyFrom(**user_stats);
      *user_stats = new_user_stats;
    }
}
void DocumentData::unsafe_arena_set_allocated_user_stats(
    ::cosmo::pb::DocumentData_UserStats* user_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_stats_;
  }
  user_stats_ = user_stats;
  if (user_stats) {
    set_has_user_stats();
  } else {
    clear_has_user_stats();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.user_stats)
}
void DocumentData::_slow_mutable_trends() {
  trends_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_Trends >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_Trends* DocumentData::_slow_release_trends() {
  if (trends_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_Trends* temp = new ::cosmo::pb::DocumentData_Trends(*trends_);
    trends_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_Trends* DocumentData::unsafe_arena_release_trends() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.trends)
  clear_has_trends();
  ::cosmo::pb::DocumentData_Trends* temp = trends_;
  trends_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_trends(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_Trends** trends) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*trends) == NULL) {
      message_arena->Own(*trends);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*trends)) {
      ::cosmo::pb::DocumentData_Trends* new_trends = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_Trends >(
            message_arena);
      new_trends->CopyFrom(**trends);
      *trends = new_trends;
    }
}
void DocumentData::unsafe_arena_set_allocated_trends(
    ::cosmo::pb::DocumentData_Trends* trends) {
  if (GetArenaNoVirtual() == NULL) {
    delete trends_;
  }
  trends_ = trends;
  if (trends) {
    set_has_trends();
  } else {
    clear_has_trends();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.trends)
}
void DocumentData::_slow_mutable_original_info() {
  original_info_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_OriginalInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_OriginalInfo* DocumentData::_slow_release_original_info() {
  if (original_info_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_OriginalInfo* temp = new ::cosmo::pb::DocumentData_OriginalInfo(*original_info_);
    original_info_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_OriginalInfo* DocumentData::unsafe_arena_release_original_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.original_info)
  clear_has_original_info();
  ::cosmo::pb::DocumentData_OriginalInfo* temp = original_info_;
  original_info_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_original_info(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_OriginalInfo** original_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*original_info) == NULL) {
      message_arena->Own(*original_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*original_info)) {
      ::cosmo::pb::DocumentData_OriginalInfo* new_original_info = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_OriginalInfo >(
            message_arena);
      new_original_info->CopyFrom(**original_info);
      *original_info = new_original_info;
    }
}
void DocumentData::unsafe_arena_set_allocated_original_info(
    ::cosmo::pb::DocumentData_OriginalInfo* original_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete original_info_;
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.original_info)
}
void DocumentData::_slow_mutable_fetcher() {
  fetcher_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_Fetcher >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_Fetcher* DocumentData::_slow_release_fetcher() {
  if (fetcher_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_Fetcher* temp = new ::cosmo::pb::DocumentData_Fetcher(*fetcher_);
    fetcher_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_Fetcher* DocumentData::unsafe_arena_release_fetcher() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.fetcher)
  clear_has_fetcher();
  ::cosmo::pb::DocumentData_Fetcher* temp = fetcher_;
  fetcher_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_fetcher(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_Fetcher** fetcher) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*fetcher) == NULL) {
      message_arena->Own(*fetcher);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*fetcher)) {
      ::cosmo::pb::DocumentData_Fetcher* new_fetcher = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_Fetcher >(
            message_arena);
      new_fetcher->CopyFrom(**fetcher);
      *fetcher = new_fetcher;
    }
}
void DocumentData::unsafe_arena_set_allocated_fetcher(
    ::cosmo::pb::DocumentData_Fetcher* fetcher) {
  if (GetArenaNoVirtual() == NULL) {
    delete fetcher_;
  }
  fetcher_ = fetcher;
  if (fetcher) {
    set_has_fetcher();
  } else {
    clear_has_fetcher();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.fetcher)
}
void DocumentData::_slow_mutable_mediametrics_fea() {
  mediametrics_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_MediametricsFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::_slow_release_mediametrics_fea() {
  if (mediametrics_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = new ::cosmo::pb::DocumentData_MediametricsFea(*mediametrics_fea_);
    mediametrics_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::unsafe_arena_release_mediametrics_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.mediametrics_fea)
  clear_has_mediametrics_fea();
  ::cosmo::pb::DocumentData_MediametricsFea* temp = mediametrics_fea_;
  mediametrics_fea_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_mediametrics_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_MediametricsFea** mediametrics_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*mediametrics_fea) == NULL) {
      message_arena->Own(*mediametrics_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*mediametrics_fea)) {
      ::cosmo::pb::DocumentData_MediametricsFea* new_mediametrics_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_MediametricsFea >(
            message_arena);
      new_mediametrics_fea->CopyFrom(**mediametrics_fea);
      *mediametrics_fea = new_mediametrics_fea;
    }
}
void DocumentData::unsafe_arena_set_allocated_mediametrics_fea(
    ::cosmo::pb::DocumentData_MediametricsFea* mediametrics_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete mediametrics_fea_;
  }
  mediametrics_fea_ = mediametrics_fea;
  if (mediametrics_fea) {
    set_has_mediametrics_fea();
  } else {
    clear_has_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.mediametrics_fea)
}
void DocumentData::_slow_mutable_topic_period_stats() {
  topic_period_stats_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicPeriodStats >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_TopicPeriodStats* DocumentData::_slow_release_topic_period_stats() {
  if (topic_period_stats_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_TopicPeriodStats* temp = new ::cosmo::pb::DocumentData_TopicPeriodStats(*topic_period_stats_);
    topic_period_stats_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_TopicPeriodStats* DocumentData::unsafe_arena_release_topic_period_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.topic_period_stats)
  clear_has_topic_period_stats();
  ::cosmo::pb::DocumentData_TopicPeriodStats* temp = topic_period_stats_;
  topic_period_stats_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_topic_period_stats(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicPeriodStats** topic_period_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*topic_period_stats) == NULL) {
      message_arena->Own(*topic_period_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*topic_period_stats)) {
      ::cosmo::pb::DocumentData_TopicPeriodStats* new_topic_period_stats = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicPeriodStats >(
            message_arena);
      new_topic_period_stats->CopyFrom(**topic_period_stats);
      *topic_period_stats = new_topic_period_stats;
    }
}
void DocumentData::unsafe_arena_set_allocated_topic_period_stats(
    ::cosmo::pb::DocumentData_TopicPeriodStats* topic_period_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete topic_period_stats_;
  }
  topic_period_stats_ = topic_period_stats;
  if (topic_period_stats) {
    set_has_topic_period_stats();
  } else {
    clear_has_topic_period_stats();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.topic_period_stats)
}
void DocumentData::_slow_mutable_app_filter_stats() {
  app_filter_stats_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_AppFilterStats >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_AppFilterStats* DocumentData::_slow_release_app_filter_stats() {
  if (app_filter_stats_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_AppFilterStats* temp = new ::cosmo::pb::DocumentData_AppFilterStats(*app_filter_stats_);
    app_filter_stats_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_AppFilterStats* DocumentData::unsafe_arena_release_app_filter_stats() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.app_filter_stats)
  clear_has_app_filter_stats();
  ::cosmo::pb::DocumentData_AppFilterStats* temp = app_filter_stats_;
  app_filter_stats_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_app_filter_stats(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_AppFilterStats** app_filter_stats) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*app_filter_stats) == NULL) {
      message_arena->Own(*app_filter_stats);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*app_filter_stats)) {
      ::cosmo::pb::DocumentData_AppFilterStats* new_app_filter_stats = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_AppFilterStats >(
            message_arena);
      new_app_filter_stats->CopyFrom(**app_filter_stats);
      *app_filter_stats = new_app_filter_stats;
    }
}
void DocumentData::unsafe_arena_set_allocated_app_filter_stats(
    ::cosmo::pb::DocumentData_AppFilterStats* app_filter_stats) {
  if (GetArenaNoVirtual() == NULL) {
    delete app_filter_stats_;
  }
  app_filter_stats_ = app_filter_stats;
  if (app_filter_stats) {
    set_has_app_filter_stats();
  } else {
    clear_has_app_filter_stats();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.app_filter_stats)
}
void DocumentData::_slow_mutable_week_mediametrics_fea() {
  week_mediametrics_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_MediametricsFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::_slow_release_week_mediametrics_fea() {
  if (week_mediametrics_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = new ::cosmo::pb::DocumentData_MediametricsFea(*week_mediametrics_fea_);
    week_mediametrics_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::unsafe_arena_release_week_mediametrics_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.week_mediametrics_fea)
  clear_has_week_mediametrics_fea();
  ::cosmo::pb::DocumentData_MediametricsFea* temp = week_mediametrics_fea_;
  week_mediametrics_fea_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_week_mediametrics_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_MediametricsFea** week_mediametrics_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*week_mediametrics_fea) == NULL) {
      message_arena->Own(*week_mediametrics_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*week_mediametrics_fea)) {
      ::cosmo::pb::DocumentData_MediametricsFea* new_week_mediametrics_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_MediametricsFea >(
            message_arena);
      new_week_mediametrics_fea->CopyFrom(**week_mediametrics_fea);
      *week_mediametrics_fea = new_week_mediametrics_fea;
    }
}
void DocumentData::unsafe_arena_set_allocated_week_mediametrics_fea(
    ::cosmo::pb::DocumentData_MediametricsFea* week_mediametrics_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete week_mediametrics_fea_;
  }
  week_mediametrics_fea_ = week_mediametrics_fea;
  if (week_mediametrics_fea) {
    set_has_week_mediametrics_fea();
  } else {
    clear_has_week_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.week_mediametrics_fea)
}
void DocumentData::_slow_mutable_ok_topic_event_stat() {
  ok_topic_event_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::_slow_release_ok_topic_event_stat() {
  if (ok_topic_event_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = new ::cosmo::pb::DocumentData_TopicEventStat(*ok_topic_event_stat_);
    ok_topic_event_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::unsafe_arena_release_ok_topic_event_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.ok_topic_event_stat)
  clear_has_ok_topic_event_stat();
  ::cosmo::pb::DocumentData_TopicEventStat* temp = ok_topic_event_stat_;
  ok_topic_event_stat_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_ok_topic_event_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** ok_topic_event_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*ok_topic_event_stat) == NULL) {
      message_arena->Own(*ok_topic_event_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*ok_topic_event_stat)) {
      ::cosmo::pb::DocumentData_TopicEventStat* new_ok_topic_event_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
            message_arena);
      new_ok_topic_event_stat->CopyFrom(**ok_topic_event_stat);
      *ok_topic_event_stat = new_ok_topic_event_stat;
    }
}
void DocumentData::unsafe_arena_set_allocated_ok_topic_event_stat(
    ::cosmo::pb::DocumentData_TopicEventStat* ok_topic_event_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete ok_topic_event_stat_;
  }
  ok_topic_event_stat_ = ok_topic_event_stat;
  if (ok_topic_event_stat) {
    set_has_ok_topic_event_stat();
  } else {
    clear_has_ok_topic_event_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.ok_topic_event_stat)
}
void DocumentData::_slow_mutable_vk_topic_event_stat_day() {
  vk_topic_event_stat_day_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::_slow_release_vk_topic_event_stat_day() {
  if (vk_topic_event_stat_day_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = new ::cosmo::pb::DocumentData_TopicEventStat(*vk_topic_event_stat_day_);
    vk_topic_event_stat_day_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::unsafe_arena_release_vk_topic_event_stat_day() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.vk_topic_event_stat_day)
  clear_has_vk_topic_event_stat_day();
  ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_day_;
  vk_topic_event_stat_day_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_vk_topic_event_stat_day(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** vk_topic_event_stat_day) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*vk_topic_event_stat_day) == NULL) {
      message_arena->Own(*vk_topic_event_stat_day);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*vk_topic_event_stat_day)) {
      ::cosmo::pb::DocumentData_TopicEventStat* new_vk_topic_event_stat_day = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
            message_arena);
      new_vk_topic_event_stat_day->CopyFrom(**vk_topic_event_stat_day);
      *vk_topic_event_stat_day = new_vk_topic_event_stat_day;
    }
}
void DocumentData::unsafe_arena_set_allocated_vk_topic_event_stat_day(
    ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day) {
  if (GetArenaNoVirtual() == NULL) {
    delete vk_topic_event_stat_day_;
  }
  vk_topic_event_stat_day_ = vk_topic_event_stat_day;
  if (vk_topic_event_stat_day) {
    set_has_vk_topic_event_stat_day();
  } else {
    clear_has_vk_topic_event_stat_day();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_day)
}
void DocumentData::_slow_mutable_vk_topic_event_stat_week() {
  vk_topic_event_stat_week_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::_slow_release_vk_topic_event_stat_week() {
  if (vk_topic_event_stat_week_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = new ::cosmo::pb::DocumentData_TopicEventStat(*vk_topic_event_stat_week_);
    vk_topic_event_stat_week_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::unsafe_arena_release_vk_topic_event_stat_week() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.vk_topic_event_stat_week)
  clear_has_vk_topic_event_stat_week();
  ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_week_;
  vk_topic_event_stat_week_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_vk_topic_event_stat_week(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** vk_topic_event_stat_week) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*vk_topic_event_stat_week) == NULL) {
      message_arena->Own(*vk_topic_event_stat_week);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*vk_topic_event_stat_week)) {
      ::cosmo::pb::DocumentData_TopicEventStat* new_vk_topic_event_stat_week = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
            message_arena);
      new_vk_topic_event_stat_week->CopyFrom(**vk_topic_event_stat_week);
      *vk_topic_event_stat_week = new_vk_topic_event_stat_week;
    }
}
void DocumentData::unsafe_arena_set_allocated_vk_topic_event_stat_week(
    ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week) {
  if (GetArenaNoVirtual() == NULL) {
    delete vk_topic_event_stat_week_;
  }
  vk_topic_event_stat_week_ = vk_topic_event_stat_week;
  if (vk_topic_event_stat_week) {
    set_has_vk_topic_event_stat_week();
  } else {
    clear_has_vk_topic_event_stat_week();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_week)
}
void DocumentData::_slow_mutable_youtube_topic_event_stat_day() {
  youtube_topic_event_stat_day_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::_slow_release_youtube_topic_event_stat_day() {
  if (youtube_topic_event_stat_day_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = new ::cosmo::pb::DocumentData_TopicEventStat(*youtube_topic_event_stat_day_);
    youtube_topic_event_stat_day_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::unsafe_arena_release_youtube_topic_event_stat_day() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.youtube_topic_event_stat_day)
  clear_has_youtube_topic_event_stat_day();
  ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_day_;
  youtube_topic_event_stat_day_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_youtube_topic_event_stat_day(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** youtube_topic_event_stat_day) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*youtube_topic_event_stat_day) == NULL) {
      message_arena->Own(*youtube_topic_event_stat_day);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*youtube_topic_event_stat_day)) {
      ::cosmo::pb::DocumentData_TopicEventStat* new_youtube_topic_event_stat_day = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
            message_arena);
      new_youtube_topic_event_stat_day->CopyFrom(**youtube_topic_event_stat_day);
      *youtube_topic_event_stat_day = new_youtube_topic_event_stat_day;
    }
}
void DocumentData::unsafe_arena_set_allocated_youtube_topic_event_stat_day(
    ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day) {
  if (GetArenaNoVirtual() == NULL) {
    delete youtube_topic_event_stat_day_;
  }
  youtube_topic_event_stat_day_ = youtube_topic_event_stat_day;
  if (youtube_topic_event_stat_day) {
    set_has_youtube_topic_event_stat_day();
  } else {
    clear_has_youtube_topic_event_stat_day();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_day)
}
void DocumentData::_slow_mutable_youtube_topic_event_stat_week() {
  youtube_topic_event_stat_week_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::_slow_release_youtube_topic_event_stat_week() {
  if (youtube_topic_event_stat_week_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = new ::cosmo::pb::DocumentData_TopicEventStat(*youtube_topic_event_stat_week_);
    youtube_topic_event_stat_week_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::unsafe_arena_release_youtube_topic_event_stat_week() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.youtube_topic_event_stat_week)
  clear_has_youtube_topic_event_stat_week();
  ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_week_;
  youtube_topic_event_stat_week_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_youtube_topic_event_stat_week(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** youtube_topic_event_stat_week) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*youtube_topic_event_stat_week) == NULL) {
      message_arena->Own(*youtube_topic_event_stat_week);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*youtube_topic_event_stat_week)) {
      ::cosmo::pb::DocumentData_TopicEventStat* new_youtube_topic_event_stat_week = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
            message_arena);
      new_youtube_topic_event_stat_week->CopyFrom(**youtube_topic_event_stat_week);
      *youtube_topic_event_stat_week = new_youtube_topic_event_stat_week;
    }
}
void DocumentData::unsafe_arena_set_allocated_youtube_topic_event_stat_week(
    ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week) {
  if (GetArenaNoVirtual() == NULL) {
    delete youtube_topic_event_stat_week_;
  }
  youtube_topic_event_stat_week_ = youtube_topic_event_stat_week;
  if (youtube_topic_event_stat_week) {
    set_has_youtube_topic_event_stat_week();
  } else {
    clear_has_youtube_topic_event_stat_week();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_week)
}
void DocumentData::_slow_mutable_taped_location_stat() {
  taped_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::_slow_release_taped_location_stat() {
  if (taped_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = new ::cosmo::pb::DocumentData_DocumentLocationStat(*taped_location_stat_);
    taped_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::unsafe_arena_release_taped_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.taped_location_stat)
  clear_has_taped_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* temp = taped_location_stat_;
  taped_location_stat_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_taped_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** taped_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*taped_location_stat) == NULL) {
      message_arena->Own(*taped_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*taped_location_stat)) {
      ::cosmo::pb::DocumentData_DocumentLocationStat* new_taped_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
            message_arena);
      new_taped_location_stat->CopyFrom(**taped_location_stat);
      *taped_location_stat = new_taped_location_stat;
    }
}
void DocumentData::unsafe_arena_set_allocated_taped_location_stat(
    ::cosmo::pb::DocumentData_DocumentLocationStat* taped_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete taped_location_stat_;
  }
  taped_location_stat_ = taped_location_stat;
  if (taped_location_stat) {
    set_has_taped_location_stat();
  } else {
    clear_has_taped_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.taped_location_stat)
}
void DocumentData::_slow_mutable_homer_location_stat() {
  homer_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::_slow_release_homer_location_stat() {
  if (homer_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = new ::cosmo::pb::DocumentData_DocumentLocationStat(*homer_location_stat_);
    homer_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::unsafe_arena_release_homer_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.homer_location_stat)
  clear_has_homer_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* temp = homer_location_stat_;
  homer_location_stat_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_homer_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** homer_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*homer_location_stat) == NULL) {
      message_arena->Own(*homer_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*homer_location_stat)) {
      ::cosmo::pb::DocumentData_DocumentLocationStat* new_homer_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
            message_arena);
      new_homer_location_stat->CopyFrom(**homer_location_stat);
      *homer_location_stat = new_homer_location_stat;
    }
}
void DocumentData::unsafe_arena_set_allocated_homer_location_stat(
    ::cosmo::pb::DocumentData_DocumentLocationStat* homer_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete homer_location_stat_;
  }
  homer_location_stat_ = homer_location_stat;
  if (homer_location_stat) {
    set_has_homer_location_stat();
  } else {
    clear_has_homer_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.homer_location_stat)
}
void DocumentData::_slow_mutable_hourly_location_stat() {
  hourly_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::_slow_release_hourly_location_stat() {
  if (hourly_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = new ::cosmo::pb::DocumentData_DocumentLocationStat(*hourly_location_stat_);
    hourly_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::unsafe_arena_release_hourly_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.hourly_location_stat)
  clear_has_hourly_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* temp = hourly_location_stat_;
  hourly_location_stat_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_hourly_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** hourly_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*hourly_location_stat) == NULL) {
      message_arena->Own(*hourly_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*hourly_location_stat)) {
      ::cosmo::pb::DocumentData_DocumentLocationStat* new_hourly_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
            message_arena);
      new_hourly_location_stat->CopyFrom(**hourly_location_stat);
      *hourly_location_stat = new_hourly_location_stat;
    }
}
void DocumentData::unsafe_arena_set_allocated_hourly_location_stat(
    ::cosmo::pb::DocumentData_DocumentLocationStat* hourly_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete hourly_location_stat_;
  }
  hourly_location_stat_ = hourly_location_stat;
  if (hourly_location_stat) {
    set_has_hourly_location_stat();
  } else {
    clear_has_hourly_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.hourly_location_stat)
}
void DocumentData::_slow_mutable_daily_location_stat() {
  daily_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::_slow_release_daily_location_stat() {
  if (daily_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = new ::cosmo::pb::DocumentData_DocumentLocationStat(*daily_location_stat_);
    daily_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::unsafe_arena_release_daily_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.daily_location_stat)
  clear_has_daily_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* temp = daily_location_stat_;
  daily_location_stat_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_daily_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** daily_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*daily_location_stat) == NULL) {
      message_arena->Own(*daily_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*daily_location_stat)) {
      ::cosmo::pb::DocumentData_DocumentLocationStat* new_daily_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
            message_arena);
      new_daily_location_stat->CopyFrom(**daily_location_stat);
      *daily_location_stat = new_daily_location_stat;
    }
}
void DocumentData::unsafe_arena_set_allocated_daily_location_stat(
    ::cosmo::pb::DocumentData_DocumentLocationStat* daily_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete daily_location_stat_;
  }
  daily_location_stat_ = daily_location_stat;
  if (daily_location_stat) {
    set_has_daily_location_stat();
  } else {
    clear_has_daily_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.daily_location_stat)
}
void DocumentData::_slow_mutable_weekly_location_stat() {
  weekly_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::_slow_release_weekly_location_stat() {
  if (weekly_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = new ::cosmo::pb::DocumentData_DocumentLocationStat(*weekly_location_stat_);
    weekly_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::unsafe_arena_release_weekly_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.weekly_location_stat)
  clear_has_weekly_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* temp = weekly_location_stat_;
  weekly_location_stat_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_weekly_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** weekly_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*weekly_location_stat) == NULL) {
      message_arena->Own(*weekly_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*weekly_location_stat)) {
      ::cosmo::pb::DocumentData_DocumentLocationStat* new_weekly_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
            message_arena);
      new_weekly_location_stat->CopyFrom(**weekly_location_stat);
      *weekly_location_stat = new_weekly_location_stat;
    }
}
void DocumentData::unsafe_arena_set_allocated_weekly_location_stat(
    ::cosmo::pb::DocumentData_DocumentLocationStat* weekly_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete weekly_location_stat_;
  }
  weekly_location_stat_ = weekly_location_stat;
  if (weekly_location_stat) {
    set_has_weekly_location_stat();
  } else {
    clear_has_weekly_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.weekly_location_stat)
}
void DocumentData::_slow_mutable_monthly_location_stat() {
  monthly_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::_slow_release_monthly_location_stat() {
  if (monthly_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = new ::cosmo::pb::DocumentData_DocumentLocationStat(*monthly_location_stat_);
    monthly_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::unsafe_arena_release_monthly_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.monthly_location_stat)
  clear_has_monthly_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* temp = monthly_location_stat_;
  monthly_location_stat_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_monthly_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** monthly_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*monthly_location_stat) == NULL) {
      message_arena->Own(*monthly_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*monthly_location_stat)) {
      ::cosmo::pb::DocumentData_DocumentLocationStat* new_monthly_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
            message_arena);
      new_monthly_location_stat->CopyFrom(**monthly_location_stat);
      *monthly_location_stat = new_monthly_location_stat;
    }
}
void DocumentData::unsafe_arena_set_allocated_monthly_location_stat(
    ::cosmo::pb::DocumentData_DocumentLocationStat* monthly_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete monthly_location_stat_;
  }
  monthly_location_stat_ = monthly_location_stat;
  if (monthly_location_stat) {
    set_has_monthly_location_stat();
  } else {
    clear_has_monthly_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.monthly_location_stat)
}
void DocumentData::_slow_mutable_fetcher_geo() {
  fetcher_geo_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_FetcherGeo >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_FetcherGeo* DocumentData::_slow_release_fetcher_geo() {
  if (fetcher_geo_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_FetcherGeo* temp = new ::cosmo::pb::DocumentData_FetcherGeo(*fetcher_geo_);
    fetcher_geo_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_FetcherGeo* DocumentData::unsafe_arena_release_fetcher_geo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.fetcher_geo)
  clear_has_fetcher_geo();
  ::cosmo::pb::DocumentData_FetcherGeo* temp = fetcher_geo_;
  fetcher_geo_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_fetcher_geo(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_FetcherGeo** fetcher_geo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*fetcher_geo) == NULL) {
      message_arena->Own(*fetcher_geo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*fetcher_geo)) {
      ::cosmo::pb::DocumentData_FetcherGeo* new_fetcher_geo = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_FetcherGeo >(
            message_arena);
      new_fetcher_geo->CopyFrom(**fetcher_geo);
      *fetcher_geo = new_fetcher_geo;
    }
}
void DocumentData::unsafe_arena_set_allocated_fetcher_geo(
    ::cosmo::pb::DocumentData_FetcherGeo* fetcher_geo) {
  if (GetArenaNoVirtual() == NULL) {
    delete fetcher_geo_;
  }
  fetcher_geo_ = fetcher_geo;
  if (fetcher_geo) {
    set_has_fetcher_geo();
  } else {
    clear_has_fetcher_geo();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.fetcher_geo)
}
void DocumentData::_slow_mutable_hourly_fast_mediametrics_fea() {
  hourly_fast_mediametrics_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_MediametricsFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::_slow_release_hourly_fast_mediametrics_fea() {
  if (hourly_fast_mediametrics_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = new ::cosmo::pb::DocumentData_MediametricsFea(*hourly_fast_mediametrics_fea_);
    hourly_fast_mediametrics_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::unsafe_arena_release_hourly_fast_mediametrics_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.hourly_fast_mediametrics_fea)
  clear_has_hourly_fast_mediametrics_fea();
  ::cosmo::pb::DocumentData_MediametricsFea* temp = hourly_fast_mediametrics_fea_;
  hourly_fast_mediametrics_fea_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_hourly_fast_mediametrics_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_MediametricsFea** hourly_fast_mediametrics_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*hourly_fast_mediametrics_fea) == NULL) {
      message_arena->Own(*hourly_fast_mediametrics_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*hourly_fast_mediametrics_fea)) {
      ::cosmo::pb::DocumentData_MediametricsFea* new_hourly_fast_mediametrics_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_MediametricsFea >(
            message_arena);
      new_hourly_fast_mediametrics_fea->CopyFrom(**hourly_fast_mediametrics_fea);
      *hourly_fast_mediametrics_fea = new_hourly_fast_mediametrics_fea;
    }
}
void DocumentData::unsafe_arena_set_allocated_hourly_fast_mediametrics_fea(
    ::cosmo::pb::DocumentData_MediametricsFea* hourly_fast_mediametrics_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete hourly_fast_mediametrics_fea_;
  }
  hourly_fast_mediametrics_fea_ = hourly_fast_mediametrics_fea;
  if (hourly_fast_mediametrics_fea) {
    set_has_hourly_fast_mediametrics_fea();
  } else {
    clear_has_hourly_fast_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.hourly_fast_mediametrics_fea)
}
void DocumentData::_slow_mutable_daily_fast_mediametrics_fea() {
  daily_fast_mediametrics_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_MediametricsFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::_slow_release_daily_fast_mediametrics_fea() {
  if (daily_fast_mediametrics_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = new ::cosmo::pb::DocumentData_MediametricsFea(*daily_fast_mediametrics_fea_);
    daily_fast_mediametrics_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::unsafe_arena_release_daily_fast_mediametrics_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.daily_fast_mediametrics_fea)
  clear_has_daily_fast_mediametrics_fea();
  ::cosmo::pb::DocumentData_MediametricsFea* temp = daily_fast_mediametrics_fea_;
  daily_fast_mediametrics_fea_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_daily_fast_mediametrics_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_MediametricsFea** daily_fast_mediametrics_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*daily_fast_mediametrics_fea) == NULL) {
      message_arena->Own(*daily_fast_mediametrics_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*daily_fast_mediametrics_fea)) {
      ::cosmo::pb::DocumentData_MediametricsFea* new_daily_fast_mediametrics_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_MediametricsFea >(
            message_arena);
      new_daily_fast_mediametrics_fea->CopyFrom(**daily_fast_mediametrics_fea);
      *daily_fast_mediametrics_fea = new_daily_fast_mediametrics_fea;
    }
}
void DocumentData::unsafe_arena_set_allocated_daily_fast_mediametrics_fea(
    ::cosmo::pb::DocumentData_MediametricsFea* daily_fast_mediametrics_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete daily_fast_mediametrics_fea_;
  }
  daily_fast_mediametrics_fea_ = daily_fast_mediametrics_fea;
  if (daily_fast_mediametrics_fea) {
    set_has_daily_fast_mediametrics_fea();
  } else {
    clear_has_daily_fast_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.daily_fast_mediametrics_fea)
}
void DocumentData::_slow_mutable_fetcher_image() {
  fetcher_image_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_FetcherImage >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_FetcherImage* DocumentData::_slow_release_fetcher_image() {
  if (fetcher_image_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_FetcherImage* temp = new ::cosmo::pb::DocumentData_FetcherImage(*fetcher_image_);
    fetcher_image_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_FetcherImage* DocumentData::unsafe_arena_release_fetcher_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.fetcher_image)
  clear_has_fetcher_image();
  ::cosmo::pb::DocumentData_FetcherImage* temp = fetcher_image_;
  fetcher_image_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_fetcher_image(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_FetcherImage** fetcher_image) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*fetcher_image) == NULL) {
      message_arena->Own(*fetcher_image);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*fetcher_image)) {
      ::cosmo::pb::DocumentData_FetcherImage* new_fetcher_image = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_FetcherImage >(
            message_arena);
      new_fetcher_image->CopyFrom(**fetcher_image);
      *fetcher_image = new_fetcher_image;
    }
}
void DocumentData::unsafe_arena_set_allocated_fetcher_image(
    ::cosmo::pb::DocumentData_FetcherImage* fetcher_image) {
  if (GetArenaNoVirtual() == NULL) {
    delete fetcher_image_;
  }
  fetcher_image_ = fetcher_image;
  if (fetcher_image) {
    set_has_fetcher_image();
  } else {
    clear_has_fetcher_image();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.fetcher_image)
}
void DocumentData::_slow_mutable_content_data() {
  content_data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_ContentData >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_ContentData* DocumentData::_slow_release_content_data() {
  if (content_data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_ContentData* temp = new ::cosmo::pb::DocumentData_ContentData(*content_data_);
    content_data_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_ContentData* DocumentData::unsafe_arena_release_content_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.content_data)
  clear_has_content_data();
  ::cosmo::pb::DocumentData_ContentData* temp = content_data_;
  content_data_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_content_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_ContentData** content_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*content_data) == NULL) {
      message_arena->Own(*content_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*content_data)) {
      ::cosmo::pb::DocumentData_ContentData* new_content_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_ContentData >(
            message_arena);
      new_content_data->CopyFrom(**content_data);
      *content_data = new_content_data;
    }
}
void DocumentData::unsafe_arena_set_allocated_content_data(
    ::cosmo::pb::DocumentData_ContentData* content_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete content_data_;
  }
  content_data_ = content_data;
  if (content_data) {
    set_has_content_data();
  } else {
    clear_has_content_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.content_data)
}
void DocumentData::_slow_mutable_vk_topic_event_stat_day_v2() {
  vk_topic_event_stat_day_v2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::_slow_release_vk_topic_event_stat_day_v2() {
  if (vk_topic_event_stat_day_v2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = new ::cosmo::pb::DocumentData_TopicEventStat(*vk_topic_event_stat_day_v2_);
    vk_topic_event_stat_day_v2_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::unsafe_arena_release_vk_topic_event_stat_day_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.vk_topic_event_stat_day_v2)
  clear_has_vk_topic_event_stat_day_v2();
  ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_day_v2_;
  vk_topic_event_stat_day_v2_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_vk_topic_event_stat_day_v2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** vk_topic_event_stat_day_v2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*vk_topic_event_stat_day_v2) == NULL) {
      message_arena->Own(*vk_topic_event_stat_day_v2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*vk_topic_event_stat_day_v2)) {
      ::cosmo::pb::DocumentData_TopicEventStat* new_vk_topic_event_stat_day_v2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
            message_arena);
      new_vk_topic_event_stat_day_v2->CopyFrom(**vk_topic_event_stat_day_v2);
      *vk_topic_event_stat_day_v2 = new_vk_topic_event_stat_day_v2;
    }
}
void DocumentData::unsafe_arena_set_allocated_vk_topic_event_stat_day_v2(
    ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day_v2) {
  if (GetArenaNoVirtual() == NULL) {
    delete vk_topic_event_stat_day_v2_;
  }
  vk_topic_event_stat_day_v2_ = vk_topic_event_stat_day_v2;
  if (vk_topic_event_stat_day_v2) {
    set_has_vk_topic_event_stat_day_v2();
  } else {
    clear_has_vk_topic_event_stat_day_v2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_day_v2)
}
void DocumentData::_slow_mutable_vk_topic_event_stat_week_v2() {
  vk_topic_event_stat_week_v2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::_slow_release_vk_topic_event_stat_week_v2() {
  if (vk_topic_event_stat_week_v2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = new ::cosmo::pb::DocumentData_TopicEventStat(*vk_topic_event_stat_week_v2_);
    vk_topic_event_stat_week_v2_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::unsafe_arena_release_vk_topic_event_stat_week_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.vk_topic_event_stat_week_v2)
  clear_has_vk_topic_event_stat_week_v2();
  ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_week_v2_;
  vk_topic_event_stat_week_v2_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_vk_topic_event_stat_week_v2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** vk_topic_event_stat_week_v2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*vk_topic_event_stat_week_v2) == NULL) {
      message_arena->Own(*vk_topic_event_stat_week_v2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*vk_topic_event_stat_week_v2)) {
      ::cosmo::pb::DocumentData_TopicEventStat* new_vk_topic_event_stat_week_v2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
            message_arena);
      new_vk_topic_event_stat_week_v2->CopyFrom(**vk_topic_event_stat_week_v2);
      *vk_topic_event_stat_week_v2 = new_vk_topic_event_stat_week_v2;
    }
}
void DocumentData::unsafe_arena_set_allocated_vk_topic_event_stat_week_v2(
    ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week_v2) {
  if (GetArenaNoVirtual() == NULL) {
    delete vk_topic_event_stat_week_v2_;
  }
  vk_topic_event_stat_week_v2_ = vk_topic_event_stat_week_v2;
  if (vk_topic_event_stat_week_v2) {
    set_has_vk_topic_event_stat_week_v2();
  } else {
    clear_has_vk_topic_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_week_v2)
}
void DocumentData::_slow_mutable_youtube_topic_event_stat_day_v2() {
  youtube_topic_event_stat_day_v2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::_slow_release_youtube_topic_event_stat_day_v2() {
  if (youtube_topic_event_stat_day_v2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = new ::cosmo::pb::DocumentData_TopicEventStat(*youtube_topic_event_stat_day_v2_);
    youtube_topic_event_stat_day_v2_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::unsafe_arena_release_youtube_topic_event_stat_day_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.youtube_topic_event_stat_day_v2)
  clear_has_youtube_topic_event_stat_day_v2();
  ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_day_v2_;
  youtube_topic_event_stat_day_v2_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_youtube_topic_event_stat_day_v2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** youtube_topic_event_stat_day_v2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*youtube_topic_event_stat_day_v2) == NULL) {
      message_arena->Own(*youtube_topic_event_stat_day_v2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*youtube_topic_event_stat_day_v2)) {
      ::cosmo::pb::DocumentData_TopicEventStat* new_youtube_topic_event_stat_day_v2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
            message_arena);
      new_youtube_topic_event_stat_day_v2->CopyFrom(**youtube_topic_event_stat_day_v2);
      *youtube_topic_event_stat_day_v2 = new_youtube_topic_event_stat_day_v2;
    }
}
void DocumentData::unsafe_arena_set_allocated_youtube_topic_event_stat_day_v2(
    ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day_v2) {
  if (GetArenaNoVirtual() == NULL) {
    delete youtube_topic_event_stat_day_v2_;
  }
  youtube_topic_event_stat_day_v2_ = youtube_topic_event_stat_day_v2;
  if (youtube_topic_event_stat_day_v2) {
    set_has_youtube_topic_event_stat_day_v2();
  } else {
    clear_has_youtube_topic_event_stat_day_v2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_day_v2)
}
void DocumentData::_slow_mutable_youtube_topic_event_stat_week_v2() {
  youtube_topic_event_stat_week_v2_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::_slow_release_youtube_topic_event_stat_week_v2() {
  if (youtube_topic_event_stat_week_v2_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = new ::cosmo::pb::DocumentData_TopicEventStat(*youtube_topic_event_stat_week_v2_);
    youtube_topic_event_stat_week_v2_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::unsafe_arena_release_youtube_topic_event_stat_week_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.youtube_topic_event_stat_week_v2)
  clear_has_youtube_topic_event_stat_week_v2();
  ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_week_v2_;
  youtube_topic_event_stat_week_v2_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_youtube_topic_event_stat_week_v2(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** youtube_topic_event_stat_week_v2) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*youtube_topic_event_stat_week_v2) == NULL) {
      message_arena->Own(*youtube_topic_event_stat_week_v2);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*youtube_topic_event_stat_week_v2)) {
      ::cosmo::pb::DocumentData_TopicEventStat* new_youtube_topic_event_stat_week_v2 = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_TopicEventStat >(
            message_arena);
      new_youtube_topic_event_stat_week_v2->CopyFrom(**youtube_topic_event_stat_week_v2);
      *youtube_topic_event_stat_week_v2 = new_youtube_topic_event_stat_week_v2;
    }
}
void DocumentData::unsafe_arena_set_allocated_youtube_topic_event_stat_week_v2(
    ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week_v2) {
  if (GetArenaNoVirtual() == NULL) {
    delete youtube_topic_event_stat_week_v2_;
  }
  youtube_topic_event_stat_week_v2_ = youtube_topic_event_stat_week_v2;
  if (youtube_topic_event_stat_week_v2) {
    set_has_youtube_topic_event_stat_week_v2();
  } else {
    clear_has_youtube_topic_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_week_v2)
}
void DocumentData::_slow_mutable_document_i2i_stat() {
  document_i2i_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentMutualStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::_slow_release_document_i2i_stat() {
  if (document_i2i_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentMutualStat* temp = new ::cosmo::pb::DocumentData_DocumentMutualStat(*document_i2i_stat_);
    document_i2i_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::unsafe_arena_release_document_i2i_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.document_i2i_stat)
  clear_has_document_i2i_stat();
  ::cosmo::pb::DocumentData_DocumentMutualStat* temp = document_i2i_stat_;
  document_i2i_stat_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_document_i2i_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentMutualStat** document_i2i_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*document_i2i_stat) == NULL) {
      message_arena->Own(*document_i2i_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*document_i2i_stat)) {
      ::cosmo::pb::DocumentData_DocumentMutualStat* new_document_i2i_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentMutualStat >(
            message_arena);
      new_document_i2i_stat->CopyFrom(**document_i2i_stat);
      *document_i2i_stat = new_document_i2i_stat;
    }
}
void DocumentData::unsafe_arena_set_allocated_document_i2i_stat(
    ::cosmo::pb::DocumentData_DocumentMutualStat* document_i2i_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete document_i2i_stat_;
  }
  document_i2i_stat_ = document_i2i_stat;
  if (document_i2i_stat) {
    set_has_document_i2i_stat();
  } else {
    clear_has_document_i2i_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.document_i2i_stat)
}
void DocumentData::_slow_mutable_document_mv_stat() {
  document_mv_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentMutualStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::_slow_release_document_mv_stat() {
  if (document_mv_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentMutualStat* temp = new ::cosmo::pb::DocumentData_DocumentMutualStat(*document_mv_stat_);
    document_mv_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::unsafe_arena_release_document_mv_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.document_mv_stat)
  clear_has_document_mv_stat();
  ::cosmo::pb::DocumentData_DocumentMutualStat* temp = document_mv_stat_;
  document_mv_stat_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_document_mv_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentMutualStat** document_mv_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*document_mv_stat) == NULL) {
      message_arena->Own(*document_mv_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*document_mv_stat)) {
      ::cosmo::pb::DocumentData_DocumentMutualStat* new_document_mv_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentMutualStat >(
            message_arena);
      new_document_mv_stat->CopyFrom(**document_mv_stat);
      *document_mv_stat = new_document_mv_stat;
    }
}
void DocumentData::unsafe_arena_set_allocated_document_mv_stat(
    ::cosmo::pb::DocumentData_DocumentMutualStat* document_mv_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete document_mv_stat_;
  }
  document_mv_stat_ = document_mv_stat;
  if (document_mv_stat) {
    set_has_document_mv_stat();
  } else {
    clear_has_document_mv_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.document_mv_stat)
}
void DocumentData::_slow_mutable_news_tags_data() {
  news_tags_data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_NewsTagsData >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_NewsTagsData* DocumentData::_slow_release_news_tags_data() {
  if (news_tags_data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_NewsTagsData* temp = new ::cosmo::pb::DocumentData_NewsTagsData(*news_tags_data_);
    news_tags_data_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_NewsTagsData* DocumentData::unsafe_arena_release_news_tags_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.news_tags_data)
  clear_has_news_tags_data();
  ::cosmo::pb::DocumentData_NewsTagsData* temp = news_tags_data_;
  news_tags_data_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_news_tags_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_NewsTagsData** news_tags_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*news_tags_data) == NULL) {
      message_arena->Own(*news_tags_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*news_tags_data)) {
      ::cosmo::pb::DocumentData_NewsTagsData* new_news_tags_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_NewsTagsData >(
            message_arena);
      new_news_tags_data->CopyFrom(**news_tags_data);
      *news_tags_data = new_news_tags_data;
    }
}
void DocumentData::unsafe_arena_set_allocated_news_tags_data(
    ::cosmo::pb::DocumentData_NewsTagsData* news_tags_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete news_tags_data_;
  }
  news_tags_data_ = news_tags_data;
  if (news_tags_data) {
    set_has_news_tags_data();
  } else {
    clear_has_news_tags_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.news_tags_data)
}
void DocumentData::_slow_mutable_news_story_data() {
  news_story_data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_NewsStoryData >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_NewsStoryData* DocumentData::_slow_release_news_story_data() {
  if (news_story_data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_NewsStoryData* temp = new ::cosmo::pb::DocumentData_NewsStoryData(*news_story_data_);
    news_story_data_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_NewsStoryData* DocumentData::unsafe_arena_release_news_story_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.news_story_data)
  clear_has_news_story_data();
  ::cosmo::pb::DocumentData_NewsStoryData* temp = news_story_data_;
  news_story_data_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_news_story_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_NewsStoryData** news_story_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*news_story_data) == NULL) {
      message_arena->Own(*news_story_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*news_story_data)) {
      ::cosmo::pb::DocumentData_NewsStoryData* new_news_story_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_NewsStoryData >(
            message_arena);
      new_news_story_data->CopyFrom(**news_story_data);
      *news_story_data = new_news_story_data;
    }
}
void DocumentData::unsafe_arena_set_allocated_news_story_data(
    ::cosmo::pb::DocumentData_NewsStoryData* news_story_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete news_story_data_;
  }
  news_story_data_ = news_story_data;
  if (news_story_data) {
    set_has_news_story_data();
  } else {
    clear_has_news_story_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.news_story_data)
}
void DocumentData::_slow_mutable_native_target_is_active() {
  native_target_is_active_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_NativeTargetIsActive >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_NativeTargetIsActive* DocumentData::_slow_release_native_target_is_active() {
  if (native_target_is_active_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_NativeTargetIsActive* temp = new ::cosmo::pb::DocumentData_NativeTargetIsActive(*native_target_is_active_);
    native_target_is_active_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_NativeTargetIsActive* DocumentData::unsafe_arena_release_native_target_is_active() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.native_target_is_active)
  clear_has_native_target_is_active();
  ::cosmo::pb::DocumentData_NativeTargetIsActive* temp = native_target_is_active_;
  native_target_is_active_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_native_target_is_active(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_NativeTargetIsActive** native_target_is_active) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*native_target_is_active) == NULL) {
      message_arena->Own(*native_target_is_active);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*native_target_is_active)) {
      ::cosmo::pb::DocumentData_NativeTargetIsActive* new_native_target_is_active = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_NativeTargetIsActive >(
            message_arena);
      new_native_target_is_active->CopyFrom(**native_target_is_active);
      *native_target_is_active = new_native_target_is_active;
    }
}
void DocumentData::unsafe_arena_set_allocated_native_target_is_active(
    ::cosmo::pb::DocumentData_NativeTargetIsActive* native_target_is_active) {
  if (GetArenaNoVirtual() == NULL) {
    delete native_target_is_active_;
  }
  native_target_is_active_ = native_target_is_active;
  if (native_target_is_active) {
    set_has_native_target_is_active();
  } else {
    clear_has_native_target_is_active();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.native_target_is_active)
}
void DocumentData::_slow_mutable_fast_location_stat() {
  fast_location_stat_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::_slow_release_fast_location_stat() {
  if (fast_location_stat_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = new ::cosmo::pb::DocumentData_DocumentLocationStat(*fast_location_stat_);
    fast_location_stat_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::unsafe_arena_release_fast_location_stat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.fast_location_stat)
  clear_has_fast_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* temp = fast_location_stat_;
  fast_location_stat_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_fast_location_stat(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** fast_location_stat) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*fast_location_stat) == NULL) {
      message_arena->Own(*fast_location_stat);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*fast_location_stat)) {
      ::cosmo::pb::DocumentData_DocumentLocationStat* new_fast_location_stat = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentLocationStat >(
            message_arena);
      new_fast_location_stat->CopyFrom(**fast_location_stat);
      *fast_location_stat = new_fast_location_stat;
    }
}
void DocumentData::unsafe_arena_set_allocated_fast_location_stat(
    ::cosmo::pb::DocumentData_DocumentLocationStat* fast_location_stat) {
  if (GetArenaNoVirtual() == NULL) {
    delete fast_location_stat_;
  }
  fast_location_stat_ = fast_location_stat;
  if (fast_location_stat) {
    set_has_fast_location_stat();
  } else {
    clear_has_fast_location_stat();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.fast_location_stat)
}
void DocumentData::_slow_mutable_content_porn_fea() {
  content_porn_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_ContentPornFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_ContentPornFea* DocumentData::_slow_release_content_porn_fea() {
  if (content_porn_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_ContentPornFea* temp = new ::cosmo::pb::DocumentData_ContentPornFea(*content_porn_fea_);
    content_porn_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_ContentPornFea* DocumentData::unsafe_arena_release_content_porn_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.content_porn_fea)
  clear_has_content_porn_fea();
  ::cosmo::pb::DocumentData_ContentPornFea* temp = content_porn_fea_;
  content_porn_fea_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_content_porn_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_ContentPornFea** content_porn_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*content_porn_fea) == NULL) {
      message_arena->Own(*content_porn_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*content_porn_fea)) {
      ::cosmo::pb::DocumentData_ContentPornFea* new_content_porn_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_ContentPornFea >(
            message_arena);
      new_content_porn_fea->CopyFrom(**content_porn_fea);
      *content_porn_fea = new_content_porn_fea;
    }
}
void DocumentData::unsafe_arena_set_allocated_content_porn_fea(
    ::cosmo::pb::DocumentData_ContentPornFea* content_porn_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete content_porn_fea_;
  }
  content_porn_fea_ = content_porn_fea;
  if (content_porn_fea) {
    set_has_content_porn_fea();
  } else {
    clear_has_content_porn_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.content_porn_fea)
}
void DocumentData::_slow_mutable_content_themes() {
  content_themes_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_ContentThemes >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_ContentThemes* DocumentData::_slow_release_content_themes() {
  if (content_themes_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_ContentThemes* temp = new ::cosmo::pb::DocumentData_ContentThemes(*content_themes_);
    content_themes_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_ContentThemes* DocumentData::unsafe_arena_release_content_themes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.content_themes)
  clear_has_content_themes();
  ::cosmo::pb::DocumentData_ContentThemes* temp = content_themes_;
  content_themes_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_content_themes(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_ContentThemes** content_themes) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*content_themes) == NULL) {
      message_arena->Own(*content_themes);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*content_themes)) {
      ::cosmo::pb::DocumentData_ContentThemes* new_content_themes = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_ContentThemes >(
            message_arena);
      new_content_themes->CopyFrom(**content_themes);
      *content_themes = new_content_themes;
    }
}
void DocumentData::unsafe_arena_set_allocated_content_themes(
    ::cosmo::pb::DocumentData_ContentThemes* content_themes) {
  if (GetArenaNoVirtual() == NULL) {
    delete content_themes_;
  }
  content_themes_ = content_themes;
  if (content_themes) {
    set_has_content_themes();
  } else {
    clear_has_content_themes();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.content_themes)
}
void DocumentData::_slow_mutable_story_cluster_id() {
  story_cluster_id_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_StoryClusterId >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_StoryClusterId* DocumentData::_slow_release_story_cluster_id() {
  if (story_cluster_id_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_StoryClusterId* temp = new ::cosmo::pb::DocumentData_StoryClusterId(*story_cluster_id_);
    story_cluster_id_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_StoryClusterId* DocumentData::unsafe_arena_release_story_cluster_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.story_cluster_id)
  clear_has_story_cluster_id();
  ::cosmo::pb::DocumentData_StoryClusterId* temp = story_cluster_id_;
  story_cluster_id_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_story_cluster_id(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_StoryClusterId** story_cluster_id) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*story_cluster_id) == NULL) {
      message_arena->Own(*story_cluster_id);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*story_cluster_id)) {
      ::cosmo::pb::DocumentData_StoryClusterId* new_story_cluster_id = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_StoryClusterId >(
            message_arena);
      new_story_cluster_id->CopyFrom(**story_cluster_id);
      *story_cluster_id = new_story_cluster_id;
    }
}
void DocumentData::unsafe_arena_set_allocated_story_cluster_id(
    ::cosmo::pb::DocumentData_StoryClusterId* story_cluster_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete story_cluster_id_;
  }
  story_cluster_id_ = story_cluster_id;
  if (story_cluster_id) {
    set_has_story_cluster_id();
  } else {
    clear_has_story_cluster_id();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.story_cluster_id)
}
void DocumentData::_slow_mutable_document_keywords_info() {
  document_keywords_info_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentKeywordsInfo >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocumentKeywordsInfo* DocumentData::_slow_release_document_keywords_info() {
  if (document_keywords_info_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocumentKeywordsInfo* temp = new ::cosmo::pb::DocumentData_DocumentKeywordsInfo(*document_keywords_info_);
    document_keywords_info_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocumentKeywordsInfo* DocumentData::unsafe_arena_release_document_keywords_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.document_keywords_info)
  clear_has_document_keywords_info();
  ::cosmo::pb::DocumentData_DocumentKeywordsInfo* temp = document_keywords_info_;
  document_keywords_info_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_document_keywords_info(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentKeywordsInfo** document_keywords_info) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*document_keywords_info) == NULL) {
      message_arena->Own(*document_keywords_info);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*document_keywords_info)) {
      ::cosmo::pb::DocumentData_DocumentKeywordsInfo* new_document_keywords_info = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocumentKeywordsInfo >(
            message_arena);
      new_document_keywords_info->CopyFrom(**document_keywords_info);
      *document_keywords_info = new_document_keywords_info;
    }
}
void DocumentData::unsafe_arena_set_allocated_document_keywords_info(
    ::cosmo::pb::DocumentData_DocumentKeywordsInfo* document_keywords_info) {
  if (GetArenaNoVirtual() == NULL) {
    delete document_keywords_info_;
  }
  document_keywords_info_ = document_keywords_info;
  if (document_keywords_info) {
    set_has_document_keywords_info();
  } else {
    clear_has_document_keywords_info();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.document_keywords_info)
}
void DocumentData::_slow_mutable_image_porn_fea() {
  image_porn_fea_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_ImagePornFea >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_ImagePornFea* DocumentData::_slow_release_image_porn_fea() {
  if (image_porn_fea_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_ImagePornFea* temp = new ::cosmo::pb::DocumentData_ImagePornFea(*image_porn_fea_);
    image_porn_fea_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_ImagePornFea* DocumentData::unsafe_arena_release_image_porn_fea() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.image_porn_fea)
  clear_has_image_porn_fea();
  ::cosmo::pb::DocumentData_ImagePornFea* temp = image_porn_fea_;
  image_porn_fea_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_image_porn_fea(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_ImagePornFea** image_porn_fea) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*image_porn_fea) == NULL) {
      message_arena->Own(*image_porn_fea);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*image_porn_fea)) {
      ::cosmo::pb::DocumentData_ImagePornFea* new_image_porn_fea = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_ImagePornFea >(
            message_arena);
      new_image_porn_fea->CopyFrom(**image_porn_fea);
      *image_porn_fea = new_image_porn_fea;
    }
}
void DocumentData::unsafe_arena_set_allocated_image_porn_fea(
    ::cosmo::pb::DocumentData_ImagePornFea* image_porn_fea) {
  if (GetArenaNoVirtual() == NULL) {
    delete image_porn_fea_;
  }
  image_porn_fea_ = image_porn_fea;
  if (image_porn_fea) {
    set_has_image_porn_fea();
  } else {
    clear_has_image_porn_fea();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.image_porn_fea)
}
void DocumentData::_slow_mutable_fetcherfirstmeet() {
  fetcherfirstmeet_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_FetcherFirstmeet >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_FetcherFirstmeet* DocumentData::_slow_release_fetcherfirstmeet() {
  if (fetcherfirstmeet_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_FetcherFirstmeet* temp = new ::cosmo::pb::DocumentData_FetcherFirstmeet(*fetcherfirstmeet_);
    fetcherfirstmeet_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_FetcherFirstmeet* DocumentData::unsafe_arena_release_fetcherfirstmeet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.fetcherFirstmeet)
  clear_has_fetcherfirstmeet();
  ::cosmo::pb::DocumentData_FetcherFirstmeet* temp = fetcherfirstmeet_;
  fetcherfirstmeet_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_fetcherfirstmeet(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_FetcherFirstmeet** fetcherfirstmeet) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*fetcherfirstmeet) == NULL) {
      message_arena->Own(*fetcherfirstmeet);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*fetcherfirstmeet)) {
      ::cosmo::pb::DocumentData_FetcherFirstmeet* new_fetcherfirstmeet = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_FetcherFirstmeet >(
            message_arena);
      new_fetcherfirstmeet->CopyFrom(**fetcherfirstmeet);
      *fetcherfirstmeet = new_fetcherfirstmeet;
    }
}
void DocumentData::unsafe_arena_set_allocated_fetcherfirstmeet(
    ::cosmo::pb::DocumentData_FetcherFirstmeet* fetcherfirstmeet) {
  if (GetArenaNoVirtual() == NULL) {
    delete fetcherfirstmeet_;
  }
  fetcherfirstmeet_ = fetcherfirstmeet;
  if (fetcherfirstmeet) {
    set_has_fetcherfirstmeet();
  } else {
    clear_has_fetcherfirstmeet();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.fetcherFirstmeet)
}
void DocumentData::_slow_mutable_pubdate() {
  pubdate_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_FetcherPubdate >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_FetcherPubdate* DocumentData::_slow_release_pubdate() {
  if (pubdate_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_FetcherPubdate* temp = new ::cosmo::pb::DocumentData_FetcherPubdate(*pubdate_);
    pubdate_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_FetcherPubdate* DocumentData::unsafe_arena_release_pubdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.pubdate)
  clear_has_pubdate();
  ::cosmo::pb::DocumentData_FetcherPubdate* temp = pubdate_;
  pubdate_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_pubdate(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_FetcherPubdate** pubdate) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*pubdate) == NULL) {
      message_arena->Own(*pubdate);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*pubdate)) {
      ::cosmo::pb::DocumentData_FetcherPubdate* new_pubdate = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_FetcherPubdate >(
            message_arena);
      new_pubdate->CopyFrom(**pubdate);
      *pubdate = new_pubdate;
    }
}
void DocumentData::unsafe_arena_set_allocated_pubdate(
    ::cosmo::pb::DocumentData_FetcherPubdate* pubdate) {
  if (GetArenaNoVirtual() == NULL) {
    delete pubdate_;
  }
  pubdate_ = pubdate;
  if (pubdate) {
    set_has_pubdate();
  } else {
    clear_has_pubdate();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.pubdate)
}
void DocumentData::_slow_mutable_freshness_data() {
  freshness_data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_FreshnessData >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_FreshnessData* DocumentData::_slow_release_freshness_data() {
  if (freshness_data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_FreshnessData* temp = new ::cosmo::pb::DocumentData_FreshnessData(*freshness_data_);
    freshness_data_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_FreshnessData* DocumentData::unsafe_arena_release_freshness_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.freshness_data)
  clear_has_freshness_data();
  ::cosmo::pb::DocumentData_FreshnessData* temp = freshness_data_;
  freshness_data_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_freshness_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_FreshnessData** freshness_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*freshness_data) == NULL) {
      message_arena->Own(*freshness_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*freshness_data)) {
      ::cosmo::pb::DocumentData_FreshnessData* new_freshness_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_FreshnessData >(
            message_arena);
      new_freshness_data->CopyFrom(**freshness_data);
      *freshness_data = new_freshness_data;
    }
}
void DocumentData::unsafe_arena_set_allocated_freshness_data(
    ::cosmo::pb::DocumentData_FreshnessData* freshness_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete freshness_data_;
  }
  freshness_data_ = freshness_data;
  if (freshness_data) {
    set_has_freshness_data();
  } else {
    clear_has_freshness_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.freshness_data)
}
void DocumentData::_slow_mutable_state() {
  state_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocState >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_DocState* DocumentData::_slow_release_state() {
  if (state_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_DocState* temp = new ::cosmo::pb::DocumentData_DocState(*state_);
    state_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_DocState* DocumentData::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.state)
  clear_has_state();
  ::cosmo::pb::DocumentData_DocState* temp = state_;
  state_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_state(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocState** state) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*state) == NULL) {
      message_arena->Own(*state);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*state)) {
      ::cosmo::pb::DocumentData_DocState* new_state = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_DocState >(
            message_arena);
      new_state->CopyFrom(**state);
      *state = new_state;
    }
}
void DocumentData::unsafe_arena_set_allocated_state(
    ::cosmo::pb::DocumentData_DocState* state) {
  if (GetArenaNoVirtual() == NULL) {
    delete state_;
  }
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.state)
}
void DocumentData::_slow_mutable_risks_fields() {
  risks_fields_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_RisksFields >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData_RisksFields* DocumentData::_slow_release_risks_fields() {
  if (risks_fields_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData_RisksFields* temp = new ::cosmo::pb::DocumentData_RisksFields(*risks_fields_);
    risks_fields_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData_RisksFields* DocumentData::unsafe_arena_release_risks_fields() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.risks_fields)
  clear_has_risks_fields();
  ::cosmo::pb::DocumentData_RisksFields* temp = risks_fields_;
  risks_fields_ = NULL;
  return temp;
}
void DocumentData::_slow_set_allocated_risks_fields(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_RisksFields** risks_fields) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*risks_fields) == NULL) {
      message_arena->Own(*risks_fields);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*risks_fields)) {
      ::cosmo::pb::DocumentData_RisksFields* new_risks_fields = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData_RisksFields >(
            message_arena);
      new_risks_fields->CopyFrom(**risks_fields);
      *risks_fields = new_risks_fields;
    }
}
void DocumentData::unsafe_arena_set_allocated_risks_fields(
    ::cosmo::pb::DocumentData_RisksFields* risks_fields) {
  if (GetArenaNoVirtual() == NULL) {
    delete risks_fields_;
  }
  risks_fields_ = risks_fields;
  if (risks_fields) {
    set_has_risks_fields();
  } else {
    clear_has_risks_fields();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.risks_fields)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentData::kSourceIdFieldNumber;
const int DocumentData::kDocIdFieldNumber;
const int DocumentData::kOkInfoFieldNumber;
const int DocumentData::kNewsDataFieldNumber;
const int DocumentData::kCensorFieldNumber;
const int DocumentData::kUserStatsFieldNumber;
const int DocumentData::kTrendsFieldNumber;
const int DocumentData::kOriginalInfoFieldNumber;
const int DocumentData::kFetcherFieldNumber;
const int DocumentData::kMediametricsFeaFieldNumber;
const int DocumentData::kTopicPeriodStatsFieldNumber;
const int DocumentData::kAppFilterStatsFieldNumber;
const int DocumentData::kWeekMediametricsFeaFieldNumber;
const int DocumentData::kOkTopicEventStatFieldNumber;
const int DocumentData::kVkTopicEventStatDayFieldNumber;
const int DocumentData::kVkTopicEventStatWeekFieldNumber;
const int DocumentData::kYoutubeTopicEventStatDayFieldNumber;
const int DocumentData::kYoutubeTopicEventStatWeekFieldNumber;
const int DocumentData::kTapedLocationStatFieldNumber;
const int DocumentData::kHomerLocationStatFieldNumber;
const int DocumentData::kHourlyLocationStatFieldNumber;
const int DocumentData::kDailyLocationStatFieldNumber;
const int DocumentData::kWeeklyLocationStatFieldNumber;
const int DocumentData::kMonthlyLocationStatFieldNumber;
const int DocumentData::kFetcherGeoFieldNumber;
const int DocumentData::kHourlyFastMediametricsFeaFieldNumber;
const int DocumentData::kDailyFastMediametricsFeaFieldNumber;
const int DocumentData::kFetcherImageFieldNumber;
const int DocumentData::kContentDataFieldNumber;
const int DocumentData::kVkTopicEventStatDayV2FieldNumber;
const int DocumentData::kVkTopicEventStatWeekV2FieldNumber;
const int DocumentData::kYoutubeTopicEventStatDayV2FieldNumber;
const int DocumentData::kYoutubeTopicEventStatWeekV2FieldNumber;
const int DocumentData::kDocumentI2IStatFieldNumber;
const int DocumentData::kDocumentMvStatFieldNumber;
const int DocumentData::kNewsTagsDataFieldNumber;
const int DocumentData::kNewsStoryDataFieldNumber;
const int DocumentData::kNativeTargetIsActiveFieldNumber;
const int DocumentData::kFastLocationStatFieldNumber;
const int DocumentData::kContentPornFeaFieldNumber;
const int DocumentData::kContentThemesFieldNumber;
const int DocumentData::kStoryClusterIdFieldNumber;
const int DocumentData::kDocumentKeywordsInfoFieldNumber;
const int DocumentData::kImagePornFeaFieldNumber;
const int DocumentData::kFetcherFirstmeetFieldNumber;
const int DocumentData::kPubdateFieldNumber;
const int DocumentData::kFreshnessDataFieldNumber;
const int DocumentData::kStateFieldNumber;
const int DocumentData::kRisksFieldsFieldNumber;
const int DocumentData::kDocRegionIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentData::DocumentData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentData)
}
DocumentData::DocumentData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  doc_region_ids_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentData)
}
DocumentData::DocumentData(const DocumentData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      doc_region_ids_(from.doc_region_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ok_info()) {
    ok_info_ = new ::cosmo::pb::DocumentData_OkInfo(*from.ok_info_);
  } else {
    ok_info_ = NULL;
  }
  if (from.has_news_data()) {
    news_data_ = new ::cosmo::pb::DocumentData_NewsData(*from.news_data_);
  } else {
    news_data_ = NULL;
  }
  if (from.has_censor()) {
    censor_ = new ::cosmo::pb::DocumentData_Censor(*from.censor_);
  } else {
    censor_ = NULL;
  }
  if (from.has_user_stats()) {
    user_stats_ = new ::cosmo::pb::DocumentData_UserStats(*from.user_stats_);
  } else {
    user_stats_ = NULL;
  }
  if (from.has_trends()) {
    trends_ = new ::cosmo::pb::DocumentData_Trends(*from.trends_);
  } else {
    trends_ = NULL;
  }
  if (from.has_original_info()) {
    original_info_ = new ::cosmo::pb::DocumentData_OriginalInfo(*from.original_info_);
  } else {
    original_info_ = NULL;
  }
  if (from.has_fetcher()) {
    fetcher_ = new ::cosmo::pb::DocumentData_Fetcher(*from.fetcher_);
  } else {
    fetcher_ = NULL;
  }
  if (from.has_mediametrics_fea()) {
    mediametrics_fea_ = new ::cosmo::pb::DocumentData_MediametricsFea(*from.mediametrics_fea_);
  } else {
    mediametrics_fea_ = NULL;
  }
  if (from.has_topic_period_stats()) {
    topic_period_stats_ = new ::cosmo::pb::DocumentData_TopicPeriodStats(*from.topic_period_stats_);
  } else {
    topic_period_stats_ = NULL;
  }
  if (from.has_app_filter_stats()) {
    app_filter_stats_ = new ::cosmo::pb::DocumentData_AppFilterStats(*from.app_filter_stats_);
  } else {
    app_filter_stats_ = NULL;
  }
  if (from.has_week_mediametrics_fea()) {
    week_mediametrics_fea_ = new ::cosmo::pb::DocumentData_MediametricsFea(*from.week_mediametrics_fea_);
  } else {
    week_mediametrics_fea_ = NULL;
  }
  if (from.has_ok_topic_event_stat()) {
    ok_topic_event_stat_ = new ::cosmo::pb::DocumentData_TopicEventStat(*from.ok_topic_event_stat_);
  } else {
    ok_topic_event_stat_ = NULL;
  }
  if (from.has_vk_topic_event_stat_day()) {
    vk_topic_event_stat_day_ = new ::cosmo::pb::DocumentData_TopicEventStat(*from.vk_topic_event_stat_day_);
  } else {
    vk_topic_event_stat_day_ = NULL;
  }
  if (from.has_vk_topic_event_stat_week()) {
    vk_topic_event_stat_week_ = new ::cosmo::pb::DocumentData_TopicEventStat(*from.vk_topic_event_stat_week_);
  } else {
    vk_topic_event_stat_week_ = NULL;
  }
  if (from.has_youtube_topic_event_stat_day()) {
    youtube_topic_event_stat_day_ = new ::cosmo::pb::DocumentData_TopicEventStat(*from.youtube_topic_event_stat_day_);
  } else {
    youtube_topic_event_stat_day_ = NULL;
  }
  if (from.has_youtube_topic_event_stat_week()) {
    youtube_topic_event_stat_week_ = new ::cosmo::pb::DocumentData_TopicEventStat(*from.youtube_topic_event_stat_week_);
  } else {
    youtube_topic_event_stat_week_ = NULL;
  }
  if (from.has_taped_location_stat()) {
    taped_location_stat_ = new ::cosmo::pb::DocumentData_DocumentLocationStat(*from.taped_location_stat_);
  } else {
    taped_location_stat_ = NULL;
  }
  if (from.has_homer_location_stat()) {
    homer_location_stat_ = new ::cosmo::pb::DocumentData_DocumentLocationStat(*from.homer_location_stat_);
  } else {
    homer_location_stat_ = NULL;
  }
  if (from.has_hourly_location_stat()) {
    hourly_location_stat_ = new ::cosmo::pb::DocumentData_DocumentLocationStat(*from.hourly_location_stat_);
  } else {
    hourly_location_stat_ = NULL;
  }
  if (from.has_daily_location_stat()) {
    daily_location_stat_ = new ::cosmo::pb::DocumentData_DocumentLocationStat(*from.daily_location_stat_);
  } else {
    daily_location_stat_ = NULL;
  }
  if (from.has_weekly_location_stat()) {
    weekly_location_stat_ = new ::cosmo::pb::DocumentData_DocumentLocationStat(*from.weekly_location_stat_);
  } else {
    weekly_location_stat_ = NULL;
  }
  if (from.has_monthly_location_stat()) {
    monthly_location_stat_ = new ::cosmo::pb::DocumentData_DocumentLocationStat(*from.monthly_location_stat_);
  } else {
    monthly_location_stat_ = NULL;
  }
  if (from.has_fetcher_geo()) {
    fetcher_geo_ = new ::cosmo::pb::DocumentData_FetcherGeo(*from.fetcher_geo_);
  } else {
    fetcher_geo_ = NULL;
  }
  if (from.has_hourly_fast_mediametrics_fea()) {
    hourly_fast_mediametrics_fea_ = new ::cosmo::pb::DocumentData_MediametricsFea(*from.hourly_fast_mediametrics_fea_);
  } else {
    hourly_fast_mediametrics_fea_ = NULL;
  }
  if (from.has_daily_fast_mediametrics_fea()) {
    daily_fast_mediametrics_fea_ = new ::cosmo::pb::DocumentData_MediametricsFea(*from.daily_fast_mediametrics_fea_);
  } else {
    daily_fast_mediametrics_fea_ = NULL;
  }
  if (from.has_fetcher_image()) {
    fetcher_image_ = new ::cosmo::pb::DocumentData_FetcherImage(*from.fetcher_image_);
  } else {
    fetcher_image_ = NULL;
  }
  if (from.has_content_data()) {
    content_data_ = new ::cosmo::pb::DocumentData_ContentData(*from.content_data_);
  } else {
    content_data_ = NULL;
  }
  if (from.has_vk_topic_event_stat_day_v2()) {
    vk_topic_event_stat_day_v2_ = new ::cosmo::pb::DocumentData_TopicEventStat(*from.vk_topic_event_stat_day_v2_);
  } else {
    vk_topic_event_stat_day_v2_ = NULL;
  }
  if (from.has_vk_topic_event_stat_week_v2()) {
    vk_topic_event_stat_week_v2_ = new ::cosmo::pb::DocumentData_TopicEventStat(*from.vk_topic_event_stat_week_v2_);
  } else {
    vk_topic_event_stat_week_v2_ = NULL;
  }
  if (from.has_youtube_topic_event_stat_day_v2()) {
    youtube_topic_event_stat_day_v2_ = new ::cosmo::pb::DocumentData_TopicEventStat(*from.youtube_topic_event_stat_day_v2_);
  } else {
    youtube_topic_event_stat_day_v2_ = NULL;
  }
  if (from.has_youtube_topic_event_stat_week_v2()) {
    youtube_topic_event_stat_week_v2_ = new ::cosmo::pb::DocumentData_TopicEventStat(*from.youtube_topic_event_stat_week_v2_);
  } else {
    youtube_topic_event_stat_week_v2_ = NULL;
  }
  if (from.has_document_i2i_stat()) {
    document_i2i_stat_ = new ::cosmo::pb::DocumentData_DocumentMutualStat(*from.document_i2i_stat_);
  } else {
    document_i2i_stat_ = NULL;
  }
  if (from.has_document_mv_stat()) {
    document_mv_stat_ = new ::cosmo::pb::DocumentData_DocumentMutualStat(*from.document_mv_stat_);
  } else {
    document_mv_stat_ = NULL;
  }
  if (from.has_news_tags_data()) {
    news_tags_data_ = new ::cosmo::pb::DocumentData_NewsTagsData(*from.news_tags_data_);
  } else {
    news_tags_data_ = NULL;
  }
  if (from.has_news_story_data()) {
    news_story_data_ = new ::cosmo::pb::DocumentData_NewsStoryData(*from.news_story_data_);
  } else {
    news_story_data_ = NULL;
  }
  if (from.has_native_target_is_active()) {
    native_target_is_active_ = new ::cosmo::pb::DocumentData_NativeTargetIsActive(*from.native_target_is_active_);
  } else {
    native_target_is_active_ = NULL;
  }
  if (from.has_fast_location_stat()) {
    fast_location_stat_ = new ::cosmo::pb::DocumentData_DocumentLocationStat(*from.fast_location_stat_);
  } else {
    fast_location_stat_ = NULL;
  }
  if (from.has_content_porn_fea()) {
    content_porn_fea_ = new ::cosmo::pb::DocumentData_ContentPornFea(*from.content_porn_fea_);
  } else {
    content_porn_fea_ = NULL;
  }
  if (from.has_content_themes()) {
    content_themes_ = new ::cosmo::pb::DocumentData_ContentThemes(*from.content_themes_);
  } else {
    content_themes_ = NULL;
  }
  if (from.has_story_cluster_id()) {
    story_cluster_id_ = new ::cosmo::pb::DocumentData_StoryClusterId(*from.story_cluster_id_);
  } else {
    story_cluster_id_ = NULL;
  }
  if (from.has_document_keywords_info()) {
    document_keywords_info_ = new ::cosmo::pb::DocumentData_DocumentKeywordsInfo(*from.document_keywords_info_);
  } else {
    document_keywords_info_ = NULL;
  }
  if (from.has_image_porn_fea()) {
    image_porn_fea_ = new ::cosmo::pb::DocumentData_ImagePornFea(*from.image_porn_fea_);
  } else {
    image_porn_fea_ = NULL;
  }
  if (from.has_fetcherfirstmeet()) {
    fetcherfirstmeet_ = new ::cosmo::pb::DocumentData_FetcherFirstmeet(*from.fetcherfirstmeet_);
  } else {
    fetcherfirstmeet_ = NULL;
  }
  if (from.has_pubdate()) {
    pubdate_ = new ::cosmo::pb::DocumentData_FetcherPubdate(*from.pubdate_);
  } else {
    pubdate_ = NULL;
  }
  if (from.has_freshness_data()) {
    freshness_data_ = new ::cosmo::pb::DocumentData_FreshnessData(*from.freshness_data_);
  } else {
    freshness_data_ = NULL;
  }
  if (from.has_state()) {
    state_ = new ::cosmo::pb::DocumentData_DocState(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_risks_fields()) {
    risks_fields_ = new ::cosmo::pb::DocumentData_RisksFields(*from.risks_fields_);
  } else {
    risks_fields_ = NULL;
  }
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&doc_id_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(doc_id_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentData)
}

void DocumentData::SharedCtor() {
  ::memset(&ok_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doc_id_) -
      reinterpret_cast<char*>(&ok_info_)) + sizeof(doc_id_));
  _cached_size_ = 0;
}

DocumentData::~DocumentData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentData)
  SharedDtor();
}

void DocumentData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete ok_info_;
  if (this != internal_default_instance()) delete news_data_;
  if (this != internal_default_instance()) delete censor_;
  if (this != internal_default_instance()) delete user_stats_;
  if (this != internal_default_instance()) delete trends_;
  if (this != internal_default_instance()) delete original_info_;
  if (this != internal_default_instance()) delete fetcher_;
  if (this != internal_default_instance()) delete mediametrics_fea_;
  if (this != internal_default_instance()) delete topic_period_stats_;
  if (this != internal_default_instance()) delete app_filter_stats_;
  if (this != internal_default_instance()) delete week_mediametrics_fea_;
  if (this != internal_default_instance()) delete ok_topic_event_stat_;
  if (this != internal_default_instance()) delete vk_topic_event_stat_day_;
  if (this != internal_default_instance()) delete vk_topic_event_stat_week_;
  if (this != internal_default_instance()) delete youtube_topic_event_stat_day_;
  if (this != internal_default_instance()) delete youtube_topic_event_stat_week_;
  if (this != internal_default_instance()) delete taped_location_stat_;
  if (this != internal_default_instance()) delete homer_location_stat_;
  if (this != internal_default_instance()) delete hourly_location_stat_;
  if (this != internal_default_instance()) delete daily_location_stat_;
  if (this != internal_default_instance()) delete weekly_location_stat_;
  if (this != internal_default_instance()) delete monthly_location_stat_;
  if (this != internal_default_instance()) delete fetcher_geo_;
  if (this != internal_default_instance()) delete hourly_fast_mediametrics_fea_;
  if (this != internal_default_instance()) delete daily_fast_mediametrics_fea_;
  if (this != internal_default_instance()) delete fetcher_image_;
  if (this != internal_default_instance()) delete content_data_;
  if (this != internal_default_instance()) delete vk_topic_event_stat_day_v2_;
  if (this != internal_default_instance()) delete vk_topic_event_stat_week_v2_;
  if (this != internal_default_instance()) delete youtube_topic_event_stat_day_v2_;
  if (this != internal_default_instance()) delete youtube_topic_event_stat_week_v2_;
  if (this != internal_default_instance()) delete document_i2i_stat_;
  if (this != internal_default_instance()) delete document_mv_stat_;
  if (this != internal_default_instance()) delete news_tags_data_;
  if (this != internal_default_instance()) delete news_story_data_;
  if (this != internal_default_instance()) delete native_target_is_active_;
  if (this != internal_default_instance()) delete fast_location_stat_;
  if (this != internal_default_instance()) delete content_porn_fea_;
  if (this != internal_default_instance()) delete content_themes_;
  if (this != internal_default_instance()) delete story_cluster_id_;
  if (this != internal_default_instance()) delete document_keywords_info_;
  if (this != internal_default_instance()) delete image_porn_fea_;
  if (this != internal_default_instance()) delete fetcherfirstmeet_;
  if (this != internal_default_instance()) delete pubdate_;
  if (this != internal_default_instance()) delete freshness_data_;
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete risks_fields_;
}

void DocumentData::ArenaDtor(void* object) {
  DocumentData* _this = reinterpret_cast< DocumentData* >(object);
  (void)_this;
}
void DocumentData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentData::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentData& DocumentData::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentData* DocumentData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentData>(arena);
}

void DocumentData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_region_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ok_info_ != NULL);
      ok_info_->::cosmo::pb::DocumentData_OkInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(news_data_ != NULL);
      news_data_->::cosmo::pb::DocumentData_NewsData::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(censor_ != NULL);
      censor_->::cosmo::pb::DocumentData_Censor::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(user_stats_ != NULL);
      user_stats_->::cosmo::pb::DocumentData_UserStats::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(trends_ != NULL);
      trends_->::cosmo::pb::DocumentData_Trends::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(original_info_ != NULL);
      original_info_->::cosmo::pb::DocumentData_OriginalInfo::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(fetcher_ != NULL);
      fetcher_->::cosmo::pb::DocumentData_Fetcher::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(mediametrics_fea_ != NULL);
      mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(topic_period_stats_ != NULL);
      topic_period_stats_->::cosmo::pb::DocumentData_TopicPeriodStats::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(app_filter_stats_ != NULL);
      app_filter_stats_->::cosmo::pb::DocumentData_AppFilterStats::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(week_mediametrics_fea_ != NULL);
      week_mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(ok_topic_event_stat_ != NULL);
      ok_topic_event_stat_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(vk_topic_event_stat_day_ != NULL);
      vk_topic_event_stat_day_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(vk_topic_event_stat_week_ != NULL);
      vk_topic_event_stat_week_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(youtube_topic_event_stat_day_ != NULL);
      youtube_topic_event_stat_day_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(youtube_topic_event_stat_week_ != NULL);
      youtube_topic_event_stat_week_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(taped_location_stat_ != NULL);
      taped_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(homer_location_stat_ != NULL);
      homer_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(hourly_location_stat_ != NULL);
      hourly_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(daily_location_stat_ != NULL);
      daily_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(weekly_location_stat_ != NULL);
      weekly_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(monthly_location_stat_ != NULL);
      monthly_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(fetcher_geo_ != NULL);
      fetcher_geo_->::cosmo::pb::DocumentData_FetcherGeo::Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(hourly_fast_mediametrics_fea_ != NULL);
      hourly_fast_mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(daily_fast_mediametrics_fea_ != NULL);
      daily_fast_mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(fetcher_image_ != NULL);
      fetcher_image_->::cosmo::pb::DocumentData_FetcherImage::Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(content_data_ != NULL);
      content_data_->::cosmo::pb::DocumentData_ContentData::Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(vk_topic_event_stat_day_v2_ != NULL);
      vk_topic_event_stat_day_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(vk_topic_event_stat_week_v2_ != NULL);
      vk_topic_event_stat_week_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(youtube_topic_event_stat_day_v2_ != NULL);
      youtube_topic_event_stat_day_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(youtube_topic_event_stat_week_v2_ != NULL);
      youtube_topic_event_stat_week_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(document_i2i_stat_ != NULL);
      document_i2i_stat_->::cosmo::pb::DocumentData_DocumentMutualStat::Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(document_mv_stat_ != NULL);
      document_mv_stat_->::cosmo::pb::DocumentData_DocumentMutualStat::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(news_tags_data_ != NULL);
      news_tags_data_->::cosmo::pb::DocumentData_NewsTagsData::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(news_story_data_ != NULL);
      news_story_data_->::cosmo::pb::DocumentData_NewsStoryData::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(native_target_is_active_ != NULL);
      native_target_is_active_->::cosmo::pb::DocumentData_NativeTargetIsActive::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(fast_location_stat_ != NULL);
      fast_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(content_porn_fea_ != NULL);
      content_porn_fea_->::cosmo::pb::DocumentData_ContentPornFea::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(content_themes_ != NULL);
      content_themes_->::cosmo::pb::DocumentData_ContentThemes::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(story_cluster_id_ != NULL);
      story_cluster_id_->::cosmo::pb::DocumentData_StoryClusterId::Clear();
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(document_keywords_info_ != NULL);
      document_keywords_info_->::cosmo::pb::DocumentData_DocumentKeywordsInfo::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(image_porn_fea_ != NULL);
      image_porn_fea_->::cosmo::pb::DocumentData_ImagePornFea::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(fetcherfirstmeet_ != NULL);
      fetcherfirstmeet_->::cosmo::pb::DocumentData_FetcherFirstmeet::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(pubdate_ != NULL);
      pubdate_->::cosmo::pb::DocumentData_FetcherPubdate::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(freshness_data_ != NULL);
      freshness_data_->::cosmo::pb::DocumentData_FreshnessData::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(state_ != NULL);
      state_->::cosmo::pb::DocumentData_DocState::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(risks_fields_ != NULL);
      risks_fields_->::cosmo::pb::DocumentData_RisksFields::Clear();
    }
  }
  source_id_ = GOOGLE_LONGLONG(0);
  doc_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 doc_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.OkInfo ok_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ok_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.NewsData news_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.Censor censor = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_censor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.UserStats user_stats = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.Trends trends = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.OriginalInfo original_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.Fetcher fetcher = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.MediametricsFea mediametrics_fea = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mediametrics_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.TopicPeriodStats topic_period_stats = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_period_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.AppFilterStats app_filter_stats = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_filter_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.MediametricsFea week_mediametrics_fea = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_week_mediametrics_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.TopicEventStat ok_topic_event_stat = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ok_topic_event_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_topic_event_stat_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_topic_event_stat_week()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youtube_topic_event_stat_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youtube_topic_event_stat_week()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentLocationStat taped_location_stat = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taped_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentLocationStat homer_location_stat = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_homer_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentLocationStat hourly_location_stat = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hourly_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentLocationStat daily_location_stat = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentLocationStat weekly_location_stat = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weekly_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentLocationStat monthly_location_stat = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monthly_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.FetcherGeo fetcher_geo = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetcher_geo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.MediametricsFea hourly_fast_mediametrics_fea = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hourly_fast_mediametrics_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.MediametricsFea daily_fast_mediametrics_fea = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_fast_mediametrics_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.FetcherImage fetcher_image = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetcher_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.ContentData content_data = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day_v2 = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_topic_event_stat_day_v2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week_v2 = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vk_topic_event_stat_week_v2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day_v2 = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 306 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youtube_topic_event_stat_day_v2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week_v2 = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youtube_topic_event_stat_week_v2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentMutualStat document_i2i_stat = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_i2i_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentMutualStat document_mv_stat = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_mv_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.NewsTagsData news_tags_data = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_tags_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.NewsStoryData news_story_data = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_story_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.NativeTargetIsActive native_target_is_active = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_native_target_is_active()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentLocationStat fast_location_stat = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fast_location_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.ContentPornFea content_porn_fea = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 386 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content_porn_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.ContentThemes content_themes = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content_themes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.StoryClusterId story_cluster_id = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_story_cluster_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocumentKeywordsInfo document_keywords_info = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_keywords_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.ImagePornFea image_porn_fea = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_porn_fea()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.FetcherFirstmeet fetcherFirstmeet = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 426 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetcherfirstmeet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.FetcherPubdate pubdate = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 434 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pubdate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.FreshnessData freshness_data = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 442 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freshness_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.DocState state = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData.RisksFields risks_fields = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 458 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_risks_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 doc_region_ids = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 464u, input, this->mutable_doc_region_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 466 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_doc_region_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentData)
  return false;
#undef DO_
}

void DocumentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional int64 source_id = 1;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // required int64 doc_id = 2;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->doc_id(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.DocumentData.OkInfo ok_info = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ok_info_, output);
  }

  // optional .cosmo.pb.DocumentData.NewsData news_data = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->news_data_, output);
  }

  // optional .cosmo.pb.DocumentData.Censor censor = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->censor_, output);
  }

  // optional .cosmo.pb.DocumentData.UserStats user_stats = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->user_stats_, output);
  }

  // optional .cosmo.pb.DocumentData.Trends trends = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->trends_, output);
  }

  // optional .cosmo.pb.DocumentData.OriginalInfo original_info = 13;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->original_info_, output);
  }

  // optional .cosmo.pb.DocumentData.Fetcher fetcher = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->fetcher_, output);
  }

  // optional .cosmo.pb.DocumentData.MediametricsFea mediametrics_fea = 15;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->mediametrics_fea_, output);
  }

  // optional .cosmo.pb.DocumentData.TopicPeriodStats topic_period_stats = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->topic_period_stats_, output);
  }

  // optional .cosmo.pb.DocumentData.AppFilterStats app_filter_stats = 17;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->app_filter_stats_, output);
  }

  // optional .cosmo.pb.DocumentData.MediametricsFea week_mediametrics_fea = 18;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->week_mediametrics_fea_, output);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat ok_topic_event_stat = 20;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->ok_topic_event_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day = 21;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->vk_topic_event_stat_day_, output);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week = 22;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->vk_topic_event_stat_week_, output);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day = 23;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->youtube_topic_event_stat_day_, output);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week = 24;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->youtube_topic_event_stat_week_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat taped_location_stat = 25;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->taped_location_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat homer_location_stat = 26;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->homer_location_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat hourly_location_stat = 27;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->hourly_location_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat daily_location_stat = 28;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->daily_location_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat weekly_location_stat = 29;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->weekly_location_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat monthly_location_stat = 30;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->monthly_location_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.FetcherGeo fetcher_geo = 31;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->fetcher_geo_, output);
  }

  // optional .cosmo.pb.DocumentData.MediametricsFea hourly_fast_mediametrics_fea = 32;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->hourly_fast_mediametrics_fea_, output);
  }

  // optional .cosmo.pb.DocumentData.MediametricsFea daily_fast_mediametrics_fea = 33;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->daily_fast_mediametrics_fea_, output);
  }

  // optional .cosmo.pb.DocumentData.FetcherImage fetcher_image = 34;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->fetcher_image_, output);
  }

  // optional .cosmo.pb.DocumentData.ContentData content_data = 35;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->content_data_, output);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day_v2 = 36;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->vk_topic_event_stat_day_v2_, output);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week_v2 = 37;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->vk_topic_event_stat_week_v2_, output);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day_v2 = 38;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->youtube_topic_event_stat_day_v2_, output);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week_v2 = 39;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->youtube_topic_event_stat_week_v2_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentMutualStat document_i2i_stat = 40;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->document_i2i_stat_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .cosmo.pb.DocumentData.DocumentMutualStat document_mv_stat = 42;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->document_mv_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.NewsTagsData news_tags_data = 43;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->news_tags_data_, output);
  }

  // optional .cosmo.pb.DocumentData.NewsStoryData news_story_data = 44;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, *this->news_story_data_, output);
  }

  // optional .cosmo.pb.DocumentData.NativeTargetIsActive native_target_is_active = 45;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *this->native_target_is_active_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat fast_location_stat = 46;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *this->fast_location_stat_, output);
  }

  // optional .cosmo.pb.DocumentData.ContentPornFea content_porn_fea = 48;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *this->content_porn_fea_, output);
  }

  // optional .cosmo.pb.DocumentData.ContentThemes content_themes = 49;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, *this->content_themes_, output);
  }

  // optional .cosmo.pb.DocumentData.StoryClusterId story_cluster_id = 50;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->story_cluster_id_, output);
  }

  // optional .cosmo.pb.DocumentData.DocumentKeywordsInfo document_keywords_info = 51;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->document_keywords_info_, output);
  }

  // optional .cosmo.pb.DocumentData.ImagePornFea image_porn_fea = 52;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *this->image_porn_fea_, output);
  }

  // optional .cosmo.pb.DocumentData.FetcherFirstmeet fetcherFirstmeet = 53;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, *this->fetcherfirstmeet_, output);
  }

  // optional .cosmo.pb.DocumentData.FetcherPubdate pubdate = 54;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, *this->pubdate_, output);
  }

  // optional .cosmo.pb.DocumentData.FreshnessData freshness_data = 55;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, *this->freshness_data_, output);
  }

  // optional .cosmo.pb.DocumentData.DocState state = 56;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, *this->state_, output);
  }

  // optional .cosmo.pb.DocumentData.RisksFields risks_fields = 57;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, *this->risks_fields_, output);
  }

  // repeated int32 doc_region_ids = 58;
  for (int i = 0, n = this->doc_region_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      58, this->doc_region_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentData)
}

::google::protobuf::uint8* DocumentData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional int64 source_id = 1;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // required int64 doc_id = 2;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->doc_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.DocumentData.OkInfo ok_info = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ok_info_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.NewsData news_data = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->news_data_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.Censor censor = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->censor_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.UserStats user_stats = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->user_stats_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.Trends trends = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->trends_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.OriginalInfo original_info = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->original_info_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.Fetcher fetcher = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->fetcher_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.MediametricsFea mediametrics_fea = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->mediametrics_fea_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.TopicPeriodStats topic_period_stats = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->topic_period_stats_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.AppFilterStats app_filter_stats = 17;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->app_filter_stats_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.MediametricsFea week_mediametrics_fea = 18;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->week_mediametrics_fea_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat ok_topic_event_stat = 20;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->ok_topic_event_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day = 21;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->vk_topic_event_stat_day_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week = 22;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->vk_topic_event_stat_week_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day = 23;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->youtube_topic_event_stat_day_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week = 24;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->youtube_topic_event_stat_week_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat taped_location_stat = 25;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->taped_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat homer_location_stat = 26;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->homer_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat hourly_location_stat = 27;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->hourly_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat daily_location_stat = 28;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->daily_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat weekly_location_stat = 29;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->weekly_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat monthly_location_stat = 30;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->monthly_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.FetcherGeo fetcher_geo = 31;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->fetcher_geo_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.MediametricsFea hourly_fast_mediametrics_fea = 32;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->hourly_fast_mediametrics_fea_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.MediametricsFea daily_fast_mediametrics_fea = 33;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->daily_fast_mediametrics_fea_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.FetcherImage fetcher_image = 34;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->fetcher_image_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.ContentData content_data = 35;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->content_data_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day_v2 = 36;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->vk_topic_event_stat_day_v2_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week_v2 = 37;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->vk_topic_event_stat_week_v2_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day_v2 = 38;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->youtube_topic_event_stat_day_v2_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week_v2 = 39;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *this->youtube_topic_event_stat_week_v2_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentMutualStat document_i2i_stat = 40;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->document_i2i_stat_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .cosmo.pb.DocumentData.DocumentMutualStat document_mv_stat = 42;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->document_mv_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.NewsTagsData news_tags_data = 43;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, *this->news_tags_data_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.NewsStoryData news_story_data = 44;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        44, *this->news_story_data_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.NativeTargetIsActive native_target_is_active = 45;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, *this->native_target_is_active_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentLocationStat fast_location_stat = 46;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, *this->fast_location_stat_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.ContentPornFea content_porn_fea = 48;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, *this->content_porn_fea_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.ContentThemes content_themes = 49;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        49, *this->content_themes_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.StoryClusterId story_cluster_id = 50;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->story_cluster_id_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocumentKeywordsInfo document_keywords_info = 51;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *this->document_keywords_info_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.ImagePornFea image_porn_fea = 52;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        52, *this->image_porn_fea_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.FetcherFirstmeet fetcherFirstmeet = 53;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        53, *this->fetcherfirstmeet_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.FetcherPubdate pubdate = 54;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        54, *this->pubdate_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.FreshnessData freshness_data = 55;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        55, *this->freshness_data_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.DocState state = 56;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        56, *this->state_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData.RisksFields risks_fields = 57;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        57, *this->risks_fields_, deterministic, target);
  }

  // repeated int32 doc_region_ids = 58;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(58, this->doc_region_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentData)
  return target;
}

size_t DocumentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 doc_id = 2;
  if (has_doc_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }
  // repeated int32 doc_region_ids = 58;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->doc_region_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->doc_region_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .cosmo.pb.DocumentData.OkInfo ok_info = 7;
    if (has_ok_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ok_info_);
    }

    // optional .cosmo.pb.DocumentData.NewsData news_data = 8;
    if (has_news_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->news_data_);
    }

    // optional .cosmo.pb.DocumentData.Censor censor = 10;
    if (has_censor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->censor_);
    }

    // optional .cosmo.pb.DocumentData.UserStats user_stats = 11;
    if (has_user_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_stats_);
    }

    // optional .cosmo.pb.DocumentData.Trends trends = 12;
    if (has_trends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trends_);
    }

    // optional .cosmo.pb.DocumentData.OriginalInfo original_info = 13;
    if (has_original_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->original_info_);
    }

    // optional .cosmo.pb.DocumentData.Fetcher fetcher = 14;
    if (has_fetcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fetcher_);
    }

    // optional .cosmo.pb.DocumentData.MediametricsFea mediametrics_fea = 15;
    if (has_mediametrics_fea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mediametrics_fea_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .cosmo.pb.DocumentData.TopicPeriodStats topic_period_stats = 16;
    if (has_topic_period_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->topic_period_stats_);
    }

    // optional .cosmo.pb.DocumentData.AppFilterStats app_filter_stats = 17;
    if (has_app_filter_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->app_filter_stats_);
    }

    // optional .cosmo.pb.DocumentData.MediametricsFea week_mediametrics_fea = 18;
    if (has_week_mediametrics_fea()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->week_mediametrics_fea_);
    }

    // optional .cosmo.pb.DocumentData.TopicEventStat ok_topic_event_stat = 20;
    if (has_ok_topic_event_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ok_topic_event_stat_);
    }

    // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day = 21;
    if (has_vk_topic_event_stat_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_topic_event_stat_day_);
    }

    // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week = 22;
    if (has_vk_topic_event_stat_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_topic_event_stat_week_);
    }

    // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day = 23;
    if (has_youtube_topic_event_stat_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youtube_topic_event_stat_day_);
    }

    // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week = 24;
    if (has_youtube_topic_event_stat_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youtube_topic_event_stat_week_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .cosmo.pb.DocumentData.DocumentLocationStat taped_location_stat = 25;
    if (has_taped_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->taped_location_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentLocationStat homer_location_stat = 26;
    if (has_homer_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->homer_location_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentLocationStat hourly_location_stat = 27;
    if (has_hourly_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hourly_location_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentLocationStat daily_location_stat = 28;
    if (has_daily_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->daily_location_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentLocationStat weekly_location_stat = 29;
    if (has_weekly_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weekly_location_stat_);
    }

    // optional .cosmo.pb.DocumentData.DocumentLocationStat monthly_location_stat = 30;
    if (has_monthly_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->monthly_location_stat_);
    }

    // optional .cosmo.pb.DocumentData.FetcherGeo fetcher_geo = 31;
    if (has_fetcher_geo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fetcher_geo_);
    }

    // optional .cosmo.pb.DocumentData.MediametricsFea hourly_fast_mediametrics_fea = 32;
    if (has_hourly_fast_mediametrics_fea()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hourly_fast_mediametrics_fea_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .cosmo.pb.DocumentData.MediametricsFea daily_fast_mediametrics_fea = 33;
    if (has_daily_fast_mediametrics_fea()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->daily_fast_mediametrics_fea_);
    }

    // optional .cosmo.pb.DocumentData.FetcherImage fetcher_image = 34;
    if (has_fetcher_image()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fetcher_image_);
    }

    // optional .cosmo.pb.DocumentData.ContentData content_data = 35;
    if (has_content_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->content_data_);
    }

    // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day_v2 = 36;
    if (has_vk_topic_event_stat_day_v2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_topic_event_stat_day_v2_);
    }

    // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week_v2 = 37;
    if (has_vk_topic_event_stat_week_v2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vk_topic_event_stat_week_v2_);
    }

    // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day_v2 = 38;
    if (has_youtube_topic_event_stat_day_v2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youtube_topic_event_stat_day_v2_);
    }

    // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week_v2 = 39;
    if (has_youtube_topic_event_stat_week_v2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->youtube_topic_event_stat_week_v2_);
    }

    // optional .cosmo.pb.DocumentData.DocumentMutualStat document_i2i_stat = 40;
    if (has_document_i2i_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_i2i_stat_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .cosmo.pb.DocumentData.DocumentMutualStat document_mv_stat = 42;
    if (has_document_mv_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_mv_stat_);
    }

    // optional .cosmo.pb.DocumentData.NewsTagsData news_tags_data = 43;
    if (has_news_tags_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->news_tags_data_);
    }

    // optional .cosmo.pb.DocumentData.NewsStoryData news_story_data = 44;
    if (has_news_story_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->news_story_data_);
    }

    // optional .cosmo.pb.DocumentData.NativeTargetIsActive native_target_is_active = 45;
    if (has_native_target_is_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->native_target_is_active_);
    }

    // optional .cosmo.pb.DocumentData.DocumentLocationStat fast_location_stat = 46;
    if (has_fast_location_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fast_location_stat_);
    }

    // optional .cosmo.pb.DocumentData.ContentPornFea content_porn_fea = 48;
    if (has_content_porn_fea()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->content_porn_fea_);
    }

    // optional .cosmo.pb.DocumentData.ContentThemes content_themes = 49;
    if (has_content_themes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->content_themes_);
    }

    // optional .cosmo.pb.DocumentData.StoryClusterId story_cluster_id = 50;
    if (has_story_cluster_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->story_cluster_id_);
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .cosmo.pb.DocumentData.DocumentKeywordsInfo document_keywords_info = 51;
    if (has_document_keywords_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_keywords_info_);
    }

    // optional .cosmo.pb.DocumentData.ImagePornFea image_porn_fea = 52;
    if (has_image_porn_fea()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_porn_fea_);
    }

    // optional .cosmo.pb.DocumentData.FetcherFirstmeet fetcherFirstmeet = 53;
    if (has_fetcherfirstmeet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fetcherfirstmeet_);
    }

    // optional .cosmo.pb.DocumentData.FetcherPubdate pubdate = 54;
    if (has_pubdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pubdate_);
    }

    // optional .cosmo.pb.DocumentData.FreshnessData freshness_data = 55;
    if (has_freshness_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->freshness_data_);
    }

    // optional .cosmo.pb.DocumentData.DocState state = 56;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->state_);
    }

    // optional .cosmo.pb.DocumentData.RisksFields risks_fields = 57;
    if (has_risks_fields()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->risks_fields_);
    }

    // optional int64 source_id = 1;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentData)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentData)
    MergeFrom(*source);
  }
}

void DocumentData::MergeFrom(const DocumentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doc_region_ids_.MergeFrom(from.doc_region_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ok_info()->::cosmo::pb::DocumentData_OkInfo::MergeFrom(from.ok_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_news_data()->::cosmo::pb::DocumentData_NewsData::MergeFrom(from.news_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_censor()->::cosmo::pb::DocumentData_Censor::MergeFrom(from.censor());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_user_stats()->::cosmo::pb::DocumentData_UserStats::MergeFrom(from.user_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_trends()->::cosmo::pb::DocumentData_Trends::MergeFrom(from.trends());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_original_info()->::cosmo::pb::DocumentData_OriginalInfo::MergeFrom(from.original_info());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_fetcher()->::cosmo::pb::DocumentData_Fetcher::MergeFrom(from.fetcher());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_mediametrics_fea()->::cosmo::pb::DocumentData_MediametricsFea::MergeFrom(from.mediametrics_fea());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_topic_period_stats()->::cosmo::pb::DocumentData_TopicPeriodStats::MergeFrom(from.topic_period_stats());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_app_filter_stats()->::cosmo::pb::DocumentData_AppFilterStats::MergeFrom(from.app_filter_stats());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_week_mediametrics_fea()->::cosmo::pb::DocumentData_MediametricsFea::MergeFrom(from.week_mediametrics_fea());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_ok_topic_event_stat()->::cosmo::pb::DocumentData_TopicEventStat::MergeFrom(from.ok_topic_event_stat());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_vk_topic_event_stat_day()->::cosmo::pb::DocumentData_TopicEventStat::MergeFrom(from.vk_topic_event_stat_day());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_vk_topic_event_stat_week()->::cosmo::pb::DocumentData_TopicEventStat::MergeFrom(from.vk_topic_event_stat_week());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_youtube_topic_event_stat_day()->::cosmo::pb::DocumentData_TopicEventStat::MergeFrom(from.youtube_topic_event_stat_day());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_youtube_topic_event_stat_week()->::cosmo::pb::DocumentData_TopicEventStat::MergeFrom(from.youtube_topic_event_stat_week());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_taped_location_stat()->::cosmo::pb::DocumentData_DocumentLocationStat::MergeFrom(from.taped_location_stat());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_homer_location_stat()->::cosmo::pb::DocumentData_DocumentLocationStat::MergeFrom(from.homer_location_stat());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_hourly_location_stat()->::cosmo::pb::DocumentData_DocumentLocationStat::MergeFrom(from.hourly_location_stat());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_daily_location_stat()->::cosmo::pb::DocumentData_DocumentLocationStat::MergeFrom(from.daily_location_stat());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_weekly_location_stat()->::cosmo::pb::DocumentData_DocumentLocationStat::MergeFrom(from.weekly_location_stat());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_monthly_location_stat()->::cosmo::pb::DocumentData_DocumentLocationStat::MergeFrom(from.monthly_location_stat());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_fetcher_geo()->::cosmo::pb::DocumentData_FetcherGeo::MergeFrom(from.fetcher_geo());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_hourly_fast_mediametrics_fea()->::cosmo::pb::DocumentData_MediametricsFea::MergeFrom(from.hourly_fast_mediametrics_fea());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_daily_fast_mediametrics_fea()->::cosmo::pb::DocumentData_MediametricsFea::MergeFrom(from.daily_fast_mediametrics_fea());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_fetcher_image()->::cosmo::pb::DocumentData_FetcherImage::MergeFrom(from.fetcher_image());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_content_data()->::cosmo::pb::DocumentData_ContentData::MergeFrom(from.content_data());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_vk_topic_event_stat_day_v2()->::cosmo::pb::DocumentData_TopicEventStat::MergeFrom(from.vk_topic_event_stat_day_v2());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_vk_topic_event_stat_week_v2()->::cosmo::pb::DocumentData_TopicEventStat::MergeFrom(from.vk_topic_event_stat_week_v2());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_youtube_topic_event_stat_day_v2()->::cosmo::pb::DocumentData_TopicEventStat::MergeFrom(from.youtube_topic_event_stat_day_v2());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_youtube_topic_event_stat_week_v2()->::cosmo::pb::DocumentData_TopicEventStat::MergeFrom(from.youtube_topic_event_stat_week_v2());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_document_i2i_stat()->::cosmo::pb::DocumentData_DocumentMutualStat::MergeFrom(from.document_i2i_stat());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_document_mv_stat()->::cosmo::pb::DocumentData_DocumentMutualStat::MergeFrom(from.document_mv_stat());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_news_tags_data()->::cosmo::pb::DocumentData_NewsTagsData::MergeFrom(from.news_tags_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_news_story_data()->::cosmo::pb::DocumentData_NewsStoryData::MergeFrom(from.news_story_data());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_native_target_is_active()->::cosmo::pb::DocumentData_NativeTargetIsActive::MergeFrom(from.native_target_is_active());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_fast_location_stat()->::cosmo::pb::DocumentData_DocumentLocationStat::MergeFrom(from.fast_location_stat());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_content_porn_fea()->::cosmo::pb::DocumentData_ContentPornFea::MergeFrom(from.content_porn_fea());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_content_themes()->::cosmo::pb::DocumentData_ContentThemes::MergeFrom(from.content_themes());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_story_cluster_id()->::cosmo::pb::DocumentData_StoryClusterId::MergeFrom(from.story_cluster_id());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_document_keywords_info()->::cosmo::pb::DocumentData_DocumentKeywordsInfo::MergeFrom(from.document_keywords_info());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_image_porn_fea()->::cosmo::pb::DocumentData_ImagePornFea::MergeFrom(from.image_porn_fea());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_fetcherfirstmeet()->::cosmo::pb::DocumentData_FetcherFirstmeet::MergeFrom(from.fetcherfirstmeet());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_pubdate()->::cosmo::pb::DocumentData_FetcherPubdate::MergeFrom(from.pubdate());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_freshness_data()->::cosmo::pb::DocumentData_FreshnessData::MergeFrom(from.freshness_data());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_state()->::cosmo::pb::DocumentData_DocState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_risks_fields()->::cosmo::pb::DocumentData_RisksFields::MergeFrom(from.risks_fields());
    }
    if (cached_has_bits & 0x00008000u) {
      source_id_ = from.source_id_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_doc_id(from.doc_id());
  }
}

void DocumentData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentData::CopyFrom(const DocumentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentData::IsInitialized() const {
  if ((_has_bits_[1] & 0x00010000) != 0x00010000) return false;
  if (has_ok_info()) {
    if (!this->ok_info_->IsInitialized()) return false;
  }
  if (has_news_data()) {
    if (!this->news_data_->IsInitialized()) return false;
  }
  if (has_mediametrics_fea()) {
    if (!this->mediametrics_fea_->IsInitialized()) return false;
  }
  if (has_app_filter_stats()) {
    if (!this->app_filter_stats_->IsInitialized()) return false;
  }
  if (has_week_mediametrics_fea()) {
    if (!this->week_mediametrics_fea_->IsInitialized()) return false;
  }
  if (has_ok_topic_event_stat()) {
    if (!this->ok_topic_event_stat_->IsInitialized()) return false;
  }
  if (has_vk_topic_event_stat_day()) {
    if (!this->vk_topic_event_stat_day_->IsInitialized()) return false;
  }
  if (has_vk_topic_event_stat_week()) {
    if (!this->vk_topic_event_stat_week_->IsInitialized()) return false;
  }
  if (has_youtube_topic_event_stat_day()) {
    if (!this->youtube_topic_event_stat_day_->IsInitialized()) return false;
  }
  if (has_youtube_topic_event_stat_week()) {
    if (!this->youtube_topic_event_stat_week_->IsInitialized()) return false;
  }
  if (has_taped_location_stat()) {
    if (!this->taped_location_stat_->IsInitialized()) return false;
  }
  if (has_homer_location_stat()) {
    if (!this->homer_location_stat_->IsInitialized()) return false;
  }
  if (has_hourly_location_stat()) {
    if (!this->hourly_location_stat_->IsInitialized()) return false;
  }
  if (has_daily_location_stat()) {
    if (!this->daily_location_stat_->IsInitialized()) return false;
  }
  if (has_weekly_location_stat()) {
    if (!this->weekly_location_stat_->IsInitialized()) return false;
  }
  if (has_monthly_location_stat()) {
    if (!this->monthly_location_stat_->IsInitialized()) return false;
  }
  if (has_fetcher_geo()) {
    if (!this->fetcher_geo_->IsInitialized()) return false;
  }
  if (has_hourly_fast_mediametrics_fea()) {
    if (!this->hourly_fast_mediametrics_fea_->IsInitialized()) return false;
  }
  if (has_daily_fast_mediametrics_fea()) {
    if (!this->daily_fast_mediametrics_fea_->IsInitialized()) return false;
  }
  if (has_fetcher_image()) {
    if (!this->fetcher_image_->IsInitialized()) return false;
  }
  if (has_content_data()) {
    if (!this->content_data_->IsInitialized()) return false;
  }
  if (has_vk_topic_event_stat_day_v2()) {
    if (!this->vk_topic_event_stat_day_v2_->IsInitialized()) return false;
  }
  if (has_vk_topic_event_stat_week_v2()) {
    if (!this->vk_topic_event_stat_week_v2_->IsInitialized()) return false;
  }
  if (has_youtube_topic_event_stat_day_v2()) {
    if (!this->youtube_topic_event_stat_day_v2_->IsInitialized()) return false;
  }
  if (has_youtube_topic_event_stat_week_v2()) {
    if (!this->youtube_topic_event_stat_week_v2_->IsInitialized()) return false;
  }
  if (has_document_i2i_stat()) {
    if (!this->document_i2i_stat_->IsInitialized()) return false;
  }
  if (has_document_mv_stat()) {
    if (!this->document_mv_stat_->IsInitialized()) return false;
  }
  if (has_news_story_data()) {
    if (!this->news_story_data_->IsInitialized()) return false;
  }
  if (has_native_target_is_active()) {
    if (!this->native_target_is_active_->IsInitialized()) return false;
  }
  if (has_fast_location_stat()) {
    if (!this->fast_location_stat_->IsInitialized()) return false;
  }
  if (has_story_cluster_id()) {
    if (!this->story_cluster_id_->IsInitialized()) return false;
  }
  if (has_document_keywords_info()) {
    if (!this->document_keywords_info_->IsInitialized()) return false;
  }
  if (has_freshness_data()) {
    if (!this->freshness_data_->IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state_->IsInitialized()) return false;
  }
  return true;
}

void DocumentData::Swap(DocumentData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentData::UnsafeArenaSwap(DocumentData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentData::InternalSwap(DocumentData* other) {
  using std::swap;
  doc_region_ids_.InternalSwap(&other->doc_region_ids_);
  swap(ok_info_, other->ok_info_);
  swap(news_data_, other->news_data_);
  swap(censor_, other->censor_);
  swap(user_stats_, other->user_stats_);
  swap(trends_, other->trends_);
  swap(original_info_, other->original_info_);
  swap(fetcher_, other->fetcher_);
  swap(mediametrics_fea_, other->mediametrics_fea_);
  swap(topic_period_stats_, other->topic_period_stats_);
  swap(app_filter_stats_, other->app_filter_stats_);
  swap(week_mediametrics_fea_, other->week_mediametrics_fea_);
  swap(ok_topic_event_stat_, other->ok_topic_event_stat_);
  swap(vk_topic_event_stat_day_, other->vk_topic_event_stat_day_);
  swap(vk_topic_event_stat_week_, other->vk_topic_event_stat_week_);
  swap(youtube_topic_event_stat_day_, other->youtube_topic_event_stat_day_);
  swap(youtube_topic_event_stat_week_, other->youtube_topic_event_stat_week_);
  swap(taped_location_stat_, other->taped_location_stat_);
  swap(homer_location_stat_, other->homer_location_stat_);
  swap(hourly_location_stat_, other->hourly_location_stat_);
  swap(daily_location_stat_, other->daily_location_stat_);
  swap(weekly_location_stat_, other->weekly_location_stat_);
  swap(monthly_location_stat_, other->monthly_location_stat_);
  swap(fetcher_geo_, other->fetcher_geo_);
  swap(hourly_fast_mediametrics_fea_, other->hourly_fast_mediametrics_fea_);
  swap(daily_fast_mediametrics_fea_, other->daily_fast_mediametrics_fea_);
  swap(fetcher_image_, other->fetcher_image_);
  swap(content_data_, other->content_data_);
  swap(vk_topic_event_stat_day_v2_, other->vk_topic_event_stat_day_v2_);
  swap(vk_topic_event_stat_week_v2_, other->vk_topic_event_stat_week_v2_);
  swap(youtube_topic_event_stat_day_v2_, other->youtube_topic_event_stat_day_v2_);
  swap(youtube_topic_event_stat_week_v2_, other->youtube_topic_event_stat_week_v2_);
  swap(document_i2i_stat_, other->document_i2i_stat_);
  swap(document_mv_stat_, other->document_mv_stat_);
  swap(news_tags_data_, other->news_tags_data_);
  swap(news_story_data_, other->news_story_data_);
  swap(native_target_is_active_, other->native_target_is_active_);
  swap(fast_location_stat_, other->fast_location_stat_);
  swap(content_porn_fea_, other->content_porn_fea_);
  swap(content_themes_, other->content_themes_);
  swap(story_cluster_id_, other->story_cluster_id_);
  swap(document_keywords_info_, other->document_keywords_info_);
  swap(image_porn_fea_, other->image_porn_fea_);
  swap(fetcherfirstmeet_, other->fetcherfirstmeet_);
  swap(pubdate_, other->pubdate_);
  swap(freshness_data_, other->freshness_data_);
  swap(state_, other->state_);
  swap(risks_fields_, other->risks_fields_);
  swap(source_id_, other->source_id_);
  swap(doc_id_, other->doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentData::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentData

// optional int64 source_id = 1;
bool DocumentData::has_source_id() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void DocumentData::set_has_source_id() {
  _has_bits_[1] |= 0x00008000u;
}
void DocumentData::clear_has_source_id() {
  _has_bits_[1] &= ~0x00008000u;
}
void DocumentData::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 DocumentData::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.source_id)
  return source_id_;
}
void DocumentData::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.source_id)
}

// required int64 doc_id = 2;
bool DocumentData::has_doc_id() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void DocumentData::set_has_doc_id() {
  _has_bits_[1] |= 0x00010000u;
}
void DocumentData::clear_has_doc_id() {
  _has_bits_[1] &= ~0x00010000u;
}
void DocumentData::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 DocumentData::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.doc_id)
  return doc_id_;
}
void DocumentData::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.doc_id)
}

// optional .cosmo.pb.DocumentData.OkInfo ok_info = 7;
bool DocumentData::has_ok_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentData::set_has_ok_info() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentData::clear_has_ok_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentData::clear_ok_info() {
  if (ok_info_ != NULL) ok_info_->::cosmo::pb::DocumentData_OkInfo::Clear();
  clear_has_ok_info();
}
const ::cosmo::pb::DocumentData_OkInfo& DocumentData::ok_info() const {
  const ::cosmo::pb::DocumentData_OkInfo* p = ok_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ok_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_OkInfo*>(
      &::cosmo::pb::_DocumentData_OkInfo_default_instance_);
}
::cosmo::pb::DocumentData_OkInfo* DocumentData::mutable_ok_info() {
  set_has_ok_info();
  if (ok_info_ == NULL) {
    _slow_mutable_ok_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.ok_info)
  return ok_info_;
}
::cosmo::pb::DocumentData_OkInfo* DocumentData::release_ok_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.ok_info)
  clear_has_ok_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_info();
  } else {
    ::cosmo::pb::DocumentData_OkInfo* temp = ok_info_;
    ok_info_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_ok_info(::cosmo::pb::DocumentData_OkInfo* ok_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_info_;
  }
  if (ok_info != NULL) {
    _slow_set_allocated_ok_info(message_arena, &ok_info);
  }
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.ok_info)
}

// optional .cosmo.pb.DocumentData.NewsData news_data = 8;
bool DocumentData::has_news_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentData::set_has_news_data() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentData::clear_has_news_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentData::clear_news_data() {
  if (news_data_ != NULL) news_data_->::cosmo::pb::DocumentData_NewsData::Clear();
  clear_has_news_data();
}
const ::cosmo::pb::DocumentData_NewsData& DocumentData::news_data() const {
  const ::cosmo::pb::DocumentData_NewsData* p = news_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.news_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_NewsData*>(
      &::cosmo::pb::_DocumentData_NewsData_default_instance_);
}
::cosmo::pb::DocumentData_NewsData* DocumentData::mutable_news_data() {
  set_has_news_data();
  if (news_data_ == NULL) {
    _slow_mutable_news_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.news_data)
  return news_data_;
}
::cosmo::pb::DocumentData_NewsData* DocumentData::release_news_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.news_data)
  clear_has_news_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_news_data();
  } else {
    ::cosmo::pb::DocumentData_NewsData* temp = news_data_;
    news_data_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_news_data(::cosmo::pb::DocumentData_NewsData* news_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete news_data_;
  }
  if (news_data != NULL) {
    _slow_set_allocated_news_data(message_arena, &news_data);
  }
  news_data_ = news_data;
  if (news_data) {
    set_has_news_data();
  } else {
    clear_has_news_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.news_data)
}

// optional .cosmo.pb.DocumentData.Censor censor = 10;
bool DocumentData::has_censor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DocumentData::set_has_censor() {
  _has_bits_[0] |= 0x00000004u;
}
void DocumentData::clear_has_censor() {
  _has_bits_[0] &= ~0x00000004u;
}
void DocumentData::clear_censor() {
  if (censor_ != NULL) censor_->::cosmo::pb::DocumentData_Censor::Clear();
  clear_has_censor();
}
const ::cosmo::pb::DocumentData_Censor& DocumentData::censor() const {
  const ::cosmo::pb::DocumentData_Censor* p = censor_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.censor)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_Censor*>(
      &::cosmo::pb::_DocumentData_Censor_default_instance_);
}
::cosmo::pb::DocumentData_Censor* DocumentData::mutable_censor() {
  set_has_censor();
  if (censor_ == NULL) {
    _slow_mutable_censor();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.censor)
  return censor_;
}
::cosmo::pb::DocumentData_Censor* DocumentData::release_censor() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.censor)
  clear_has_censor();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_censor();
  } else {
    ::cosmo::pb::DocumentData_Censor* temp = censor_;
    censor_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_censor(::cosmo::pb::DocumentData_Censor* censor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete censor_;
  }
  if (censor != NULL) {
    _slow_set_allocated_censor(message_arena, &censor);
  }
  censor_ = censor;
  if (censor) {
    set_has_censor();
  } else {
    clear_has_censor();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.censor)
}

// optional .cosmo.pb.DocumentData.UserStats user_stats = 11;
bool DocumentData::has_user_stats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DocumentData::set_has_user_stats() {
  _has_bits_[0] |= 0x00000008u;
}
void DocumentData::clear_has_user_stats() {
  _has_bits_[0] &= ~0x00000008u;
}
void DocumentData::clear_user_stats() {
  if (user_stats_ != NULL) user_stats_->::cosmo::pb::DocumentData_UserStats::Clear();
  clear_has_user_stats();
}
const ::cosmo::pb::DocumentData_UserStats& DocumentData::user_stats() const {
  const ::cosmo::pb::DocumentData_UserStats* p = user_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.user_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_UserStats*>(
      &::cosmo::pb::_DocumentData_UserStats_default_instance_);
}
::cosmo::pb::DocumentData_UserStats* DocumentData::mutable_user_stats() {
  set_has_user_stats();
  if (user_stats_ == NULL) {
    _slow_mutable_user_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.user_stats)
  return user_stats_;
}
::cosmo::pb::DocumentData_UserStats* DocumentData::release_user_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.user_stats)
  clear_has_user_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_stats();
  } else {
    ::cosmo::pb::DocumentData_UserStats* temp = user_stats_;
    user_stats_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_user_stats(::cosmo::pb::DocumentData_UserStats* user_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_stats_;
  }
  if (user_stats != NULL) {
    _slow_set_allocated_user_stats(message_arena, &user_stats);
  }
  user_stats_ = user_stats;
  if (user_stats) {
    set_has_user_stats();
  } else {
    clear_has_user_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.user_stats)
}

// optional .cosmo.pb.DocumentData.Trends trends = 12;
bool DocumentData::has_trends() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DocumentData::set_has_trends() {
  _has_bits_[0] |= 0x00000010u;
}
void DocumentData::clear_has_trends() {
  _has_bits_[0] &= ~0x00000010u;
}
void DocumentData::clear_trends() {
  if (trends_ != NULL) trends_->::cosmo::pb::DocumentData_Trends::Clear();
  clear_has_trends();
}
const ::cosmo::pb::DocumentData_Trends& DocumentData::trends() const {
  const ::cosmo::pb::DocumentData_Trends* p = trends_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.trends)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_Trends*>(
      &::cosmo::pb::_DocumentData_Trends_default_instance_);
}
::cosmo::pb::DocumentData_Trends* DocumentData::mutable_trends() {
  set_has_trends();
  if (trends_ == NULL) {
    _slow_mutable_trends();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.trends)
  return trends_;
}
::cosmo::pb::DocumentData_Trends* DocumentData::release_trends() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.trends)
  clear_has_trends();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_trends();
  } else {
    ::cosmo::pb::DocumentData_Trends* temp = trends_;
    trends_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_trends(::cosmo::pb::DocumentData_Trends* trends) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trends_;
  }
  if (trends != NULL) {
    _slow_set_allocated_trends(message_arena, &trends);
  }
  trends_ = trends;
  if (trends) {
    set_has_trends();
  } else {
    clear_has_trends();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.trends)
}

// optional .cosmo.pb.DocumentData.OriginalInfo original_info = 13;
bool DocumentData::has_original_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DocumentData::set_has_original_info() {
  _has_bits_[0] |= 0x00000020u;
}
void DocumentData::clear_has_original_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void DocumentData::clear_original_info() {
  if (original_info_ != NULL) original_info_->::cosmo::pb::DocumentData_OriginalInfo::Clear();
  clear_has_original_info();
}
const ::cosmo::pb::DocumentData_OriginalInfo& DocumentData::original_info() const {
  const ::cosmo::pb::DocumentData_OriginalInfo* p = original_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.original_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_OriginalInfo*>(
      &::cosmo::pb::_DocumentData_OriginalInfo_default_instance_);
}
::cosmo::pb::DocumentData_OriginalInfo* DocumentData::mutable_original_info() {
  set_has_original_info();
  if (original_info_ == NULL) {
    _slow_mutable_original_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.original_info)
  return original_info_;
}
::cosmo::pb::DocumentData_OriginalInfo* DocumentData::release_original_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.original_info)
  clear_has_original_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_info();
  } else {
    ::cosmo::pb::DocumentData_OriginalInfo* temp = original_info_;
    original_info_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_original_info(::cosmo::pb::DocumentData_OriginalInfo* original_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_info_;
  }
  if (original_info != NULL) {
    _slow_set_allocated_original_info(message_arena, &original_info);
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.original_info)
}

// optional .cosmo.pb.DocumentData.Fetcher fetcher = 14;
bool DocumentData::has_fetcher() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DocumentData::set_has_fetcher() {
  _has_bits_[0] |= 0x00000040u;
}
void DocumentData::clear_has_fetcher() {
  _has_bits_[0] &= ~0x00000040u;
}
void DocumentData::clear_fetcher() {
  if (fetcher_ != NULL) fetcher_->::cosmo::pb::DocumentData_Fetcher::Clear();
  clear_has_fetcher();
}
const ::cosmo::pb::DocumentData_Fetcher& DocumentData::fetcher() const {
  const ::cosmo::pb::DocumentData_Fetcher* p = fetcher_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.fetcher)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_Fetcher*>(
      &::cosmo::pb::_DocumentData_Fetcher_default_instance_);
}
::cosmo::pb::DocumentData_Fetcher* DocumentData::mutable_fetcher() {
  set_has_fetcher();
  if (fetcher_ == NULL) {
    _slow_mutable_fetcher();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.fetcher)
  return fetcher_;
}
::cosmo::pb::DocumentData_Fetcher* DocumentData::release_fetcher() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.fetcher)
  clear_has_fetcher();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fetcher();
  } else {
    ::cosmo::pb::DocumentData_Fetcher* temp = fetcher_;
    fetcher_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_fetcher(::cosmo::pb::DocumentData_Fetcher* fetcher) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fetcher_;
  }
  if (fetcher != NULL) {
    _slow_set_allocated_fetcher(message_arena, &fetcher);
  }
  fetcher_ = fetcher;
  if (fetcher) {
    set_has_fetcher();
  } else {
    clear_has_fetcher();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.fetcher)
}

// optional .cosmo.pb.DocumentData.MediametricsFea mediametrics_fea = 15;
bool DocumentData::has_mediametrics_fea() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DocumentData::set_has_mediametrics_fea() {
  _has_bits_[0] |= 0x00000080u;
}
void DocumentData::clear_has_mediametrics_fea() {
  _has_bits_[0] &= ~0x00000080u;
}
void DocumentData::clear_mediametrics_fea() {
  if (mediametrics_fea_ != NULL) mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
  clear_has_mediametrics_fea();
}
const ::cosmo::pb::DocumentData_MediametricsFea& DocumentData::mediametrics_fea() const {
  const ::cosmo::pb::DocumentData_MediametricsFea* p = mediametrics_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.mediametrics_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_MediametricsFea*>(
      &::cosmo::pb::_DocumentData_MediametricsFea_default_instance_);
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::mutable_mediametrics_fea() {
  set_has_mediametrics_fea();
  if (mediametrics_fea_ == NULL) {
    _slow_mutable_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.mediametrics_fea)
  return mediametrics_fea_;
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::release_mediametrics_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.mediametrics_fea)
  clear_has_mediametrics_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_mediametrics_fea();
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = mediametrics_fea_;
    mediametrics_fea_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* mediametrics_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mediametrics_fea_;
  }
  if (mediametrics_fea != NULL) {
    _slow_set_allocated_mediametrics_fea(message_arena, &mediametrics_fea);
  }
  mediametrics_fea_ = mediametrics_fea;
  if (mediametrics_fea) {
    set_has_mediametrics_fea();
  } else {
    clear_has_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.mediametrics_fea)
}

// optional .cosmo.pb.DocumentData.TopicPeriodStats topic_period_stats = 16;
bool DocumentData::has_topic_period_stats() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DocumentData::set_has_topic_period_stats() {
  _has_bits_[0] |= 0x00000100u;
}
void DocumentData::clear_has_topic_period_stats() {
  _has_bits_[0] &= ~0x00000100u;
}
void DocumentData::clear_topic_period_stats() {
  if (topic_period_stats_ != NULL) topic_period_stats_->::cosmo::pb::DocumentData_TopicPeriodStats::Clear();
  clear_has_topic_period_stats();
}
const ::cosmo::pb::DocumentData_TopicPeriodStats& DocumentData::topic_period_stats() const {
  const ::cosmo::pb::DocumentData_TopicPeriodStats* p = topic_period_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.topic_period_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicPeriodStats*>(
      &::cosmo::pb::_DocumentData_TopicPeriodStats_default_instance_);
}
::cosmo::pb::DocumentData_TopicPeriodStats* DocumentData::mutable_topic_period_stats() {
  set_has_topic_period_stats();
  if (topic_period_stats_ == NULL) {
    _slow_mutable_topic_period_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.topic_period_stats)
  return topic_period_stats_;
}
::cosmo::pb::DocumentData_TopicPeriodStats* DocumentData::release_topic_period_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.topic_period_stats)
  clear_has_topic_period_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_topic_period_stats();
  } else {
    ::cosmo::pb::DocumentData_TopicPeriodStats* temp = topic_period_stats_;
    topic_period_stats_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_topic_period_stats(::cosmo::pb::DocumentData_TopicPeriodStats* topic_period_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete topic_period_stats_;
  }
  if (topic_period_stats != NULL) {
    _slow_set_allocated_topic_period_stats(message_arena, &topic_period_stats);
  }
  topic_period_stats_ = topic_period_stats;
  if (topic_period_stats) {
    set_has_topic_period_stats();
  } else {
    clear_has_topic_period_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.topic_period_stats)
}

// optional .cosmo.pb.DocumentData.AppFilterStats app_filter_stats = 17;
bool DocumentData::has_app_filter_stats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DocumentData::set_has_app_filter_stats() {
  _has_bits_[0] |= 0x00000200u;
}
void DocumentData::clear_has_app_filter_stats() {
  _has_bits_[0] &= ~0x00000200u;
}
void DocumentData::clear_app_filter_stats() {
  if (app_filter_stats_ != NULL) app_filter_stats_->::cosmo::pb::DocumentData_AppFilterStats::Clear();
  clear_has_app_filter_stats();
}
const ::cosmo::pb::DocumentData_AppFilterStats& DocumentData::app_filter_stats() const {
  const ::cosmo::pb::DocumentData_AppFilterStats* p = app_filter_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.app_filter_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_AppFilterStats*>(
      &::cosmo::pb::_DocumentData_AppFilterStats_default_instance_);
}
::cosmo::pb::DocumentData_AppFilterStats* DocumentData::mutable_app_filter_stats() {
  set_has_app_filter_stats();
  if (app_filter_stats_ == NULL) {
    _slow_mutable_app_filter_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.app_filter_stats)
  return app_filter_stats_;
}
::cosmo::pb::DocumentData_AppFilterStats* DocumentData::release_app_filter_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.app_filter_stats)
  clear_has_app_filter_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_app_filter_stats();
  } else {
    ::cosmo::pb::DocumentData_AppFilterStats* temp = app_filter_stats_;
    app_filter_stats_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_app_filter_stats(::cosmo::pb::DocumentData_AppFilterStats* app_filter_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete app_filter_stats_;
  }
  if (app_filter_stats != NULL) {
    _slow_set_allocated_app_filter_stats(message_arena, &app_filter_stats);
  }
  app_filter_stats_ = app_filter_stats;
  if (app_filter_stats) {
    set_has_app_filter_stats();
  } else {
    clear_has_app_filter_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.app_filter_stats)
}

// optional .cosmo.pb.DocumentData.MediametricsFea week_mediametrics_fea = 18;
bool DocumentData::has_week_mediametrics_fea() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DocumentData::set_has_week_mediametrics_fea() {
  _has_bits_[0] |= 0x00000400u;
}
void DocumentData::clear_has_week_mediametrics_fea() {
  _has_bits_[0] &= ~0x00000400u;
}
void DocumentData::clear_week_mediametrics_fea() {
  if (week_mediametrics_fea_ != NULL) week_mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
  clear_has_week_mediametrics_fea();
}
const ::cosmo::pb::DocumentData_MediametricsFea& DocumentData::week_mediametrics_fea() const {
  const ::cosmo::pb::DocumentData_MediametricsFea* p = week_mediametrics_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.week_mediametrics_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_MediametricsFea*>(
      &::cosmo::pb::_DocumentData_MediametricsFea_default_instance_);
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::mutable_week_mediametrics_fea() {
  set_has_week_mediametrics_fea();
  if (week_mediametrics_fea_ == NULL) {
    _slow_mutable_week_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.week_mediametrics_fea)
  return week_mediametrics_fea_;
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::release_week_mediametrics_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.week_mediametrics_fea)
  clear_has_week_mediametrics_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_week_mediametrics_fea();
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = week_mediametrics_fea_;
    week_mediametrics_fea_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_week_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* week_mediametrics_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete week_mediametrics_fea_;
  }
  if (week_mediametrics_fea != NULL) {
    _slow_set_allocated_week_mediametrics_fea(message_arena, &week_mediametrics_fea);
  }
  week_mediametrics_fea_ = week_mediametrics_fea;
  if (week_mediametrics_fea) {
    set_has_week_mediametrics_fea();
  } else {
    clear_has_week_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.week_mediametrics_fea)
}

// optional .cosmo.pb.DocumentData.TopicEventStat ok_topic_event_stat = 20;
bool DocumentData::has_ok_topic_event_stat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DocumentData::set_has_ok_topic_event_stat() {
  _has_bits_[0] |= 0x00000800u;
}
void DocumentData::clear_has_ok_topic_event_stat() {
  _has_bits_[0] &= ~0x00000800u;
}
void DocumentData::clear_ok_topic_event_stat() {
  if (ok_topic_event_stat_ != NULL) ok_topic_event_stat_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_ok_topic_event_stat();
}
const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::ok_topic_event_stat() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = ok_topic_event_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ok_topic_event_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_ok_topic_event_stat() {
  set_has_ok_topic_event_stat();
  if (ok_topic_event_stat_ == NULL) {
    _slow_mutable_ok_topic_event_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.ok_topic_event_stat)
  return ok_topic_event_stat_;
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_ok_topic_event_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.ok_topic_event_stat)
  clear_has_ok_topic_event_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_topic_event_stat();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = ok_topic_event_stat_;
    ok_topic_event_stat_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_ok_topic_event_stat(::cosmo::pb::DocumentData_TopicEventStat* ok_topic_event_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_topic_event_stat_;
  }
  if (ok_topic_event_stat != NULL) {
    _slow_set_allocated_ok_topic_event_stat(message_arena, &ok_topic_event_stat);
  }
  ok_topic_event_stat_ = ok_topic_event_stat;
  if (ok_topic_event_stat) {
    set_has_ok_topic_event_stat();
  } else {
    clear_has_ok_topic_event_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.ok_topic_event_stat)
}

// optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day = 21;
bool DocumentData::has_vk_topic_event_stat_day() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DocumentData::set_has_vk_topic_event_stat_day() {
  _has_bits_[0] |= 0x00001000u;
}
void DocumentData::clear_has_vk_topic_event_stat_day() {
  _has_bits_[0] &= ~0x00001000u;
}
void DocumentData::clear_vk_topic_event_stat_day() {
  if (vk_topic_event_stat_day_ != NULL) vk_topic_event_stat_day_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_vk_topic_event_stat_day();
}
const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::vk_topic_event_stat_day() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = vk_topic_event_stat_day_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.vk_topic_event_stat_day)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_vk_topic_event_stat_day() {
  set_has_vk_topic_event_stat_day();
  if (vk_topic_event_stat_day_ == NULL) {
    _slow_mutable_vk_topic_event_stat_day();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.vk_topic_event_stat_day)
  return vk_topic_event_stat_day_;
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_vk_topic_event_stat_day() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.vk_topic_event_stat_day)
  clear_has_vk_topic_event_stat_day();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_topic_event_stat_day();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_day_;
    vk_topic_event_stat_day_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_vk_topic_event_stat_day(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_topic_event_stat_day_;
  }
  if (vk_topic_event_stat_day != NULL) {
    _slow_set_allocated_vk_topic_event_stat_day(message_arena, &vk_topic_event_stat_day);
  }
  vk_topic_event_stat_day_ = vk_topic_event_stat_day;
  if (vk_topic_event_stat_day) {
    set_has_vk_topic_event_stat_day();
  } else {
    clear_has_vk_topic_event_stat_day();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_day)
}

// optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week = 22;
bool DocumentData::has_vk_topic_event_stat_week() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DocumentData::set_has_vk_topic_event_stat_week() {
  _has_bits_[0] |= 0x00002000u;
}
void DocumentData::clear_has_vk_topic_event_stat_week() {
  _has_bits_[0] &= ~0x00002000u;
}
void DocumentData::clear_vk_topic_event_stat_week() {
  if (vk_topic_event_stat_week_ != NULL) vk_topic_event_stat_week_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_vk_topic_event_stat_week();
}
const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::vk_topic_event_stat_week() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = vk_topic_event_stat_week_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.vk_topic_event_stat_week)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_vk_topic_event_stat_week() {
  set_has_vk_topic_event_stat_week();
  if (vk_topic_event_stat_week_ == NULL) {
    _slow_mutable_vk_topic_event_stat_week();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.vk_topic_event_stat_week)
  return vk_topic_event_stat_week_;
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_vk_topic_event_stat_week() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.vk_topic_event_stat_week)
  clear_has_vk_topic_event_stat_week();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_topic_event_stat_week();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_week_;
    vk_topic_event_stat_week_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_vk_topic_event_stat_week(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_topic_event_stat_week_;
  }
  if (vk_topic_event_stat_week != NULL) {
    _slow_set_allocated_vk_topic_event_stat_week(message_arena, &vk_topic_event_stat_week);
  }
  vk_topic_event_stat_week_ = vk_topic_event_stat_week;
  if (vk_topic_event_stat_week) {
    set_has_vk_topic_event_stat_week();
  } else {
    clear_has_vk_topic_event_stat_week();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_week)
}

// optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day = 23;
bool DocumentData::has_youtube_topic_event_stat_day() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DocumentData::set_has_youtube_topic_event_stat_day() {
  _has_bits_[0] |= 0x00004000u;
}
void DocumentData::clear_has_youtube_topic_event_stat_day() {
  _has_bits_[0] &= ~0x00004000u;
}
void DocumentData::clear_youtube_topic_event_stat_day() {
  if (youtube_topic_event_stat_day_ != NULL) youtube_topic_event_stat_day_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_youtube_topic_event_stat_day();
}
const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::youtube_topic_event_stat_day() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = youtube_topic_event_stat_day_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.youtube_topic_event_stat_day)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_youtube_topic_event_stat_day() {
  set_has_youtube_topic_event_stat_day();
  if (youtube_topic_event_stat_day_ == NULL) {
    _slow_mutable_youtube_topic_event_stat_day();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.youtube_topic_event_stat_day)
  return youtube_topic_event_stat_day_;
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_youtube_topic_event_stat_day() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.youtube_topic_event_stat_day)
  clear_has_youtube_topic_event_stat_day();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_topic_event_stat_day();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_day_;
    youtube_topic_event_stat_day_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_youtube_topic_event_stat_day(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_topic_event_stat_day_;
  }
  if (youtube_topic_event_stat_day != NULL) {
    _slow_set_allocated_youtube_topic_event_stat_day(message_arena, &youtube_topic_event_stat_day);
  }
  youtube_topic_event_stat_day_ = youtube_topic_event_stat_day;
  if (youtube_topic_event_stat_day) {
    set_has_youtube_topic_event_stat_day();
  } else {
    clear_has_youtube_topic_event_stat_day();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_day)
}

// optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week = 24;
bool DocumentData::has_youtube_topic_event_stat_week() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DocumentData::set_has_youtube_topic_event_stat_week() {
  _has_bits_[0] |= 0x00008000u;
}
void DocumentData::clear_has_youtube_topic_event_stat_week() {
  _has_bits_[0] &= ~0x00008000u;
}
void DocumentData::clear_youtube_topic_event_stat_week() {
  if (youtube_topic_event_stat_week_ != NULL) youtube_topic_event_stat_week_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_youtube_topic_event_stat_week();
}
const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::youtube_topic_event_stat_week() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = youtube_topic_event_stat_week_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.youtube_topic_event_stat_week)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_youtube_topic_event_stat_week() {
  set_has_youtube_topic_event_stat_week();
  if (youtube_topic_event_stat_week_ == NULL) {
    _slow_mutable_youtube_topic_event_stat_week();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.youtube_topic_event_stat_week)
  return youtube_topic_event_stat_week_;
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_youtube_topic_event_stat_week() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.youtube_topic_event_stat_week)
  clear_has_youtube_topic_event_stat_week();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_topic_event_stat_week();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_week_;
    youtube_topic_event_stat_week_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_youtube_topic_event_stat_week(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_topic_event_stat_week_;
  }
  if (youtube_topic_event_stat_week != NULL) {
    _slow_set_allocated_youtube_topic_event_stat_week(message_arena, &youtube_topic_event_stat_week);
  }
  youtube_topic_event_stat_week_ = youtube_topic_event_stat_week;
  if (youtube_topic_event_stat_week) {
    set_has_youtube_topic_event_stat_week();
  } else {
    clear_has_youtube_topic_event_stat_week();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_week)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat taped_location_stat = 25;
bool DocumentData::has_taped_location_stat() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DocumentData::set_has_taped_location_stat() {
  _has_bits_[0] |= 0x00010000u;
}
void DocumentData::clear_has_taped_location_stat() {
  _has_bits_[0] &= ~0x00010000u;
}
void DocumentData::clear_taped_location_stat() {
  if (taped_location_stat_ != NULL) taped_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_taped_location_stat();
}
const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::taped_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = taped_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.taped_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_taped_location_stat() {
  set_has_taped_location_stat();
  if (taped_location_stat_ == NULL) {
    _slow_mutable_taped_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.taped_location_stat)
  return taped_location_stat_;
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_taped_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.taped_location_stat)
  clear_has_taped_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_taped_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = taped_location_stat_;
    taped_location_stat_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_taped_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* taped_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete taped_location_stat_;
  }
  if (taped_location_stat != NULL) {
    _slow_set_allocated_taped_location_stat(message_arena, &taped_location_stat);
  }
  taped_location_stat_ = taped_location_stat;
  if (taped_location_stat) {
    set_has_taped_location_stat();
  } else {
    clear_has_taped_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.taped_location_stat)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat homer_location_stat = 26;
bool DocumentData::has_homer_location_stat() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DocumentData::set_has_homer_location_stat() {
  _has_bits_[0] |= 0x00020000u;
}
void DocumentData::clear_has_homer_location_stat() {
  _has_bits_[0] &= ~0x00020000u;
}
void DocumentData::clear_homer_location_stat() {
  if (homer_location_stat_ != NULL) homer_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_homer_location_stat();
}
const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::homer_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = homer_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.homer_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_homer_location_stat() {
  set_has_homer_location_stat();
  if (homer_location_stat_ == NULL) {
    _slow_mutable_homer_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.homer_location_stat)
  return homer_location_stat_;
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_homer_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.homer_location_stat)
  clear_has_homer_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_homer_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = homer_location_stat_;
    homer_location_stat_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_homer_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* homer_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete homer_location_stat_;
  }
  if (homer_location_stat != NULL) {
    _slow_set_allocated_homer_location_stat(message_arena, &homer_location_stat);
  }
  homer_location_stat_ = homer_location_stat;
  if (homer_location_stat) {
    set_has_homer_location_stat();
  } else {
    clear_has_homer_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.homer_location_stat)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat hourly_location_stat = 27;
bool DocumentData::has_hourly_location_stat() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DocumentData::set_has_hourly_location_stat() {
  _has_bits_[0] |= 0x00040000u;
}
void DocumentData::clear_has_hourly_location_stat() {
  _has_bits_[0] &= ~0x00040000u;
}
void DocumentData::clear_hourly_location_stat() {
  if (hourly_location_stat_ != NULL) hourly_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_hourly_location_stat();
}
const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::hourly_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = hourly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.hourly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_hourly_location_stat() {
  set_has_hourly_location_stat();
  if (hourly_location_stat_ == NULL) {
    _slow_mutable_hourly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.hourly_location_stat)
  return hourly_location_stat_;
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_hourly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.hourly_location_stat)
  clear_has_hourly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_hourly_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = hourly_location_stat_;
    hourly_location_stat_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_hourly_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* hourly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hourly_location_stat_;
  }
  if (hourly_location_stat != NULL) {
    _slow_set_allocated_hourly_location_stat(message_arena, &hourly_location_stat);
  }
  hourly_location_stat_ = hourly_location_stat;
  if (hourly_location_stat) {
    set_has_hourly_location_stat();
  } else {
    clear_has_hourly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.hourly_location_stat)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat daily_location_stat = 28;
bool DocumentData::has_daily_location_stat() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DocumentData::set_has_daily_location_stat() {
  _has_bits_[0] |= 0x00080000u;
}
void DocumentData::clear_has_daily_location_stat() {
  _has_bits_[0] &= ~0x00080000u;
}
void DocumentData::clear_daily_location_stat() {
  if (daily_location_stat_ != NULL) daily_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_daily_location_stat();
}
const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::daily_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = daily_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.daily_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_daily_location_stat() {
  set_has_daily_location_stat();
  if (daily_location_stat_ == NULL) {
    _slow_mutable_daily_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.daily_location_stat)
  return daily_location_stat_;
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_daily_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.daily_location_stat)
  clear_has_daily_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_daily_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = daily_location_stat_;
    daily_location_stat_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_daily_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* daily_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete daily_location_stat_;
  }
  if (daily_location_stat != NULL) {
    _slow_set_allocated_daily_location_stat(message_arena, &daily_location_stat);
  }
  daily_location_stat_ = daily_location_stat;
  if (daily_location_stat) {
    set_has_daily_location_stat();
  } else {
    clear_has_daily_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.daily_location_stat)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat weekly_location_stat = 29;
bool DocumentData::has_weekly_location_stat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DocumentData::set_has_weekly_location_stat() {
  _has_bits_[0] |= 0x00100000u;
}
void DocumentData::clear_has_weekly_location_stat() {
  _has_bits_[0] &= ~0x00100000u;
}
void DocumentData::clear_weekly_location_stat() {
  if (weekly_location_stat_ != NULL) weekly_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_weekly_location_stat();
}
const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::weekly_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = weekly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.weekly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_weekly_location_stat() {
  set_has_weekly_location_stat();
  if (weekly_location_stat_ == NULL) {
    _slow_mutable_weekly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.weekly_location_stat)
  return weekly_location_stat_;
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_weekly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.weekly_location_stat)
  clear_has_weekly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_weekly_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = weekly_location_stat_;
    weekly_location_stat_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_weekly_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* weekly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weekly_location_stat_;
  }
  if (weekly_location_stat != NULL) {
    _slow_set_allocated_weekly_location_stat(message_arena, &weekly_location_stat);
  }
  weekly_location_stat_ = weekly_location_stat;
  if (weekly_location_stat) {
    set_has_weekly_location_stat();
  } else {
    clear_has_weekly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.weekly_location_stat)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat monthly_location_stat = 30;
bool DocumentData::has_monthly_location_stat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DocumentData::set_has_monthly_location_stat() {
  _has_bits_[0] |= 0x00200000u;
}
void DocumentData::clear_has_monthly_location_stat() {
  _has_bits_[0] &= ~0x00200000u;
}
void DocumentData::clear_monthly_location_stat() {
  if (monthly_location_stat_ != NULL) monthly_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_monthly_location_stat();
}
const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::monthly_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = monthly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.monthly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_monthly_location_stat() {
  set_has_monthly_location_stat();
  if (monthly_location_stat_ == NULL) {
    _slow_mutable_monthly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.monthly_location_stat)
  return monthly_location_stat_;
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_monthly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.monthly_location_stat)
  clear_has_monthly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_monthly_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = monthly_location_stat_;
    monthly_location_stat_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_monthly_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* monthly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete monthly_location_stat_;
  }
  if (monthly_location_stat != NULL) {
    _slow_set_allocated_monthly_location_stat(message_arena, &monthly_location_stat);
  }
  monthly_location_stat_ = monthly_location_stat;
  if (monthly_location_stat) {
    set_has_monthly_location_stat();
  } else {
    clear_has_monthly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.monthly_location_stat)
}

// optional .cosmo.pb.DocumentData.FetcherGeo fetcher_geo = 31;
bool DocumentData::has_fetcher_geo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DocumentData::set_has_fetcher_geo() {
  _has_bits_[0] |= 0x00400000u;
}
void DocumentData::clear_has_fetcher_geo() {
  _has_bits_[0] &= ~0x00400000u;
}
void DocumentData::clear_fetcher_geo() {
  if (fetcher_geo_ != NULL) fetcher_geo_->::cosmo::pb::DocumentData_FetcherGeo::Clear();
  clear_has_fetcher_geo();
}
const ::cosmo::pb::DocumentData_FetcherGeo& DocumentData::fetcher_geo() const {
  const ::cosmo::pb::DocumentData_FetcherGeo* p = fetcher_geo_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.fetcher_geo)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_FetcherGeo*>(
      &::cosmo::pb::_DocumentData_FetcherGeo_default_instance_);
}
::cosmo::pb::DocumentData_FetcherGeo* DocumentData::mutable_fetcher_geo() {
  set_has_fetcher_geo();
  if (fetcher_geo_ == NULL) {
    _slow_mutable_fetcher_geo();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.fetcher_geo)
  return fetcher_geo_;
}
::cosmo::pb::DocumentData_FetcherGeo* DocumentData::release_fetcher_geo() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.fetcher_geo)
  clear_has_fetcher_geo();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fetcher_geo();
  } else {
    ::cosmo::pb::DocumentData_FetcherGeo* temp = fetcher_geo_;
    fetcher_geo_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_fetcher_geo(::cosmo::pb::DocumentData_FetcherGeo* fetcher_geo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fetcher_geo_;
  }
  if (fetcher_geo != NULL) {
    _slow_set_allocated_fetcher_geo(message_arena, &fetcher_geo);
  }
  fetcher_geo_ = fetcher_geo;
  if (fetcher_geo) {
    set_has_fetcher_geo();
  } else {
    clear_has_fetcher_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.fetcher_geo)
}

// optional .cosmo.pb.DocumentData.MediametricsFea hourly_fast_mediametrics_fea = 32;
bool DocumentData::has_hourly_fast_mediametrics_fea() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DocumentData::set_has_hourly_fast_mediametrics_fea() {
  _has_bits_[0] |= 0x00800000u;
}
void DocumentData::clear_has_hourly_fast_mediametrics_fea() {
  _has_bits_[0] &= ~0x00800000u;
}
void DocumentData::clear_hourly_fast_mediametrics_fea() {
  if (hourly_fast_mediametrics_fea_ != NULL) hourly_fast_mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
  clear_has_hourly_fast_mediametrics_fea();
}
const ::cosmo::pb::DocumentData_MediametricsFea& DocumentData::hourly_fast_mediametrics_fea() const {
  const ::cosmo::pb::DocumentData_MediametricsFea* p = hourly_fast_mediametrics_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.hourly_fast_mediametrics_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_MediametricsFea*>(
      &::cosmo::pb::_DocumentData_MediametricsFea_default_instance_);
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::mutable_hourly_fast_mediametrics_fea() {
  set_has_hourly_fast_mediametrics_fea();
  if (hourly_fast_mediametrics_fea_ == NULL) {
    _slow_mutable_hourly_fast_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.hourly_fast_mediametrics_fea)
  return hourly_fast_mediametrics_fea_;
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::release_hourly_fast_mediametrics_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.hourly_fast_mediametrics_fea)
  clear_has_hourly_fast_mediametrics_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_hourly_fast_mediametrics_fea();
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = hourly_fast_mediametrics_fea_;
    hourly_fast_mediametrics_fea_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_hourly_fast_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* hourly_fast_mediametrics_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hourly_fast_mediametrics_fea_;
  }
  if (hourly_fast_mediametrics_fea != NULL) {
    _slow_set_allocated_hourly_fast_mediametrics_fea(message_arena, &hourly_fast_mediametrics_fea);
  }
  hourly_fast_mediametrics_fea_ = hourly_fast_mediametrics_fea;
  if (hourly_fast_mediametrics_fea) {
    set_has_hourly_fast_mediametrics_fea();
  } else {
    clear_has_hourly_fast_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.hourly_fast_mediametrics_fea)
}

// optional .cosmo.pb.DocumentData.MediametricsFea daily_fast_mediametrics_fea = 33;
bool DocumentData::has_daily_fast_mediametrics_fea() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void DocumentData::set_has_daily_fast_mediametrics_fea() {
  _has_bits_[0] |= 0x01000000u;
}
void DocumentData::clear_has_daily_fast_mediametrics_fea() {
  _has_bits_[0] &= ~0x01000000u;
}
void DocumentData::clear_daily_fast_mediametrics_fea() {
  if (daily_fast_mediametrics_fea_ != NULL) daily_fast_mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
  clear_has_daily_fast_mediametrics_fea();
}
const ::cosmo::pb::DocumentData_MediametricsFea& DocumentData::daily_fast_mediametrics_fea() const {
  const ::cosmo::pb::DocumentData_MediametricsFea* p = daily_fast_mediametrics_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.daily_fast_mediametrics_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_MediametricsFea*>(
      &::cosmo::pb::_DocumentData_MediametricsFea_default_instance_);
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::mutable_daily_fast_mediametrics_fea() {
  set_has_daily_fast_mediametrics_fea();
  if (daily_fast_mediametrics_fea_ == NULL) {
    _slow_mutable_daily_fast_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.daily_fast_mediametrics_fea)
  return daily_fast_mediametrics_fea_;
}
::cosmo::pb::DocumentData_MediametricsFea* DocumentData::release_daily_fast_mediametrics_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.daily_fast_mediametrics_fea)
  clear_has_daily_fast_mediametrics_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_daily_fast_mediametrics_fea();
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = daily_fast_mediametrics_fea_;
    daily_fast_mediametrics_fea_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_daily_fast_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* daily_fast_mediametrics_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete daily_fast_mediametrics_fea_;
  }
  if (daily_fast_mediametrics_fea != NULL) {
    _slow_set_allocated_daily_fast_mediametrics_fea(message_arena, &daily_fast_mediametrics_fea);
  }
  daily_fast_mediametrics_fea_ = daily_fast_mediametrics_fea;
  if (daily_fast_mediametrics_fea) {
    set_has_daily_fast_mediametrics_fea();
  } else {
    clear_has_daily_fast_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.daily_fast_mediametrics_fea)
}

// optional .cosmo.pb.DocumentData.FetcherImage fetcher_image = 34;
bool DocumentData::has_fetcher_image() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void DocumentData::set_has_fetcher_image() {
  _has_bits_[0] |= 0x02000000u;
}
void DocumentData::clear_has_fetcher_image() {
  _has_bits_[0] &= ~0x02000000u;
}
void DocumentData::clear_fetcher_image() {
  if (fetcher_image_ != NULL) fetcher_image_->::cosmo::pb::DocumentData_FetcherImage::Clear();
  clear_has_fetcher_image();
}
const ::cosmo::pb::DocumentData_FetcherImage& DocumentData::fetcher_image() const {
  const ::cosmo::pb::DocumentData_FetcherImage* p = fetcher_image_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.fetcher_image)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_FetcherImage*>(
      &::cosmo::pb::_DocumentData_FetcherImage_default_instance_);
}
::cosmo::pb::DocumentData_FetcherImage* DocumentData::mutable_fetcher_image() {
  set_has_fetcher_image();
  if (fetcher_image_ == NULL) {
    _slow_mutable_fetcher_image();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.fetcher_image)
  return fetcher_image_;
}
::cosmo::pb::DocumentData_FetcherImage* DocumentData::release_fetcher_image() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.fetcher_image)
  clear_has_fetcher_image();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fetcher_image();
  } else {
    ::cosmo::pb::DocumentData_FetcherImage* temp = fetcher_image_;
    fetcher_image_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_fetcher_image(::cosmo::pb::DocumentData_FetcherImage* fetcher_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fetcher_image_;
  }
  if (fetcher_image != NULL) {
    _slow_set_allocated_fetcher_image(message_arena, &fetcher_image);
  }
  fetcher_image_ = fetcher_image;
  if (fetcher_image) {
    set_has_fetcher_image();
  } else {
    clear_has_fetcher_image();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.fetcher_image)
}

// optional .cosmo.pb.DocumentData.ContentData content_data = 35;
bool DocumentData::has_content_data() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void DocumentData::set_has_content_data() {
  _has_bits_[0] |= 0x04000000u;
}
void DocumentData::clear_has_content_data() {
  _has_bits_[0] &= ~0x04000000u;
}
void DocumentData::clear_content_data() {
  if (content_data_ != NULL) content_data_->::cosmo::pb::DocumentData_ContentData::Clear();
  clear_has_content_data();
}
const ::cosmo::pb::DocumentData_ContentData& DocumentData::content_data() const {
  const ::cosmo::pb::DocumentData_ContentData* p = content_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.content_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_ContentData*>(
      &::cosmo::pb::_DocumentData_ContentData_default_instance_);
}
::cosmo::pb::DocumentData_ContentData* DocumentData::mutable_content_data() {
  set_has_content_data();
  if (content_data_ == NULL) {
    _slow_mutable_content_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.content_data)
  return content_data_;
}
::cosmo::pb::DocumentData_ContentData* DocumentData::release_content_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.content_data)
  clear_has_content_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_content_data();
  } else {
    ::cosmo::pb::DocumentData_ContentData* temp = content_data_;
    content_data_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_content_data(::cosmo::pb::DocumentData_ContentData* content_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_data_;
  }
  if (content_data != NULL) {
    _slow_set_allocated_content_data(message_arena, &content_data);
  }
  content_data_ = content_data;
  if (content_data) {
    set_has_content_data();
  } else {
    clear_has_content_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.content_data)
}

// optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day_v2 = 36;
bool DocumentData::has_vk_topic_event_stat_day_v2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void DocumentData::set_has_vk_topic_event_stat_day_v2() {
  _has_bits_[0] |= 0x08000000u;
}
void DocumentData::clear_has_vk_topic_event_stat_day_v2() {
  _has_bits_[0] &= ~0x08000000u;
}
void DocumentData::clear_vk_topic_event_stat_day_v2() {
  if (vk_topic_event_stat_day_v2_ != NULL) vk_topic_event_stat_day_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_vk_topic_event_stat_day_v2();
}
const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::vk_topic_event_stat_day_v2() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = vk_topic_event_stat_day_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.vk_topic_event_stat_day_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_vk_topic_event_stat_day_v2() {
  set_has_vk_topic_event_stat_day_v2();
  if (vk_topic_event_stat_day_v2_ == NULL) {
    _slow_mutable_vk_topic_event_stat_day_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.vk_topic_event_stat_day_v2)
  return vk_topic_event_stat_day_v2_;
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_vk_topic_event_stat_day_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.vk_topic_event_stat_day_v2)
  clear_has_vk_topic_event_stat_day_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_topic_event_stat_day_v2();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_day_v2_;
    vk_topic_event_stat_day_v2_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_vk_topic_event_stat_day_v2(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_topic_event_stat_day_v2_;
  }
  if (vk_topic_event_stat_day_v2 != NULL) {
    _slow_set_allocated_vk_topic_event_stat_day_v2(message_arena, &vk_topic_event_stat_day_v2);
  }
  vk_topic_event_stat_day_v2_ = vk_topic_event_stat_day_v2;
  if (vk_topic_event_stat_day_v2) {
    set_has_vk_topic_event_stat_day_v2();
  } else {
    clear_has_vk_topic_event_stat_day_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_day_v2)
}

// optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week_v2 = 37;
bool DocumentData::has_vk_topic_event_stat_week_v2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void DocumentData::set_has_vk_topic_event_stat_week_v2() {
  _has_bits_[0] |= 0x10000000u;
}
void DocumentData::clear_has_vk_topic_event_stat_week_v2() {
  _has_bits_[0] &= ~0x10000000u;
}
void DocumentData::clear_vk_topic_event_stat_week_v2() {
  if (vk_topic_event_stat_week_v2_ != NULL) vk_topic_event_stat_week_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_vk_topic_event_stat_week_v2();
}
const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::vk_topic_event_stat_week_v2() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = vk_topic_event_stat_week_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.vk_topic_event_stat_week_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_vk_topic_event_stat_week_v2() {
  set_has_vk_topic_event_stat_week_v2();
  if (vk_topic_event_stat_week_v2_ == NULL) {
    _slow_mutable_vk_topic_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.vk_topic_event_stat_week_v2)
  return vk_topic_event_stat_week_v2_;
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_vk_topic_event_stat_week_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.vk_topic_event_stat_week_v2)
  clear_has_vk_topic_event_stat_week_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_topic_event_stat_week_v2();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_week_v2_;
    vk_topic_event_stat_week_v2_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_vk_topic_event_stat_week_v2(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_topic_event_stat_week_v2_;
  }
  if (vk_topic_event_stat_week_v2 != NULL) {
    _slow_set_allocated_vk_topic_event_stat_week_v2(message_arena, &vk_topic_event_stat_week_v2);
  }
  vk_topic_event_stat_week_v2_ = vk_topic_event_stat_week_v2;
  if (vk_topic_event_stat_week_v2) {
    set_has_vk_topic_event_stat_week_v2();
  } else {
    clear_has_vk_topic_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_week_v2)
}

// optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day_v2 = 38;
bool DocumentData::has_youtube_topic_event_stat_day_v2() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void DocumentData::set_has_youtube_topic_event_stat_day_v2() {
  _has_bits_[0] |= 0x20000000u;
}
void DocumentData::clear_has_youtube_topic_event_stat_day_v2() {
  _has_bits_[0] &= ~0x20000000u;
}
void DocumentData::clear_youtube_topic_event_stat_day_v2() {
  if (youtube_topic_event_stat_day_v2_ != NULL) youtube_topic_event_stat_day_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_youtube_topic_event_stat_day_v2();
}
const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::youtube_topic_event_stat_day_v2() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = youtube_topic_event_stat_day_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.youtube_topic_event_stat_day_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_youtube_topic_event_stat_day_v2() {
  set_has_youtube_topic_event_stat_day_v2();
  if (youtube_topic_event_stat_day_v2_ == NULL) {
    _slow_mutable_youtube_topic_event_stat_day_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.youtube_topic_event_stat_day_v2)
  return youtube_topic_event_stat_day_v2_;
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_youtube_topic_event_stat_day_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.youtube_topic_event_stat_day_v2)
  clear_has_youtube_topic_event_stat_day_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_topic_event_stat_day_v2();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_day_v2_;
    youtube_topic_event_stat_day_v2_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_youtube_topic_event_stat_day_v2(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_topic_event_stat_day_v2_;
  }
  if (youtube_topic_event_stat_day_v2 != NULL) {
    _slow_set_allocated_youtube_topic_event_stat_day_v2(message_arena, &youtube_topic_event_stat_day_v2);
  }
  youtube_topic_event_stat_day_v2_ = youtube_topic_event_stat_day_v2;
  if (youtube_topic_event_stat_day_v2) {
    set_has_youtube_topic_event_stat_day_v2();
  } else {
    clear_has_youtube_topic_event_stat_day_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_day_v2)
}

// optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week_v2 = 39;
bool DocumentData::has_youtube_topic_event_stat_week_v2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void DocumentData::set_has_youtube_topic_event_stat_week_v2() {
  _has_bits_[0] |= 0x40000000u;
}
void DocumentData::clear_has_youtube_topic_event_stat_week_v2() {
  _has_bits_[0] &= ~0x40000000u;
}
void DocumentData::clear_youtube_topic_event_stat_week_v2() {
  if (youtube_topic_event_stat_week_v2_ != NULL) youtube_topic_event_stat_week_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_youtube_topic_event_stat_week_v2();
}
const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::youtube_topic_event_stat_week_v2() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = youtube_topic_event_stat_week_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.youtube_topic_event_stat_week_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_youtube_topic_event_stat_week_v2() {
  set_has_youtube_topic_event_stat_week_v2();
  if (youtube_topic_event_stat_week_v2_ == NULL) {
    _slow_mutable_youtube_topic_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.youtube_topic_event_stat_week_v2)
  return youtube_topic_event_stat_week_v2_;
}
::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_youtube_topic_event_stat_week_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.youtube_topic_event_stat_week_v2)
  clear_has_youtube_topic_event_stat_week_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_topic_event_stat_week_v2();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_week_v2_;
    youtube_topic_event_stat_week_v2_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_youtube_topic_event_stat_week_v2(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_topic_event_stat_week_v2_;
  }
  if (youtube_topic_event_stat_week_v2 != NULL) {
    _slow_set_allocated_youtube_topic_event_stat_week_v2(message_arena, &youtube_topic_event_stat_week_v2);
  }
  youtube_topic_event_stat_week_v2_ = youtube_topic_event_stat_week_v2;
  if (youtube_topic_event_stat_week_v2) {
    set_has_youtube_topic_event_stat_week_v2();
  } else {
    clear_has_youtube_topic_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_week_v2)
}

// optional .cosmo.pb.DocumentData.DocumentMutualStat document_i2i_stat = 40;
bool DocumentData::has_document_i2i_stat() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void DocumentData::set_has_document_i2i_stat() {
  _has_bits_[0] |= 0x80000000u;
}
void DocumentData::clear_has_document_i2i_stat() {
  _has_bits_[0] &= ~0x80000000u;
}
void DocumentData::clear_document_i2i_stat() {
  if (document_i2i_stat_ != NULL) document_i2i_stat_->::cosmo::pb::DocumentData_DocumentMutualStat::Clear();
  clear_has_document_i2i_stat();
}
const ::cosmo::pb::DocumentData_DocumentMutualStat& DocumentData::document_i2i_stat() const {
  const ::cosmo::pb::DocumentData_DocumentMutualStat* p = document_i2i_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.document_i2i_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentMutualStat*>(
      &::cosmo::pb::_DocumentData_DocumentMutualStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::mutable_document_i2i_stat() {
  set_has_document_i2i_stat();
  if (document_i2i_stat_ == NULL) {
    _slow_mutable_document_i2i_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.document_i2i_stat)
  return document_i2i_stat_;
}
::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::release_document_i2i_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.document_i2i_stat)
  clear_has_document_i2i_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_document_i2i_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentMutualStat* temp = document_i2i_stat_;
    document_i2i_stat_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_document_i2i_stat(::cosmo::pb::DocumentData_DocumentMutualStat* document_i2i_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete document_i2i_stat_;
  }
  if (document_i2i_stat != NULL) {
    _slow_set_allocated_document_i2i_stat(message_arena, &document_i2i_stat);
  }
  document_i2i_stat_ = document_i2i_stat;
  if (document_i2i_stat) {
    set_has_document_i2i_stat();
  } else {
    clear_has_document_i2i_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.document_i2i_stat)
}

// optional .cosmo.pb.DocumentData.DocumentMutualStat document_mv_stat = 42;
bool DocumentData::has_document_mv_stat() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void DocumentData::set_has_document_mv_stat() {
  _has_bits_[1] |= 0x00000001u;
}
void DocumentData::clear_has_document_mv_stat() {
  _has_bits_[1] &= ~0x00000001u;
}
void DocumentData::clear_document_mv_stat() {
  if (document_mv_stat_ != NULL) document_mv_stat_->::cosmo::pb::DocumentData_DocumentMutualStat::Clear();
  clear_has_document_mv_stat();
}
const ::cosmo::pb::DocumentData_DocumentMutualStat& DocumentData::document_mv_stat() const {
  const ::cosmo::pb::DocumentData_DocumentMutualStat* p = document_mv_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.document_mv_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentMutualStat*>(
      &::cosmo::pb::_DocumentData_DocumentMutualStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::mutable_document_mv_stat() {
  set_has_document_mv_stat();
  if (document_mv_stat_ == NULL) {
    _slow_mutable_document_mv_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.document_mv_stat)
  return document_mv_stat_;
}
::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::release_document_mv_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.document_mv_stat)
  clear_has_document_mv_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_document_mv_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentMutualStat* temp = document_mv_stat_;
    document_mv_stat_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_document_mv_stat(::cosmo::pb::DocumentData_DocumentMutualStat* document_mv_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete document_mv_stat_;
  }
  if (document_mv_stat != NULL) {
    _slow_set_allocated_document_mv_stat(message_arena, &document_mv_stat);
  }
  document_mv_stat_ = document_mv_stat;
  if (document_mv_stat) {
    set_has_document_mv_stat();
  } else {
    clear_has_document_mv_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.document_mv_stat)
}

// optional .cosmo.pb.DocumentData.NewsTagsData news_tags_data = 43;
bool DocumentData::has_news_tags_data() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void DocumentData::set_has_news_tags_data() {
  _has_bits_[1] |= 0x00000002u;
}
void DocumentData::clear_has_news_tags_data() {
  _has_bits_[1] &= ~0x00000002u;
}
void DocumentData::clear_news_tags_data() {
  if (news_tags_data_ != NULL) news_tags_data_->::cosmo::pb::DocumentData_NewsTagsData::Clear();
  clear_has_news_tags_data();
}
const ::cosmo::pb::DocumentData_NewsTagsData& DocumentData::news_tags_data() const {
  const ::cosmo::pb::DocumentData_NewsTagsData* p = news_tags_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.news_tags_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_NewsTagsData*>(
      &::cosmo::pb::_DocumentData_NewsTagsData_default_instance_);
}
::cosmo::pb::DocumentData_NewsTagsData* DocumentData::mutable_news_tags_data() {
  set_has_news_tags_data();
  if (news_tags_data_ == NULL) {
    _slow_mutable_news_tags_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.news_tags_data)
  return news_tags_data_;
}
::cosmo::pb::DocumentData_NewsTagsData* DocumentData::release_news_tags_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.news_tags_data)
  clear_has_news_tags_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_news_tags_data();
  } else {
    ::cosmo::pb::DocumentData_NewsTagsData* temp = news_tags_data_;
    news_tags_data_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_news_tags_data(::cosmo::pb::DocumentData_NewsTagsData* news_tags_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete news_tags_data_;
  }
  if (news_tags_data != NULL) {
    _slow_set_allocated_news_tags_data(message_arena, &news_tags_data);
  }
  news_tags_data_ = news_tags_data;
  if (news_tags_data) {
    set_has_news_tags_data();
  } else {
    clear_has_news_tags_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.news_tags_data)
}

// optional .cosmo.pb.DocumentData.NewsStoryData news_story_data = 44;
bool DocumentData::has_news_story_data() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void DocumentData::set_has_news_story_data() {
  _has_bits_[1] |= 0x00000004u;
}
void DocumentData::clear_has_news_story_data() {
  _has_bits_[1] &= ~0x00000004u;
}
void DocumentData::clear_news_story_data() {
  if (news_story_data_ != NULL) news_story_data_->::cosmo::pb::DocumentData_NewsStoryData::Clear();
  clear_has_news_story_data();
}
const ::cosmo::pb::DocumentData_NewsStoryData& DocumentData::news_story_data() const {
  const ::cosmo::pb::DocumentData_NewsStoryData* p = news_story_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.news_story_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_NewsStoryData*>(
      &::cosmo::pb::_DocumentData_NewsStoryData_default_instance_);
}
::cosmo::pb::DocumentData_NewsStoryData* DocumentData::mutable_news_story_data() {
  set_has_news_story_data();
  if (news_story_data_ == NULL) {
    _slow_mutable_news_story_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.news_story_data)
  return news_story_data_;
}
::cosmo::pb::DocumentData_NewsStoryData* DocumentData::release_news_story_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.news_story_data)
  clear_has_news_story_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_news_story_data();
  } else {
    ::cosmo::pb::DocumentData_NewsStoryData* temp = news_story_data_;
    news_story_data_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_news_story_data(::cosmo::pb::DocumentData_NewsStoryData* news_story_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete news_story_data_;
  }
  if (news_story_data != NULL) {
    _slow_set_allocated_news_story_data(message_arena, &news_story_data);
  }
  news_story_data_ = news_story_data;
  if (news_story_data) {
    set_has_news_story_data();
  } else {
    clear_has_news_story_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.news_story_data)
}

// optional .cosmo.pb.DocumentData.NativeTargetIsActive native_target_is_active = 45;
bool DocumentData::has_native_target_is_active() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void DocumentData::set_has_native_target_is_active() {
  _has_bits_[1] |= 0x00000008u;
}
void DocumentData::clear_has_native_target_is_active() {
  _has_bits_[1] &= ~0x00000008u;
}
void DocumentData::clear_native_target_is_active() {
  if (native_target_is_active_ != NULL) native_target_is_active_->::cosmo::pb::DocumentData_NativeTargetIsActive::Clear();
  clear_has_native_target_is_active();
}
const ::cosmo::pb::DocumentData_NativeTargetIsActive& DocumentData::native_target_is_active() const {
  const ::cosmo::pb::DocumentData_NativeTargetIsActive* p = native_target_is_active_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.native_target_is_active)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_NativeTargetIsActive*>(
      &::cosmo::pb::_DocumentData_NativeTargetIsActive_default_instance_);
}
::cosmo::pb::DocumentData_NativeTargetIsActive* DocumentData::mutable_native_target_is_active() {
  set_has_native_target_is_active();
  if (native_target_is_active_ == NULL) {
    _slow_mutable_native_target_is_active();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.native_target_is_active)
  return native_target_is_active_;
}
::cosmo::pb::DocumentData_NativeTargetIsActive* DocumentData::release_native_target_is_active() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.native_target_is_active)
  clear_has_native_target_is_active();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_native_target_is_active();
  } else {
    ::cosmo::pb::DocumentData_NativeTargetIsActive* temp = native_target_is_active_;
    native_target_is_active_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_native_target_is_active(::cosmo::pb::DocumentData_NativeTargetIsActive* native_target_is_active) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete native_target_is_active_;
  }
  if (native_target_is_active != NULL) {
    _slow_set_allocated_native_target_is_active(message_arena, &native_target_is_active);
  }
  native_target_is_active_ = native_target_is_active;
  if (native_target_is_active) {
    set_has_native_target_is_active();
  } else {
    clear_has_native_target_is_active();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.native_target_is_active)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat fast_location_stat = 46;
bool DocumentData::has_fast_location_stat() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void DocumentData::set_has_fast_location_stat() {
  _has_bits_[1] |= 0x00000010u;
}
void DocumentData::clear_has_fast_location_stat() {
  _has_bits_[1] &= ~0x00000010u;
}
void DocumentData::clear_fast_location_stat() {
  if (fast_location_stat_ != NULL) fast_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_fast_location_stat();
}
const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::fast_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = fast_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.fast_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_fast_location_stat() {
  set_has_fast_location_stat();
  if (fast_location_stat_ == NULL) {
    _slow_mutable_fast_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.fast_location_stat)
  return fast_location_stat_;
}
::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_fast_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.fast_location_stat)
  clear_has_fast_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fast_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = fast_location_stat_;
    fast_location_stat_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_fast_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* fast_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fast_location_stat_;
  }
  if (fast_location_stat != NULL) {
    _slow_set_allocated_fast_location_stat(message_arena, &fast_location_stat);
  }
  fast_location_stat_ = fast_location_stat;
  if (fast_location_stat) {
    set_has_fast_location_stat();
  } else {
    clear_has_fast_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.fast_location_stat)
}

// optional .cosmo.pb.DocumentData.ContentPornFea content_porn_fea = 48;
bool DocumentData::has_content_porn_fea() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void DocumentData::set_has_content_porn_fea() {
  _has_bits_[1] |= 0x00000020u;
}
void DocumentData::clear_has_content_porn_fea() {
  _has_bits_[1] &= ~0x00000020u;
}
void DocumentData::clear_content_porn_fea() {
  if (content_porn_fea_ != NULL) content_porn_fea_->::cosmo::pb::DocumentData_ContentPornFea::Clear();
  clear_has_content_porn_fea();
}
const ::cosmo::pb::DocumentData_ContentPornFea& DocumentData::content_porn_fea() const {
  const ::cosmo::pb::DocumentData_ContentPornFea* p = content_porn_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.content_porn_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_ContentPornFea*>(
      &::cosmo::pb::_DocumentData_ContentPornFea_default_instance_);
}
::cosmo::pb::DocumentData_ContentPornFea* DocumentData::mutable_content_porn_fea() {
  set_has_content_porn_fea();
  if (content_porn_fea_ == NULL) {
    _slow_mutable_content_porn_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.content_porn_fea)
  return content_porn_fea_;
}
::cosmo::pb::DocumentData_ContentPornFea* DocumentData::release_content_porn_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.content_porn_fea)
  clear_has_content_porn_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_content_porn_fea();
  } else {
    ::cosmo::pb::DocumentData_ContentPornFea* temp = content_porn_fea_;
    content_porn_fea_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_content_porn_fea(::cosmo::pb::DocumentData_ContentPornFea* content_porn_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_porn_fea_;
  }
  if (content_porn_fea != NULL) {
    _slow_set_allocated_content_porn_fea(message_arena, &content_porn_fea);
  }
  content_porn_fea_ = content_porn_fea;
  if (content_porn_fea) {
    set_has_content_porn_fea();
  } else {
    clear_has_content_porn_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.content_porn_fea)
}

// optional .cosmo.pb.DocumentData.ContentThemes content_themes = 49;
bool DocumentData::has_content_themes() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void DocumentData::set_has_content_themes() {
  _has_bits_[1] |= 0x00000040u;
}
void DocumentData::clear_has_content_themes() {
  _has_bits_[1] &= ~0x00000040u;
}
void DocumentData::clear_content_themes() {
  if (content_themes_ != NULL) content_themes_->::cosmo::pb::DocumentData_ContentThemes::Clear();
  clear_has_content_themes();
}
const ::cosmo::pb::DocumentData_ContentThemes& DocumentData::content_themes() const {
  const ::cosmo::pb::DocumentData_ContentThemes* p = content_themes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.content_themes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_ContentThemes*>(
      &::cosmo::pb::_DocumentData_ContentThemes_default_instance_);
}
::cosmo::pb::DocumentData_ContentThemes* DocumentData::mutable_content_themes() {
  set_has_content_themes();
  if (content_themes_ == NULL) {
    _slow_mutable_content_themes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.content_themes)
  return content_themes_;
}
::cosmo::pb::DocumentData_ContentThemes* DocumentData::release_content_themes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.content_themes)
  clear_has_content_themes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_content_themes();
  } else {
    ::cosmo::pb::DocumentData_ContentThemes* temp = content_themes_;
    content_themes_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_content_themes(::cosmo::pb::DocumentData_ContentThemes* content_themes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_themes_;
  }
  if (content_themes != NULL) {
    _slow_set_allocated_content_themes(message_arena, &content_themes);
  }
  content_themes_ = content_themes;
  if (content_themes) {
    set_has_content_themes();
  } else {
    clear_has_content_themes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.content_themes)
}

// optional .cosmo.pb.DocumentData.StoryClusterId story_cluster_id = 50;
bool DocumentData::has_story_cluster_id() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void DocumentData::set_has_story_cluster_id() {
  _has_bits_[1] |= 0x00000080u;
}
void DocumentData::clear_has_story_cluster_id() {
  _has_bits_[1] &= ~0x00000080u;
}
void DocumentData::clear_story_cluster_id() {
  if (story_cluster_id_ != NULL) story_cluster_id_->::cosmo::pb::DocumentData_StoryClusterId::Clear();
  clear_has_story_cluster_id();
}
const ::cosmo::pb::DocumentData_StoryClusterId& DocumentData::story_cluster_id() const {
  const ::cosmo::pb::DocumentData_StoryClusterId* p = story_cluster_id_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.story_cluster_id)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_StoryClusterId*>(
      &::cosmo::pb::_DocumentData_StoryClusterId_default_instance_);
}
::cosmo::pb::DocumentData_StoryClusterId* DocumentData::mutable_story_cluster_id() {
  set_has_story_cluster_id();
  if (story_cluster_id_ == NULL) {
    _slow_mutable_story_cluster_id();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.story_cluster_id)
  return story_cluster_id_;
}
::cosmo::pb::DocumentData_StoryClusterId* DocumentData::release_story_cluster_id() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.story_cluster_id)
  clear_has_story_cluster_id();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_story_cluster_id();
  } else {
    ::cosmo::pb::DocumentData_StoryClusterId* temp = story_cluster_id_;
    story_cluster_id_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_story_cluster_id(::cosmo::pb::DocumentData_StoryClusterId* story_cluster_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete story_cluster_id_;
  }
  if (story_cluster_id != NULL) {
    _slow_set_allocated_story_cluster_id(message_arena, &story_cluster_id);
  }
  story_cluster_id_ = story_cluster_id;
  if (story_cluster_id) {
    set_has_story_cluster_id();
  } else {
    clear_has_story_cluster_id();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.story_cluster_id)
}

// optional .cosmo.pb.DocumentData.DocumentKeywordsInfo document_keywords_info = 51;
bool DocumentData::has_document_keywords_info() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void DocumentData::set_has_document_keywords_info() {
  _has_bits_[1] |= 0x00000100u;
}
void DocumentData::clear_has_document_keywords_info() {
  _has_bits_[1] &= ~0x00000100u;
}
void DocumentData::clear_document_keywords_info() {
  if (document_keywords_info_ != NULL) document_keywords_info_->::cosmo::pb::DocumentData_DocumentKeywordsInfo::Clear();
  clear_has_document_keywords_info();
}
const ::cosmo::pb::DocumentData_DocumentKeywordsInfo& DocumentData::document_keywords_info() const {
  const ::cosmo::pb::DocumentData_DocumentKeywordsInfo* p = document_keywords_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.document_keywords_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentKeywordsInfo*>(
      &::cosmo::pb::_DocumentData_DocumentKeywordsInfo_default_instance_);
}
::cosmo::pb::DocumentData_DocumentKeywordsInfo* DocumentData::mutable_document_keywords_info() {
  set_has_document_keywords_info();
  if (document_keywords_info_ == NULL) {
    _slow_mutable_document_keywords_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.document_keywords_info)
  return document_keywords_info_;
}
::cosmo::pb::DocumentData_DocumentKeywordsInfo* DocumentData::release_document_keywords_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.document_keywords_info)
  clear_has_document_keywords_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_document_keywords_info();
  } else {
    ::cosmo::pb::DocumentData_DocumentKeywordsInfo* temp = document_keywords_info_;
    document_keywords_info_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_document_keywords_info(::cosmo::pb::DocumentData_DocumentKeywordsInfo* document_keywords_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete document_keywords_info_;
  }
  if (document_keywords_info != NULL) {
    _slow_set_allocated_document_keywords_info(message_arena, &document_keywords_info);
  }
  document_keywords_info_ = document_keywords_info;
  if (document_keywords_info) {
    set_has_document_keywords_info();
  } else {
    clear_has_document_keywords_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.document_keywords_info)
}

// optional .cosmo.pb.DocumentData.ImagePornFea image_porn_fea = 52;
bool DocumentData::has_image_porn_fea() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void DocumentData::set_has_image_porn_fea() {
  _has_bits_[1] |= 0x00000200u;
}
void DocumentData::clear_has_image_porn_fea() {
  _has_bits_[1] &= ~0x00000200u;
}
void DocumentData::clear_image_porn_fea() {
  if (image_porn_fea_ != NULL) image_porn_fea_->::cosmo::pb::DocumentData_ImagePornFea::Clear();
  clear_has_image_porn_fea();
}
const ::cosmo::pb::DocumentData_ImagePornFea& DocumentData::image_porn_fea() const {
  const ::cosmo::pb::DocumentData_ImagePornFea* p = image_porn_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.image_porn_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_ImagePornFea*>(
      &::cosmo::pb::_DocumentData_ImagePornFea_default_instance_);
}
::cosmo::pb::DocumentData_ImagePornFea* DocumentData::mutable_image_porn_fea() {
  set_has_image_porn_fea();
  if (image_porn_fea_ == NULL) {
    _slow_mutable_image_porn_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.image_porn_fea)
  return image_porn_fea_;
}
::cosmo::pb::DocumentData_ImagePornFea* DocumentData::release_image_porn_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.image_porn_fea)
  clear_has_image_porn_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_image_porn_fea();
  } else {
    ::cosmo::pb::DocumentData_ImagePornFea* temp = image_porn_fea_;
    image_porn_fea_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_image_porn_fea(::cosmo::pb::DocumentData_ImagePornFea* image_porn_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_porn_fea_;
  }
  if (image_porn_fea != NULL) {
    _slow_set_allocated_image_porn_fea(message_arena, &image_porn_fea);
  }
  image_porn_fea_ = image_porn_fea;
  if (image_porn_fea) {
    set_has_image_porn_fea();
  } else {
    clear_has_image_porn_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.image_porn_fea)
}

// optional .cosmo.pb.DocumentData.FetcherFirstmeet fetcherFirstmeet = 53;
bool DocumentData::has_fetcherfirstmeet() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void DocumentData::set_has_fetcherfirstmeet() {
  _has_bits_[1] |= 0x00000400u;
}
void DocumentData::clear_has_fetcherfirstmeet() {
  _has_bits_[1] &= ~0x00000400u;
}
void DocumentData::clear_fetcherfirstmeet() {
  if (fetcherfirstmeet_ != NULL) fetcherfirstmeet_->::cosmo::pb::DocumentData_FetcherFirstmeet::Clear();
  clear_has_fetcherfirstmeet();
}
const ::cosmo::pb::DocumentData_FetcherFirstmeet& DocumentData::fetcherfirstmeet() const {
  const ::cosmo::pb::DocumentData_FetcherFirstmeet* p = fetcherfirstmeet_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.fetcherFirstmeet)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_FetcherFirstmeet*>(
      &::cosmo::pb::_DocumentData_FetcherFirstmeet_default_instance_);
}
::cosmo::pb::DocumentData_FetcherFirstmeet* DocumentData::mutable_fetcherfirstmeet() {
  set_has_fetcherfirstmeet();
  if (fetcherfirstmeet_ == NULL) {
    _slow_mutable_fetcherfirstmeet();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.fetcherFirstmeet)
  return fetcherfirstmeet_;
}
::cosmo::pb::DocumentData_FetcherFirstmeet* DocumentData::release_fetcherfirstmeet() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.fetcherFirstmeet)
  clear_has_fetcherfirstmeet();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fetcherfirstmeet();
  } else {
    ::cosmo::pb::DocumentData_FetcherFirstmeet* temp = fetcherfirstmeet_;
    fetcherfirstmeet_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_fetcherfirstmeet(::cosmo::pb::DocumentData_FetcherFirstmeet* fetcherfirstmeet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fetcherfirstmeet_;
  }
  if (fetcherfirstmeet != NULL) {
    _slow_set_allocated_fetcherfirstmeet(message_arena, &fetcherfirstmeet);
  }
  fetcherfirstmeet_ = fetcherfirstmeet;
  if (fetcherfirstmeet) {
    set_has_fetcherfirstmeet();
  } else {
    clear_has_fetcherfirstmeet();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.fetcherFirstmeet)
}

// optional .cosmo.pb.DocumentData.FetcherPubdate pubdate = 54;
bool DocumentData::has_pubdate() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void DocumentData::set_has_pubdate() {
  _has_bits_[1] |= 0x00000800u;
}
void DocumentData::clear_has_pubdate() {
  _has_bits_[1] &= ~0x00000800u;
}
void DocumentData::clear_pubdate() {
  if (pubdate_ != NULL) pubdate_->::cosmo::pb::DocumentData_FetcherPubdate::Clear();
  clear_has_pubdate();
}
const ::cosmo::pb::DocumentData_FetcherPubdate& DocumentData::pubdate() const {
  const ::cosmo::pb::DocumentData_FetcherPubdate* p = pubdate_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.pubdate)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_FetcherPubdate*>(
      &::cosmo::pb::_DocumentData_FetcherPubdate_default_instance_);
}
::cosmo::pb::DocumentData_FetcherPubdate* DocumentData::mutable_pubdate() {
  set_has_pubdate();
  if (pubdate_ == NULL) {
    _slow_mutable_pubdate();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.pubdate)
  return pubdate_;
}
::cosmo::pb::DocumentData_FetcherPubdate* DocumentData::release_pubdate() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.pubdate)
  clear_has_pubdate();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pubdate();
  } else {
    ::cosmo::pb::DocumentData_FetcherPubdate* temp = pubdate_;
    pubdate_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_pubdate(::cosmo::pb::DocumentData_FetcherPubdate* pubdate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubdate_;
  }
  if (pubdate != NULL) {
    _slow_set_allocated_pubdate(message_arena, &pubdate);
  }
  pubdate_ = pubdate;
  if (pubdate) {
    set_has_pubdate();
  } else {
    clear_has_pubdate();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.pubdate)
}

// optional .cosmo.pb.DocumentData.FreshnessData freshness_data = 55;
bool DocumentData::has_freshness_data() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void DocumentData::set_has_freshness_data() {
  _has_bits_[1] |= 0x00001000u;
}
void DocumentData::clear_has_freshness_data() {
  _has_bits_[1] &= ~0x00001000u;
}
void DocumentData::clear_freshness_data() {
  if (freshness_data_ != NULL) freshness_data_->::cosmo::pb::DocumentData_FreshnessData::Clear();
  clear_has_freshness_data();
}
const ::cosmo::pb::DocumentData_FreshnessData& DocumentData::freshness_data() const {
  const ::cosmo::pb::DocumentData_FreshnessData* p = freshness_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.freshness_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_FreshnessData*>(
      &::cosmo::pb::_DocumentData_FreshnessData_default_instance_);
}
::cosmo::pb::DocumentData_FreshnessData* DocumentData::mutable_freshness_data() {
  set_has_freshness_data();
  if (freshness_data_ == NULL) {
    _slow_mutable_freshness_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.freshness_data)
  return freshness_data_;
}
::cosmo::pb::DocumentData_FreshnessData* DocumentData::release_freshness_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.freshness_data)
  clear_has_freshness_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_freshness_data();
  } else {
    ::cosmo::pb::DocumentData_FreshnessData* temp = freshness_data_;
    freshness_data_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_freshness_data(::cosmo::pb::DocumentData_FreshnessData* freshness_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete freshness_data_;
  }
  if (freshness_data != NULL) {
    _slow_set_allocated_freshness_data(message_arena, &freshness_data);
  }
  freshness_data_ = freshness_data;
  if (freshness_data) {
    set_has_freshness_data();
  } else {
    clear_has_freshness_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.freshness_data)
}

// optional .cosmo.pb.DocumentData.DocState state = 56;
bool DocumentData::has_state() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void DocumentData::set_has_state() {
  _has_bits_[1] |= 0x00002000u;
}
void DocumentData::clear_has_state() {
  _has_bits_[1] &= ~0x00002000u;
}
void DocumentData::clear_state() {
  if (state_ != NULL) state_->::cosmo::pb::DocumentData_DocState::Clear();
  clear_has_state();
}
const ::cosmo::pb::DocumentData_DocState& DocumentData::state() const {
  const ::cosmo::pb::DocumentData_DocState* p = state_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.state)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocState*>(
      &::cosmo::pb::_DocumentData_DocState_default_instance_);
}
::cosmo::pb::DocumentData_DocState* DocumentData::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    _slow_mutable_state();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.state)
  return state_;
}
::cosmo::pb::DocumentData_DocState* DocumentData::release_state() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.state)
  clear_has_state();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_state();
  } else {
    ::cosmo::pb::DocumentData_DocState* temp = state_;
    state_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_state(::cosmo::pb::DocumentData_DocState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state != NULL) {
    _slow_set_allocated_state(message_arena, &state);
  }
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.state)
}

// optional .cosmo.pb.DocumentData.RisksFields risks_fields = 57;
bool DocumentData::has_risks_fields() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void DocumentData::set_has_risks_fields() {
  _has_bits_[1] |= 0x00004000u;
}
void DocumentData::clear_has_risks_fields() {
  _has_bits_[1] &= ~0x00004000u;
}
void DocumentData::clear_risks_fields() {
  if (risks_fields_ != NULL) risks_fields_->::cosmo::pb::DocumentData_RisksFields::Clear();
  clear_has_risks_fields();
}
const ::cosmo::pb::DocumentData_RisksFields& DocumentData::risks_fields() const {
  const ::cosmo::pb::DocumentData_RisksFields* p = risks_fields_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.risks_fields)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_RisksFields*>(
      &::cosmo::pb::_DocumentData_RisksFields_default_instance_);
}
::cosmo::pb::DocumentData_RisksFields* DocumentData::mutable_risks_fields() {
  set_has_risks_fields();
  if (risks_fields_ == NULL) {
    _slow_mutable_risks_fields();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.risks_fields)
  return risks_fields_;
}
::cosmo::pb::DocumentData_RisksFields* DocumentData::release_risks_fields() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.risks_fields)
  clear_has_risks_fields();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_risks_fields();
  } else {
    ::cosmo::pb::DocumentData_RisksFields* temp = risks_fields_;
    risks_fields_ = NULL;
    return temp;
  }
}
 void DocumentData::set_allocated_risks_fields(::cosmo::pb::DocumentData_RisksFields* risks_fields) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete risks_fields_;
  }
  if (risks_fields != NULL) {
    _slow_set_allocated_risks_fields(message_arena, &risks_fields);
  }
  risks_fields_ = risks_fields;
  if (risks_fields) {
    set_has_risks_fields();
  } else {
    clear_has_risks_fields();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.risks_fields)
}

// repeated int32 doc_region_ids = 58;
int DocumentData::doc_region_ids_size() const {
  return doc_region_ids_.size();
}
void DocumentData::clear_doc_region_ids() {
  doc_region_ids_.Clear();
}
::google::protobuf::int32 DocumentData::doc_region_ids(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.doc_region_ids)
  return doc_region_ids_.Get(index);
}
void DocumentData::set_doc_region_ids(int index, ::google::protobuf::int32 value) {
  doc_region_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.doc_region_ids)
}
void DocumentData::add_doc_region_ids(::google::protobuf::int32 value) {
  doc_region_ids_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.doc_region_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocumentData::doc_region_ids() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.doc_region_ids)
  return doc_region_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocumentData::mutable_doc_region_ids() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.doc_region_ids)
  return &doc_region_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentSourceLink::kSourceIdFieldNumber;
const int DocumentSourceLink::kDocIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentSourceLink::DocumentSourceLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.DocumentSourceLink)
}
DocumentSourceLink::DocumentSourceLink(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.DocumentSourceLink)
}
DocumentSourceLink::DocumentSourceLink(const DocumentSourceLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&doc_id_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(doc_id_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.DocumentSourceLink)
}

void DocumentSourceLink::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&doc_id_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(doc_id_));
}

DocumentSourceLink::~DocumentSourceLink() {
  // @@protoc_insertion_point(destructor:cosmo.pb.DocumentSourceLink)
  SharedDtor();
}

void DocumentSourceLink::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void DocumentSourceLink::ArenaDtor(void* object) {
  DocumentSourceLink* _this = reinterpret_cast< DocumentSourceLink* >(object);
  (void)_this;
}
void DocumentSourceLink::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DocumentSourceLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentSourceLink::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentSourceLink& DocumentSourceLink::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentSourceLink* DocumentSourceLink::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DocumentSourceLink>(arena);
}

void DocumentSourceLink::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.DocumentSourceLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&doc_id_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(doc_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DocumentSourceLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.DocumentSourceLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 doc_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.DocumentSourceLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.DocumentSourceLink)
  return false;
#undef DO_
}

void DocumentSourceLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.DocumentSourceLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // required int64 doc_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->doc_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.DocumentSourceLink)
}

::google::protobuf::uint8* DocumentSourceLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.DocumentSourceLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // required int64 doc_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->doc_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.DocumentSourceLink)
  return target;
}

size_t DocumentSourceLink::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.DocumentSourceLink)
  size_t total_size = 0;

  if (has_source_id()) {
    // required int64 source_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());
  }

  if (has_doc_id()) {
    // required int64 doc_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }

  return total_size;
}
size_t DocumentSourceLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.DocumentSourceLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 source_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_id());

    // required int64 doc_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentSourceLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.DocumentSourceLink)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentSourceLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentSourceLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.DocumentSourceLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.DocumentSourceLink)
    MergeFrom(*source);
  }
}

void DocumentSourceLink::MergeFrom(const DocumentSourceLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.DocumentSourceLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      doc_id_ = from.doc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DocumentSourceLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.DocumentSourceLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentSourceLink::CopyFrom(const DocumentSourceLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.DocumentSourceLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentSourceLink::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DocumentSourceLink::Swap(DocumentSourceLink* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DocumentSourceLink* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DocumentSourceLink::UnsafeArenaSwap(DocumentSourceLink* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DocumentSourceLink::InternalSwap(DocumentSourceLink* other) {
  using std::swap;
  swap(source_id_, other->source_id_);
  swap(doc_id_, other->doc_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentSourceLink::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentSourceLink

// required int64 source_id = 1;
bool DocumentSourceLink::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DocumentSourceLink::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DocumentSourceLink::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DocumentSourceLink::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 DocumentSourceLink::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentSourceLink.source_id)
  return source_id_;
}
void DocumentSourceLink::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentSourceLink.source_id)
}

// required int64 doc_id = 2;
bool DocumentSourceLink::has_doc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DocumentSourceLink::set_has_doc_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DocumentSourceLink::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DocumentSourceLink::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 DocumentSourceLink::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentSourceLink.doc_id)
  return doc_id_;
}
void DocumentSourceLink::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentSourceLink.doc_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StorageEvent_Data::_slow_mutable_user_data() {
  user_data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData >(
      GetArenaNoVirtual());
}
::cosmo::pb::UserData* StorageEvent_Data::_slow_release_user_data() {
  if (user_data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::UserData* temp = new ::cosmo::pb::UserData(*user_data_);
    user_data_ = NULL;
    return temp;
  }
}
::cosmo::pb::UserData* StorageEvent_Data::unsafe_arena_release_user_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.StorageEvent.Data.user_data)
  clear_has_user_data();
  ::cosmo::pb::UserData* temp = user_data_;
  user_data_ = NULL;
  return temp;
}
void StorageEvent_Data::_slow_set_allocated_user_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData** user_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*user_data) == NULL) {
      message_arena->Own(*user_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*user_data)) {
      ::cosmo::pb::UserData* new_user_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::UserData >(
            message_arena);
      new_user_data->CopyFrom(**user_data);
      *user_data = new_user_data;
    }
}
void StorageEvent_Data::unsafe_arena_set_allocated_user_data(
    ::cosmo::pb::UserData* user_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete user_data_;
  }
  user_data_ = user_data;
  if (user_data) {
    set_has_user_data();
  } else {
    clear_has_user_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.StorageEvent.Data.user_data)
}
void StorageEvent_Data::_slow_mutable_source_data() {
  source_data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData >(
      GetArenaNoVirtual());
}
::cosmo::pb::SourceData* StorageEvent_Data::_slow_release_source_data() {
  if (source_data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::SourceData* temp = new ::cosmo::pb::SourceData(*source_data_);
    source_data_ = NULL;
    return temp;
  }
}
::cosmo::pb::SourceData* StorageEvent_Data::unsafe_arena_release_source_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.StorageEvent.Data.source_data)
  clear_has_source_data();
  ::cosmo::pb::SourceData* temp = source_data_;
  source_data_ = NULL;
  return temp;
}
void StorageEvent_Data::_slow_set_allocated_source_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData** source_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*source_data) == NULL) {
      message_arena->Own(*source_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*source_data)) {
      ::cosmo::pb::SourceData* new_source_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::SourceData >(
            message_arena);
      new_source_data->CopyFrom(**source_data);
      *source_data = new_source_data;
    }
}
void StorageEvent_Data::unsafe_arena_set_allocated_source_data(
    ::cosmo::pb::SourceData* source_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete source_data_;
  }
  source_data_ = source_data;
  if (source_data) {
    set_has_source_data();
  } else {
    clear_has_source_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.StorageEvent.Data.source_data)
}
void StorageEvent_Data::_slow_mutable_document_data() {
  document_data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentData* StorageEvent_Data::_slow_release_document_data() {
  if (document_data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentData* temp = new ::cosmo::pb::DocumentData(*document_data_);
    document_data_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentData* StorageEvent_Data::unsafe_arena_release_document_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.StorageEvent.Data.document_data)
  clear_has_document_data();
  ::cosmo::pb::DocumentData* temp = document_data_;
  document_data_ = NULL;
  return temp;
}
void StorageEvent_Data::_slow_set_allocated_document_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData** document_data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*document_data) == NULL) {
      message_arena->Own(*document_data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*document_data)) {
      ::cosmo::pb::DocumentData* new_document_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentData >(
            message_arena);
      new_document_data->CopyFrom(**document_data);
      *document_data = new_document_data;
    }
}
void StorageEvent_Data::unsafe_arena_set_allocated_document_data(
    ::cosmo::pb::DocumentData* document_data) {
  if (GetArenaNoVirtual() == NULL) {
    delete document_data_;
  }
  document_data_ = document_data;
  if (document_data) {
    set_has_document_data();
  } else {
    clear_has_document_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.StorageEvent.Data.document_data)
}
void StorageEvent_Data::_slow_mutable_document_source_link() {
  document_source_link_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentSourceLink >(
      GetArenaNoVirtual());
}
::cosmo::pb::DocumentSourceLink* StorageEvent_Data::_slow_release_document_source_link() {
  if (document_source_link_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::DocumentSourceLink* temp = new ::cosmo::pb::DocumentSourceLink(*document_source_link_);
    document_source_link_ = NULL;
    return temp;
  }
}
::cosmo::pb::DocumentSourceLink* StorageEvent_Data::unsafe_arena_release_document_source_link() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.StorageEvent.Data.document_source_link)
  clear_has_document_source_link();
  ::cosmo::pb::DocumentSourceLink* temp = document_source_link_;
  document_source_link_ = NULL;
  return temp;
}
void StorageEvent_Data::_slow_set_allocated_document_source_link(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentSourceLink** document_source_link) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*document_source_link) == NULL) {
      message_arena->Own(*document_source_link);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*document_source_link)) {
      ::cosmo::pb::DocumentSourceLink* new_document_source_link = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::DocumentSourceLink >(
            message_arena);
      new_document_source_link->CopyFrom(**document_source_link);
      *document_source_link = new_document_source_link;
    }
}
void StorageEvent_Data::unsafe_arena_set_allocated_document_source_link(
    ::cosmo::pb::DocumentSourceLink* document_source_link) {
  if (GetArenaNoVirtual() == NULL) {
    delete document_source_link_;
  }
  document_source_link_ = document_source_link;
  if (document_source_link) {
    set_has_document_source_link();
  } else {
    clear_has_document_source_link();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.StorageEvent.Data.document_source_link)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageEvent_Data::kUserDataFieldNumber;
const int StorageEvent_Data::kSourceDataFieldNumber;
const int StorageEvent_Data::kDocumentDataFieldNumber;
const int StorageEvent_Data::kDocumentSourceLinkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageEvent_Data::StorageEvent_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.StorageEvent.Data)
}
StorageEvent_Data::StorageEvent_Data(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.StorageEvent.Data)
}
StorageEvent_Data::StorageEvent_Data(const StorageEvent_Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_data()) {
    user_data_ = new ::cosmo::pb::UserData(*from.user_data_);
  } else {
    user_data_ = NULL;
  }
  if (from.has_source_data()) {
    source_data_ = new ::cosmo::pb::SourceData(*from.source_data_);
  } else {
    source_data_ = NULL;
  }
  if (from.has_document_data()) {
    document_data_ = new ::cosmo::pb::DocumentData(*from.document_data_);
  } else {
    document_data_ = NULL;
  }
  if (from.has_document_source_link()) {
    document_source_link_ = new ::cosmo::pb::DocumentSourceLink(*from.document_source_link_);
  } else {
    document_source_link_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.StorageEvent.Data)
}

void StorageEvent_Data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&user_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&document_source_link_) -
      reinterpret_cast<char*>(&user_data_)) + sizeof(document_source_link_));
}

StorageEvent_Data::~StorageEvent_Data() {
  // @@protoc_insertion_point(destructor:cosmo.pb.StorageEvent.Data)
  SharedDtor();
}

void StorageEvent_Data::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete user_data_;
  if (this != internal_default_instance()) delete source_data_;
  if (this != internal_default_instance()) delete document_data_;
  if (this != internal_default_instance()) delete document_source_link_;
}

void StorageEvent_Data::ArenaDtor(void* object) {
  StorageEvent_Data* _this = reinterpret_cast< StorageEvent_Data* >(object);
  (void)_this;
}
void StorageEvent_Data::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StorageEvent_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageEvent_Data::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageEvent_Data& StorageEvent_Data::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageEvent_Data* StorageEvent_Data::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StorageEvent_Data>(arena);
}

void StorageEvent_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.StorageEvent.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_data_ != NULL);
      user_data_->::cosmo::pb::UserData::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(source_data_ != NULL);
      source_data_->::cosmo::pb::SourceData::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(document_data_ != NULL);
      document_data_->::cosmo::pb::DocumentData::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(document_source_link_ != NULL);
      document_source_link_->::cosmo::pb::DocumentSourceLink::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StorageEvent_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.StorageEvent.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cosmo.pb.UserData user_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.SourceData source_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData document_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentSourceLink document_source_link = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_source_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.StorageEvent.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.StorageEvent.Data)
  return false;
#undef DO_
}

void StorageEvent_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.StorageEvent.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.UserData user_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_data_, output);
  }

  // optional .cosmo.pb.SourceData source_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->source_data_, output);
  }

  // optional .cosmo.pb.DocumentData document_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->document_data_, output);
  }

  // optional .cosmo.pb.DocumentSourceLink document_source_link = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->document_source_link_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.StorageEvent.Data)
}

::google::protobuf::uint8* StorageEvent_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.StorageEvent.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.UserData user_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_data_, deterministic, target);
  }

  // optional .cosmo.pb.SourceData source_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->source_data_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData document_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->document_data_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentSourceLink document_source_link = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->document_source_link_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.StorageEvent.Data)
  return target;
}

size_t StorageEvent_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.StorageEvent.Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .cosmo.pb.UserData user_data = 1;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_data_);
    }

    // optional .cosmo.pb.SourceData source_data = 2;
    if (has_source_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_data_);
    }

    // optional .cosmo.pb.DocumentData document_data = 3;
    if (has_document_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_data_);
    }

    // optional .cosmo.pb.DocumentSourceLink document_source_link = 4;
    if (has_document_source_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_source_link_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageEvent_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.StorageEvent.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageEvent_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageEvent_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.StorageEvent.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.StorageEvent.Data)
    MergeFrom(*source);
  }
}

void StorageEvent_Data::MergeFrom(const StorageEvent_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.StorageEvent.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user_data()->::cosmo::pb::UserData::MergeFrom(from.user_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_source_data()->::cosmo::pb::SourceData::MergeFrom(from.source_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_document_data()->::cosmo::pb::DocumentData::MergeFrom(from.document_data());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_document_source_link()->::cosmo::pb::DocumentSourceLink::MergeFrom(from.document_source_link());
    }
  }
}

void StorageEvent_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.StorageEvent.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageEvent_Data::CopyFrom(const StorageEvent_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.StorageEvent.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageEvent_Data::IsInitialized() const {
  if (has_user_data()) {
    if (!this->user_data_->IsInitialized()) return false;
  }
  if (has_source_data()) {
    if (!this->source_data_->IsInitialized()) return false;
  }
  if (has_document_data()) {
    if (!this->document_data_->IsInitialized()) return false;
  }
  if (has_document_source_link()) {
    if (!this->document_source_link_->IsInitialized()) return false;
  }
  return true;
}

void StorageEvent_Data::Swap(StorageEvent_Data* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StorageEvent_Data* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StorageEvent_Data::UnsafeArenaSwap(StorageEvent_Data* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StorageEvent_Data::InternalSwap(StorageEvent_Data* other) {
  using std::swap;
  swap(user_data_, other->user_data_);
  swap(source_data_, other->source_data_);
  swap(document_data_, other->document_data_);
  swap(document_source_link_, other->document_source_link_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageEvent_Data::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageEvent_Data

// optional .cosmo.pb.UserData user_data = 1;
bool StorageEvent_Data::has_user_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StorageEvent_Data::set_has_user_data() {
  _has_bits_[0] |= 0x00000001u;
}
void StorageEvent_Data::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void StorageEvent_Data::clear_user_data() {
  if (user_data_ != NULL) user_data_->::cosmo::pb::UserData::Clear();
  clear_has_user_data();
}
const ::cosmo::pb::UserData& StorageEvent_Data::user_data() const {
  const ::cosmo::pb::UserData* p = user_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.Data.user_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData*>(
      &::cosmo::pb::_UserData_default_instance_);
}
::cosmo::pb::UserData* StorageEvent_Data::mutable_user_data() {
  set_has_user_data();
  if (user_data_ == NULL) {
    _slow_mutable_user_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StorageEvent.Data.user_data)
  return user_data_;
}
::cosmo::pb::UserData* StorageEvent_Data::release_user_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StorageEvent.Data.user_data)
  clear_has_user_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_data();
  } else {
    ::cosmo::pb::UserData* temp = user_data_;
    user_data_ = NULL;
    return temp;
  }
}
 void StorageEvent_Data::set_allocated_user_data(::cosmo::pb::UserData* user_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_data_;
  }
  if (user_data != NULL) {
    _slow_set_allocated_user_data(message_arena, &user_data);
  }
  user_data_ = user_data;
  if (user_data) {
    set_has_user_data();
  } else {
    clear_has_user_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StorageEvent.Data.user_data)
}

// optional .cosmo.pb.SourceData source_data = 2;
bool StorageEvent_Data::has_source_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StorageEvent_Data::set_has_source_data() {
  _has_bits_[0] |= 0x00000002u;
}
void StorageEvent_Data::clear_has_source_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void StorageEvent_Data::clear_source_data() {
  if (source_data_ != NULL) source_data_->::cosmo::pb::SourceData::Clear();
  clear_has_source_data();
}
const ::cosmo::pb::SourceData& StorageEvent_Data::source_data() const {
  const ::cosmo::pb::SourceData* p = source_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.Data.source_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData*>(
      &::cosmo::pb::_SourceData_default_instance_);
}
::cosmo::pb::SourceData* StorageEvent_Data::mutable_source_data() {
  set_has_source_data();
  if (source_data_ == NULL) {
    _slow_mutable_source_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StorageEvent.Data.source_data)
  return source_data_;
}
::cosmo::pb::SourceData* StorageEvent_Data::release_source_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StorageEvent.Data.source_data)
  clear_has_source_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_data();
  } else {
    ::cosmo::pb::SourceData* temp = source_data_;
    source_data_ = NULL;
    return temp;
  }
}
 void StorageEvent_Data::set_allocated_source_data(::cosmo::pb::SourceData* source_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_data_;
  }
  if (source_data != NULL) {
    _slow_set_allocated_source_data(message_arena, &source_data);
  }
  source_data_ = source_data;
  if (source_data) {
    set_has_source_data();
  } else {
    clear_has_source_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StorageEvent.Data.source_data)
}

// optional .cosmo.pb.DocumentData document_data = 3;
bool StorageEvent_Data::has_document_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StorageEvent_Data::set_has_document_data() {
  _has_bits_[0] |= 0x00000004u;
}
void StorageEvent_Data::clear_has_document_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void StorageEvent_Data::clear_document_data() {
  if (document_data_ != NULL) document_data_->::cosmo::pb::DocumentData::Clear();
  clear_has_document_data();
}
const ::cosmo::pb::DocumentData& StorageEvent_Data::document_data() const {
  const ::cosmo::pb::DocumentData* p = document_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.Data.document_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData*>(
      &::cosmo::pb::_DocumentData_default_instance_);
}
::cosmo::pb::DocumentData* StorageEvent_Data::mutable_document_data() {
  set_has_document_data();
  if (document_data_ == NULL) {
    _slow_mutable_document_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StorageEvent.Data.document_data)
  return document_data_;
}
::cosmo::pb::DocumentData* StorageEvent_Data::release_document_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StorageEvent.Data.document_data)
  clear_has_document_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_document_data();
  } else {
    ::cosmo::pb::DocumentData* temp = document_data_;
    document_data_ = NULL;
    return temp;
  }
}
 void StorageEvent_Data::set_allocated_document_data(::cosmo::pb::DocumentData* document_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete document_data_;
  }
  if (document_data != NULL) {
    _slow_set_allocated_document_data(message_arena, &document_data);
  }
  document_data_ = document_data;
  if (document_data) {
    set_has_document_data();
  } else {
    clear_has_document_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StorageEvent.Data.document_data)
}

// optional .cosmo.pb.DocumentSourceLink document_source_link = 4;
bool StorageEvent_Data::has_document_source_link() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StorageEvent_Data::set_has_document_source_link() {
  _has_bits_[0] |= 0x00000008u;
}
void StorageEvent_Data::clear_has_document_source_link() {
  _has_bits_[0] &= ~0x00000008u;
}
void StorageEvent_Data::clear_document_source_link() {
  if (document_source_link_ != NULL) document_source_link_->::cosmo::pb::DocumentSourceLink::Clear();
  clear_has_document_source_link();
}
const ::cosmo::pb::DocumentSourceLink& StorageEvent_Data::document_source_link() const {
  const ::cosmo::pb::DocumentSourceLink* p = document_source_link_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.Data.document_source_link)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentSourceLink*>(
      &::cosmo::pb::_DocumentSourceLink_default_instance_);
}
::cosmo::pb::DocumentSourceLink* StorageEvent_Data::mutable_document_source_link() {
  set_has_document_source_link();
  if (document_source_link_ == NULL) {
    _slow_mutable_document_source_link();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StorageEvent.Data.document_source_link)
  return document_source_link_;
}
::cosmo::pb::DocumentSourceLink* StorageEvent_Data::release_document_source_link() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StorageEvent.Data.document_source_link)
  clear_has_document_source_link();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_document_source_link();
  } else {
    ::cosmo::pb::DocumentSourceLink* temp = document_source_link_;
    document_source_link_ = NULL;
    return temp;
  }
}
 void StorageEvent_Data::set_allocated_document_source_link(::cosmo::pb::DocumentSourceLink* document_source_link) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete document_source_link_;
  }
  if (document_source_link != NULL) {
    _slow_set_allocated_document_source_link(message_arena, &document_source_link);
  }
  document_source_link_ = document_source_link;
  if (document_source_link) {
    set_has_document_source_link();
  } else {
    clear_has_document_source_link();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StorageEvent.Data.document_source_link)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StorageEvent::_slow_mutable_data() {
  data_ = ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::StorageEvent_Data >(
      GetArenaNoVirtual());
}
::cosmo::pb::StorageEvent_Data* StorageEvent::_slow_release_data() {
  if (data_ == NULL) {
    return NULL;
  } else {
    ::cosmo::pb::StorageEvent_Data* temp = new ::cosmo::pb::StorageEvent_Data(*data_);
    data_ = NULL;
    return temp;
  }
}
::cosmo::pb::StorageEvent_Data* StorageEvent::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.StorageEvent.data)
  clear_has_data();
  ::cosmo::pb::StorageEvent_Data* temp = data_;
  data_ = NULL;
  return temp;
}
void StorageEvent::_slow_set_allocated_data(
    ::google::protobuf::Arena* message_arena, ::cosmo::pb::StorageEvent_Data** data) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*data) == NULL) {
      message_arena->Own(*data);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*data)) {
      ::cosmo::pb::StorageEvent_Data* new_data = 
            ::google::protobuf::Arena::CreateMessage< ::cosmo::pb::StorageEvent_Data >(
            message_arena);
      new_data->CopyFrom(**data);
      *data = new_data;
    }
}
void StorageEvent::unsafe_arena_set_allocated_data(
    ::cosmo::pb::StorageEvent_Data* data) {
  if (GetArenaNoVirtual() == NULL) {
    delete data_;
  }
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.StorageEvent.data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StorageEvent::kTypeFieldNumber;
const int StorageEvent::kEventTimeFieldNumber;
const int StorageEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StorageEvent::StorageEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.StorageEvent)
}
StorageEvent::StorageEvent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_cosmo_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmo.pb.StorageEvent)
}
StorageEvent::StorageEvent(const StorageEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::cosmo::pb::StorageEvent_Data(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(event_time_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.StorageEvent)
}

void StorageEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_time_) -
      reinterpret_cast<char*>(&data_)) + sizeof(event_time_));
}

StorageEvent::~StorageEvent() {
  // @@protoc_insertion_point(destructor:cosmo.pb.StorageEvent)
  SharedDtor();
}

void StorageEvent::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) delete data_;
}

void StorageEvent::ArenaDtor(void* object) {
  StorageEvent* _this = reinterpret_cast< StorageEvent* >(object);
  (void)_this;
}
void StorageEvent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StorageEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageEvent::descriptor() {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StorageEvent& StorageEvent::default_instance() {
  protobuf_cosmo_2eproto::InitDefaults();
  return *internal_default_instance();
}

StorageEvent* StorageEvent::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StorageEvent>(arena);
}

void StorageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.StorageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::cosmo::pb::StorageEvent_Data::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_time_) -
        reinterpret_cast<char*>(&type_)) + sizeof(event_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StorageEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.StorageEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cosmo.pb.StorageEvent.Type type = 1 [default = CREATE_OR_UPDATE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cosmo::pb::StorageEvent_Type_IsValid(value)) {
            set_type(static_cast< ::cosmo::pb::StorageEvent_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 event_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_event_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .cosmo.pb.StorageEvent.Data data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.StorageEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.StorageEvent)
  return false;
#undef DO_
}

void StorageEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.StorageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.StorageEvent.Type type = 1 [default = CREATE_OR_UPDATE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 event_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_time(), output);
  }

  // required .cosmo.pb.StorageEvent.Data data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.StorageEvent)
}

::google::protobuf::uint8* StorageEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.StorageEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.StorageEvent.Type type = 1 [default = CREATE_OR_UPDATE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 event_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_time(), target);
  }

  // required .cosmo.pb.StorageEvent.Data data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.StorageEvent)
  return target;
}

size_t StorageEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.StorageEvent)
  size_t total_size = 0;

  if (has_data()) {
    // required .cosmo.pb.StorageEvent.Data data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_event_time()) {
    // required int32 event_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_time());
  }

  return total_size;
}
size_t StorageEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.StorageEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .cosmo.pb.StorageEvent.Data data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required int32 event_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .cosmo.pb.StorageEvent.Type type = 1 [default = CREATE_OR_UPDATE];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.StorageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const StorageEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StorageEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.StorageEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.StorageEvent)
    MergeFrom(*source);
  }
}

void StorageEvent::MergeFrom(const StorageEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.StorageEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::cosmo::pb::StorageEvent_Data::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_time_ = from.event_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StorageEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.StorageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageEvent::CopyFrom(const StorageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.StorageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void StorageEvent::Swap(StorageEvent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StorageEvent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StorageEvent::UnsafeArenaSwap(StorageEvent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StorageEvent::InternalSwap(StorageEvent* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(type_, other->type_);
  swap(event_time_, other->event_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StorageEvent::GetMetadata() const {
  protobuf_cosmo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StorageEvent

// optional .cosmo.pb.StorageEvent.Type type = 1 [default = CREATE_OR_UPDATE];
bool StorageEvent::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StorageEvent::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void StorageEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void StorageEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
::cosmo::pb::StorageEvent_Type StorageEvent::type() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.type)
  return static_cast< ::cosmo::pb::StorageEvent_Type >(type_);
}
void StorageEvent::set_type(::cosmo::pb::StorageEvent_Type value) {
  assert(::cosmo::pb::StorageEvent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.StorageEvent.type)
}

// required int32 event_time = 2;
bool StorageEvent::has_event_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StorageEvent::set_has_event_time() {
  _has_bits_[0] |= 0x00000004u;
}
void StorageEvent::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void StorageEvent::clear_event_time() {
  event_time_ = 0;
  clear_has_event_time();
}
::google::protobuf::int32 StorageEvent::event_time() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.event_time)
  return event_time_;
}
void StorageEvent::set_event_time(::google::protobuf::int32 value) {
  set_has_event_time();
  event_time_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.StorageEvent.event_time)
}

// required .cosmo.pb.StorageEvent.Data data = 3;
bool StorageEvent::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StorageEvent::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void StorageEvent::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void StorageEvent::clear_data() {
  if (data_ != NULL) data_->::cosmo::pb::StorageEvent_Data::Clear();
  clear_has_data();
}
const ::cosmo::pb::StorageEvent_Data& StorageEvent::data() const {
  const ::cosmo::pb::StorageEvent_Data* p = data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::StorageEvent_Data*>(
      &::cosmo::pb::_StorageEvent_Data_default_instance_);
}
::cosmo::pb::StorageEvent_Data* StorageEvent::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    _slow_mutable_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StorageEvent.data)
  return data_;
}
::cosmo::pb::StorageEvent_Data* StorageEvent::release_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StorageEvent.data)
  clear_has_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_data();
  } else {
    ::cosmo::pb::StorageEvent_Data* temp = data_;
    data_ = NULL;
    return temp;
  }
}
 void StorageEvent::set_allocated_data(::cosmo::pb::StorageEvent_Data* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data != NULL) {
    _slow_set_allocated_data(message_arena, &data);
  }
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StorageEvent.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace cosmo

// @@protoc_insertion_point(global_scope)
