// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo.proto

#ifndef PROTOBUF_cosmo_2eproto__INCLUDED
#define PROTOBUF_cosmo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cosmo_user_events.pb.h"
// @@protoc_insertion_point(includes)
namespace cosmo {
namespace pb {
class DocumentData;
class DocumentDataDefaultTypeInternal;
extern DocumentDataDefaultTypeInternal _DocumentData_default_instance_;
class DocumentData_AppFilterStats;
class DocumentData_AppFilterStatsDefaultTypeInternal;
extern DocumentData_AppFilterStatsDefaultTypeInternal _DocumentData_AppFilterStats_default_instance_;
class DocumentData_Censor;
class DocumentData_CensorDefaultTypeInternal;
extern DocumentData_CensorDefaultTypeInternal _DocumentData_Censor_default_instance_;
class DocumentData_ContentData;
class DocumentData_ContentDataDefaultTypeInternal;
extern DocumentData_ContentDataDefaultTypeInternal _DocumentData_ContentData_default_instance_;
class DocumentData_ContentPornFea;
class DocumentData_ContentPornFeaDefaultTypeInternal;
extern DocumentData_ContentPornFeaDefaultTypeInternal _DocumentData_ContentPornFea_default_instance_;
class DocumentData_ContentThemes;
class DocumentData_ContentThemesDefaultTypeInternal;
extern DocumentData_ContentThemesDefaultTypeInternal _DocumentData_ContentThemes_default_instance_;
class DocumentData_ContentVector;
class DocumentData_ContentVectorDefaultTypeInternal;
extern DocumentData_ContentVectorDefaultTypeInternal _DocumentData_ContentVector_default_instance_;
class DocumentData_DocState;
class DocumentData_DocStateDefaultTypeInternal;
extern DocumentData_DocStateDefaultTypeInternal _DocumentData_DocState_default_instance_;
class DocumentData_DocumentEventStat;
class DocumentData_DocumentEventStatDefaultTypeInternal;
extern DocumentData_DocumentEventStatDefaultTypeInternal _DocumentData_DocumentEventStat_default_instance_;
class DocumentData_DocumentEventStat_GeoEventStat;
class DocumentData_DocumentEventStat_GeoEventStatDefaultTypeInternal;
extern DocumentData_DocumentEventStat_GeoEventStatDefaultTypeInternal _DocumentData_DocumentEventStat_GeoEventStat_default_instance_;
class DocumentData_DocumentEventStat_SocDemEventStat;
class DocumentData_DocumentEventStat_SocDemEventStatDefaultTypeInternal;
extern DocumentData_DocumentEventStat_SocDemEventStatDefaultTypeInternal _DocumentData_DocumentEventStat_SocDemEventStat_default_instance_;
class DocumentData_DocumentKeywordsInfo;
class DocumentData_DocumentKeywordsInfoDefaultTypeInternal;
extern DocumentData_DocumentKeywordsInfoDefaultTypeInternal _DocumentData_DocumentKeywordsInfo_default_instance_;
class DocumentData_DocumentLocationStat;
class DocumentData_DocumentLocationStatDefaultTypeInternal;
extern DocumentData_DocumentLocationStatDefaultTypeInternal _DocumentData_DocumentLocationStat_default_instance_;
class DocumentData_DocumentLocationStat_LocationStat;
class DocumentData_DocumentLocationStat_LocationStatDefaultTypeInternal;
extern DocumentData_DocumentLocationStat_LocationStatDefaultTypeInternal _DocumentData_DocumentLocationStat_LocationStat_default_instance_;
class DocumentData_DocumentLocationStat_Stat;
class DocumentData_DocumentLocationStat_StatDefaultTypeInternal;
extern DocumentData_DocumentLocationStat_StatDefaultTypeInternal _DocumentData_DocumentLocationStat_Stat_default_instance_;
class DocumentData_DocumentMutualStat;
class DocumentData_DocumentMutualStatDefaultTypeInternal;
extern DocumentData_DocumentMutualStatDefaultTypeInternal _DocumentData_DocumentMutualStat_default_instance_;
class DocumentData_DocumentMutualStat_LocationStat;
class DocumentData_DocumentMutualStat_LocationStatDefaultTypeInternal;
extern DocumentData_DocumentMutualStat_LocationStatDefaultTypeInternal _DocumentData_DocumentMutualStat_LocationStat_default_instance_;
class DocumentData_DocumentMutualStat_Stat;
class DocumentData_DocumentMutualStat_StatDefaultTypeInternal;
extern DocumentData_DocumentMutualStat_StatDefaultTypeInternal _DocumentData_DocumentMutualStat_Stat_default_instance_;
class DocumentData_Fetcher;
class DocumentData_FetcherDefaultTypeInternal;
extern DocumentData_FetcherDefaultTypeInternal _DocumentData_Fetcher_default_instance_;
class DocumentData_FetcherFirstmeet;
class DocumentData_FetcherFirstmeetDefaultTypeInternal;
extern DocumentData_FetcherFirstmeetDefaultTypeInternal _DocumentData_FetcherFirstmeet_default_instance_;
class DocumentData_FetcherGeo;
class DocumentData_FetcherGeoDefaultTypeInternal;
extern DocumentData_FetcherGeoDefaultTypeInternal _DocumentData_FetcherGeo_default_instance_;
class DocumentData_FetcherImage;
class DocumentData_FetcherImageDefaultTypeInternal;
extern DocumentData_FetcherImageDefaultTypeInternal _DocumentData_FetcherImage_default_instance_;
class DocumentData_FetcherPubdate;
class DocumentData_FetcherPubdateDefaultTypeInternal;
extern DocumentData_FetcherPubdateDefaultTypeInternal _DocumentData_FetcherPubdate_default_instance_;
class DocumentData_FreshnessData;
class DocumentData_FreshnessDataDefaultTypeInternal;
extern DocumentData_FreshnessDataDefaultTypeInternal _DocumentData_FreshnessData_default_instance_;
class DocumentData_GeoHits;
class DocumentData_GeoHitsDefaultTypeInternal;
extern DocumentData_GeoHitsDefaultTypeInternal _DocumentData_GeoHits_default_instance_;
class DocumentData_ImagePornFea;
class DocumentData_ImagePornFeaDefaultTypeInternal;
extern DocumentData_ImagePornFeaDefaultTypeInternal _DocumentData_ImagePornFea_default_instance_;
class DocumentData_MediametricsFea;
class DocumentData_MediametricsFeaDefaultTypeInternal;
extern DocumentData_MediametricsFeaDefaultTypeInternal _DocumentData_MediametricsFea_default_instance_;
class DocumentData_NativeTargetIsActive;
class DocumentData_NativeTargetIsActiveDefaultTypeInternal;
extern DocumentData_NativeTargetIsActiveDefaultTypeInternal _DocumentData_NativeTargetIsActive_default_instance_;
class DocumentData_NewsData;
class DocumentData_NewsDataDefaultTypeInternal;
extern DocumentData_NewsDataDefaultTypeInternal _DocumentData_NewsData_default_instance_;
class DocumentData_NewsStoryData;
class DocumentData_NewsStoryDataDefaultTypeInternal;
extern DocumentData_NewsStoryDataDefaultTypeInternal _DocumentData_NewsStoryData_default_instance_;
class DocumentData_NewsTagsData;
class DocumentData_NewsTagsDataDefaultTypeInternal;
extern DocumentData_NewsTagsDataDefaultTypeInternal _DocumentData_NewsTagsData_default_instance_;
class DocumentData_OkInfo;
class DocumentData_OkInfoDefaultTypeInternal;
extern DocumentData_OkInfoDefaultTypeInternal _DocumentData_OkInfo_default_instance_;
class DocumentData_OriginalInfo;
class DocumentData_OriginalInfoDefaultTypeInternal;
extern DocumentData_OriginalInfoDefaultTypeInternal _DocumentData_OriginalInfo_default_instance_;
class DocumentData_RisksFields;
class DocumentData_RisksFieldsDefaultTypeInternal;
extern DocumentData_RisksFieldsDefaultTypeInternal _DocumentData_RisksFields_default_instance_;
class DocumentData_StoryClusterId;
class DocumentData_StoryClusterIdDefaultTypeInternal;
extern DocumentData_StoryClusterIdDefaultTypeInternal _DocumentData_StoryClusterId_default_instance_;
class DocumentData_TitleContentFea;
class DocumentData_TitleContentFeaDefaultTypeInternal;
extern DocumentData_TitleContentFeaDefaultTypeInternal _DocumentData_TitleContentFea_default_instance_;
class DocumentData_TopicEventStat;
class DocumentData_TopicEventStatDefaultTypeInternal;
extern DocumentData_TopicEventStatDefaultTypeInternal _DocumentData_TopicEventStat_default_instance_;
class DocumentData_TopicPeriodStats;
class DocumentData_TopicPeriodStatsDefaultTypeInternal;
extern DocumentData_TopicPeriodStatsDefaultTypeInternal _DocumentData_TopicPeriodStats_default_instance_;
class DocumentData_Trends;
class DocumentData_TrendsDefaultTypeInternal;
extern DocumentData_TrendsDefaultTypeInternal _DocumentData_Trends_default_instance_;
class DocumentData_UserStats;
class DocumentData_UserStatsDefaultTypeInternal;
extern DocumentData_UserStatsDefaultTypeInternal _DocumentData_UserStats_default_instance_;
class DocumentSourceLink;
class DocumentSourceLinkDefaultTypeInternal;
extern DocumentSourceLinkDefaultTypeInternal _DocumentSourceLink_default_instance_;
class GroupedUserData;
class GroupedUserDataDefaultTypeInternal;
extern GroupedUserDataDefaultTypeInternal _GroupedUserData_default_instance_;
class SourceData;
class SourceDataDefaultTypeInternal;
extern SourceDataDefaultTypeInternal _SourceData_default_instance_;
class SourceData_AlsFea;
class SourceData_AlsFeaDefaultTypeInternal;
extern SourceData_AlsFeaDefaultTypeInternal _SourceData_AlsFea_default_instance_;
class SourceData_ContentThemes;
class SourceData_ContentThemesDefaultTypeInternal;
extern SourceData_ContentThemesDefaultTypeInternal _SourceData_ContentThemes_default_instance_;
class SourceData_GroupEventStat;
class SourceData_GroupEventStatDefaultTypeInternal;
extern SourceData_GroupEventStatDefaultTypeInternal _SourceData_GroupEventStat_default_instance_;
class SourceData_GroupPeriodStats;
class SourceData_GroupPeriodStatsDefaultTypeInternal;
extern SourceData_GroupPeriodStatsDefaultTypeInternal _SourceData_GroupPeriodStats_default_instance_;
class SourceData_GroupStat;
class SourceData_GroupStatDefaultTypeInternal;
extern SourceData_GroupStatDefaultTypeInternal _SourceData_GroupStat_default_instance_;
class SourceData_LdaFea;
class SourceData_LdaFeaDefaultTypeInternal;
extern SourceData_LdaFeaDefaultTypeInternal _SourceData_LdaFea_default_instance_;
class SourceData_LentaAdminSourceInfo;
class SourceData_LentaAdminSourceInfoDefaultTypeInternal;
extern SourceData_LentaAdminSourceInfoDefaultTypeInternal _SourceData_LentaAdminSourceInfo_default_instance_;
class SourceData_NewsData;
class SourceData_NewsDataDefaultTypeInternal;
extern SourceData_NewsDataDefaultTypeInternal _SourceData_NewsData_default_instance_;
class SourceData_OkInfo;
class SourceData_OkInfoDefaultTypeInternal;
extern SourceData_OkInfoDefaultTypeInternal _SourceData_OkInfo_default_instance_;
class SourceData_OriginalInfo;
class SourceData_OriginalInfoDefaultTypeInternal;
extern SourceData_OriginalInfoDefaultTypeInternal _SourceData_OriginalInfo_default_instance_;
class SourceData_SourceEventStat;
class SourceData_SourceEventStatDefaultTypeInternal;
extern SourceData_SourceEventStatDefaultTypeInternal _SourceData_SourceEventStat_default_instance_;
class SourceData_SourceEventStat_EventStat;
class SourceData_SourceEventStat_EventStatDefaultTypeInternal;
extern SourceData_SourceEventStat_EventStatDefaultTypeInternal _SourceData_SourceEventStat_EventStat_default_instance_;
class SourceData_SourceEventStat_GeoEventStat;
class SourceData_SourceEventStat_GeoEventStatDefaultTypeInternal;
extern SourceData_SourceEventStat_GeoEventStatDefaultTypeInternal _SourceData_SourceEventStat_GeoEventStat_default_instance_;
class SourceData_SourceEventStat_SocDemEventStat;
class SourceData_SourceEventStat_SocDemEventStatDefaultTypeInternal;
extern SourceData_SourceEventStat_SocDemEventStatDefaultTypeInternal _SourceData_SourceEventStat_SocDemEventStat_default_instance_;
class SourceData_SourceGeo;
class SourceData_SourceGeoDefaultTypeInternal;
extern SourceData_SourceGeoDefaultTypeInternal _SourceData_SourceGeo_default_instance_;
class SourceData_SourceInfo;
class SourceData_SourceInfoDefaultTypeInternal;
extern SourceData_SourceInfoDefaultTypeInternal _SourceData_SourceInfo_default_instance_;
class SourceData_SourceLocationStat;
class SourceData_SourceLocationStatDefaultTypeInternal;
extern SourceData_SourceLocationStatDefaultTypeInternal _SourceData_SourceLocationStat_default_instance_;
class SourceData_SourceLocationStat_LocationStat;
class SourceData_SourceLocationStat_LocationStatDefaultTypeInternal;
extern SourceData_SourceLocationStat_LocationStatDefaultTypeInternal _SourceData_SourceLocationStat_LocationStat_default_instance_;
class SourceData_SourceLocationStat_Stat;
class SourceData_SourceLocationStat_StatDefaultTypeInternal;
extern SourceData_SourceLocationStat_StatDefaultTypeInternal _SourceData_SourceLocationStat_Stat_default_instance_;
class SourceData_SourcePopularityStat;
class SourceData_SourcePopularityStatDefaultTypeInternal;
extern SourceData_SourcePopularityStatDefaultTypeInternal _SourceData_SourcePopularityStat_default_instance_;
class SourceData_SourcePopularityStat_GeoPopularity;
class SourceData_SourcePopularityStat_GeoPopularityDefaultTypeInternal;
extern SourceData_SourcePopularityStat_GeoPopularityDefaultTypeInternal _SourceData_SourcePopularityStat_GeoPopularity_default_instance_;
class SourceData_SourcePopularityStat_PopularityStat;
class SourceData_SourcePopularityStat_PopularityStatDefaultTypeInternal;
extern SourceData_SourcePopularityStat_PopularityStatDefaultTypeInternal _SourceData_SourcePopularityStat_PopularityStat_default_instance_;
class SourceData_SourceSimilarity;
class SourceData_SourceSimilarityDefaultTypeInternal;
extern SourceData_SourceSimilarityDefaultTypeInternal _SourceData_SourceSimilarity_default_instance_;
class StorageEvent;
class StorageEventDefaultTypeInternal;
extern StorageEventDefaultTypeInternal _StorageEvent_default_instance_;
class StorageEvent_Data;
class StorageEvent_DataDefaultTypeInternal;
extern StorageEvent_DataDefaultTypeInternal _StorageEvent_Data_default_instance_;
class UserData;
class UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
class UserData_AlsFea;
class UserData_AlsFeaDefaultTypeInternal;
extern UserData_AlsFeaDefaultTypeInternal _UserData_AlsFea_default_instance_;
class UserData_AlsItemsBiases;
class UserData_AlsItemsBiasesDefaultTypeInternal;
extern UserData_AlsItemsBiasesDefaultTypeInternal _UserData_AlsItemsBiases_default_instance_;
class UserData_ContentThemes;
class UserData_ContentThemesDefaultTypeInternal;
extern UserData_ContentThemesDefaultTypeInternal _UserData_ContentThemes_default_instance_;
class UserData_DetiRecos;
class UserData_DetiRecosDefaultTypeInternal;
extern UserData_DetiRecosDefaultTypeInternal _UserData_DetiRecos_default_instance_;
class UserData_LogsVisitedDocs;
class UserData_LogsVisitedDocsDefaultTypeInternal;
extern UserData_LogsVisitedDocsDefaultTypeInternal _UserData_LogsVisitedDocs_default_instance_;
class UserData_LogsVisitedSource;
class UserData_LogsVisitedSourceDefaultTypeInternal;
extern UserData_LogsVisitedSourceDefaultTypeInternal _UserData_LogsVisitedSource_default_instance_;
class UserData_LogsVisitedSources;
class UserData_LogsVisitedSourcesDefaultTypeInternal;
extern UserData_LogsVisitedSourcesDefaultTypeInternal _UserData_LogsVisitedSources_default_instance_;
class UserData_NewsSources;
class UserData_NewsSourcesDefaultTypeInternal;
extern UserData_NewsSourcesDefaultTypeInternal _UserData_NewsSources_default_instance_;
class UserData_OkInfo;
class UserData_OkInfoDefaultTypeInternal;
extern UserData_OkInfoDefaultTypeInternal _UserData_OkInfo_default_instance_;
class UserData_OriginalInfo;
class UserData_OriginalInfoDefaultTypeInternal;
extern UserData_OriginalInfoDefaultTypeInternal _UserData_OriginalInfo_default_instance_;
class UserData_SimilarSites;
class UserData_SimilarSitesDefaultTypeInternal;
extern UserData_SimilarSitesDefaultTypeInternal _UserData_SimilarSites_default_instance_;
class UserData_SimilarSites_SimilarSite;
class UserData_SimilarSites_SimilarSiteDefaultTypeInternal;
extern UserData_SimilarSites_SimilarSiteDefaultTypeInternal _UserData_SimilarSites_SimilarSite_default_instance_;
class UserData_SitesForUser;
class UserData_SitesForUserDefaultTypeInternal;
extern UserData_SitesForUserDefaultTypeInternal _UserData_SitesForUser_default_instance_;
class UserData_SocDemFea;
class UserData_SocDemFeaDefaultTypeInternal;
extern UserData_SocDemFeaDefaultTypeInternal _UserData_SocDemFea_default_instance_;
class UserData_SourcesWebStats;
class UserData_SourcesWebStatsDefaultTypeInternal;
extern UserData_SourcesWebStatsDefaultTypeInternal _UserData_SourcesWebStats_default_instance_;
class UserData_SourcesWebStats_SourceVisit;
class UserData_SourcesWebStats_SourceVisitDefaultTypeInternal;
extern UserData_SourcesWebStats_SourceVisitDefaultTypeInternal _UserData_SourcesWebStats_SourceVisit_default_instance_;
class UserData_StaticRecos;
class UserData_StaticRecosDefaultTypeInternal;
extern UserData_StaticRecosDefaultTypeInternal _UserData_StaticRecos_default_instance_;
class UserData_Stats;
class UserData_StatsDefaultTypeInternal;
extern UserData_StatsDefaultTypeInternal _UserData_Stats_default_instance_;
class UserData_Stats_SourceStats;
class UserData_Stats_SourceStatsDefaultTypeInternal;
extern UserData_Stats_SourceStatsDefaultTypeInternal _UserData_Stats_SourceStats_default_instance_;
class UserData_SubscriptionInfo;
class UserData_SubscriptionInfoDefaultTypeInternal;
extern UserData_SubscriptionInfoDefaultTypeInternal _UserData_SubscriptionInfo_default_instance_;
class UserData_SubscriptionInfo_SubscriptionItem;
class UserData_SubscriptionInfo_SubscriptionItemDefaultTypeInternal;
extern UserData_SubscriptionInfo_SubscriptionItemDefaultTypeInternal _UserData_SubscriptionInfo_SubscriptionItem_default_instance_;
class UserData_UserClusters;
class UserData_UserClustersDefaultTypeInternal;
extern UserData_UserClustersDefaultTypeInternal _UserData_UserClusters_default_instance_;
class UserData_UserEvents;
class UserData_UserEventsDefaultTypeInternal;
extern UserData_UserEventsDefaultTypeInternal _UserData_UserEvents_default_instance_;
class UserData_UserEvents_DocumentDislike;
class UserData_UserEvents_DocumentDislikeDefaultTypeInternal;
extern UserData_UserEvents_DocumentDislikeDefaultTypeInternal _UserData_UserEvents_DocumentDislike_default_instance_;
class UserData_UserEvents_SiteDislike;
class UserData_UserEvents_SiteDislikeDefaultTypeInternal;
extern UserData_UserEvents_SiteDislikeDefaultTypeInternal _UserData_UserEvents_SiteDislike_default_instance_;
class UserData_UserEvents_SourceDislike;
class UserData_UserEvents_SourceDislikeDefaultTypeInternal;
extern UserData_UserEvents_SourceDislikeDefaultTypeInternal _UserData_UserEvents_SourceDislike_default_instance_;
class UserData_UserI2IEvents;
class UserData_UserI2IEventsDefaultTypeInternal;
extern UserData_UserI2IEventsDefaultTypeInternal _UserData_UserI2IEvents_default_instance_;
class UserData_UserI2IEvents_UserI2IEvent;
class UserData_UserI2IEvents_UserI2IEventDefaultTypeInternal;
extern UserData_UserI2IEvents_UserI2IEventDefaultTypeInternal _UserData_UserI2IEvents_UserI2IEvent_default_instance_;
class UserData_UserI2IEvents_UserI2IEventInfo;
class UserData_UserI2IEvents_UserI2IEventInfoDefaultTypeInternal;
extern UserData_UserI2IEvents_UserI2IEventInfoDefaultTypeInternal _UserData_UserI2IEvents_UserI2IEventInfo_default_instance_;
class UserData_UserKeywords;
class UserData_UserKeywordsDefaultTypeInternal;
extern UserData_UserKeywordsDefaultTypeInternal _UserData_UserKeywords_default_instance_;
class UserData_UserLinks;
class UserData_UserLinksDefaultTypeInternal;
extern UserData_UserLinksDefaultTypeInternal _UserData_UserLinks_default_instance_;
class UserData_UserMusic;
class UserData_UserMusicDefaultTypeInternal;
extern UserData_UserMusicDefaultTypeInternal _UserData_UserMusic_default_instance_;
class UserData_UserMusic_TrackInfo;
class UserData_UserMusic_TrackInfoDefaultTypeInternal;
extern UserData_UserMusic_TrackInfoDefaultTypeInternal _UserData_UserMusic_TrackInfo_default_instance_;
class UserData_UserSourcesEvents;
class UserData_UserSourcesEventsDefaultTypeInternal;
extern UserData_UserSourcesEventsDefaultTypeInternal _UserData_UserSourcesEvents_default_instance_;
class UserData_UserSourcesEvents_UserSourceEvent;
class UserData_UserSourcesEvents_UserSourceEventDefaultTypeInternal;
extern UserData_UserSourcesEvents_UserSourceEventDefaultTypeInternal _UserData_UserSourcesEvents_UserSourceEvent_default_instance_;
class UserData_UserSourcesEvents_UserSourceEventInfo;
class UserData_UserSourcesEvents_UserSourceEventInfoDefaultTypeInternal;
extern UserData_UserSourcesEvents_UserSourceEventInfoDefaultTypeInternal _UserData_UserSourcesEvents_UserSourceEventInfo_default_instance_;
class UserData_UserThemesEvents;
class UserData_UserThemesEventsDefaultTypeInternal;
extern UserData_UserThemesEventsDefaultTypeInternal _UserData_UserThemesEvents_default_instance_;
class UserData_UserThemesEvents_UserThemeEvent;
class UserData_UserThemesEvents_UserThemeEventDefaultTypeInternal;
extern UserData_UserThemesEvents_UserThemeEventDefaultTypeInternal _UserData_UserThemesEvents_UserThemeEvent_default_instance_;
class UserData_UserThemesEvents_UserThemeEventInfo;
class UserData_UserThemesEvents_UserThemeEventInfoDefaultTypeInternal;
extern UserData_UserThemesEvents_UserThemeEventInfoDefaultTypeInternal _UserData_UserThemesEvents_UserThemeEventInfo_default_instance_;
class UserData_UserVideoEvents;
class UserData_UserVideoEventsDefaultTypeInternal;
extern UserData_UserVideoEventsDefaultTypeInternal _UserData_UserVideoEvents_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent;
class UserData_UserVideoEvents_UserVideoEventDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEventDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Block;
class UserData_UserVideoEvents_UserVideoEvent_BlockDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_BlockDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Block_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Comment;
class UserData_UserVideoEvents_UserVideoEvent_CommentDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_CommentDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Comment_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_DailyCounters;
class UserData_UserVideoEvents_UserVideoEvent_DailyCountersDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_DailyCountersDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_DailyCounters_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Dislike;
class UserData_UserVideoEvents_UserVideoEvent_DislikeDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_DislikeDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Dislike_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Emotion;
class UserData_UserVideoEvents_UserVideoEvent_EmotionDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_EmotionDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Emotion_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Favorite;
class UserData_UserVideoEvents_UserVideoEvent_FavoriteDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_FavoriteDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Favorite_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Like;
class UserData_UserVideoEvents_UserVideoEvent_LikeDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_LikeDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Like_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Location;
class UserData_UserVideoEvents_UserVideoEvent_LocationDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_LocationDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Norm;
class UserData_UserVideoEvents_UserVideoEvent_NormDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_NormDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Norm_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_PlayStatus;
class UserData_UserVideoEvents_UserVideoEvent_PlayStatusDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_PlayStatusDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_PlayStatus_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Rate;
class UserData_UserVideoEvents_UserVideoEvent_RateDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_RateDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Rate_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Rate10;
class UserData_UserVideoEvents_UserVideoEvent_Rate10DefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_Rate10DefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Rate10_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Rate3;
class UserData_UserVideoEvents_UserVideoEvent_Rate3DefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_Rate3DefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Rate3_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Share;
class UserData_UserVideoEvents_UserVideoEvent_ShareDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_ShareDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Share_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_VideoClick;
class UserData_UserVideoEvents_UserVideoEvent_VideoClickDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_VideoClickDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_VideoInViewport;
class UserData_UserVideoEvents_UserVideoEvent_VideoInViewportDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_VideoInViewportDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_VideoInViewport_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_VideoNext;
class UserData_UserVideoEvents_UserVideoEvent_VideoNextDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_VideoNextDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_VideoNext_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_VideoStart;
class UserData_UserVideoEvents_UserVideoEvent_VideoStartDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_VideoStartDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_VideoStart_default_instance_;
class UserData_UserVideoEvents_UserVideoEvent_Watch;
class UserData_UserVideoEvents_UserVideoEvent_WatchDefaultTypeInternal;
extern UserData_UserVideoEvents_UserVideoEvent_WatchDefaultTypeInternal _UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_;
class UserData_UserVideos;
class UserData_UserVideosDefaultTypeInternal;
extern UserData_UserVideosDefaultTypeInternal _UserData_UserVideos_default_instance_;
class UserData_VisitedDocs;
class UserData_VisitedDocsDefaultTypeInternal;
extern UserData_VisitedDocsDefaultTypeInternal _UserData_VisitedDocs_default_instance_;
class UserData_VkGroupsForUser;
class UserData_VkGroupsForUserDefaultTypeInternal;
extern UserData_VkGroupsForUserDefaultTypeInternal _UserData_VkGroupsForUser_default_instance_;
}  // namespace pb
}  // namespace cosmo

namespace cosmo {
namespace pb {

namespace protobuf_cosmo_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cosmo_2eproto

enum UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus {
  UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_OFF = 0,
  UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_ON = 1
};
bool UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_IsValid(int value);
const UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_SubscriptionStatus_MIN = UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_OFF;
const UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_SubscriptionStatus_MAX = UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_ON;
const int UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_SubscriptionStatus_ARRAYSIZE = UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_SubscriptionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_descriptor();
inline const ::std::string& UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_Name(UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_descriptor(), value);
}
inline bool UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_Parse(
    const ::std::string& name, UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus>(
    UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_descriptor(), name, value);
}
enum SourceData_SourceInfo_SourceType {
  SourceData_SourceInfo_SourceType_OK = 0,
  SourceData_SourceInfo_SourceType_ADVERT = 1,
  SourceData_SourceInfo_SourceType_WEB = 2,
  SourceData_SourceInfo_SourceType_NEWS = 3,
  SourceData_SourceInfo_SourceType_LENTA = 4
};
bool SourceData_SourceInfo_SourceType_IsValid(int value);
const SourceData_SourceInfo_SourceType SourceData_SourceInfo_SourceType_SourceType_MIN = SourceData_SourceInfo_SourceType_OK;
const SourceData_SourceInfo_SourceType SourceData_SourceInfo_SourceType_SourceType_MAX = SourceData_SourceInfo_SourceType_LENTA;
const int SourceData_SourceInfo_SourceType_SourceType_ARRAYSIZE = SourceData_SourceInfo_SourceType_SourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SourceData_SourceInfo_SourceType_descriptor();
inline const ::std::string& SourceData_SourceInfo_SourceType_Name(SourceData_SourceInfo_SourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SourceData_SourceInfo_SourceType_descriptor(), value);
}
inline bool SourceData_SourceInfo_SourceType_Parse(
    const ::std::string& name, SourceData_SourceInfo_SourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SourceData_SourceInfo_SourceType>(
    SourceData_SourceInfo_SourceType_descriptor(), name, value);
}
enum DocumentData_DocumentKeywordsInfo_KeywordType {
  DocumentData_DocumentKeywordsInfo_KeywordType_TITLE = 0,
  DocumentData_DocumentKeywordsInfo_KeywordType_DESCRIPTION = 1
};
bool DocumentData_DocumentKeywordsInfo_KeywordType_IsValid(int value);
const DocumentData_DocumentKeywordsInfo_KeywordType DocumentData_DocumentKeywordsInfo_KeywordType_KeywordType_MIN = DocumentData_DocumentKeywordsInfo_KeywordType_TITLE;
const DocumentData_DocumentKeywordsInfo_KeywordType DocumentData_DocumentKeywordsInfo_KeywordType_KeywordType_MAX = DocumentData_DocumentKeywordsInfo_KeywordType_DESCRIPTION;
const int DocumentData_DocumentKeywordsInfo_KeywordType_KeywordType_ARRAYSIZE = DocumentData_DocumentKeywordsInfo_KeywordType_KeywordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DocumentData_DocumentKeywordsInfo_KeywordType_descriptor();
inline const ::std::string& DocumentData_DocumentKeywordsInfo_KeywordType_Name(DocumentData_DocumentKeywordsInfo_KeywordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DocumentData_DocumentKeywordsInfo_KeywordType_descriptor(), value);
}
inline bool DocumentData_DocumentKeywordsInfo_KeywordType_Parse(
    const ::std::string& name, DocumentData_DocumentKeywordsInfo_KeywordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DocumentData_DocumentKeywordsInfo_KeywordType>(
    DocumentData_DocumentKeywordsInfo_KeywordType_descriptor(), name, value);
}
enum StorageEvent_Type {
  StorageEvent_Type_CREATE_OR_UPDATE = 0,
  StorageEvent_Type_DELETE = 2
};
bool StorageEvent_Type_IsValid(int value);
const StorageEvent_Type StorageEvent_Type_Type_MIN = StorageEvent_Type_CREATE_OR_UPDATE;
const StorageEvent_Type StorageEvent_Type_Type_MAX = StorageEvent_Type_DELETE;
const int StorageEvent_Type_Type_ARRAYSIZE = StorageEvent_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StorageEvent_Type_descriptor();
inline const ::std::string& StorageEvent_Type_Name(StorageEvent_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StorageEvent_Type_descriptor(), value);
}
inline bool StorageEvent_Type_Parse(
    const ::std::string& name, StorageEvent_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StorageEvent_Type>(
    StorageEvent_Type_descriptor(), name, value);
}
// ===================================================================

class UserData_OriginalInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.OriginalInfo) */ {
 public:
  UserData_OriginalInfo();
  virtual ~UserData_OriginalInfo();

  UserData_OriginalInfo(const UserData_OriginalInfo& from);

  inline UserData_OriginalInfo& operator=(const UserData_OriginalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_OriginalInfo(UserData_OriginalInfo&& from) noexcept
    : UserData_OriginalInfo() {
    *this = ::std::move(from);
  }

  inline UserData_OriginalInfo& operator=(UserData_OriginalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_OriginalInfo& default_instance();

  static inline const UserData_OriginalInfo* internal_default_instance() {
    return reinterpret_cast<const UserData_OriginalInfo*>(
               &_UserData_OriginalInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(UserData_OriginalInfo* other);
  void Swap(UserData_OriginalInfo* other);
  friend void swap(UserData_OriginalInfo& a, UserData_OriginalInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_OriginalInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_OriginalInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_OriginalInfo& from);
  void MergeFrom(const UserData_OriginalInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_OriginalInfo* other);
  protected:
  explicit UserData_OriginalInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.OriginalInfo)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_OkInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.OkInfo) */ {
 public:
  UserData_OkInfo();
  virtual ~UserData_OkInfo();

  UserData_OkInfo(const UserData_OkInfo& from);

  inline UserData_OkInfo& operator=(const UserData_OkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_OkInfo(UserData_OkInfo&& from) noexcept
    : UserData_OkInfo() {
    *this = ::std::move(from);
  }

  inline UserData_OkInfo& operator=(UserData_OkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_OkInfo& default_instance();

  static inline const UserData_OkInfo* internal_default_instance() {
    return reinterpret_cast<const UserData_OkInfo*>(
               &_UserData_OkInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(UserData_OkInfo* other);
  void Swap(UserData_OkInfo* other);
  friend void swap(UserData_OkInfo& a, UserData_OkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_OkInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_OkInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_OkInfo& from);
  void MergeFrom(const UserData_OkInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_OkInfo* other);
  protected:
  explicit UserData_OkInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.OkInfo)
 private:
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 user_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SocDemFea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SocDemFea) */ {
 public:
  UserData_SocDemFea();
  virtual ~UserData_SocDemFea();

  UserData_SocDemFea(const UserData_SocDemFea& from);

  inline UserData_SocDemFea& operator=(const UserData_SocDemFea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SocDemFea(UserData_SocDemFea&& from) noexcept
    : UserData_SocDemFea() {
    *this = ::std::move(from);
  }

  inline UserData_SocDemFea& operator=(UserData_SocDemFea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SocDemFea& default_instance();

  static inline const UserData_SocDemFea* internal_default_instance() {
    return reinterpret_cast<const UserData_SocDemFea*>(
               &_UserData_SocDemFea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(UserData_SocDemFea* other);
  void Swap(UserData_SocDemFea* other);
  friend void swap(UserData_SocDemFea& a, UserData_SocDemFea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SocDemFea* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SocDemFea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SocDemFea& from);
  void MergeFrom(const UserData_SocDemFea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SocDemFea* other);
  protected:
  explicit UserData_SocDemFea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gender = 1 [default = 0];
  bool has_gender() const;
  void clear_gender();
  static const int kGenderFieldNumber = 1;
  ::google::protobuf::int32 gender() const;
  void set_gender(::google::protobuf::int32 value);

  // optional int32 age = 2;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SocDemFea)
 private:
  void set_has_gender();
  void clear_has_gender();
  void set_has_age();
  void clear_has_age();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 gender_;
  ::google::protobuf::int32 age_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_DetiRecos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.DetiRecos) */ {
 public:
  UserData_DetiRecos();
  virtual ~UserData_DetiRecos();

  UserData_DetiRecos(const UserData_DetiRecos& from);

  inline UserData_DetiRecos& operator=(const UserData_DetiRecos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_DetiRecos(UserData_DetiRecos&& from) noexcept
    : UserData_DetiRecos() {
    *this = ::std::move(from);
  }

  inline UserData_DetiRecos& operator=(UserData_DetiRecos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_DetiRecos& default_instance();

  static inline const UserData_DetiRecos* internal_default_instance() {
    return reinterpret_cast<const UserData_DetiRecos*>(
               &_UserData_DetiRecos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(UserData_DetiRecos* other);
  void Swap(UserData_DetiRecos* other);
  friend void swap(UserData_DetiRecos& a, UserData_DetiRecos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_DetiRecos* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_DetiRecos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_DetiRecos& from);
  void MergeFrom(const UserData_DetiRecos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_DetiRecos* other);
  protected:
  explicit UserData_DetiRecos(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 slim = 1;
  int slim_size() const;
  void clear_slim();
  static const int kSlimFieldNumber = 1;
  ::google::protobuf::int64 slim(int index) const;
  void set_slim(int index, ::google::protobuf::int64 value);
  void add_slim(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      slim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_slim();

  // repeated int64 wrmf = 2;
  int wrmf_size() const;
  void clear_wrmf();
  static const int kWrmfFieldNumber = 2;
  ::google::protobuf::int64 wrmf(int index) const;
  void set_wrmf(int index, ::google::protobuf::int64 value);
  void add_wrmf(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      wrmf() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_wrmf();

  // repeated int64 als_tuned = 3;
  int als_tuned_size() const;
  void clear_als_tuned();
  static const int kAlsTunedFieldNumber = 3;
  ::google::protobuf::int64 als_tuned(int index) const;
  void set_als_tuned(int index, ::google::protobuf::int64 value);
  void add_als_tuned(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      als_tuned() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_als_tuned();

  // repeated int64 als_large = 4;
  int als_large_size() const;
  void clear_als_large();
  static const int kAlsLargeFieldNumber = 4;
  ::google::protobuf::int64 als_large(int index) const;
  void set_als_large(int index, ::google::protobuf::int64 value);
  void add_als_large(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      als_large() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_als_large();

  // repeated int64 svd = 5;
  int svd_size() const;
  void clear_svd();
  static const int kSvdFieldNumber = 5;
  ::google::protobuf::int64 svd(int index) const;
  void set_svd(int index, ::google::protobuf::int64 value);
  void add_svd(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      svd() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_svd();

  // repeated int64 svd_stupid = 6;
  int svd_stupid_size() const;
  void clear_svd_stupid();
  static const int kSvdStupidFieldNumber = 6;
  ::google::protobuf::int64 svd_stupid(int index) const;
  void set_svd_stupid(int index, ::google::protobuf::int64 value);
  void add_svd_stupid(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      svd_stupid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_svd_stupid();

  // repeated int64 als_by_liker = 7;
  int als_by_liker_size() const;
  void clear_als_by_liker();
  static const int kAlsByLikerFieldNumber = 7;
  ::google::protobuf::int64 als_by_liker(int index) const;
  void set_als_by_liker(int index, ::google::protobuf::int64 value);
  void add_als_by_liker(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      als_by_liker() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_als_by_liker();

  // repeated int64 als_by_homer = 8;
  int als_by_homer_size() const;
  void clear_als_by_homer();
  static const int kAlsByHomerFieldNumber = 8;
  ::google::protobuf::int64 als_by_homer(int index) const;
  void set_als_by_homer(int index, ::google::protobuf::int64 value);
  void add_als_by_homer(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      als_by_homer() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_als_by_homer();

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.DetiRecos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > slim_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > wrmf_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > als_tuned_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > als_large_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > svd_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > svd_stupid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > als_by_liker_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > als_by_homer_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_AlsFea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.AlsFea) */ {
 public:
  UserData_AlsFea();
  virtual ~UserData_AlsFea();

  UserData_AlsFea(const UserData_AlsFea& from);

  inline UserData_AlsFea& operator=(const UserData_AlsFea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_AlsFea(UserData_AlsFea&& from) noexcept
    : UserData_AlsFea() {
    *this = ::std::move(from);
  }

  inline UserData_AlsFea& operator=(UserData_AlsFea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_AlsFea& default_instance();

  static inline const UserData_AlsFea* internal_default_instance() {
    return reinterpret_cast<const UserData_AlsFea*>(
               &_UserData_AlsFea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(UserData_AlsFea* other);
  void Swap(UserData_AlsFea* other);
  friend void swap(UserData_AlsFea& a, UserData_AlsFea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_AlsFea* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_AlsFea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_AlsFea& from);
  void MergeFrom(const UserData_AlsFea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_AlsFea* other);
  protected:
  explicit UserData_AlsFea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float als = 1;
  int als_size() const;
  void clear_als();
  static const int kAlsFieldNumber = 1;
  float als(int index) const;
  void set_als(int index, float value);
  void add_als(float value);
  const ::google::protobuf::RepeatedField< float >&
      als() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_als();

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.AlsFea)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > als_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_AlsItemsBiases : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.AlsItemsBiases) */ {
 public:
  UserData_AlsItemsBiases();
  virtual ~UserData_AlsItemsBiases();

  UserData_AlsItemsBiases(const UserData_AlsItemsBiases& from);

  inline UserData_AlsItemsBiases& operator=(const UserData_AlsItemsBiases& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_AlsItemsBiases(UserData_AlsItemsBiases&& from) noexcept
    : UserData_AlsItemsBiases() {
    *this = ::std::move(from);
  }

  inline UserData_AlsItemsBiases& operator=(UserData_AlsItemsBiases&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_AlsItemsBiases& default_instance();

  static inline const UserData_AlsItemsBiases* internal_default_instance() {
    return reinterpret_cast<const UserData_AlsItemsBiases*>(
               &_UserData_AlsItemsBiases_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(UserData_AlsItemsBiases* other);
  void Swap(UserData_AlsItemsBiases* other);
  friend void swap(UserData_AlsItemsBiases& a, UserData_AlsItemsBiases& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_AlsItemsBiases* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_AlsItemsBiases* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_AlsItemsBiases& from);
  void MergeFrom(const UserData_AlsItemsBiases& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_AlsItemsBiases* other);
  protected:
  explicit UserData_AlsItemsBiases(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float fea = 1;
  int fea_size() const;
  void clear_fea();
  static const int kFeaFieldNumber = 1;
  float fea(int index) const;
  void set_fea(int index, float value);
  void add_fea(float value);
  const ::google::protobuf::RepeatedField< float >&
      fea() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_fea();

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.AlsItemsBiases)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > fea_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_NewsSources : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.NewsSources) */ {
 public:
  UserData_NewsSources();
  virtual ~UserData_NewsSources();

  UserData_NewsSources(const UserData_NewsSources& from);

  inline UserData_NewsSources& operator=(const UserData_NewsSources& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_NewsSources(UserData_NewsSources&& from) noexcept
    : UserData_NewsSources() {
    *this = ::std::move(from);
  }

  inline UserData_NewsSources& operator=(UserData_NewsSources&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_NewsSources& default_instance();

  static inline const UserData_NewsSources* internal_default_instance() {
    return reinterpret_cast<const UserData_NewsSources*>(
               &_UserData_NewsSources_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(UserData_NewsSources* other);
  void Swap(UserData_NewsSources* other);
  friend void swap(UserData_NewsSources& a, UserData_NewsSources& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_NewsSources* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_NewsSources* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_NewsSources& from);
  void MergeFrom(const UserData_NewsSources& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_NewsSources* other);
  protected:
  explicit UserData_NewsSources(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float weight = 1;
  int weight_size() const;
  void clear_weight();
  static const int kWeightFieldNumber = 1;
  float weight(int index) const;
  void set_weight(int index, float value);
  void add_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight();

  // repeated int64 id = 2;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id(int index) const;
  void set_id(int index, ::google::protobuf::int64 value);
  void add_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.NewsSources)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > weight_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_Stats_SourceStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.Stats.SourceStats) */ {
 public:
  UserData_Stats_SourceStats();
  virtual ~UserData_Stats_SourceStats();

  UserData_Stats_SourceStats(const UserData_Stats_SourceStats& from);

  inline UserData_Stats_SourceStats& operator=(const UserData_Stats_SourceStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_Stats_SourceStats(UserData_Stats_SourceStats&& from) noexcept
    : UserData_Stats_SourceStats() {
    *this = ::std::move(from);
  }

  inline UserData_Stats_SourceStats& operator=(UserData_Stats_SourceStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_Stats_SourceStats& default_instance();

  static inline const UserData_Stats_SourceStats* internal_default_instance() {
    return reinterpret_cast<const UserData_Stats_SourceStats*>(
               &_UserData_Stats_SourceStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(UserData_Stats_SourceStats* other);
  void Swap(UserData_Stats_SourceStats* other);
  friend void swap(UserData_Stats_SourceStats& a, UserData_Stats_SourceStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_Stats_SourceStats* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_Stats_SourceStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_Stats_SourceStats& from);
  void MergeFrom(const UserData_Stats_SourceStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_Stats_SourceStats* other);
  protected:
  explicit UserData_Stats_SourceStats(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // optional int64 category_id = 2;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 2;
  ::google::protobuf::int64 category_id() const;
  void set_category_id(::google::protobuf::int64 value);

  // optional int32 views = 3;
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 3;
  ::google::protobuf::int32 views() const;
  void set_views(::google::protobuf::int32 value);

  // optional int32 opens = 4;
  bool has_opens() const;
  void clear_opens();
  static const int kOpensFieldNumber = 4;
  ::google::protobuf::int32 opens() const;
  void set_opens(::google::protobuf::int32 value);

  // optional int32 likes = 5;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 5;
  ::google::protobuf::int32 likes() const;
  void set_likes(::google::protobuf::int32 value);

  // optional int32 dislikes = 6;
  bool has_dislikes() const;
  void clear_dislikes();
  static const int kDislikesFieldNumber = 6;
  ::google::protobuf::int32 dislikes() const;
  void set_dislikes(::google::protobuf::int32 value);

  // optional int32 shares = 7;
  bool has_shares() const;
  void clear_shares();
  static const int kSharesFieldNumber = 7;
  ::google::protobuf::int32 shares() const;
  void set_shares(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.Stats.SourceStats)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_views();
  void clear_has_views();
  void set_has_opens();
  void clear_has_opens();
  void set_has_likes();
  void clear_has_likes();
  void set_has_dislikes();
  void clear_has_dislikes();
  void set_has_shares();
  void clear_has_shares();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 category_id_;
  ::google::protobuf::int32 views_;
  ::google::protobuf::int32 opens_;
  ::google::protobuf::int32 likes_;
  ::google::protobuf::int32 dislikes_;
  ::google::protobuf::int32 shares_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_Stats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.Stats) */ {
 public:
  UserData_Stats();
  virtual ~UserData_Stats();

  UserData_Stats(const UserData_Stats& from);

  inline UserData_Stats& operator=(const UserData_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_Stats(UserData_Stats&& from) noexcept
    : UserData_Stats() {
    *this = ::std::move(from);
  }

  inline UserData_Stats& operator=(UserData_Stats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_Stats& default_instance();

  static inline const UserData_Stats* internal_default_instance() {
    return reinterpret_cast<const UserData_Stats*>(
               &_UserData_Stats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(UserData_Stats* other);
  void Swap(UserData_Stats* other);
  friend void swap(UserData_Stats& a, UserData_Stats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_Stats* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_Stats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_Stats& from);
  void MergeFrom(const UserData_Stats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_Stats* other);
  protected:
  explicit UserData_Stats(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_Stats_SourceStats SourceStats;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
  int sources_stats_size() const;
  void clear_sources_stats();
  static const int kSourcesStatsFieldNumber = 1;
  const ::cosmo::pb::UserData_Stats_SourceStats& sources_stats(int index) const;
  ::cosmo::pb::UserData_Stats_SourceStats* mutable_sources_stats(int index);
  ::cosmo::pb::UserData_Stats_SourceStats* add_sources_stats();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >*
      mutable_sources_stats();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >&
      sources_stats() const;

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.Stats)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats > sources_stats_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SourcesWebStats_SourceVisit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SourcesWebStats.SourceVisit) */ {
 public:
  UserData_SourcesWebStats_SourceVisit();
  virtual ~UserData_SourcesWebStats_SourceVisit();

  UserData_SourcesWebStats_SourceVisit(const UserData_SourcesWebStats_SourceVisit& from);

  inline UserData_SourcesWebStats_SourceVisit& operator=(const UserData_SourcesWebStats_SourceVisit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SourcesWebStats_SourceVisit(UserData_SourcesWebStats_SourceVisit&& from) noexcept
    : UserData_SourcesWebStats_SourceVisit() {
    *this = ::std::move(from);
  }

  inline UserData_SourcesWebStats_SourceVisit& operator=(UserData_SourcesWebStats_SourceVisit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SourcesWebStats_SourceVisit& default_instance();

  static inline const UserData_SourcesWebStats_SourceVisit* internal_default_instance() {
    return reinterpret_cast<const UserData_SourcesWebStats_SourceVisit*>(
               &_UserData_SourcesWebStats_SourceVisit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(UserData_SourcesWebStats_SourceVisit* other);
  void Swap(UserData_SourcesWebStats_SourceVisit* other);
  friend void swap(UserData_SourcesWebStats_SourceVisit& a, UserData_SourcesWebStats_SourceVisit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SourcesWebStats_SourceVisit* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SourcesWebStats_SourceVisit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SourcesWebStats_SourceVisit& from);
  void MergeFrom(const UserData_SourcesWebStats_SourceVisit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SourcesWebStats_SourceVisit* other);
  protected:
  explicit UserData_SourcesWebStats_SourceVisit(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // required int32 visits = 2;
  bool has_visits() const;
  void clear_visits();
  static const int kVisitsFieldNumber = 2;
  ::google::protobuf::int32 visits() const;
  void set_visits(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SourcesWebStats.SourceVisit)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_visits();
  void clear_has_visits();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int32 visits_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SourcesWebStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SourcesWebStats) */ {
 public:
  UserData_SourcesWebStats();
  virtual ~UserData_SourcesWebStats();

  UserData_SourcesWebStats(const UserData_SourcesWebStats& from);

  inline UserData_SourcesWebStats& operator=(const UserData_SourcesWebStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SourcesWebStats(UserData_SourcesWebStats&& from) noexcept
    : UserData_SourcesWebStats() {
    *this = ::std::move(from);
  }

  inline UserData_SourcesWebStats& operator=(UserData_SourcesWebStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SourcesWebStats& default_instance();

  static inline const UserData_SourcesWebStats* internal_default_instance() {
    return reinterpret_cast<const UserData_SourcesWebStats*>(
               &_UserData_SourcesWebStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(UserData_SourcesWebStats* other);
  void Swap(UserData_SourcesWebStats* other);
  friend void swap(UserData_SourcesWebStats& a, UserData_SourcesWebStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SourcesWebStats* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SourcesWebStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SourcesWebStats& from);
  void MergeFrom(const UserData_SourcesWebStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SourcesWebStats* other);
  protected:
  explicit UserData_SourcesWebStats(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_SourcesWebStats_SourceVisit SourceVisit;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
  int sourcevisits_size() const;
  void clear_sourcevisits();
  static const int kSourceVisitsFieldNumber = 1;
  const ::cosmo::pb::UserData_SourcesWebStats_SourceVisit& sourcevisits(int index) const;
  ::cosmo::pb::UserData_SourcesWebStats_SourceVisit* mutable_sourcevisits(int index);
  ::cosmo::pb::UserData_SourcesWebStats_SourceVisit* add_sourcevisits();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >*
      mutable_sourcevisits();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >&
      sourcevisits() const;

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SourcesWebStats)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit > sourcevisits_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserLinks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserLinks) */ {
 public:
  UserData_UserLinks();
  virtual ~UserData_UserLinks();

  UserData_UserLinks(const UserData_UserLinks& from);

  inline UserData_UserLinks& operator=(const UserData_UserLinks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserLinks(UserData_UserLinks&& from) noexcept
    : UserData_UserLinks() {
    *this = ::std::move(from);
  }

  inline UserData_UserLinks& operator=(UserData_UserLinks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserLinks& default_instance();

  static inline const UserData_UserLinks* internal_default_instance() {
    return reinterpret_cast<const UserData_UserLinks*>(
               &_UserData_UserLinks_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(UserData_UserLinks* other);
  void Swap(UserData_UserLinks* other);
  friend void swap(UserData_UserLinks& a, UserData_UserLinks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserLinks* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserLinks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserLinks& from);
  void MergeFrom(const UserData_UserLinks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserLinks* other);
  protected:
  explicit UserData_UserLinks(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vid = 1;
  bool has_vid() const;
  void clear_vid();
  static const int kVidFieldNumber = 1;
  const ::std::string& vid() const;
  void set_vid(const ::std::string& value);
  #if LANG_CXX11
  void set_vid(::std::string&& value);
  #endif
  void set_vid(const char* value);
  void set_vid(const char* value, size_t size);
  ::std::string* mutable_vid();
  ::std::string* release_vid();
  void set_allocated_vid(::std::string* vid);
  ::std::string* unsafe_arena_release_vid();
  void unsafe_arena_set_allocated_vid(
      ::std::string* vid);

  // optional string mail = 2;
  bool has_mail() const;
  void clear_mail();
  static const int kMailFieldNumber = 2;
  const ::std::string& mail() const;
  void set_mail(const ::std::string& value);
  #if LANG_CXX11
  void set_mail(::std::string&& value);
  #endif
  void set_mail(const char* value);
  void set_mail(const char* value, size_t size);
  ::std::string* mutable_mail();
  ::std::string* release_mail();
  void set_allocated_mail(::std::string* mail);
  ::std::string* unsafe_arena_release_mail();
  void unsafe_arena_set_allocated_mail(
      ::std::string* mail);

  // optional string ok = 3;
  bool has_ok() const;
  void clear_ok();
  static const int kOkFieldNumber = 3;
  const ::std::string& ok() const;
  void set_ok(const ::std::string& value);
  #if LANG_CXX11
  void set_ok(::std::string&& value);
  #endif
  void set_ok(const char* value);
  void set_ok(const char* value, size_t size);
  ::std::string* mutable_ok();
  ::std::string* release_ok();
  void set_allocated_ok(::std::string* ok);
  ::std::string* unsafe_arena_release_ok();
  void unsafe_arena_set_allocated_ok(
      ::std::string* ok);

  // optional string vk = 4;
  bool has_vk() const;
  void clear_vk();
  static const int kVkFieldNumber = 4;
  const ::std::string& vk() const;
  void set_vk(const ::std::string& value);
  #if LANG_CXX11
  void set_vk(::std::string&& value);
  #endif
  void set_vk(const char* value);
  void set_vk(const char* value, size_t size);
  ::std::string* mutable_vk();
  ::std::string* release_vk();
  void set_allocated_vk(::std::string* vk);
  ::std::string* unsafe_arena_release_vk();
  void unsafe_arena_set_allocated_vk(
      ::std::string* vk);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserLinks)
 private:
  void set_has_vid();
  void clear_has_vid();
  void set_has_mail();
  void clear_has_mail();
  void set_has_ok();
  void clear_has_ok();
  void set_has_vk();
  void clear_has_vk();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr vid_;
  ::google::protobuf::internal::ArenaStringPtr mail_;
  ::google::protobuf::internal::ArenaStringPtr ok_;
  ::google::protobuf::internal::ArenaStringPtr vk_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserClusters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserClusters) */ {
 public:
  UserData_UserClusters();
  virtual ~UserData_UserClusters();

  UserData_UserClusters(const UserData_UserClusters& from);

  inline UserData_UserClusters& operator=(const UserData_UserClusters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserClusters(UserData_UserClusters&& from) noexcept
    : UserData_UserClusters() {
    *this = ::std::move(from);
  }

  inline UserData_UserClusters& operator=(UserData_UserClusters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserClusters& default_instance();

  static inline const UserData_UserClusters* internal_default_instance() {
    return reinterpret_cast<const UserData_UserClusters*>(
               &_UserData_UserClusters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(UserData_UserClusters* other);
  void Swap(UserData_UserClusters* other);
  friend void swap(UserData_UserClusters& a, UserData_UserClusters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserClusters* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserClusters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserClusters& from);
  void MergeFrom(const UserData_UserClusters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserClusters* other);
  protected:
  explicit UserData_UserClusters(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 user_cluster_som = 1;
  bool has_user_cluster_som() const;
  void clear_user_cluster_som();
  static const int kUserClusterSomFieldNumber = 1;
  ::google::protobuf::uint32 user_cluster_som() const;
  void set_user_cluster_som(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserClusters)
 private:
  void set_has_user_cluster_som();
  void clear_has_user_cluster_som();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_cluster_som_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SimilarSites_SimilarSite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SimilarSites.SimilarSite) */ {
 public:
  UserData_SimilarSites_SimilarSite();
  virtual ~UserData_SimilarSites_SimilarSite();

  UserData_SimilarSites_SimilarSite(const UserData_SimilarSites_SimilarSite& from);

  inline UserData_SimilarSites_SimilarSite& operator=(const UserData_SimilarSites_SimilarSite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SimilarSites_SimilarSite(UserData_SimilarSites_SimilarSite&& from) noexcept
    : UserData_SimilarSites_SimilarSite() {
    *this = ::std::move(from);
  }

  inline UserData_SimilarSites_SimilarSite& operator=(UserData_SimilarSites_SimilarSite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SimilarSites_SimilarSite& default_instance();

  static inline const UserData_SimilarSites_SimilarSite* internal_default_instance() {
    return reinterpret_cast<const UserData_SimilarSites_SimilarSite*>(
               &_UserData_SimilarSites_SimilarSite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void UnsafeArenaSwap(UserData_SimilarSites_SimilarSite* other);
  void Swap(UserData_SimilarSites_SimilarSite* other);
  friend void swap(UserData_SimilarSites_SimilarSite& a, UserData_SimilarSites_SimilarSite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SimilarSites_SimilarSite* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SimilarSites_SimilarSite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SimilarSites_SimilarSite& from);
  void MergeFrom(const UserData_SimilarSites_SimilarSite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SimilarSites_SimilarSite* other);
  protected:
  explicit UserData_SimilarSites_SimilarSite(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required float weight = 2;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 2;
  float weight() const;
  void set_weight(float value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SimilarSites.SimilarSite)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_weight();
  void clear_has_weight();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  float weight_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SimilarSites : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SimilarSites) */ {
 public:
  UserData_SimilarSites();
  virtual ~UserData_SimilarSites();

  UserData_SimilarSites(const UserData_SimilarSites& from);

  inline UserData_SimilarSites& operator=(const UserData_SimilarSites& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SimilarSites(UserData_SimilarSites&& from) noexcept
    : UserData_SimilarSites() {
    *this = ::std::move(from);
  }

  inline UserData_SimilarSites& operator=(UserData_SimilarSites&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SimilarSites& default_instance();

  static inline const UserData_SimilarSites* internal_default_instance() {
    return reinterpret_cast<const UserData_SimilarSites*>(
               &_UserData_SimilarSites_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(UserData_SimilarSites* other);
  void Swap(UserData_SimilarSites* other);
  friend void swap(UserData_SimilarSites& a, UserData_SimilarSites& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SimilarSites* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SimilarSites* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SimilarSites& from);
  void MergeFrom(const UserData_SimilarSites& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SimilarSites* other);
  protected:
  explicit UserData_SimilarSites(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_SimilarSites_SimilarSite SimilarSite;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.SimilarSites.SimilarSite similar_site = 1;
  int similar_site_size() const;
  void clear_similar_site();
  static const int kSimilarSiteFieldNumber = 1;
  const ::cosmo::pb::UserData_SimilarSites_SimilarSite& similar_site(int index) const;
  ::cosmo::pb::UserData_SimilarSites_SimilarSite* mutable_similar_site(int index);
  ::cosmo::pb::UserData_SimilarSites_SimilarSite* add_similar_site();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SimilarSites_SimilarSite >*
      mutable_similar_site();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SimilarSites_SimilarSite >&
      similar_site() const;

  // optional uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SimilarSites)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SimilarSites_SimilarSite > similar_site_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_ContentThemes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.ContentThemes) */ {
 public:
  UserData_ContentThemes();
  virtual ~UserData_ContentThemes();

  UserData_ContentThemes(const UserData_ContentThemes& from);

  inline UserData_ContentThemes& operator=(const UserData_ContentThemes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_ContentThemes(UserData_ContentThemes&& from) noexcept
    : UserData_ContentThemes() {
    *this = ::std::move(from);
  }

  inline UserData_ContentThemes& operator=(UserData_ContentThemes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_ContentThemes& default_instance();

  static inline const UserData_ContentThemes* internal_default_instance() {
    return reinterpret_cast<const UserData_ContentThemes*>(
               &_UserData_ContentThemes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void UnsafeArenaSwap(UserData_ContentThemes* other);
  void Swap(UserData_ContentThemes* other);
  friend void swap(UserData_ContentThemes& a, UserData_ContentThemes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_ContentThemes* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_ContentThemes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_ContentThemes& from);
  void MergeFrom(const UserData_ContentThemes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_ContentThemes* other);
  protected:
  explicit UserData_ContentThemes(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float themes_vector = 4;
  int themes_vector_size() const;
  void clear_themes_vector();
  static const int kThemesVectorFieldNumber = 4;
  float themes_vector(int index) const;
  void set_themes_vector(int index, float value);
  void add_themes_vector(float value);
  const ::google::protobuf::RepeatedField< float >&
      themes_vector() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_themes_vector();

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 model_version = 2;
  bool has_model_version() const;
  void clear_model_version();
  static const int kModelVersionFieldNumber = 2;
  ::google::protobuf::uint32 model_version() const;
  void set_model_version(::google::protobuf::uint32 value);

  // optional uint32 urls = 3;
  bool has_urls() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 3;
  ::google::protobuf::uint32 urls() const;
  void set_urls(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.ContentThemes)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_model_version();
  void clear_has_model_version();
  void set_has_urls();
  void clear_has_urls();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > themes_vector_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 model_version_;
  ::google::protobuf::uint32 urls_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_StaticRecos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.StaticRecos) */ {
 public:
  UserData_StaticRecos();
  virtual ~UserData_StaticRecos();

  UserData_StaticRecos(const UserData_StaticRecos& from);

  inline UserData_StaticRecos& operator=(const UserData_StaticRecos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_StaticRecos(UserData_StaticRecos&& from) noexcept
    : UserData_StaticRecos() {
    *this = ::std::move(from);
  }

  inline UserData_StaticRecos& operator=(UserData_StaticRecos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_StaticRecos& default_instance();

  static inline const UserData_StaticRecos* internal_default_instance() {
    return reinterpret_cast<const UserData_StaticRecos*>(
               &_UserData_StaticRecos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(UserData_StaticRecos* other);
  void Swap(UserData_StaticRecos* other);
  friend void swap(UserData_StaticRecos& a, UserData_StaticRecos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_StaticRecos* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_StaticRecos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_StaticRecos& from);
  void MergeFrom(const UserData_StaticRecos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_StaticRecos* other);
  protected:
  explicit UserData_StaticRecos(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 source_id = 2;
  int source_id_size() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  ::google::protobuf::int64 source_id(int index) const;
  void set_source_id(int index, ::google::protobuf::int64 value);
  void add_source_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      source_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_source_id();

  // repeated int64 doc_id = 3;
  int doc_id_size() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 3;
  ::google::protobuf::int64 doc_id(int index) const;
  void set_doc_id(int index, ::google::protobuf::int64 value);
  void add_doc_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      doc_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_doc_id();

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.StaticRecos)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > source_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > doc_id_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_VisitedDocs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.VisitedDocs) */ {
 public:
  UserData_VisitedDocs();
  virtual ~UserData_VisitedDocs();

  UserData_VisitedDocs(const UserData_VisitedDocs& from);

  inline UserData_VisitedDocs& operator=(const UserData_VisitedDocs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_VisitedDocs(UserData_VisitedDocs&& from) noexcept
    : UserData_VisitedDocs() {
    *this = ::std::move(from);
  }

  inline UserData_VisitedDocs& operator=(UserData_VisitedDocs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_VisitedDocs& default_instance();

  static inline const UserData_VisitedDocs* internal_default_instance() {
    return reinterpret_cast<const UserData_VisitedDocs*>(
               &_UserData_VisitedDocs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(UserData_VisitedDocs* other);
  void Swap(UserData_VisitedDocs* other);
  friend void swap(UserData_VisitedDocs& a, UserData_VisitedDocs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_VisitedDocs* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_VisitedDocs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_VisitedDocs& from);
  void MergeFrom(const UserData_VisitedDocs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_VisitedDocs* other);
  protected:
  explicit UserData_VisitedDocs(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 source_id = 2;
  int source_id_size() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  ::google::protobuf::int64 source_id(int index) const;
  void set_source_id(int index, ::google::protobuf::int64 value);
  void add_source_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      source_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_source_id();

  // repeated int64 doc_id = 3;
  int doc_id_size() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 3;
  ::google::protobuf::int64 doc_id(int index) const;
  void set_doc_id(int index, ::google::protobuf::int64 value);
  void add_doc_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      doc_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_doc_id();

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.VisitedDocs)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > source_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > doc_id_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_LogsVisitedDocs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.LogsVisitedDocs) */ {
 public:
  UserData_LogsVisitedDocs();
  virtual ~UserData_LogsVisitedDocs();

  UserData_LogsVisitedDocs(const UserData_LogsVisitedDocs& from);

  inline UserData_LogsVisitedDocs& operator=(const UserData_LogsVisitedDocs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_LogsVisitedDocs(UserData_LogsVisitedDocs&& from) noexcept
    : UserData_LogsVisitedDocs() {
    *this = ::std::move(from);
  }

  inline UserData_LogsVisitedDocs& operator=(UserData_LogsVisitedDocs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_LogsVisitedDocs& default_instance();

  static inline const UserData_LogsVisitedDocs* internal_default_instance() {
    return reinterpret_cast<const UserData_LogsVisitedDocs*>(
               &_UserData_LogsVisitedDocs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(UserData_LogsVisitedDocs* other);
  void Swap(UserData_LogsVisitedDocs* other);
  friend void swap(UserData_LogsVisitedDocs& a, UserData_LogsVisitedDocs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_LogsVisitedDocs* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_LogsVisitedDocs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_LogsVisitedDocs& from);
  void MergeFrom(const UserData_LogsVisitedDocs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_LogsVisitedDocs* other);
  protected:
  explicit UserData_LogsVisitedDocs(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 doc_id = 1;
  int doc_id_size() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::int64 doc_id(int index) const;
  void set_doc_id(int index, ::google::protobuf::int64 value);
  void add_doc_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      doc_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_doc_id();

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.LogsVisitedDocs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > doc_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_LogsVisitedSources : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.LogsVisitedSources) */ {
 public:
  UserData_LogsVisitedSources();
  virtual ~UserData_LogsVisitedSources();

  UserData_LogsVisitedSources(const UserData_LogsVisitedSources& from);

  inline UserData_LogsVisitedSources& operator=(const UserData_LogsVisitedSources& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_LogsVisitedSources(UserData_LogsVisitedSources&& from) noexcept
    : UserData_LogsVisitedSources() {
    *this = ::std::move(from);
  }

  inline UserData_LogsVisitedSources& operator=(UserData_LogsVisitedSources&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_LogsVisitedSources& default_instance();

  static inline const UserData_LogsVisitedSources* internal_default_instance() {
    return reinterpret_cast<const UserData_LogsVisitedSources*>(
               &_UserData_LogsVisitedSources_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(UserData_LogsVisitedSources* other);
  void Swap(UserData_LogsVisitedSources* other);
  friend void swap(UserData_LogsVisitedSources& a, UserData_LogsVisitedSources& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_LogsVisitedSources* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_LogsVisitedSources* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_LogsVisitedSources& from);
  void MergeFrom(const UserData_LogsVisitedSources& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_LogsVisitedSources* other);
  protected:
  explicit UserData_LogsVisitedSources(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.LogsVisitedSource sources = 2;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 2;
  const ::cosmo::pb::UserData_LogsVisitedSource& sources(int index) const;
  ::cosmo::pb::UserData_LogsVisitedSource* mutable_sources(int index);
  ::cosmo::pb::UserData_LogsVisitedSource* add_sources();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_LogsVisitedSource >*
      mutable_sources();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_LogsVisitedSource >&
      sources() const;

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.LogsVisitedSources)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_LogsVisitedSource > sources_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_LogsVisitedSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.LogsVisitedSource) */ {
 public:
  UserData_LogsVisitedSource();
  virtual ~UserData_LogsVisitedSource();

  UserData_LogsVisitedSource(const UserData_LogsVisitedSource& from);

  inline UserData_LogsVisitedSource& operator=(const UserData_LogsVisitedSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_LogsVisitedSource(UserData_LogsVisitedSource&& from) noexcept
    : UserData_LogsVisitedSource() {
    *this = ::std::move(from);
  }

  inline UserData_LogsVisitedSource& operator=(UserData_LogsVisitedSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_LogsVisitedSource& default_instance();

  static inline const UserData_LogsVisitedSource* internal_default_instance() {
    return reinterpret_cast<const UserData_LogsVisitedSource*>(
               &_UserData_LogsVisitedSource_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(UserData_LogsVisitedSource* other);
  void Swap(UserData_LogsVisitedSource* other);
  friend void swap(UserData_LogsVisitedSource& a, UserData_LogsVisitedSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_LogsVisitedSource* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_LogsVisitedSource* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_LogsVisitedSource& from);
  void MergeFrom(const UserData_LogsVisitedSource& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_LogsVisitedSource* other);
  protected:
  explicit UserData_LogsVisitedSource(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // optional int64 source_urls = 2;
  bool has_source_urls() const;
  void clear_source_urls();
  static const int kSourceUrlsFieldNumber = 2;
  ::google::protobuf::int64 source_urls() const;
  void set_source_urls(::google::protobuf::int64 value);

  // optional int64 source_last_ts = 3;
  bool has_source_last_ts() const;
  void clear_source_last_ts();
  static const int kSourceLastTsFieldNumber = 3;
  ::google::protobuf::int64 source_last_ts() const;
  void set_source_last_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.LogsVisitedSource)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_source_urls();
  void clear_has_source_urls();
  void set_has_source_last_ts();
  void clear_has_source_last_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 source_urls_;
  ::google::protobuf::int64 source_last_ts_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SitesForUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SitesForUser) */ {
 public:
  UserData_SitesForUser();
  virtual ~UserData_SitesForUser();

  UserData_SitesForUser(const UserData_SitesForUser& from);

  inline UserData_SitesForUser& operator=(const UserData_SitesForUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SitesForUser(UserData_SitesForUser&& from) noexcept
    : UserData_SitesForUser() {
    *this = ::std::move(from);
  }

  inline UserData_SitesForUser& operator=(UserData_SitesForUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SitesForUser& default_instance();

  static inline const UserData_SitesForUser* internal_default_instance() {
    return reinterpret_cast<const UserData_SitesForUser*>(
               &_UserData_SitesForUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void UnsafeArenaSwap(UserData_SitesForUser* other);
  void Swap(UserData_SitesForUser* other);
  friend void swap(UserData_SitesForUser& a, UserData_SitesForUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SitesForUser* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SitesForUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SitesForUser& from);
  void MergeFrom(const UserData_SitesForUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SitesForUser* other);
  protected:
  explicit UserData_SitesForUser(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 site_hash = 2;
  int site_hash_size() const;
  void clear_site_hash();
  static const int kSiteHashFieldNumber = 2;
  ::google::protobuf::int64 site_hash(int index) const;
  void set_site_hash(int index, ::google::protobuf::int64 value);
  void add_site_hash(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      site_hash() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_site_hash();

  // repeated uint32 site_visits = 3;
  int site_visits_size() const;
  void clear_site_visits();
  static const int kSiteVisitsFieldNumber = 3;
  ::google::protobuf::uint32 site_visits(int index) const;
  void set_site_visits(int index, ::google::protobuf::uint32 value);
  void add_site_visits(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      site_visits() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_site_visits();

  // repeated uint32 site_urls = 4;
  int site_urls_size() const;
  void clear_site_urls();
  static const int kSiteUrlsFieldNumber = 4;
  ::google::protobuf::uint32 site_urls(int index) const;
  void set_site_urls(int index, ::google::protobuf::uint32 value);
  void add_site_urls(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      site_urls() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_site_urls();

  // repeated int64 site_last_ts = 5;
  int site_last_ts_size() const;
  void clear_site_last_ts();
  static const int kSiteLastTsFieldNumber = 5;
  ::google::protobuf::int64 site_last_ts(int index) const;
  void set_site_last_ts(int index, ::google::protobuf::int64 value);
  void add_site_last_ts(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      site_last_ts() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_site_last_ts();

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SitesForUser)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > site_hash_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > site_visits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > site_urls_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > site_last_ts_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_VkGroupsForUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.VkGroupsForUser) */ {
 public:
  UserData_VkGroupsForUser();
  virtual ~UserData_VkGroupsForUser();

  UserData_VkGroupsForUser(const UserData_VkGroupsForUser& from);

  inline UserData_VkGroupsForUser& operator=(const UserData_VkGroupsForUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_VkGroupsForUser(UserData_VkGroupsForUser&& from) noexcept
    : UserData_VkGroupsForUser() {
    *this = ::std::move(from);
  }

  inline UserData_VkGroupsForUser& operator=(UserData_VkGroupsForUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_VkGroupsForUser& default_instance();

  static inline const UserData_VkGroupsForUser* internal_default_instance() {
    return reinterpret_cast<const UserData_VkGroupsForUser*>(
               &_UserData_VkGroupsForUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void UnsafeArenaSwap(UserData_VkGroupsForUser* other);
  void Swap(UserData_VkGroupsForUser* other);
  friend void swap(UserData_VkGroupsForUser& a, UserData_VkGroupsForUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_VkGroupsForUser* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_VkGroupsForUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_VkGroupsForUser& from);
  void MergeFrom(const UserData_VkGroupsForUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_VkGroupsForUser* other);
  protected:
  explicit UserData_VkGroupsForUser(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 group_url_hash = 2;
  int group_url_hash_size() const;
  void clear_group_url_hash();
  static const int kGroupUrlHashFieldNumber = 2;
  ::google::protobuf::int64 group_url_hash(int index) const;
  void set_group_url_hash(int index, ::google::protobuf::int64 value);
  void add_group_url_hash(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      group_url_hash() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_group_url_hash();

  // repeated float rank = 3;
  int rank_size() const;
  void clear_rank();
  static const int kRankFieldNumber = 3;
  float rank(int index) const;
  void set_rank(int index, float value);
  void add_rank(float value);
  const ::google::protobuf::RepeatedField< float >&
      rank() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rank();

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.VkGroupsForUser)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > group_url_hash_;
  ::google::protobuf::RepeatedField< float > rank_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserKeywords : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserKeywords) */ {
 public:
  UserData_UserKeywords();
  virtual ~UserData_UserKeywords();

  UserData_UserKeywords(const UserData_UserKeywords& from);

  inline UserData_UserKeywords& operator=(const UserData_UserKeywords& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserKeywords(UserData_UserKeywords&& from) noexcept
    : UserData_UserKeywords() {
    *this = ::std::move(from);
  }

  inline UserData_UserKeywords& operator=(UserData_UserKeywords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserKeywords& default_instance();

  static inline const UserData_UserKeywords* internal_default_instance() {
    return reinterpret_cast<const UserData_UserKeywords*>(
               &_UserData_UserKeywords_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void UnsafeArenaSwap(UserData_UserKeywords* other);
  void Swap(UserData_UserKeywords* other);
  friend void swap(UserData_UserKeywords& a, UserData_UserKeywords& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserKeywords* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserKeywords* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserKeywords& from);
  void MergeFrom(const UserData_UserKeywords& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserKeywords* other);
  protected:
  explicit UserData_UserKeywords(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 keyword_hash = 2;
  int keyword_hash_size() const;
  void clear_keyword_hash();
  static const int kKeywordHashFieldNumber = 2;
  ::google::protobuf::int64 keyword_hash(int index) const;
  void set_keyword_hash(int index, ::google::protobuf::int64 value);
  void add_keyword_hash(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      keyword_hash() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_keyword_hash();

  // repeated float keyword_weight = 3;
  int keyword_weight_size() const;
  void clear_keyword_weight();
  static const int kKeywordWeightFieldNumber = 3;
  float keyword_weight(int index) const;
  void set_keyword_weight(int index, float value);
  void add_keyword_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      keyword_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_keyword_weight();

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserKeywords)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > keyword_hash_;
  ::google::protobuf::RepeatedField< float > keyword_weight_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserEvents_SiteDislike : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserEvents.SiteDislike) */ {
 public:
  UserData_UserEvents_SiteDislike();
  virtual ~UserData_UserEvents_SiteDislike();

  UserData_UserEvents_SiteDislike(const UserData_UserEvents_SiteDislike& from);

  inline UserData_UserEvents_SiteDislike& operator=(const UserData_UserEvents_SiteDislike& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserEvents_SiteDislike(UserData_UserEvents_SiteDislike&& from) noexcept
    : UserData_UserEvents_SiteDislike() {
    *this = ::std::move(from);
  }

  inline UserData_UserEvents_SiteDislike& operator=(UserData_UserEvents_SiteDislike&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserEvents_SiteDislike& default_instance();

  static inline const UserData_UserEvents_SiteDislike* internal_default_instance() {
    return reinterpret_cast<const UserData_UserEvents_SiteDislike*>(
               &_UserData_UserEvents_SiteDislike_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void UnsafeArenaSwap(UserData_UserEvents_SiteDislike* other);
  void Swap(UserData_UserEvents_SiteDislike* other);
  friend void swap(UserData_UserEvents_SiteDislike& a, UserData_UserEvents_SiteDislike& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserEvents_SiteDislike* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserEvents_SiteDislike* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserEvents_SiteDislike& from);
  void MergeFrom(const UserData_UserEvents_SiteDislike& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserEvents_SiteDislike* other);
  protected:
  explicit UserData_UserEvents_SiteDislike(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 site_hash = 1;
  bool has_site_hash() const;
  void clear_site_hash();
  static const int kSiteHashFieldNumber = 1;
  ::google::protobuf::int64 site_hash() const;
  void set_site_hash(::google::protobuf::int64 value);

  // optional int64 last_ts = 2;
  bool has_last_ts() const;
  void clear_last_ts();
  static const int kLastTsFieldNumber = 2;
  ::google::protobuf::int64 last_ts() const;
  void set_last_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserEvents.SiteDislike)
 private:
  void set_has_site_hash();
  void clear_has_site_hash();
  void set_has_last_ts();
  void clear_has_last_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 site_hash_;
  ::google::protobuf::int64 last_ts_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserEvents_SourceDislike : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserEvents.SourceDislike) */ {
 public:
  UserData_UserEvents_SourceDislike();
  virtual ~UserData_UserEvents_SourceDislike();

  UserData_UserEvents_SourceDislike(const UserData_UserEvents_SourceDislike& from);

  inline UserData_UserEvents_SourceDislike& operator=(const UserData_UserEvents_SourceDislike& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserEvents_SourceDislike(UserData_UserEvents_SourceDislike&& from) noexcept
    : UserData_UserEvents_SourceDislike() {
    *this = ::std::move(from);
  }

  inline UserData_UserEvents_SourceDislike& operator=(UserData_UserEvents_SourceDislike&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserEvents_SourceDislike& default_instance();

  static inline const UserData_UserEvents_SourceDislike* internal_default_instance() {
    return reinterpret_cast<const UserData_UserEvents_SourceDislike*>(
               &_UserData_UserEvents_SourceDislike_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void UnsafeArenaSwap(UserData_UserEvents_SourceDislike* other);
  void Swap(UserData_UserEvents_SourceDislike* other);
  friend void swap(UserData_UserEvents_SourceDislike& a, UserData_UserEvents_SourceDislike& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserEvents_SourceDislike* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserEvents_SourceDislike* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserEvents_SourceDislike& from);
  void MergeFrom(const UserData_UserEvents_SourceDislike& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserEvents_SourceDislike* other);
  protected:
  explicit UserData_UserEvents_SourceDislike(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // optional int64 last_ts = 2;
  bool has_last_ts() const;
  void clear_last_ts();
  static const int kLastTsFieldNumber = 2;
  ::google::protobuf::int64 last_ts() const;
  void set_last_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserEvents.SourceDislike)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_last_ts();
  void clear_has_last_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 last_ts_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserEvents_DocumentDislike : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserEvents.DocumentDislike) */ {
 public:
  UserData_UserEvents_DocumentDislike();
  virtual ~UserData_UserEvents_DocumentDislike();

  UserData_UserEvents_DocumentDislike(const UserData_UserEvents_DocumentDislike& from);

  inline UserData_UserEvents_DocumentDislike& operator=(const UserData_UserEvents_DocumentDislike& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserEvents_DocumentDislike(UserData_UserEvents_DocumentDislike&& from) noexcept
    : UserData_UserEvents_DocumentDislike() {
    *this = ::std::move(from);
  }

  inline UserData_UserEvents_DocumentDislike& operator=(UserData_UserEvents_DocumentDislike&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserEvents_DocumentDislike& default_instance();

  static inline const UserData_UserEvents_DocumentDislike* internal_default_instance() {
    return reinterpret_cast<const UserData_UserEvents_DocumentDislike*>(
               &_UserData_UserEvents_DocumentDislike_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void UnsafeArenaSwap(UserData_UserEvents_DocumentDislike* other);
  void Swap(UserData_UserEvents_DocumentDislike* other);
  friend void swap(UserData_UserEvents_DocumentDislike& a, UserData_UserEvents_DocumentDislike& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserEvents_DocumentDislike* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserEvents_DocumentDislike* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserEvents_DocumentDislike& from);
  void MergeFrom(const UserData_UserEvents_DocumentDislike& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserEvents_DocumentDislike* other);
  protected:
  explicit UserData_UserEvents_DocumentDislike(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 doc_id = 1;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // optional int64 last_ts = 2;
  bool has_last_ts() const;
  void clear_last_ts();
  static const int kLastTsFieldNumber = 2;
  ::google::protobuf::int64 last_ts() const;
  void set_last_ts(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserEvents.DocumentDislike)
 private:
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_last_ts();
  void clear_has_last_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 doc_id_;
  ::google::protobuf::int64 last_ts_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserEvents) */ {
 public:
  UserData_UserEvents();
  virtual ~UserData_UserEvents();

  UserData_UserEvents(const UserData_UserEvents& from);

  inline UserData_UserEvents& operator=(const UserData_UserEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserEvents(UserData_UserEvents&& from) noexcept
    : UserData_UserEvents() {
    *this = ::std::move(from);
  }

  inline UserData_UserEvents& operator=(UserData_UserEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserEvents& default_instance();

  static inline const UserData_UserEvents* internal_default_instance() {
    return reinterpret_cast<const UserData_UserEvents*>(
               &_UserData_UserEvents_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void UnsafeArenaSwap(UserData_UserEvents* other);
  void Swap(UserData_UserEvents* other);
  friend void swap(UserData_UserEvents& a, UserData_UserEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserEvents* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserEvents* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserEvents& from);
  void MergeFrom(const UserData_UserEvents& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserEvents* other);
  protected:
  explicit UserData_UserEvents(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_UserEvents_SiteDislike SiteDislike;
  typedef UserData_UserEvents_SourceDislike SourceDislike;
  typedef UserData_UserEvents_DocumentDislike DocumentDislike;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.UserEvents.SiteDislike site_dislikes = 1;
  int site_dislikes_size() const;
  void clear_site_dislikes();
  static const int kSiteDislikesFieldNumber = 1;
  const ::cosmo::pb::UserData_UserEvents_SiteDislike& site_dislikes(int index) const;
  ::cosmo::pb::UserData_UserEvents_SiteDislike* mutable_site_dislikes(int index);
  ::cosmo::pb::UserData_UserEvents_SiteDislike* add_site_dislikes();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SiteDislike >*
      mutable_site_dislikes();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SiteDislike >&
      site_dislikes() const;

  // repeated .cosmo.pb.UserData.UserEvents.SourceDislike source_dislikes = 2;
  int source_dislikes_size() const;
  void clear_source_dislikes();
  static const int kSourceDislikesFieldNumber = 2;
  const ::cosmo::pb::UserData_UserEvents_SourceDislike& source_dislikes(int index) const;
  ::cosmo::pb::UserData_UserEvents_SourceDislike* mutable_source_dislikes(int index);
  ::cosmo::pb::UserData_UserEvents_SourceDislike* add_source_dislikes();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SourceDislike >*
      mutable_source_dislikes();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SourceDislike >&
      source_dislikes() const;

  // repeated .cosmo.pb.UserData.UserEvents.DocumentDislike document_dislikes = 3;
  int document_dislikes_size() const;
  void clear_document_dislikes();
  static const int kDocumentDislikesFieldNumber = 3;
  const ::cosmo::pb::UserData_UserEvents_DocumentDislike& document_dislikes(int index) const;
  ::cosmo::pb::UserData_UserEvents_DocumentDislike* mutable_document_dislikes(int index);
  ::cosmo::pb::UserData_UserEvents_DocumentDislike* add_document_dislikes();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_DocumentDislike >*
      mutable_document_dislikes();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_DocumentDislike >&
      document_dislikes() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SiteDislike > site_dislikes_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SourceDislike > source_dislikes_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_DocumentDislike > document_dislikes_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserThemesEvents_UserThemeEventInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo) */ {
 public:
  UserData_UserThemesEvents_UserThemeEventInfo();
  virtual ~UserData_UserThemesEvents_UserThemeEventInfo();

  UserData_UserThemesEvents_UserThemeEventInfo(const UserData_UserThemesEvents_UserThemeEventInfo& from);

  inline UserData_UserThemesEvents_UserThemeEventInfo& operator=(const UserData_UserThemesEvents_UserThemeEventInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserThemesEvents_UserThemeEventInfo(UserData_UserThemesEvents_UserThemeEventInfo&& from) noexcept
    : UserData_UserThemesEvents_UserThemeEventInfo() {
    *this = ::std::move(from);
  }

  inline UserData_UserThemesEvents_UserThemeEventInfo& operator=(UserData_UserThemesEvents_UserThemeEventInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserThemesEvents_UserThemeEventInfo& default_instance();

  static inline const UserData_UserThemesEvents_UserThemeEventInfo* internal_default_instance() {
    return reinterpret_cast<const UserData_UserThemesEvents_UserThemeEventInfo*>(
               &_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void UnsafeArenaSwap(UserData_UserThemesEvents_UserThemeEventInfo* other);
  void Swap(UserData_UserThemesEvents_UserThemeEventInfo* other);
  friend void swap(UserData_UserThemesEvents_UserThemeEventInfo& a, UserData_UserThemesEvents_UserThemeEventInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserThemesEvents_UserThemeEventInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserThemesEvents_UserThemeEventInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserThemesEvents_UserThemeEventInfo& from);
  void MergeFrom(const UserData_UserThemesEvents_UserThemeEventInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserThemesEvents_UserThemeEventInfo* other);
  protected:
  explicit UserData_UserThemesEvents_UserThemeEventInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 last_timestamp = 1;
  bool has_last_timestamp() const;
  void clear_last_timestamp();
  static const int kLastTimestampFieldNumber = 1;
  ::google::protobuf::int64 last_timestamp() const;
  void set_last_timestamp(::google::protobuf::int64 value);

  // required int64 count = 2 [default = 0];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo)
 private:
  void set_has_last_timestamp();
  void clear_has_last_timestamp();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 last_timestamp_;
  ::google::protobuf::int64 count_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserThemesEvents_UserThemeEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent) */ {
 public:
  UserData_UserThemesEvents_UserThemeEvent();
  virtual ~UserData_UserThemesEvents_UserThemeEvent();

  UserData_UserThemesEvents_UserThemeEvent(const UserData_UserThemesEvents_UserThemeEvent& from);

  inline UserData_UserThemesEvents_UserThemeEvent& operator=(const UserData_UserThemesEvents_UserThemeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserThemesEvents_UserThemeEvent(UserData_UserThemesEvents_UserThemeEvent&& from) noexcept
    : UserData_UserThemesEvents_UserThemeEvent() {
    *this = ::std::move(from);
  }

  inline UserData_UserThemesEvents_UserThemeEvent& operator=(UserData_UserThemesEvents_UserThemeEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserThemesEvents_UserThemeEvent& default_instance();

  static inline const UserData_UserThemesEvents_UserThemeEvent* internal_default_instance() {
    return reinterpret_cast<const UserData_UserThemesEvents_UserThemeEvent*>(
               &_UserData_UserThemesEvents_UserThemeEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void UnsafeArenaSwap(UserData_UserThemesEvents_UserThemeEvent* other);
  void Swap(UserData_UserThemesEvents_UserThemeEvent* other);
  friend void swap(UserData_UserThemesEvents_UserThemeEvent& a, UserData_UserThemesEvents_UserThemeEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserThemesEvents_UserThemeEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserThemesEvents_UserThemeEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserThemesEvents_UserThemeEvent& from);
  void MergeFrom(const UserData_UserThemesEvents_UserThemeEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserThemesEvents_UserThemeEvent* other);
  protected:
  explicit UserData_UserThemesEvents_UserThemeEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo clicks = 2;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 2;
  private:
  void _slow_mutable_clicks();
  void _slow_set_allocated_clicks(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo** clicks);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* _slow_release_clicks();
  public:
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& clicks() const;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* mutable_clicks();
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* release_clicks();
  void set_allocated_clicks(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* clicks);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* unsafe_arena_release_clicks();
  void unsafe_arena_set_allocated_clicks(
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* clicks);

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo shows = 3;
  bool has_shows() const;
  void clear_shows();
  static const int kShowsFieldNumber = 3;
  private:
  void _slow_mutable_shows();
  void _slow_set_allocated_shows(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo** shows);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* _slow_release_shows();
  public:
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& shows() const;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* mutable_shows();
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* release_shows();
  void set_allocated_shows(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* shows);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* unsafe_arena_release_shows();
  void unsafe_arena_set_allocated_shows(
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* shows);

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_dislikes = 4;
  bool has_doc_dislikes() const;
  void clear_doc_dislikes();
  static const int kDocDislikesFieldNumber = 4;
  private:
  void _slow_mutable_doc_dislikes();
  void _slow_set_allocated_doc_dislikes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo** doc_dislikes);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* _slow_release_doc_dislikes();
  public:
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& doc_dislikes() const;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* mutable_doc_dislikes();
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* release_doc_dislikes();
  void set_allocated_doc_dislikes(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_dislikes);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* unsafe_arena_release_doc_dislikes();
  void unsafe_arena_set_allocated_doc_dislikes(
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_dislikes);

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_likes = 5;
  bool has_doc_likes() const;
  void clear_doc_likes();
  static const int kDocLikesFieldNumber = 5;
  private:
  void _slow_mutable_doc_likes();
  void _slow_set_allocated_doc_likes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo** doc_likes);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* _slow_release_doc_likes();
  public:
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& doc_likes() const;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* mutable_doc_likes();
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* release_doc_likes();
  void set_allocated_doc_likes(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_likes);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* unsafe_arena_release_doc_likes();
  void unsafe_arena_set_allocated_doc_likes(
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_likes);

  // optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo site_dislikes = 6;
  bool has_site_dislikes() const;
  void clear_site_dislikes();
  static const int kSiteDislikesFieldNumber = 6;
  private:
  void _slow_mutable_site_dislikes();
  void _slow_set_allocated_site_dislikes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo** site_dislikes);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* _slow_release_site_dislikes();
  public:
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& site_dislikes() const;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* mutable_site_dislikes();
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* release_site_dislikes();
  void set_allocated_site_dislikes(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* site_dislikes);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* unsafe_arena_release_site_dislikes();
  void unsafe_arena_set_allocated_site_dislikes(
      ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* site_dislikes);

  // required int64 theme_hash = 1;
  bool has_theme_hash() const;
  void clear_theme_hash();
  static const int kThemeHashFieldNumber = 1;
  ::google::protobuf::int64 theme_hash() const;
  void set_theme_hash(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent)
 private:
  void set_has_theme_hash();
  void clear_has_theme_hash();
  void set_has_clicks();
  void clear_has_clicks();
  void set_has_shows();
  void clear_has_shows();
  void set_has_doc_dislikes();
  void clear_has_doc_dislikes();
  void set_has_doc_likes();
  void clear_has_doc_likes();
  void set_has_site_dislikes();
  void clear_has_site_dislikes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* clicks_;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* shows_;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_dislikes_;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_likes_;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* site_dislikes_;
  ::google::protobuf::int64 theme_hash_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserThemesEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserThemesEvents) */ {
 public:
  UserData_UserThemesEvents();
  virtual ~UserData_UserThemesEvents();

  UserData_UserThemesEvents(const UserData_UserThemesEvents& from);

  inline UserData_UserThemesEvents& operator=(const UserData_UserThemesEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserThemesEvents(UserData_UserThemesEvents&& from) noexcept
    : UserData_UserThemesEvents() {
    *this = ::std::move(from);
  }

  inline UserData_UserThemesEvents& operator=(UserData_UserThemesEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserThemesEvents& default_instance();

  static inline const UserData_UserThemesEvents* internal_default_instance() {
    return reinterpret_cast<const UserData_UserThemesEvents*>(
               &_UserData_UserThemesEvents_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void UnsafeArenaSwap(UserData_UserThemesEvents* other);
  void Swap(UserData_UserThemesEvents* other);
  friend void swap(UserData_UserThemesEvents& a, UserData_UserThemesEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserThemesEvents* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserThemesEvents* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserThemesEvents& from);
  void MergeFrom(const UserData_UserThemesEvents& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserThemesEvents* other);
  protected:
  explicit UserData_UserThemesEvents(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_UserThemesEvents_UserThemeEventInfo UserThemeEventInfo;
  typedef UserData_UserThemesEvents_UserThemeEvent UserThemeEvent;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.UserThemesEvents.UserThemeEvent events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent& events(int index) const;
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent* mutable_events(int index);
  ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent* add_events();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserThemesEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent > events_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserI2IEvents_UserI2IEventInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo) */ {
 public:
  UserData_UserI2IEvents_UserI2IEventInfo();
  virtual ~UserData_UserI2IEvents_UserI2IEventInfo();

  UserData_UserI2IEvents_UserI2IEventInfo(const UserData_UserI2IEvents_UserI2IEventInfo& from);

  inline UserData_UserI2IEvents_UserI2IEventInfo& operator=(const UserData_UserI2IEvents_UserI2IEventInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserI2IEvents_UserI2IEventInfo(UserData_UserI2IEvents_UserI2IEventInfo&& from) noexcept
    : UserData_UserI2IEvents_UserI2IEventInfo() {
    *this = ::std::move(from);
  }

  inline UserData_UserI2IEvents_UserI2IEventInfo& operator=(UserData_UserI2IEvents_UserI2IEventInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserI2IEvents_UserI2IEventInfo& default_instance();

  static inline const UserData_UserI2IEvents_UserI2IEventInfo* internal_default_instance() {
    return reinterpret_cast<const UserData_UserI2IEvents_UserI2IEventInfo*>(
               &_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void UnsafeArenaSwap(UserData_UserI2IEvents_UserI2IEventInfo* other);
  void Swap(UserData_UserI2IEvents_UserI2IEventInfo* other);
  friend void swap(UserData_UserI2IEvents_UserI2IEventInfo& a, UserData_UserI2IEvents_UserI2IEventInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserI2IEvents_UserI2IEventInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserI2IEvents_UserI2IEventInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserI2IEvents_UserI2IEventInfo& from);
  void MergeFrom(const UserData_UserI2IEvents_UserI2IEventInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserI2IEvents_UserI2IEventInfo* other);
  protected:
  explicit UserData_UserI2IEvents_UserI2IEventInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 last_timestamp = 1;
  bool has_last_timestamp() const;
  void clear_last_timestamp();
  static const int kLastTimestampFieldNumber = 1;
  ::google::protobuf::int64 last_timestamp() const;
  void set_last_timestamp(::google::protobuf::int64 value);

  // required int64 count = 2 [default = 0];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo)
 private:
  void set_has_last_timestamp();
  void clear_has_last_timestamp();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 last_timestamp_;
  ::google::protobuf::int64 count_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserI2IEvents_UserI2IEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent) */ {
 public:
  UserData_UserI2IEvents_UserI2IEvent();
  virtual ~UserData_UserI2IEvents_UserI2IEvent();

  UserData_UserI2IEvents_UserI2IEvent(const UserData_UserI2IEvents_UserI2IEvent& from);

  inline UserData_UserI2IEvents_UserI2IEvent& operator=(const UserData_UserI2IEvents_UserI2IEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserI2IEvents_UserI2IEvent(UserData_UserI2IEvents_UserI2IEvent&& from) noexcept
    : UserData_UserI2IEvents_UserI2IEvent() {
    *this = ::std::move(from);
  }

  inline UserData_UserI2IEvents_UserI2IEvent& operator=(UserData_UserI2IEvents_UserI2IEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserI2IEvents_UserI2IEvent& default_instance();

  static inline const UserData_UserI2IEvents_UserI2IEvent* internal_default_instance() {
    return reinterpret_cast<const UserData_UserI2IEvents_UserI2IEvent*>(
               &_UserData_UserI2IEvents_UserI2IEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void UnsafeArenaSwap(UserData_UserI2IEvents_UserI2IEvent* other);
  void Swap(UserData_UserI2IEvents_UserI2IEvent* other);
  friend void swap(UserData_UserI2IEvents_UserI2IEvent& a, UserData_UserI2IEvents_UserI2IEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserI2IEvents_UserI2IEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserI2IEvents_UserI2IEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserI2IEvents_UserI2IEvent& from);
  void MergeFrom(const UserData_UserI2IEvents_UserI2IEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserI2IEvents_UserI2IEvent* other);
  protected:
  explicit UserData_UserI2IEvents_UserI2IEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo clicks = 2;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 2;
  private:
  void _slow_mutable_clicks();
  void _slow_set_allocated_clicks(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo** clicks);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* _slow_release_clicks();
  public:
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& clicks() const;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* mutable_clicks();
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* release_clicks();
  void set_allocated_clicks(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* clicks);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* unsafe_arena_release_clicks();
  void unsafe_arena_set_allocated_clicks(
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* clicks);

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo shows = 3;
  bool has_shows() const;
  void clear_shows();
  static const int kShowsFieldNumber = 3;
  private:
  void _slow_mutable_shows();
  void _slow_set_allocated_shows(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo** shows);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* _slow_release_shows();
  public:
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& shows() const;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* mutable_shows();
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* release_shows();
  void set_allocated_shows(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* shows);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* unsafe_arena_release_shows();
  void unsafe_arena_set_allocated_shows(
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* shows);

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_dislikes = 4;
  bool has_doc_dislikes() const;
  void clear_doc_dislikes();
  static const int kDocDislikesFieldNumber = 4;
  private:
  void _slow_mutable_doc_dislikes();
  void _slow_set_allocated_doc_dislikes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo** doc_dislikes);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* _slow_release_doc_dislikes();
  public:
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& doc_dislikes() const;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* mutable_doc_dislikes();
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* release_doc_dislikes();
  void set_allocated_doc_dislikes(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_dislikes);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* unsafe_arena_release_doc_dislikes();
  void unsafe_arena_set_allocated_doc_dislikes(
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_dislikes);

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_likes = 5;
  bool has_doc_likes() const;
  void clear_doc_likes();
  static const int kDocLikesFieldNumber = 5;
  private:
  void _slow_mutable_doc_likes();
  void _slow_set_allocated_doc_likes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo** doc_likes);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* _slow_release_doc_likes();
  public:
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& doc_likes() const;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* mutable_doc_likes();
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* release_doc_likes();
  void set_allocated_doc_likes(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_likes);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* unsafe_arena_release_doc_likes();
  void unsafe_arena_set_allocated_doc_likes(
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_likes);

  // optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo site_dislikes = 6;
  bool has_site_dislikes() const;
  void clear_site_dislikes();
  static const int kSiteDislikesFieldNumber = 6;
  private:
  void _slow_mutable_site_dislikes();
  void _slow_set_allocated_site_dislikes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo** site_dislikes);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* _slow_release_site_dislikes();
  public:
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& site_dislikes() const;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* mutable_site_dislikes();
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* release_site_dislikes();
  void set_allocated_site_dislikes(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* site_dislikes);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* unsafe_arena_release_site_dislikes();
  void unsafe_arena_set_allocated_site_dislikes(
      ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* site_dislikes);

  // required int64 i2i_doc_id = 1;
  bool has_i2i_doc_id() const;
  void clear_i2i_doc_id();
  static const int kI2IDocIdFieldNumber = 1;
  ::google::protobuf::int64 i2i_doc_id() const;
  void set_i2i_doc_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent)
 private:
  void set_has_i2i_doc_id();
  void clear_has_i2i_doc_id();
  void set_has_clicks();
  void clear_has_clicks();
  void set_has_shows();
  void clear_has_shows();
  void set_has_doc_dislikes();
  void clear_has_doc_dislikes();
  void set_has_doc_likes();
  void clear_has_doc_likes();
  void set_has_site_dislikes();
  void clear_has_site_dislikes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* clicks_;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* shows_;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_dislikes_;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_likes_;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* site_dislikes_;
  ::google::protobuf::int64 i2i_doc_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserI2IEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserI2IEvents) */ {
 public:
  UserData_UserI2IEvents();
  virtual ~UserData_UserI2IEvents();

  UserData_UserI2IEvents(const UserData_UserI2IEvents& from);

  inline UserData_UserI2IEvents& operator=(const UserData_UserI2IEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserI2IEvents(UserData_UserI2IEvents&& from) noexcept
    : UserData_UserI2IEvents() {
    *this = ::std::move(from);
  }

  inline UserData_UserI2IEvents& operator=(UserData_UserI2IEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserI2IEvents& default_instance();

  static inline const UserData_UserI2IEvents* internal_default_instance() {
    return reinterpret_cast<const UserData_UserI2IEvents*>(
               &_UserData_UserI2IEvents_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void UnsafeArenaSwap(UserData_UserI2IEvents* other);
  void Swap(UserData_UserI2IEvents* other);
  friend void swap(UserData_UserI2IEvents& a, UserData_UserI2IEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserI2IEvents* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserI2IEvents* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserI2IEvents& from);
  void MergeFrom(const UserData_UserI2IEvents& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserI2IEvents* other);
  protected:
  explicit UserData_UserI2IEvents(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_UserI2IEvents_UserI2IEventInfo UserI2IEventInfo;
  typedef UserData_UserI2IEvents_UserI2IEvent UserI2IEvent;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.UserI2IEvents.UserI2IEvent events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent& events(int index) const;
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent* mutable_events(int index);
  ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent* add_events();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserI2IEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent > events_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserSourcesEvents_UserSourceEventInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo) */ {
 public:
  UserData_UserSourcesEvents_UserSourceEventInfo();
  virtual ~UserData_UserSourcesEvents_UserSourceEventInfo();

  UserData_UserSourcesEvents_UserSourceEventInfo(const UserData_UserSourcesEvents_UserSourceEventInfo& from);

  inline UserData_UserSourcesEvents_UserSourceEventInfo& operator=(const UserData_UserSourcesEvents_UserSourceEventInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserSourcesEvents_UserSourceEventInfo(UserData_UserSourcesEvents_UserSourceEventInfo&& from) noexcept
    : UserData_UserSourcesEvents_UserSourceEventInfo() {
    *this = ::std::move(from);
  }

  inline UserData_UserSourcesEvents_UserSourceEventInfo& operator=(UserData_UserSourcesEvents_UserSourceEventInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserSourcesEvents_UserSourceEventInfo& default_instance();

  static inline const UserData_UserSourcesEvents_UserSourceEventInfo* internal_default_instance() {
    return reinterpret_cast<const UserData_UserSourcesEvents_UserSourceEventInfo*>(
               &_UserData_UserSourcesEvents_UserSourceEventInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void UnsafeArenaSwap(UserData_UserSourcesEvents_UserSourceEventInfo* other);
  void Swap(UserData_UserSourcesEvents_UserSourceEventInfo* other);
  friend void swap(UserData_UserSourcesEvents_UserSourceEventInfo& a, UserData_UserSourcesEvents_UserSourceEventInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserSourcesEvents_UserSourceEventInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserSourcesEvents_UserSourceEventInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserSourcesEvents_UserSourceEventInfo& from);
  void MergeFrom(const UserData_UserSourcesEvents_UserSourceEventInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserSourcesEvents_UserSourceEventInfo* other);
  protected:
  explicit UserData_UserSourcesEvents_UserSourceEventInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 last_timestamp = 1;
  bool has_last_timestamp() const;
  void clear_last_timestamp();
  static const int kLastTimestampFieldNumber = 1;
  ::google::protobuf::int64 last_timestamp() const;
  void set_last_timestamp(::google::protobuf::int64 value);

  // required int64 count = 2 [default = 0];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo)
 private:
  void set_has_last_timestamp();
  void clear_has_last_timestamp();
  void set_has_count();
  void clear_has_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 last_timestamp_;
  ::google::protobuf::int64 count_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserSourcesEvents_UserSourceEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent) */ {
 public:
  UserData_UserSourcesEvents_UserSourceEvent();
  virtual ~UserData_UserSourcesEvents_UserSourceEvent();

  UserData_UserSourcesEvents_UserSourceEvent(const UserData_UserSourcesEvents_UserSourceEvent& from);

  inline UserData_UserSourcesEvents_UserSourceEvent& operator=(const UserData_UserSourcesEvents_UserSourceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserSourcesEvents_UserSourceEvent(UserData_UserSourcesEvents_UserSourceEvent&& from) noexcept
    : UserData_UserSourcesEvents_UserSourceEvent() {
    *this = ::std::move(from);
  }

  inline UserData_UserSourcesEvents_UserSourceEvent& operator=(UserData_UserSourcesEvents_UserSourceEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserSourcesEvents_UserSourceEvent& default_instance();

  static inline const UserData_UserSourcesEvents_UserSourceEvent* internal_default_instance() {
    return reinterpret_cast<const UserData_UserSourcesEvents_UserSourceEvent*>(
               &_UserData_UserSourcesEvents_UserSourceEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void UnsafeArenaSwap(UserData_UserSourcesEvents_UserSourceEvent* other);
  void Swap(UserData_UserSourcesEvents_UserSourceEvent* other);
  friend void swap(UserData_UserSourcesEvents_UserSourceEvent& a, UserData_UserSourcesEvents_UserSourceEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserSourcesEvents_UserSourceEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserSourcesEvents_UserSourceEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserSourcesEvents_UserSourceEvent& from);
  void MergeFrom(const UserData_UserSourcesEvents_UserSourceEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserSourcesEvents_UserSourceEvent* other);
  protected:
  explicit UserData_UserSourcesEvents_UserSourceEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo clicks = 2;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 2;
  private:
  void _slow_mutable_clicks();
  void _slow_set_allocated_clicks(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo** clicks);
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* _slow_release_clicks();
  public:
  const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo& clicks() const;
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* mutable_clicks();
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* release_clicks();
  void set_allocated_clicks(::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* clicks);
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* unsafe_arena_release_clicks();
  void unsafe_arena_set_allocated_clicks(
      ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* clicks);

  // optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo shows = 3;
  bool has_shows() const;
  void clear_shows();
  static const int kShowsFieldNumber = 3;
  private:
  void _slow_mutable_shows();
  void _slow_set_allocated_shows(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo** shows);
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* _slow_release_shows();
  public:
  const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo& shows() const;
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* mutable_shows();
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* release_shows();
  void set_allocated_shows(::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* shows);
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* unsafe_arena_release_shows();
  void unsafe_arena_set_allocated_shows(
      ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* shows);

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_clicks();
  void clear_has_clicks();
  void set_has_shows();
  void clear_has_shows();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* clicks_;
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* shows_;
  ::google::protobuf::int64 source_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserSourcesEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserSourcesEvents) */ {
 public:
  UserData_UserSourcesEvents();
  virtual ~UserData_UserSourcesEvents();

  UserData_UserSourcesEvents(const UserData_UserSourcesEvents& from);

  inline UserData_UserSourcesEvents& operator=(const UserData_UserSourcesEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserSourcesEvents(UserData_UserSourcesEvents&& from) noexcept
    : UserData_UserSourcesEvents() {
    *this = ::std::move(from);
  }

  inline UserData_UserSourcesEvents& operator=(UserData_UserSourcesEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserSourcesEvents& default_instance();

  static inline const UserData_UserSourcesEvents* internal_default_instance() {
    return reinterpret_cast<const UserData_UserSourcesEvents*>(
               &_UserData_UserSourcesEvents_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void UnsafeArenaSwap(UserData_UserSourcesEvents* other);
  void Swap(UserData_UserSourcesEvents* other);
  friend void swap(UserData_UserSourcesEvents& a, UserData_UserSourcesEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserSourcesEvents* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserSourcesEvents* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserSourcesEvents& from);
  void MergeFrom(const UserData_UserSourcesEvents& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserSourcesEvents* other);
  protected:
  explicit UserData_UserSourcesEvents(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_UserSourcesEvents_UserSourceEventInfo UserSourceEventInfo;
  typedef UserData_UserSourcesEvents_UserSourceEvent UserSourceEvent;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent& events(int index) const;
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent* mutable_events(int index);
  ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent* add_events();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserSourcesEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent > events_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideos) */ {
 public:
  UserData_UserVideos();
  virtual ~UserData_UserVideos();

  UserData_UserVideos(const UserData_UserVideos& from);

  inline UserData_UserVideos& operator=(const UserData_UserVideos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideos(UserData_UserVideos&& from) noexcept
    : UserData_UserVideos() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideos& operator=(UserData_UserVideos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideos& default_instance();

  static inline const UserData_UserVideos* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideos*>(
               &_UserData_UserVideos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void UnsafeArenaSwap(UserData_UserVideos* other);
  void Swap(UserData_UserVideos* other);
  friend void swap(UserData_UserVideos& a, UserData_UserVideos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideos* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideos& from);
  void MergeFrom(const UserData_UserVideos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideos* other);
  protected:
  explicit UserData_UserVideos(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 video_id = 2;
  int video_id_size() const;
  void clear_video_id();
  static const int kVideoIdFieldNumber = 2;
  ::google::protobuf::int64 video_id(int index) const;
  void set_video_id(int index, ::google::protobuf::int64 value);
  void add_video_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      video_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_video_id();

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideos)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > video_id_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserMusic_TrackInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserMusic.TrackInfo) */ {
 public:
  UserData_UserMusic_TrackInfo();
  virtual ~UserData_UserMusic_TrackInfo();

  UserData_UserMusic_TrackInfo(const UserData_UserMusic_TrackInfo& from);

  inline UserData_UserMusic_TrackInfo& operator=(const UserData_UserMusic_TrackInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserMusic_TrackInfo(UserData_UserMusic_TrackInfo&& from) noexcept
    : UserData_UserMusic_TrackInfo() {
    *this = ::std::move(from);
  }

  inline UserData_UserMusic_TrackInfo& operator=(UserData_UserMusic_TrackInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserMusic_TrackInfo& default_instance();

  static inline const UserData_UserMusic_TrackInfo* internal_default_instance() {
    return reinterpret_cast<const UserData_UserMusic_TrackInfo*>(
               &_UserData_UserMusic_TrackInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void UnsafeArenaSwap(UserData_UserMusic_TrackInfo* other);
  void Swap(UserData_UserMusic_TrackInfo* other);
  friend void swap(UserData_UserMusic_TrackInfo& a, UserData_UserMusic_TrackInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserMusic_TrackInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserMusic_TrackInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserMusic_TrackInfo& from);
  void MergeFrom(const UserData_UserMusic_TrackInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserMusic_TrackInfo* other);
  protected:
  explicit UserData_UserMusic_TrackInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 hash_id = 1;
  bool has_hash_id() const;
  void clear_hash_id();
  static const int kHashIdFieldNumber = 1;
  ::google::protobuf::int64 hash_id() const;
  void set_hash_id(::google::protobuf::int64 value);

  // optional int64 last_listen_ts = 3;
  bool has_last_listen_ts() const;
  void clear_last_listen_ts();
  static const int kLastListenTsFieldNumber = 3;
  ::google::protobuf::int64 last_listen_ts() const;
  void set_last_listen_ts(::google::protobuf::int64 value);

  // optional uint32 listens_count = 2;
  bool has_listens_count() const;
  void clear_listens_count();
  static const int kListensCountFieldNumber = 2;
  ::google::protobuf::uint32 listens_count() const;
  void set_listens_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserMusic.TrackInfo)
 private:
  void set_has_hash_id();
  void clear_has_hash_id();
  void set_has_listens_count();
  void clear_has_listens_count();
  void set_has_last_listen_ts();
  void clear_has_last_listen_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 hash_id_;
  ::google::protobuf::int64 last_listen_ts_;
  ::google::protobuf::uint32 listens_count_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserMusic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserMusic) */ {
 public:
  UserData_UserMusic();
  virtual ~UserData_UserMusic();

  UserData_UserMusic(const UserData_UserMusic& from);

  inline UserData_UserMusic& operator=(const UserData_UserMusic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserMusic(UserData_UserMusic&& from) noexcept
    : UserData_UserMusic() {
    *this = ::std::move(from);
  }

  inline UserData_UserMusic& operator=(UserData_UserMusic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserMusic& default_instance();

  static inline const UserData_UserMusic* internal_default_instance() {
    return reinterpret_cast<const UserData_UserMusic*>(
               &_UserData_UserMusic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void UnsafeArenaSwap(UserData_UserMusic* other);
  void Swap(UserData_UserMusic* other);
  friend void swap(UserData_UserMusic& a, UserData_UserMusic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserMusic* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserMusic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserMusic& from);
  void MergeFrom(const UserData_UserMusic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserMusic* other);
  protected:
  explicit UserData_UserMusic(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_UserMusic_TrackInfo TrackInfo;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.UserMusic.TrackInfo tracks = 2;
  int tracks_size() const;
  void clear_tracks();
  static const int kTracksFieldNumber = 2;
  const ::cosmo::pb::UserData_UserMusic_TrackInfo& tracks(int index) const;
  ::cosmo::pb::UserData_UserMusic_TrackInfo* mutable_tracks(int index);
  ::cosmo::pb::UserData_UserMusic_TrackInfo* add_tracks();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserMusic_TrackInfo >*
      mutable_tracks();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserMusic_TrackInfo >&
      tracks() const;

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserMusic)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserMusic_TrackInfo > tracks_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_DailyCounters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_DailyCounters();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_DailyCounters();

  UserData_UserVideoEvents_UserVideoEvent_DailyCounters(const UserData_UserVideoEvents_UserVideoEvent_DailyCounters& from);

  inline UserData_UserVideoEvents_UserVideoEvent_DailyCounters& operator=(const UserData_UserVideoEvents_UserVideoEvent_DailyCounters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_DailyCounters(UserData_UserVideoEvents_UserVideoEvent_DailyCounters&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_DailyCounters() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_DailyCounters& operator=(UserData_UserVideoEvents_UserVideoEvent_DailyCounters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_DailyCounters& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_DailyCounters* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_DailyCounters*>(
               &_UserData_UserVideoEvents_UserVideoEvent_DailyCounters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_DailyCounters* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_DailyCounters* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_DailyCounters& a, UserData_UserVideoEvents_UserVideoEvent_DailyCounters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_DailyCounters* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_DailyCounters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_DailyCounters& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_DailyCounters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_DailyCounters* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_DailyCounters(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 common = 1;
  bool has_common() const;
  void clear_common();
  static const int kCommonFieldNumber = 1;
  ::google::protobuf::uint64 common() const;
  void set_common(::google::protobuf::uint64 value);

  // optional uint64 morning = 2;
  bool has_morning() const;
  void clear_morning();
  static const int kMorningFieldNumber = 2;
  ::google::protobuf::uint64 morning() const;
  void set_morning(::google::protobuf::uint64 value);

  // optional uint64 day = 3;
  bool has_day() const;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::google::protobuf::uint64 day() const;
  void set_day(::google::protobuf::uint64 value);

  // optional uint64 evening = 4;
  bool has_evening() const;
  void clear_evening();
  static const int kEveningFieldNumber = 4;
  ::google::protobuf::uint64 evening() const;
  void set_evening(::google::protobuf::uint64 value);

  // optional uint64 night = 5;
  bool has_night() const;
  void clear_night();
  static const int kNightFieldNumber = 5;
  ::google::protobuf::uint64 night() const;
  void set_night(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters)
 private:
  void set_has_common();
  void clear_has_common();
  void set_has_morning();
  void clear_has_morning();
  void set_has_day();
  void clear_has_day();
  void set_has_evening();
  void clear_has_evening();
  void set_has_night();
  void clear_has_night();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 common_;
  ::google::protobuf::uint64 morning_;
  ::google::protobuf::uint64 day_;
  ::google::protobuf::uint64 evening_;
  ::google::protobuf::uint64 night_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Location();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Location();

  UserData_UserVideoEvents_UserVideoEvent_Location(const UserData_UserVideoEvents_UserVideoEvent_Location& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Location& operator=(const UserData_UserVideoEvents_UserVideoEvent_Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Location(UserData_UserVideoEvents_UserVideoEvent_Location&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Location() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Location& operator=(UserData_UserVideoEvents_UserVideoEvent_Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Location& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Location* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Location*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Location* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Location* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Location& a, UserData_UserVideoEvents_UserVideoEvent_Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Location* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Location* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Location& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Location& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Location* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Location(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const char* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);
  ::std::string* unsafe_arena_release_block();
  void unsafe_arena_set_allocated_block(
      ::std::string* block);

  // optional string screen = 2;
  bool has_screen() const;
  void clear_screen();
  static const int kScreenFieldNumber = 2;
  const ::std::string& screen() const;
  void set_screen(const ::std::string& value);
  #if LANG_CXX11
  void set_screen(::std::string&& value);
  #endif
  void set_screen(const char* value);
  void set_screen(const char* value, size_t size);
  ::std::string* mutable_screen();
  ::std::string* release_screen();
  void set_allocated_screen(::std::string* screen);
  ::std::string* unsafe_arena_release_screen();
  void unsafe_arena_set_allocated_screen(
      ::std::string* screen);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location)
 private:
  void set_has_block();
  void clear_has_block();
  void set_has_screen();
  void clear_has_screen();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  ::google::protobuf::internal::ArenaStringPtr screen_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Emotion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Emotion();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Emotion();

  UserData_UserVideoEvents_UserVideoEvent_Emotion(const UserData_UserVideoEvents_UserVideoEvent_Emotion& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Emotion& operator=(const UserData_UserVideoEvents_UserVideoEvent_Emotion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Emotion(UserData_UserVideoEvents_UserVideoEvent_Emotion&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Emotion() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Emotion& operator=(UserData_UserVideoEvents_UserVideoEvent_Emotion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Emotion& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Emotion* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Emotion*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Emotion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Emotion* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Emotion* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Emotion& a, UserData_UserVideoEvents_UserVideoEvent_Emotion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Emotion* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Emotion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Emotion& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Emotion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Emotion* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Emotion(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Favorite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Favorite();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Favorite();

  UserData_UserVideoEvents_UserVideoEvent_Favorite(const UserData_UserVideoEvents_UserVideoEvent_Favorite& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Favorite& operator=(const UserData_UserVideoEvents_UserVideoEvent_Favorite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Favorite(UserData_UserVideoEvents_UserVideoEvent_Favorite&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Favorite() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Favorite& operator=(UserData_UserVideoEvents_UserVideoEvent_Favorite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Favorite& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Favorite* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Favorite*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Favorite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Favorite* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Favorite* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Favorite& a, UserData_UserVideoEvents_UserVideoEvent_Favorite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Favorite* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Favorite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Favorite& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Favorite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Favorite* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Favorite(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional bool value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  bool value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Rate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Rate();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Rate();

  UserData_UserVideoEvents_UserVideoEvent_Rate(const UserData_UserVideoEvents_UserVideoEvent_Rate& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Rate& operator=(const UserData_UserVideoEvents_UserVideoEvent_Rate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Rate(UserData_UserVideoEvents_UserVideoEvent_Rate&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Rate() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Rate& operator=(UserData_UserVideoEvents_UserVideoEvent_Rate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Rate& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Rate* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Rate*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Rate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Rate* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Rate* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Rate& a, UserData_UserVideoEvents_UserVideoEvent_Rate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Rate* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Rate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Rate* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Rate(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Comment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Comment();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Comment();

  UserData_UserVideoEvents_UserVideoEvent_Comment(const UserData_UserVideoEvents_UserVideoEvent_Comment& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Comment& operator=(const UserData_UserVideoEvents_UserVideoEvent_Comment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Comment(UserData_UserVideoEvents_UserVideoEvent_Comment&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Comment() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Comment& operator=(UserData_UserVideoEvents_UserVideoEvent_Comment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Comment& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Comment* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Comment*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Comment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Comment* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Comment* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Comment& a, UserData_UserVideoEvents_UserVideoEvent_Comment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Comment* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Comment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Comment& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Comment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Comment* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Comment(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Block();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Block();

  UserData_UserVideoEvents_UserVideoEvent_Block(const UserData_UserVideoEvents_UserVideoEvent_Block& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Block& operator=(const UserData_UserVideoEvents_UserVideoEvent_Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Block(UserData_UserVideoEvents_UserVideoEvent_Block&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Block() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Block& operator=(UserData_UserVideoEvents_UserVideoEvent_Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Block& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Block* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Block*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Block_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Block* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Block* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Block& a, UserData_UserVideoEvents_UserVideoEvent_Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Block* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Block* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Block& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Block& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Block* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Block(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional bool value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  bool value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Share : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Share();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Share();

  UserData_UserVideoEvents_UserVideoEvent_Share(const UserData_UserVideoEvents_UserVideoEvent_Share& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Share& operator=(const UserData_UserVideoEvents_UserVideoEvent_Share& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Share(UserData_UserVideoEvents_UserVideoEvent_Share&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Share() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Share& operator=(UserData_UserVideoEvents_UserVideoEvent_Share&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Share& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Share* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Share*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Share_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Share* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Share* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Share& a, UserData_UserVideoEvents_UserVideoEvent_Share& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Share* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Share* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Share& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Share& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Share* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Share(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Watch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Watch();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Watch();

  UserData_UserVideoEvents_UserVideoEvent_Watch(const UserData_UserVideoEvents_UserVideoEvent_Watch& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Watch& operator=(const UserData_UserVideoEvents_UserVideoEvent_Watch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Watch(UserData_UserVideoEvents_UserVideoEvent_Watch&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Watch() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Watch& operator=(UserData_UserVideoEvents_UserVideoEvent_Watch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Watch& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Watch* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Watch*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Watch* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Watch* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Watch& a, UserData_UserVideoEvents_UserVideoEvent_Watch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Watch* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Watch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Watch& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Watch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Watch* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Watch(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 6;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 6;
  private:
  void _slow_mutable_location();
  void _slow_set_allocated_location(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location** location);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* _slow_release_location();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location& location() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* mutable_location();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* release_location();
  void set_allocated_location(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* unsafe_arena_release_location();
  void unsafe_arena_set_allocated_location(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location);

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 duration = 2;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 percent = 3;
  bool has_percent() const;
  void clear_percent();
  static const int kPercentFieldNumber = 3;
  ::google::protobuf::int32 percent() const;
  void set_percent(::google::protobuf::int32 value);

  // optional int32 cumulative_duration = 4;
  bool has_cumulative_duration() const;
  void clear_cumulative_duration();
  static const int kCumulativeDurationFieldNumber = 4;
  ::google::protobuf::int32 cumulative_duration() const;
  void set_cumulative_duration(::google::protobuf::int32 value);

  // optional int32 cumulative_percent = 5;
  bool has_cumulative_percent() const;
  void clear_cumulative_percent();
  static const int kCumulativePercentFieldNumber = 5;
  ::google::protobuf::int32 cumulative_percent() const;
  void set_cumulative_percent(::google::protobuf::int32 value);

  // optional int64 counter_timestamp = 7;
  bool has_counter_timestamp() const;
  void clear_counter_timestamp();
  static const int kCounterTimestampFieldNumber = 7;
  ::google::protobuf::int64 counter_timestamp() const;
  void set_counter_timestamp(::google::protobuf::int64 value);

  // optional uint64 counter = 8;
  bool has_counter() const;
  void clear_counter();
  static const int kCounterFieldNumber = 8;
  ::google::protobuf::uint64 counter() const;
  void set_counter(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_duration();
  void clear_has_duration();
  void set_has_percent();
  void clear_has_percent();
  void set_has_cumulative_duration();
  void clear_has_cumulative_duration();
  void set_has_cumulative_percent();
  void clear_has_cumulative_percent();
  void set_has_location();
  void clear_has_location();
  void set_has_counter_timestamp();
  void clear_has_counter_timestamp();
  void set_has_counter();
  void clear_has_counter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 percent_;
  ::google::protobuf::int32 cumulative_duration_;
  ::google::protobuf::int32 cumulative_percent_;
  ::google::protobuf::int64 counter_timestamp_;
  ::google::protobuf::uint64 counter_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_VideoNext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_VideoNext();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_VideoNext();

  UserData_UserVideoEvents_UserVideoEvent_VideoNext(const UserData_UserVideoEvents_UserVideoEvent_VideoNext& from);

  inline UserData_UserVideoEvents_UserVideoEvent_VideoNext& operator=(const UserData_UserVideoEvents_UserVideoEvent_VideoNext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_VideoNext(UserData_UserVideoEvents_UserVideoEvent_VideoNext&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_VideoNext() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_VideoNext& operator=(UserData_UserVideoEvents_UserVideoEvent_VideoNext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_VideoNext& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_VideoNext* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_VideoNext*>(
               &_UserData_UserVideoEvents_UserVideoEvent_VideoNext_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_VideoNext* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_VideoNext* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_VideoNext& a, UserData_UserVideoEvents_UserVideoEvent_VideoNext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_VideoNext* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_VideoNext* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoNext& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoNext& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_VideoNext* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_VideoNext(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters daily_counters = 6;
  bool has_daily_counters() const;
  void clear_daily_counters();
  static const int kDailyCountersFieldNumber = 6;
  private:
  void _slow_mutable_daily_counters();
  void _slow_set_allocated_daily_counters(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters** daily_counters);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* _slow_release_daily_counters();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters& daily_counters() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* mutable_daily_counters();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* release_daily_counters();
  void set_allocated_daily_counters(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* daily_counters);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* unsafe_arena_release_daily_counters();
  void unsafe_arena_set_allocated_daily_counters(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* daily_counters);

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 duration = 2;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::int32 duration() const;
  void set_duration(::google::protobuf::int32 value);

  // optional int32 percent = 3;
  bool has_percent() const;
  void clear_percent();
  static const int kPercentFieldNumber = 3;
  ::google::protobuf::int32 percent() const;
  void set_percent(::google::protobuf::int32 value);

  // optional int32 cumulative_duration = 4;
  bool has_cumulative_duration() const;
  void clear_cumulative_duration();
  static const int kCumulativeDurationFieldNumber = 4;
  ::google::protobuf::int32 cumulative_duration() const;
  void set_cumulative_duration(::google::protobuf::int32 value);

  // optional int32 cumulative_percent = 5;
  bool has_cumulative_percent() const;
  void clear_cumulative_percent();
  static const int kCumulativePercentFieldNumber = 5;
  ::google::protobuf::int32 cumulative_percent() const;
  void set_cumulative_percent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_duration();
  void clear_has_duration();
  void set_has_percent();
  void clear_has_percent();
  void set_has_cumulative_duration();
  void clear_has_cumulative_duration();
  void set_has_cumulative_percent();
  void clear_has_cumulative_percent();
  void set_has_daily_counters();
  void clear_has_daily_counters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* daily_counters_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 duration_;
  ::google::protobuf::int32 percent_;
  ::google::protobuf::int32 cumulative_duration_;
  ::google::protobuf::int32 cumulative_percent_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_VideoStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_VideoStart();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_VideoStart();

  UserData_UserVideoEvents_UserVideoEvent_VideoStart(const UserData_UserVideoEvents_UserVideoEvent_VideoStart& from);

  inline UserData_UserVideoEvents_UserVideoEvent_VideoStart& operator=(const UserData_UserVideoEvents_UserVideoEvent_VideoStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_VideoStart(UserData_UserVideoEvents_UserVideoEvent_VideoStart&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_VideoStart() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_VideoStart& operator=(UserData_UserVideoEvents_UserVideoEvent_VideoStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_VideoStart& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_VideoStart* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_VideoStart*>(
               &_UserData_UserVideoEvents_UserVideoEvent_VideoStart_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_VideoStart* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_VideoStart* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_VideoStart& a, UserData_UserVideoEvents_UserVideoEvent_VideoStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_VideoStart* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_VideoStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoStart& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_VideoStart* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_VideoStart(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional uint64 counter = 2;
  bool has_counter() const;
  void clear_counter();
  static const int kCounterFieldNumber = 2;
  ::google::protobuf::uint64 counter() const;
  void set_counter(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_counter();
  void clear_has_counter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint64 counter_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_VideoInViewport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_VideoInViewport();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_VideoInViewport();

  UserData_UserVideoEvents_UserVideoEvent_VideoInViewport(const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& from);

  inline UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& operator=(const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_VideoInViewport(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_VideoInViewport() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& operator=(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport*>(
               &_UserData_UserVideoEvents_UserVideoEvent_VideoInViewport_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& a, UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_VideoInViewport(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  void _slow_mutable_location();
  void _slow_set_allocated_location(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location** location);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* _slow_release_location();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location& location() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* mutable_location();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* release_location();
  void set_allocated_location(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* unsafe_arena_release_location();
  void unsafe_arena_set_allocated_location(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location);

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional uint64 counter = 3;
  bool has_counter() const;
  void clear_counter();
  static const int kCounterFieldNumber = 3;
  ::google::protobuf::uint64 counter() const;
  void set_counter(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_location();
  void clear_has_location();
  void set_has_counter();
  void clear_has_counter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint64 counter_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_PlayStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_PlayStatus();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_PlayStatus();

  UserData_UserVideoEvents_UserVideoEvent_PlayStatus(const UserData_UserVideoEvents_UserVideoEvent_PlayStatus& from);

  inline UserData_UserVideoEvents_UserVideoEvent_PlayStatus& operator=(const UserData_UserVideoEvents_UserVideoEvent_PlayStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_PlayStatus(UserData_UserVideoEvents_UserVideoEvent_PlayStatus&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_PlayStatus() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_PlayStatus& operator=(UserData_UserVideoEvents_UserVideoEvent_PlayStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_PlayStatus& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_PlayStatus* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_PlayStatus*>(
               &_UserData_UserVideoEvents_UserVideoEvent_PlayStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_PlayStatus* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_PlayStatus* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_PlayStatus& a, UserData_UserVideoEvents_UserVideoEvent_PlayStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_PlayStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_PlayStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_PlayStatus& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_PlayStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_PlayStatus* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_PlayStatus(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Like : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Like();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Like();

  UserData_UserVideoEvents_UserVideoEvent_Like(const UserData_UserVideoEvents_UserVideoEvent_Like& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Like& operator=(const UserData_UserVideoEvents_UserVideoEvent_Like& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Like(UserData_UserVideoEvents_UserVideoEvent_Like&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Like() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Like& operator=(UserData_UserVideoEvents_UserVideoEvent_Like&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Like& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Like* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Like*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Like_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Like* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Like* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Like& a, UserData_UserVideoEvents_UserVideoEvent_Like& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Like* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Like* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Like& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Like& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Like* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Like(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Dislike : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Dislike();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Dislike();

  UserData_UserVideoEvents_UserVideoEvent_Dislike(const UserData_UserVideoEvents_UserVideoEvent_Dislike& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Dislike& operator=(const UserData_UserVideoEvents_UserVideoEvent_Dislike& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Dislike(UserData_UserVideoEvents_UserVideoEvent_Dislike&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Dislike() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Dislike& operator=(UserData_UserVideoEvents_UserVideoEvent_Dislike&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Dislike& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Dislike* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Dislike*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Dislike_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Dislike* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Dislike* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Dislike& a, UserData_UserVideoEvents_UserVideoEvent_Dislike& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Dislike* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Dislike* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Dislike& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Dislike& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Dislike* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Dislike(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Norm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Norm();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Norm();

  UserData_UserVideoEvents_UserVideoEvent_Norm(const UserData_UserVideoEvents_UserVideoEvent_Norm& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Norm& operator=(const UserData_UserVideoEvents_UserVideoEvent_Norm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Norm(UserData_UserVideoEvents_UserVideoEvent_Norm&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Norm() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Norm& operator=(UserData_UserVideoEvents_UserVideoEvent_Norm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Norm& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Norm* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Norm*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Norm_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Norm* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Norm* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Norm& a, UserData_UserVideoEvents_UserVideoEvent_Norm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Norm* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Norm* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Norm& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Norm& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Norm* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Norm(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Rate3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Rate3();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Rate3();

  UserData_UserVideoEvents_UserVideoEvent_Rate3(const UserData_UserVideoEvents_UserVideoEvent_Rate3& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Rate3& operator=(const UserData_UserVideoEvents_UserVideoEvent_Rate3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Rate3(UserData_UserVideoEvents_UserVideoEvent_Rate3&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Rate3() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Rate3& operator=(UserData_UserVideoEvents_UserVideoEvent_Rate3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Rate3& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Rate3* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Rate3*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Rate3_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Rate3* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Rate3* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Rate3& a, UserData_UserVideoEvents_UserVideoEvent_Rate3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Rate3* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Rate3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate3& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Rate3* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Rate3(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_Rate10 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_Rate10();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_Rate10();

  UserData_UserVideoEvents_UserVideoEvent_Rate10(const UserData_UserVideoEvents_UserVideoEvent_Rate10& from);

  inline UserData_UserVideoEvents_UserVideoEvent_Rate10& operator=(const UserData_UserVideoEvents_UserVideoEvent_Rate10& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_Rate10(UserData_UserVideoEvents_UserVideoEvent_Rate10&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_Rate10() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_Rate10& operator=(UserData_UserVideoEvents_UserVideoEvent_Rate10&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_Rate10& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_Rate10* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_Rate10*>(
               &_UserData_UserVideoEvents_UserVideoEvent_Rate10_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_Rate10* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_Rate10* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_Rate10& a, UserData_UserVideoEvents_UserVideoEvent_Rate10& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_Rate10* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_Rate10* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate10& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_Rate10& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_Rate10* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_Rate10(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 value_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent_VideoClick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent_VideoClick();
  virtual ~UserData_UserVideoEvents_UserVideoEvent_VideoClick();

  UserData_UserVideoEvents_UserVideoEvent_VideoClick(const UserData_UserVideoEvents_UserVideoEvent_VideoClick& from);

  inline UserData_UserVideoEvents_UserVideoEvent_VideoClick& operator=(const UserData_UserVideoEvents_UserVideoEvent_VideoClick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent_VideoClick(UserData_UserVideoEvents_UserVideoEvent_VideoClick&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent_VideoClick() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent_VideoClick& operator=(UserData_UserVideoEvents_UserVideoEvent_VideoClick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent_VideoClick& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent_VideoClick* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent_VideoClick*>(
               &_UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent_VideoClick* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent_VideoClick* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent_VideoClick& a, UserData_UserVideoEvents_UserVideoEvent_VideoClick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent_VideoClick* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent_VideoClick* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoClick& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent_VideoClick& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent_VideoClick* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent_VideoClick(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  void _slow_mutable_location();
  void _slow_set_allocated_location(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location** location);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* _slow_release_location();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location& location() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* mutable_location();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* release_location();
  void set_allocated_location(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* unsafe_arena_release_location();
  void unsafe_arena_set_allocated_location(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location);

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location_;
  ::google::protobuf::int64 timestamp_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents_UserVideoEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent) */ {
 public:
  UserData_UserVideoEvents_UserVideoEvent();
  virtual ~UserData_UserVideoEvents_UserVideoEvent();

  UserData_UserVideoEvents_UserVideoEvent(const UserData_UserVideoEvents_UserVideoEvent& from);

  inline UserData_UserVideoEvents_UserVideoEvent& operator=(const UserData_UserVideoEvents_UserVideoEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents_UserVideoEvent(UserData_UserVideoEvents_UserVideoEvent&& from) noexcept
    : UserData_UserVideoEvents_UserVideoEvent() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents_UserVideoEvent& operator=(UserData_UserVideoEvents_UserVideoEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents_UserVideoEvent& default_instance();

  static inline const UserData_UserVideoEvents_UserVideoEvent* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents_UserVideoEvent*>(
               &_UserData_UserVideoEvents_UserVideoEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void UnsafeArenaSwap(UserData_UserVideoEvents_UserVideoEvent* other);
  void Swap(UserData_UserVideoEvents_UserVideoEvent* other);
  friend void swap(UserData_UserVideoEvents_UserVideoEvent& a, UserData_UserVideoEvents_UserVideoEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents_UserVideoEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents_UserVideoEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents_UserVideoEvent& from);
  void MergeFrom(const UserData_UserVideoEvents_UserVideoEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents_UserVideoEvent* other);
  protected:
  explicit UserData_UserVideoEvents_UserVideoEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_UserVideoEvents_UserVideoEvent_DailyCounters DailyCounters;
  typedef UserData_UserVideoEvents_UserVideoEvent_Location Location;
  typedef UserData_UserVideoEvents_UserVideoEvent_Emotion Emotion;
  typedef UserData_UserVideoEvents_UserVideoEvent_Favorite Favorite;
  typedef UserData_UserVideoEvents_UserVideoEvent_Rate Rate;
  typedef UserData_UserVideoEvents_UserVideoEvent_Comment Comment;
  typedef UserData_UserVideoEvents_UserVideoEvent_Block Block;
  typedef UserData_UserVideoEvents_UserVideoEvent_Share Share;
  typedef UserData_UserVideoEvents_UserVideoEvent_Watch Watch;
  typedef UserData_UserVideoEvents_UserVideoEvent_VideoNext VideoNext;
  typedef UserData_UserVideoEvents_UserVideoEvent_VideoStart VideoStart;
  typedef UserData_UserVideoEvents_UserVideoEvent_VideoInViewport VideoInViewport;
  typedef UserData_UserVideoEvents_UserVideoEvent_PlayStatus PlayStatus;
  typedef UserData_UserVideoEvents_UserVideoEvent_Like Like;
  typedef UserData_UserVideoEvents_UserVideoEvent_Dislike Dislike;
  typedef UserData_UserVideoEvents_UserVideoEvent_Norm Norm;
  typedef UserData_UserVideoEvents_UserVideoEvent_Rate3 Rate3;
  typedef UserData_UserVideoEvents_UserVideoEvent_Rate10 Rate10;
  typedef UserData_UserVideoEvents_UserVideoEvent_VideoClick VideoClick;

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion emotion = 11;
  bool has_emotion() const;
  void clear_emotion();
  static const int kEmotionFieldNumber = 11;
  private:
  void _slow_mutable_emotion();
  void _slow_set_allocated_emotion(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion** emotion);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* _slow_release_emotion();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion& emotion() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* mutable_emotion();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* release_emotion();
  void set_allocated_emotion(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* emotion);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* unsafe_arena_release_emotion();
  void unsafe_arena_set_allocated_emotion(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* emotion);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite favorite = 12;
  bool has_favorite() const;
  void clear_favorite();
  static const int kFavoriteFieldNumber = 12;
  private:
  void _slow_mutable_favorite();
  void _slow_set_allocated_favorite(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite** favorite);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* _slow_release_favorite();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite& favorite() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* mutable_favorite();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* release_favorite();
  void set_allocated_favorite(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* favorite);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* unsafe_arena_release_favorite();
  void unsafe_arena_set_allocated_favorite(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* favorite);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate rate = 13;
  bool has_rate() const;
  void clear_rate();
  static const int kRateFieldNumber = 13;
  private:
  void _slow_mutable_rate();
  void _slow_set_allocated_rate(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate** rate);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* _slow_release_rate();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate& rate() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* mutable_rate();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* release_rate();
  void set_allocated_rate(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* rate);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* unsafe_arena_release_rate();
  void unsafe_arena_set_allocated_rate(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* rate);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment comment = 14;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 14;
  private:
  void _slow_mutable_comment();
  void _slow_set_allocated_comment(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment** comment);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* _slow_release_comment();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment& comment() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* mutable_comment();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* release_comment();
  void set_allocated_comment(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* comment);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* unsafe_arena_release_comment();
  void unsafe_arena_set_allocated_comment(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* comment);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block block = 15;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 15;
  private:
  void _slow_mutable_block();
  void _slow_set_allocated_block(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block** block);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* _slow_release_block();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block& block() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* mutable_block();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* release_block();
  void set_allocated_block(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* block);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* unsafe_arena_release_block();
  void unsafe_arena_set_allocated_block(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* block);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share share = 16;
  bool has_share() const;
  void clear_share();
  static const int kShareFieldNumber = 16;
  private:
  void _slow_mutable_share();
  void _slow_set_allocated_share(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share** share);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* _slow_release_share();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share& share() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* mutable_share();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* release_share();
  void set_allocated_share(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* share);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* unsafe_arena_release_share();
  void unsafe_arena_set_allocated_share(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* share);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch = 17;
  bool has_watch() const;
  void clear_watch();
  static const int kWatchFieldNumber = 17;
  private:
  void _slow_mutable_watch();
  void _slow_set_allocated_watch(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch** watch);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* _slow_release_watch();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch& watch() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* mutable_watch();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* release_watch();
  void set_allocated_watch(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* unsafe_arena_release_watch();
  void unsafe_arena_set_allocated_watch(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext video_next = 18;
  bool has_video_next() const;
  void clear_video_next();
  static const int kVideoNextFieldNumber = 18;
  private:
  void _slow_mutable_video_next();
  void _slow_set_allocated_video_next(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext** video_next);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* _slow_release_video_next();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext& video_next() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* mutable_video_next();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* release_video_next();
  void set_allocated_video_next(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* video_next);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* unsafe_arena_release_video_next();
  void unsafe_arena_set_allocated_video_next(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* video_next);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport video_in_viewport = 19;
  bool has_video_in_viewport() const;
  void clear_video_in_viewport();
  static const int kVideoInViewportFieldNumber = 19;
  private:
  void _slow_mutable_video_in_viewport();
  void _slow_set_allocated_video_in_viewport(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport** video_in_viewport);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* _slow_release_video_in_viewport();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& video_in_viewport() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* mutable_video_in_viewport();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* release_video_in_viewport();
  void set_allocated_video_in_viewport(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* video_in_viewport);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* unsafe_arena_release_video_in_viewport();
  void unsafe_arena_set_allocated_video_in_viewport(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* video_in_viewport);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus play_status = 20;
  bool has_play_status() const;
  void clear_play_status();
  static const int kPlayStatusFieldNumber = 20;
  private:
  void _slow_mutable_play_status();
  void _slow_set_allocated_play_status(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus** play_status);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* _slow_release_play_status();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus& play_status() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* mutable_play_status();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* release_play_status();
  void set_allocated_play_status(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* play_status);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* unsafe_arena_release_play_status();
  void unsafe_arena_set_allocated_play_status(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* play_status);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like like = 21;
  bool has_like() const;
  void clear_like();
  static const int kLikeFieldNumber = 21;
  private:
  void _slow_mutable_like();
  void _slow_set_allocated_like(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like** like);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* _slow_release_like();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like& like() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* mutable_like();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* release_like();
  void set_allocated_like(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* like);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* unsafe_arena_release_like();
  void unsafe_arena_set_allocated_like(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* like);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike dislike = 22;
  bool has_dislike() const;
  void clear_dislike();
  static const int kDislikeFieldNumber = 22;
  private:
  void _slow_mutable_dislike();
  void _slow_set_allocated_dislike(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike** dislike);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* _slow_release_dislike();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike& dislike() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* mutable_dislike();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* release_dislike();
  void set_allocated_dislike(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* dislike);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* unsafe_arena_release_dislike();
  void unsafe_arena_set_allocated_dislike(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* dislike);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm norm = 23;
  bool has_norm() const;
  void clear_norm();
  static const int kNormFieldNumber = 23;
  private:
  void _slow_mutable_norm();
  void _slow_set_allocated_norm(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm** norm);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* _slow_release_norm();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm& norm() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* mutable_norm();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* release_norm();
  void set_allocated_norm(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* norm);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* unsafe_arena_release_norm();
  void unsafe_arena_set_allocated_norm(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* norm);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3 rate3 = 24;
  bool has_rate3() const;
  void clear_rate3();
  static const int kRate3FieldNumber = 24;
  private:
  void _slow_mutable_rate3();
  void _slow_set_allocated_rate3(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3** rate3);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* _slow_release_rate3();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3& rate3() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* mutable_rate3();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* release_rate3();
  void set_allocated_rate3(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* rate3);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* unsafe_arena_release_rate3();
  void unsafe_arena_set_allocated_rate3(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* rate3);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10 rate10 = 25;
  bool has_rate10() const;
  void clear_rate10();
  static const int kRate10FieldNumber = 25;
  private:
  void _slow_mutable_rate10();
  void _slow_set_allocated_rate10(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10** rate10);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* _slow_release_rate10();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10& rate10() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* mutable_rate10();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* release_rate10();
  void set_allocated_rate10(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* rate10);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* unsafe_arena_release_rate10();
  void unsafe_arena_set_allocated_rate10(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* rate10);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click = 26;
  bool has_video_click() const;
  void clear_video_click();
  static const int kVideoClickFieldNumber = 26;
  private:
  void _slow_mutable_video_click();
  void _slow_set_allocated_video_click(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick** video_click);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* _slow_release_video_click();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick& video_click() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* mutable_video_click();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* release_video_click();
  void set_allocated_video_click(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* unsafe_arena_release_video_click();
  void unsafe_arena_set_allocated_video_click(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_in_search = 27;
  bool has_watch_in_search() const;
  void clear_watch_in_search();
  static const int kWatchInSearchFieldNumber = 27;
  private:
  void _slow_mutable_watch_in_search();
  void _slow_set_allocated_watch_in_search(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch** watch_in_search);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* _slow_release_watch_in_search();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch& watch_in_search() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* mutable_watch_in_search();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* release_watch_in_search();
  void set_allocated_watch_in_search(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_in_search);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* unsafe_arena_release_watch_in_search();
  void unsafe_arena_set_allocated_watch_in_search(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_in_search);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click_in_search = 28;
  bool has_video_click_in_search() const;
  void clear_video_click_in_search();
  static const int kVideoClickInSearchFieldNumber = 28;
  private:
  void _slow_mutable_video_click_in_search();
  void _slow_set_allocated_video_click_in_search(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick** video_click_in_search);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* _slow_release_video_click_in_search();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick& video_click_in_search() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* mutable_video_click_in_search();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* release_video_click_in_search();
  void set_allocated_video_click_in_search(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click_in_search);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* unsafe_arena_release_video_click_in_search();
  void unsafe_arena_set_allocated_video_click_in_search(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click_in_search);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate cold_rate = 29;
  bool has_cold_rate() const;
  void clear_cold_rate();
  static const int kColdRateFieldNumber = 29;
  private:
  void _slow_mutable_cold_rate();
  void _slow_set_allocated_cold_rate(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate** cold_rate);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* _slow_release_cold_rate();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate& cold_rate() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* mutable_cold_rate();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* release_cold_rate();
  void set_allocated_cold_rate(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* cold_rate);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* unsafe_arena_release_cold_rate();
  void unsafe_arena_set_allocated_cold_rate(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* cold_rate);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_with_sound = 30;
  bool has_watch_with_sound() const;
  void clear_watch_with_sound();
  static const int kWatchWithSoundFieldNumber = 30;
  private:
  void _slow_mutable_watch_with_sound();
  void _slow_set_allocated_watch_with_sound(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch** watch_with_sound);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* _slow_release_watch_with_sound();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch& watch_with_sound() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* mutable_watch_with_sound();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* release_watch_with_sound();
  void set_allocated_watch_with_sound(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_with_sound);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* unsafe_arena_release_watch_with_sound();
  void unsafe_arena_set_allocated_watch_with_sound(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_with_sound);

  // optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart video_start = 31;
  bool has_video_start() const;
  void clear_video_start();
  static const int kVideoStartFieldNumber = 31;
  private:
  void _slow_mutable_video_start();
  void _slow_set_allocated_video_start(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart** video_start);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* _slow_release_video_start();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart& video_start() const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* mutable_video_start();
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* release_video_start();
  void set_allocated_video_start(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* video_start);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* unsafe_arena_release_video_start();
  void unsafe_arena_set_allocated_video_start(
      ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* video_start);

  // required int64 doc_id = 1;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // required int64 last_timestamp = 2;
  bool has_last_timestamp() const;
  void clear_last_timestamp();
  static const int kLastTimestampFieldNumber = 2;
  ::google::protobuf::int64 last_timestamp() const;
  void set_last_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent)
 private:
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_last_timestamp();
  void clear_has_last_timestamp();
  void set_has_emotion();
  void clear_has_emotion();
  void set_has_favorite();
  void clear_has_favorite();
  void set_has_rate();
  void clear_has_rate();
  void set_has_comment();
  void clear_has_comment();
  void set_has_block();
  void clear_has_block();
  void set_has_share();
  void clear_has_share();
  void set_has_watch();
  void clear_has_watch();
  void set_has_video_next();
  void clear_has_video_next();
  void set_has_video_in_viewport();
  void clear_has_video_in_viewport();
  void set_has_play_status();
  void clear_has_play_status();
  void set_has_like();
  void clear_has_like();
  void set_has_dislike();
  void clear_has_dislike();
  void set_has_norm();
  void clear_has_norm();
  void set_has_rate3();
  void clear_has_rate3();
  void set_has_rate10();
  void clear_has_rate10();
  void set_has_video_click();
  void clear_has_video_click();
  void set_has_watch_in_search();
  void clear_has_watch_in_search();
  void set_has_video_click_in_search();
  void clear_has_video_click_in_search();
  void set_has_cold_rate();
  void clear_has_cold_rate();
  void set_has_watch_with_sound();
  void clear_has_watch_with_sound();
  void set_has_video_start();
  void clear_has_video_start();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* emotion_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* favorite_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* rate_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* comment_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* block_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* share_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* video_next_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* video_in_viewport_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* play_status_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* like_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* dislike_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* norm_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* rate3_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* rate10_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_in_search_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click_in_search_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* cold_rate_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_with_sound_;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* video_start_;
  ::google::protobuf::int64 doc_id_;
  ::google::protobuf::int64 last_timestamp_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_UserVideoEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.UserVideoEvents) */ {
 public:
  UserData_UserVideoEvents();
  virtual ~UserData_UserVideoEvents();

  UserData_UserVideoEvents(const UserData_UserVideoEvents& from);

  inline UserData_UserVideoEvents& operator=(const UserData_UserVideoEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_UserVideoEvents(UserData_UserVideoEvents&& from) noexcept
    : UserData_UserVideoEvents() {
    *this = ::std::move(from);
  }

  inline UserData_UserVideoEvents& operator=(UserData_UserVideoEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_UserVideoEvents& default_instance();

  static inline const UserData_UserVideoEvents* internal_default_instance() {
    return reinterpret_cast<const UserData_UserVideoEvents*>(
               &_UserData_UserVideoEvents_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void UnsafeArenaSwap(UserData_UserVideoEvents* other);
  void Swap(UserData_UserVideoEvents* other);
  friend void swap(UserData_UserVideoEvents& a, UserData_UserVideoEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_UserVideoEvents* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_UserVideoEvents* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_UserVideoEvents& from);
  void MergeFrom(const UserData_UserVideoEvents& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_UserVideoEvents* other);
  protected:
  explicit UserData_UserVideoEvents(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_UserVideoEvents_UserVideoEvent UserVideoEvent;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent& events(int index) const;
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent* mutable_events(int index);
  ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent* add_events();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent >&
      events() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.UserVideoEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent > events_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SubscriptionInfo_SubscriptionItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem) */ {
 public:
  UserData_SubscriptionInfo_SubscriptionItem();
  virtual ~UserData_SubscriptionInfo_SubscriptionItem();

  UserData_SubscriptionInfo_SubscriptionItem(const UserData_SubscriptionInfo_SubscriptionItem& from);

  inline UserData_SubscriptionInfo_SubscriptionItem& operator=(const UserData_SubscriptionInfo_SubscriptionItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SubscriptionInfo_SubscriptionItem(UserData_SubscriptionInfo_SubscriptionItem&& from) noexcept
    : UserData_SubscriptionInfo_SubscriptionItem() {
    *this = ::std::move(from);
  }

  inline UserData_SubscriptionInfo_SubscriptionItem& operator=(UserData_SubscriptionInfo_SubscriptionItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SubscriptionInfo_SubscriptionItem& default_instance();

  static inline const UserData_SubscriptionInfo_SubscriptionItem* internal_default_instance() {
    return reinterpret_cast<const UserData_SubscriptionInfo_SubscriptionItem*>(
               &_UserData_SubscriptionInfo_SubscriptionItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void UnsafeArenaSwap(UserData_SubscriptionInfo_SubscriptionItem* other);
  void Swap(UserData_SubscriptionInfo_SubscriptionItem* other);
  friend void swap(UserData_SubscriptionInfo_SubscriptionItem& a, UserData_SubscriptionInfo_SubscriptionItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SubscriptionInfo_SubscriptionItem* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SubscriptionInfo_SubscriptionItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SubscriptionInfo_SubscriptionItem& from);
  void MergeFrom(const UserData_SubscriptionInfo_SubscriptionItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SubscriptionInfo_SubscriptionItem* other);
  protected:
  explicit UserData_SubscriptionInfo_SubscriptionItem(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus SubscriptionStatus;
  static const SubscriptionStatus OFF =
    UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_OFF;
  static const SubscriptionStatus ON =
    UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_ON;
  static inline bool SubscriptionStatus_IsValid(int value) {
    return UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_IsValid(value);
  }
  static const SubscriptionStatus SubscriptionStatus_MIN =
    UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_SubscriptionStatus_MIN;
  static const SubscriptionStatus SubscriptionStatus_MAX =
    UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_SubscriptionStatus_MAX;
  static const int SubscriptionStatus_ARRAYSIZE =
    UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_SubscriptionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SubscriptionStatus_descriptor() {
    return UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_descriptor();
  }
  static inline const ::std::string& SubscriptionStatus_Name(SubscriptionStatus value) {
    return UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_Name(value);
  }
  static inline bool SubscriptionStatus_Parse(const ::std::string& name,
      SubscriptionStatus* value) {
    return UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int64 last_ts = 3;
  bool has_last_ts() const;
  void clear_last_ts();
  static const int kLastTsFieldNumber = 3;
  ::google::protobuf::int64 last_ts() const;
  void set_last_ts(::google::protobuf::int64 value);

  // required .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.SubscriptionStatus status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus status() const;
  void set_status(::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus value);

  // optional int32 shows = 4;
  bool has_shows() const;
  void clear_shows();
  static const int kShowsFieldNumber = 4;
  ::google::protobuf::int32 shows() const;
  void set_shows(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_status();
  void clear_has_status();
  void set_has_last_ts();
  void clear_has_last_ts();
  void set_has_shows();
  void clear_has_shows();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 last_ts_;
  int status_;
  ::google::protobuf::int32 shows_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData_SubscriptionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData.SubscriptionInfo) */ {
 public:
  UserData_SubscriptionInfo();
  virtual ~UserData_SubscriptionInfo();

  UserData_SubscriptionInfo(const UserData_SubscriptionInfo& from);

  inline UserData_SubscriptionInfo& operator=(const UserData_SubscriptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData_SubscriptionInfo(UserData_SubscriptionInfo&& from) noexcept
    : UserData_SubscriptionInfo() {
    *this = ::std::move(from);
  }

  inline UserData_SubscriptionInfo& operator=(UserData_SubscriptionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData_SubscriptionInfo& default_instance();

  static inline const UserData_SubscriptionInfo* internal_default_instance() {
    return reinterpret_cast<const UserData_SubscriptionInfo*>(
               &_UserData_SubscriptionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void UnsafeArenaSwap(UserData_SubscriptionInfo* other);
  void Swap(UserData_SubscriptionInfo* other);
  friend void swap(UserData_SubscriptionInfo& a, UserData_SubscriptionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData_SubscriptionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData_SubscriptionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData_SubscriptionInfo& from);
  void MergeFrom(const UserData_SubscriptionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData_SubscriptionInfo* other);
  protected:
  explicit UserData_SubscriptionInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_SubscriptionInfo_SubscriptionItem SubscriptionItem;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem& items(int index) const;
  ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem* mutable_items(int index);
  ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem >&
      items() const;

  // optional int64 last_onboarding_show_ts = 3;
  bool has_last_onboarding_show_ts() const;
  void clear_last_onboarding_show_ts();
  static const int kLastOnboardingShowTsFieldNumber = 3;
  ::google::protobuf::int64 last_onboarding_show_ts() const;
  void set_last_onboarding_show_ts(::google::protobuf::int64 value);

  // optional int32 onboarding_shows_count = 2;
  bool has_onboarding_shows_count() const;
  void clear_onboarding_shows_count();
  static const int kOnboardingShowsCountFieldNumber = 2;
  ::google::protobuf::int32 onboarding_shows_count() const;
  void set_onboarding_shows_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData.SubscriptionInfo)
 private:
  void set_has_onboarding_shows_count();
  void clear_has_onboarding_shows_count();
  void set_has_last_onboarding_show_ts();
  void clear_has_last_onboarding_show_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem > items_;
  ::google::protobuf::int64 last_onboarding_show_ts_;
  ::google::protobuf::int32 onboarding_shows_count_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.UserData) */ {
 public:
  UserData();
  virtual ~UserData();

  UserData(const UserData& from);

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(UserData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData& default_instance();

  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void UnsafeArenaSwap(UserData* other);
  void Swap(UserData* other);
  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserData* New() const PROTOBUF_FINAL { return New(NULL); }

  UserData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserData* other);
  protected:
  explicit UserData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserData_OriginalInfo OriginalInfo;
  typedef UserData_OkInfo OkInfo;
  typedef UserData_SocDemFea SocDemFea;
  typedef UserData_DetiRecos DetiRecos;
  typedef UserData_AlsFea AlsFea;
  typedef UserData_AlsItemsBiases AlsItemsBiases;
  typedef UserData_NewsSources NewsSources;
  typedef UserData_Stats Stats;
  typedef UserData_SourcesWebStats SourcesWebStats;
  typedef UserData_UserLinks UserLinks;
  typedef UserData_UserClusters UserClusters;
  typedef UserData_SimilarSites SimilarSites;
  typedef UserData_ContentThemes ContentThemes;
  typedef UserData_StaticRecos StaticRecos;
  typedef UserData_VisitedDocs VisitedDocs;
  typedef UserData_LogsVisitedDocs LogsVisitedDocs;
  typedef UserData_LogsVisitedSources LogsVisitedSources;
  typedef UserData_LogsVisitedSource LogsVisitedSource;
  typedef UserData_SitesForUser SitesForUser;
  typedef UserData_VkGroupsForUser VkGroupsForUser;
  typedef UserData_UserKeywords UserKeywords;
  typedef UserData_UserEvents UserEvents;
  typedef UserData_UserThemesEvents UserThemesEvents;
  typedef UserData_UserI2IEvents UserI2IEvents;
  typedef UserData_UserSourcesEvents UserSourcesEvents;
  typedef UserData_UserVideos UserVideos;
  typedef UserData_UserMusic UserMusic;
  typedef UserData_UserVideoEvents UserVideoEvents;
  typedef UserData_SubscriptionInfo SubscriptionInfo;

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
  bool has_socdem_fea() const;
  void clear_socdem_fea();
  static const int kSocdemFeaFieldNumber = 2;
  private:
  void _slow_mutable_socdem_fea();
  void _slow_set_allocated_socdem_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SocDemFea** socdem_fea);
  ::cosmo::pb::UserData_SocDemFea* _slow_release_socdem_fea();
  public:
  const ::cosmo::pb::UserData_SocDemFea& socdem_fea() const;
  ::cosmo::pb::UserData_SocDemFea* mutable_socdem_fea();
  ::cosmo::pb::UserData_SocDemFea* release_socdem_fea();
  void set_allocated_socdem_fea(::cosmo::pb::UserData_SocDemFea* socdem_fea);
  ::cosmo::pb::UserData_SocDemFea* unsafe_arena_release_socdem_fea();
  void unsafe_arena_set_allocated_socdem_fea(
      ::cosmo::pb::UserData_SocDemFea* socdem_fea);

  // optional .cosmo.pb.UserData.AlsFea als_fea = 3;
  bool has_als_fea() const;
  void clear_als_fea();
  static const int kAlsFeaFieldNumber = 3;
  private:
  void _slow_mutable_als_fea();
  void _slow_set_allocated_als_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_AlsFea** als_fea);
  ::cosmo::pb::UserData_AlsFea* _slow_release_als_fea();
  public:
  const ::cosmo::pb::UserData_AlsFea& als_fea() const;
  ::cosmo::pb::UserData_AlsFea* mutable_als_fea();
  ::cosmo::pb::UserData_AlsFea* release_als_fea();
  void set_allocated_als_fea(::cosmo::pb::UserData_AlsFea* als_fea);
  ::cosmo::pb::UserData_AlsFea* unsafe_arena_release_als_fea();
  void unsafe_arena_set_allocated_als_fea(
      ::cosmo::pb::UserData_AlsFea* als_fea);

  // optional .cosmo.pb.UserData.OkInfo ok_info = 4;
  bool has_ok_info() const;
  void clear_ok_info();
  static const int kOkInfoFieldNumber = 4;
  private:
  void _slow_mutable_ok_info();
  void _slow_set_allocated_ok_info(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_OkInfo** ok_info);
  ::cosmo::pb::UserData_OkInfo* _slow_release_ok_info();
  public:
  const ::cosmo::pb::UserData_OkInfo& ok_info() const;
  ::cosmo::pb::UserData_OkInfo* mutable_ok_info();
  ::cosmo::pb::UserData_OkInfo* release_ok_info();
  void set_allocated_ok_info(::cosmo::pb::UserData_OkInfo* ok_info);
  ::cosmo::pb::UserData_OkInfo* unsafe_arena_release_ok_info();
  void unsafe_arena_set_allocated_ok_info(
      ::cosmo::pb::UserData_OkInfo* ok_info);

  // optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
  bool has_deti_reco() const;
  void clear_deti_reco();
  static const int kDetiRecoFieldNumber = 5;
  private:
  void _slow_mutable_deti_reco();
  void _slow_set_allocated_deti_reco(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_DetiRecos** deti_reco);
  ::cosmo::pb::UserData_DetiRecos* _slow_release_deti_reco();
  public:
  const ::cosmo::pb::UserData_DetiRecos& deti_reco() const;
  ::cosmo::pb::UserData_DetiRecos* mutable_deti_reco();
  ::cosmo::pb::UserData_DetiRecos* release_deti_reco();
  void set_allocated_deti_reco(::cosmo::pb::UserData_DetiRecos* deti_reco);
  ::cosmo::pb::UserData_DetiRecos* unsafe_arena_release_deti_reco();
  void unsafe_arena_set_allocated_deti_reco(
      ::cosmo::pb::UserData_DetiRecos* deti_reco);

  // optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
  bool has_als_items_fea() const;
  void clear_als_items_fea();
  static const int kAlsItemsFeaFieldNumber = 6;
  private:
  void _slow_mutable_als_items_fea();
  void _slow_set_allocated_als_items_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_AlsItemsBiases** als_items_fea);
  ::cosmo::pb::UserData_AlsItemsBiases* _slow_release_als_items_fea();
  public:
  const ::cosmo::pb::UserData_AlsItemsBiases& als_items_fea() const;
  ::cosmo::pb::UserData_AlsItemsBiases* mutable_als_items_fea();
  ::cosmo::pb::UserData_AlsItemsBiases* release_als_items_fea();
  void set_allocated_als_items_fea(::cosmo::pb::UserData_AlsItemsBiases* als_items_fea);
  ::cosmo::pb::UserData_AlsItemsBiases* unsafe_arena_release_als_items_fea();
  void unsafe_arena_set_allocated_als_items_fea(
      ::cosmo::pb::UserData_AlsItemsBiases* als_items_fea);

  // optional .cosmo.pb.UserData.NewsSources news_sources = 7;
  bool has_news_sources() const;
  void clear_news_sources();
  static const int kNewsSourcesFieldNumber = 7;
  private:
  void _slow_mutable_news_sources();
  void _slow_set_allocated_news_sources(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_NewsSources** news_sources);
  ::cosmo::pb::UserData_NewsSources* _slow_release_news_sources();
  public:
  const ::cosmo::pb::UserData_NewsSources& news_sources() const;
  ::cosmo::pb::UserData_NewsSources* mutable_news_sources();
  ::cosmo::pb::UserData_NewsSources* release_news_sources();
  void set_allocated_news_sources(::cosmo::pb::UserData_NewsSources* news_sources);
  ::cosmo::pb::UserData_NewsSources* unsafe_arena_release_news_sources();
  void unsafe_arena_set_allocated_news_sources(
      ::cosmo::pb::UserData_NewsSources* news_sources);

  // optional .cosmo.pb.UserData.Stats stats = 8;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 8;
  private:
  void _slow_mutable_stats();
  void _slow_set_allocated_stats(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_Stats** stats);
  ::cosmo::pb::UserData_Stats* _slow_release_stats();
  public:
  const ::cosmo::pb::UserData_Stats& stats() const;
  ::cosmo::pb::UserData_Stats* mutable_stats();
  ::cosmo::pb::UserData_Stats* release_stats();
  void set_allocated_stats(::cosmo::pb::UserData_Stats* stats);
  ::cosmo::pb::UserData_Stats* unsafe_arena_release_stats();
  void unsafe_arena_set_allocated_stats(
      ::cosmo::pb::UserData_Stats* stats);

  // optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
  bool has_original_info() const;
  void clear_original_info();
  static const int kOriginalInfoFieldNumber = 9;
  private:
  void _slow_mutable_original_info();
  void _slow_set_allocated_original_info(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_OriginalInfo** original_info);
  ::cosmo::pb::UserData_OriginalInfo* _slow_release_original_info();
  public:
  const ::cosmo::pb::UserData_OriginalInfo& original_info() const;
  ::cosmo::pb::UserData_OriginalInfo* mutable_original_info();
  ::cosmo::pb::UserData_OriginalInfo* release_original_info();
  void set_allocated_original_info(::cosmo::pb::UserData_OriginalInfo* original_info);
  ::cosmo::pb::UserData_OriginalInfo* unsafe_arena_release_original_info();
  void unsafe_arena_set_allocated_original_info(
      ::cosmo::pb::UserData_OriginalInfo* original_info);

  // optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
  bool has_als_fea_2() const;
  void clear_als_fea_2();
  static const int kAlsFea2FieldNumber = 10;
  private:
  void _slow_mutable_als_fea_2();
  void _slow_set_allocated_als_fea_2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_AlsFea** als_fea_2);
  ::cosmo::pb::UserData_AlsFea* _slow_release_als_fea_2();
  public:
  const ::cosmo::pb::UserData_AlsFea& als_fea_2() const;
  ::cosmo::pb::UserData_AlsFea* mutable_als_fea_2();
  ::cosmo::pb::UserData_AlsFea* release_als_fea_2();
  void set_allocated_als_fea_2(::cosmo::pb::UserData_AlsFea* als_fea_2);
  ::cosmo::pb::UserData_AlsFea* unsafe_arena_release_als_fea_2();
  void unsafe_arena_set_allocated_als_fea_2(
      ::cosmo::pb::UserData_AlsFea* als_fea_2);

  // optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
  bool has_sources_web_stats() const;
  void clear_sources_web_stats();
  static const int kSourcesWebStatsFieldNumber = 11;
  private:
  void _slow_mutable_sources_web_stats();
  void _slow_set_allocated_sources_web_stats(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SourcesWebStats** sources_web_stats);
  ::cosmo::pb::UserData_SourcesWebStats* _slow_release_sources_web_stats();
  public:
  const ::cosmo::pb::UserData_SourcesWebStats& sources_web_stats() const;
  ::cosmo::pb::UserData_SourcesWebStats* mutable_sources_web_stats();
  ::cosmo::pb::UserData_SourcesWebStats* release_sources_web_stats();
  void set_allocated_sources_web_stats(::cosmo::pb::UserData_SourcesWebStats* sources_web_stats);
  ::cosmo::pb::UserData_SourcesWebStats* unsafe_arena_release_sources_web_stats();
  void unsafe_arena_set_allocated_sources_web_stats(
      ::cosmo::pb::UserData_SourcesWebStats* sources_web_stats);

  // optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
  bool has_sources_reco_stats() const;
  void clear_sources_reco_stats();
  static const int kSourcesRecoStatsFieldNumber = 12;
  private:
  void _slow_mutable_sources_reco_stats();
  void _slow_set_allocated_sources_reco_stats(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_Stats** sources_reco_stats);
  ::cosmo::pb::UserData_Stats* _slow_release_sources_reco_stats();
  public:
  const ::cosmo::pb::UserData_Stats& sources_reco_stats() const;
  ::cosmo::pb::UserData_Stats* mutable_sources_reco_stats();
  ::cosmo::pb::UserData_Stats* release_sources_reco_stats();
  void set_allocated_sources_reco_stats(::cosmo::pb::UserData_Stats* sources_reco_stats);
  ::cosmo::pb::UserData_Stats* unsafe_arena_release_sources_reco_stats();
  void unsafe_arena_set_allocated_sources_reco_stats(
      ::cosmo::pb::UserData_Stats* sources_reco_stats);

  // optional .cosmo.pb.UserData.UserLinks user_links = 13;
  bool has_user_links() const;
  void clear_user_links();
  static const int kUserLinksFieldNumber = 13;
  private:
  void _slow_mutable_user_links();
  void _slow_set_allocated_user_links(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserLinks** user_links);
  ::cosmo::pb::UserData_UserLinks* _slow_release_user_links();
  public:
  const ::cosmo::pb::UserData_UserLinks& user_links() const;
  ::cosmo::pb::UserData_UserLinks* mutable_user_links();
  ::cosmo::pb::UserData_UserLinks* release_user_links();
  void set_allocated_user_links(::cosmo::pb::UserData_UserLinks* user_links);
  ::cosmo::pb::UserData_UserLinks* unsafe_arena_release_user_links();
  void unsafe_arena_set_allocated_user_links(
      ::cosmo::pb::UserData_UserLinks* user_links);

  // optional .cosmo.pb.UserData.UserClusters user_clusters = 14;
  bool has_user_clusters() const;
  void clear_user_clusters();
  static const int kUserClustersFieldNumber = 14;
  private:
  void _slow_mutable_user_clusters();
  void _slow_set_allocated_user_clusters(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserClusters** user_clusters);
  ::cosmo::pb::UserData_UserClusters* _slow_release_user_clusters();
  public:
  const ::cosmo::pb::UserData_UserClusters& user_clusters() const;
  ::cosmo::pb::UserData_UserClusters* mutable_user_clusters();
  ::cosmo::pb::UserData_UserClusters* release_user_clusters();
  void set_allocated_user_clusters(::cosmo::pb::UserData_UserClusters* user_clusters);
  ::cosmo::pb::UserData_UserClusters* unsafe_arena_release_user_clusters();
  void unsafe_arena_set_allocated_user_clusters(
      ::cosmo::pb::UserData_UserClusters* user_clusters);

  // optional .cosmo.pb.UserData.SimilarSites similar_sites = 15;
  bool has_similar_sites() const;
  void clear_similar_sites();
  static const int kSimilarSitesFieldNumber = 15;
  private:
  void _slow_mutable_similar_sites();
  void _slow_set_allocated_similar_sites(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SimilarSites** similar_sites);
  ::cosmo::pb::UserData_SimilarSites* _slow_release_similar_sites();
  public:
  const ::cosmo::pb::UserData_SimilarSites& similar_sites() const;
  ::cosmo::pb::UserData_SimilarSites* mutable_similar_sites();
  ::cosmo::pb::UserData_SimilarSites* release_similar_sites();
  void set_allocated_similar_sites(::cosmo::pb::UserData_SimilarSites* similar_sites);
  ::cosmo::pb::UserData_SimilarSites* unsafe_arena_release_similar_sites();
  void unsafe_arena_set_allocated_similar_sites(
      ::cosmo::pb::UserData_SimilarSites* similar_sites);

  // optional .cosmo.pb.UserData.ContentThemes content_themes = 17;
  bool has_content_themes() const;
  void clear_content_themes();
  static const int kContentThemesFieldNumber = 17;
  private:
  void _slow_mutable_content_themes();
  void _slow_set_allocated_content_themes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_ContentThemes** content_themes);
  ::cosmo::pb::UserData_ContentThemes* _slow_release_content_themes();
  public:
  const ::cosmo::pb::UserData_ContentThemes& content_themes() const;
  ::cosmo::pb::UserData_ContentThemes* mutable_content_themes();
  ::cosmo::pb::UserData_ContentThemes* release_content_themes();
  void set_allocated_content_themes(::cosmo::pb::UserData_ContentThemes* content_themes);
  ::cosmo::pb::UserData_ContentThemes* unsafe_arena_release_content_themes();
  void unsafe_arena_set_allocated_content_themes(
      ::cosmo::pb::UserData_ContentThemes* content_themes);

  // optional .cosmo.pb.UserData.StaticRecos static_recos_1 = 18;
  bool has_static_recos_1() const;
  void clear_static_recos_1();
  static const int kStaticRecos1FieldNumber = 18;
  private:
  void _slow_mutable_static_recos_1();
  void _slow_set_allocated_static_recos_1(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_StaticRecos** static_recos_1);
  ::cosmo::pb::UserData_StaticRecos* _slow_release_static_recos_1();
  public:
  const ::cosmo::pb::UserData_StaticRecos& static_recos_1() const;
  ::cosmo::pb::UserData_StaticRecos* mutable_static_recos_1();
  ::cosmo::pb::UserData_StaticRecos* release_static_recos_1();
  void set_allocated_static_recos_1(::cosmo::pb::UserData_StaticRecos* static_recos_1);
  ::cosmo::pb::UserData_StaticRecos* unsafe_arena_release_static_recos_1();
  void unsafe_arena_set_allocated_static_recos_1(
      ::cosmo::pb::UserData_StaticRecos* static_recos_1);

  // optional .cosmo.pb.UserData.StaticRecos static_recos_2 = 19;
  bool has_static_recos_2() const;
  void clear_static_recos_2();
  static const int kStaticRecos2FieldNumber = 19;
  private:
  void _slow_mutable_static_recos_2();
  void _slow_set_allocated_static_recos_2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_StaticRecos** static_recos_2);
  ::cosmo::pb::UserData_StaticRecos* _slow_release_static_recos_2();
  public:
  const ::cosmo::pb::UserData_StaticRecos& static_recos_2() const;
  ::cosmo::pb::UserData_StaticRecos* mutable_static_recos_2();
  ::cosmo::pb::UserData_StaticRecos* release_static_recos_2();
  void set_allocated_static_recos_2(::cosmo::pb::UserData_StaticRecos* static_recos_2);
  ::cosmo::pb::UserData_StaticRecos* unsafe_arena_release_static_recos_2();
  void unsafe_arena_set_allocated_static_recos_2(
      ::cosmo::pb::UserData_StaticRecos* static_recos_2);

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user = 20;
  bool has_sites_for_user() const;
  void clear_sites_for_user();
  static const int kSitesForUserFieldNumber = 20;
  private:
  void _slow_mutable_sites_for_user();
  void _slow_set_allocated_sites_for_user(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** sites_for_user);
  ::cosmo::pb::UserData_SitesForUser* _slow_release_sites_for_user();
  public:
  const ::cosmo::pb::UserData_SitesForUser& sites_for_user() const;
  ::cosmo::pb::UserData_SitesForUser* mutable_sites_for_user();
  ::cosmo::pb::UserData_SitesForUser* release_sites_for_user();
  void set_allocated_sites_for_user(::cosmo::pb::UserData_SitesForUser* sites_for_user);
  ::cosmo::pb::UserData_SitesForUser* unsafe_arena_release_sites_for_user();
  void unsafe_arena_set_allocated_sites_for_user(
      ::cosmo::pb::UserData_SitesForUser* sites_for_user);

  // optional .cosmo.pb.UserData.UserKeywords keywords_daily = 21;
  bool has_keywords_daily() const;
  void clear_keywords_daily();
  static const int kKeywordsDailyFieldNumber = 21;
  private:
  void _slow_mutable_keywords_daily();
  void _slow_set_allocated_keywords_daily(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserKeywords** keywords_daily);
  ::cosmo::pb::UserData_UserKeywords* _slow_release_keywords_daily();
  public:
  const ::cosmo::pb::UserData_UserKeywords& keywords_daily() const;
  ::cosmo::pb::UserData_UserKeywords* mutable_keywords_daily();
  ::cosmo::pb::UserData_UserKeywords* release_keywords_daily();
  void set_allocated_keywords_daily(::cosmo::pb::UserData_UserKeywords* keywords_daily);
  ::cosmo::pb::UserData_UserKeywords* unsafe_arena_release_keywords_daily();
  void unsafe_arena_set_allocated_keywords_daily(
      ::cosmo::pb::UserData_UserKeywords* keywords_daily);

  // optional .cosmo.pb.UserData.UserKeywords keywords_monthly = 22;
  bool has_keywords_monthly() const;
  void clear_keywords_monthly();
  static const int kKeywordsMonthlyFieldNumber = 22;
  private:
  void _slow_mutable_keywords_monthly();
  void _slow_set_allocated_keywords_monthly(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserKeywords** keywords_monthly);
  ::cosmo::pb::UserData_UserKeywords* _slow_release_keywords_monthly();
  public:
  const ::cosmo::pb::UserData_UserKeywords& keywords_monthly() const;
  ::cosmo::pb::UserData_UserKeywords* mutable_keywords_monthly();
  ::cosmo::pb::UserData_UserKeywords* release_keywords_monthly();
  void set_allocated_keywords_monthly(::cosmo::pb::UserData_UserKeywords* keywords_monthly);
  ::cosmo::pb::UserData_UserKeywords* unsafe_arena_release_keywords_monthly();
  void unsafe_arena_set_allocated_keywords_monthly(
      ::cosmo::pb::UserData_UserKeywords* keywords_monthly);

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user1 = 23;
  bool has_sites_for_user1() const;
  void clear_sites_for_user1();
  static const int kSitesForUser1FieldNumber = 23;
  private:
  void _slow_mutable_sites_for_user1();
  void _slow_set_allocated_sites_for_user1(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** sites_for_user1);
  ::cosmo::pb::UserData_SitesForUser* _slow_release_sites_for_user1();
  public:
  const ::cosmo::pb::UserData_SitesForUser& sites_for_user1() const;
  ::cosmo::pb::UserData_SitesForUser* mutable_sites_for_user1();
  ::cosmo::pb::UserData_SitesForUser* release_sites_for_user1();
  void set_allocated_sites_for_user1(::cosmo::pb::UserData_SitesForUser* sites_for_user1);
  ::cosmo::pb::UserData_SitesForUser* unsafe_arena_release_sites_for_user1();
  void unsafe_arena_set_allocated_sites_for_user1(
      ::cosmo::pb::UserData_SitesForUser* sites_for_user1);

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user2 = 24;
  bool has_sites_for_user2() const;
  void clear_sites_for_user2();
  static const int kSitesForUser2FieldNumber = 24;
  private:
  void _slow_mutable_sites_for_user2();
  void _slow_set_allocated_sites_for_user2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** sites_for_user2);
  ::cosmo::pb::UserData_SitesForUser* _slow_release_sites_for_user2();
  public:
  const ::cosmo::pb::UserData_SitesForUser& sites_for_user2() const;
  ::cosmo::pb::UserData_SitesForUser* mutable_sites_for_user2();
  ::cosmo::pb::UserData_SitesForUser* release_sites_for_user2();
  void set_allocated_sites_for_user2(::cosmo::pb::UserData_SitesForUser* sites_for_user2);
  ::cosmo::pb::UserData_SitesForUser* unsafe_arena_release_sites_for_user2();
  void unsafe_arena_set_allocated_sites_for_user2(
      ::cosmo::pb::UserData_SitesForUser* sites_for_user2);

  // optional .cosmo.pb.UserData.VisitedDocs visited_docs = 25;
  bool has_visited_docs() const;
  void clear_visited_docs();
  static const int kVisitedDocsFieldNumber = 25;
  private:
  void _slow_mutable_visited_docs();
  void _slow_set_allocated_visited_docs(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_VisitedDocs** visited_docs);
  ::cosmo::pb::UserData_VisitedDocs* _slow_release_visited_docs();
  public:
  const ::cosmo::pb::UserData_VisitedDocs& visited_docs() const;
  ::cosmo::pb::UserData_VisitedDocs* mutable_visited_docs();
  ::cosmo::pb::UserData_VisitedDocs* release_visited_docs();
  void set_allocated_visited_docs(::cosmo::pb::UserData_VisitedDocs* visited_docs);
  ::cosmo::pb::UserData_VisitedDocs* unsafe_arena_release_visited_docs();
  void unsafe_arena_set_allocated_visited_docs(
      ::cosmo::pb::UserData_VisitedDocs* visited_docs);

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user3 = 26;
  bool has_sites_for_user3() const;
  void clear_sites_for_user3();
  static const int kSitesForUser3FieldNumber = 26;
  private:
  void _slow_mutable_sites_for_user3();
  void _slow_set_allocated_sites_for_user3(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** sites_for_user3);
  ::cosmo::pb::UserData_SitesForUser* _slow_release_sites_for_user3();
  public:
  const ::cosmo::pb::UserData_SitesForUser& sites_for_user3() const;
  ::cosmo::pb::UserData_SitesForUser* mutable_sites_for_user3();
  ::cosmo::pb::UserData_SitesForUser* release_sites_for_user3();
  void set_allocated_sites_for_user3(::cosmo::pb::UserData_SitesForUser* sites_for_user3);
  ::cosmo::pb::UserData_SitesForUser* unsafe_arena_release_sites_for_user3();
  void unsafe_arena_set_allocated_sites_for_user3(
      ::cosmo::pb::UserData_SitesForUser* sites_for_user3);

  // optional .cosmo.pb.UserData.LogsVisitedDocs logs_visited_docs = 27;
  bool has_logs_visited_docs() const;
  void clear_logs_visited_docs();
  static const int kLogsVisitedDocsFieldNumber = 27;
  private:
  void _slow_mutable_logs_visited_docs();
  void _slow_set_allocated_logs_visited_docs(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_LogsVisitedDocs** logs_visited_docs);
  ::cosmo::pb::UserData_LogsVisitedDocs* _slow_release_logs_visited_docs();
  public:
  const ::cosmo::pb::UserData_LogsVisitedDocs& logs_visited_docs() const;
  ::cosmo::pb::UserData_LogsVisitedDocs* mutable_logs_visited_docs();
  ::cosmo::pb::UserData_LogsVisitedDocs* release_logs_visited_docs();
  void set_allocated_logs_visited_docs(::cosmo::pb::UserData_LogsVisitedDocs* logs_visited_docs);
  ::cosmo::pb::UserData_LogsVisitedDocs* unsafe_arena_release_logs_visited_docs();
  void unsafe_arena_set_allocated_logs_visited_docs(
      ::cosmo::pb::UserData_LogsVisitedDocs* logs_visited_docs);

  // optional .cosmo.pb.UserData.SitesForUser sites_for_user4 = 28;
  bool has_sites_for_user4() const;
  void clear_sites_for_user4();
  static const int kSitesForUser4FieldNumber = 28;
  private:
  void _slow_mutable_sites_for_user4();
  void _slow_set_allocated_sites_for_user4(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** sites_for_user4);
  ::cosmo::pb::UserData_SitesForUser* _slow_release_sites_for_user4();
  public:
  const ::cosmo::pb::UserData_SitesForUser& sites_for_user4() const;
  ::cosmo::pb::UserData_SitesForUser* mutable_sites_for_user4();
  ::cosmo::pb::UserData_SitesForUser* release_sites_for_user4();
  void set_allocated_sites_for_user4(::cosmo::pb::UserData_SitesForUser* sites_for_user4);
  ::cosmo::pb::UserData_SitesForUser* unsafe_arena_release_sites_for_user4();
  void unsafe_arena_set_allocated_sites_for_user4(
      ::cosmo::pb::UserData_SitesForUser* sites_for_user4);

  // optional .cosmo.pb.UserData.UserThemesEvents user_themes = 29;
  bool has_user_themes() const;
  void clear_user_themes();
  static const int kUserThemesFieldNumber = 29;
  private:
  void _slow_mutable_user_themes();
  void _slow_set_allocated_user_themes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserThemesEvents** user_themes);
  ::cosmo::pb::UserData_UserThemesEvents* _slow_release_user_themes();
  public:
  const ::cosmo::pb::UserData_UserThemesEvents& user_themes() const;
  ::cosmo::pb::UserData_UserThemesEvents* mutable_user_themes();
  ::cosmo::pb::UserData_UserThemesEvents* release_user_themes();
  void set_allocated_user_themes(::cosmo::pb::UserData_UserThemesEvents* user_themes);
  ::cosmo::pb::UserData_UserThemesEvents* unsafe_arena_release_user_themes();
  void unsafe_arena_set_allocated_user_themes(
      ::cosmo::pb::UserData_UserThemesEvents* user_themes);

  // optional .cosmo.pb.UserData.UserEvents user_dislikes = 30;
  bool has_user_dislikes() const;
  void clear_user_dislikes();
  static const int kUserDislikesFieldNumber = 30;
  private:
  void _slow_mutable_user_dislikes();
  void _slow_set_allocated_user_dislikes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserEvents** user_dislikes);
  ::cosmo::pb::UserData_UserEvents* _slow_release_user_dislikes();
  public:
  const ::cosmo::pb::UserData_UserEvents& user_dislikes() const;
  ::cosmo::pb::UserData_UserEvents* mutable_user_dislikes();
  ::cosmo::pb::UserData_UserEvents* release_user_dislikes();
  void set_allocated_user_dislikes(::cosmo::pb::UserData_UserEvents* user_dislikes);
  ::cosmo::pb::UserData_UserEvents* unsafe_arena_release_user_dislikes();
  void unsafe_arena_set_allocated_user_dislikes(
      ::cosmo::pb::UserData_UserEvents* user_dislikes);

  // optional .cosmo.pb.UserData.UserVideos user_videos = 31;
  bool has_user_videos() const;
  void clear_user_videos();
  static const int kUserVideosFieldNumber = 31;
  private:
  void _slow_mutable_user_videos();
  void _slow_set_allocated_user_videos(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideos** user_videos);
  ::cosmo::pb::UserData_UserVideos* _slow_release_user_videos();
  public:
  const ::cosmo::pb::UserData_UserVideos& user_videos() const;
  ::cosmo::pb::UserData_UserVideos* mutable_user_videos();
  ::cosmo::pb::UserData_UserVideos* release_user_videos();
  void set_allocated_user_videos(::cosmo::pb::UserData_UserVideos* user_videos);
  ::cosmo::pb::UserData_UserVideos* unsafe_arena_release_user_videos();
  void unsafe_arena_set_allocated_user_videos(
      ::cosmo::pb::UserData_UserVideos* user_videos);

  // optional .cosmo.pb.UserData.UserVideoEvents user_video_events = 32;
  bool has_user_video_events() const;
  void clear_user_video_events();
  static const int kUserVideoEventsFieldNumber = 32;
  private:
  void _slow_mutable_user_video_events();
  void _slow_set_allocated_user_video_events(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserVideoEvents** user_video_events);
  ::cosmo::pb::UserData_UserVideoEvents* _slow_release_user_video_events();
  public:
  const ::cosmo::pb::UserData_UserVideoEvents& user_video_events() const;
  ::cosmo::pb::UserData_UserVideoEvents* mutable_user_video_events();
  ::cosmo::pb::UserData_UserVideoEvents* release_user_video_events();
  void set_allocated_user_video_events(::cosmo::pb::UserData_UserVideoEvents* user_video_events);
  ::cosmo::pb::UserData_UserVideoEvents* unsafe_arena_release_user_video_events();
  void unsafe_arena_set_allocated_user_video_events(
      ::cosmo::pb::UserData_UserVideoEvents* user_video_events);

  // optional .cosmo.pb.UserData.UserMusic user_music = 33;
  bool has_user_music() const;
  void clear_user_music();
  static const int kUserMusicFieldNumber = 33;
  private:
  void _slow_mutable_user_music();
  void _slow_set_allocated_user_music(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserMusic** user_music);
  ::cosmo::pb::UserData_UserMusic* _slow_release_user_music();
  public:
  const ::cosmo::pb::UserData_UserMusic& user_music() const;
  ::cosmo::pb::UserData_UserMusic* mutable_user_music();
  ::cosmo::pb::UserData_UserMusic* release_user_music();
  void set_allocated_user_music(::cosmo::pb::UserData_UserMusic* user_music);
  ::cosmo::pb::UserData_UserMusic* unsafe_arena_release_user_music();
  void unsafe_arena_set_allocated_user_music(
      ::cosmo::pb::UserData_UserMusic* user_music);

  // optional .cosmo.pb.UserData.SubscriptionInfo recostream_categories_subscriptions = 34;
  bool has_recostream_categories_subscriptions() const;
  void clear_recostream_categories_subscriptions();
  static const int kRecostreamCategoriesSubscriptionsFieldNumber = 34;
  private:
  void _slow_mutable_recostream_categories_subscriptions();
  void _slow_set_allocated_recostream_categories_subscriptions(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** recostream_categories_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* _slow_release_recostream_categories_subscriptions();
  public:
  const ::cosmo::pb::UserData_SubscriptionInfo& recostream_categories_subscriptions() const;
  ::cosmo::pb::UserData_SubscriptionInfo* mutable_recostream_categories_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* release_recostream_categories_subscriptions();
  void set_allocated_recostream_categories_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* recostream_categories_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* unsafe_arena_release_recostream_categories_subscriptions();
  void unsafe_arena_set_allocated_recostream_categories_subscriptions(
      ::cosmo::pb::UserData_SubscriptionInfo* recostream_categories_subscriptions);

  // optional .cosmo.pb.UserData.SubscriptionInfo recostream_domains_subscriptions = 35;
  bool has_recostream_domains_subscriptions() const;
  void clear_recostream_domains_subscriptions();
  static const int kRecostreamDomainsSubscriptionsFieldNumber = 35;
  private:
  void _slow_mutable_recostream_domains_subscriptions();
  void _slow_set_allocated_recostream_domains_subscriptions(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** recostream_domains_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* _slow_release_recostream_domains_subscriptions();
  public:
  const ::cosmo::pb::UserData_SubscriptionInfo& recostream_domains_subscriptions() const;
  ::cosmo::pb::UserData_SubscriptionInfo* mutable_recostream_domains_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* release_recostream_domains_subscriptions();
  void set_allocated_recostream_domains_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* recostream_domains_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* unsafe_arena_release_recostream_domains_subscriptions();
  void unsafe_arena_set_allocated_recostream_domains_subscriptions(
      ::cosmo::pb::UserData_SubscriptionInfo* recostream_domains_subscriptions);

  // optional .cosmo.pb.UserData.SubscriptionInfo kafka_categories_subscriptions = 36;
  bool has_kafka_categories_subscriptions() const;
  void clear_kafka_categories_subscriptions();
  static const int kKafkaCategoriesSubscriptionsFieldNumber = 36;
  private:
  void _slow_mutable_kafka_categories_subscriptions();
  void _slow_set_allocated_kafka_categories_subscriptions(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** kafka_categories_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* _slow_release_kafka_categories_subscriptions();
  public:
  const ::cosmo::pb::UserData_SubscriptionInfo& kafka_categories_subscriptions() const;
  ::cosmo::pb::UserData_SubscriptionInfo* mutable_kafka_categories_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* release_kafka_categories_subscriptions();
  void set_allocated_kafka_categories_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* kafka_categories_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* unsafe_arena_release_kafka_categories_subscriptions();
  void unsafe_arena_set_allocated_kafka_categories_subscriptions(
      ::cosmo::pb::UserData_SubscriptionInfo* kafka_categories_subscriptions);

  // optional .cosmo.pb.UserData.SubscriptionInfo kafka_domains_subscriptions = 37;
  bool has_kafka_domains_subscriptions() const;
  void clear_kafka_domains_subscriptions();
  static const int kKafkaDomainsSubscriptionsFieldNumber = 37;
  private:
  void _slow_mutable_kafka_domains_subscriptions();
  void _slow_set_allocated_kafka_domains_subscriptions(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** kafka_domains_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* _slow_release_kafka_domains_subscriptions();
  public:
  const ::cosmo::pb::UserData_SubscriptionInfo& kafka_domains_subscriptions() const;
  ::cosmo::pb::UserData_SubscriptionInfo* mutable_kafka_domains_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* release_kafka_domains_subscriptions();
  void set_allocated_kafka_domains_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* kafka_domains_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* unsafe_arena_release_kafka_domains_subscriptions();
  void unsafe_arena_set_allocated_kafka_domains_subscriptions(
      ::cosmo::pb::UserData_SubscriptionInfo* kafka_domains_subscriptions);

  // optional .cosmo.pb.UserData.SubscriptionInfo recostream_sources_subscriptions = 38;
  bool has_recostream_sources_subscriptions() const;
  void clear_recostream_sources_subscriptions();
  static const int kRecostreamSourcesSubscriptionsFieldNumber = 38;
  private:
  void _slow_mutable_recostream_sources_subscriptions();
  void _slow_set_allocated_recostream_sources_subscriptions(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** recostream_sources_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* _slow_release_recostream_sources_subscriptions();
  public:
  const ::cosmo::pb::UserData_SubscriptionInfo& recostream_sources_subscriptions() const;
  ::cosmo::pb::UserData_SubscriptionInfo* mutable_recostream_sources_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* release_recostream_sources_subscriptions();
  void set_allocated_recostream_sources_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* recostream_sources_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* unsafe_arena_release_recostream_sources_subscriptions();
  void unsafe_arena_set_allocated_recostream_sources_subscriptions(
      ::cosmo::pb::UserData_SubscriptionInfo* recostream_sources_subscriptions);

  // optional .cosmo.pb.UserData.UserEvents recostream_dislikes = 39;
  bool has_recostream_dislikes() const;
  void clear_recostream_dislikes();
  static const int kRecostreamDislikesFieldNumber = 39;
  private:
  void _slow_mutable_recostream_dislikes();
  void _slow_set_allocated_recostream_dislikes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserEvents** recostream_dislikes);
  ::cosmo::pb::UserData_UserEvents* _slow_release_recostream_dislikes();
  public:
  const ::cosmo::pb::UserData_UserEvents& recostream_dislikes() const;
  ::cosmo::pb::UserData_UserEvents* mutable_recostream_dislikes();
  ::cosmo::pb::UserData_UserEvents* release_recostream_dislikes();
  void set_allocated_recostream_dislikes(::cosmo::pb::UserData_UserEvents* recostream_dislikes);
  ::cosmo::pb::UserData_UserEvents* unsafe_arena_release_recostream_dislikes();
  void unsafe_arena_set_allocated_recostream_dislikes(
      ::cosmo::pb::UserData_UserEvents* recostream_dislikes);

  // optional .cosmo.pb.UserData.VkGroupsForUser vk_groups_for_user = 40;
  bool has_vk_groups_for_user() const;
  void clear_vk_groups_for_user();
  static const int kVkGroupsForUserFieldNumber = 40;
  private:
  void _slow_mutable_vk_groups_for_user();
  void _slow_set_allocated_vk_groups_for_user(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_VkGroupsForUser** vk_groups_for_user);
  ::cosmo::pb::UserData_VkGroupsForUser* _slow_release_vk_groups_for_user();
  public:
  const ::cosmo::pb::UserData_VkGroupsForUser& vk_groups_for_user() const;
  ::cosmo::pb::UserData_VkGroupsForUser* mutable_vk_groups_for_user();
  ::cosmo::pb::UserData_VkGroupsForUser* release_vk_groups_for_user();
  void set_allocated_vk_groups_for_user(::cosmo::pb::UserData_VkGroupsForUser* vk_groups_for_user);
  ::cosmo::pb::UserData_VkGroupsForUser* unsafe_arena_release_vk_groups_for_user();
  void unsafe_arena_set_allocated_vk_groups_for_user(
      ::cosmo::pb::UserData_VkGroupsForUser* vk_groups_for_user);

  // optional .cosmo.pb.UserData.LogsVisitedSources logs_visited_sources = 41;
  bool has_logs_visited_sources() const;
  void clear_logs_visited_sources();
  static const int kLogsVisitedSourcesFieldNumber = 41;
  private:
  void _slow_mutable_logs_visited_sources();
  void _slow_set_allocated_logs_visited_sources(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_LogsVisitedSources** logs_visited_sources);
  ::cosmo::pb::UserData_LogsVisitedSources* _slow_release_logs_visited_sources();
  public:
  const ::cosmo::pb::UserData_LogsVisitedSources& logs_visited_sources() const;
  ::cosmo::pb::UserData_LogsVisitedSources* mutable_logs_visited_sources();
  ::cosmo::pb::UserData_LogsVisitedSources* release_logs_visited_sources();
  void set_allocated_logs_visited_sources(::cosmo::pb::UserData_LogsVisitedSources* logs_visited_sources);
  ::cosmo::pb::UserData_LogsVisitedSources* unsafe_arena_release_logs_visited_sources();
  void unsafe_arena_set_allocated_logs_visited_sources(
      ::cosmo::pb::UserData_LogsVisitedSources* logs_visited_sources);

  // optional .cosmo.pb.UserData.SubscriptionInfo kafka_sources_subscriptions = 42;
  bool has_kafka_sources_subscriptions() const;
  void clear_kafka_sources_subscriptions();
  static const int kKafkaSourcesSubscriptionsFieldNumber = 42;
  private:
  void _slow_mutable_kafka_sources_subscriptions();
  void _slow_set_allocated_kafka_sources_subscriptions(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SubscriptionInfo** kafka_sources_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* _slow_release_kafka_sources_subscriptions();
  public:
  const ::cosmo::pb::UserData_SubscriptionInfo& kafka_sources_subscriptions() const;
  ::cosmo::pb::UserData_SubscriptionInfo* mutable_kafka_sources_subscriptions();
  ::cosmo::pb::UserData_SubscriptionInfo* release_kafka_sources_subscriptions();
  void set_allocated_kafka_sources_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* kafka_sources_subscriptions);
  ::cosmo::pb::UserData_SubscriptionInfo* unsafe_arena_release_kafka_sources_subscriptions();
  void unsafe_arena_set_allocated_kafka_sources_subscriptions(
      ::cosmo::pb::UserData_SubscriptionInfo* kafka_sources_subscriptions);

  // optional .cosmo.pb.UserData.UserEvents recostream_likes = 43;
  bool has_recostream_likes() const;
  void clear_recostream_likes();
  static const int kRecostreamLikesFieldNumber = 43;
  private:
  void _slow_mutable_recostream_likes();
  void _slow_set_allocated_recostream_likes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserEvents** recostream_likes);
  ::cosmo::pb::UserData_UserEvents* _slow_release_recostream_likes();
  public:
  const ::cosmo::pb::UserData_UserEvents& recostream_likes() const;
  ::cosmo::pb::UserData_UserEvents* mutable_recostream_likes();
  ::cosmo::pb::UserData_UserEvents* release_recostream_likes();
  void set_allocated_recostream_likes(::cosmo::pb::UserData_UserEvents* recostream_likes);
  ::cosmo::pb::UserData_UserEvents* unsafe_arena_release_recostream_likes();
  void unsafe_arena_set_allocated_recostream_likes(
      ::cosmo::pb::UserData_UserEvents* recostream_likes);

  // optional .cosmo.pb.UserData.UserEvents user_likes = 44;
  bool has_user_likes() const;
  void clear_user_likes();
  static const int kUserLikesFieldNumber = 44;
  private:
  void _slow_mutable_user_likes();
  void _slow_set_allocated_user_likes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserEvents** user_likes);
  ::cosmo::pb::UserData_UserEvents* _slow_release_user_likes();
  public:
  const ::cosmo::pb::UserData_UserEvents& user_likes() const;
  ::cosmo::pb::UserData_UserEvents* mutable_user_likes();
  ::cosmo::pb::UserData_UserEvents* release_user_likes();
  void set_allocated_user_likes(::cosmo::pb::UserData_UserEvents* user_likes);
  ::cosmo::pb::UserData_UserEvents* unsafe_arena_release_user_likes();
  void unsafe_arena_set_allocated_user_likes(
      ::cosmo::pb::UserData_UserEvents* user_likes);

  // optional .cosmo.pb.UserData.UserSourcesEvents user_sources_events = 45;
  bool has_user_sources_events() const;
  void clear_user_sources_events();
  static const int kUserSourcesEventsFieldNumber = 45;
  private:
  void _slow_mutable_user_sources_events();
  void _slow_set_allocated_user_sources_events(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserSourcesEvents** user_sources_events);
  ::cosmo::pb::UserData_UserSourcesEvents* _slow_release_user_sources_events();
  public:
  const ::cosmo::pb::UserData_UserSourcesEvents& user_sources_events() const;
  ::cosmo::pb::UserData_UserSourcesEvents* mutable_user_sources_events();
  ::cosmo::pb::UserData_UserSourcesEvents* release_user_sources_events();
  void set_allocated_user_sources_events(::cosmo::pb::UserData_UserSourcesEvents* user_sources_events);
  ::cosmo::pb::UserData_UserSourcesEvents* unsafe_arena_release_user_sources_events();
  void unsafe_arena_set_allocated_user_sources_events(
      ::cosmo::pb::UserData_UserSourcesEvents* user_sources_events);

  // optional .cosmo.pb.UserData.SitesForUser narrow_sites = 46;
  bool has_narrow_sites() const;
  void clear_narrow_sites();
  static const int kNarrowSitesFieldNumber = 46;
  private:
  void _slow_mutable_narrow_sites();
  void _slow_set_allocated_narrow_sites(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** narrow_sites);
  ::cosmo::pb::UserData_SitesForUser* _slow_release_narrow_sites();
  public:
  const ::cosmo::pb::UserData_SitesForUser& narrow_sites() const;
  ::cosmo::pb::UserData_SitesForUser* mutable_narrow_sites();
  ::cosmo::pb::UserData_SitesForUser* release_narrow_sites();
  void set_allocated_narrow_sites(::cosmo::pb::UserData_SitesForUser* narrow_sites);
  ::cosmo::pb::UserData_SitesForUser* unsafe_arena_release_narrow_sites();
  void unsafe_arena_set_allocated_narrow_sites(
      ::cosmo::pb::UserData_SitesForUser* narrow_sites);

  // optional .cosmo.pb.UserData.SitesForUser narrow_sites1 = 47;
  bool has_narrow_sites1() const;
  void clear_narrow_sites1();
  static const int kNarrowSites1FieldNumber = 47;
  private:
  void _slow_mutable_narrow_sites1();
  void _slow_set_allocated_narrow_sites1(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_SitesForUser** narrow_sites1);
  ::cosmo::pb::UserData_SitesForUser* _slow_release_narrow_sites1();
  public:
  const ::cosmo::pb::UserData_SitesForUser& narrow_sites1() const;
  ::cosmo::pb::UserData_SitesForUser* mutable_narrow_sites1();
  ::cosmo::pb::UserData_SitesForUser* release_narrow_sites1();
  void set_allocated_narrow_sites1(::cosmo::pb::UserData_SitesForUser* narrow_sites1);
  ::cosmo::pb::UserData_SitesForUser* unsafe_arena_release_narrow_sites1();
  void unsafe_arena_set_allocated_narrow_sites1(
      ::cosmo::pb::UserData_SitesForUser* narrow_sites1);

  // optional .cosmo.pb.PackedReactionsArr reactions = 48;
  bool has_reactions() const;
  void clear_reactions();
  static const int kReactionsFieldNumber = 48;
  private:
  void _slow_mutable_reactions();
  ::cosmo::pb::PackedReactionsArr* _slow_release_reactions();
  public:
  const ::cosmo::pb::PackedReactionsArr& reactions() const;
  ::cosmo::pb::PackedReactionsArr* mutable_reactions();
  ::cosmo::pb::PackedReactionsArr* release_reactions();
  void set_allocated_reactions(::cosmo::pb::PackedReactionsArr* reactions);
  ::cosmo::pb::PackedReactionsArr* unsafe_arena_release_reactions();
  void unsafe_arena_set_allocated_reactions(
      ::cosmo::pb::PackedReactionsArr* reactions);

  // optional .cosmo.pb.ShowsArr shows = 49;
  bool has_shows() const;
  void clear_shows();
  static const int kShowsFieldNumber = 49;
  private:
  void _slow_mutable_shows();
  ::cosmo::pb::ShowsArr* _slow_release_shows();
  public:
  const ::cosmo::pb::ShowsArr& shows() const;
  ::cosmo::pb::ShowsArr* mutable_shows();
  ::cosmo::pb::ShowsArr* release_shows();
  void set_allocated_shows(::cosmo::pb::ShowsArr* shows);
  ::cosmo::pb::ShowsArr* unsafe_arena_release_shows();
  void unsafe_arena_set_allocated_shows(
      ::cosmo::pb::ShowsArr* shows);

  // optional .cosmo.pb.UserData.UserI2IEvents i2i_user_themes = 50;
  bool has_i2i_user_themes() const;
  void clear_i2i_user_themes();
  static const int kI2IUserThemesFieldNumber = 50;
  private:
  void _slow_mutable_i2i_user_themes();
  void _slow_set_allocated_i2i_user_themes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData_UserI2IEvents** i2i_user_themes);
  ::cosmo::pb::UserData_UserI2IEvents* _slow_release_i2i_user_themes();
  public:
  const ::cosmo::pb::UserData_UserI2IEvents& i2i_user_themes() const;
  ::cosmo::pb::UserData_UserI2IEvents* mutable_i2i_user_themes();
  ::cosmo::pb::UserData_UserI2IEvents* release_i2i_user_themes();
  void set_allocated_i2i_user_themes(::cosmo::pb::UserData_UserI2IEvents* i2i_user_themes);
  ::cosmo::pb::UserData_UserI2IEvents* unsafe_arena_release_i2i_user_themes();
  void unsafe_arena_set_allocated_i2i_user_themes(
      ::cosmo::pb::UserData_UserI2IEvents* i2i_user_themes);

  // optional int64 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.UserData)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_socdem_fea();
  void clear_has_socdem_fea();
  void set_has_als_fea();
  void clear_has_als_fea();
  void set_has_ok_info();
  void clear_has_ok_info();
  void set_has_deti_reco();
  void clear_has_deti_reco();
  void set_has_als_items_fea();
  void clear_has_als_items_fea();
  void set_has_news_sources();
  void clear_has_news_sources();
  void set_has_stats();
  void clear_has_stats();
  void set_has_original_info();
  void clear_has_original_info();
  void set_has_als_fea_2();
  void clear_has_als_fea_2();
  void set_has_sources_web_stats();
  void clear_has_sources_web_stats();
  void set_has_sources_reco_stats();
  void clear_has_sources_reco_stats();
  void set_has_user_links();
  void clear_has_user_links();
  void set_has_user_clusters();
  void clear_has_user_clusters();
  void set_has_similar_sites();
  void clear_has_similar_sites();
  void set_has_content_themes();
  void clear_has_content_themes();
  void set_has_static_recos_1();
  void clear_has_static_recos_1();
  void set_has_static_recos_2();
  void clear_has_static_recos_2();
  void set_has_sites_for_user();
  void clear_has_sites_for_user();
  void set_has_keywords_daily();
  void clear_has_keywords_daily();
  void set_has_keywords_monthly();
  void clear_has_keywords_monthly();
  void set_has_sites_for_user1();
  void clear_has_sites_for_user1();
  void set_has_sites_for_user2();
  void clear_has_sites_for_user2();
  void set_has_visited_docs();
  void clear_has_visited_docs();
  void set_has_sites_for_user3();
  void clear_has_sites_for_user3();
  void set_has_logs_visited_docs();
  void clear_has_logs_visited_docs();
  void set_has_sites_for_user4();
  void clear_has_sites_for_user4();
  void set_has_user_themes();
  void clear_has_user_themes();
  void set_has_user_dislikes();
  void clear_has_user_dislikes();
  void set_has_user_videos();
  void clear_has_user_videos();
  void set_has_user_video_events();
  void clear_has_user_video_events();
  void set_has_user_music();
  void clear_has_user_music();
  void set_has_recostream_categories_subscriptions();
  void clear_has_recostream_categories_subscriptions();
  void set_has_recostream_domains_subscriptions();
  void clear_has_recostream_domains_subscriptions();
  void set_has_kafka_categories_subscriptions();
  void clear_has_kafka_categories_subscriptions();
  void set_has_kafka_domains_subscriptions();
  void clear_has_kafka_domains_subscriptions();
  void set_has_recostream_sources_subscriptions();
  void clear_has_recostream_sources_subscriptions();
  void set_has_recostream_dislikes();
  void clear_has_recostream_dislikes();
  void set_has_vk_groups_for_user();
  void clear_has_vk_groups_for_user();
  void set_has_logs_visited_sources();
  void clear_has_logs_visited_sources();
  void set_has_kafka_sources_subscriptions();
  void clear_has_kafka_sources_subscriptions();
  void set_has_recostream_likes();
  void clear_has_recostream_likes();
  void set_has_user_likes();
  void clear_has_user_likes();
  void set_has_user_sources_events();
  void clear_has_user_sources_events();
  void set_has_narrow_sites();
  void clear_has_narrow_sites();
  void set_has_narrow_sites1();
  void clear_has_narrow_sites1();
  void set_has_reactions();
  void clear_has_reactions();
  void set_has_shows();
  void clear_has_shows();
  void set_has_i2i_user_themes();
  void clear_has_i2i_user_themes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::cosmo::pb::UserData_SocDemFea* socdem_fea_;
  ::cosmo::pb::UserData_AlsFea* als_fea_;
  ::cosmo::pb::UserData_OkInfo* ok_info_;
  ::cosmo::pb::UserData_DetiRecos* deti_reco_;
  ::cosmo::pb::UserData_AlsItemsBiases* als_items_fea_;
  ::cosmo::pb::UserData_NewsSources* news_sources_;
  ::cosmo::pb::UserData_Stats* stats_;
  ::cosmo::pb::UserData_OriginalInfo* original_info_;
  ::cosmo::pb::UserData_AlsFea* als_fea_2_;
  ::cosmo::pb::UserData_SourcesWebStats* sources_web_stats_;
  ::cosmo::pb::UserData_Stats* sources_reco_stats_;
  ::cosmo::pb::UserData_UserLinks* user_links_;
  ::cosmo::pb::UserData_UserClusters* user_clusters_;
  ::cosmo::pb::UserData_SimilarSites* similar_sites_;
  ::cosmo::pb::UserData_ContentThemes* content_themes_;
  ::cosmo::pb::UserData_StaticRecos* static_recos_1_;
  ::cosmo::pb::UserData_StaticRecos* static_recos_2_;
  ::cosmo::pb::UserData_SitesForUser* sites_for_user_;
  ::cosmo::pb::UserData_UserKeywords* keywords_daily_;
  ::cosmo::pb::UserData_UserKeywords* keywords_monthly_;
  ::cosmo::pb::UserData_SitesForUser* sites_for_user1_;
  ::cosmo::pb::UserData_SitesForUser* sites_for_user2_;
  ::cosmo::pb::UserData_VisitedDocs* visited_docs_;
  ::cosmo::pb::UserData_SitesForUser* sites_for_user3_;
  ::cosmo::pb::UserData_LogsVisitedDocs* logs_visited_docs_;
  ::cosmo::pb::UserData_SitesForUser* sites_for_user4_;
  ::cosmo::pb::UserData_UserThemesEvents* user_themes_;
  ::cosmo::pb::UserData_UserEvents* user_dislikes_;
  ::cosmo::pb::UserData_UserVideos* user_videos_;
  ::cosmo::pb::UserData_UserVideoEvents* user_video_events_;
  ::cosmo::pb::UserData_UserMusic* user_music_;
  ::cosmo::pb::UserData_SubscriptionInfo* recostream_categories_subscriptions_;
  ::cosmo::pb::UserData_SubscriptionInfo* recostream_domains_subscriptions_;
  ::cosmo::pb::UserData_SubscriptionInfo* kafka_categories_subscriptions_;
  ::cosmo::pb::UserData_SubscriptionInfo* kafka_domains_subscriptions_;
  ::cosmo::pb::UserData_SubscriptionInfo* recostream_sources_subscriptions_;
  ::cosmo::pb::UserData_UserEvents* recostream_dislikes_;
  ::cosmo::pb::UserData_VkGroupsForUser* vk_groups_for_user_;
  ::cosmo::pb::UserData_LogsVisitedSources* logs_visited_sources_;
  ::cosmo::pb::UserData_SubscriptionInfo* kafka_sources_subscriptions_;
  ::cosmo::pb::UserData_UserEvents* recostream_likes_;
  ::cosmo::pb::UserData_UserEvents* user_likes_;
  ::cosmo::pb::UserData_UserSourcesEvents* user_sources_events_;
  ::cosmo::pb::UserData_SitesForUser* narrow_sites_;
  ::cosmo::pb::UserData_SitesForUser* narrow_sites1_;
  ::cosmo::pb::PackedReactionsArr* reactions_;
  ::cosmo::pb::ShowsArr* shows_;
  ::cosmo::pb::UserData_UserI2IEvents* i2i_user_themes_;
  ::google::protobuf::int64 user_id_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupedUserData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.GroupedUserData) */ {
 public:
  GroupedUserData();
  virtual ~GroupedUserData();

  GroupedUserData(const GroupedUserData& from);

  inline GroupedUserData& operator=(const GroupedUserData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupedUserData(GroupedUserData&& from) noexcept
    : GroupedUserData() {
    *this = ::std::move(from);
  }

  inline GroupedUserData& operator=(GroupedUserData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupedUserData& default_instance();

  static inline const GroupedUserData* internal_default_instance() {
    return reinterpret_cast<const GroupedUserData*>(
               &_GroupedUserData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void UnsafeArenaSwap(GroupedUserData* other);
  void Swap(GroupedUserData* other);
  friend void swap(GroupedUserData& a, GroupedUserData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupedUserData* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupedUserData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupedUserData& from);
  void MergeFrom(const GroupedUserData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupedUserData* other);
  protected:
  explicit GroupedUserData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  private:
  void _slow_mutable_data();
  void _slow_set_allocated_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData** data);
  ::cosmo::pb::UserData* _slow_release_data();
  public:
  const ::cosmo::pb::UserData& data() const;
  ::cosmo::pb::UserData* mutable_data();
  ::cosmo::pb::UserData* release_data();
  void set_allocated_data(::cosmo::pb::UserData* data);
  ::cosmo::pb::UserData* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::cosmo::pb::UserData* data);

  // @@protoc_insertion_point(class_scope:cosmo.pb.GroupedUserData)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData* data_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_OriginalInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.OriginalInfo) */ {
 public:
  SourceData_OriginalInfo();
  virtual ~SourceData_OriginalInfo();

  SourceData_OriginalInfo(const SourceData_OriginalInfo& from);

  inline SourceData_OriginalInfo& operator=(const SourceData_OriginalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_OriginalInfo(SourceData_OriginalInfo&& from) noexcept
    : SourceData_OriginalInfo() {
    *this = ::std::move(from);
  }

  inline SourceData_OriginalInfo& operator=(SourceData_OriginalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_OriginalInfo& default_instance();

  static inline const SourceData_OriginalInfo* internal_default_instance() {
    return reinterpret_cast<const SourceData_OriginalInfo*>(
               &_SourceData_OriginalInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void UnsafeArenaSwap(SourceData_OriginalInfo* other);
  void Swap(SourceData_OriginalInfo* other);
  friend void swap(SourceData_OriginalInfo& a, SourceData_OriginalInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_OriginalInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_OriginalInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_OriginalInfo& from);
  void MergeFrom(const SourceData_OriginalInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_OriginalInfo* other);
  protected:
  explicit SourceData_OriginalInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.OriginalInfo)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_OkInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.OkInfo) */ {
 public:
  SourceData_OkInfo();
  virtual ~SourceData_OkInfo();

  SourceData_OkInfo(const SourceData_OkInfo& from);

  inline SourceData_OkInfo& operator=(const SourceData_OkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_OkInfo(SourceData_OkInfo&& from) noexcept
    : SourceData_OkInfo() {
    *this = ::std::move(from);
  }

  inline SourceData_OkInfo& operator=(SourceData_OkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_OkInfo& default_instance();

  static inline const SourceData_OkInfo* internal_default_instance() {
    return reinterpret_cast<const SourceData_OkInfo*>(
               &_SourceData_OkInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void UnsafeArenaSwap(SourceData_OkInfo* other);
  void Swap(SourceData_OkInfo* other);
  friend void swap(SourceData_OkInfo& a, SourceData_OkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_OkInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_OkInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_OkInfo& from);
  void MergeFrom(const SourceData_OkInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_OkInfo* other);
  protected:
  explicit SourceData_OkInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.OkInfo)
 private:
  void set_has_source_id();
  void clear_has_source_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_NewsData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.NewsData) */ {
 public:
  SourceData_NewsData();
  virtual ~SourceData_NewsData();

  SourceData_NewsData(const SourceData_NewsData& from);

  inline SourceData_NewsData& operator=(const SourceData_NewsData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_NewsData(SourceData_NewsData&& from) noexcept
    : SourceData_NewsData() {
    *this = ::std::move(from);
  }

  inline SourceData_NewsData& operator=(SourceData_NewsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_NewsData& default_instance();

  static inline const SourceData_NewsData* internal_default_instance() {
    return reinterpret_cast<const SourceData_NewsData*>(
               &_SourceData_NewsData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void UnsafeArenaSwap(SourceData_NewsData* other);
  void Swap(SourceData_NewsData* other);
  friend void swap(SourceData_NewsData& a, SourceData_NewsData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_NewsData* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_NewsData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_NewsData& from);
  void MergeFrom(const SourceData_NewsData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_NewsData* other);
  protected:
  explicit SourceData_NewsData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rubric = 1;
  bool has_rubric() const;
  void clear_rubric();
  static const int kRubricFieldNumber = 1;
  ::google::protobuf::int32 rubric() const;
  void set_rubric(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.NewsData)
 private:
  void set_has_rubric();
  void clear_has_rubric();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 rubric_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourceInfo) */ {
 public:
  SourceData_SourceInfo();
  virtual ~SourceData_SourceInfo();

  SourceData_SourceInfo(const SourceData_SourceInfo& from);

  inline SourceData_SourceInfo& operator=(const SourceData_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourceInfo(SourceData_SourceInfo&& from) noexcept
    : SourceData_SourceInfo() {
    *this = ::std::move(from);
  }

  inline SourceData_SourceInfo& operator=(SourceData_SourceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourceInfo& default_instance();

  static inline const SourceData_SourceInfo* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourceInfo*>(
               &_SourceData_SourceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void UnsafeArenaSwap(SourceData_SourceInfo* other);
  void Swap(SourceData_SourceInfo* other);
  friend void swap(SourceData_SourceInfo& a, SourceData_SourceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourceInfo& from);
  void MergeFrom(const SourceData_SourceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourceInfo* other);
  protected:
  explicit SourceData_SourceInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SourceData_SourceInfo_SourceType SourceType;
  static const SourceType OK =
    SourceData_SourceInfo_SourceType_OK;
  static const SourceType ADVERT =
    SourceData_SourceInfo_SourceType_ADVERT;
  static const SourceType WEB =
    SourceData_SourceInfo_SourceType_WEB;
  static const SourceType NEWS =
    SourceData_SourceInfo_SourceType_NEWS;
  static const SourceType LENTA =
    SourceData_SourceInfo_SourceType_LENTA;
  static inline bool SourceType_IsValid(int value) {
    return SourceData_SourceInfo_SourceType_IsValid(value);
  }
  static const SourceType SourceType_MIN =
    SourceData_SourceInfo_SourceType_SourceType_MIN;
  static const SourceType SourceType_MAX =
    SourceData_SourceInfo_SourceType_SourceType_MAX;
  static const int SourceType_ARRAYSIZE =
    SourceData_SourceInfo_SourceType_SourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SourceType_descriptor() {
    return SourceData_SourceInfo_SourceType_descriptor();
  }
  static inline const ::std::string& SourceType_Name(SourceType value) {
    return SourceData_SourceInfo_SourceType_Name(value);
  }
  static inline bool SourceType_Parse(const ::std::string& name,
      SourceType* value) {
    return SourceData_SourceInfo_SourceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 category = 3;
  int category_size() const;
  void clear_category();
  static const int kCategoryFieldNumber = 3;
  ::google::protobuf::int32 category(int index) const;
  void set_category(int index, ::google::protobuf::int32 value);
  void add_category(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      category() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_category();

  // required .cosmo.pb.SourceData.SourceInfo.SourceType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::cosmo::pb::SourceData_SourceInfo_SourceType type() const;
  void set_type(::cosmo::pb::SourceData_SourceInfo_SourceType value);

  // optional bool is_censored = 2;
  bool has_is_censored() const;
  void clear_is_censored();
  static const int kIsCensoredFieldNumber = 2;
  bool is_censored() const;
  void set_is_censored(bool value);

  // optional bool tape_show = 4;
  bool has_tape_show() const;
  void clear_tape_show();
  static const int kTapeShowFieldNumber = 4;
  bool tape_show() const;
  void set_tape_show(bool value);

  // optional bool tape_whitelist = 5;
  bool has_tape_whitelist() const;
  void clear_tape_whitelist();
  static const int kTapeWhitelistFieldNumber = 5;
  bool tape_whitelist() const;
  void set_tape_whitelist(bool value);

  // optional bool tape_blacklist = 6;
  bool has_tape_blacklist() const;
  void clear_tape_blacklist();
  static const int kTapeBlacklistFieldNumber = 6;
  bool tape_blacklist() const;
  void set_tape_blacklist(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourceInfo)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_is_censored();
  void clear_has_is_censored();
  void set_has_tape_show();
  void clear_has_tape_show();
  void set_has_tape_whitelist();
  void clear_has_tape_whitelist();
  void set_has_tape_blacklist();
  void clear_has_tape_blacklist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > category_;
  int type_;
  bool is_censored_;
  bool tape_show_;
  bool tape_whitelist_;
  bool tape_blacklist_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_LentaAdminSourceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.LentaAdminSourceInfo) */ {
 public:
  SourceData_LentaAdminSourceInfo();
  virtual ~SourceData_LentaAdminSourceInfo();

  SourceData_LentaAdminSourceInfo(const SourceData_LentaAdminSourceInfo& from);

  inline SourceData_LentaAdminSourceInfo& operator=(const SourceData_LentaAdminSourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_LentaAdminSourceInfo(SourceData_LentaAdminSourceInfo&& from) noexcept
    : SourceData_LentaAdminSourceInfo() {
    *this = ::std::move(from);
  }

  inline SourceData_LentaAdminSourceInfo& operator=(SourceData_LentaAdminSourceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_LentaAdminSourceInfo& default_instance();

  static inline const SourceData_LentaAdminSourceInfo* internal_default_instance() {
    return reinterpret_cast<const SourceData_LentaAdminSourceInfo*>(
               &_SourceData_LentaAdminSourceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void UnsafeArenaSwap(SourceData_LentaAdminSourceInfo* other);
  void Swap(SourceData_LentaAdminSourceInfo* other);
  friend void swap(SourceData_LentaAdminSourceInfo& a, SourceData_LentaAdminSourceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_LentaAdminSourceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_LentaAdminSourceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_LentaAdminSourceInfo& from);
  void MergeFrom(const SourceData_LentaAdminSourceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_LentaAdminSourceInfo* other);
  protected:
  explicit SourceData_LentaAdminSourceInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 regions = 3;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 3;
  ::google::protobuf::uint32 regions(int index) const;
  void set_regions(int index, ::google::protobuf::uint32 value);
  void add_regions(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      regions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_regions();

  // optional bool use_in_lenta = 1;
  bool has_use_in_lenta() const;
  void clear_use_in_lenta();
  static const int kUseInLentaFieldNumber = 1;
  bool use_in_lenta() const;
  void set_use_in_lenta(bool value);

  // optional bool use_in_main = 2;
  bool has_use_in_main() const;
  void clear_use_in_main();
  static const int kUseInMainFieldNumber = 2;
  bool use_in_main() const;
  void set_use_in_main(bool value);

  // optional bool use_fulltext = 4;
  bool has_use_fulltext() const;
  void clear_use_fulltext();
  static const int kUseFulltextFieldNumber = 4;
  bool use_fulltext() const;
  void set_use_fulltext(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.LentaAdminSourceInfo)
 private:
  void set_has_use_in_lenta();
  void clear_has_use_in_lenta();
  void set_has_use_in_main();
  void clear_has_use_in_main();
  void set_has_use_fulltext();
  void clear_has_use_fulltext();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > regions_;
  bool use_in_lenta_;
  bool use_in_main_;
  bool use_fulltext_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_GroupStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.GroupStat) */ {
 public:
  SourceData_GroupStat();
  virtual ~SourceData_GroupStat();

  SourceData_GroupStat(const SourceData_GroupStat& from);

  inline SourceData_GroupStat& operator=(const SourceData_GroupStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_GroupStat(SourceData_GroupStat&& from) noexcept
    : SourceData_GroupStat() {
    *this = ::std::move(from);
  }

  inline SourceData_GroupStat& operator=(SourceData_GroupStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_GroupStat& default_instance();

  static inline const SourceData_GroupStat* internal_default_instance() {
    return reinterpret_cast<const SourceData_GroupStat*>(
               &_SourceData_GroupStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void UnsafeArenaSwap(SourceData_GroupStat* other);
  void Swap(SourceData_GroupStat* other);
  friend void swap(SourceData_GroupStat& a, SourceData_GroupStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_GroupStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_GroupStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_GroupStat& from);
  void MergeFrom(const SourceData_GroupStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_GroupStat* other);
  protected:
  explicit SourceData_GroupStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float sigma = 1;
  bool has_sigma() const;
  void clear_sigma();
  static const int kSigmaFieldNumber = 1;
  float sigma() const;
  void set_sigma(float value);

  // optional float mean = 2;
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 2;
  float mean() const;
  void set_mean(float value);

  // optional float likes = 3;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 3;
  float likes() const;
  void set_likes(float value);

  // optional float norm_likes = 4;
  bool has_norm_likes() const;
  void clear_norm_likes();
  static const int kNormLikesFieldNumber = 4;
  float norm_likes() const;
  void set_norm_likes(float value);

  // optional float norm_likes_kafka = 5;
  bool has_norm_likes_kafka() const;
  void clear_norm_likes_kafka();
  static const int kNormLikesKafkaFieldNumber = 5;
  float norm_likes_kafka() const;
  void set_norm_likes_kafka(float value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.GroupStat)
 private:
  void set_has_sigma();
  void clear_has_sigma();
  void set_has_mean();
  void clear_has_mean();
  void set_has_likes();
  void clear_has_likes();
  void set_has_norm_likes();
  void clear_has_norm_likes();
  void set_has_norm_likes_kafka();
  void clear_has_norm_likes_kafka();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float sigma_;
  float mean_;
  float likes_;
  float norm_likes_;
  float norm_likes_kafka_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_AlsFea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.AlsFea) */ {
 public:
  SourceData_AlsFea();
  virtual ~SourceData_AlsFea();

  SourceData_AlsFea(const SourceData_AlsFea& from);

  inline SourceData_AlsFea& operator=(const SourceData_AlsFea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_AlsFea(SourceData_AlsFea&& from) noexcept
    : SourceData_AlsFea() {
    *this = ::std::move(from);
  }

  inline SourceData_AlsFea& operator=(SourceData_AlsFea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_AlsFea& default_instance();

  static inline const SourceData_AlsFea* internal_default_instance() {
    return reinterpret_cast<const SourceData_AlsFea*>(
               &_SourceData_AlsFea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void UnsafeArenaSwap(SourceData_AlsFea* other);
  void Swap(SourceData_AlsFea* other);
  friend void swap(SourceData_AlsFea& a, SourceData_AlsFea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_AlsFea* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_AlsFea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_AlsFea& from);
  void MergeFrom(const SourceData_AlsFea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_AlsFea* other);
  protected:
  explicit SourceData_AlsFea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float als = 1;
  int als_size() const;
  void clear_als();
  static const int kAlsFieldNumber = 1;
  float als(int index) const;
  void set_als(int index, float value);
  void add_als(float value);
  const ::google::protobuf::RepeatedField< float >&
      als() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_als();

  // optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
  bool has_als_c_stat() const;
  void clear_als_c_stat();
  static const int kAlsCStatFieldNumber = 3;
  private:
  void _slow_mutable_als_c_stat();
  void _slow_set_allocated_als_c_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupStat** als_c_stat);
  ::cosmo::pb::SourceData_GroupStat* _slow_release_als_c_stat();
  public:
  const ::cosmo::pb::SourceData_GroupStat& als_c_stat() const;
  ::cosmo::pb::SourceData_GroupStat* mutable_als_c_stat();
  ::cosmo::pb::SourceData_GroupStat* release_als_c_stat();
  void set_allocated_als_c_stat(::cosmo::pb::SourceData_GroupStat* als_c_stat);
  ::cosmo::pb::SourceData_GroupStat* unsafe_arena_release_als_c_stat();
  void unsafe_arena_set_allocated_als_c_stat(
      ::cosmo::pb::SourceData_GroupStat* als_c_stat);

  // optional float vector_length = 2;
  bool has_vector_length() const;
  void clear_vector_length();
  static const int kVectorLengthFieldNumber = 2;
  float vector_length() const;
  void set_vector_length(float value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.AlsFea)
 private:
  void set_has_vector_length();
  void clear_has_vector_length();
  void set_has_als_c_stat();
  void clear_has_als_c_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > als_;
  ::cosmo::pb::SourceData_GroupStat* als_c_stat_;
  float vector_length_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_LdaFea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.LdaFea) */ {
 public:
  SourceData_LdaFea();
  virtual ~SourceData_LdaFea();

  SourceData_LdaFea(const SourceData_LdaFea& from);

  inline SourceData_LdaFea& operator=(const SourceData_LdaFea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_LdaFea(SourceData_LdaFea&& from) noexcept
    : SourceData_LdaFea() {
    *this = ::std::move(from);
  }

  inline SourceData_LdaFea& operator=(SourceData_LdaFea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_LdaFea& default_instance();

  static inline const SourceData_LdaFea* internal_default_instance() {
    return reinterpret_cast<const SourceData_LdaFea*>(
               &_SourceData_LdaFea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void UnsafeArenaSwap(SourceData_LdaFea* other);
  void Swap(SourceData_LdaFea* other);
  friend void swap(SourceData_LdaFea& a, SourceData_LdaFea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_LdaFea* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_LdaFea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_LdaFea& from);
  void MergeFrom(const SourceData_LdaFea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_LdaFea* other);
  protected:
  explicit SourceData_LdaFea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float lda = 1;
  int lda_size() const;
  void clear_lda();
  static const int kLdaFieldNumber = 1;
  float lda(int index) const;
  void set_lda(int index, float value);
  void add_lda(float value);
  const ::google::protobuf::RepeatedField< float >&
      lda() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_lda();

  // optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
  bool has_als_c_stat() const;
  void clear_als_c_stat();
  static const int kAlsCStatFieldNumber = 3;
  private:
  void _slow_mutable_als_c_stat();
  void _slow_set_allocated_als_c_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupStat** als_c_stat);
  ::cosmo::pb::SourceData_GroupStat* _slow_release_als_c_stat();
  public:
  const ::cosmo::pb::SourceData_GroupStat& als_c_stat() const;
  ::cosmo::pb::SourceData_GroupStat* mutable_als_c_stat();
  ::cosmo::pb::SourceData_GroupStat* release_als_c_stat();
  void set_allocated_als_c_stat(::cosmo::pb::SourceData_GroupStat* als_c_stat);
  ::cosmo::pb::SourceData_GroupStat* unsafe_arena_release_als_c_stat();
  void unsafe_arena_set_allocated_als_c_stat(
      ::cosmo::pb::SourceData_GroupStat* als_c_stat);

  // optional float vector_length = 2;
  bool has_vector_length() const;
  void clear_vector_length();
  static const int kVectorLengthFieldNumber = 2;
  float vector_length() const;
  void set_vector_length(float value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.LdaFea)
 private:
  void set_has_vector_length();
  void clear_has_vector_length();
  void set_has_als_c_stat();
  void clear_has_als_c_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > lda_;
  ::cosmo::pb::SourceData_GroupStat* als_c_stat_;
  float vector_length_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_GroupPeriodStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.GroupPeriodStats) */ {
 public:
  SourceData_GroupPeriodStats();
  virtual ~SourceData_GroupPeriodStats();

  SourceData_GroupPeriodStats(const SourceData_GroupPeriodStats& from);

  inline SourceData_GroupPeriodStats& operator=(const SourceData_GroupPeriodStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_GroupPeriodStats(SourceData_GroupPeriodStats&& from) noexcept
    : SourceData_GroupPeriodStats() {
    *this = ::std::move(from);
  }

  inline SourceData_GroupPeriodStats& operator=(SourceData_GroupPeriodStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_GroupPeriodStats& default_instance();

  static inline const SourceData_GroupPeriodStats* internal_default_instance() {
    return reinterpret_cast<const SourceData_GroupPeriodStats*>(
               &_SourceData_GroupPeriodStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void UnsafeArenaSwap(SourceData_GroupPeriodStats* other);
  void Swap(SourceData_GroupPeriodStats* other);
  friend void swap(SourceData_GroupPeriodStats& a, SourceData_GroupPeriodStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_GroupPeriodStats* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_GroupPeriodStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_GroupPeriodStats& from);
  void MergeFrom(const SourceData_GroupPeriodStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_GroupPeriodStats* other);
  protected:
  explicit SourceData_GroupPeriodStats(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double all_likes_mean = 1;
  bool has_all_likes_mean() const;
  void clear_all_likes_mean();
  static const int kAllLikesMeanFieldNumber = 1;
  double all_likes_mean() const;
  void set_all_likes_mean(double value);

  // optional double all_likes_variance = 2;
  bool has_all_likes_variance() const;
  void clear_all_likes_variance();
  static const int kAllLikesVarianceFieldNumber = 2;
  double all_likes_variance() const;
  void set_all_likes_variance(double value);

  // optional double period_likes_mean = 3;
  bool has_period_likes_mean() const;
  void clear_period_likes_mean();
  static const int kPeriodLikesMeanFieldNumber = 3;
  double period_likes_mean() const;
  void set_period_likes_mean(double value);

  // optional double period_likes_variance = 4;
  bool has_period_likes_variance() const;
  void clear_period_likes_variance();
  static const int kPeriodLikesVarianceFieldNumber = 4;
  double period_likes_variance() const;
  void set_period_likes_variance(double value);

  // optional double period_clicks_mean = 5;
  bool has_period_clicks_mean() const;
  void clear_period_clicks_mean();
  static const int kPeriodClicksMeanFieldNumber = 5;
  double period_clicks_mean() const;
  void set_period_clicks_mean(double value);

  // optional double period_clicks_variance = 6;
  bool has_period_clicks_variance() const;
  void clear_period_clicks_variance();
  static const int kPeriodClicksVarianceFieldNumber = 6;
  double period_clicks_variance() const;
  void set_period_clicks_variance(double value);

  // optional double period_reshares_mean = 7;
  bool has_period_reshares_mean() const;
  void clear_period_reshares_mean();
  static const int kPeriodResharesMeanFieldNumber = 7;
  double period_reshares_mean() const;
  void set_period_reshares_mean(double value);

  // optional double period_reshares_variance = 8;
  bool has_period_reshares_variance() const;
  void clear_period_reshares_variance();
  static const int kPeriodResharesVarianceFieldNumber = 8;
  double period_reshares_variance() const;
  void set_period_reshares_variance(double value);

  // optional double period_comments_mean = 9;
  bool has_period_comments_mean() const;
  void clear_period_comments_mean();
  static const int kPeriodCommentsMeanFieldNumber = 9;
  double period_comments_mean() const;
  void set_period_comments_mean(double value);

  // optional double period_comments_variance = 10;
  bool has_period_comments_variance() const;
  void clear_period_comments_variance();
  static const int kPeriodCommentsVarianceFieldNumber = 10;
  double period_comments_variance() const;
  void set_period_comments_variance(double value);

  // optional int64 all_likes = 11;
  bool has_all_likes() const;
  void clear_all_likes();
  static const int kAllLikesFieldNumber = 11;
  ::google::protobuf::int64 all_likes() const;
  void set_all_likes(::google::protobuf::int64 value);

  // optional int64 period_likes = 12;
  bool has_period_likes() const;
  void clear_period_likes();
  static const int kPeriodLikesFieldNumber = 12;
  ::google::protobuf::int64 period_likes() const;
  void set_period_likes(::google::protobuf::int64 value);

  // optional int64 period_clicks = 13;
  bool has_period_clicks() const;
  void clear_period_clicks();
  static const int kPeriodClicksFieldNumber = 13;
  ::google::protobuf::int64 period_clicks() const;
  void set_period_clicks(::google::protobuf::int64 value);

  // optional int64 period_reshares = 14;
  bool has_period_reshares() const;
  void clear_period_reshares();
  static const int kPeriodResharesFieldNumber = 14;
  ::google::protobuf::int64 period_reshares() const;
  void set_period_reshares(::google::protobuf::int64 value);

  // optional int64 period_comments = 15;
  bool has_period_comments() const;
  void clear_period_comments();
  static const int kPeriodCommentsFieldNumber = 15;
  ::google::protobuf::int64 period_comments() const;
  void set_period_comments(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.GroupPeriodStats)
 private:
  void set_has_all_likes_mean();
  void clear_has_all_likes_mean();
  void set_has_all_likes_variance();
  void clear_has_all_likes_variance();
  void set_has_period_likes_mean();
  void clear_has_period_likes_mean();
  void set_has_period_likes_variance();
  void clear_has_period_likes_variance();
  void set_has_period_clicks_mean();
  void clear_has_period_clicks_mean();
  void set_has_period_clicks_variance();
  void clear_has_period_clicks_variance();
  void set_has_period_reshares_mean();
  void clear_has_period_reshares_mean();
  void set_has_period_reshares_variance();
  void clear_has_period_reshares_variance();
  void set_has_period_comments_mean();
  void clear_has_period_comments_mean();
  void set_has_period_comments_variance();
  void clear_has_period_comments_variance();
  void set_has_all_likes();
  void clear_has_all_likes();
  void set_has_period_likes();
  void clear_has_period_likes();
  void set_has_period_clicks();
  void clear_has_period_clicks();
  void set_has_period_reshares();
  void clear_has_period_reshares();
  void set_has_period_comments();
  void clear_has_period_comments();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double all_likes_mean_;
  double all_likes_variance_;
  double period_likes_mean_;
  double period_likes_variance_;
  double period_clicks_mean_;
  double period_clicks_variance_;
  double period_reshares_mean_;
  double period_reshares_variance_;
  double period_comments_mean_;
  double period_comments_variance_;
  ::google::protobuf::int64 all_likes_;
  ::google::protobuf::int64 period_likes_;
  ::google::protobuf::int64 period_clicks_;
  ::google::protobuf::int64 period_reshares_;
  ::google::protobuf::int64 period_comments_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourcePopularityStat_PopularityStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat) */ {
 public:
  SourceData_SourcePopularityStat_PopularityStat();
  virtual ~SourceData_SourcePopularityStat_PopularityStat();

  SourceData_SourcePopularityStat_PopularityStat(const SourceData_SourcePopularityStat_PopularityStat& from);

  inline SourceData_SourcePopularityStat_PopularityStat& operator=(const SourceData_SourcePopularityStat_PopularityStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourcePopularityStat_PopularityStat(SourceData_SourcePopularityStat_PopularityStat&& from) noexcept
    : SourceData_SourcePopularityStat_PopularityStat() {
    *this = ::std::move(from);
  }

  inline SourceData_SourcePopularityStat_PopularityStat& operator=(SourceData_SourcePopularityStat_PopularityStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourcePopularityStat_PopularityStat& default_instance();

  static inline const SourceData_SourcePopularityStat_PopularityStat* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourcePopularityStat_PopularityStat*>(
               &_SourceData_SourcePopularityStat_PopularityStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void UnsafeArenaSwap(SourceData_SourcePopularityStat_PopularityStat* other);
  void Swap(SourceData_SourcePopularityStat_PopularityStat* other);
  friend void swap(SourceData_SourcePopularityStat_PopularityStat& a, SourceData_SourcePopularityStat_PopularityStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourcePopularityStat_PopularityStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourcePopularityStat_PopularityStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourcePopularityStat_PopularityStat& from);
  void MergeFrom(const SourceData_SourcePopularityStat_PopularityStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourcePopularityStat_PopularityStat* other);
  protected:
  explicit SourceData_SourcePopularityStat_PopularityStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hits = 1;
  bool has_hits() const;
  void clear_hits();
  static const int kHitsFieldNumber = 1;
  ::google::protobuf::uint32 hits() const;
  void set_hits(::google::protobuf::uint32 value);

  // optional float hits_mean = 2;
  bool has_hits_mean() const;
  void clear_hits_mean();
  static const int kHitsMeanFieldNumber = 2;
  float hits_mean() const;
  void set_hits_mean(float value);

  // optional float hits_variance = 3;
  bool has_hits_variance() const;
  void clear_hits_variance();
  static const int kHitsVarianceFieldNumber = 3;
  float hits_variance() const;
  void set_hits_variance(float value);

  // optional uint32 urls = 4;
  bool has_urls() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 4;
  ::google::protobuf::uint32 urls() const;
  void set_urls(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat)
 private:
  void set_has_hits();
  void clear_has_hits();
  void set_has_hits_mean();
  void clear_has_hits_mean();
  void set_has_hits_variance();
  void clear_has_hits_variance();
  void set_has_urls();
  void clear_has_urls();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hits_;
  float hits_mean_;
  float hits_variance_;
  ::google::protobuf::uint32 urls_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourcePopularityStat_GeoPopularity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity) */ {
 public:
  SourceData_SourcePopularityStat_GeoPopularity();
  virtual ~SourceData_SourcePopularityStat_GeoPopularity();

  SourceData_SourcePopularityStat_GeoPopularity(const SourceData_SourcePopularityStat_GeoPopularity& from);

  inline SourceData_SourcePopularityStat_GeoPopularity& operator=(const SourceData_SourcePopularityStat_GeoPopularity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourcePopularityStat_GeoPopularity(SourceData_SourcePopularityStat_GeoPopularity&& from) noexcept
    : SourceData_SourcePopularityStat_GeoPopularity() {
    *this = ::std::move(from);
  }

  inline SourceData_SourcePopularityStat_GeoPopularity& operator=(SourceData_SourcePopularityStat_GeoPopularity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourcePopularityStat_GeoPopularity& default_instance();

  static inline const SourceData_SourcePopularityStat_GeoPopularity* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourcePopularityStat_GeoPopularity*>(
               &_SourceData_SourcePopularityStat_GeoPopularity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void UnsafeArenaSwap(SourceData_SourcePopularityStat_GeoPopularity* other);
  void Swap(SourceData_SourcePopularityStat_GeoPopularity* other);
  friend void swap(SourceData_SourcePopularityStat_GeoPopularity& a, SourceData_SourcePopularityStat_GeoPopularity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourcePopularityStat_GeoPopularity* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourcePopularityStat_GeoPopularity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourcePopularityStat_GeoPopularity& from);
  void MergeFrom(const SourceData_SourcePopularityStat_GeoPopularity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourcePopularityStat_GeoPopularity* other);
  protected:
  explicit SourceData_SourcePopularityStat_GeoPopularity(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 2;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 2;
  private:
  void _slow_mutable_stat();
  void _slow_set_allocated_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat** stat);
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* _slow_release_stat();
  public:
  const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& stat() const;
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* mutable_stat();
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* release_stat();
  void set_allocated_stat(::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat);
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* unsafe_arena_release_stat();
  void unsafe_arena_set_allocated_stat(
      ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat);

  // required uint32 geo = 1;
  bool has_geo() const;
  void clear_geo();
  static const int kGeoFieldNumber = 1;
  ::google::protobuf::uint32 geo() const;
  void set_geo(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity)
 private:
  void set_has_geo();
  void clear_has_geo();
  void set_has_stat();
  void clear_has_stat();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat_;
  ::google::protobuf::uint32 geo_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourcePopularityStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourcePopularityStat) */ {
 public:
  SourceData_SourcePopularityStat();
  virtual ~SourceData_SourcePopularityStat();

  SourceData_SourcePopularityStat(const SourceData_SourcePopularityStat& from);

  inline SourceData_SourcePopularityStat& operator=(const SourceData_SourcePopularityStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourcePopularityStat(SourceData_SourcePopularityStat&& from) noexcept
    : SourceData_SourcePopularityStat() {
    *this = ::std::move(from);
  }

  inline SourceData_SourcePopularityStat& operator=(SourceData_SourcePopularityStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourcePopularityStat& default_instance();

  static inline const SourceData_SourcePopularityStat* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourcePopularityStat*>(
               &_SourceData_SourcePopularityStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void UnsafeArenaSwap(SourceData_SourcePopularityStat* other);
  void Swap(SourceData_SourcePopularityStat* other);
  friend void swap(SourceData_SourcePopularityStat& a, SourceData_SourcePopularityStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourcePopularityStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourcePopularityStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourcePopularityStat& from);
  void MergeFrom(const SourceData_SourcePopularityStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourcePopularityStat* other);
  protected:
  explicit SourceData_SourcePopularityStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SourceData_SourcePopularityStat_PopularityStat PopularityStat;
  typedef SourceData_SourcePopularityStat_GeoPopularity GeoPopularity;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity geo_stat = 2;
  int geo_stat_size() const;
  void clear_geo_stat();
  static const int kGeoStatFieldNumber = 2;
  const ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity& geo_stat(int index) const;
  ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity* mutable_geo_stat(int index);
  ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity* add_geo_stat();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity >*
      mutable_geo_stat();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity >&
      geo_stat() const;

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat male_stat = 3;
  int male_stat_size() const;
  void clear_male_stat();
  static const int kMaleStatFieldNumber = 3;
  const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& male_stat(int index) const;
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* mutable_male_stat(int index);
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* add_male_stat();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >*
      mutable_male_stat();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >&
      male_stat() const;

  // repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat female_stat = 4;
  int female_stat_size() const;
  void clear_female_stat();
  static const int kFemaleStatFieldNumber = 4;
  const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& female_stat(int index) const;
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* mutable_female_stat(int index);
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* add_female_stat();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >*
      mutable_female_stat();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >&
      female_stat() const;

  // required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 1;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 1;
  private:
  void _slow_mutable_stat();
  void _slow_set_allocated_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat** stat);
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* _slow_release_stat();
  public:
  const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& stat() const;
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* mutable_stat();
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* release_stat();
  void set_allocated_stat(::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat);
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* unsafe_arena_release_stat();
  void unsafe_arena_set_allocated_stat(
      ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat);

  // required uint32 version = 5;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourcePopularityStat)
 private:
  void set_has_stat();
  void clear_has_stat();
  void set_has_version();
  void clear_has_version();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity > geo_stat_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat > male_stat_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat > female_stat_;
  ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourceEventStat_EventStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourceEventStat.EventStat) */ {
 public:
  SourceData_SourceEventStat_EventStat();
  virtual ~SourceData_SourceEventStat_EventStat();

  SourceData_SourceEventStat_EventStat(const SourceData_SourceEventStat_EventStat& from);

  inline SourceData_SourceEventStat_EventStat& operator=(const SourceData_SourceEventStat_EventStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourceEventStat_EventStat(SourceData_SourceEventStat_EventStat&& from) noexcept
    : SourceData_SourceEventStat_EventStat() {
    *this = ::std::move(from);
  }

  inline SourceData_SourceEventStat_EventStat& operator=(SourceData_SourceEventStat_EventStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourceEventStat_EventStat& default_instance();

  static inline const SourceData_SourceEventStat_EventStat* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourceEventStat_EventStat*>(
               &_SourceData_SourceEventStat_EventStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void UnsafeArenaSwap(SourceData_SourceEventStat_EventStat* other);
  void Swap(SourceData_SourceEventStat_EventStat* other);
  friend void swap(SourceData_SourceEventStat_EventStat& a, SourceData_SourceEventStat_EventStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourceEventStat_EventStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourceEventStat_EventStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourceEventStat_EventStat& from);
  void MergeFrom(const SourceData_SourceEventStat_EventStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourceEventStat_EventStat* other);
  protected:
  explicit SourceData_SourceEventStat_EventStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 events_count = 1;
  bool has_events_count() const;
  void clear_events_count();
  static const int kEventsCountFieldNumber = 1;
  ::google::protobuf::uint32 events_count() const;
  void set_events_count(::google::protobuf::uint32 value);

  // optional float events_mean = 2;
  bool has_events_mean() const;
  void clear_events_mean();
  static const int kEventsMeanFieldNumber = 2;
  float events_mean() const;
  void set_events_mean(float value);

  // optional float events_sigma = 3;
  bool has_events_sigma() const;
  void clear_events_sigma();
  static const int kEventsSigmaFieldNumber = 3;
  float events_sigma() const;
  void set_events_sigma(float value);

  // optional uint32 documents_count = 4;
  bool has_documents_count() const;
  void clear_documents_count();
  static const int kDocumentsCountFieldNumber = 4;
  ::google::protobuf::uint32 documents_count() const;
  void set_documents_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourceEventStat.EventStat)
 private:
  void set_has_events_count();
  void clear_has_events_count();
  void set_has_events_mean();
  void clear_has_events_mean();
  void set_has_events_sigma();
  void clear_has_events_sigma();
  void set_has_documents_count();
  void clear_has_documents_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 events_count_;
  float events_mean_;
  float events_sigma_;
  ::google::protobuf::uint32 documents_count_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourceEventStat_GeoEventStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourceEventStat.GeoEventStat) */ {
 public:
  SourceData_SourceEventStat_GeoEventStat();
  virtual ~SourceData_SourceEventStat_GeoEventStat();

  SourceData_SourceEventStat_GeoEventStat(const SourceData_SourceEventStat_GeoEventStat& from);

  inline SourceData_SourceEventStat_GeoEventStat& operator=(const SourceData_SourceEventStat_GeoEventStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourceEventStat_GeoEventStat(SourceData_SourceEventStat_GeoEventStat&& from) noexcept
    : SourceData_SourceEventStat_GeoEventStat() {
    *this = ::std::move(from);
  }

  inline SourceData_SourceEventStat_GeoEventStat& operator=(SourceData_SourceEventStat_GeoEventStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourceEventStat_GeoEventStat& default_instance();

  static inline const SourceData_SourceEventStat_GeoEventStat* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourceEventStat_GeoEventStat*>(
               &_SourceData_SourceEventStat_GeoEventStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void UnsafeArenaSwap(SourceData_SourceEventStat_GeoEventStat* other);
  void Swap(SourceData_SourceEventStat_GeoEventStat* other);
  friend void swap(SourceData_SourceEventStat_GeoEventStat& a, SourceData_SourceEventStat_GeoEventStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourceEventStat_GeoEventStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourceEventStat_GeoEventStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourceEventStat_GeoEventStat& from);
  void MergeFrom(const SourceData_SourceEventStat_GeoEventStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourceEventStat_GeoEventStat* other);
  protected:
  explicit SourceData_SourceEventStat_GeoEventStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 2;
  private:
  void _slow_mutable_stat();
  void _slow_set_allocated_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat_EventStat** stat);
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* _slow_release_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat_EventStat& stat() const;
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* mutable_stat();
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* release_stat();
  void set_allocated_stat(::cosmo::pb::SourceData_SourceEventStat_EventStat* stat);
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* unsafe_arena_release_stat();
  void unsafe_arena_set_allocated_stat(
      ::cosmo::pb::SourceData_SourceEventStat_EventStat* stat);

  // required uint32 geo = 1;
  bool has_geo() const;
  void clear_geo();
  static const int kGeoFieldNumber = 1;
  ::google::protobuf::uint32 geo() const;
  void set_geo(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourceEventStat.GeoEventStat)
 private:
  void set_has_geo();
  void clear_has_geo();
  void set_has_stat();
  void clear_has_stat();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* stat_;
  ::google::protobuf::uint32 geo_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourceEventStat_SocDemEventStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat) */ {
 public:
  SourceData_SourceEventStat_SocDemEventStat();
  virtual ~SourceData_SourceEventStat_SocDemEventStat();

  SourceData_SourceEventStat_SocDemEventStat(const SourceData_SourceEventStat_SocDemEventStat& from);

  inline SourceData_SourceEventStat_SocDemEventStat& operator=(const SourceData_SourceEventStat_SocDemEventStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourceEventStat_SocDemEventStat(SourceData_SourceEventStat_SocDemEventStat&& from) noexcept
    : SourceData_SourceEventStat_SocDemEventStat() {
    *this = ::std::move(from);
  }

  inline SourceData_SourceEventStat_SocDemEventStat& operator=(SourceData_SourceEventStat_SocDemEventStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourceEventStat_SocDemEventStat& default_instance();

  static inline const SourceData_SourceEventStat_SocDemEventStat* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourceEventStat_SocDemEventStat*>(
               &_SourceData_SourceEventStat_SocDemEventStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void UnsafeArenaSwap(SourceData_SourceEventStat_SocDemEventStat* other);
  void Swap(SourceData_SourceEventStat_SocDemEventStat* other);
  friend void swap(SourceData_SourceEventStat_SocDemEventStat& a, SourceData_SourceEventStat_SocDemEventStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourceEventStat_SocDemEventStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourceEventStat_SocDemEventStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourceEventStat_SocDemEventStat& from);
  void MergeFrom(const SourceData_SourceEventStat_SocDemEventStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourceEventStat_SocDemEventStat* other);
  protected:
  explicit SourceData_SourceEventStat_SocDemEventStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 2;
  private:
  void _slow_mutable_stat();
  void _slow_set_allocated_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat_EventStat** stat);
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* _slow_release_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat_EventStat& stat() const;
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* mutable_stat();
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* release_stat();
  void set_allocated_stat(::cosmo::pb::SourceData_SourceEventStat_EventStat* stat);
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* unsafe_arena_release_stat();
  void unsafe_arena_set_allocated_stat(
      ::cosmo::pb::SourceData_SourceEventStat_EventStat* stat);

  // required uint32 socdem_id = 1;
  bool has_socdem_id() const;
  void clear_socdem_id();
  static const int kSocdemIdFieldNumber = 1;
  ::google::protobuf::uint32 socdem_id() const;
  void set_socdem_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat)
 private:
  void set_has_socdem_id();
  void clear_has_socdem_id();
  void set_has_stat();
  void clear_has_stat();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* stat_;
  ::google::protobuf::uint32 socdem_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourceEventStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourceEventStat) */ {
 public:
  SourceData_SourceEventStat();
  virtual ~SourceData_SourceEventStat();

  SourceData_SourceEventStat(const SourceData_SourceEventStat& from);

  inline SourceData_SourceEventStat& operator=(const SourceData_SourceEventStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourceEventStat(SourceData_SourceEventStat&& from) noexcept
    : SourceData_SourceEventStat() {
    *this = ::std::move(from);
  }

  inline SourceData_SourceEventStat& operator=(SourceData_SourceEventStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourceEventStat& default_instance();

  static inline const SourceData_SourceEventStat* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourceEventStat*>(
               &_SourceData_SourceEventStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void UnsafeArenaSwap(SourceData_SourceEventStat* other);
  void Swap(SourceData_SourceEventStat* other);
  friend void swap(SourceData_SourceEventStat& a, SourceData_SourceEventStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourceEventStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourceEventStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourceEventStat& from);
  void MergeFrom(const SourceData_SourceEventStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourceEventStat* other);
  protected:
  explicit SourceData_SourceEventStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SourceData_SourceEventStat_EventStat EventStat;
  typedef SourceData_SourceEventStat_GeoEventStat GeoEventStat;
  typedef SourceData_SourceEventStat_SocDemEventStat SocDemEventStat;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.SourceData.SourceEventStat.GeoEventStat geo_stat = 2;
  int geo_stat_size() const;
  void clear_geo_stat();
  static const int kGeoStatFieldNumber = 2;
  const ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat& geo_stat(int index) const;
  ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat* mutable_geo_stat(int index);
  ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat* add_geo_stat();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat >*
      mutable_geo_stat();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat >&
      geo_stat() const;

  // repeated .cosmo.pb.SourceData.SourceEventStat.SocDemEventStat soc_dem_stat = 3;
  int soc_dem_stat_size() const;
  void clear_soc_dem_stat();
  static const int kSocDemStatFieldNumber = 3;
  const ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat& soc_dem_stat(int index) const;
  ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat* mutable_soc_dem_stat(int index);
  ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat* add_soc_dem_stat();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat >*
      mutable_soc_dem_stat();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat >&
      soc_dem_stat() const;

  // required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 1;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 1;
  private:
  void _slow_mutable_stat();
  void _slow_set_allocated_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat_EventStat** stat);
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* _slow_release_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat_EventStat& stat() const;
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* mutable_stat();
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* release_stat();
  void set_allocated_stat(::cosmo::pb::SourceData_SourceEventStat_EventStat* stat);
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* unsafe_arena_release_stat();
  void unsafe_arena_set_allocated_stat(
      ::cosmo::pb::SourceData_SourceEventStat_EventStat* stat);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourceEventStat)
 private:
  void set_has_stat();
  void clear_has_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat > geo_stat_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat > soc_dem_stat_;
  ::cosmo::pb::SourceData_SourceEventStat_EventStat* stat_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_GroupEventStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.GroupEventStat) */ {
 public:
  SourceData_GroupEventStat();
  virtual ~SourceData_GroupEventStat();

  SourceData_GroupEventStat(const SourceData_GroupEventStat& from);

  inline SourceData_GroupEventStat& operator=(const SourceData_GroupEventStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_GroupEventStat(SourceData_GroupEventStat&& from) noexcept
    : SourceData_GroupEventStat() {
    *this = ::std::move(from);
  }

  inline SourceData_GroupEventStat& operator=(SourceData_GroupEventStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_GroupEventStat& default_instance();

  static inline const SourceData_GroupEventStat* internal_default_instance() {
    return reinterpret_cast<const SourceData_GroupEventStat*>(
               &_SourceData_GroupEventStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void UnsafeArenaSwap(SourceData_GroupEventStat* other);
  void Swap(SourceData_GroupEventStat* other);
  friend void swap(SourceData_GroupEventStat& a, SourceData_GroupEventStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_GroupEventStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_GroupEventStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_GroupEventStat& from);
  void MergeFrom(const SourceData_GroupEventStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_GroupEventStat* other);
  protected:
  explicit SourceData_GroupEventStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 2;
  bool has_likes_stat() const;
  void clear_likes_stat();
  static const int kLikesStatFieldNumber = 2;
  private:
  void _slow_mutable_likes_stat();
  void _slow_set_allocated_likes_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** likes_stat);
  ::cosmo::pb::SourceData_SourceEventStat* _slow_release_likes_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat& likes_stat() const;
  ::cosmo::pb::SourceData_SourceEventStat* mutable_likes_stat();
  ::cosmo::pb::SourceData_SourceEventStat* release_likes_stat();
  void set_allocated_likes_stat(::cosmo::pb::SourceData_SourceEventStat* likes_stat);
  ::cosmo::pb::SourceData_SourceEventStat* unsafe_arena_release_likes_stat();
  void unsafe_arena_set_allocated_likes_stat(
      ::cosmo::pb::SourceData_SourceEventStat* likes_stat);

  // optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 3;
  bool has_clicks_stat() const;
  void clear_clicks_stat();
  static const int kClicksStatFieldNumber = 3;
  private:
  void _slow_mutable_clicks_stat();
  void _slow_set_allocated_clicks_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** clicks_stat);
  ::cosmo::pb::SourceData_SourceEventStat* _slow_release_clicks_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat& clicks_stat() const;
  ::cosmo::pb::SourceData_SourceEventStat* mutable_clicks_stat();
  ::cosmo::pb::SourceData_SourceEventStat* release_clicks_stat();
  void set_allocated_clicks_stat(::cosmo::pb::SourceData_SourceEventStat* clicks_stat);
  ::cosmo::pb::SourceData_SourceEventStat* unsafe_arena_release_clicks_stat();
  void unsafe_arena_set_allocated_clicks_stat(
      ::cosmo::pb::SourceData_SourceEventStat* clicks_stat);

  // optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 4;
  bool has_reshares_stat() const;
  void clear_reshares_stat();
  static const int kResharesStatFieldNumber = 4;
  private:
  void _slow_mutable_reshares_stat();
  void _slow_set_allocated_reshares_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** reshares_stat);
  ::cosmo::pb::SourceData_SourceEventStat* _slow_release_reshares_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat& reshares_stat() const;
  ::cosmo::pb::SourceData_SourceEventStat* mutable_reshares_stat();
  ::cosmo::pb::SourceData_SourceEventStat* release_reshares_stat();
  void set_allocated_reshares_stat(::cosmo::pb::SourceData_SourceEventStat* reshares_stat);
  ::cosmo::pb::SourceData_SourceEventStat* unsafe_arena_release_reshares_stat();
  void unsafe_arena_set_allocated_reshares_stat(
      ::cosmo::pb::SourceData_SourceEventStat* reshares_stat);

  // optional .cosmo.pb.SourceData.SourceEventStat comments_stat = 5;
  bool has_comments_stat() const;
  void clear_comments_stat();
  static const int kCommentsStatFieldNumber = 5;
  private:
  void _slow_mutable_comments_stat();
  void _slow_set_allocated_comments_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** comments_stat);
  ::cosmo::pb::SourceData_SourceEventStat* _slow_release_comments_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat& comments_stat() const;
  ::cosmo::pb::SourceData_SourceEventStat* mutable_comments_stat();
  ::cosmo::pb::SourceData_SourceEventStat* release_comments_stat();
  void set_allocated_comments_stat(::cosmo::pb::SourceData_SourceEventStat* comments_stat);
  ::cosmo::pb::SourceData_SourceEventStat* unsafe_arena_release_comments_stat();
  void unsafe_arena_set_allocated_comments_stat(
      ::cosmo::pb::SourceData_SourceEventStat* comments_stat);

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.GroupEventStat)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_likes_stat();
  void clear_has_likes_stat();
  void set_has_clicks_stat();
  void clear_has_clicks_stat();
  void set_has_reshares_stat();
  void clear_has_reshares_stat();
  void set_has_comments_stat();
  void clear_has_comments_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::SourceData_SourceEventStat* likes_stat_;
  ::cosmo::pb::SourceData_SourceEventStat* clicks_stat_;
  ::cosmo::pb::SourceData_SourceEventStat* reshares_stat_;
  ::cosmo::pb::SourceData_SourceEventStat* comments_stat_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourceLocationStat_Stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourceLocationStat.Stat) */ {
 public:
  SourceData_SourceLocationStat_Stat();
  virtual ~SourceData_SourceLocationStat_Stat();

  SourceData_SourceLocationStat_Stat(const SourceData_SourceLocationStat_Stat& from);

  inline SourceData_SourceLocationStat_Stat& operator=(const SourceData_SourceLocationStat_Stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourceLocationStat_Stat(SourceData_SourceLocationStat_Stat&& from) noexcept
    : SourceData_SourceLocationStat_Stat() {
    *this = ::std::move(from);
  }

  inline SourceData_SourceLocationStat_Stat& operator=(SourceData_SourceLocationStat_Stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourceLocationStat_Stat& default_instance();

  static inline const SourceData_SourceLocationStat_Stat* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourceLocationStat_Stat*>(
               &_SourceData_SourceLocationStat_Stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void UnsafeArenaSwap(SourceData_SourceLocationStat_Stat* other);
  void Swap(SourceData_SourceLocationStat_Stat* other);
  friend void swap(SourceData_SourceLocationStat_Stat& a, SourceData_SourceLocationStat_Stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourceLocationStat_Stat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourceLocationStat_Stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourceLocationStat_Stat& from);
  void MergeFrom(const SourceData_SourceLocationStat_Stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourceLocationStat_Stat* other);
  protected:
  explicit SourceData_SourceLocationStat_Stat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.SourceData.SourceEventStat shows_stat = 1;
  bool has_shows_stat() const;
  void clear_shows_stat();
  static const int kShowsStatFieldNumber = 1;
  private:
  void _slow_mutable_shows_stat();
  void _slow_set_allocated_shows_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** shows_stat);
  ::cosmo::pb::SourceData_SourceEventStat* _slow_release_shows_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat& shows_stat() const;
  ::cosmo::pb::SourceData_SourceEventStat* mutable_shows_stat();
  ::cosmo::pb::SourceData_SourceEventStat* release_shows_stat();
  void set_allocated_shows_stat(::cosmo::pb::SourceData_SourceEventStat* shows_stat);
  ::cosmo::pb::SourceData_SourceEventStat* unsafe_arena_release_shows_stat();
  void unsafe_arena_set_allocated_shows_stat(
      ::cosmo::pb::SourceData_SourceEventStat* shows_stat);

  // optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 2;
  bool has_clicks_stat() const;
  void clear_clicks_stat();
  static const int kClicksStatFieldNumber = 2;
  private:
  void _slow_mutable_clicks_stat();
  void _slow_set_allocated_clicks_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** clicks_stat);
  ::cosmo::pb::SourceData_SourceEventStat* _slow_release_clicks_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat& clicks_stat() const;
  ::cosmo::pb::SourceData_SourceEventStat* mutable_clicks_stat();
  ::cosmo::pb::SourceData_SourceEventStat* release_clicks_stat();
  void set_allocated_clicks_stat(::cosmo::pb::SourceData_SourceEventStat* clicks_stat);
  ::cosmo::pb::SourceData_SourceEventStat* unsafe_arena_release_clicks_stat();
  void unsafe_arena_set_allocated_clicks_stat(
      ::cosmo::pb::SourceData_SourceEventStat* clicks_stat);

  // optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 3;
  bool has_likes_stat() const;
  void clear_likes_stat();
  static const int kLikesStatFieldNumber = 3;
  private:
  void _slow_mutable_likes_stat();
  void _slow_set_allocated_likes_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** likes_stat);
  ::cosmo::pb::SourceData_SourceEventStat* _slow_release_likes_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat& likes_stat() const;
  ::cosmo::pb::SourceData_SourceEventStat* mutable_likes_stat();
  ::cosmo::pb::SourceData_SourceEventStat* release_likes_stat();
  void set_allocated_likes_stat(::cosmo::pb::SourceData_SourceEventStat* likes_stat);
  ::cosmo::pb::SourceData_SourceEventStat* unsafe_arena_release_likes_stat();
  void unsafe_arena_set_allocated_likes_stat(
      ::cosmo::pb::SourceData_SourceEventStat* likes_stat);

  // optional .cosmo.pb.SourceData.SourceEventStat dislikes_stat = 4;
  bool has_dislikes_stat() const;
  void clear_dislikes_stat();
  static const int kDislikesStatFieldNumber = 4;
  private:
  void _slow_mutable_dislikes_stat();
  void _slow_set_allocated_dislikes_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** dislikes_stat);
  ::cosmo::pb::SourceData_SourceEventStat* _slow_release_dislikes_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat& dislikes_stat() const;
  ::cosmo::pb::SourceData_SourceEventStat* mutable_dislikes_stat();
  ::cosmo::pb::SourceData_SourceEventStat* release_dislikes_stat();
  void set_allocated_dislikes_stat(::cosmo::pb::SourceData_SourceEventStat* dislikes_stat);
  ::cosmo::pb::SourceData_SourceEventStat* unsafe_arena_release_dislikes_stat();
  void unsafe_arena_set_allocated_dislikes_stat(
      ::cosmo::pb::SourceData_SourceEventStat* dislikes_stat);

  // optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 5;
  bool has_reshares_stat() const;
  void clear_reshares_stat();
  static const int kResharesStatFieldNumber = 5;
  private:
  void _slow_mutable_reshares_stat();
  void _slow_set_allocated_reshares_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceEventStat** reshares_stat);
  ::cosmo::pb::SourceData_SourceEventStat* _slow_release_reshares_stat();
  public:
  const ::cosmo::pb::SourceData_SourceEventStat& reshares_stat() const;
  ::cosmo::pb::SourceData_SourceEventStat* mutable_reshares_stat();
  ::cosmo::pb::SourceData_SourceEventStat* release_reshares_stat();
  void set_allocated_reshares_stat(::cosmo::pb::SourceData_SourceEventStat* reshares_stat);
  ::cosmo::pb::SourceData_SourceEventStat* unsafe_arena_release_reshares_stat();
  void unsafe_arena_set_allocated_reshares_stat(
      ::cosmo::pb::SourceData_SourceEventStat* reshares_stat);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourceLocationStat.Stat)
 private:
  void set_has_shows_stat();
  void clear_has_shows_stat();
  void set_has_clicks_stat();
  void clear_has_clicks_stat();
  void set_has_likes_stat();
  void clear_has_likes_stat();
  void set_has_dislikes_stat();
  void clear_has_dislikes_stat();
  void set_has_reshares_stat();
  void clear_has_reshares_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::SourceData_SourceEventStat* shows_stat_;
  ::cosmo::pb::SourceData_SourceEventStat* clicks_stat_;
  ::cosmo::pb::SourceData_SourceEventStat* likes_stat_;
  ::cosmo::pb::SourceData_SourceEventStat* dislikes_stat_;
  ::cosmo::pb::SourceData_SourceEventStat* reshares_stat_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourceLocationStat_LocationStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourceLocationStat.LocationStat) */ {
 public:
  SourceData_SourceLocationStat_LocationStat();
  virtual ~SourceData_SourceLocationStat_LocationStat();

  SourceData_SourceLocationStat_LocationStat(const SourceData_SourceLocationStat_LocationStat& from);

  inline SourceData_SourceLocationStat_LocationStat& operator=(const SourceData_SourceLocationStat_LocationStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourceLocationStat_LocationStat(SourceData_SourceLocationStat_LocationStat&& from) noexcept
    : SourceData_SourceLocationStat_LocationStat() {
    *this = ::std::move(from);
  }

  inline SourceData_SourceLocationStat_LocationStat& operator=(SourceData_SourceLocationStat_LocationStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourceLocationStat_LocationStat& default_instance();

  static inline const SourceData_SourceLocationStat_LocationStat* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourceLocationStat_LocationStat*>(
               &_SourceData_SourceLocationStat_LocationStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    83;

  void UnsafeArenaSwap(SourceData_SourceLocationStat_LocationStat* other);
  void Swap(SourceData_SourceLocationStat_LocationStat* other);
  friend void swap(SourceData_SourceLocationStat_LocationStat& a, SourceData_SourceLocationStat_LocationStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourceLocationStat_LocationStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourceLocationStat_LocationStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourceLocationStat_LocationStat& from);
  void MergeFrom(const SourceData_SourceLocationStat_LocationStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourceLocationStat_LocationStat* other);
  protected:
  explicit SourceData_SourceLocationStat_LocationStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);
  ::std::string* unsafe_arena_release_location();
  void unsafe_arena_set_allocated_location(
      ::std::string* location);

  // optional .cosmo.pb.SourceData.SourceLocationStat.Stat stat = 2;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 2;
  private:
  void _slow_mutable_stat();
  void _slow_set_allocated_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat_Stat** stat);
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* _slow_release_stat();
  public:
  const ::cosmo::pb::SourceData_SourceLocationStat_Stat& stat() const;
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* mutable_stat();
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* release_stat();
  void set_allocated_stat(::cosmo::pb::SourceData_SourceLocationStat_Stat* stat);
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* unsafe_arena_release_stat();
  void unsafe_arena_set_allocated_stat(
      ::cosmo::pb::SourceData_SourceLocationStat_Stat* stat);

  // optional uint64 last_event_ts = 3;
  bool has_last_event_ts() const;
  void clear_last_event_ts();
  static const int kLastEventTsFieldNumber = 3;
  ::google::protobuf::uint64 last_event_ts() const;
  void set_last_event_ts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourceLocationStat.LocationStat)
 private:
  void set_has_location();
  void clear_has_location();
  void set_has_stat();
  void clear_has_stat();
  void set_has_last_event_ts();
  void clear_has_last_event_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* stat_;
  ::google::protobuf::uint64 last_event_ts_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourceLocationStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourceLocationStat) */ {
 public:
  SourceData_SourceLocationStat();
  virtual ~SourceData_SourceLocationStat();

  SourceData_SourceLocationStat(const SourceData_SourceLocationStat& from);

  inline SourceData_SourceLocationStat& operator=(const SourceData_SourceLocationStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourceLocationStat(SourceData_SourceLocationStat&& from) noexcept
    : SourceData_SourceLocationStat() {
    *this = ::std::move(from);
  }

  inline SourceData_SourceLocationStat& operator=(SourceData_SourceLocationStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourceLocationStat& default_instance();

  static inline const SourceData_SourceLocationStat* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourceLocationStat*>(
               &_SourceData_SourceLocationStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void UnsafeArenaSwap(SourceData_SourceLocationStat* other);
  void Swap(SourceData_SourceLocationStat* other);
  friend void swap(SourceData_SourceLocationStat& a, SourceData_SourceLocationStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourceLocationStat* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourceLocationStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourceLocationStat& from);
  void MergeFrom(const SourceData_SourceLocationStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourceLocationStat* other);
  protected:
  explicit SourceData_SourceLocationStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SourceData_SourceLocationStat_Stat Stat;
  typedef SourceData_SourceLocationStat_LocationStat LocationStat;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.SourceData.SourceLocationStat.LocationStat stat_by_location = 2;
  int stat_by_location_size() const;
  void clear_stat_by_location();
  static const int kStatByLocationFieldNumber = 2;
  const ::cosmo::pb::SourceData_SourceLocationStat_LocationStat& stat_by_location(int index) const;
  ::cosmo::pb::SourceData_SourceLocationStat_LocationStat* mutable_stat_by_location(int index);
  ::cosmo::pb::SourceData_SourceLocationStat_LocationStat* add_stat_by_location();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceLocationStat_LocationStat >*
      mutable_stat_by_location();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceLocationStat_LocationStat >&
      stat_by_location() const;

  // optional .cosmo.pb.SourceData.SourceLocationStat.Stat summary_stat = 3;
  bool has_summary_stat() const;
  void clear_summary_stat();
  static const int kSummaryStatFieldNumber = 3;
  private:
  void _slow_mutable_summary_stat();
  void _slow_set_allocated_summary_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat_Stat** summary_stat);
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* _slow_release_summary_stat();
  public:
  const ::cosmo::pb::SourceData_SourceLocationStat_Stat& summary_stat() const;
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* mutable_summary_stat();
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* release_summary_stat();
  void set_allocated_summary_stat(::cosmo::pb::SourceData_SourceLocationStat_Stat* summary_stat);
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* unsafe_arena_release_summary_stat();
  void unsafe_arena_set_allocated_summary_stat(
      ::cosmo::pb::SourceData_SourceLocationStat_Stat* summary_stat);

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourceLocationStat)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_summary_stat();
  void clear_has_summary_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceLocationStat_LocationStat > stat_by_location_;
  ::cosmo::pb::SourceData_SourceLocationStat_Stat* summary_stat_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourceSimilarity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourceSimilarity) */ {
 public:
  SourceData_SourceSimilarity();
  virtual ~SourceData_SourceSimilarity();

  SourceData_SourceSimilarity(const SourceData_SourceSimilarity& from);

  inline SourceData_SourceSimilarity& operator=(const SourceData_SourceSimilarity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourceSimilarity(SourceData_SourceSimilarity&& from) noexcept
    : SourceData_SourceSimilarity() {
    *this = ::std::move(from);
  }

  inline SourceData_SourceSimilarity& operator=(SourceData_SourceSimilarity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourceSimilarity& default_instance();

  static inline const SourceData_SourceSimilarity* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourceSimilarity*>(
               &_SourceData_SourceSimilarity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void UnsafeArenaSwap(SourceData_SourceSimilarity* other);
  void Swap(SourceData_SourceSimilarity* other);
  friend void swap(SourceData_SourceSimilarity& a, SourceData_SourceSimilarity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourceSimilarity* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourceSimilarity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourceSimilarity& from);
  void MergeFrom(const SourceData_SourceSimilarity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourceSimilarity* other);
  protected:
  explicit SourceData_SourceSimilarity(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 source = 2;
  int source_size() const;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  ::google::protobuf::int64 source(int index) const;
  void set_source(int index, ::google::protobuf::int64 value);
  void add_source(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      source() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_source();

  // repeated float jaccard_similarity = 3;
  int jaccard_similarity_size() const;
  void clear_jaccard_similarity();
  static const int kJaccardSimilarityFieldNumber = 3;
  float jaccard_similarity(int index) const;
  void set_jaccard_similarity(int index, float value);
  void add_jaccard_similarity(float value);
  const ::google::protobuf::RepeatedField< float >&
      jaccard_similarity() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_jaccard_similarity();

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourceSimilarity)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > source_;
  ::google::protobuf::RepeatedField< float > jaccard_similarity_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_SourceGeo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.SourceGeo) */ {
 public:
  SourceData_SourceGeo();
  virtual ~SourceData_SourceGeo();

  SourceData_SourceGeo(const SourceData_SourceGeo& from);

  inline SourceData_SourceGeo& operator=(const SourceData_SourceGeo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_SourceGeo(SourceData_SourceGeo&& from) noexcept
    : SourceData_SourceGeo() {
    *this = ::std::move(from);
  }

  inline SourceData_SourceGeo& operator=(SourceData_SourceGeo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_SourceGeo& default_instance();

  static inline const SourceData_SourceGeo* internal_default_instance() {
    return reinterpret_cast<const SourceData_SourceGeo*>(
               &_SourceData_SourceGeo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void UnsafeArenaSwap(SourceData_SourceGeo* other);
  void Swap(SourceData_SourceGeo* other);
  friend void swap(SourceData_SourceGeo& a, SourceData_SourceGeo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_SourceGeo* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_SourceGeo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_SourceGeo& from);
  void MergeFrom(const SourceData_SourceGeo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_SourceGeo* other);
  protected:
  explicit SourceData_SourceGeo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 country_id = 2;
  bool has_country_id() const;
  void clear_country_id();
  static const int kCountryIdFieldNumber = 2;
  ::google::protobuf::uint32 country_id() const;
  void set_country_id(::google::protobuf::uint32 value);

  // optional uint32 region_id = 3;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 3;
  ::google::protobuf::uint32 region_id() const;
  void set_region_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.SourceGeo)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_country_id();
  void clear_has_country_id();
  void set_has_region_id();
  void clear_has_region_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 country_id_;
  ::google::protobuf::uint32 region_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData_ContentThemes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData.ContentThemes) */ {
 public:
  SourceData_ContentThemes();
  virtual ~SourceData_ContentThemes();

  SourceData_ContentThemes(const SourceData_ContentThemes& from);

  inline SourceData_ContentThemes& operator=(const SourceData_ContentThemes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData_ContentThemes(SourceData_ContentThemes&& from) noexcept
    : SourceData_ContentThemes() {
    *this = ::std::move(from);
  }

  inline SourceData_ContentThemes& operator=(SourceData_ContentThemes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData_ContentThemes& default_instance();

  static inline const SourceData_ContentThemes* internal_default_instance() {
    return reinterpret_cast<const SourceData_ContentThemes*>(
               &_SourceData_ContentThemes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void UnsafeArenaSwap(SourceData_ContentThemes* other);
  void Swap(SourceData_ContentThemes* other);
  friend void swap(SourceData_ContentThemes& a, SourceData_ContentThemes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData_ContentThemes* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData_ContentThemes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData_ContentThemes& from);
  void MergeFrom(const SourceData_ContentThemes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData_ContentThemes* other);
  protected:
  explicit SourceData_ContentThemes(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float themes_vector = 2;
  int themes_vector_size() const;
  void clear_themes_vector();
  static const int kThemesVectorFieldNumber = 2;
  float themes_vector(int index) const;
  void set_themes_vector(int index, float value);
  void add_themes_vector(float value);
  const ::google::protobuf::RepeatedField< float >&
      themes_vector() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_themes_vector();

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional bool bad_content = 3;
  bool has_bad_content() const;
  void clear_bad_content();
  static const int kBadContentFieldNumber = 3;
  bool bad_content() const;
  void set_bad_content(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData.ContentThemes)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_bad_content();
  void clear_has_bad_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > themes_vector_;
  ::google::protobuf::uint32 version_;
  bool bad_content_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.SourceData) */ {
 public:
  SourceData();
  virtual ~SourceData();

  SourceData(const SourceData& from);

  inline SourceData& operator=(const SourceData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceData(SourceData&& from) noexcept
    : SourceData() {
    *this = ::std::move(from);
  }

  inline SourceData& operator=(SourceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceData& default_instance();

  static inline const SourceData* internal_default_instance() {
    return reinterpret_cast<const SourceData*>(
               &_SourceData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void UnsafeArenaSwap(SourceData* other);
  void Swap(SourceData* other);
  friend void swap(SourceData& a, SourceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceData* New() const PROTOBUF_FINAL { return New(NULL); }

  SourceData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SourceData& from);
  void MergeFrom(const SourceData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SourceData* other);
  protected:
  explicit SourceData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SourceData_OriginalInfo OriginalInfo;
  typedef SourceData_OkInfo OkInfo;
  typedef SourceData_NewsData NewsData;
  typedef SourceData_SourceInfo SourceInfo;
  typedef SourceData_LentaAdminSourceInfo LentaAdminSourceInfo;
  typedef SourceData_GroupStat GroupStat;
  typedef SourceData_AlsFea AlsFea;
  typedef SourceData_LdaFea LdaFea;
  typedef SourceData_GroupPeriodStats GroupPeriodStats;
  typedef SourceData_SourcePopularityStat SourcePopularityStat;
  typedef SourceData_SourceEventStat SourceEventStat;
  typedef SourceData_GroupEventStat GroupEventStat;
  typedef SourceData_SourceLocationStat SourceLocationStat;
  typedef SourceData_SourceSimilarity SourceSimilarity;
  typedef SourceData_SourceGeo SourceGeo;
  typedef SourceData_ContentThemes ContentThemes;

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.SourceData.LdaFea lda_fea = 2;
  bool has_lda_fea() const;
  void clear_lda_fea();
  static const int kLdaFeaFieldNumber = 2;
  private:
  void _slow_mutable_lda_fea();
  void _slow_set_allocated_lda_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_LdaFea** lda_fea);
  ::cosmo::pb::SourceData_LdaFea* _slow_release_lda_fea();
  public:
  const ::cosmo::pb::SourceData_LdaFea& lda_fea() const;
  ::cosmo::pb::SourceData_LdaFea* mutable_lda_fea();
  ::cosmo::pb::SourceData_LdaFea* release_lda_fea();
  void set_allocated_lda_fea(::cosmo::pb::SourceData_LdaFea* lda_fea);
  ::cosmo::pb::SourceData_LdaFea* unsafe_arena_release_lda_fea();
  void unsafe_arena_set_allocated_lda_fea(
      ::cosmo::pb::SourceData_LdaFea* lda_fea);

  // optional .cosmo.pb.SourceData.AlsFea als_fea = 3;
  bool has_als_fea() const;
  void clear_als_fea();
  static const int kAlsFeaFieldNumber = 3;
  private:
  void _slow_mutable_als_fea();
  void _slow_set_allocated_als_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_AlsFea** als_fea);
  ::cosmo::pb::SourceData_AlsFea* _slow_release_als_fea();
  public:
  const ::cosmo::pb::SourceData_AlsFea& als_fea() const;
  ::cosmo::pb::SourceData_AlsFea* mutable_als_fea();
  ::cosmo::pb::SourceData_AlsFea* release_als_fea();
  void set_allocated_als_fea(::cosmo::pb::SourceData_AlsFea* als_fea);
  ::cosmo::pb::SourceData_AlsFea* unsafe_arena_release_als_fea();
  void unsafe_arena_set_allocated_als_fea(
      ::cosmo::pb::SourceData_AlsFea* als_fea);

  // optional .cosmo.pb.SourceData.OkInfo ok_info = 6;
  bool has_ok_info() const;
  void clear_ok_info();
  static const int kOkInfoFieldNumber = 6;
  private:
  void _slow_mutable_ok_info();
  void _slow_set_allocated_ok_info(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_OkInfo** ok_info);
  ::cosmo::pb::SourceData_OkInfo* _slow_release_ok_info();
  public:
  const ::cosmo::pb::SourceData_OkInfo& ok_info() const;
  ::cosmo::pb::SourceData_OkInfo* mutable_ok_info();
  ::cosmo::pb::SourceData_OkInfo* release_ok_info();
  void set_allocated_ok_info(::cosmo::pb::SourceData_OkInfo* ok_info);
  ::cosmo::pb::SourceData_OkInfo* unsafe_arena_release_ok_info();
  void unsafe_arena_set_allocated_ok_info(
      ::cosmo::pb::SourceData_OkInfo* ok_info);

  // optional .cosmo.pb.SourceData.SourceInfo source_info = 7;
  bool has_source_info() const;
  void clear_source_info();
  static const int kSourceInfoFieldNumber = 7;
  private:
  void _slow_mutable_source_info();
  void _slow_set_allocated_source_info(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceInfo** source_info);
  ::cosmo::pb::SourceData_SourceInfo* _slow_release_source_info();
  public:
  const ::cosmo::pb::SourceData_SourceInfo& source_info() const;
  ::cosmo::pb::SourceData_SourceInfo* mutable_source_info();
  ::cosmo::pb::SourceData_SourceInfo* release_source_info();
  void set_allocated_source_info(::cosmo::pb::SourceData_SourceInfo* source_info);
  ::cosmo::pb::SourceData_SourceInfo* unsafe_arena_release_source_info();
  void unsafe_arena_set_allocated_source_info(
      ::cosmo::pb::SourceData_SourceInfo* source_info);

  // optional .cosmo.pb.SourceData.OriginalInfo original_info = 8;
  bool has_original_info() const;
  void clear_original_info();
  static const int kOriginalInfoFieldNumber = 8;
  private:
  void _slow_mutable_original_info();
  void _slow_set_allocated_original_info(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_OriginalInfo** original_info);
  ::cosmo::pb::SourceData_OriginalInfo* _slow_release_original_info();
  public:
  const ::cosmo::pb::SourceData_OriginalInfo& original_info() const;
  ::cosmo::pb::SourceData_OriginalInfo* mutable_original_info();
  ::cosmo::pb::SourceData_OriginalInfo* release_original_info();
  void set_allocated_original_info(::cosmo::pb::SourceData_OriginalInfo* original_info);
  ::cosmo::pb::SourceData_OriginalInfo* unsafe_arena_release_original_info();
  void unsafe_arena_set_allocated_original_info(
      ::cosmo::pb::SourceData_OriginalInfo* original_info);

  // optional .cosmo.pb.SourceData.GroupPeriodStats group_period_stats = 9;
  bool has_group_period_stats() const;
  void clear_group_period_stats();
  static const int kGroupPeriodStatsFieldNumber = 9;
  private:
  void _slow_mutable_group_period_stats();
  void _slow_set_allocated_group_period_stats(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupPeriodStats** group_period_stats);
  ::cosmo::pb::SourceData_GroupPeriodStats* _slow_release_group_period_stats();
  public:
  const ::cosmo::pb::SourceData_GroupPeriodStats& group_period_stats() const;
  ::cosmo::pb::SourceData_GroupPeriodStats* mutable_group_period_stats();
  ::cosmo::pb::SourceData_GroupPeriodStats* release_group_period_stats();
  void set_allocated_group_period_stats(::cosmo::pb::SourceData_GroupPeriodStats* group_period_stats);
  ::cosmo::pb::SourceData_GroupPeriodStats* unsafe_arena_release_group_period_stats();
  void unsafe_arena_set_allocated_group_period_stats(
      ::cosmo::pb::SourceData_GroupPeriodStats* group_period_stats);

  // optional .cosmo.pb.SourceData.NewsData news_data = 10;
  bool has_news_data() const;
  void clear_news_data();
  static const int kNewsDataFieldNumber = 10;
  private:
  void _slow_mutable_news_data();
  void _slow_set_allocated_news_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_NewsData** news_data);
  ::cosmo::pb::SourceData_NewsData* _slow_release_news_data();
  public:
  const ::cosmo::pb::SourceData_NewsData& news_data() const;
  ::cosmo::pb::SourceData_NewsData* mutable_news_data();
  ::cosmo::pb::SourceData_NewsData* release_news_data();
  void set_allocated_news_data(::cosmo::pb::SourceData_NewsData* news_data);
  ::cosmo::pb::SourceData_NewsData* unsafe_arena_release_news_data();
  void unsafe_arena_set_allocated_news_data(
      ::cosmo::pb::SourceData_NewsData* news_data);

  // optional .cosmo.pb.SourceData.SourcePopularityStat source_popularity = 11;
  bool has_source_popularity() const;
  void clear_source_popularity();
  static const int kSourcePopularityFieldNumber = 11;
  private:
  void _slow_mutable_source_popularity();
  void _slow_set_allocated_source_popularity(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourcePopularityStat** source_popularity);
  ::cosmo::pb::SourceData_SourcePopularityStat* _slow_release_source_popularity();
  public:
  const ::cosmo::pb::SourceData_SourcePopularityStat& source_popularity() const;
  ::cosmo::pb::SourceData_SourcePopularityStat* mutable_source_popularity();
  ::cosmo::pb::SourceData_SourcePopularityStat* release_source_popularity();
  void set_allocated_source_popularity(::cosmo::pb::SourceData_SourcePopularityStat* source_popularity);
  ::cosmo::pb::SourceData_SourcePopularityStat* unsafe_arena_release_source_popularity();
  void unsafe_arena_set_allocated_source_popularity(
      ::cosmo::pb::SourceData_SourcePopularityStat* source_popularity);

  // optional .cosmo.pb.SourceData.LdaFea lda_fea_2 = 12;
  bool has_lda_fea_2() const;
  void clear_lda_fea_2();
  static const int kLdaFea2FieldNumber = 12;
  private:
  void _slow_mutable_lda_fea_2();
  void _slow_set_allocated_lda_fea_2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_LdaFea** lda_fea_2);
  ::cosmo::pb::SourceData_LdaFea* _slow_release_lda_fea_2();
  public:
  const ::cosmo::pb::SourceData_LdaFea& lda_fea_2() const;
  ::cosmo::pb::SourceData_LdaFea* mutable_lda_fea_2();
  ::cosmo::pb::SourceData_LdaFea* release_lda_fea_2();
  void set_allocated_lda_fea_2(::cosmo::pb::SourceData_LdaFea* lda_fea_2);
  ::cosmo::pb::SourceData_LdaFea* unsafe_arena_release_lda_fea_2();
  void unsafe_arena_set_allocated_lda_fea_2(
      ::cosmo::pb::SourceData_LdaFea* lda_fea_2);

  // optional .cosmo.pb.SourceData.AlsFea als_fea_2 = 13;
  bool has_als_fea_2() const;
  void clear_als_fea_2();
  static const int kAlsFea2FieldNumber = 13;
  private:
  void _slow_mutable_als_fea_2();
  void _slow_set_allocated_als_fea_2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_AlsFea** als_fea_2);
  ::cosmo::pb::SourceData_AlsFea* _slow_release_als_fea_2();
  public:
  const ::cosmo::pb::SourceData_AlsFea& als_fea_2() const;
  ::cosmo::pb::SourceData_AlsFea* mutable_als_fea_2();
  ::cosmo::pb::SourceData_AlsFea* release_als_fea_2();
  void set_allocated_als_fea_2(::cosmo::pb::SourceData_AlsFea* als_fea_2);
  ::cosmo::pb::SourceData_AlsFea* unsafe_arena_release_als_fea_2();
  void unsafe_arena_set_allocated_als_fea_2(
      ::cosmo::pb::SourceData_AlsFea* als_fea_2);

  // optional .cosmo.pb.SourceData.SourcePopularityStat source_fresh_popularity = 14;
  bool has_source_fresh_popularity() const;
  void clear_source_fresh_popularity();
  static const int kSourceFreshPopularityFieldNumber = 14;
  private:
  void _slow_mutable_source_fresh_popularity();
  void _slow_set_allocated_source_fresh_popularity(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourcePopularityStat** source_fresh_popularity);
  ::cosmo::pb::SourceData_SourcePopularityStat* _slow_release_source_fresh_popularity();
  public:
  const ::cosmo::pb::SourceData_SourcePopularityStat& source_fresh_popularity() const;
  ::cosmo::pb::SourceData_SourcePopularityStat* mutable_source_fresh_popularity();
  ::cosmo::pb::SourceData_SourcePopularityStat* release_source_fresh_popularity();
  void set_allocated_source_fresh_popularity(::cosmo::pb::SourceData_SourcePopularityStat* source_fresh_popularity);
  ::cosmo::pb::SourceData_SourcePopularityStat* unsafe_arena_release_source_fresh_popularity();
  void unsafe_arena_set_allocated_source_fresh_popularity(
      ::cosmo::pb::SourceData_SourcePopularityStat* source_fresh_popularity);

  // optional .cosmo.pb.SourceData.GroupEventStat ok_group_event_stat = 15;
  bool has_ok_group_event_stat() const;
  void clear_ok_group_event_stat();
  static const int kOkGroupEventStatFieldNumber = 15;
  private:
  void _slow_mutable_ok_group_event_stat();
  void _slow_set_allocated_ok_group_event_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** ok_group_event_stat);
  ::cosmo::pb::SourceData_GroupEventStat* _slow_release_ok_group_event_stat();
  public:
  const ::cosmo::pb::SourceData_GroupEventStat& ok_group_event_stat() const;
  ::cosmo::pb::SourceData_GroupEventStat* mutable_ok_group_event_stat();
  ::cosmo::pb::SourceData_GroupEventStat* release_ok_group_event_stat();
  void set_allocated_ok_group_event_stat(::cosmo::pb::SourceData_GroupEventStat* ok_group_event_stat);
  ::cosmo::pb::SourceData_GroupEventStat* unsafe_arena_release_ok_group_event_stat();
  void unsafe_arena_set_allocated_ok_group_event_stat(
      ::cosmo::pb::SourceData_GroupEventStat* ok_group_event_stat);

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat = 16;
  bool has_vk_group_event_stat() const;
  void clear_vk_group_event_stat();
  static const int kVkGroupEventStatFieldNumber = 16;
  private:
  void _slow_mutable_vk_group_event_stat();
  void _slow_set_allocated_vk_group_event_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** vk_group_event_stat);
  ::cosmo::pb::SourceData_GroupEventStat* _slow_release_vk_group_event_stat();
  public:
  const ::cosmo::pb::SourceData_GroupEventStat& vk_group_event_stat() const;
  ::cosmo::pb::SourceData_GroupEventStat* mutable_vk_group_event_stat();
  ::cosmo::pb::SourceData_GroupEventStat* release_vk_group_event_stat();
  void set_allocated_vk_group_event_stat(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat);
  ::cosmo::pb::SourceData_GroupEventStat* unsafe_arena_release_vk_group_event_stat();
  void unsafe_arena_set_allocated_vk_group_event_stat(
      ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat);

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week = 17;
  bool has_vk_group_event_stat_week() const;
  void clear_vk_group_event_stat_week();
  static const int kVkGroupEventStatWeekFieldNumber = 17;
  private:
  void _slow_mutable_vk_group_event_stat_week();
  void _slow_set_allocated_vk_group_event_stat_week(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** vk_group_event_stat_week);
  ::cosmo::pb::SourceData_GroupEventStat* _slow_release_vk_group_event_stat_week();
  public:
  const ::cosmo::pb::SourceData_GroupEventStat& vk_group_event_stat_week() const;
  ::cosmo::pb::SourceData_GroupEventStat* mutable_vk_group_event_stat_week();
  ::cosmo::pb::SourceData_GroupEventStat* release_vk_group_event_stat_week();
  void set_allocated_vk_group_event_stat_week(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week);
  ::cosmo::pb::SourceData_GroupEventStat* unsafe_arena_release_vk_group_event_stat_week();
  void unsafe_arena_set_allocated_vk_group_event_stat_week(
      ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week);

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat = 18;
  bool has_youtube_group_event_stat() const;
  void clear_youtube_group_event_stat();
  static const int kYoutubeGroupEventStatFieldNumber = 18;
  private:
  void _slow_mutable_youtube_group_event_stat();
  void _slow_set_allocated_youtube_group_event_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** youtube_group_event_stat);
  ::cosmo::pb::SourceData_GroupEventStat* _slow_release_youtube_group_event_stat();
  public:
  const ::cosmo::pb::SourceData_GroupEventStat& youtube_group_event_stat() const;
  ::cosmo::pb::SourceData_GroupEventStat* mutable_youtube_group_event_stat();
  ::cosmo::pb::SourceData_GroupEventStat* release_youtube_group_event_stat();
  void set_allocated_youtube_group_event_stat(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat);
  ::cosmo::pb::SourceData_GroupEventStat* unsafe_arena_release_youtube_group_event_stat();
  void unsafe_arena_set_allocated_youtube_group_event_stat(
      ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat);

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week = 19;
  bool has_youtube_group_event_stat_week() const;
  void clear_youtube_group_event_stat_week();
  static const int kYoutubeGroupEventStatWeekFieldNumber = 19;
  private:
  void _slow_mutable_youtube_group_event_stat_week();
  void _slow_set_allocated_youtube_group_event_stat_week(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** youtube_group_event_stat_week);
  ::cosmo::pb::SourceData_GroupEventStat* _slow_release_youtube_group_event_stat_week();
  public:
  const ::cosmo::pb::SourceData_GroupEventStat& youtube_group_event_stat_week() const;
  ::cosmo::pb::SourceData_GroupEventStat* mutable_youtube_group_event_stat_week();
  ::cosmo::pb::SourceData_GroupEventStat* release_youtube_group_event_stat_week();
  void set_allocated_youtube_group_event_stat_week(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week);
  ::cosmo::pb::SourceData_GroupEventStat* unsafe_arena_release_youtube_group_event_stat_week();
  void unsafe_arena_set_allocated_youtube_group_event_stat_week(
      ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week);

  // optional .cosmo.pb.SourceData.SourceLocationStat taped_location_stat = 21;
  bool has_taped_location_stat() const;
  void clear_taped_location_stat();
  static const int kTapedLocationStatFieldNumber = 21;
  private:
  void _slow_mutable_taped_location_stat();
  void _slow_set_allocated_taped_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** taped_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* _slow_release_taped_location_stat();
  public:
  const ::cosmo::pb::SourceData_SourceLocationStat& taped_location_stat() const;
  ::cosmo::pb::SourceData_SourceLocationStat* mutable_taped_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* release_taped_location_stat();
  void set_allocated_taped_location_stat(::cosmo::pb::SourceData_SourceLocationStat* taped_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* unsafe_arena_release_taped_location_stat();
  void unsafe_arena_set_allocated_taped_location_stat(
      ::cosmo::pb::SourceData_SourceLocationStat* taped_location_stat);

  // optional .cosmo.pb.SourceData.SourceLocationStat homer_location_stat = 22;
  bool has_homer_location_stat() const;
  void clear_homer_location_stat();
  static const int kHomerLocationStatFieldNumber = 22;
  private:
  void _slow_mutable_homer_location_stat();
  void _slow_set_allocated_homer_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** homer_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* _slow_release_homer_location_stat();
  public:
  const ::cosmo::pb::SourceData_SourceLocationStat& homer_location_stat() const;
  ::cosmo::pb::SourceData_SourceLocationStat* mutable_homer_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* release_homer_location_stat();
  void set_allocated_homer_location_stat(::cosmo::pb::SourceData_SourceLocationStat* homer_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* unsafe_arena_release_homer_location_stat();
  void unsafe_arena_set_allocated_homer_location_stat(
      ::cosmo::pb::SourceData_SourceLocationStat* homer_location_stat);

  // optional .cosmo.pb.SourceData.SourceSimilarity web_top_similar_sources = 23;
  bool has_web_top_similar_sources() const;
  void clear_web_top_similar_sources();
  static const int kWebTopSimilarSourcesFieldNumber = 23;
  private:
  void _slow_mutable_web_top_similar_sources();
  void _slow_set_allocated_web_top_similar_sources(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceSimilarity** web_top_similar_sources);
  ::cosmo::pb::SourceData_SourceSimilarity* _slow_release_web_top_similar_sources();
  public:
  const ::cosmo::pb::SourceData_SourceSimilarity& web_top_similar_sources() const;
  ::cosmo::pb::SourceData_SourceSimilarity* mutable_web_top_similar_sources();
  ::cosmo::pb::SourceData_SourceSimilarity* release_web_top_similar_sources();
  void set_allocated_web_top_similar_sources(::cosmo::pb::SourceData_SourceSimilarity* web_top_similar_sources);
  ::cosmo::pb::SourceData_SourceSimilarity* unsafe_arena_release_web_top_similar_sources();
  void unsafe_arena_set_allocated_web_top_similar_sources(
      ::cosmo::pb::SourceData_SourceSimilarity* web_top_similar_sources);

  // optional .cosmo.pb.SourceData.SourceSimilarity ok_top_similar_groups = 24;
  bool has_ok_top_similar_groups() const;
  void clear_ok_top_similar_groups();
  static const int kOkTopSimilarGroupsFieldNumber = 24;
  private:
  void _slow_mutable_ok_top_similar_groups();
  void _slow_set_allocated_ok_top_similar_groups(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceSimilarity** ok_top_similar_groups);
  ::cosmo::pb::SourceData_SourceSimilarity* _slow_release_ok_top_similar_groups();
  public:
  const ::cosmo::pb::SourceData_SourceSimilarity& ok_top_similar_groups() const;
  ::cosmo::pb::SourceData_SourceSimilarity* mutable_ok_top_similar_groups();
  ::cosmo::pb::SourceData_SourceSimilarity* release_ok_top_similar_groups();
  void set_allocated_ok_top_similar_groups(::cosmo::pb::SourceData_SourceSimilarity* ok_top_similar_groups);
  ::cosmo::pb::SourceData_SourceSimilarity* unsafe_arena_release_ok_top_similar_groups();
  void unsafe_arena_set_allocated_ok_top_similar_groups(
      ::cosmo::pb::SourceData_SourceSimilarity* ok_top_similar_groups);

  // optional .cosmo.pb.SourceData.SourceLocationStat hourly_location_stat = 25;
  bool has_hourly_location_stat() const;
  void clear_hourly_location_stat();
  static const int kHourlyLocationStatFieldNumber = 25;
  private:
  void _slow_mutable_hourly_location_stat();
  void _slow_set_allocated_hourly_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** hourly_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* _slow_release_hourly_location_stat();
  public:
  const ::cosmo::pb::SourceData_SourceLocationStat& hourly_location_stat() const;
  ::cosmo::pb::SourceData_SourceLocationStat* mutable_hourly_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* release_hourly_location_stat();
  void set_allocated_hourly_location_stat(::cosmo::pb::SourceData_SourceLocationStat* hourly_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* unsafe_arena_release_hourly_location_stat();
  void unsafe_arena_set_allocated_hourly_location_stat(
      ::cosmo::pb::SourceData_SourceLocationStat* hourly_location_stat);

  // optional .cosmo.pb.SourceData.SourceLocationStat daily_location_stat = 26;
  bool has_daily_location_stat() const;
  void clear_daily_location_stat();
  static const int kDailyLocationStatFieldNumber = 26;
  private:
  void _slow_mutable_daily_location_stat();
  void _slow_set_allocated_daily_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** daily_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* _slow_release_daily_location_stat();
  public:
  const ::cosmo::pb::SourceData_SourceLocationStat& daily_location_stat() const;
  ::cosmo::pb::SourceData_SourceLocationStat* mutable_daily_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* release_daily_location_stat();
  void set_allocated_daily_location_stat(::cosmo::pb::SourceData_SourceLocationStat* daily_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* unsafe_arena_release_daily_location_stat();
  void unsafe_arena_set_allocated_daily_location_stat(
      ::cosmo::pb::SourceData_SourceLocationStat* daily_location_stat);

  // optional .cosmo.pb.SourceData.SourceLocationStat weekly_location_stat = 27;
  bool has_weekly_location_stat() const;
  void clear_weekly_location_stat();
  static const int kWeeklyLocationStatFieldNumber = 27;
  private:
  void _slow_mutable_weekly_location_stat();
  void _slow_set_allocated_weekly_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** weekly_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* _slow_release_weekly_location_stat();
  public:
  const ::cosmo::pb::SourceData_SourceLocationStat& weekly_location_stat() const;
  ::cosmo::pb::SourceData_SourceLocationStat* mutable_weekly_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* release_weekly_location_stat();
  void set_allocated_weekly_location_stat(::cosmo::pb::SourceData_SourceLocationStat* weekly_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* unsafe_arena_release_weekly_location_stat();
  void unsafe_arena_set_allocated_weekly_location_stat(
      ::cosmo::pb::SourceData_SourceLocationStat* weekly_location_stat);

  // optional .cosmo.pb.SourceData.SourceLocationStat monthly_location_stat = 28;
  bool has_monthly_location_stat() const;
  void clear_monthly_location_stat();
  static const int kMonthlyLocationStatFieldNumber = 28;
  private:
  void _slow_mutable_monthly_location_stat();
  void _slow_set_allocated_monthly_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** monthly_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* _slow_release_monthly_location_stat();
  public:
  const ::cosmo::pb::SourceData_SourceLocationStat& monthly_location_stat() const;
  ::cosmo::pb::SourceData_SourceLocationStat* mutable_monthly_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* release_monthly_location_stat();
  void set_allocated_monthly_location_stat(::cosmo::pb::SourceData_SourceLocationStat* monthly_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* unsafe_arena_release_monthly_location_stat();
  void unsafe_arena_set_allocated_monthly_location_stat(
      ::cosmo::pb::SourceData_SourceLocationStat* monthly_location_stat);

  // optional .cosmo.pb.SourceData.SourcePopularityStat source_new_popularity = 29;
  bool has_source_new_popularity() const;
  void clear_source_new_popularity();
  static const int kSourceNewPopularityFieldNumber = 29;
  private:
  void _slow_mutable_source_new_popularity();
  void _slow_set_allocated_source_new_popularity(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourcePopularityStat** source_new_popularity);
  ::cosmo::pb::SourceData_SourcePopularityStat* _slow_release_source_new_popularity();
  public:
  const ::cosmo::pb::SourceData_SourcePopularityStat& source_new_popularity() const;
  ::cosmo::pb::SourceData_SourcePopularityStat* mutable_source_new_popularity();
  ::cosmo::pb::SourceData_SourcePopularityStat* release_source_new_popularity();
  void set_allocated_source_new_popularity(::cosmo::pb::SourceData_SourcePopularityStat* source_new_popularity);
  ::cosmo::pb::SourceData_SourcePopularityStat* unsafe_arena_release_source_new_popularity();
  void unsafe_arena_set_allocated_source_new_popularity(
      ::cosmo::pb::SourceData_SourcePopularityStat* source_new_popularity);

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_v2 = 30;
  bool has_vk_group_event_stat_v2() const;
  void clear_vk_group_event_stat_v2();
  static const int kVkGroupEventStatV2FieldNumber = 30;
  private:
  void _slow_mutable_vk_group_event_stat_v2();
  void _slow_set_allocated_vk_group_event_stat_v2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** vk_group_event_stat_v2);
  ::cosmo::pb::SourceData_GroupEventStat* _slow_release_vk_group_event_stat_v2();
  public:
  const ::cosmo::pb::SourceData_GroupEventStat& vk_group_event_stat_v2() const;
  ::cosmo::pb::SourceData_GroupEventStat* mutable_vk_group_event_stat_v2();
  ::cosmo::pb::SourceData_GroupEventStat* release_vk_group_event_stat_v2();
  void set_allocated_vk_group_event_stat_v2(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_v2);
  ::cosmo::pb::SourceData_GroupEventStat* unsafe_arena_release_vk_group_event_stat_v2();
  void unsafe_arena_set_allocated_vk_group_event_stat_v2(
      ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_v2);

  // optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week_v2 = 31;
  bool has_vk_group_event_stat_week_v2() const;
  void clear_vk_group_event_stat_week_v2();
  static const int kVkGroupEventStatWeekV2FieldNumber = 31;
  private:
  void _slow_mutable_vk_group_event_stat_week_v2();
  void _slow_set_allocated_vk_group_event_stat_week_v2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** vk_group_event_stat_week_v2);
  ::cosmo::pb::SourceData_GroupEventStat* _slow_release_vk_group_event_stat_week_v2();
  public:
  const ::cosmo::pb::SourceData_GroupEventStat& vk_group_event_stat_week_v2() const;
  ::cosmo::pb::SourceData_GroupEventStat* mutable_vk_group_event_stat_week_v2();
  ::cosmo::pb::SourceData_GroupEventStat* release_vk_group_event_stat_week_v2();
  void set_allocated_vk_group_event_stat_week_v2(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week_v2);
  ::cosmo::pb::SourceData_GroupEventStat* unsafe_arena_release_vk_group_event_stat_week_v2();
  void unsafe_arena_set_allocated_vk_group_event_stat_week_v2(
      ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week_v2);

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_v2 = 32;
  bool has_youtube_group_event_stat_v2() const;
  void clear_youtube_group_event_stat_v2();
  static const int kYoutubeGroupEventStatV2FieldNumber = 32;
  private:
  void _slow_mutable_youtube_group_event_stat_v2();
  void _slow_set_allocated_youtube_group_event_stat_v2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** youtube_group_event_stat_v2);
  ::cosmo::pb::SourceData_GroupEventStat* _slow_release_youtube_group_event_stat_v2();
  public:
  const ::cosmo::pb::SourceData_GroupEventStat& youtube_group_event_stat_v2() const;
  ::cosmo::pb::SourceData_GroupEventStat* mutable_youtube_group_event_stat_v2();
  ::cosmo::pb::SourceData_GroupEventStat* release_youtube_group_event_stat_v2();
  void set_allocated_youtube_group_event_stat_v2(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_v2);
  ::cosmo::pb::SourceData_GroupEventStat* unsafe_arena_release_youtube_group_event_stat_v2();
  void unsafe_arena_set_allocated_youtube_group_event_stat_v2(
      ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_v2);

  // optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week_v2 = 33;
  bool has_youtube_group_event_stat_week_v2() const;
  void clear_youtube_group_event_stat_week_v2();
  static const int kYoutubeGroupEventStatWeekV2FieldNumber = 33;
  private:
  void _slow_mutable_youtube_group_event_stat_week_v2();
  void _slow_set_allocated_youtube_group_event_stat_week_v2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_GroupEventStat** youtube_group_event_stat_week_v2);
  ::cosmo::pb::SourceData_GroupEventStat* _slow_release_youtube_group_event_stat_week_v2();
  public:
  const ::cosmo::pb::SourceData_GroupEventStat& youtube_group_event_stat_week_v2() const;
  ::cosmo::pb::SourceData_GroupEventStat* mutable_youtube_group_event_stat_week_v2();
  ::cosmo::pb::SourceData_GroupEventStat* release_youtube_group_event_stat_week_v2();
  void set_allocated_youtube_group_event_stat_week_v2(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week_v2);
  ::cosmo::pb::SourceData_GroupEventStat* unsafe_arena_release_youtube_group_event_stat_week_v2();
  void unsafe_arena_set_allocated_youtube_group_event_stat_week_v2(
      ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week_v2);

  // optional .cosmo.pb.SourceData.SourceLocationStat fast_location_stat = 34;
  bool has_fast_location_stat() const;
  void clear_fast_location_stat();
  static const int kFastLocationStatFieldNumber = 34;
  private:
  void _slow_mutable_fast_location_stat();
  void _slow_set_allocated_fast_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceLocationStat** fast_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* _slow_release_fast_location_stat();
  public:
  const ::cosmo::pb::SourceData_SourceLocationStat& fast_location_stat() const;
  ::cosmo::pb::SourceData_SourceLocationStat* mutable_fast_location_stat();
  ::cosmo::pb::SourceData_SourceLocationStat* release_fast_location_stat();
  void set_allocated_fast_location_stat(::cosmo::pb::SourceData_SourceLocationStat* fast_location_stat);
  ::cosmo::pb::SourceData_SourceLocationStat* unsafe_arena_release_fast_location_stat();
  void unsafe_arena_set_allocated_fast_location_stat(
      ::cosmo::pb::SourceData_SourceLocationStat* fast_location_stat);

  // optional .cosmo.pb.SourceData.SourceGeo source_stat_geo = 35;
  bool has_source_stat_geo() const;
  void clear_source_stat_geo();
  static const int kSourceStatGeoFieldNumber = 35;
  private:
  void _slow_mutable_source_stat_geo();
  void _slow_set_allocated_source_stat_geo(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_SourceGeo** source_stat_geo);
  ::cosmo::pb::SourceData_SourceGeo* _slow_release_source_stat_geo();
  public:
  const ::cosmo::pb::SourceData_SourceGeo& source_stat_geo() const;
  ::cosmo::pb::SourceData_SourceGeo* mutable_source_stat_geo();
  ::cosmo::pb::SourceData_SourceGeo* release_source_stat_geo();
  void set_allocated_source_stat_geo(::cosmo::pb::SourceData_SourceGeo* source_stat_geo);
  ::cosmo::pb::SourceData_SourceGeo* unsafe_arena_release_source_stat_geo();
  void unsafe_arena_set_allocated_source_stat_geo(
      ::cosmo::pb::SourceData_SourceGeo* source_stat_geo);

  // optional .cosmo.pb.SourceData.ContentThemes content_themes = 36;
  bool has_content_themes() const;
  void clear_content_themes();
  static const int kContentThemesFieldNumber = 36;
  private:
  void _slow_mutable_content_themes();
  void _slow_set_allocated_content_themes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_ContentThemes** content_themes);
  ::cosmo::pb::SourceData_ContentThemes* _slow_release_content_themes();
  public:
  const ::cosmo::pb::SourceData_ContentThemes& content_themes() const;
  ::cosmo::pb::SourceData_ContentThemes* mutable_content_themes();
  ::cosmo::pb::SourceData_ContentThemes* release_content_themes();
  void set_allocated_content_themes(::cosmo::pb::SourceData_ContentThemes* content_themes);
  ::cosmo::pb::SourceData_ContentThemes* unsafe_arena_release_content_themes();
  void unsafe_arena_set_allocated_content_themes(
      ::cosmo::pb::SourceData_ContentThemes* content_themes);

  // optional .cosmo.pb.SourceData.LentaAdminSourceInfo lenta_admin_source_info = 37;
  bool has_lenta_admin_source_info() const;
  void clear_lenta_admin_source_info();
  static const int kLentaAdminSourceInfoFieldNumber = 37;
  private:
  void _slow_mutable_lenta_admin_source_info();
  void _slow_set_allocated_lenta_admin_source_info(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData_LentaAdminSourceInfo** lenta_admin_source_info);
  ::cosmo::pb::SourceData_LentaAdminSourceInfo* _slow_release_lenta_admin_source_info();
  public:
  const ::cosmo::pb::SourceData_LentaAdminSourceInfo& lenta_admin_source_info() const;
  ::cosmo::pb::SourceData_LentaAdminSourceInfo* mutable_lenta_admin_source_info();
  ::cosmo::pb::SourceData_LentaAdminSourceInfo* release_lenta_admin_source_info();
  void set_allocated_lenta_admin_source_info(::cosmo::pb::SourceData_LentaAdminSourceInfo* lenta_admin_source_info);
  ::cosmo::pb::SourceData_LentaAdminSourceInfo* unsafe_arena_release_lenta_admin_source_info();
  void unsafe_arena_set_allocated_lenta_admin_source_info(
      ::cosmo::pb::SourceData_LentaAdminSourceInfo* lenta_admin_source_info);

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.SourceData)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_lda_fea();
  void clear_has_lda_fea();
  void set_has_als_fea();
  void clear_has_als_fea();
  void set_has_ok_info();
  void clear_has_ok_info();
  void set_has_source_info();
  void clear_has_source_info();
  void set_has_original_info();
  void clear_has_original_info();
  void set_has_group_period_stats();
  void clear_has_group_period_stats();
  void set_has_news_data();
  void clear_has_news_data();
  void set_has_source_popularity();
  void clear_has_source_popularity();
  void set_has_lda_fea_2();
  void clear_has_lda_fea_2();
  void set_has_als_fea_2();
  void clear_has_als_fea_2();
  void set_has_source_fresh_popularity();
  void clear_has_source_fresh_popularity();
  void set_has_ok_group_event_stat();
  void clear_has_ok_group_event_stat();
  void set_has_vk_group_event_stat();
  void clear_has_vk_group_event_stat();
  void set_has_vk_group_event_stat_week();
  void clear_has_vk_group_event_stat_week();
  void set_has_youtube_group_event_stat();
  void clear_has_youtube_group_event_stat();
  void set_has_youtube_group_event_stat_week();
  void clear_has_youtube_group_event_stat_week();
  void set_has_taped_location_stat();
  void clear_has_taped_location_stat();
  void set_has_homer_location_stat();
  void clear_has_homer_location_stat();
  void set_has_web_top_similar_sources();
  void clear_has_web_top_similar_sources();
  void set_has_ok_top_similar_groups();
  void clear_has_ok_top_similar_groups();
  void set_has_hourly_location_stat();
  void clear_has_hourly_location_stat();
  void set_has_daily_location_stat();
  void clear_has_daily_location_stat();
  void set_has_weekly_location_stat();
  void clear_has_weekly_location_stat();
  void set_has_monthly_location_stat();
  void clear_has_monthly_location_stat();
  void set_has_source_new_popularity();
  void clear_has_source_new_popularity();
  void set_has_vk_group_event_stat_v2();
  void clear_has_vk_group_event_stat_v2();
  void set_has_vk_group_event_stat_week_v2();
  void clear_has_vk_group_event_stat_week_v2();
  void set_has_youtube_group_event_stat_v2();
  void clear_has_youtube_group_event_stat_v2();
  void set_has_youtube_group_event_stat_week_v2();
  void clear_has_youtube_group_event_stat_week_v2();
  void set_has_fast_location_stat();
  void clear_has_fast_location_stat();
  void set_has_source_stat_geo();
  void clear_has_source_stat_geo();
  void set_has_content_themes();
  void clear_has_content_themes();
  void set_has_lenta_admin_source_info();
  void clear_has_lenta_admin_source_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::cosmo::pb::SourceData_LdaFea* lda_fea_;
  ::cosmo::pb::SourceData_AlsFea* als_fea_;
  ::cosmo::pb::SourceData_OkInfo* ok_info_;
  ::cosmo::pb::SourceData_SourceInfo* source_info_;
  ::cosmo::pb::SourceData_OriginalInfo* original_info_;
  ::cosmo::pb::SourceData_GroupPeriodStats* group_period_stats_;
  ::cosmo::pb::SourceData_NewsData* news_data_;
  ::cosmo::pb::SourceData_SourcePopularityStat* source_popularity_;
  ::cosmo::pb::SourceData_LdaFea* lda_fea_2_;
  ::cosmo::pb::SourceData_AlsFea* als_fea_2_;
  ::cosmo::pb::SourceData_SourcePopularityStat* source_fresh_popularity_;
  ::cosmo::pb::SourceData_GroupEventStat* ok_group_event_stat_;
  ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_;
  ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week_;
  ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_;
  ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week_;
  ::cosmo::pb::SourceData_SourceLocationStat* taped_location_stat_;
  ::cosmo::pb::SourceData_SourceLocationStat* homer_location_stat_;
  ::cosmo::pb::SourceData_SourceSimilarity* web_top_similar_sources_;
  ::cosmo::pb::SourceData_SourceSimilarity* ok_top_similar_groups_;
  ::cosmo::pb::SourceData_SourceLocationStat* hourly_location_stat_;
  ::cosmo::pb::SourceData_SourceLocationStat* daily_location_stat_;
  ::cosmo::pb::SourceData_SourceLocationStat* weekly_location_stat_;
  ::cosmo::pb::SourceData_SourceLocationStat* monthly_location_stat_;
  ::cosmo::pb::SourceData_SourcePopularityStat* source_new_popularity_;
  ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_v2_;
  ::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week_v2_;
  ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_v2_;
  ::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week_v2_;
  ::cosmo::pb::SourceData_SourceLocationStat* fast_location_stat_;
  ::cosmo::pb::SourceData_SourceGeo* source_stat_geo_;
  ::cosmo::pb::SourceData_ContentThemes* content_themes_;
  ::cosmo::pb::SourceData_LentaAdminSourceInfo* lenta_admin_source_info_;
  ::google::protobuf::int64 source_id_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_OriginalInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.OriginalInfo) */ {
 public:
  DocumentData_OriginalInfo();
  virtual ~DocumentData_OriginalInfo();

  DocumentData_OriginalInfo(const DocumentData_OriginalInfo& from);

  inline DocumentData_OriginalInfo& operator=(const DocumentData_OriginalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_OriginalInfo(DocumentData_OriginalInfo&& from) noexcept
    : DocumentData_OriginalInfo() {
    *this = ::std::move(from);
  }

  inline DocumentData_OriginalInfo& operator=(DocumentData_OriginalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_OriginalInfo& default_instance();

  static inline const DocumentData_OriginalInfo* internal_default_instance() {
    return reinterpret_cast<const DocumentData_OriginalInfo*>(
               &_DocumentData_OriginalInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void UnsafeArenaSwap(DocumentData_OriginalInfo* other);
  void Swap(DocumentData_OriginalInfo* other);
  friend void swap(DocumentData_OriginalInfo& a, DocumentData_OriginalInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_OriginalInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_OriginalInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_OriginalInfo& from);
  void MergeFrom(const DocumentData_OriginalInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_OriginalInfo* other);
  protected:
  explicit DocumentData_OriginalInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 2;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);
  ::std::string* unsafe_arena_release_url();
  void unsafe_arena_set_allocated_url(
      ::std::string* url);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.OriginalInfo)
 private:
  void set_has_url();
  void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_OkInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.OkInfo) */ {
 public:
  DocumentData_OkInfo();
  virtual ~DocumentData_OkInfo();

  DocumentData_OkInfo(const DocumentData_OkInfo& from);

  inline DocumentData_OkInfo& operator=(const DocumentData_OkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_OkInfo(DocumentData_OkInfo&& from) noexcept
    : DocumentData_OkInfo() {
    *this = ::std::move(from);
  }

  inline DocumentData_OkInfo& operator=(DocumentData_OkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_OkInfo& default_instance();

  static inline const DocumentData_OkInfo* internal_default_instance() {
    return reinterpret_cast<const DocumentData_OkInfo*>(
               &_DocumentData_OkInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void UnsafeArenaSwap(DocumentData_OkInfo* other);
  void Swap(DocumentData_OkInfo* other);
  friend void swap(DocumentData_OkInfo& a, DocumentData_OkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_OkInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_OkInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_OkInfo& from);
  void MergeFrom(const DocumentData_OkInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_OkInfo* other);
  protected:
  explicit DocumentData_OkInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // required int64 doc_id = 2;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 2;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.OkInfo)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_doc_id();
  void clear_has_doc_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 doc_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_ContentData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.ContentData) */ {
 public:
  DocumentData_ContentData();
  virtual ~DocumentData_ContentData();

  DocumentData_ContentData(const DocumentData_ContentData& from);

  inline DocumentData_ContentData& operator=(const DocumentData_ContentData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_ContentData(DocumentData_ContentData&& from) noexcept
    : DocumentData_ContentData() {
    *this = ::std::move(from);
  }

  inline DocumentData_ContentData& operator=(DocumentData_ContentData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_ContentData& default_instance();

  static inline const DocumentData_ContentData* internal_default_instance() {
    return reinterpret_cast<const DocumentData_ContentData*>(
               &_DocumentData_ContentData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    91;

  void UnsafeArenaSwap(DocumentData_ContentData* other);
  void Swap(DocumentData_ContentData* other);
  friend void swap(DocumentData_ContentData& a, DocumentData_ContentData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_ContentData* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_ContentData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_ContentData& from);
  void MergeFrom(const DocumentData_ContentData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_ContentData* other);
  protected:
  explicit DocumentData_ContentData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float content_vector = 1;
  int content_vector_size() const;
  void clear_content_vector();
  static const int kContentVectorFieldNumber = 1;
  float content_vector(int index) const;
  void set_content_vector(int index, float value);
  void add_content_vector(float value);
  const ::google::protobuf::RepeatedField< float >&
      content_vector() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_content_vector();

  // required uint64 algo_version = 2;
  bool has_algo_version() const;
  void clear_algo_version();
  static const int kAlgoVersionFieldNumber = 2;
  ::google::protobuf::uint64 algo_version() const;
  void set_algo_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.ContentData)
 private:
  void set_has_algo_version();
  void clear_has_algo_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > content_vector_;
  ::google::protobuf::uint64 algo_version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_FreshnessData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.FreshnessData) */ {
 public:
  DocumentData_FreshnessData();
  virtual ~DocumentData_FreshnessData();

  DocumentData_FreshnessData(const DocumentData_FreshnessData& from);

  inline DocumentData_FreshnessData& operator=(const DocumentData_FreshnessData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_FreshnessData(DocumentData_FreshnessData&& from) noexcept
    : DocumentData_FreshnessData() {
    *this = ::std::move(from);
  }

  inline DocumentData_FreshnessData& operator=(DocumentData_FreshnessData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_FreshnessData& default_instance();

  static inline const DocumentData_FreshnessData* internal_default_instance() {
    return reinterpret_cast<const DocumentData_FreshnessData*>(
               &_DocumentData_FreshnessData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    92;

  void UnsafeArenaSwap(DocumentData_FreshnessData* other);
  void Swap(DocumentData_FreshnessData* other);
  friend void swap(DocumentData_FreshnessData& a, DocumentData_FreshnessData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_FreshnessData* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_FreshnessData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_FreshnessData& from);
  void MergeFrom(const DocumentData_FreshnessData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_FreshnessData* other);
  protected:
  explicit DocumentData_FreshnessData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 expiration_timestamp = 1;
  bool has_expiration_timestamp() const;
  void clear_expiration_timestamp();
  static const int kExpirationTimestampFieldNumber = 1;
  ::google::protobuf::int64 expiration_timestamp() const;
  void set_expiration_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.FreshnessData)
 private:
  void set_has_expiration_timestamp();
  void clear_has_expiration_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 expiration_timestamp_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_NewsData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.NewsData) */ {
 public:
  DocumentData_NewsData();
  virtual ~DocumentData_NewsData();

  DocumentData_NewsData(const DocumentData_NewsData& from);

  inline DocumentData_NewsData& operator=(const DocumentData_NewsData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_NewsData(DocumentData_NewsData&& from) noexcept
    : DocumentData_NewsData() {
    *this = ::std::move(from);
  }

  inline DocumentData_NewsData& operator=(DocumentData_NewsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_NewsData& default_instance();

  static inline const DocumentData_NewsData* internal_default_instance() {
    return reinterpret_cast<const DocumentData_NewsData*>(
               &_DocumentData_NewsData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    93;

  void UnsafeArenaSwap(DocumentData_NewsData* other);
  void Swap(DocumentData_NewsData* other);
  friend void swap(DocumentData_NewsData& a, DocumentData_NewsData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_NewsData* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_NewsData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_NewsData& from);
  void MergeFrom(const DocumentData_NewsData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_NewsData* other);
  protected:
  explicit DocumentData_NewsData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 clusterId = 1;
  bool has_clusterid() const;
  void clear_clusterid();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::int32 clusterid() const;
  void set_clusterid(::google::protobuf::int32 value);

  // required int32 issue_ts = 2;
  bool has_issue_ts() const;
  void clear_issue_ts();
  static const int kIssueTsFieldNumber = 2;
  ::google::protobuf::int32 issue_ts() const;
  void set_issue_ts(::google::protobuf::int32 value);

  // optional int32 region_id = 3;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 3;
  ::google::protobuf::int32 region_id() const;
  void set_region_id(::google::protobuf::int32 value);

  // optional int32 parent_id = 4;
  bool has_parent_id() const;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 4;
  ::google::protobuf::int32 parent_id() const;
  void set_parent_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.NewsData)
 private:
  void set_has_clusterid();
  void clear_has_clusterid();
  void set_has_issue_ts();
  void clear_has_issue_ts();
  void set_has_region_id();
  void clear_has_region_id();
  void set_has_parent_id();
  void clear_has_parent_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 clusterid_;
  ::google::protobuf::int32 issue_ts_;
  ::google::protobuf::int32 region_id_;
  ::google::protobuf::int32 parent_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_Censor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.Censor) */ {
 public:
  DocumentData_Censor();
  virtual ~DocumentData_Censor();

  DocumentData_Censor(const DocumentData_Censor& from);

  inline DocumentData_Censor& operator=(const DocumentData_Censor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_Censor(DocumentData_Censor&& from) noexcept
    : DocumentData_Censor() {
    *this = ::std::move(from);
  }

  inline DocumentData_Censor& operator=(DocumentData_Censor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_Censor& default_instance();

  static inline const DocumentData_Censor* internal_default_instance() {
    return reinterpret_cast<const DocumentData_Censor*>(
               &_DocumentData_Censor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    94;

  void UnsafeArenaSwap(DocumentData_Censor* other);
  void Swap(DocumentData_Censor* other);
  friend void swap(DocumentData_Censor& a, DocumentData_Censor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_Censor* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_Censor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_Censor& from);
  void MergeFrom(const DocumentData_Censor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_Censor* other);
  protected:
  explicit DocumentData_Censor(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_allowed = 1;
  bool has_is_allowed() const;
  void clear_is_allowed();
  static const int kIsAllowedFieldNumber = 1;
  bool is_allowed() const;
  void set_is_allowed(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.Censor)
 private:
  void set_has_is_allowed();
  void clear_has_is_allowed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool is_allowed_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_UserStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.UserStats) */ {
 public:
  DocumentData_UserStats();
  virtual ~DocumentData_UserStats();

  DocumentData_UserStats(const DocumentData_UserStats& from);

  inline DocumentData_UserStats& operator=(const DocumentData_UserStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_UserStats(DocumentData_UserStats&& from) noexcept
    : DocumentData_UserStats() {
    *this = ::std::move(from);
  }

  inline DocumentData_UserStats& operator=(DocumentData_UserStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_UserStats& default_instance();

  static inline const DocumentData_UserStats* internal_default_instance() {
    return reinterpret_cast<const DocumentData_UserStats*>(
               &_DocumentData_UserStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    95;

  void UnsafeArenaSwap(DocumentData_UserStats* other);
  void Swap(DocumentData_UserStats* other);
  friend void swap(DocumentData_UserStats& a, DocumentData_UserStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_UserStats* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_UserStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_UserStats& from);
  void MergeFrom(const DocumentData_UserStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_UserStats* other);
  protected:
  explicit DocumentData_UserStats(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 likes = 1;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 1;
  ::google::protobuf::uint32 likes() const;
  void set_likes(::google::protobuf::uint32 value);

  // optional uint32 dislikes = 2;
  bool has_dislikes() const;
  void clear_dislikes();
  static const int kDislikesFieldNumber = 2;
  ::google::protobuf::uint32 dislikes() const;
  void set_dislikes(::google::protobuf::uint32 value);

  // optional uint32 views = 3;
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 3;
  ::google::protobuf::uint32 views() const;
  void set_views(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.UserStats)
 private:
  void set_has_likes();
  void clear_has_likes();
  void set_has_dislikes();
  void clear_has_dislikes();
  void set_has_views();
  void clear_has_views();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 likes_;
  ::google::protobuf::uint32 dislikes_;
  ::google::protobuf::uint32 views_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_Trends : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.Trends) */ {
 public:
  DocumentData_Trends();
  virtual ~DocumentData_Trends();

  DocumentData_Trends(const DocumentData_Trends& from);

  inline DocumentData_Trends& operator=(const DocumentData_Trends& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_Trends(DocumentData_Trends&& from) noexcept
    : DocumentData_Trends() {
    *this = ::std::move(from);
  }

  inline DocumentData_Trends& operator=(DocumentData_Trends&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_Trends& default_instance();

  static inline const DocumentData_Trends* internal_default_instance() {
    return reinterpret_cast<const DocumentData_Trends*>(
               &_DocumentData_Trends_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    96;

  void UnsafeArenaSwap(DocumentData_Trends* other);
  void Swap(DocumentData_Trends* other);
  friend void swap(DocumentData_Trends& a, DocumentData_Trends& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_Trends* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_Trends* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_Trends& from);
  void MergeFrom(const DocumentData_Trends& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_Trends* other);
  protected:
  explicit DocumentData_Trends(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional int32 likes = 2;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 2;
  ::google::protobuf::int32 likes() const;
  void set_likes(::google::protobuf::int32 value);

  // optional int32 views = 3;
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 3;
  ::google::protobuf::int32 views() const;
  void set_views(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.Trends)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_likes();
  void clear_has_likes();
  void set_has_views();
  void clear_has_views();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::int32 likes_;
  ::google::protobuf::int32 views_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_GeoHits : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.GeoHits) */ {
 public:
  DocumentData_GeoHits();
  virtual ~DocumentData_GeoHits();

  DocumentData_GeoHits(const DocumentData_GeoHits& from);

  inline DocumentData_GeoHits& operator=(const DocumentData_GeoHits& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_GeoHits(DocumentData_GeoHits&& from) noexcept
    : DocumentData_GeoHits() {
    *this = ::std::move(from);
  }

  inline DocumentData_GeoHits& operator=(DocumentData_GeoHits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_GeoHits& default_instance();

  static inline const DocumentData_GeoHits* internal_default_instance() {
    return reinterpret_cast<const DocumentData_GeoHits*>(
               &_DocumentData_GeoHits_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    97;

  void UnsafeArenaSwap(DocumentData_GeoHits* other);
  void Swap(DocumentData_GeoHits* other);
  friend void swap(DocumentData_GeoHits& a, DocumentData_GeoHits& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_GeoHits* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_GeoHits* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_GeoHits& from);
  void MergeFrom(const DocumentData_GeoHits& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_GeoHits* other);
  protected:
  explicit DocumentData_GeoHits(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 geo = 1;
  bool has_geo() const;
  void clear_geo();
  static const int kGeoFieldNumber = 1;
  ::google::protobuf::uint32 geo() const;
  void set_geo(::google::protobuf::uint32 value);

  // required int32 hits = 2;
  bool has_hits() const;
  void clear_hits();
  static const int kHitsFieldNumber = 2;
  ::google::protobuf::int32 hits() const;
  void set_hits(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.GeoHits)
 private:
  void set_has_geo();
  void clear_has_geo();
  void set_has_hits();
  void clear_has_hits();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 geo_;
  ::google::protobuf::int32 hits_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_MediametricsFea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.MediametricsFea) */ {
 public:
  DocumentData_MediametricsFea();
  virtual ~DocumentData_MediametricsFea();

  DocumentData_MediametricsFea(const DocumentData_MediametricsFea& from);

  inline DocumentData_MediametricsFea& operator=(const DocumentData_MediametricsFea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_MediametricsFea(DocumentData_MediametricsFea&& from) noexcept
    : DocumentData_MediametricsFea() {
    *this = ::std::move(from);
  }

  inline DocumentData_MediametricsFea& operator=(DocumentData_MediametricsFea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_MediametricsFea& default_instance();

  static inline const DocumentData_MediametricsFea* internal_default_instance() {
    return reinterpret_cast<const DocumentData_MediametricsFea*>(
               &_DocumentData_MediametricsFea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98;

  void UnsafeArenaSwap(DocumentData_MediametricsFea* other);
  void Swap(DocumentData_MediametricsFea* other);
  friend void swap(DocumentData_MediametricsFea& a, DocumentData_MediametricsFea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_MediametricsFea* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_MediametricsFea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_MediametricsFea& from);
  void MergeFrom(const DocumentData_MediametricsFea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_MediametricsFea* other);
  protected:
  explicit DocumentData_MediametricsFea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.DocumentData.GeoHits geo_hits = 3;
  int geo_hits_size() const;
  void clear_geo_hits();
  static const int kGeoHitsFieldNumber = 3;
  const ::cosmo::pb::DocumentData_GeoHits& geo_hits(int index) const;
  ::cosmo::pb::DocumentData_GeoHits* mutable_geo_hits(int index);
  ::cosmo::pb::DocumentData_GeoHits* add_geo_hits();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_GeoHits >*
      mutable_geo_hits();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_GeoHits >&
      geo_hits() const;

  // repeated uint32 male_hits = 4;
  int male_hits_size() const;
  void clear_male_hits();
  static const int kMaleHitsFieldNumber = 4;
  ::google::protobuf::uint32 male_hits(int index) const;
  void set_male_hits(int index, ::google::protobuf::uint32 value);
  void add_male_hits(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      male_hits() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_male_hits();

  // repeated uint32 female_hits = 5;
  int female_hits_size() const;
  void clear_female_hits();
  static const int kFemaleHitsFieldNumber = 5;
  ::google::protobuf::uint32 female_hits(int index) const;
  void set_female_hits(int index, ::google::protobuf::uint32 value);
  void add_female_hits(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      female_hits() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_female_hits();

  // required int32 hits = 1;
  bool has_hits() const;
  void clear_hits();
  static const int kHitsFieldNumber = 1;
  ::google::protobuf::int32 hits() const;
  void set_hits(::google::protobuf::int32 value);

  // required uint32 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.MediametricsFea)
 private:
  void set_has_hits();
  void clear_has_hits();
  void set_has_version();
  void clear_has_version();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_GeoHits > geo_hits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > male_hits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > female_hits_;
  ::google::protobuf::int32 hits_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_Fetcher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.Fetcher) */ {
 public:
  DocumentData_Fetcher();
  virtual ~DocumentData_Fetcher();

  DocumentData_Fetcher(const DocumentData_Fetcher& from);

  inline DocumentData_Fetcher& operator=(const DocumentData_Fetcher& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_Fetcher(DocumentData_Fetcher&& from) noexcept
    : DocumentData_Fetcher() {
    *this = ::std::move(from);
  }

  inline DocumentData_Fetcher& operator=(DocumentData_Fetcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_Fetcher& default_instance();

  static inline const DocumentData_Fetcher* internal_default_instance() {
    return reinterpret_cast<const DocumentData_Fetcher*>(
               &_DocumentData_Fetcher_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    99;

  void UnsafeArenaSwap(DocumentData_Fetcher* other);
  void Swap(DocumentData_Fetcher* other);
  friend void swap(DocumentData_Fetcher& a, DocumentData_Fetcher& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_Fetcher* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_Fetcher* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_Fetcher& from);
  void MergeFrom(const DocumentData_Fetcher& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_Fetcher* other);
  protected:
  explicit DocumentData_Fetcher(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 fetch_timestamp = 1;
  bool has_fetch_timestamp() const;
  void clear_fetch_timestamp();
  static const int kFetchTimestampFieldNumber = 1;
  ::google::protobuf::int64 fetch_timestamp() const;
  void set_fetch_timestamp(::google::protobuf::int64 value);

  // optional uint32 region_id = 2;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 2;
  ::google::protobuf::uint32 region_id() const;
  void set_region_id(::google::protobuf::uint32 value);

  // optional bool has_title = 3;
  bool has_has_title() const;
  void clear_has_title();
  static const int kHasTitleFieldNumber = 3;
  bool has_title() const;
  void set_has_title(bool value);

  // optional bool has_img = 4;
  bool has_has_img() const;
  void clear_has_img();
  static const int kHasImgFieldNumber = 4;
  bool has_img() const;
  void set_has_img(bool value);

  // optional bool has_description = 5;
  bool has_has_description() const;
  void clear_has_description();
  static const int kHasDescriptionFieldNumber = 5;
  bool has_description() const;
  void set_has_description(bool value);

  // optional bool has_fulltext = 9;
  bool has_has_fulltext() const;
  void clear_has_fulltext();
  static const int kHasFulltextFieldNumber = 9;
  bool has_fulltext() const;
  void set_has_fulltext(bool value);

  // optional int64 last_fetch_timestamp = 6;
  bool has_last_fetch_timestamp() const;
  void clear_last_fetch_timestamp();
  static const int kLastFetchTimestampFieldNumber = 6;
  ::google::protobuf::int64 last_fetch_timestamp() const;
  void set_last_fetch_timestamp(::google::protobuf::int64 value);

  // optional int32 title_len = 7;
  bool has_title_len() const;
  void clear_title_len();
  static const int kTitleLenFieldNumber = 7;
  ::google::protobuf::int32 title_len() const;
  void set_title_len(::google::protobuf::int32 value);

  // optional int32 description_len = 8;
  bool has_description_len() const;
  void clear_description_len();
  static const int kDescriptionLenFieldNumber = 8;
  ::google::protobuf::int32 description_len() const;
  void set_description_len(::google::protobuf::int32 value);

  // optional bool has_video = 10;
  bool has_has_video() const;
  void clear_has_video();
  static const int kHasVideoFieldNumber = 10;
  bool has_video() const;
  void set_has_video(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.Fetcher)
 private:
  void set_has_fetch_timestamp();
  void clear_has_fetch_timestamp();
  void set_has_region_id();
  void clear_has_region_id();
  void set_has_has_title();
  void clear_has_has_title();
  void set_has_has_img();
  void clear_has_has_img();
  void set_has_has_description();
  void clear_has_has_description();
  void set_has_last_fetch_timestamp();
  void clear_has_last_fetch_timestamp();
  void set_has_title_len();
  void clear_has_title_len();
  void set_has_description_len();
  void clear_has_description_len();
  void set_has_has_fulltext();
  void clear_has_has_fulltext();
  void set_has_has_video();
  void clear_has_has_video();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 fetch_timestamp_;
  ::google::protobuf::uint32 region_id_;
  bool has_title_;
  bool has_img_;
  bool has_description_;
  bool has_fulltext_;
  ::google::protobuf::int64 last_fetch_timestamp_;
  ::google::protobuf::int32 title_len_;
  ::google::protobuf::int32 description_len_;
  bool has_video_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_FetcherFirstmeet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.FetcherFirstmeet) */ {
 public:
  DocumentData_FetcherFirstmeet();
  virtual ~DocumentData_FetcherFirstmeet();

  DocumentData_FetcherFirstmeet(const DocumentData_FetcherFirstmeet& from);

  inline DocumentData_FetcherFirstmeet& operator=(const DocumentData_FetcherFirstmeet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_FetcherFirstmeet(DocumentData_FetcherFirstmeet&& from) noexcept
    : DocumentData_FetcherFirstmeet() {
    *this = ::std::move(from);
  }

  inline DocumentData_FetcherFirstmeet& operator=(DocumentData_FetcherFirstmeet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_FetcherFirstmeet& default_instance();

  static inline const DocumentData_FetcherFirstmeet* internal_default_instance() {
    return reinterpret_cast<const DocumentData_FetcherFirstmeet*>(
               &_DocumentData_FetcherFirstmeet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    100;

  void UnsafeArenaSwap(DocumentData_FetcherFirstmeet* other);
  void Swap(DocumentData_FetcherFirstmeet* other);
  friend void swap(DocumentData_FetcherFirstmeet& a, DocumentData_FetcherFirstmeet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_FetcherFirstmeet* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_FetcherFirstmeet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_FetcherFirstmeet& from);
  void MergeFrom(const DocumentData_FetcherFirstmeet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_FetcherFirstmeet* other);
  protected:
  explicit DocumentData_FetcherFirstmeet(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 firstmeet = 1;
  bool has_firstmeet() const;
  void clear_firstmeet();
  static const int kFirstmeetFieldNumber = 1;
  ::google::protobuf::int64 firstmeet() const;
  void set_firstmeet(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.FetcherFirstmeet)
 private:
  void set_has_firstmeet();
  void clear_has_firstmeet();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 firstmeet_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_FetcherPubdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.FetcherPubdate) */ {
 public:
  DocumentData_FetcherPubdate();
  virtual ~DocumentData_FetcherPubdate();

  DocumentData_FetcherPubdate(const DocumentData_FetcherPubdate& from);

  inline DocumentData_FetcherPubdate& operator=(const DocumentData_FetcherPubdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_FetcherPubdate(DocumentData_FetcherPubdate&& from) noexcept
    : DocumentData_FetcherPubdate() {
    *this = ::std::move(from);
  }

  inline DocumentData_FetcherPubdate& operator=(DocumentData_FetcherPubdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_FetcherPubdate& default_instance();

  static inline const DocumentData_FetcherPubdate* internal_default_instance() {
    return reinterpret_cast<const DocumentData_FetcherPubdate*>(
               &_DocumentData_FetcherPubdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    101;

  void UnsafeArenaSwap(DocumentData_FetcherPubdate* other);
  void Swap(DocumentData_FetcherPubdate* other);
  friend void swap(DocumentData_FetcherPubdate& a, DocumentData_FetcherPubdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_FetcherPubdate* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_FetcherPubdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_FetcherPubdate& from);
  void MergeFrom(const DocumentData_FetcherPubdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_FetcherPubdate* other);
  protected:
  explicit DocumentData_FetcherPubdate(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pubdate = 1;
  bool has_pubdate() const;
  void clear_pubdate();
  static const int kPubdateFieldNumber = 1;
  ::google::protobuf::int64 pubdate() const;
  void set_pubdate(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.FetcherPubdate)
 private:
  void set_has_pubdate();
  void clear_has_pubdate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 pubdate_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_FetcherGeo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.FetcherGeo) */ {
 public:
  DocumentData_FetcherGeo();
  virtual ~DocumentData_FetcherGeo();

  DocumentData_FetcherGeo(const DocumentData_FetcherGeo& from);

  inline DocumentData_FetcherGeo& operator=(const DocumentData_FetcherGeo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_FetcherGeo(DocumentData_FetcherGeo&& from) noexcept
    : DocumentData_FetcherGeo() {
    *this = ::std::move(from);
  }

  inline DocumentData_FetcherGeo& operator=(DocumentData_FetcherGeo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_FetcherGeo& default_instance();

  static inline const DocumentData_FetcherGeo* internal_default_instance() {
    return reinterpret_cast<const DocumentData_FetcherGeo*>(
               &_DocumentData_FetcherGeo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    102;

  void UnsafeArenaSwap(DocumentData_FetcherGeo* other);
  void Swap(DocumentData_FetcherGeo* other);
  friend void swap(DocumentData_FetcherGeo& a, DocumentData_FetcherGeo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_FetcherGeo* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_FetcherGeo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_FetcherGeo& from);
  void MergeFrom(const DocumentData_FetcherGeo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_FetcherGeo* other);
  protected:
  explicit DocumentData_FetcherGeo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 region_id = 1;
  bool has_region_id() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint32 region_id() const;
  void set_region_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.FetcherGeo)
 private:
  void set_has_region_id();
  void clear_has_region_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 region_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_FetcherImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.FetcherImage) */ {
 public:
  DocumentData_FetcherImage();
  virtual ~DocumentData_FetcherImage();

  DocumentData_FetcherImage(const DocumentData_FetcherImage& from);

  inline DocumentData_FetcherImage& operator=(const DocumentData_FetcherImage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_FetcherImage(DocumentData_FetcherImage&& from) noexcept
    : DocumentData_FetcherImage() {
    *this = ::std::move(from);
  }

  inline DocumentData_FetcherImage& operator=(DocumentData_FetcherImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_FetcherImage& default_instance();

  static inline const DocumentData_FetcherImage* internal_default_instance() {
    return reinterpret_cast<const DocumentData_FetcherImage*>(
               &_DocumentData_FetcherImage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    103;

  void UnsafeArenaSwap(DocumentData_FetcherImage* other);
  void Swap(DocumentData_FetcherImage* other);
  friend void swap(DocumentData_FetcherImage& a, DocumentData_FetcherImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_FetcherImage* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_FetcherImage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_FetcherImage& from);
  void MergeFrom(const DocumentData_FetcherImage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_FetcherImage* other);
  protected:
  explicit DocumentData_FetcherImage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // required int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // required uint64 simhash = 3;
  bool has_simhash() const;
  void clear_simhash();
  static const int kSimhashFieldNumber = 3;
  ::google::protobuf::uint64 simhash() const;
  void set_simhash(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.FetcherImage)
 private:
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_simhash();
  void clear_has_simhash();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::uint64 simhash_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocState) */ {
 public:
  DocumentData_DocState();
  virtual ~DocumentData_DocState();

  DocumentData_DocState(const DocumentData_DocState& from);

  inline DocumentData_DocState& operator=(const DocumentData_DocState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocState(DocumentData_DocState&& from) noexcept
    : DocumentData_DocState() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocState& operator=(DocumentData_DocState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocState& default_instance();

  static inline const DocumentData_DocState* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocState*>(
               &_DocumentData_DocState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    104;

  void UnsafeArenaSwap(DocumentData_DocState* other);
  void Swap(DocumentData_DocState* other);
  friend void swap(DocumentData_DocState& a, DocumentData_DocState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocState* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocState& from);
  void MergeFrom(const DocumentData_DocState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocState* other);
  protected:
  explicit DocumentData_DocState(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool banned = 1;
  bool has_banned() const;
  void clear_banned();
  static const int kBannedFieldNumber = 1;
  bool banned() const;
  void set_banned(bool value);

  // required bool shadowed = 2;
  bool has_shadowed() const;
  void clear_shadowed();
  static const int kShadowedFieldNumber = 2;
  bool shadowed() const;
  void set_shadowed(bool value);

  // required bool disabled_in_channel = 3;
  bool has_disabled_in_channel() const;
  void clear_disabled_in_channel();
  static const int kDisabledInChannelFieldNumber = 3;
  bool disabled_in_channel() const;
  void set_disabled_in_channel(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocState)
 private:
  void set_has_banned();
  void clear_has_banned();
  void set_has_shadowed();
  void clear_has_shadowed();
  void set_has_disabled_in_channel();
  void clear_has_disabled_in_channel();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool banned_;
  bool shadowed_;
  bool disabled_in_channel_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_TopicPeriodStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.TopicPeriodStats) */ {
 public:
  DocumentData_TopicPeriodStats();
  virtual ~DocumentData_TopicPeriodStats();

  DocumentData_TopicPeriodStats(const DocumentData_TopicPeriodStats& from);

  inline DocumentData_TopicPeriodStats& operator=(const DocumentData_TopicPeriodStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_TopicPeriodStats(DocumentData_TopicPeriodStats&& from) noexcept
    : DocumentData_TopicPeriodStats() {
    *this = ::std::move(from);
  }

  inline DocumentData_TopicPeriodStats& operator=(DocumentData_TopicPeriodStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_TopicPeriodStats& default_instance();

  static inline const DocumentData_TopicPeriodStats* internal_default_instance() {
    return reinterpret_cast<const DocumentData_TopicPeriodStats*>(
               &_DocumentData_TopicPeriodStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    105;

  void UnsafeArenaSwap(DocumentData_TopicPeriodStats* other);
  void Swap(DocumentData_TopicPeriodStats* other);
  friend void swap(DocumentData_TopicPeriodStats& a, DocumentData_TopicPeriodStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_TopicPeriodStats* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_TopicPeriodStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_TopicPeriodStats& from);
  void MergeFrom(const DocumentData_TopicPeriodStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_TopicPeriodStats* other);
  protected:
  explicit DocumentData_TopicPeriodStats(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 all_likes = 1;
  bool has_all_likes() const;
  void clear_all_likes();
  static const int kAllLikesFieldNumber = 1;
  ::google::protobuf::int64 all_likes() const;
  void set_all_likes(::google::protobuf::int64 value);

  // optional int64 period_likes = 2;
  bool has_period_likes() const;
  void clear_period_likes();
  static const int kPeriodLikesFieldNumber = 2;
  ::google::protobuf::int64 period_likes() const;
  void set_period_likes(::google::protobuf::int64 value);

  // optional int64 period_clicks = 3;
  bool has_period_clicks() const;
  void clear_period_clicks();
  static const int kPeriodClicksFieldNumber = 3;
  ::google::protobuf::int64 period_clicks() const;
  void set_period_clicks(::google::protobuf::int64 value);

  // optional int64 period_reshares = 4;
  bool has_period_reshares() const;
  void clear_period_reshares();
  static const int kPeriodResharesFieldNumber = 4;
  ::google::protobuf::int64 period_reshares() const;
  void set_period_reshares(::google::protobuf::int64 value);

  // optional int64 period_comments = 5;
  bool has_period_comments() const;
  void clear_period_comments();
  static const int kPeriodCommentsFieldNumber = 5;
  ::google::protobuf::int64 period_comments() const;
  void set_period_comments(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.TopicPeriodStats)
 private:
  void set_has_all_likes();
  void clear_has_all_likes();
  void set_has_period_likes();
  void clear_has_period_likes();
  void set_has_period_clicks();
  void clear_has_period_clicks();
  void set_has_period_reshares();
  void clear_has_period_reshares();
  void set_has_period_comments();
  void clear_has_period_comments();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 all_likes_;
  ::google::protobuf::int64 period_likes_;
  ::google::protobuf::int64 period_clicks_;
  ::google::protobuf::int64 period_reshares_;
  ::google::protobuf::int64 period_comments_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_AppFilterStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.AppFilterStats) */ {
 public:
  DocumentData_AppFilterStats();
  virtual ~DocumentData_AppFilterStats();

  DocumentData_AppFilterStats(const DocumentData_AppFilterStats& from);

  inline DocumentData_AppFilterStats& operator=(const DocumentData_AppFilterStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_AppFilterStats(DocumentData_AppFilterStats&& from) noexcept
    : DocumentData_AppFilterStats() {
    *this = ::std::move(from);
  }

  inline DocumentData_AppFilterStats& operator=(DocumentData_AppFilterStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_AppFilterStats& default_instance();

  static inline const DocumentData_AppFilterStats* internal_default_instance() {
    return reinterpret_cast<const DocumentData_AppFilterStats*>(
               &_DocumentData_AppFilterStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    106;

  void UnsafeArenaSwap(DocumentData_AppFilterStats* other);
  void Swap(DocumentData_AppFilterStats* other);
  friend void swap(DocumentData_AppFilterStats& a, DocumentData_AppFilterStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_AppFilterStats* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_AppFilterStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_AppFilterStats& from);
  void MergeFrom(const DocumentData_AppFilterStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_AppFilterStats* other);
  protected:
  explicit DocumentData_AppFilterStats(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // required int32 shows = 2;
  bool has_shows() const;
  void clear_shows();
  static const int kShowsFieldNumber = 2;
  ::google::protobuf::int32 shows() const;
  void set_shows(::google::protobuf::int32 value);

  // required int32 clicks = 3;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 3;
  ::google::protobuf::int32 clicks() const;
  void set_clicks(::google::protobuf::int32 value);

  // optional int32 likes = 4;
  bool has_likes() const;
  void clear_likes();
  static const int kLikesFieldNumber = 4;
  ::google::protobuf::int32 likes() const;
  void set_likes(::google::protobuf::int32 value);

  // optional int32 shares = 5;
  bool has_shares() const;
  void clear_shares();
  static const int kSharesFieldNumber = 5;
  ::google::protobuf::int32 shares() const;
  void set_shares(::google::protobuf::int32 value);

  // optional int32 dislikes = 6;
  bool has_dislikes() const;
  void clear_dislikes();
  static const int kDislikesFieldNumber = 6;
  ::google::protobuf::int32 dislikes() const;
  void set_dislikes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.AppFilterStats)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_shows();
  void clear_has_shows();
  void set_has_clicks();
  void clear_has_clicks();
  void set_has_likes();
  void clear_has_likes();
  void set_has_shares();
  void clear_has_shares();
  void set_has_dislikes();
  void clear_has_dislikes();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::int32 shows_;
  ::google::protobuf::int32 clicks_;
  ::google::protobuf::int32 likes_;
  ::google::protobuf::int32 shares_;
  ::google::protobuf::int32 dislikes_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocumentEventStat_GeoEventStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat) */ {
 public:
  DocumentData_DocumentEventStat_GeoEventStat();
  virtual ~DocumentData_DocumentEventStat_GeoEventStat();

  DocumentData_DocumentEventStat_GeoEventStat(const DocumentData_DocumentEventStat_GeoEventStat& from);

  inline DocumentData_DocumentEventStat_GeoEventStat& operator=(const DocumentData_DocumentEventStat_GeoEventStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocumentEventStat_GeoEventStat(DocumentData_DocumentEventStat_GeoEventStat&& from) noexcept
    : DocumentData_DocumentEventStat_GeoEventStat() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocumentEventStat_GeoEventStat& operator=(DocumentData_DocumentEventStat_GeoEventStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocumentEventStat_GeoEventStat& default_instance();

  static inline const DocumentData_DocumentEventStat_GeoEventStat* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocumentEventStat_GeoEventStat*>(
               &_DocumentData_DocumentEventStat_GeoEventStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    107;

  void UnsafeArenaSwap(DocumentData_DocumentEventStat_GeoEventStat* other);
  void Swap(DocumentData_DocumentEventStat_GeoEventStat* other);
  friend void swap(DocumentData_DocumentEventStat_GeoEventStat& a, DocumentData_DocumentEventStat_GeoEventStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocumentEventStat_GeoEventStat* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocumentEventStat_GeoEventStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocumentEventStat_GeoEventStat& from);
  void MergeFrom(const DocumentData_DocumentEventStat_GeoEventStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocumentEventStat_GeoEventStat* other);
  protected:
  explicit DocumentData_DocumentEventStat_GeoEventStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 geo = 1;
  bool has_geo() const;
  void clear_geo();
  static const int kGeoFieldNumber = 1;
  ::google::protobuf::uint32 geo() const;
  void set_geo(::google::protobuf::uint32 value);

  // required uint32 events_count = 2;
  bool has_events_count() const;
  void clear_events_count();
  static const int kEventsCountFieldNumber = 2;
  ::google::protobuf::uint32 events_count() const;
  void set_events_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat)
 private:
  void set_has_geo();
  void clear_has_geo();
  void set_has_events_count();
  void clear_has_events_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 geo_;
  ::google::protobuf::uint32 events_count_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocumentEventStat_SocDemEventStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat) */ {
 public:
  DocumentData_DocumentEventStat_SocDemEventStat();
  virtual ~DocumentData_DocumentEventStat_SocDemEventStat();

  DocumentData_DocumentEventStat_SocDemEventStat(const DocumentData_DocumentEventStat_SocDemEventStat& from);

  inline DocumentData_DocumentEventStat_SocDemEventStat& operator=(const DocumentData_DocumentEventStat_SocDemEventStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocumentEventStat_SocDemEventStat(DocumentData_DocumentEventStat_SocDemEventStat&& from) noexcept
    : DocumentData_DocumentEventStat_SocDemEventStat() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocumentEventStat_SocDemEventStat& operator=(DocumentData_DocumentEventStat_SocDemEventStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocumentEventStat_SocDemEventStat& default_instance();

  static inline const DocumentData_DocumentEventStat_SocDemEventStat* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocumentEventStat_SocDemEventStat*>(
               &_DocumentData_DocumentEventStat_SocDemEventStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    108;

  void UnsafeArenaSwap(DocumentData_DocumentEventStat_SocDemEventStat* other);
  void Swap(DocumentData_DocumentEventStat_SocDemEventStat* other);
  friend void swap(DocumentData_DocumentEventStat_SocDemEventStat& a, DocumentData_DocumentEventStat_SocDemEventStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocumentEventStat_SocDemEventStat* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocumentEventStat_SocDemEventStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocumentEventStat_SocDemEventStat& from);
  void MergeFrom(const DocumentData_DocumentEventStat_SocDemEventStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocumentEventStat_SocDemEventStat* other);
  protected:
  explicit DocumentData_DocumentEventStat_SocDemEventStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 socdem_id = 1;
  bool has_socdem_id() const;
  void clear_socdem_id();
  static const int kSocdemIdFieldNumber = 1;
  ::google::protobuf::uint32 socdem_id() const;
  void set_socdem_id(::google::protobuf::uint32 value);

  // required uint32 events_count = 2;
  bool has_events_count() const;
  void clear_events_count();
  static const int kEventsCountFieldNumber = 2;
  ::google::protobuf::uint32 events_count() const;
  void set_events_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat)
 private:
  void set_has_socdem_id();
  void clear_has_socdem_id();
  void set_has_events_count();
  void clear_has_events_count();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 socdem_id_;
  ::google::protobuf::uint32 events_count_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocumentEventStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocumentEventStat) */ {
 public:
  DocumentData_DocumentEventStat();
  virtual ~DocumentData_DocumentEventStat();

  DocumentData_DocumentEventStat(const DocumentData_DocumentEventStat& from);

  inline DocumentData_DocumentEventStat& operator=(const DocumentData_DocumentEventStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocumentEventStat(DocumentData_DocumentEventStat&& from) noexcept
    : DocumentData_DocumentEventStat() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocumentEventStat& operator=(DocumentData_DocumentEventStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocumentEventStat& default_instance();

  static inline const DocumentData_DocumentEventStat* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocumentEventStat*>(
               &_DocumentData_DocumentEventStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    109;

  void UnsafeArenaSwap(DocumentData_DocumentEventStat* other);
  void Swap(DocumentData_DocumentEventStat* other);
  friend void swap(DocumentData_DocumentEventStat& a, DocumentData_DocumentEventStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocumentEventStat* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocumentEventStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocumentEventStat& from);
  void MergeFrom(const DocumentData_DocumentEventStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocumentEventStat* other);
  protected:
  explicit DocumentData_DocumentEventStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DocumentData_DocumentEventStat_GeoEventStat GeoEventStat;
  typedef DocumentData_DocumentEventStat_SocDemEventStat SocDemEventStat;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat geo_stat = 2;
  int geo_stat_size() const;
  void clear_geo_stat();
  static const int kGeoStatFieldNumber = 2;
  const ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat& geo_stat(int index) const;
  ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat* mutable_geo_stat(int index);
  ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat* add_geo_stat();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat >*
      mutable_geo_stat();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat >&
      geo_stat() const;

  // repeated .cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat soc_dem_stat = 3;
  int soc_dem_stat_size() const;
  void clear_soc_dem_stat();
  static const int kSocDemStatFieldNumber = 3;
  const ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat& soc_dem_stat(int index) const;
  ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat* mutable_soc_dem_stat(int index);
  ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat* add_soc_dem_stat();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat >*
      mutable_soc_dem_stat();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat >&
      soc_dem_stat() const;

  // required uint32 events_count = 1;
  bool has_events_count() const;
  void clear_events_count();
  static const int kEventsCountFieldNumber = 1;
  ::google::protobuf::uint32 events_count() const;
  void set_events_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocumentEventStat)
 private:
  void set_has_events_count();
  void clear_has_events_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat > geo_stat_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat > soc_dem_stat_;
  ::google::protobuf::uint32 events_count_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_TopicEventStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.TopicEventStat) */ {
 public:
  DocumentData_TopicEventStat();
  virtual ~DocumentData_TopicEventStat();

  DocumentData_TopicEventStat(const DocumentData_TopicEventStat& from);

  inline DocumentData_TopicEventStat& operator=(const DocumentData_TopicEventStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_TopicEventStat(DocumentData_TopicEventStat&& from) noexcept
    : DocumentData_TopicEventStat() {
    *this = ::std::move(from);
  }

  inline DocumentData_TopicEventStat& operator=(DocumentData_TopicEventStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_TopicEventStat& default_instance();

  static inline const DocumentData_TopicEventStat* internal_default_instance() {
    return reinterpret_cast<const DocumentData_TopicEventStat*>(
               &_DocumentData_TopicEventStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    110;

  void UnsafeArenaSwap(DocumentData_TopicEventStat* other);
  void Swap(DocumentData_TopicEventStat* other);
  friend void swap(DocumentData_TopicEventStat& a, DocumentData_TopicEventStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_TopicEventStat* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_TopicEventStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_TopicEventStat& from);
  void MergeFrom(const DocumentData_TopicEventStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_TopicEventStat* other);
  protected:
  explicit DocumentData_TopicEventStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 2;
  bool has_likes_stat() const;
  void clear_likes_stat();
  static const int kLikesStatFieldNumber = 2;
  private:
  void _slow_mutable_likes_stat();
  void _slow_set_allocated_likes_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** likes_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_likes_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& likes_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_likes_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_likes_stat();
  void set_allocated_likes_stat(::cosmo::pb::DocumentData_DocumentEventStat* likes_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_likes_stat();
  void unsafe_arena_set_allocated_likes_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* likes_stat);

  // optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 3;
  bool has_clicks_stat() const;
  void clear_clicks_stat();
  static const int kClicksStatFieldNumber = 3;
  private:
  void _slow_mutable_clicks_stat();
  void _slow_set_allocated_clicks_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** clicks_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_clicks_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& clicks_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_clicks_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_clicks_stat();
  void set_allocated_clicks_stat(::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_clicks_stat();
  void unsafe_arena_set_allocated_clicks_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat);

  // optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 4;
  bool has_reshares_stat() const;
  void clear_reshares_stat();
  static const int kResharesStatFieldNumber = 4;
  private:
  void _slow_mutable_reshares_stat();
  void _slow_set_allocated_reshares_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** reshares_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_reshares_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& reshares_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_reshares_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_reshares_stat();
  void set_allocated_reshares_stat(::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_reshares_stat();
  void unsafe_arena_set_allocated_reshares_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat);

  // optional .cosmo.pb.DocumentData.DocumentEventStat comments_stat = 5;
  bool has_comments_stat() const;
  void clear_comments_stat();
  static const int kCommentsStatFieldNumber = 5;
  private:
  void _slow_mutable_comments_stat();
  void _slow_set_allocated_comments_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** comments_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_comments_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& comments_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_comments_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_comments_stat();
  void set_allocated_comments_stat(::cosmo::pb::DocumentData_DocumentEventStat* comments_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_comments_stat();
  void unsafe_arena_set_allocated_comments_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* comments_stat);

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.TopicEventStat)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_likes_stat();
  void clear_has_likes_stat();
  void set_has_clicks_stat();
  void clear_has_clicks_stat();
  void set_has_reshares_stat();
  void clear_has_reshares_stat();
  void set_has_comments_stat();
  void clear_has_comments_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::DocumentData_DocumentEventStat* likes_stat_;
  ::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat_;
  ::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat_;
  ::cosmo::pb::DocumentData_DocumentEventStat* comments_stat_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocumentLocationStat_Stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocumentLocationStat.Stat) */ {
 public:
  DocumentData_DocumentLocationStat_Stat();
  virtual ~DocumentData_DocumentLocationStat_Stat();

  DocumentData_DocumentLocationStat_Stat(const DocumentData_DocumentLocationStat_Stat& from);

  inline DocumentData_DocumentLocationStat_Stat& operator=(const DocumentData_DocumentLocationStat_Stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocumentLocationStat_Stat(DocumentData_DocumentLocationStat_Stat&& from) noexcept
    : DocumentData_DocumentLocationStat_Stat() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocumentLocationStat_Stat& operator=(DocumentData_DocumentLocationStat_Stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocumentLocationStat_Stat& default_instance();

  static inline const DocumentData_DocumentLocationStat_Stat* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocumentLocationStat_Stat*>(
               &_DocumentData_DocumentLocationStat_Stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    111;

  void UnsafeArenaSwap(DocumentData_DocumentLocationStat_Stat* other);
  void Swap(DocumentData_DocumentLocationStat_Stat* other);
  friend void swap(DocumentData_DocumentLocationStat_Stat& a, DocumentData_DocumentLocationStat_Stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocumentLocationStat_Stat* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocumentLocationStat_Stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocumentLocationStat_Stat& from);
  void MergeFrom(const DocumentData_DocumentLocationStat_Stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocumentLocationStat_Stat* other);
  protected:
  explicit DocumentData_DocumentLocationStat_Stat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.DocumentData.DocumentEventStat shows_stat = 1;
  bool has_shows_stat() const;
  void clear_shows_stat();
  static const int kShowsStatFieldNumber = 1;
  private:
  void _slow_mutable_shows_stat();
  void _slow_set_allocated_shows_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** shows_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_shows_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& shows_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_shows_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_shows_stat();
  void set_allocated_shows_stat(::cosmo::pb::DocumentData_DocumentEventStat* shows_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_shows_stat();
  void unsafe_arena_set_allocated_shows_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* shows_stat);

  // optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 2;
  bool has_clicks_stat() const;
  void clear_clicks_stat();
  static const int kClicksStatFieldNumber = 2;
  private:
  void _slow_mutable_clicks_stat();
  void _slow_set_allocated_clicks_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** clicks_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_clicks_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& clicks_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_clicks_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_clicks_stat();
  void set_allocated_clicks_stat(::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_clicks_stat();
  void unsafe_arena_set_allocated_clicks_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat);

  // optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 3;
  bool has_likes_stat() const;
  void clear_likes_stat();
  static const int kLikesStatFieldNumber = 3;
  private:
  void _slow_mutable_likes_stat();
  void _slow_set_allocated_likes_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** likes_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_likes_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& likes_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_likes_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_likes_stat();
  void set_allocated_likes_stat(::cosmo::pb::DocumentData_DocumentEventStat* likes_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_likes_stat();
  void unsafe_arena_set_allocated_likes_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* likes_stat);

  // optional .cosmo.pb.DocumentData.DocumentEventStat dislikes_stat = 4;
  bool has_dislikes_stat() const;
  void clear_dislikes_stat();
  static const int kDislikesStatFieldNumber = 4;
  private:
  void _slow_mutable_dislikes_stat();
  void _slow_set_allocated_dislikes_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** dislikes_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_dislikes_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& dislikes_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_dislikes_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_dislikes_stat();
  void set_allocated_dislikes_stat(::cosmo::pb::DocumentData_DocumentEventStat* dislikes_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_dislikes_stat();
  void unsafe_arena_set_allocated_dislikes_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* dislikes_stat);

  // optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 5;
  bool has_reshares_stat() const;
  void clear_reshares_stat();
  static const int kResharesStatFieldNumber = 5;
  private:
  void _slow_mutable_reshares_stat();
  void _slow_set_allocated_reshares_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** reshares_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_reshares_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& reshares_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_reshares_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_reshares_stat();
  void set_allocated_reshares_stat(::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_reshares_stat();
  void unsafe_arena_set_allocated_reshares_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat);

  // optional .cosmo.pb.DocumentData.DocumentEventStat unlikes_stat = 6;
  bool has_unlikes_stat() const;
  void clear_unlikes_stat();
  static const int kUnlikesStatFieldNumber = 6;
  private:
  void _slow_mutable_unlikes_stat();
  void _slow_set_allocated_unlikes_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** unlikes_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_unlikes_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& unlikes_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_unlikes_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_unlikes_stat();
  void set_allocated_unlikes_stat(::cosmo::pb::DocumentData_DocumentEventStat* unlikes_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_unlikes_stat();
  void unsafe_arena_set_allocated_unlikes_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* unlikes_stat);

  // optional .cosmo.pb.DocumentData.DocumentEventStat undislikes_stat = 7;
  bool has_undislikes_stat() const;
  void clear_undislikes_stat();
  static const int kUndislikesStatFieldNumber = 7;
  private:
  void _slow_mutable_undislikes_stat();
  void _slow_set_allocated_undislikes_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentEventStat** undislikes_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* _slow_release_undislikes_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentEventStat& undislikes_stat() const;
  ::cosmo::pb::DocumentData_DocumentEventStat* mutable_undislikes_stat();
  ::cosmo::pb::DocumentData_DocumentEventStat* release_undislikes_stat();
  void set_allocated_undislikes_stat(::cosmo::pb::DocumentData_DocumentEventStat* undislikes_stat);
  ::cosmo::pb::DocumentData_DocumentEventStat* unsafe_arena_release_undislikes_stat();
  void unsafe_arena_set_allocated_undislikes_stat(
      ::cosmo::pb::DocumentData_DocumentEventStat* undislikes_stat);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocumentLocationStat.Stat)
 private:
  void set_has_shows_stat();
  void clear_has_shows_stat();
  void set_has_clicks_stat();
  void clear_has_clicks_stat();
  void set_has_likes_stat();
  void clear_has_likes_stat();
  void set_has_dislikes_stat();
  void clear_has_dislikes_stat();
  void set_has_reshares_stat();
  void clear_has_reshares_stat();
  void set_has_unlikes_stat();
  void clear_has_unlikes_stat();
  void set_has_undislikes_stat();
  void clear_has_undislikes_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::DocumentData_DocumentEventStat* shows_stat_;
  ::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat_;
  ::cosmo::pb::DocumentData_DocumentEventStat* likes_stat_;
  ::cosmo::pb::DocumentData_DocumentEventStat* dislikes_stat_;
  ::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat_;
  ::cosmo::pb::DocumentData_DocumentEventStat* unlikes_stat_;
  ::cosmo::pb::DocumentData_DocumentEventStat* undislikes_stat_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocumentLocationStat_LocationStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat) */ {
 public:
  DocumentData_DocumentLocationStat_LocationStat();
  virtual ~DocumentData_DocumentLocationStat_LocationStat();

  DocumentData_DocumentLocationStat_LocationStat(const DocumentData_DocumentLocationStat_LocationStat& from);

  inline DocumentData_DocumentLocationStat_LocationStat& operator=(const DocumentData_DocumentLocationStat_LocationStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocumentLocationStat_LocationStat(DocumentData_DocumentLocationStat_LocationStat&& from) noexcept
    : DocumentData_DocumentLocationStat_LocationStat() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocumentLocationStat_LocationStat& operator=(DocumentData_DocumentLocationStat_LocationStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocumentLocationStat_LocationStat& default_instance();

  static inline const DocumentData_DocumentLocationStat_LocationStat* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocumentLocationStat_LocationStat*>(
               &_DocumentData_DocumentLocationStat_LocationStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    112;

  void UnsafeArenaSwap(DocumentData_DocumentLocationStat_LocationStat* other);
  void Swap(DocumentData_DocumentLocationStat_LocationStat* other);
  friend void swap(DocumentData_DocumentLocationStat_LocationStat& a, DocumentData_DocumentLocationStat_LocationStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocumentLocationStat_LocationStat* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocumentLocationStat_LocationStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocumentLocationStat_LocationStat& from);
  void MergeFrom(const DocumentData_DocumentLocationStat_LocationStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocumentLocationStat_LocationStat* other);
  protected:
  explicit DocumentData_DocumentLocationStat_LocationStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);
  ::std::string* unsafe_arena_release_location();
  void unsafe_arena_set_allocated_location(
      ::std::string* location);

  // optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat stat = 2;
  bool has_stat() const;
  void clear_stat();
  static const int kStatFieldNumber = 2;
  private:
  void _slow_mutable_stat();
  void _slow_set_allocated_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat_Stat** stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* _slow_release_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat& stat() const;
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* mutable_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* release_stat();
  void set_allocated_stat(::cosmo::pb::DocumentData_DocumentLocationStat_Stat* stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* unsafe_arena_release_stat();
  void unsafe_arena_set_allocated_stat(
      ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* stat);

  // optional uint64 last_event_ts = 3;
  bool has_last_event_ts() const;
  void clear_last_event_ts();
  static const int kLastEventTsFieldNumber = 3;
  ::google::protobuf::uint64 last_event_ts() const;
  void set_last_event_ts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat)
 private:
  void set_has_location();
  void clear_has_location();
  void set_has_stat();
  void clear_has_stat();
  void set_has_last_event_ts();
  void clear_has_last_event_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* stat_;
  ::google::protobuf::uint64 last_event_ts_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocumentLocationStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocumentLocationStat) */ {
 public:
  DocumentData_DocumentLocationStat();
  virtual ~DocumentData_DocumentLocationStat();

  DocumentData_DocumentLocationStat(const DocumentData_DocumentLocationStat& from);

  inline DocumentData_DocumentLocationStat& operator=(const DocumentData_DocumentLocationStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocumentLocationStat(DocumentData_DocumentLocationStat&& from) noexcept
    : DocumentData_DocumentLocationStat() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocumentLocationStat& operator=(DocumentData_DocumentLocationStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocumentLocationStat& default_instance();

  static inline const DocumentData_DocumentLocationStat* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocumentLocationStat*>(
               &_DocumentData_DocumentLocationStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    113;

  void UnsafeArenaSwap(DocumentData_DocumentLocationStat* other);
  void Swap(DocumentData_DocumentLocationStat* other);
  friend void swap(DocumentData_DocumentLocationStat& a, DocumentData_DocumentLocationStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocumentLocationStat* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocumentLocationStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocumentLocationStat& from);
  void MergeFrom(const DocumentData_DocumentLocationStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocumentLocationStat* other);
  protected:
  explicit DocumentData_DocumentLocationStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DocumentData_DocumentLocationStat_Stat Stat;
  typedef DocumentData_DocumentLocationStat_LocationStat LocationStat;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.DocumentData.DocumentLocationStat.LocationStat stat_by_location = 2;
  int stat_by_location_size() const;
  void clear_stat_by_location();
  static const int kStatByLocationFieldNumber = 2;
  const ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat& stat_by_location(int index) const;
  ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat* mutable_stat_by_location(int index);
  ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat* add_stat_by_location();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat >*
      mutable_stat_by_location();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat >&
      stat_by_location() const;

  // optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat summary_stat = 3;
  bool has_summary_stat() const;
  void clear_summary_stat();
  static const int kSummaryStatFieldNumber = 3;
  private:
  void _slow_mutable_summary_stat();
  void _slow_set_allocated_summary_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat_Stat** summary_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* _slow_release_summary_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat& summary_stat() const;
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* mutable_summary_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* release_summary_stat();
  void set_allocated_summary_stat(::cosmo::pb::DocumentData_DocumentLocationStat_Stat* summary_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* unsafe_arena_release_summary_stat();
  void unsafe_arena_set_allocated_summary_stat(
      ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* summary_stat);

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocumentLocationStat)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_summary_stat();
  void clear_has_summary_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat > stat_by_location_;
  ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* summary_stat_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocumentMutualStat_Stat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocumentMutualStat.Stat) */ {
 public:
  DocumentData_DocumentMutualStat_Stat();
  virtual ~DocumentData_DocumentMutualStat_Stat();

  DocumentData_DocumentMutualStat_Stat(const DocumentData_DocumentMutualStat_Stat& from);

  inline DocumentData_DocumentMutualStat_Stat& operator=(const DocumentData_DocumentMutualStat_Stat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocumentMutualStat_Stat(DocumentData_DocumentMutualStat_Stat&& from) noexcept
    : DocumentData_DocumentMutualStat_Stat() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocumentMutualStat_Stat& operator=(DocumentData_DocumentMutualStat_Stat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocumentMutualStat_Stat& default_instance();

  static inline const DocumentData_DocumentMutualStat_Stat* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocumentMutualStat_Stat*>(
               &_DocumentData_DocumentMutualStat_Stat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    114;

  void UnsafeArenaSwap(DocumentData_DocumentMutualStat_Stat* other);
  void Swap(DocumentData_DocumentMutualStat_Stat* other);
  friend void swap(DocumentData_DocumentMutualStat_Stat& a, DocumentData_DocumentMutualStat_Stat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocumentMutualStat_Stat* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocumentMutualStat_Stat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocumentMutualStat_Stat& from);
  void MergeFrom(const DocumentData_DocumentMutualStat_Stat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocumentMutualStat_Stat* other);
  protected:
  explicit DocumentData_DocumentMutualStat_Stat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 source_id = 6;
  int source_id_size() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 6;
  ::google::protobuf::int64 source_id(int index) const;
  void set_source_id(int index, ::google::protobuf::int64 value);
  void add_source_id(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      source_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_source_id();

  // required int64 doc_id = 1;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // optional float clicks = 2;
  bool has_clicks() const;
  void clear_clicks();
  static const int kClicksFieldNumber = 2;
  float clicks() const;
  void set_clicks(float value);

  // optional float views = 3;
  bool has_views() const;
  void clear_views();
  static const int kViewsFieldNumber = 3;
  float views() const;
  void set_views(float value);

  // optional float visits = 4;
  bool has_visits() const;
  void clear_visits();
  static const int kVisitsFieldNumber = 4;
  float visits() const;
  void set_visits(float value);

  // optional float total_visits = 5;
  bool has_total_visits() const;
  void clear_total_visits();
  static const int kTotalVisitsFieldNumber = 5;
  float total_visits() const;
  void set_total_visits(float value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocumentMutualStat.Stat)
 private:
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_clicks();
  void clear_has_clicks();
  void set_has_views();
  void clear_has_views();
  void set_has_visits();
  void clear_has_visits();
  void set_has_total_visits();
  void clear_has_total_visits();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > source_id_;
  ::google::protobuf::int64 doc_id_;
  float clicks_;
  float views_;
  float visits_;
  float total_visits_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocumentMutualStat_LocationStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat) */ {
 public:
  DocumentData_DocumentMutualStat_LocationStat();
  virtual ~DocumentData_DocumentMutualStat_LocationStat();

  DocumentData_DocumentMutualStat_LocationStat(const DocumentData_DocumentMutualStat_LocationStat& from);

  inline DocumentData_DocumentMutualStat_LocationStat& operator=(const DocumentData_DocumentMutualStat_LocationStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocumentMutualStat_LocationStat(DocumentData_DocumentMutualStat_LocationStat&& from) noexcept
    : DocumentData_DocumentMutualStat_LocationStat() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocumentMutualStat_LocationStat& operator=(DocumentData_DocumentMutualStat_LocationStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocumentMutualStat_LocationStat& default_instance();

  static inline const DocumentData_DocumentMutualStat_LocationStat* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocumentMutualStat_LocationStat*>(
               &_DocumentData_DocumentMutualStat_LocationStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    115;

  void UnsafeArenaSwap(DocumentData_DocumentMutualStat_LocationStat* other);
  void Swap(DocumentData_DocumentMutualStat_LocationStat* other);
  friend void swap(DocumentData_DocumentMutualStat_LocationStat& a, DocumentData_DocumentMutualStat_LocationStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocumentMutualStat_LocationStat* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocumentMutualStat_LocationStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocumentMutualStat_LocationStat& from);
  void MergeFrom(const DocumentData_DocumentMutualStat_LocationStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocumentMutualStat_LocationStat* other);
  protected:
  explicit DocumentData_DocumentMutualStat_LocationStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
  int doc_mutual_stat_size() const;
  void clear_doc_mutual_stat();
  static const int kDocMutualStatFieldNumber = 2;
  const ::cosmo::pb::DocumentData_DocumentMutualStat_Stat& doc_mutual_stat(int index) const;
  ::cosmo::pb::DocumentData_DocumentMutualStat_Stat* mutable_doc_mutual_stat(int index);
  ::cosmo::pb::DocumentData_DocumentMutualStat_Stat* add_doc_mutual_stat();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >*
      mutable_doc_mutual_stat();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >&
      doc_mutual_stat() const;

  // required string location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);
  ::std::string* unsafe_arena_release_location();
  void unsafe_arena_set_allocated_location(
      ::std::string* location);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat)
 private:
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat > doc_mutual_stat_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocumentMutualStat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocumentMutualStat) */ {
 public:
  DocumentData_DocumentMutualStat();
  virtual ~DocumentData_DocumentMutualStat();

  DocumentData_DocumentMutualStat(const DocumentData_DocumentMutualStat& from);

  inline DocumentData_DocumentMutualStat& operator=(const DocumentData_DocumentMutualStat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocumentMutualStat(DocumentData_DocumentMutualStat&& from) noexcept
    : DocumentData_DocumentMutualStat() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocumentMutualStat& operator=(DocumentData_DocumentMutualStat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocumentMutualStat& default_instance();

  static inline const DocumentData_DocumentMutualStat* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocumentMutualStat*>(
               &_DocumentData_DocumentMutualStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    116;

  void UnsafeArenaSwap(DocumentData_DocumentMutualStat* other);
  void Swap(DocumentData_DocumentMutualStat* other);
  friend void swap(DocumentData_DocumentMutualStat& a, DocumentData_DocumentMutualStat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocumentMutualStat* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocumentMutualStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocumentMutualStat& from);
  void MergeFrom(const DocumentData_DocumentMutualStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocumentMutualStat* other);
  protected:
  explicit DocumentData_DocumentMutualStat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DocumentData_DocumentMutualStat_Stat Stat;
  typedef DocumentData_DocumentMutualStat_LocationStat LocationStat;

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
  int doc_mutual_stat_size() const;
  void clear_doc_mutual_stat();
  static const int kDocMutualStatFieldNumber = 2;
  const ::cosmo::pb::DocumentData_DocumentMutualStat_Stat& doc_mutual_stat(int index) const;
  ::cosmo::pb::DocumentData_DocumentMutualStat_Stat* mutable_doc_mutual_stat(int index);
  ::cosmo::pb::DocumentData_DocumentMutualStat_Stat* add_doc_mutual_stat();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >*
      mutable_doc_mutual_stat();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >&
      doc_mutual_stat() const;

  // repeated .cosmo.pb.DocumentData.DocumentMutualStat.LocationStat loc_doc_mutual_stat = 3;
  int loc_doc_mutual_stat_size() const;
  void clear_loc_doc_mutual_stat();
  static const int kLocDocMutualStatFieldNumber = 3;
  const ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat& loc_doc_mutual_stat(int index) const;
  ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat* mutable_loc_doc_mutual_stat(int index);
  ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat* add_loc_doc_mutual_stat();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat >*
      mutable_loc_doc_mutual_stat();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat >&
      loc_doc_mutual_stat() const;

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocumentMutualStat)
 private:
  void set_has_version();
  void clear_has_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat > doc_mutual_stat_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat > loc_doc_mutual_stat_;
  ::google::protobuf::uint32 version_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_ContentVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.ContentVector) */ {
 public:
  DocumentData_ContentVector();
  virtual ~DocumentData_ContentVector();

  DocumentData_ContentVector(const DocumentData_ContentVector& from);

  inline DocumentData_ContentVector& operator=(const DocumentData_ContentVector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_ContentVector(DocumentData_ContentVector&& from) noexcept
    : DocumentData_ContentVector() {
    *this = ::std::move(from);
  }

  inline DocumentData_ContentVector& operator=(DocumentData_ContentVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_ContentVector& default_instance();

  static inline const DocumentData_ContentVector* internal_default_instance() {
    return reinterpret_cast<const DocumentData_ContentVector*>(
               &_DocumentData_ContentVector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    117;

  void UnsafeArenaSwap(DocumentData_ContentVector* other);
  void Swap(DocumentData_ContentVector* other);
  friend void swap(DocumentData_ContentVector& a, DocumentData_ContentVector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_ContentVector* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_ContentVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_ContentVector& from);
  void MergeFrom(const DocumentData_ContentVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_ContentVector* other);
  protected:
  explicit DocumentData_ContentVector(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float vector = 2;
  int vector_size() const;
  void clear_vector();
  static const int kVectorFieldNumber = 2;
  float vector(int index) const;
  void set_vector(int index, float value);
  void add_vector(float value);
  const ::google::protobuf::RepeatedField< float >&
      vector() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_vector();

  // required string label = 1;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);
  ::std::string* unsafe_arena_release_label();
  void unsafe_arena_set_allocated_label(
      ::std::string* label);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.ContentVector)
 private:
  void set_has_label();
  void clear_has_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > vector_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_TitleContentFea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.TitleContentFea) */ {
 public:
  DocumentData_TitleContentFea();
  virtual ~DocumentData_TitleContentFea();

  DocumentData_TitleContentFea(const DocumentData_TitleContentFea& from);

  inline DocumentData_TitleContentFea& operator=(const DocumentData_TitleContentFea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_TitleContentFea(DocumentData_TitleContentFea&& from) noexcept
    : DocumentData_TitleContentFea() {
    *this = ::std::move(from);
  }

  inline DocumentData_TitleContentFea& operator=(DocumentData_TitleContentFea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_TitleContentFea& default_instance();

  static inline const DocumentData_TitleContentFea* internal_default_instance() {
    return reinterpret_cast<const DocumentData_TitleContentFea*>(
               &_DocumentData_TitleContentFea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    118;

  void UnsafeArenaSwap(DocumentData_TitleContentFea* other);
  void Swap(DocumentData_TitleContentFea* other);
  friend void swap(DocumentData_TitleContentFea& a, DocumentData_TitleContentFea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_TitleContentFea* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_TitleContentFea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_TitleContentFea& from);
  void MergeFrom(const DocumentData_TitleContentFea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_TitleContentFea* other);
  protected:
  explicit DocumentData_TitleContentFea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.DocumentData.ContentVector content_vectors = 1;
  int content_vectors_size() const;
  void clear_content_vectors();
  static const int kContentVectorsFieldNumber = 1;
  const ::cosmo::pb::DocumentData_ContentVector& content_vectors(int index) const;
  ::cosmo::pb::DocumentData_ContentVector* mutable_content_vectors(int index);
  ::cosmo::pb::DocumentData_ContentVector* add_content_vectors();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_ContentVector >*
      mutable_content_vectors();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_ContentVector >&
      content_vectors() const;

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.TitleContentFea)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_ContentVector > content_vectors_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_ContentPornFea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.ContentPornFea) */ {
 public:
  DocumentData_ContentPornFea();
  virtual ~DocumentData_ContentPornFea();

  DocumentData_ContentPornFea(const DocumentData_ContentPornFea& from);

  inline DocumentData_ContentPornFea& operator=(const DocumentData_ContentPornFea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_ContentPornFea(DocumentData_ContentPornFea&& from) noexcept
    : DocumentData_ContentPornFea() {
    *this = ::std::move(from);
  }

  inline DocumentData_ContentPornFea& operator=(DocumentData_ContentPornFea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_ContentPornFea& default_instance();

  static inline const DocumentData_ContentPornFea* internal_default_instance() {
    return reinterpret_cast<const DocumentData_ContentPornFea*>(
               &_DocumentData_ContentPornFea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    119;

  void UnsafeArenaSwap(DocumentData_ContentPornFea* other);
  void Swap(DocumentData_ContentPornFea* other);
  friend void swap(DocumentData_ContentPornFea& a, DocumentData_ContentPornFea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_ContentPornFea* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_ContentPornFea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_ContentPornFea& from);
  void MergeFrom(const DocumentData_ContentPornFea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_ContentPornFea* other);
  protected:
  explicit DocumentData_ContentPornFea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float weight = 1;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 1;
  float weight() const;
  void set_weight(float value);

  // optional bool bad_content = 2;
  bool has_bad_content() const;
  void clear_bad_content();
  static const int kBadContentFieldNumber = 2;
  bool bad_content() const;
  void set_bad_content(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.ContentPornFea)
 private:
  void set_has_weight();
  void clear_has_weight();
  void set_has_bad_content();
  void clear_has_bad_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float weight_;
  bool bad_content_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_ImagePornFea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.ImagePornFea) */ {
 public:
  DocumentData_ImagePornFea();
  virtual ~DocumentData_ImagePornFea();

  DocumentData_ImagePornFea(const DocumentData_ImagePornFea& from);

  inline DocumentData_ImagePornFea& operator=(const DocumentData_ImagePornFea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_ImagePornFea(DocumentData_ImagePornFea&& from) noexcept
    : DocumentData_ImagePornFea() {
    *this = ::std::move(from);
  }

  inline DocumentData_ImagePornFea& operator=(DocumentData_ImagePornFea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_ImagePornFea& default_instance();

  static inline const DocumentData_ImagePornFea* internal_default_instance() {
    return reinterpret_cast<const DocumentData_ImagePornFea*>(
               &_DocumentData_ImagePornFea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    120;

  void UnsafeArenaSwap(DocumentData_ImagePornFea* other);
  void Swap(DocumentData_ImagePornFea* other);
  friend void swap(DocumentData_ImagePornFea& a, DocumentData_ImagePornFea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_ImagePornFea* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_ImagePornFea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_ImagePornFea& from);
  void MergeFrom(const DocumentData_ImagePornFea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_ImagePornFea* other);
  protected:
  explicit DocumentData_ImagePornFea(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float weight = 1;
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 1;
  float weight() const;
  void set_weight(float value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.ImagePornFea)
 private:
  void set_has_weight();
  void clear_has_weight();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float weight_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_ContentThemes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.ContentThemes) */ {
 public:
  DocumentData_ContentThemes();
  virtual ~DocumentData_ContentThemes();

  DocumentData_ContentThemes(const DocumentData_ContentThemes& from);

  inline DocumentData_ContentThemes& operator=(const DocumentData_ContentThemes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_ContentThemes(DocumentData_ContentThemes&& from) noexcept
    : DocumentData_ContentThemes() {
    *this = ::std::move(from);
  }

  inline DocumentData_ContentThemes& operator=(DocumentData_ContentThemes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_ContentThemes& default_instance();

  static inline const DocumentData_ContentThemes* internal_default_instance() {
    return reinterpret_cast<const DocumentData_ContentThemes*>(
               &_DocumentData_ContentThemes_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    121;

  void UnsafeArenaSwap(DocumentData_ContentThemes* other);
  void Swap(DocumentData_ContentThemes* other);
  friend void swap(DocumentData_ContentThemes& a, DocumentData_ContentThemes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_ContentThemes* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_ContentThemes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_ContentThemes& from);
  void MergeFrom(const DocumentData_ContentThemes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_ContentThemes* other);
  protected:
  explicit DocumentData_ContentThemes(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float themes_vector = 1;
  int themes_vector_size() const;
  void clear_themes_vector();
  static const int kThemesVectorFieldNumber = 1;
  float themes_vector(int index) const;
  void set_themes_vector(int index, float value);
  void add_themes_vector(float value);
  const ::google::protobuf::RepeatedField< float >&
      themes_vector() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_themes_vector();

  // optional bool bad_content = 2;
  bool has_bad_content() const;
  void clear_bad_content();
  static const int kBadContentFieldNumber = 2;
  bool bad_content() const;
  void set_bad_content(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.ContentThemes)
 private:
  void set_has_bad_content();
  void clear_has_bad_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > themes_vector_;
  bool bad_content_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_StoryClusterId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.StoryClusterId) */ {
 public:
  DocumentData_StoryClusterId();
  virtual ~DocumentData_StoryClusterId();

  DocumentData_StoryClusterId(const DocumentData_StoryClusterId& from);

  inline DocumentData_StoryClusterId& operator=(const DocumentData_StoryClusterId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_StoryClusterId(DocumentData_StoryClusterId&& from) noexcept
    : DocumentData_StoryClusterId() {
    *this = ::std::move(from);
  }

  inline DocumentData_StoryClusterId& operator=(DocumentData_StoryClusterId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_StoryClusterId& default_instance();

  static inline const DocumentData_StoryClusterId* internal_default_instance() {
    return reinterpret_cast<const DocumentData_StoryClusterId*>(
               &_DocumentData_StoryClusterId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    122;

  void UnsafeArenaSwap(DocumentData_StoryClusterId* other);
  void Swap(DocumentData_StoryClusterId* other);
  friend void swap(DocumentData_StoryClusterId& a, DocumentData_StoryClusterId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_StoryClusterId* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_StoryClusterId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_StoryClusterId& from);
  void MergeFrom(const DocumentData_StoryClusterId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_StoryClusterId* other);
  protected:
  explicit DocumentData_StoryClusterId(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 cluster_id = 2;
  bool has_cluster_id() const;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 2;
  ::google::protobuf::uint32 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.StoryClusterId)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_cluster_id();
  void clear_has_cluster_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 cluster_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_NewsTagsData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.NewsTagsData) */ {
 public:
  DocumentData_NewsTagsData();
  virtual ~DocumentData_NewsTagsData();

  DocumentData_NewsTagsData(const DocumentData_NewsTagsData& from);

  inline DocumentData_NewsTagsData& operator=(const DocumentData_NewsTagsData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_NewsTagsData(DocumentData_NewsTagsData&& from) noexcept
    : DocumentData_NewsTagsData() {
    *this = ::std::move(from);
  }

  inline DocumentData_NewsTagsData& operator=(DocumentData_NewsTagsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_NewsTagsData& default_instance();

  static inline const DocumentData_NewsTagsData* internal_default_instance() {
    return reinterpret_cast<const DocumentData_NewsTagsData*>(
               &_DocumentData_NewsTagsData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    123;

  void UnsafeArenaSwap(DocumentData_NewsTagsData* other);
  void Swap(DocumentData_NewsTagsData* other);
  friend void swap(DocumentData_NewsTagsData& a, DocumentData_NewsTagsData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_NewsTagsData* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_NewsTagsData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_NewsTagsData& from);
  void MergeFrom(const DocumentData_NewsTagsData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_NewsTagsData* other);
  protected:
  explicit DocumentData_NewsTagsData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 tag_ids = 1;
  int tag_ids_size() const;
  void clear_tag_ids();
  static const int kTagIdsFieldNumber = 1;
  ::google::protobuf::int32 tag_ids(int index) const;
  void set_tag_ids(int index, ::google::protobuf::int32 value);
  void add_tag_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tag_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tag_ids();

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.NewsTagsData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tag_ids_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_NewsStoryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.NewsStoryData) */ {
 public:
  DocumentData_NewsStoryData();
  virtual ~DocumentData_NewsStoryData();

  DocumentData_NewsStoryData(const DocumentData_NewsStoryData& from);

  inline DocumentData_NewsStoryData& operator=(const DocumentData_NewsStoryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_NewsStoryData(DocumentData_NewsStoryData&& from) noexcept
    : DocumentData_NewsStoryData() {
    *this = ::std::move(from);
  }

  inline DocumentData_NewsStoryData& operator=(DocumentData_NewsStoryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_NewsStoryData& default_instance();

  static inline const DocumentData_NewsStoryData* internal_default_instance() {
    return reinterpret_cast<const DocumentData_NewsStoryData*>(
               &_DocumentData_NewsStoryData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    124;

  void UnsafeArenaSwap(DocumentData_NewsStoryData* other);
  void Swap(DocumentData_NewsStoryData* other);
  friend void swap(DocumentData_NewsStoryData& a, DocumentData_NewsStoryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_NewsStoryData* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_NewsStoryData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_NewsStoryData& from);
  void MergeFrom(const DocumentData_NewsStoryData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_NewsStoryData* other);
  protected:
  explicit DocumentData_NewsStoryData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 story_id = 1;
  bool has_story_id() const;
  void clear_story_id();
  static const int kStoryIdFieldNumber = 1;
  ::google::protobuf::int32 story_id() const;
  void set_story_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.NewsStoryData)
 private:
  void set_has_story_id();
  void clear_has_story_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 story_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_NativeTargetIsActive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.NativeTargetIsActive) */ {
 public:
  DocumentData_NativeTargetIsActive();
  virtual ~DocumentData_NativeTargetIsActive();

  DocumentData_NativeTargetIsActive(const DocumentData_NativeTargetIsActive& from);

  inline DocumentData_NativeTargetIsActive& operator=(const DocumentData_NativeTargetIsActive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_NativeTargetIsActive(DocumentData_NativeTargetIsActive&& from) noexcept
    : DocumentData_NativeTargetIsActive() {
    *this = ::std::move(from);
  }

  inline DocumentData_NativeTargetIsActive& operator=(DocumentData_NativeTargetIsActive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_NativeTargetIsActive& default_instance();

  static inline const DocumentData_NativeTargetIsActive* internal_default_instance() {
    return reinterpret_cast<const DocumentData_NativeTargetIsActive*>(
               &_DocumentData_NativeTargetIsActive_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    125;

  void UnsafeArenaSwap(DocumentData_NativeTargetIsActive* other);
  void Swap(DocumentData_NativeTargetIsActive* other);
  friend void swap(DocumentData_NativeTargetIsActive& a, DocumentData_NativeTargetIsActive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_NativeTargetIsActive* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_NativeTargetIsActive* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_NativeTargetIsActive& from);
  void MergeFrom(const DocumentData_NativeTargetIsActive& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_NativeTargetIsActive* other);
  protected:
  explicit DocumentData_NativeTargetIsActive(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // required bool is_active = 2;
  bool has_is_active() const;
  void clear_is_active();
  static const int kIsActiveFieldNumber = 2;
  bool is_active() const;
  void set_is_active(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.NativeTargetIsActive)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_is_active();
  void clear_has_is_active();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 version_;
  bool is_active_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_DocumentKeywordsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.DocumentKeywordsInfo) */ {
 public:
  DocumentData_DocumentKeywordsInfo();
  virtual ~DocumentData_DocumentKeywordsInfo();

  DocumentData_DocumentKeywordsInfo(const DocumentData_DocumentKeywordsInfo& from);

  inline DocumentData_DocumentKeywordsInfo& operator=(const DocumentData_DocumentKeywordsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_DocumentKeywordsInfo(DocumentData_DocumentKeywordsInfo&& from) noexcept
    : DocumentData_DocumentKeywordsInfo() {
    *this = ::std::move(from);
  }

  inline DocumentData_DocumentKeywordsInfo& operator=(DocumentData_DocumentKeywordsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_DocumentKeywordsInfo& default_instance();

  static inline const DocumentData_DocumentKeywordsInfo* internal_default_instance() {
    return reinterpret_cast<const DocumentData_DocumentKeywordsInfo*>(
               &_DocumentData_DocumentKeywordsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    126;

  void UnsafeArenaSwap(DocumentData_DocumentKeywordsInfo* other);
  void Swap(DocumentData_DocumentKeywordsInfo* other);
  friend void swap(DocumentData_DocumentKeywordsInfo& a, DocumentData_DocumentKeywordsInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_DocumentKeywordsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_DocumentKeywordsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_DocumentKeywordsInfo& from);
  void MergeFrom(const DocumentData_DocumentKeywordsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_DocumentKeywordsInfo* other);
  protected:
  explicit DocumentData_DocumentKeywordsInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DocumentData_DocumentKeywordsInfo_KeywordType KeywordType;
  static const KeywordType TITLE =
    DocumentData_DocumentKeywordsInfo_KeywordType_TITLE;
  static const KeywordType DESCRIPTION =
    DocumentData_DocumentKeywordsInfo_KeywordType_DESCRIPTION;
  static inline bool KeywordType_IsValid(int value) {
    return DocumentData_DocumentKeywordsInfo_KeywordType_IsValid(value);
  }
  static const KeywordType KeywordType_MIN =
    DocumentData_DocumentKeywordsInfo_KeywordType_KeywordType_MIN;
  static const KeywordType KeywordType_MAX =
    DocumentData_DocumentKeywordsInfo_KeywordType_KeywordType_MAX;
  static const int KeywordType_ARRAYSIZE =
    DocumentData_DocumentKeywordsInfo_KeywordType_KeywordType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  KeywordType_descriptor() {
    return DocumentData_DocumentKeywordsInfo_KeywordType_descriptor();
  }
  static inline const ::std::string& KeywordType_Name(KeywordType value) {
    return DocumentData_DocumentKeywordsInfo_KeywordType_Name(value);
  }
  static inline bool KeywordType_Parse(const ::std::string& name,
      KeywordType* value) {
    return DocumentData_DocumentKeywordsInfo_KeywordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int64 keyword_hash = 2;
  int keyword_hash_size() const;
  void clear_keyword_hash();
  static const int kKeywordHashFieldNumber = 2;
  ::google::protobuf::int64 keyword_hash(int index) const;
  void set_keyword_hash(int index, ::google::protobuf::int64 value);
  void add_keyword_hash(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      keyword_hash() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_keyword_hash();

  // repeated .cosmo.pb.DocumentData.DocumentKeywordsInfo.KeywordType keyword_type = 3;
  int keyword_type_size() const;
  void clear_keyword_type();
  static const int kKeywordTypeFieldNumber = 3;
  ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType keyword_type(int index) const;
  void set_keyword_type(int index, ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType value);
  void add_keyword_type(::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType value);
  const ::google::protobuf::RepeatedField<int>& keyword_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_keyword_type();

  // required uint32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // optional uint32 cluster_id = 4;
  bool has_cluster_id() const;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 4;
  ::google::protobuf::uint32 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.DocumentKeywordsInfo)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_cluster_id();
  void clear_has_cluster_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > keyword_hash_;
  ::google::protobuf::RepeatedField<int> keyword_type_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 cluster_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData_RisksFields : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData.RisksFields) */ {
 public:
  DocumentData_RisksFields();
  virtual ~DocumentData_RisksFields();

  DocumentData_RisksFields(const DocumentData_RisksFields& from);

  inline DocumentData_RisksFields& operator=(const DocumentData_RisksFields& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData_RisksFields(DocumentData_RisksFields&& from) noexcept
    : DocumentData_RisksFields() {
    *this = ::std::move(from);
  }

  inline DocumentData_RisksFields& operator=(DocumentData_RisksFields&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData_RisksFields& default_instance();

  static inline const DocumentData_RisksFields* internal_default_instance() {
    return reinterpret_cast<const DocumentData_RisksFields*>(
               &_DocumentData_RisksFields_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    127;

  void UnsafeArenaSwap(DocumentData_RisksFields* other);
  void Swap(DocumentData_RisksFields* other);
  friend void swap(DocumentData_RisksFields& a, DocumentData_RisksFields& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData_RisksFields* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData_RisksFields* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData_RisksFields& from);
  void MergeFrom(const DocumentData_RisksFields& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData_RisksFields* other);
  protected:
  explicit DocumentData_RisksFields(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float ero_score = 1;
  bool has_ero_score() const;
  void clear_ero_score();
  static const int kEroScoreFieldNumber = 1;
  float ero_score() const;
  void set_ero_score(float value);

  // optional float porno_score = 2;
  bool has_porno_score() const;
  void clear_porno_score();
  static const int kPornoScoreFieldNumber = 2;
  float porno_score() const;
  void set_porno_score(float value);

  // optional float safe_content = 3;
  bool has_safe_content() const;
  void clear_safe_content();
  static const int kSafeContentFieldNumber = 3;
  float safe_content() const;
  void set_safe_content(float value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData.RisksFields)
 private:
  void set_has_ero_score();
  void clear_has_ero_score();
  void set_has_porno_score();
  void clear_has_porno_score();
  void set_has_safe_content();
  void clear_has_safe_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float ero_score_;
  float porno_score_;
  float safe_content_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentData) */ {
 public:
  DocumentData();
  virtual ~DocumentData();

  DocumentData(const DocumentData& from);

  inline DocumentData& operator=(const DocumentData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentData(DocumentData&& from) noexcept
    : DocumentData() {
    *this = ::std::move(from);
  }

  inline DocumentData& operator=(DocumentData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentData& default_instance();

  static inline const DocumentData* internal_default_instance() {
    return reinterpret_cast<const DocumentData*>(
               &_DocumentData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    128;

  void UnsafeArenaSwap(DocumentData* other);
  void Swap(DocumentData* other);
  friend void swap(DocumentData& a, DocumentData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentData* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentData& from);
  void MergeFrom(const DocumentData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentData* other);
  protected:
  explicit DocumentData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DocumentData_OriginalInfo OriginalInfo;
  typedef DocumentData_OkInfo OkInfo;
  typedef DocumentData_ContentData ContentData;
  typedef DocumentData_FreshnessData FreshnessData;
  typedef DocumentData_NewsData NewsData;
  typedef DocumentData_Censor Censor;
  typedef DocumentData_UserStats UserStats;
  typedef DocumentData_Trends Trends;
  typedef DocumentData_GeoHits GeoHits;
  typedef DocumentData_MediametricsFea MediametricsFea;
  typedef DocumentData_Fetcher Fetcher;
  typedef DocumentData_FetcherFirstmeet FetcherFirstmeet;
  typedef DocumentData_FetcherPubdate FetcherPubdate;
  typedef DocumentData_FetcherGeo FetcherGeo;
  typedef DocumentData_FetcherImage FetcherImage;
  typedef DocumentData_DocState DocState;
  typedef DocumentData_TopicPeriodStats TopicPeriodStats;
  typedef DocumentData_AppFilterStats AppFilterStats;
  typedef DocumentData_DocumentEventStat DocumentEventStat;
  typedef DocumentData_TopicEventStat TopicEventStat;
  typedef DocumentData_DocumentLocationStat DocumentLocationStat;
  typedef DocumentData_DocumentMutualStat DocumentMutualStat;
  typedef DocumentData_ContentVector ContentVector;
  typedef DocumentData_TitleContentFea TitleContentFea;
  typedef DocumentData_ContentPornFea ContentPornFea;
  typedef DocumentData_ImagePornFea ImagePornFea;
  typedef DocumentData_ContentThemes ContentThemes;
  typedef DocumentData_StoryClusterId StoryClusterId;
  typedef DocumentData_NewsTagsData NewsTagsData;
  typedef DocumentData_NewsStoryData NewsStoryData;
  typedef DocumentData_NativeTargetIsActive NativeTargetIsActive;
  typedef DocumentData_DocumentKeywordsInfo DocumentKeywordsInfo;
  typedef DocumentData_RisksFields RisksFields;

  // accessors -------------------------------------------------------

  // repeated int32 doc_region_ids = 58;
  int doc_region_ids_size() const;
  void clear_doc_region_ids();
  static const int kDocRegionIdsFieldNumber = 58;
  ::google::protobuf::int32 doc_region_ids(int index) const;
  void set_doc_region_ids(int index, ::google::protobuf::int32 value);
  void add_doc_region_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      doc_region_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_doc_region_ids();

  // optional .cosmo.pb.DocumentData.OkInfo ok_info = 7;
  bool has_ok_info() const;
  void clear_ok_info();
  static const int kOkInfoFieldNumber = 7;
  private:
  void _slow_mutable_ok_info();
  void _slow_set_allocated_ok_info(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_OkInfo** ok_info);
  ::cosmo::pb::DocumentData_OkInfo* _slow_release_ok_info();
  public:
  const ::cosmo::pb::DocumentData_OkInfo& ok_info() const;
  ::cosmo::pb::DocumentData_OkInfo* mutable_ok_info();
  ::cosmo::pb::DocumentData_OkInfo* release_ok_info();
  void set_allocated_ok_info(::cosmo::pb::DocumentData_OkInfo* ok_info);
  ::cosmo::pb::DocumentData_OkInfo* unsafe_arena_release_ok_info();
  void unsafe_arena_set_allocated_ok_info(
      ::cosmo::pb::DocumentData_OkInfo* ok_info);

  // optional .cosmo.pb.DocumentData.NewsData news_data = 8;
  bool has_news_data() const;
  void clear_news_data();
  static const int kNewsDataFieldNumber = 8;
  private:
  void _slow_mutable_news_data();
  void _slow_set_allocated_news_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_NewsData** news_data);
  ::cosmo::pb::DocumentData_NewsData* _slow_release_news_data();
  public:
  const ::cosmo::pb::DocumentData_NewsData& news_data() const;
  ::cosmo::pb::DocumentData_NewsData* mutable_news_data();
  ::cosmo::pb::DocumentData_NewsData* release_news_data();
  void set_allocated_news_data(::cosmo::pb::DocumentData_NewsData* news_data);
  ::cosmo::pb::DocumentData_NewsData* unsafe_arena_release_news_data();
  void unsafe_arena_set_allocated_news_data(
      ::cosmo::pb::DocumentData_NewsData* news_data);

  // optional .cosmo.pb.DocumentData.Censor censor = 10;
  bool has_censor() const;
  void clear_censor();
  static const int kCensorFieldNumber = 10;
  private:
  void _slow_mutable_censor();
  void _slow_set_allocated_censor(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_Censor** censor);
  ::cosmo::pb::DocumentData_Censor* _slow_release_censor();
  public:
  const ::cosmo::pb::DocumentData_Censor& censor() const;
  ::cosmo::pb::DocumentData_Censor* mutable_censor();
  ::cosmo::pb::DocumentData_Censor* release_censor();
  void set_allocated_censor(::cosmo::pb::DocumentData_Censor* censor);
  ::cosmo::pb::DocumentData_Censor* unsafe_arena_release_censor();
  void unsafe_arena_set_allocated_censor(
      ::cosmo::pb::DocumentData_Censor* censor);

  // optional .cosmo.pb.DocumentData.UserStats user_stats = 11;
  bool has_user_stats() const;
  void clear_user_stats();
  static const int kUserStatsFieldNumber = 11;
  private:
  void _slow_mutable_user_stats();
  void _slow_set_allocated_user_stats(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_UserStats** user_stats);
  ::cosmo::pb::DocumentData_UserStats* _slow_release_user_stats();
  public:
  const ::cosmo::pb::DocumentData_UserStats& user_stats() const;
  ::cosmo::pb::DocumentData_UserStats* mutable_user_stats();
  ::cosmo::pb::DocumentData_UserStats* release_user_stats();
  void set_allocated_user_stats(::cosmo::pb::DocumentData_UserStats* user_stats);
  ::cosmo::pb::DocumentData_UserStats* unsafe_arena_release_user_stats();
  void unsafe_arena_set_allocated_user_stats(
      ::cosmo::pb::DocumentData_UserStats* user_stats);

  // optional .cosmo.pb.DocumentData.Trends trends = 12;
  bool has_trends() const;
  void clear_trends();
  static const int kTrendsFieldNumber = 12;
  private:
  void _slow_mutable_trends();
  void _slow_set_allocated_trends(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_Trends** trends);
  ::cosmo::pb::DocumentData_Trends* _slow_release_trends();
  public:
  const ::cosmo::pb::DocumentData_Trends& trends() const;
  ::cosmo::pb::DocumentData_Trends* mutable_trends();
  ::cosmo::pb::DocumentData_Trends* release_trends();
  void set_allocated_trends(::cosmo::pb::DocumentData_Trends* trends);
  ::cosmo::pb::DocumentData_Trends* unsafe_arena_release_trends();
  void unsafe_arena_set_allocated_trends(
      ::cosmo::pb::DocumentData_Trends* trends);

  // optional .cosmo.pb.DocumentData.OriginalInfo original_info = 13;
  bool has_original_info() const;
  void clear_original_info();
  static const int kOriginalInfoFieldNumber = 13;
  private:
  void _slow_mutable_original_info();
  void _slow_set_allocated_original_info(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_OriginalInfo** original_info);
  ::cosmo::pb::DocumentData_OriginalInfo* _slow_release_original_info();
  public:
  const ::cosmo::pb::DocumentData_OriginalInfo& original_info() const;
  ::cosmo::pb::DocumentData_OriginalInfo* mutable_original_info();
  ::cosmo::pb::DocumentData_OriginalInfo* release_original_info();
  void set_allocated_original_info(::cosmo::pb::DocumentData_OriginalInfo* original_info);
  ::cosmo::pb::DocumentData_OriginalInfo* unsafe_arena_release_original_info();
  void unsafe_arena_set_allocated_original_info(
      ::cosmo::pb::DocumentData_OriginalInfo* original_info);

  // optional .cosmo.pb.DocumentData.Fetcher fetcher = 14;
  bool has_fetcher() const;
  void clear_fetcher();
  static const int kFetcherFieldNumber = 14;
  private:
  void _slow_mutable_fetcher();
  void _slow_set_allocated_fetcher(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_Fetcher** fetcher);
  ::cosmo::pb::DocumentData_Fetcher* _slow_release_fetcher();
  public:
  const ::cosmo::pb::DocumentData_Fetcher& fetcher() const;
  ::cosmo::pb::DocumentData_Fetcher* mutable_fetcher();
  ::cosmo::pb::DocumentData_Fetcher* release_fetcher();
  void set_allocated_fetcher(::cosmo::pb::DocumentData_Fetcher* fetcher);
  ::cosmo::pb::DocumentData_Fetcher* unsafe_arena_release_fetcher();
  void unsafe_arena_set_allocated_fetcher(
      ::cosmo::pb::DocumentData_Fetcher* fetcher);

  // optional .cosmo.pb.DocumentData.MediametricsFea mediametrics_fea = 15;
  bool has_mediametrics_fea() const;
  void clear_mediametrics_fea();
  static const int kMediametricsFeaFieldNumber = 15;
  private:
  void _slow_mutable_mediametrics_fea();
  void _slow_set_allocated_mediametrics_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_MediametricsFea** mediametrics_fea);
  ::cosmo::pb::DocumentData_MediametricsFea* _slow_release_mediametrics_fea();
  public:
  const ::cosmo::pb::DocumentData_MediametricsFea& mediametrics_fea() const;
  ::cosmo::pb::DocumentData_MediametricsFea* mutable_mediametrics_fea();
  ::cosmo::pb::DocumentData_MediametricsFea* release_mediametrics_fea();
  void set_allocated_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* mediametrics_fea);
  ::cosmo::pb::DocumentData_MediametricsFea* unsafe_arena_release_mediametrics_fea();
  void unsafe_arena_set_allocated_mediametrics_fea(
      ::cosmo::pb::DocumentData_MediametricsFea* mediametrics_fea);

  // optional .cosmo.pb.DocumentData.TopicPeriodStats topic_period_stats = 16;
  bool has_topic_period_stats() const;
  void clear_topic_period_stats();
  static const int kTopicPeriodStatsFieldNumber = 16;
  private:
  void _slow_mutable_topic_period_stats();
  void _slow_set_allocated_topic_period_stats(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicPeriodStats** topic_period_stats);
  ::cosmo::pb::DocumentData_TopicPeriodStats* _slow_release_topic_period_stats();
  public:
  const ::cosmo::pb::DocumentData_TopicPeriodStats& topic_period_stats() const;
  ::cosmo::pb::DocumentData_TopicPeriodStats* mutable_topic_period_stats();
  ::cosmo::pb::DocumentData_TopicPeriodStats* release_topic_period_stats();
  void set_allocated_topic_period_stats(::cosmo::pb::DocumentData_TopicPeriodStats* topic_period_stats);
  ::cosmo::pb::DocumentData_TopicPeriodStats* unsafe_arena_release_topic_period_stats();
  void unsafe_arena_set_allocated_topic_period_stats(
      ::cosmo::pb::DocumentData_TopicPeriodStats* topic_period_stats);

  // optional .cosmo.pb.DocumentData.AppFilterStats app_filter_stats = 17;
  bool has_app_filter_stats() const;
  void clear_app_filter_stats();
  static const int kAppFilterStatsFieldNumber = 17;
  private:
  void _slow_mutable_app_filter_stats();
  void _slow_set_allocated_app_filter_stats(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_AppFilterStats** app_filter_stats);
  ::cosmo::pb::DocumentData_AppFilterStats* _slow_release_app_filter_stats();
  public:
  const ::cosmo::pb::DocumentData_AppFilterStats& app_filter_stats() const;
  ::cosmo::pb::DocumentData_AppFilterStats* mutable_app_filter_stats();
  ::cosmo::pb::DocumentData_AppFilterStats* release_app_filter_stats();
  void set_allocated_app_filter_stats(::cosmo::pb::DocumentData_AppFilterStats* app_filter_stats);
  ::cosmo::pb::DocumentData_AppFilterStats* unsafe_arena_release_app_filter_stats();
  void unsafe_arena_set_allocated_app_filter_stats(
      ::cosmo::pb::DocumentData_AppFilterStats* app_filter_stats);

  // optional .cosmo.pb.DocumentData.MediametricsFea week_mediametrics_fea = 18;
  bool has_week_mediametrics_fea() const;
  void clear_week_mediametrics_fea();
  static const int kWeekMediametricsFeaFieldNumber = 18;
  private:
  void _slow_mutable_week_mediametrics_fea();
  void _slow_set_allocated_week_mediametrics_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_MediametricsFea** week_mediametrics_fea);
  ::cosmo::pb::DocumentData_MediametricsFea* _slow_release_week_mediametrics_fea();
  public:
  const ::cosmo::pb::DocumentData_MediametricsFea& week_mediametrics_fea() const;
  ::cosmo::pb::DocumentData_MediametricsFea* mutable_week_mediametrics_fea();
  ::cosmo::pb::DocumentData_MediametricsFea* release_week_mediametrics_fea();
  void set_allocated_week_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* week_mediametrics_fea);
  ::cosmo::pb::DocumentData_MediametricsFea* unsafe_arena_release_week_mediametrics_fea();
  void unsafe_arena_set_allocated_week_mediametrics_fea(
      ::cosmo::pb::DocumentData_MediametricsFea* week_mediametrics_fea);

  // optional .cosmo.pb.DocumentData.TopicEventStat ok_topic_event_stat = 20;
  bool has_ok_topic_event_stat() const;
  void clear_ok_topic_event_stat();
  static const int kOkTopicEventStatFieldNumber = 20;
  private:
  void _slow_mutable_ok_topic_event_stat();
  void _slow_set_allocated_ok_topic_event_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** ok_topic_event_stat);
  ::cosmo::pb::DocumentData_TopicEventStat* _slow_release_ok_topic_event_stat();
  public:
  const ::cosmo::pb::DocumentData_TopicEventStat& ok_topic_event_stat() const;
  ::cosmo::pb::DocumentData_TopicEventStat* mutable_ok_topic_event_stat();
  ::cosmo::pb::DocumentData_TopicEventStat* release_ok_topic_event_stat();
  void set_allocated_ok_topic_event_stat(::cosmo::pb::DocumentData_TopicEventStat* ok_topic_event_stat);
  ::cosmo::pb::DocumentData_TopicEventStat* unsafe_arena_release_ok_topic_event_stat();
  void unsafe_arena_set_allocated_ok_topic_event_stat(
      ::cosmo::pb::DocumentData_TopicEventStat* ok_topic_event_stat);

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day = 21;
  bool has_vk_topic_event_stat_day() const;
  void clear_vk_topic_event_stat_day();
  static const int kVkTopicEventStatDayFieldNumber = 21;
  private:
  void _slow_mutable_vk_topic_event_stat_day();
  void _slow_set_allocated_vk_topic_event_stat_day(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** vk_topic_event_stat_day);
  ::cosmo::pb::DocumentData_TopicEventStat* _slow_release_vk_topic_event_stat_day();
  public:
  const ::cosmo::pb::DocumentData_TopicEventStat& vk_topic_event_stat_day() const;
  ::cosmo::pb::DocumentData_TopicEventStat* mutable_vk_topic_event_stat_day();
  ::cosmo::pb::DocumentData_TopicEventStat* release_vk_topic_event_stat_day();
  void set_allocated_vk_topic_event_stat_day(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day);
  ::cosmo::pb::DocumentData_TopicEventStat* unsafe_arena_release_vk_topic_event_stat_day();
  void unsafe_arena_set_allocated_vk_topic_event_stat_day(
      ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day);

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week = 22;
  bool has_vk_topic_event_stat_week() const;
  void clear_vk_topic_event_stat_week();
  static const int kVkTopicEventStatWeekFieldNumber = 22;
  private:
  void _slow_mutable_vk_topic_event_stat_week();
  void _slow_set_allocated_vk_topic_event_stat_week(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** vk_topic_event_stat_week);
  ::cosmo::pb::DocumentData_TopicEventStat* _slow_release_vk_topic_event_stat_week();
  public:
  const ::cosmo::pb::DocumentData_TopicEventStat& vk_topic_event_stat_week() const;
  ::cosmo::pb::DocumentData_TopicEventStat* mutable_vk_topic_event_stat_week();
  ::cosmo::pb::DocumentData_TopicEventStat* release_vk_topic_event_stat_week();
  void set_allocated_vk_topic_event_stat_week(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week);
  ::cosmo::pb::DocumentData_TopicEventStat* unsafe_arena_release_vk_topic_event_stat_week();
  void unsafe_arena_set_allocated_vk_topic_event_stat_week(
      ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week);

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day = 23;
  bool has_youtube_topic_event_stat_day() const;
  void clear_youtube_topic_event_stat_day();
  static const int kYoutubeTopicEventStatDayFieldNumber = 23;
  private:
  void _slow_mutable_youtube_topic_event_stat_day();
  void _slow_set_allocated_youtube_topic_event_stat_day(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** youtube_topic_event_stat_day);
  ::cosmo::pb::DocumentData_TopicEventStat* _slow_release_youtube_topic_event_stat_day();
  public:
  const ::cosmo::pb::DocumentData_TopicEventStat& youtube_topic_event_stat_day() const;
  ::cosmo::pb::DocumentData_TopicEventStat* mutable_youtube_topic_event_stat_day();
  ::cosmo::pb::DocumentData_TopicEventStat* release_youtube_topic_event_stat_day();
  void set_allocated_youtube_topic_event_stat_day(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day);
  ::cosmo::pb::DocumentData_TopicEventStat* unsafe_arena_release_youtube_topic_event_stat_day();
  void unsafe_arena_set_allocated_youtube_topic_event_stat_day(
      ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day);

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week = 24;
  bool has_youtube_topic_event_stat_week() const;
  void clear_youtube_topic_event_stat_week();
  static const int kYoutubeTopicEventStatWeekFieldNumber = 24;
  private:
  void _slow_mutable_youtube_topic_event_stat_week();
  void _slow_set_allocated_youtube_topic_event_stat_week(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** youtube_topic_event_stat_week);
  ::cosmo::pb::DocumentData_TopicEventStat* _slow_release_youtube_topic_event_stat_week();
  public:
  const ::cosmo::pb::DocumentData_TopicEventStat& youtube_topic_event_stat_week() const;
  ::cosmo::pb::DocumentData_TopicEventStat* mutable_youtube_topic_event_stat_week();
  ::cosmo::pb::DocumentData_TopicEventStat* release_youtube_topic_event_stat_week();
  void set_allocated_youtube_topic_event_stat_week(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week);
  ::cosmo::pb::DocumentData_TopicEventStat* unsafe_arena_release_youtube_topic_event_stat_week();
  void unsafe_arena_set_allocated_youtube_topic_event_stat_week(
      ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week);

  // optional .cosmo.pb.DocumentData.DocumentLocationStat taped_location_stat = 25;
  bool has_taped_location_stat() const;
  void clear_taped_location_stat();
  static const int kTapedLocationStatFieldNumber = 25;
  private:
  void _slow_mutable_taped_location_stat();
  void _slow_set_allocated_taped_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** taped_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* _slow_release_taped_location_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentLocationStat& taped_location_stat() const;
  ::cosmo::pb::DocumentData_DocumentLocationStat* mutable_taped_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* release_taped_location_stat();
  void set_allocated_taped_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* taped_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* unsafe_arena_release_taped_location_stat();
  void unsafe_arena_set_allocated_taped_location_stat(
      ::cosmo::pb::DocumentData_DocumentLocationStat* taped_location_stat);

  // optional .cosmo.pb.DocumentData.DocumentLocationStat homer_location_stat = 26;
  bool has_homer_location_stat() const;
  void clear_homer_location_stat();
  static const int kHomerLocationStatFieldNumber = 26;
  private:
  void _slow_mutable_homer_location_stat();
  void _slow_set_allocated_homer_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** homer_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* _slow_release_homer_location_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentLocationStat& homer_location_stat() const;
  ::cosmo::pb::DocumentData_DocumentLocationStat* mutable_homer_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* release_homer_location_stat();
  void set_allocated_homer_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* homer_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* unsafe_arena_release_homer_location_stat();
  void unsafe_arena_set_allocated_homer_location_stat(
      ::cosmo::pb::DocumentData_DocumentLocationStat* homer_location_stat);

  // optional .cosmo.pb.DocumentData.DocumentLocationStat hourly_location_stat = 27;
  bool has_hourly_location_stat() const;
  void clear_hourly_location_stat();
  static const int kHourlyLocationStatFieldNumber = 27;
  private:
  void _slow_mutable_hourly_location_stat();
  void _slow_set_allocated_hourly_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** hourly_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* _slow_release_hourly_location_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentLocationStat& hourly_location_stat() const;
  ::cosmo::pb::DocumentData_DocumentLocationStat* mutable_hourly_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* release_hourly_location_stat();
  void set_allocated_hourly_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* hourly_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* unsafe_arena_release_hourly_location_stat();
  void unsafe_arena_set_allocated_hourly_location_stat(
      ::cosmo::pb::DocumentData_DocumentLocationStat* hourly_location_stat);

  // optional .cosmo.pb.DocumentData.DocumentLocationStat daily_location_stat = 28;
  bool has_daily_location_stat() const;
  void clear_daily_location_stat();
  static const int kDailyLocationStatFieldNumber = 28;
  private:
  void _slow_mutable_daily_location_stat();
  void _slow_set_allocated_daily_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** daily_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* _slow_release_daily_location_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentLocationStat& daily_location_stat() const;
  ::cosmo::pb::DocumentData_DocumentLocationStat* mutable_daily_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* release_daily_location_stat();
  void set_allocated_daily_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* daily_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* unsafe_arena_release_daily_location_stat();
  void unsafe_arena_set_allocated_daily_location_stat(
      ::cosmo::pb::DocumentData_DocumentLocationStat* daily_location_stat);

  // optional .cosmo.pb.DocumentData.DocumentLocationStat weekly_location_stat = 29;
  bool has_weekly_location_stat() const;
  void clear_weekly_location_stat();
  static const int kWeeklyLocationStatFieldNumber = 29;
  private:
  void _slow_mutable_weekly_location_stat();
  void _slow_set_allocated_weekly_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** weekly_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* _slow_release_weekly_location_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentLocationStat& weekly_location_stat() const;
  ::cosmo::pb::DocumentData_DocumentLocationStat* mutable_weekly_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* release_weekly_location_stat();
  void set_allocated_weekly_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* weekly_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* unsafe_arena_release_weekly_location_stat();
  void unsafe_arena_set_allocated_weekly_location_stat(
      ::cosmo::pb::DocumentData_DocumentLocationStat* weekly_location_stat);

  // optional .cosmo.pb.DocumentData.DocumentLocationStat monthly_location_stat = 30;
  bool has_monthly_location_stat() const;
  void clear_monthly_location_stat();
  static const int kMonthlyLocationStatFieldNumber = 30;
  private:
  void _slow_mutable_monthly_location_stat();
  void _slow_set_allocated_monthly_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** monthly_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* _slow_release_monthly_location_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentLocationStat& monthly_location_stat() const;
  ::cosmo::pb::DocumentData_DocumentLocationStat* mutable_monthly_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* release_monthly_location_stat();
  void set_allocated_monthly_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* monthly_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* unsafe_arena_release_monthly_location_stat();
  void unsafe_arena_set_allocated_monthly_location_stat(
      ::cosmo::pb::DocumentData_DocumentLocationStat* monthly_location_stat);

  // optional .cosmo.pb.DocumentData.FetcherGeo fetcher_geo = 31;
  bool has_fetcher_geo() const;
  void clear_fetcher_geo();
  static const int kFetcherGeoFieldNumber = 31;
  private:
  void _slow_mutable_fetcher_geo();
  void _slow_set_allocated_fetcher_geo(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_FetcherGeo** fetcher_geo);
  ::cosmo::pb::DocumentData_FetcherGeo* _slow_release_fetcher_geo();
  public:
  const ::cosmo::pb::DocumentData_FetcherGeo& fetcher_geo() const;
  ::cosmo::pb::DocumentData_FetcherGeo* mutable_fetcher_geo();
  ::cosmo::pb::DocumentData_FetcherGeo* release_fetcher_geo();
  void set_allocated_fetcher_geo(::cosmo::pb::DocumentData_FetcherGeo* fetcher_geo);
  ::cosmo::pb::DocumentData_FetcherGeo* unsafe_arena_release_fetcher_geo();
  void unsafe_arena_set_allocated_fetcher_geo(
      ::cosmo::pb::DocumentData_FetcherGeo* fetcher_geo);

  // optional .cosmo.pb.DocumentData.MediametricsFea hourly_fast_mediametrics_fea = 32;
  bool has_hourly_fast_mediametrics_fea() const;
  void clear_hourly_fast_mediametrics_fea();
  static const int kHourlyFastMediametricsFeaFieldNumber = 32;
  private:
  void _slow_mutable_hourly_fast_mediametrics_fea();
  void _slow_set_allocated_hourly_fast_mediametrics_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_MediametricsFea** hourly_fast_mediametrics_fea);
  ::cosmo::pb::DocumentData_MediametricsFea* _slow_release_hourly_fast_mediametrics_fea();
  public:
  const ::cosmo::pb::DocumentData_MediametricsFea& hourly_fast_mediametrics_fea() const;
  ::cosmo::pb::DocumentData_MediametricsFea* mutable_hourly_fast_mediametrics_fea();
  ::cosmo::pb::DocumentData_MediametricsFea* release_hourly_fast_mediametrics_fea();
  void set_allocated_hourly_fast_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* hourly_fast_mediametrics_fea);
  ::cosmo::pb::DocumentData_MediametricsFea* unsafe_arena_release_hourly_fast_mediametrics_fea();
  void unsafe_arena_set_allocated_hourly_fast_mediametrics_fea(
      ::cosmo::pb::DocumentData_MediametricsFea* hourly_fast_mediametrics_fea);

  // optional .cosmo.pb.DocumentData.MediametricsFea daily_fast_mediametrics_fea = 33;
  bool has_daily_fast_mediametrics_fea() const;
  void clear_daily_fast_mediametrics_fea();
  static const int kDailyFastMediametricsFeaFieldNumber = 33;
  private:
  void _slow_mutable_daily_fast_mediametrics_fea();
  void _slow_set_allocated_daily_fast_mediametrics_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_MediametricsFea** daily_fast_mediametrics_fea);
  ::cosmo::pb::DocumentData_MediametricsFea* _slow_release_daily_fast_mediametrics_fea();
  public:
  const ::cosmo::pb::DocumentData_MediametricsFea& daily_fast_mediametrics_fea() const;
  ::cosmo::pb::DocumentData_MediametricsFea* mutable_daily_fast_mediametrics_fea();
  ::cosmo::pb::DocumentData_MediametricsFea* release_daily_fast_mediametrics_fea();
  void set_allocated_daily_fast_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* daily_fast_mediametrics_fea);
  ::cosmo::pb::DocumentData_MediametricsFea* unsafe_arena_release_daily_fast_mediametrics_fea();
  void unsafe_arena_set_allocated_daily_fast_mediametrics_fea(
      ::cosmo::pb::DocumentData_MediametricsFea* daily_fast_mediametrics_fea);

  // optional .cosmo.pb.DocumentData.FetcherImage fetcher_image = 34;
  bool has_fetcher_image() const;
  void clear_fetcher_image();
  static const int kFetcherImageFieldNumber = 34;
  private:
  void _slow_mutable_fetcher_image();
  void _slow_set_allocated_fetcher_image(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_FetcherImage** fetcher_image);
  ::cosmo::pb::DocumentData_FetcherImage* _slow_release_fetcher_image();
  public:
  const ::cosmo::pb::DocumentData_FetcherImage& fetcher_image() const;
  ::cosmo::pb::DocumentData_FetcherImage* mutable_fetcher_image();
  ::cosmo::pb::DocumentData_FetcherImage* release_fetcher_image();
  void set_allocated_fetcher_image(::cosmo::pb::DocumentData_FetcherImage* fetcher_image);
  ::cosmo::pb::DocumentData_FetcherImage* unsafe_arena_release_fetcher_image();
  void unsafe_arena_set_allocated_fetcher_image(
      ::cosmo::pb::DocumentData_FetcherImage* fetcher_image);

  // optional .cosmo.pb.DocumentData.ContentData content_data = 35;
  bool has_content_data() const;
  void clear_content_data();
  static const int kContentDataFieldNumber = 35;
  private:
  void _slow_mutable_content_data();
  void _slow_set_allocated_content_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_ContentData** content_data);
  ::cosmo::pb::DocumentData_ContentData* _slow_release_content_data();
  public:
  const ::cosmo::pb::DocumentData_ContentData& content_data() const;
  ::cosmo::pb::DocumentData_ContentData* mutable_content_data();
  ::cosmo::pb::DocumentData_ContentData* release_content_data();
  void set_allocated_content_data(::cosmo::pb::DocumentData_ContentData* content_data);
  ::cosmo::pb::DocumentData_ContentData* unsafe_arena_release_content_data();
  void unsafe_arena_set_allocated_content_data(
      ::cosmo::pb::DocumentData_ContentData* content_data);

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day_v2 = 36;
  bool has_vk_topic_event_stat_day_v2() const;
  void clear_vk_topic_event_stat_day_v2();
  static const int kVkTopicEventStatDayV2FieldNumber = 36;
  private:
  void _slow_mutable_vk_topic_event_stat_day_v2();
  void _slow_set_allocated_vk_topic_event_stat_day_v2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** vk_topic_event_stat_day_v2);
  ::cosmo::pb::DocumentData_TopicEventStat* _slow_release_vk_topic_event_stat_day_v2();
  public:
  const ::cosmo::pb::DocumentData_TopicEventStat& vk_topic_event_stat_day_v2() const;
  ::cosmo::pb::DocumentData_TopicEventStat* mutable_vk_topic_event_stat_day_v2();
  ::cosmo::pb::DocumentData_TopicEventStat* release_vk_topic_event_stat_day_v2();
  void set_allocated_vk_topic_event_stat_day_v2(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day_v2);
  ::cosmo::pb::DocumentData_TopicEventStat* unsafe_arena_release_vk_topic_event_stat_day_v2();
  void unsafe_arena_set_allocated_vk_topic_event_stat_day_v2(
      ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day_v2);

  // optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week_v2 = 37;
  bool has_vk_topic_event_stat_week_v2() const;
  void clear_vk_topic_event_stat_week_v2();
  static const int kVkTopicEventStatWeekV2FieldNumber = 37;
  private:
  void _slow_mutable_vk_topic_event_stat_week_v2();
  void _slow_set_allocated_vk_topic_event_stat_week_v2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** vk_topic_event_stat_week_v2);
  ::cosmo::pb::DocumentData_TopicEventStat* _slow_release_vk_topic_event_stat_week_v2();
  public:
  const ::cosmo::pb::DocumentData_TopicEventStat& vk_topic_event_stat_week_v2() const;
  ::cosmo::pb::DocumentData_TopicEventStat* mutable_vk_topic_event_stat_week_v2();
  ::cosmo::pb::DocumentData_TopicEventStat* release_vk_topic_event_stat_week_v2();
  void set_allocated_vk_topic_event_stat_week_v2(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week_v2);
  ::cosmo::pb::DocumentData_TopicEventStat* unsafe_arena_release_vk_topic_event_stat_week_v2();
  void unsafe_arena_set_allocated_vk_topic_event_stat_week_v2(
      ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week_v2);

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day_v2 = 38;
  bool has_youtube_topic_event_stat_day_v2() const;
  void clear_youtube_topic_event_stat_day_v2();
  static const int kYoutubeTopicEventStatDayV2FieldNumber = 38;
  private:
  void _slow_mutable_youtube_topic_event_stat_day_v2();
  void _slow_set_allocated_youtube_topic_event_stat_day_v2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** youtube_topic_event_stat_day_v2);
  ::cosmo::pb::DocumentData_TopicEventStat* _slow_release_youtube_topic_event_stat_day_v2();
  public:
  const ::cosmo::pb::DocumentData_TopicEventStat& youtube_topic_event_stat_day_v2() const;
  ::cosmo::pb::DocumentData_TopicEventStat* mutable_youtube_topic_event_stat_day_v2();
  ::cosmo::pb::DocumentData_TopicEventStat* release_youtube_topic_event_stat_day_v2();
  void set_allocated_youtube_topic_event_stat_day_v2(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day_v2);
  ::cosmo::pb::DocumentData_TopicEventStat* unsafe_arena_release_youtube_topic_event_stat_day_v2();
  void unsafe_arena_set_allocated_youtube_topic_event_stat_day_v2(
      ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day_v2);

  // optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week_v2 = 39;
  bool has_youtube_topic_event_stat_week_v2() const;
  void clear_youtube_topic_event_stat_week_v2();
  static const int kYoutubeTopicEventStatWeekV2FieldNumber = 39;
  private:
  void _slow_mutable_youtube_topic_event_stat_week_v2();
  void _slow_set_allocated_youtube_topic_event_stat_week_v2(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_TopicEventStat** youtube_topic_event_stat_week_v2);
  ::cosmo::pb::DocumentData_TopicEventStat* _slow_release_youtube_topic_event_stat_week_v2();
  public:
  const ::cosmo::pb::DocumentData_TopicEventStat& youtube_topic_event_stat_week_v2() const;
  ::cosmo::pb::DocumentData_TopicEventStat* mutable_youtube_topic_event_stat_week_v2();
  ::cosmo::pb::DocumentData_TopicEventStat* release_youtube_topic_event_stat_week_v2();
  void set_allocated_youtube_topic_event_stat_week_v2(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week_v2);
  ::cosmo::pb::DocumentData_TopicEventStat* unsafe_arena_release_youtube_topic_event_stat_week_v2();
  void unsafe_arena_set_allocated_youtube_topic_event_stat_week_v2(
      ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week_v2);

  // optional .cosmo.pb.DocumentData.DocumentMutualStat document_i2i_stat = 40;
  bool has_document_i2i_stat() const;
  void clear_document_i2i_stat();
  static const int kDocumentI2IStatFieldNumber = 40;
  private:
  void _slow_mutable_document_i2i_stat();
  void _slow_set_allocated_document_i2i_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentMutualStat** document_i2i_stat);
  ::cosmo::pb::DocumentData_DocumentMutualStat* _slow_release_document_i2i_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentMutualStat& document_i2i_stat() const;
  ::cosmo::pb::DocumentData_DocumentMutualStat* mutable_document_i2i_stat();
  ::cosmo::pb::DocumentData_DocumentMutualStat* release_document_i2i_stat();
  void set_allocated_document_i2i_stat(::cosmo::pb::DocumentData_DocumentMutualStat* document_i2i_stat);
  ::cosmo::pb::DocumentData_DocumentMutualStat* unsafe_arena_release_document_i2i_stat();
  void unsafe_arena_set_allocated_document_i2i_stat(
      ::cosmo::pb::DocumentData_DocumentMutualStat* document_i2i_stat);

  // optional .cosmo.pb.DocumentData.DocumentMutualStat document_mv_stat = 42;
  bool has_document_mv_stat() const;
  void clear_document_mv_stat();
  static const int kDocumentMvStatFieldNumber = 42;
  private:
  void _slow_mutable_document_mv_stat();
  void _slow_set_allocated_document_mv_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentMutualStat** document_mv_stat);
  ::cosmo::pb::DocumentData_DocumentMutualStat* _slow_release_document_mv_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentMutualStat& document_mv_stat() const;
  ::cosmo::pb::DocumentData_DocumentMutualStat* mutable_document_mv_stat();
  ::cosmo::pb::DocumentData_DocumentMutualStat* release_document_mv_stat();
  void set_allocated_document_mv_stat(::cosmo::pb::DocumentData_DocumentMutualStat* document_mv_stat);
  ::cosmo::pb::DocumentData_DocumentMutualStat* unsafe_arena_release_document_mv_stat();
  void unsafe_arena_set_allocated_document_mv_stat(
      ::cosmo::pb::DocumentData_DocumentMutualStat* document_mv_stat);

  // optional .cosmo.pb.DocumentData.NewsTagsData news_tags_data = 43;
  bool has_news_tags_data() const;
  void clear_news_tags_data();
  static const int kNewsTagsDataFieldNumber = 43;
  private:
  void _slow_mutable_news_tags_data();
  void _slow_set_allocated_news_tags_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_NewsTagsData** news_tags_data);
  ::cosmo::pb::DocumentData_NewsTagsData* _slow_release_news_tags_data();
  public:
  const ::cosmo::pb::DocumentData_NewsTagsData& news_tags_data() const;
  ::cosmo::pb::DocumentData_NewsTagsData* mutable_news_tags_data();
  ::cosmo::pb::DocumentData_NewsTagsData* release_news_tags_data();
  void set_allocated_news_tags_data(::cosmo::pb::DocumentData_NewsTagsData* news_tags_data);
  ::cosmo::pb::DocumentData_NewsTagsData* unsafe_arena_release_news_tags_data();
  void unsafe_arena_set_allocated_news_tags_data(
      ::cosmo::pb::DocumentData_NewsTagsData* news_tags_data);

  // optional .cosmo.pb.DocumentData.NewsStoryData news_story_data = 44;
  bool has_news_story_data() const;
  void clear_news_story_data();
  static const int kNewsStoryDataFieldNumber = 44;
  private:
  void _slow_mutable_news_story_data();
  void _slow_set_allocated_news_story_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_NewsStoryData** news_story_data);
  ::cosmo::pb::DocumentData_NewsStoryData* _slow_release_news_story_data();
  public:
  const ::cosmo::pb::DocumentData_NewsStoryData& news_story_data() const;
  ::cosmo::pb::DocumentData_NewsStoryData* mutable_news_story_data();
  ::cosmo::pb::DocumentData_NewsStoryData* release_news_story_data();
  void set_allocated_news_story_data(::cosmo::pb::DocumentData_NewsStoryData* news_story_data);
  ::cosmo::pb::DocumentData_NewsStoryData* unsafe_arena_release_news_story_data();
  void unsafe_arena_set_allocated_news_story_data(
      ::cosmo::pb::DocumentData_NewsStoryData* news_story_data);

  // optional .cosmo.pb.DocumentData.NativeTargetIsActive native_target_is_active = 45;
  bool has_native_target_is_active() const;
  void clear_native_target_is_active();
  static const int kNativeTargetIsActiveFieldNumber = 45;
  private:
  void _slow_mutable_native_target_is_active();
  void _slow_set_allocated_native_target_is_active(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_NativeTargetIsActive** native_target_is_active);
  ::cosmo::pb::DocumentData_NativeTargetIsActive* _slow_release_native_target_is_active();
  public:
  const ::cosmo::pb::DocumentData_NativeTargetIsActive& native_target_is_active() const;
  ::cosmo::pb::DocumentData_NativeTargetIsActive* mutable_native_target_is_active();
  ::cosmo::pb::DocumentData_NativeTargetIsActive* release_native_target_is_active();
  void set_allocated_native_target_is_active(::cosmo::pb::DocumentData_NativeTargetIsActive* native_target_is_active);
  ::cosmo::pb::DocumentData_NativeTargetIsActive* unsafe_arena_release_native_target_is_active();
  void unsafe_arena_set_allocated_native_target_is_active(
      ::cosmo::pb::DocumentData_NativeTargetIsActive* native_target_is_active);

  // optional .cosmo.pb.DocumentData.DocumentLocationStat fast_location_stat = 46;
  bool has_fast_location_stat() const;
  void clear_fast_location_stat();
  static const int kFastLocationStatFieldNumber = 46;
  private:
  void _slow_mutable_fast_location_stat();
  void _slow_set_allocated_fast_location_stat(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentLocationStat** fast_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* _slow_release_fast_location_stat();
  public:
  const ::cosmo::pb::DocumentData_DocumentLocationStat& fast_location_stat() const;
  ::cosmo::pb::DocumentData_DocumentLocationStat* mutable_fast_location_stat();
  ::cosmo::pb::DocumentData_DocumentLocationStat* release_fast_location_stat();
  void set_allocated_fast_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* fast_location_stat);
  ::cosmo::pb::DocumentData_DocumentLocationStat* unsafe_arena_release_fast_location_stat();
  void unsafe_arena_set_allocated_fast_location_stat(
      ::cosmo::pb::DocumentData_DocumentLocationStat* fast_location_stat);

  // optional .cosmo.pb.DocumentData.ContentPornFea content_porn_fea = 48;
  bool has_content_porn_fea() const;
  void clear_content_porn_fea();
  static const int kContentPornFeaFieldNumber = 48;
  private:
  void _slow_mutable_content_porn_fea();
  void _slow_set_allocated_content_porn_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_ContentPornFea** content_porn_fea);
  ::cosmo::pb::DocumentData_ContentPornFea* _slow_release_content_porn_fea();
  public:
  const ::cosmo::pb::DocumentData_ContentPornFea& content_porn_fea() const;
  ::cosmo::pb::DocumentData_ContentPornFea* mutable_content_porn_fea();
  ::cosmo::pb::DocumentData_ContentPornFea* release_content_porn_fea();
  void set_allocated_content_porn_fea(::cosmo::pb::DocumentData_ContentPornFea* content_porn_fea);
  ::cosmo::pb::DocumentData_ContentPornFea* unsafe_arena_release_content_porn_fea();
  void unsafe_arena_set_allocated_content_porn_fea(
      ::cosmo::pb::DocumentData_ContentPornFea* content_porn_fea);

  // optional .cosmo.pb.DocumentData.ContentThemes content_themes = 49;
  bool has_content_themes() const;
  void clear_content_themes();
  static const int kContentThemesFieldNumber = 49;
  private:
  void _slow_mutable_content_themes();
  void _slow_set_allocated_content_themes(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_ContentThemes** content_themes);
  ::cosmo::pb::DocumentData_ContentThemes* _slow_release_content_themes();
  public:
  const ::cosmo::pb::DocumentData_ContentThemes& content_themes() const;
  ::cosmo::pb::DocumentData_ContentThemes* mutable_content_themes();
  ::cosmo::pb::DocumentData_ContentThemes* release_content_themes();
  void set_allocated_content_themes(::cosmo::pb::DocumentData_ContentThemes* content_themes);
  ::cosmo::pb::DocumentData_ContentThemes* unsafe_arena_release_content_themes();
  void unsafe_arena_set_allocated_content_themes(
      ::cosmo::pb::DocumentData_ContentThemes* content_themes);

  // optional .cosmo.pb.DocumentData.StoryClusterId story_cluster_id = 50;
  bool has_story_cluster_id() const;
  void clear_story_cluster_id();
  static const int kStoryClusterIdFieldNumber = 50;
  private:
  void _slow_mutable_story_cluster_id();
  void _slow_set_allocated_story_cluster_id(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_StoryClusterId** story_cluster_id);
  ::cosmo::pb::DocumentData_StoryClusterId* _slow_release_story_cluster_id();
  public:
  const ::cosmo::pb::DocumentData_StoryClusterId& story_cluster_id() const;
  ::cosmo::pb::DocumentData_StoryClusterId* mutable_story_cluster_id();
  ::cosmo::pb::DocumentData_StoryClusterId* release_story_cluster_id();
  void set_allocated_story_cluster_id(::cosmo::pb::DocumentData_StoryClusterId* story_cluster_id);
  ::cosmo::pb::DocumentData_StoryClusterId* unsafe_arena_release_story_cluster_id();
  void unsafe_arena_set_allocated_story_cluster_id(
      ::cosmo::pb::DocumentData_StoryClusterId* story_cluster_id);

  // optional .cosmo.pb.DocumentData.DocumentKeywordsInfo document_keywords_info = 51;
  bool has_document_keywords_info() const;
  void clear_document_keywords_info();
  static const int kDocumentKeywordsInfoFieldNumber = 51;
  private:
  void _slow_mutable_document_keywords_info();
  void _slow_set_allocated_document_keywords_info(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocumentKeywordsInfo** document_keywords_info);
  ::cosmo::pb::DocumentData_DocumentKeywordsInfo* _slow_release_document_keywords_info();
  public:
  const ::cosmo::pb::DocumentData_DocumentKeywordsInfo& document_keywords_info() const;
  ::cosmo::pb::DocumentData_DocumentKeywordsInfo* mutable_document_keywords_info();
  ::cosmo::pb::DocumentData_DocumentKeywordsInfo* release_document_keywords_info();
  void set_allocated_document_keywords_info(::cosmo::pb::DocumentData_DocumentKeywordsInfo* document_keywords_info);
  ::cosmo::pb::DocumentData_DocumentKeywordsInfo* unsafe_arena_release_document_keywords_info();
  void unsafe_arena_set_allocated_document_keywords_info(
      ::cosmo::pb::DocumentData_DocumentKeywordsInfo* document_keywords_info);

  // optional .cosmo.pb.DocumentData.ImagePornFea image_porn_fea = 52;
  bool has_image_porn_fea() const;
  void clear_image_porn_fea();
  static const int kImagePornFeaFieldNumber = 52;
  private:
  void _slow_mutable_image_porn_fea();
  void _slow_set_allocated_image_porn_fea(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_ImagePornFea** image_porn_fea);
  ::cosmo::pb::DocumentData_ImagePornFea* _slow_release_image_porn_fea();
  public:
  const ::cosmo::pb::DocumentData_ImagePornFea& image_porn_fea() const;
  ::cosmo::pb::DocumentData_ImagePornFea* mutable_image_porn_fea();
  ::cosmo::pb::DocumentData_ImagePornFea* release_image_porn_fea();
  void set_allocated_image_porn_fea(::cosmo::pb::DocumentData_ImagePornFea* image_porn_fea);
  ::cosmo::pb::DocumentData_ImagePornFea* unsafe_arena_release_image_porn_fea();
  void unsafe_arena_set_allocated_image_porn_fea(
      ::cosmo::pb::DocumentData_ImagePornFea* image_porn_fea);

  // optional .cosmo.pb.DocumentData.FetcherFirstmeet fetcherFirstmeet = 53;
  bool has_fetcherfirstmeet() const;
  void clear_fetcherfirstmeet();
  static const int kFetcherFirstmeetFieldNumber = 53;
  private:
  void _slow_mutable_fetcherfirstmeet();
  void _slow_set_allocated_fetcherfirstmeet(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_FetcherFirstmeet** fetcherfirstmeet);
  ::cosmo::pb::DocumentData_FetcherFirstmeet* _slow_release_fetcherfirstmeet();
  public:
  const ::cosmo::pb::DocumentData_FetcherFirstmeet& fetcherfirstmeet() const;
  ::cosmo::pb::DocumentData_FetcherFirstmeet* mutable_fetcherfirstmeet();
  ::cosmo::pb::DocumentData_FetcherFirstmeet* release_fetcherfirstmeet();
  void set_allocated_fetcherfirstmeet(::cosmo::pb::DocumentData_FetcherFirstmeet* fetcherfirstmeet);
  ::cosmo::pb::DocumentData_FetcherFirstmeet* unsafe_arena_release_fetcherfirstmeet();
  void unsafe_arena_set_allocated_fetcherfirstmeet(
      ::cosmo::pb::DocumentData_FetcherFirstmeet* fetcherfirstmeet);

  // optional .cosmo.pb.DocumentData.FetcherPubdate pubdate = 54;
  bool has_pubdate() const;
  void clear_pubdate();
  static const int kPubdateFieldNumber = 54;
  private:
  void _slow_mutable_pubdate();
  void _slow_set_allocated_pubdate(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_FetcherPubdate** pubdate);
  ::cosmo::pb::DocumentData_FetcherPubdate* _slow_release_pubdate();
  public:
  const ::cosmo::pb::DocumentData_FetcherPubdate& pubdate() const;
  ::cosmo::pb::DocumentData_FetcherPubdate* mutable_pubdate();
  ::cosmo::pb::DocumentData_FetcherPubdate* release_pubdate();
  void set_allocated_pubdate(::cosmo::pb::DocumentData_FetcherPubdate* pubdate);
  ::cosmo::pb::DocumentData_FetcherPubdate* unsafe_arena_release_pubdate();
  void unsafe_arena_set_allocated_pubdate(
      ::cosmo::pb::DocumentData_FetcherPubdate* pubdate);

  // optional .cosmo.pb.DocumentData.FreshnessData freshness_data = 55;
  bool has_freshness_data() const;
  void clear_freshness_data();
  static const int kFreshnessDataFieldNumber = 55;
  private:
  void _slow_mutable_freshness_data();
  void _slow_set_allocated_freshness_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_FreshnessData** freshness_data);
  ::cosmo::pb::DocumentData_FreshnessData* _slow_release_freshness_data();
  public:
  const ::cosmo::pb::DocumentData_FreshnessData& freshness_data() const;
  ::cosmo::pb::DocumentData_FreshnessData* mutable_freshness_data();
  ::cosmo::pb::DocumentData_FreshnessData* release_freshness_data();
  void set_allocated_freshness_data(::cosmo::pb::DocumentData_FreshnessData* freshness_data);
  ::cosmo::pb::DocumentData_FreshnessData* unsafe_arena_release_freshness_data();
  void unsafe_arena_set_allocated_freshness_data(
      ::cosmo::pb::DocumentData_FreshnessData* freshness_data);

  // optional .cosmo.pb.DocumentData.DocState state = 56;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 56;
  private:
  void _slow_mutable_state();
  void _slow_set_allocated_state(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_DocState** state);
  ::cosmo::pb::DocumentData_DocState* _slow_release_state();
  public:
  const ::cosmo::pb::DocumentData_DocState& state() const;
  ::cosmo::pb::DocumentData_DocState* mutable_state();
  ::cosmo::pb::DocumentData_DocState* release_state();
  void set_allocated_state(::cosmo::pb::DocumentData_DocState* state);
  ::cosmo::pb::DocumentData_DocState* unsafe_arena_release_state();
  void unsafe_arena_set_allocated_state(
      ::cosmo::pb::DocumentData_DocState* state);

  // optional .cosmo.pb.DocumentData.RisksFields risks_fields = 57;
  bool has_risks_fields() const;
  void clear_risks_fields();
  static const int kRisksFieldsFieldNumber = 57;
  private:
  void _slow_mutable_risks_fields();
  void _slow_set_allocated_risks_fields(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData_RisksFields** risks_fields);
  ::cosmo::pb::DocumentData_RisksFields* _slow_release_risks_fields();
  public:
  const ::cosmo::pb::DocumentData_RisksFields& risks_fields() const;
  ::cosmo::pb::DocumentData_RisksFields* mutable_risks_fields();
  ::cosmo::pb::DocumentData_RisksFields* release_risks_fields();
  void set_allocated_risks_fields(::cosmo::pb::DocumentData_RisksFields* risks_fields);
  ::cosmo::pb::DocumentData_RisksFields* unsafe_arena_release_risks_fields();
  void unsafe_arena_set_allocated_risks_fields(
      ::cosmo::pb::DocumentData_RisksFields* risks_fields);

  // optional int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // required int64 doc_id = 2;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 2;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentData)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_ok_info();
  void clear_has_ok_info();
  void set_has_news_data();
  void clear_has_news_data();
  void set_has_censor();
  void clear_has_censor();
  void set_has_user_stats();
  void clear_has_user_stats();
  void set_has_trends();
  void clear_has_trends();
  void set_has_original_info();
  void clear_has_original_info();
  void set_has_fetcher();
  void clear_has_fetcher();
  void set_has_mediametrics_fea();
  void clear_has_mediametrics_fea();
  void set_has_topic_period_stats();
  void clear_has_topic_period_stats();
  void set_has_app_filter_stats();
  void clear_has_app_filter_stats();
  void set_has_week_mediametrics_fea();
  void clear_has_week_mediametrics_fea();
  void set_has_ok_topic_event_stat();
  void clear_has_ok_topic_event_stat();
  void set_has_vk_topic_event_stat_day();
  void clear_has_vk_topic_event_stat_day();
  void set_has_vk_topic_event_stat_week();
  void clear_has_vk_topic_event_stat_week();
  void set_has_youtube_topic_event_stat_day();
  void clear_has_youtube_topic_event_stat_day();
  void set_has_youtube_topic_event_stat_week();
  void clear_has_youtube_topic_event_stat_week();
  void set_has_taped_location_stat();
  void clear_has_taped_location_stat();
  void set_has_homer_location_stat();
  void clear_has_homer_location_stat();
  void set_has_hourly_location_stat();
  void clear_has_hourly_location_stat();
  void set_has_daily_location_stat();
  void clear_has_daily_location_stat();
  void set_has_weekly_location_stat();
  void clear_has_weekly_location_stat();
  void set_has_monthly_location_stat();
  void clear_has_monthly_location_stat();
  void set_has_fetcher_geo();
  void clear_has_fetcher_geo();
  void set_has_hourly_fast_mediametrics_fea();
  void clear_has_hourly_fast_mediametrics_fea();
  void set_has_daily_fast_mediametrics_fea();
  void clear_has_daily_fast_mediametrics_fea();
  void set_has_fetcher_image();
  void clear_has_fetcher_image();
  void set_has_content_data();
  void clear_has_content_data();
  void set_has_vk_topic_event_stat_day_v2();
  void clear_has_vk_topic_event_stat_day_v2();
  void set_has_vk_topic_event_stat_week_v2();
  void clear_has_vk_topic_event_stat_week_v2();
  void set_has_youtube_topic_event_stat_day_v2();
  void clear_has_youtube_topic_event_stat_day_v2();
  void set_has_youtube_topic_event_stat_week_v2();
  void clear_has_youtube_topic_event_stat_week_v2();
  void set_has_document_i2i_stat();
  void clear_has_document_i2i_stat();
  void set_has_document_mv_stat();
  void clear_has_document_mv_stat();
  void set_has_news_tags_data();
  void clear_has_news_tags_data();
  void set_has_news_story_data();
  void clear_has_news_story_data();
  void set_has_native_target_is_active();
  void clear_has_native_target_is_active();
  void set_has_fast_location_stat();
  void clear_has_fast_location_stat();
  void set_has_content_porn_fea();
  void clear_has_content_porn_fea();
  void set_has_content_themes();
  void clear_has_content_themes();
  void set_has_story_cluster_id();
  void clear_has_story_cluster_id();
  void set_has_document_keywords_info();
  void clear_has_document_keywords_info();
  void set_has_image_porn_fea();
  void clear_has_image_porn_fea();
  void set_has_fetcherfirstmeet();
  void clear_has_fetcherfirstmeet();
  void set_has_pubdate();
  void clear_has_pubdate();
  void set_has_freshness_data();
  void clear_has_freshness_data();
  void set_has_state();
  void clear_has_state();
  void set_has_risks_fields();
  void clear_has_risks_fields();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > doc_region_ids_;
  ::cosmo::pb::DocumentData_OkInfo* ok_info_;
  ::cosmo::pb::DocumentData_NewsData* news_data_;
  ::cosmo::pb::DocumentData_Censor* censor_;
  ::cosmo::pb::DocumentData_UserStats* user_stats_;
  ::cosmo::pb::DocumentData_Trends* trends_;
  ::cosmo::pb::DocumentData_OriginalInfo* original_info_;
  ::cosmo::pb::DocumentData_Fetcher* fetcher_;
  ::cosmo::pb::DocumentData_MediametricsFea* mediametrics_fea_;
  ::cosmo::pb::DocumentData_TopicPeriodStats* topic_period_stats_;
  ::cosmo::pb::DocumentData_AppFilterStats* app_filter_stats_;
  ::cosmo::pb::DocumentData_MediametricsFea* week_mediametrics_fea_;
  ::cosmo::pb::DocumentData_TopicEventStat* ok_topic_event_stat_;
  ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day_;
  ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week_;
  ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day_;
  ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week_;
  ::cosmo::pb::DocumentData_DocumentLocationStat* taped_location_stat_;
  ::cosmo::pb::DocumentData_DocumentLocationStat* homer_location_stat_;
  ::cosmo::pb::DocumentData_DocumentLocationStat* hourly_location_stat_;
  ::cosmo::pb::DocumentData_DocumentLocationStat* daily_location_stat_;
  ::cosmo::pb::DocumentData_DocumentLocationStat* weekly_location_stat_;
  ::cosmo::pb::DocumentData_DocumentLocationStat* monthly_location_stat_;
  ::cosmo::pb::DocumentData_FetcherGeo* fetcher_geo_;
  ::cosmo::pb::DocumentData_MediametricsFea* hourly_fast_mediametrics_fea_;
  ::cosmo::pb::DocumentData_MediametricsFea* daily_fast_mediametrics_fea_;
  ::cosmo::pb::DocumentData_FetcherImage* fetcher_image_;
  ::cosmo::pb::DocumentData_ContentData* content_data_;
  ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day_v2_;
  ::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week_v2_;
  ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day_v2_;
  ::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week_v2_;
  ::cosmo::pb::DocumentData_DocumentMutualStat* document_i2i_stat_;
  ::cosmo::pb::DocumentData_DocumentMutualStat* document_mv_stat_;
  ::cosmo::pb::DocumentData_NewsTagsData* news_tags_data_;
  ::cosmo::pb::DocumentData_NewsStoryData* news_story_data_;
  ::cosmo::pb::DocumentData_NativeTargetIsActive* native_target_is_active_;
  ::cosmo::pb::DocumentData_DocumentLocationStat* fast_location_stat_;
  ::cosmo::pb::DocumentData_ContentPornFea* content_porn_fea_;
  ::cosmo::pb::DocumentData_ContentThemes* content_themes_;
  ::cosmo::pb::DocumentData_StoryClusterId* story_cluster_id_;
  ::cosmo::pb::DocumentData_DocumentKeywordsInfo* document_keywords_info_;
  ::cosmo::pb::DocumentData_ImagePornFea* image_porn_fea_;
  ::cosmo::pb::DocumentData_FetcherFirstmeet* fetcherfirstmeet_;
  ::cosmo::pb::DocumentData_FetcherPubdate* pubdate_;
  ::cosmo::pb::DocumentData_FreshnessData* freshness_data_;
  ::cosmo::pb::DocumentData_DocState* state_;
  ::cosmo::pb::DocumentData_RisksFields* risks_fields_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 doc_id_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentSourceLink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.DocumentSourceLink) */ {
 public:
  DocumentSourceLink();
  virtual ~DocumentSourceLink();

  DocumentSourceLink(const DocumentSourceLink& from);

  inline DocumentSourceLink& operator=(const DocumentSourceLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentSourceLink(DocumentSourceLink&& from) noexcept
    : DocumentSourceLink() {
    *this = ::std::move(from);
  }

  inline DocumentSourceLink& operator=(DocumentSourceLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentSourceLink& default_instance();

  static inline const DocumentSourceLink* internal_default_instance() {
    return reinterpret_cast<const DocumentSourceLink*>(
               &_DocumentSourceLink_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    129;

  void UnsafeArenaSwap(DocumentSourceLink* other);
  void Swap(DocumentSourceLink* other);
  friend void swap(DocumentSourceLink& a, DocumentSourceLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentSourceLink* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentSourceLink* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentSourceLink& from);
  void MergeFrom(const DocumentSourceLink& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentSourceLink* other);
  protected:
  explicit DocumentSourceLink(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // required int64 doc_id = 2;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 2;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.DocumentSourceLink)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_doc_id();
  void clear_has_doc_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 doc_id_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageEvent_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.StorageEvent.Data) */ {
 public:
  StorageEvent_Data();
  virtual ~StorageEvent_Data();

  StorageEvent_Data(const StorageEvent_Data& from);

  inline StorageEvent_Data& operator=(const StorageEvent_Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StorageEvent_Data(StorageEvent_Data&& from) noexcept
    : StorageEvent_Data() {
    *this = ::std::move(from);
  }

  inline StorageEvent_Data& operator=(StorageEvent_Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageEvent_Data& default_instance();

  static inline const StorageEvent_Data* internal_default_instance() {
    return reinterpret_cast<const StorageEvent_Data*>(
               &_StorageEvent_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    130;

  void UnsafeArenaSwap(StorageEvent_Data* other);
  void Swap(StorageEvent_Data* other);
  friend void swap(StorageEvent_Data& a, StorageEvent_Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StorageEvent_Data* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageEvent_Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageEvent_Data& from);
  void MergeFrom(const StorageEvent_Data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageEvent_Data* other);
  protected:
  explicit StorageEvent_Data(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.UserData user_data = 1;
  bool has_user_data() const;
  void clear_user_data();
  static const int kUserDataFieldNumber = 1;
  private:
  void _slow_mutable_user_data();
  void _slow_set_allocated_user_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::UserData** user_data);
  ::cosmo::pb::UserData* _slow_release_user_data();
  public:
  const ::cosmo::pb::UserData& user_data() const;
  ::cosmo::pb::UserData* mutable_user_data();
  ::cosmo::pb::UserData* release_user_data();
  void set_allocated_user_data(::cosmo::pb::UserData* user_data);
  ::cosmo::pb::UserData* unsafe_arena_release_user_data();
  void unsafe_arena_set_allocated_user_data(
      ::cosmo::pb::UserData* user_data);

  // optional .cosmo.pb.SourceData source_data = 2;
  bool has_source_data() const;
  void clear_source_data();
  static const int kSourceDataFieldNumber = 2;
  private:
  void _slow_mutable_source_data();
  void _slow_set_allocated_source_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::SourceData** source_data);
  ::cosmo::pb::SourceData* _slow_release_source_data();
  public:
  const ::cosmo::pb::SourceData& source_data() const;
  ::cosmo::pb::SourceData* mutable_source_data();
  ::cosmo::pb::SourceData* release_source_data();
  void set_allocated_source_data(::cosmo::pb::SourceData* source_data);
  ::cosmo::pb::SourceData* unsafe_arena_release_source_data();
  void unsafe_arena_set_allocated_source_data(
      ::cosmo::pb::SourceData* source_data);

  // optional .cosmo.pb.DocumentData document_data = 3;
  bool has_document_data() const;
  void clear_document_data();
  static const int kDocumentDataFieldNumber = 3;
  private:
  void _slow_mutable_document_data();
  void _slow_set_allocated_document_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentData** document_data);
  ::cosmo::pb::DocumentData* _slow_release_document_data();
  public:
  const ::cosmo::pb::DocumentData& document_data() const;
  ::cosmo::pb::DocumentData* mutable_document_data();
  ::cosmo::pb::DocumentData* release_document_data();
  void set_allocated_document_data(::cosmo::pb::DocumentData* document_data);
  ::cosmo::pb::DocumentData* unsafe_arena_release_document_data();
  void unsafe_arena_set_allocated_document_data(
      ::cosmo::pb::DocumentData* document_data);

  // optional .cosmo.pb.DocumentSourceLink document_source_link = 4;
  bool has_document_source_link() const;
  void clear_document_source_link();
  static const int kDocumentSourceLinkFieldNumber = 4;
  private:
  void _slow_mutable_document_source_link();
  void _slow_set_allocated_document_source_link(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::DocumentSourceLink** document_source_link);
  ::cosmo::pb::DocumentSourceLink* _slow_release_document_source_link();
  public:
  const ::cosmo::pb::DocumentSourceLink& document_source_link() const;
  ::cosmo::pb::DocumentSourceLink* mutable_document_source_link();
  ::cosmo::pb::DocumentSourceLink* release_document_source_link();
  void set_allocated_document_source_link(::cosmo::pb::DocumentSourceLink* document_source_link);
  ::cosmo::pb::DocumentSourceLink* unsafe_arena_release_document_source_link();
  void unsafe_arena_set_allocated_document_source_link(
      ::cosmo::pb::DocumentSourceLink* document_source_link);

  // @@protoc_insertion_point(class_scope:cosmo.pb.StorageEvent.Data)
 private:
  void set_has_user_data();
  void clear_has_user_data();
  void set_has_source_data();
  void clear_has_source_data();
  void set_has_document_data();
  void clear_has_document_data();
  void set_has_document_source_link();
  void clear_has_document_source_link();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::UserData* user_data_;
  ::cosmo::pb::SourceData* source_data_;
  ::cosmo::pb::DocumentData* document_data_;
  ::cosmo::pb::DocumentSourceLink* document_source_link_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.StorageEvent) */ {
 public:
  StorageEvent();
  virtual ~StorageEvent();

  StorageEvent(const StorageEvent& from);

  inline StorageEvent& operator=(const StorageEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StorageEvent(StorageEvent&& from) noexcept
    : StorageEvent() {
    *this = ::std::move(from);
  }

  inline StorageEvent& operator=(StorageEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageEvent& default_instance();

  static inline const StorageEvent* internal_default_instance() {
    return reinterpret_cast<const StorageEvent*>(
               &_StorageEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    131;

  void UnsafeArenaSwap(StorageEvent* other);
  void Swap(StorageEvent* other);
  friend void swap(StorageEvent& a, StorageEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StorageEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  StorageEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorageEvent& from);
  void MergeFrom(const StorageEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorageEvent* other);
  protected:
  explicit StorageEvent(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StorageEvent_Data Data;

  typedef StorageEvent_Type Type;
  static const Type CREATE_OR_UPDATE =
    StorageEvent_Type_CREATE_OR_UPDATE;
  static const Type DELETE =
    StorageEvent_Type_DELETE;
  static inline bool Type_IsValid(int value) {
    return StorageEvent_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StorageEvent_Type_Type_MIN;
  static const Type Type_MAX =
    StorageEvent_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StorageEvent_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StorageEvent_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StorageEvent_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StorageEvent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .cosmo.pb.StorageEvent.Data data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  private:
  void _slow_mutable_data();
  void _slow_set_allocated_data(
      ::google::protobuf::Arena* message_arena, ::cosmo::pb::StorageEvent_Data** data);
  ::cosmo::pb::StorageEvent_Data* _slow_release_data();
  public:
  const ::cosmo::pb::StorageEvent_Data& data() const;
  ::cosmo::pb::StorageEvent_Data* mutable_data();
  ::cosmo::pb::StorageEvent_Data* release_data();
  void set_allocated_data(::cosmo::pb::StorageEvent_Data* data);
  ::cosmo::pb::StorageEvent_Data* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::cosmo::pb::StorageEvent_Data* data);

  // optional .cosmo.pb.StorageEvent.Type type = 1 [default = CREATE_OR_UPDATE];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::cosmo::pb::StorageEvent_Type type() const;
  void set_type(::cosmo::pb::StorageEvent_Type value);

  // required int32 event_time = 2;
  bool has_event_time() const;
  void clear_event_time();
  static const int kEventTimeFieldNumber = 2;
  ::google::protobuf::int32 event_time() const;
  void set_event_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.StorageEvent)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_event_time();
  void clear_has_event_time();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::StorageEvent_Data* data_;
  int type_;
  ::google::protobuf::int32 event_time_;
  friend struct protobuf_cosmo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserData_OriginalInfo

// optional string id = 1;
inline bool UserData_OriginalInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_OriginalInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_OriginalInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_OriginalInfo::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_id();
}
inline const ::std::string& UserData_OriginalInfo::id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.OriginalInfo.id)
  return id_.Get();
}
inline void UserData_OriginalInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.OriginalInfo.id)
}
#if LANG_CXX11
inline void UserData_OriginalInfo::set_id(::std::string&& value) {
  set_has_id();
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.OriginalInfo.id)
}
#endif
inline void UserData_OriginalInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.OriginalInfo.id)
}
inline void UserData_OriginalInfo::set_id(const char* value,
    size_t size) {
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.OriginalInfo.id)
}
inline ::std::string* UserData_OriginalInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.OriginalInfo.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_OriginalInfo::release_id() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.OriginalInfo.id)
  clear_has_id();
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_OriginalInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.OriginalInfo.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_id();
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserData_OriginalInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.OriginalInfo.id)
}
inline void UserData_OriginalInfo::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.OriginalInfo.id)
}

// -------------------------------------------------------------------

// UserData_OkInfo

// required int64 user_id = 1;
inline bool UserData_OkInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_OkInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_OkInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_OkInfo::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 UserData_OkInfo::user_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.OkInfo.user_id)
  return user_id_;
}
inline void UserData_OkInfo::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.OkInfo.user_id)
}

// -------------------------------------------------------------------

// UserData_SocDemFea

// optional int32 gender = 1 [default = 0];
inline bool UserData_SocDemFea::has_gender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SocDemFea::set_has_gender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SocDemFea::clear_has_gender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SocDemFea::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 UserData_SocDemFea::gender() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SocDemFea.gender)
  return gender_;
}
inline void UserData_SocDemFea::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SocDemFea.gender)
}

// optional int32 age = 2;
inline bool UserData_SocDemFea::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_SocDemFea::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_SocDemFea::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_SocDemFea::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 UserData_SocDemFea::age() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SocDemFea.age)
  return age_;
}
inline void UserData_SocDemFea::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SocDemFea.age)
}

// -------------------------------------------------------------------

// UserData_DetiRecos

// repeated int64 slim = 1;
inline int UserData_DetiRecos::slim_size() const {
  return slim_.size();
}
inline void UserData_DetiRecos::clear_slim() {
  slim_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::slim(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.slim)
  return slim_.Get(index);
}
inline void UserData_DetiRecos::set_slim(int index, ::google::protobuf::int64 value) {
  slim_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.slim)
}
inline void UserData_DetiRecos::add_slim(::google::protobuf::int64 value) {
  slim_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.slim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::slim() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.slim)
  return slim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_slim() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.slim)
  return &slim_;
}

// repeated int64 wrmf = 2;
inline int UserData_DetiRecos::wrmf_size() const {
  return wrmf_.size();
}
inline void UserData_DetiRecos::clear_wrmf() {
  wrmf_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::wrmf(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.wrmf)
  return wrmf_.Get(index);
}
inline void UserData_DetiRecos::set_wrmf(int index, ::google::protobuf::int64 value) {
  wrmf_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.wrmf)
}
inline void UserData_DetiRecos::add_wrmf(::google::protobuf::int64 value) {
  wrmf_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.wrmf)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::wrmf() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.wrmf)
  return wrmf_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_wrmf() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.wrmf)
  return &wrmf_;
}

// repeated int64 als_tuned = 3;
inline int UserData_DetiRecos::als_tuned_size() const {
  return als_tuned_.size();
}
inline void UserData_DetiRecos::clear_als_tuned() {
  als_tuned_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::als_tuned(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_tuned)
  return als_tuned_.Get(index);
}
inline void UserData_DetiRecos::set_als_tuned(int index, ::google::protobuf::int64 value) {
  als_tuned_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_tuned)
}
inline void UserData_DetiRecos::add_als_tuned(::google::protobuf::int64 value) {
  als_tuned_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_tuned)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_tuned() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_tuned)
  return als_tuned_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_tuned() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_tuned)
  return &als_tuned_;
}

// repeated int64 als_large = 4;
inline int UserData_DetiRecos::als_large_size() const {
  return als_large_.size();
}
inline void UserData_DetiRecos::clear_als_large() {
  als_large_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::als_large(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_large)
  return als_large_.Get(index);
}
inline void UserData_DetiRecos::set_als_large(int index, ::google::protobuf::int64 value) {
  als_large_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_large)
}
inline void UserData_DetiRecos::add_als_large(::google::protobuf::int64 value) {
  als_large_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_large)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_large() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_large)
  return als_large_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_large() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_large)
  return &als_large_;
}

// repeated int64 svd = 5;
inline int UserData_DetiRecos::svd_size() const {
  return svd_.size();
}
inline void UserData_DetiRecos::clear_svd() {
  svd_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::svd(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.svd)
  return svd_.Get(index);
}
inline void UserData_DetiRecos::set_svd(int index, ::google::protobuf::int64 value) {
  svd_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.svd)
}
inline void UserData_DetiRecos::add_svd(::google::protobuf::int64 value) {
  svd_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.svd)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::svd() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.svd)
  return svd_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_svd() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.svd)
  return &svd_;
}

// repeated int64 svd_stupid = 6;
inline int UserData_DetiRecos::svd_stupid_size() const {
  return svd_stupid_.size();
}
inline void UserData_DetiRecos::clear_svd_stupid() {
  svd_stupid_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::svd_stupid(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return svd_stupid_.Get(index);
}
inline void UserData_DetiRecos::set_svd_stupid(int index, ::google::protobuf::int64 value) {
  svd_stupid_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.svd_stupid)
}
inline void UserData_DetiRecos::add_svd_stupid(::google::protobuf::int64 value) {
  svd_stupid_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.svd_stupid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::svd_stupid() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return svd_stupid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_svd_stupid() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.svd_stupid)
  return &svd_stupid_;
}

// repeated int64 als_by_liker = 7;
inline int UserData_DetiRecos::als_by_liker_size() const {
  return als_by_liker_.size();
}
inline void UserData_DetiRecos::clear_als_by_liker() {
  als_by_liker_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::als_by_liker(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return als_by_liker_.Get(index);
}
inline void UserData_DetiRecos::set_als_by_liker(int index, ::google::protobuf::int64 value) {
  als_by_liker_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_by_liker)
}
inline void UserData_DetiRecos::add_als_by_liker(::google::protobuf::int64 value) {
  als_by_liker_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_by_liker)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_by_liker() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return als_by_liker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_by_liker() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_by_liker)
  return &als_by_liker_;
}

// repeated int64 als_by_homer = 8;
inline int UserData_DetiRecos::als_by_homer_size() const {
  return als_by_homer_.size();
}
inline void UserData_DetiRecos::clear_als_by_homer() {
  als_by_homer_.Clear();
}
inline ::google::protobuf::int64 UserData_DetiRecos::als_by_homer(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return als_by_homer_.Get(index);
}
inline void UserData_DetiRecos::set_als_by_homer(int index, ::google::protobuf::int64 value) {
  als_by_homer_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.DetiRecos.als_by_homer)
}
inline void UserData_DetiRecos::add_als_by_homer(::google::protobuf::int64 value) {
  als_by_homer_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.DetiRecos.als_by_homer)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_DetiRecos::als_by_homer() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return als_by_homer_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_DetiRecos::mutable_als_by_homer() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.DetiRecos.als_by_homer)
  return &als_by_homer_;
}

// -------------------------------------------------------------------

// UserData_AlsFea

// repeated float als = 1;
inline int UserData_AlsFea::als_size() const {
  return als_.size();
}
inline void UserData_AlsFea::clear_als() {
  als_.Clear();
}
inline float UserData_AlsFea::als(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.AlsFea.als)
  return als_.Get(index);
}
inline void UserData_AlsFea::set_als(int index, float value) {
  als_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.AlsFea.als)
}
inline void UserData_AlsFea::add_als(float value) {
  als_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.AlsFea.als)
}
inline const ::google::protobuf::RepeatedField< float >&
UserData_AlsFea::als() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.AlsFea.als)
  return als_;
}
inline ::google::protobuf::RepeatedField< float >*
UserData_AlsFea::mutable_als() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.AlsFea.als)
  return &als_;
}

// -------------------------------------------------------------------

// UserData_AlsItemsBiases

// repeated float fea = 1;
inline int UserData_AlsItemsBiases::fea_size() const {
  return fea_.size();
}
inline void UserData_AlsItemsBiases::clear_fea() {
  fea_.Clear();
}
inline float UserData_AlsItemsBiases::fea(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.AlsItemsBiases.fea)
  return fea_.Get(index);
}
inline void UserData_AlsItemsBiases::set_fea(int index, float value) {
  fea_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.AlsItemsBiases.fea)
}
inline void UserData_AlsItemsBiases::add_fea(float value) {
  fea_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.AlsItemsBiases.fea)
}
inline const ::google::protobuf::RepeatedField< float >&
UserData_AlsItemsBiases::fea() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.AlsItemsBiases.fea)
  return fea_;
}
inline ::google::protobuf::RepeatedField< float >*
UserData_AlsItemsBiases::mutable_fea() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.AlsItemsBiases.fea)
  return &fea_;
}

// -------------------------------------------------------------------

// UserData_NewsSources

// repeated float weight = 1;
inline int UserData_NewsSources::weight_size() const {
  return weight_.size();
}
inline void UserData_NewsSources::clear_weight() {
  weight_.Clear();
}
inline float UserData_NewsSources::weight(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.NewsSources.weight)
  return weight_.Get(index);
}
inline void UserData_NewsSources::set_weight(int index, float value) {
  weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.NewsSources.weight)
}
inline void UserData_NewsSources::add_weight(float value) {
  weight_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.NewsSources.weight)
}
inline const ::google::protobuf::RepeatedField< float >&
UserData_NewsSources::weight() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.NewsSources.weight)
  return weight_;
}
inline ::google::protobuf::RepeatedField< float >*
UserData_NewsSources::mutable_weight() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.NewsSources.weight)
  return &weight_;
}

// repeated int64 id = 2;
inline int UserData_NewsSources::id_size() const {
  return id_.size();
}
inline void UserData_NewsSources::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int64 UserData_NewsSources::id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.NewsSources.id)
  return id_.Get(index);
}
inline void UserData_NewsSources::set_id(int index, ::google::protobuf::int64 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.NewsSources.id)
}
inline void UserData_NewsSources::add_id(::google::protobuf::int64 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.NewsSources.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_NewsSources::id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.NewsSources.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_NewsSources::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.NewsSources.id)
  return &id_;
}

// -------------------------------------------------------------------

// UserData_Stats_SourceStats

// required int64 source_id = 1;
inline bool UserData_Stats_SourceStats::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_Stats_SourceStats::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_Stats_SourceStats::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 UserData_Stats_SourceStats::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.source_id)
  return source_id_;
}
inline void UserData_Stats_SourceStats::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.source_id)
}

// optional int64 category_id = 2;
inline bool UserData_Stats_SourceStats::has_category_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_category_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_Stats_SourceStats::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_Stats_SourceStats::clear_category_id() {
  category_id_ = GOOGLE_LONGLONG(0);
  clear_has_category_id();
}
inline ::google::protobuf::int64 UserData_Stats_SourceStats::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.category_id)
  return category_id_;
}
inline void UserData_Stats_SourceStats::set_category_id(::google::protobuf::int64 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.category_id)
}

// optional int32 views = 3;
inline bool UserData_Stats_SourceStats::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_Stats_SourceStats::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_Stats_SourceStats::clear_views() {
  views_ = 0;
  clear_has_views();
}
inline ::google::protobuf::int32 UserData_Stats_SourceStats::views() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.views)
  return views_;
}
inline void UserData_Stats_SourceStats::set_views(::google::protobuf::int32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.views)
}

// optional int32 opens = 4;
inline bool UserData_Stats_SourceStats::has_opens() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_opens() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_Stats_SourceStats::clear_has_opens() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_Stats_SourceStats::clear_opens() {
  opens_ = 0;
  clear_has_opens();
}
inline ::google::protobuf::int32 UserData_Stats_SourceStats::opens() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.opens)
  return opens_;
}
inline void UserData_Stats_SourceStats::set_opens(::google::protobuf::int32 value) {
  set_has_opens();
  opens_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.opens)
}

// optional int32 likes = 5;
inline bool UserData_Stats_SourceStats::has_likes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_likes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData_Stats_SourceStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData_Stats_SourceStats::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
inline ::google::protobuf::int32 UserData_Stats_SourceStats::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.likes)
  return likes_;
}
inline void UserData_Stats_SourceStats::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.likes)
}

// optional int32 dislikes = 6;
inline bool UserData_Stats_SourceStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserData_Stats_SourceStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserData_Stats_SourceStats::clear_dislikes() {
  dislikes_ = 0;
  clear_has_dislikes();
}
inline ::google::protobuf::int32 UserData_Stats_SourceStats::dislikes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.dislikes)
  return dislikes_;
}
inline void UserData_Stats_SourceStats::set_dislikes(::google::protobuf::int32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.dislikes)
}

// optional int32 shares = 7;
inline bool UserData_Stats_SourceStats::has_shares() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserData_Stats_SourceStats::set_has_shares() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserData_Stats_SourceStats::clear_has_shares() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserData_Stats_SourceStats::clear_shares() {
  shares_ = 0;
  clear_has_shares();
}
inline ::google::protobuf::int32 UserData_Stats_SourceStats::shares() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.SourceStats.shares)
  return shares_;
}
inline void UserData_Stats_SourceStats::set_shares(::google::protobuf::int32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.SourceStats.shares)
}

// -------------------------------------------------------------------

// UserData_Stats

// repeated .cosmo.pb.UserData.Stats.SourceStats sources_stats = 1;
inline int UserData_Stats::sources_stats_size() const {
  return sources_stats_.size();
}
inline void UserData_Stats::clear_sources_stats() {
  sources_stats_.Clear();
}
inline const ::cosmo::pb::UserData_Stats_SourceStats& UserData_Stats::sources_stats(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Get(index);
}
inline ::cosmo::pb::UserData_Stats_SourceStats* UserData_Stats::mutable_sources_stats(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Mutable(index);
}
inline ::cosmo::pb::UserData_Stats_SourceStats* UserData_Stats::add_sources_stats() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >*
UserData_Stats::mutable_sources_stats() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.Stats.sources_stats)
  return &sources_stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_Stats_SourceStats >&
UserData_Stats::sources_stats() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.Stats.sources_stats)
  return sources_stats_;
}

// optional uint32 version = 2;
inline bool UserData_Stats::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_Stats::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_Stats::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_Stats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_Stats::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.Stats.version)
  return version_;
}
inline void UserData_Stats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.Stats.version)
}

// -------------------------------------------------------------------

// UserData_SourcesWebStats_SourceVisit

// required int64 source_id = 1;
inline bool UserData_SourcesWebStats_SourceVisit::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SourcesWebStats_SourceVisit::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SourcesWebStats_SourceVisit::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SourcesWebStats_SourceVisit::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 UserData_SourcesWebStats_SourceVisit::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisit.source_id)
  return source_id_;
}
inline void UserData_SourcesWebStats_SourceVisit::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.SourceVisit.source_id)
}

// required int32 visits = 2;
inline bool UserData_SourcesWebStats_SourceVisit::has_visits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_SourcesWebStats_SourceVisit::set_has_visits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_SourcesWebStats_SourceVisit::clear_has_visits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_SourcesWebStats_SourceVisit::clear_visits() {
  visits_ = 0;
  clear_has_visits();
}
inline ::google::protobuf::int32 UserData_SourcesWebStats_SourceVisit::visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisit.visits)
  return visits_;
}
inline void UserData_SourcesWebStats_SourceVisit::set_visits(::google::protobuf::int32 value) {
  set_has_visits();
  visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.SourceVisit.visits)
}

// -------------------------------------------------------------------

// UserData_SourcesWebStats

// repeated .cosmo.pb.UserData.SourcesWebStats.SourceVisit SourceVisits = 1;
inline int UserData_SourcesWebStats::sourcevisits_size() const {
  return sourcevisits_.size();
}
inline void UserData_SourcesWebStats::clear_sourcevisits() {
  sourcevisits_.Clear();
}
inline const ::cosmo::pb::UserData_SourcesWebStats_SourceVisit& UserData_SourcesWebStats::sourcevisits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Get(index);
}
inline ::cosmo::pb::UserData_SourcesWebStats_SourceVisit* UserData_SourcesWebStats::mutable_sourcevisits(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Mutable(index);
}
inline ::cosmo::pb::UserData_SourcesWebStats_SourceVisit* UserData_SourcesWebStats::add_sourcevisits() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >*
UserData_SourcesWebStats::mutable_sourcevisits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return &sourcevisits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SourcesWebStats_SourceVisit >&
UserData_SourcesWebStats::sourcevisits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SourcesWebStats.SourceVisits)
  return sourcevisits_;
}

// optional uint32 version = 2;
inline bool UserData_SourcesWebStats::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SourcesWebStats::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SourcesWebStats::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SourcesWebStats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_SourcesWebStats::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SourcesWebStats.version)
  return version_;
}
inline void UserData_SourcesWebStats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SourcesWebStats.version)
}

// -------------------------------------------------------------------

// UserData_UserLinks

// optional string vid = 1;
inline bool UserData_UserLinks::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserLinks::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserLinks::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserLinks::clear_vid() {
  vid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_vid();
}
inline const ::std::string& UserData_UserLinks::vid() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.vid)
  return vid_.Get();
}
inline void UserData_UserLinks::set_vid(const ::std::string& value) {
  set_has_vid();
  vid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.vid)
}
#if LANG_CXX11
inline void UserData_UserLinks::set_vid(::std::string&& value) {
  set_has_vid();
  vid_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.vid)
}
#endif
inline void UserData_UserLinks::set_vid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vid();
  vid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.vid)
}
inline void UserData_UserLinks::set_vid(const char* value,
    size_t size) {
  set_has_vid();
  vid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.vid)
}
inline ::std::string* UserData_UserLinks::mutable_vid() {
  set_has_vid();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.vid)
  return vid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserLinks::release_vid() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.vid)
  clear_has_vid();
  return vid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserLinks::unsafe_arena_release_vid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserLinks.vid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_vid();
  return vid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserData_UserLinks::set_allocated_vid(::std::string* vid) {
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.vid)
}
inline void UserData_UserLinks::unsafe_arena_set_allocated_vid(
    ::std::string* vid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (vid != NULL) {
    set_has_vid();
  } else {
    clear_has_vid();
  }
  vid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      vid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserLinks.vid)
}

// optional string mail = 2;
inline bool UserData_UserLinks::has_mail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserLinks::set_has_mail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserLinks::clear_has_mail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserLinks::clear_mail() {
  mail_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_mail();
}
inline const ::std::string& UserData_UserLinks::mail() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.mail)
  return mail_.Get();
}
inline void UserData_UserLinks::set_mail(const ::std::string& value) {
  set_has_mail();
  mail_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.mail)
}
#if LANG_CXX11
inline void UserData_UserLinks::set_mail(::std::string&& value) {
  set_has_mail();
  mail_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.mail)
}
#endif
inline void UserData_UserLinks::set_mail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mail();
  mail_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.mail)
}
inline void UserData_UserLinks::set_mail(const char* value,
    size_t size) {
  set_has_mail();
  mail_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.mail)
}
inline ::std::string* UserData_UserLinks::mutable_mail() {
  set_has_mail();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.mail)
  return mail_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserLinks::release_mail() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.mail)
  clear_has_mail();
  return mail_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserLinks::unsafe_arena_release_mail() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserLinks.mail)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_mail();
  return mail_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserData_UserLinks::set_allocated_mail(::std::string* mail) {
  if (mail != NULL) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
  mail_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mail,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.mail)
}
inline void UserData_UserLinks::unsafe_arena_set_allocated_mail(
    ::std::string* mail) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (mail != NULL) {
    set_has_mail();
  } else {
    clear_has_mail();
  }
  mail_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      mail, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserLinks.mail)
}

// optional string ok = 3;
inline bool UserData_UserLinks::has_ok() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserLinks::set_has_ok() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserLinks::clear_has_ok() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserLinks::clear_ok() {
  ok_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_ok();
}
inline const ::std::string& UserData_UserLinks::ok() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.ok)
  return ok_.Get();
}
inline void UserData_UserLinks::set_ok(const ::std::string& value) {
  set_has_ok();
  ok_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.ok)
}
#if LANG_CXX11
inline void UserData_UserLinks::set_ok(::std::string&& value) {
  set_has_ok();
  ok_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.ok)
}
#endif
inline void UserData_UserLinks::set_ok(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ok();
  ok_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.ok)
}
inline void UserData_UserLinks::set_ok(const char* value,
    size_t size) {
  set_has_ok();
  ok_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.ok)
}
inline ::std::string* UserData_UserLinks::mutable_ok() {
  set_has_ok();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.ok)
  return ok_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserLinks::release_ok() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.ok)
  clear_has_ok();
  return ok_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserLinks::unsafe_arena_release_ok() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserLinks.ok)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_ok();
  return ok_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserData_UserLinks::set_allocated_ok(::std::string* ok) {
  if (ok != NULL) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  ok_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ok,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.ok)
}
inline void UserData_UserLinks::unsafe_arena_set_allocated_ok(
    ::std::string* ok) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ok != NULL) {
    set_has_ok();
  } else {
    clear_has_ok();
  }
  ok_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ok, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserLinks.ok)
}

// optional string vk = 4;
inline bool UserData_UserLinks::has_vk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_UserLinks::set_has_vk() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_UserLinks::clear_has_vk() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_UserLinks::clear_vk() {
  vk_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_vk();
}
inline const ::std::string& UserData_UserLinks::vk() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserLinks.vk)
  return vk_.Get();
}
inline void UserData_UserLinks::set_vk(const ::std::string& value) {
  set_has_vk();
  vk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserLinks.vk)
}
#if LANG_CXX11
inline void UserData_UserLinks::set_vk(::std::string&& value) {
  set_has_vk();
  vk_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserLinks.vk)
}
#endif
inline void UserData_UserLinks::set_vk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vk();
  vk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserLinks.vk)
}
inline void UserData_UserLinks::set_vk(const char* value,
    size_t size) {
  set_has_vk();
  vk_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserLinks.vk)
}
inline ::std::string* UserData_UserLinks::mutable_vk() {
  set_has_vk();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserLinks.vk)
  return vk_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserLinks::release_vk() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserLinks.vk)
  clear_has_vk();
  return vk_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserLinks::unsafe_arena_release_vk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserLinks.vk)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_vk();
  return vk_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserData_UserLinks::set_allocated_vk(::std::string* vk) {
  if (vk != NULL) {
    set_has_vk();
  } else {
    clear_has_vk();
  }
  vk_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vk,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserLinks.vk)
}
inline void UserData_UserLinks::unsafe_arena_set_allocated_vk(
    ::std::string* vk) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (vk != NULL) {
    set_has_vk();
  } else {
    clear_has_vk();
  }
  vk_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      vk, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserLinks.vk)
}

// -------------------------------------------------------------------

// UserData_UserClusters

// optional uint32 user_cluster_som = 1;
inline bool UserData_UserClusters::has_user_cluster_som() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserClusters::set_has_user_cluster_som() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserClusters::clear_has_user_cluster_som() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserClusters::clear_user_cluster_som() {
  user_cluster_som_ = 0u;
  clear_has_user_cluster_som();
}
inline ::google::protobuf::uint32 UserData_UserClusters::user_cluster_som() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserClusters.user_cluster_som)
  return user_cluster_som_;
}
inline void UserData_UserClusters::set_user_cluster_som(::google::protobuf::uint32 value) {
  set_has_user_cluster_som();
  user_cluster_som_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserClusters.user_cluster_som)
}

// -------------------------------------------------------------------

// UserData_SimilarSites_SimilarSite

// required int64 id = 1;
inline bool UserData_SimilarSites_SimilarSite::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SimilarSites_SimilarSite::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SimilarSites_SimilarSite::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SimilarSites_SimilarSite::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 UserData_SimilarSites_SimilarSite::id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SimilarSites.SimilarSite.id)
  return id_;
}
inline void UserData_SimilarSites_SimilarSite::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SimilarSites.SimilarSite.id)
}

// required float weight = 2;
inline bool UserData_SimilarSites_SimilarSite::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_SimilarSites_SimilarSite::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_SimilarSites_SimilarSite::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_SimilarSites_SimilarSite::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float UserData_SimilarSites_SimilarSite::weight() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SimilarSites.SimilarSite.weight)
  return weight_;
}
inline void UserData_SimilarSites_SimilarSite::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SimilarSites.SimilarSite.weight)
}

// -------------------------------------------------------------------

// UserData_SimilarSites

// repeated .cosmo.pb.UserData.SimilarSites.SimilarSite similar_site = 1;
inline int UserData_SimilarSites::similar_site_size() const {
  return similar_site_.size();
}
inline void UserData_SimilarSites::clear_similar_site() {
  similar_site_.Clear();
}
inline const ::cosmo::pb::UserData_SimilarSites_SimilarSite& UserData_SimilarSites::similar_site(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SimilarSites.similar_site)
  return similar_site_.Get(index);
}
inline ::cosmo::pb::UserData_SimilarSites_SimilarSite* UserData_SimilarSites::mutable_similar_site(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.SimilarSites.similar_site)
  return similar_site_.Mutable(index);
}
inline ::cosmo::pb::UserData_SimilarSites_SimilarSite* UserData_SimilarSites::add_similar_site() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SimilarSites.similar_site)
  return similar_site_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SimilarSites_SimilarSite >*
UserData_SimilarSites::mutable_similar_site() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SimilarSites.similar_site)
  return &similar_site_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SimilarSites_SimilarSite >&
UserData_SimilarSites::similar_site() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SimilarSites.similar_site)
  return similar_site_;
}

// optional uint32 version = 2;
inline bool UserData_SimilarSites::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SimilarSites::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SimilarSites::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SimilarSites::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_SimilarSites::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SimilarSites.version)
  return version_;
}
inline void UserData_SimilarSites::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SimilarSites.version)
}

// -------------------------------------------------------------------

// UserData_ContentThemes

// optional uint32 version = 1;
inline bool UserData_ContentThemes::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_ContentThemes::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_ContentThemes::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_ContentThemes::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_ContentThemes::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ContentThemes.version)
  return version_;
}
inline void UserData_ContentThemes::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.ContentThemes.version)
}

// optional uint32 model_version = 2;
inline bool UserData_ContentThemes::has_model_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_ContentThemes::set_has_model_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_ContentThemes::clear_has_model_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_ContentThemes::clear_model_version() {
  model_version_ = 0u;
  clear_has_model_version();
}
inline ::google::protobuf::uint32 UserData_ContentThemes::model_version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ContentThemes.model_version)
  return model_version_;
}
inline void UserData_ContentThemes::set_model_version(::google::protobuf::uint32 value) {
  set_has_model_version();
  model_version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.ContentThemes.model_version)
}

// optional uint32 urls = 3;
inline bool UserData_ContentThemes::has_urls() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_ContentThemes::set_has_urls() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_ContentThemes::clear_has_urls() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_ContentThemes::clear_urls() {
  urls_ = 0u;
  clear_has_urls();
}
inline ::google::protobuf::uint32 UserData_ContentThemes::urls() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ContentThemes.urls)
  return urls_;
}
inline void UserData_ContentThemes::set_urls(::google::protobuf::uint32 value) {
  set_has_urls();
  urls_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.ContentThemes.urls)
}

// repeated float themes_vector = 4;
inline int UserData_ContentThemes::themes_vector_size() const {
  return themes_vector_.size();
}
inline void UserData_ContentThemes::clear_themes_vector() {
  themes_vector_.Clear();
}
inline float UserData_ContentThemes::themes_vector(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ContentThemes.themes_vector)
  return themes_vector_.Get(index);
}
inline void UserData_ContentThemes::set_themes_vector(int index, float value) {
  themes_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.ContentThemes.themes_vector)
}
inline void UserData_ContentThemes::add_themes_vector(float value) {
  themes_vector_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.ContentThemes.themes_vector)
}
inline const ::google::protobuf::RepeatedField< float >&
UserData_ContentThemes::themes_vector() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.ContentThemes.themes_vector)
  return themes_vector_;
}
inline ::google::protobuf::RepeatedField< float >*
UserData_ContentThemes::mutable_themes_vector() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.ContentThemes.themes_vector)
  return &themes_vector_;
}

// -------------------------------------------------------------------

// UserData_StaticRecos

// optional uint32 version = 1;
inline bool UserData_StaticRecos::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_StaticRecos::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_StaticRecos::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_StaticRecos::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_StaticRecos::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.StaticRecos.version)
  return version_;
}
inline void UserData_StaticRecos::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.StaticRecos.version)
}

// repeated int64 source_id = 2;
inline int UserData_StaticRecos::source_id_size() const {
  return source_id_.size();
}
inline void UserData_StaticRecos::clear_source_id() {
  source_id_.Clear();
}
inline ::google::protobuf::int64 UserData_StaticRecos::source_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.StaticRecos.source_id)
  return source_id_.Get(index);
}
inline void UserData_StaticRecos::set_source_id(int index, ::google::protobuf::int64 value) {
  source_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.StaticRecos.source_id)
}
inline void UserData_StaticRecos::add_source_id(::google::protobuf::int64 value) {
  source_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.StaticRecos.source_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_StaticRecos::source_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.StaticRecos.source_id)
  return source_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_StaticRecos::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.StaticRecos.source_id)
  return &source_id_;
}

// repeated int64 doc_id = 3;
inline int UserData_StaticRecos::doc_id_size() const {
  return doc_id_.size();
}
inline void UserData_StaticRecos::clear_doc_id() {
  doc_id_.Clear();
}
inline ::google::protobuf::int64 UserData_StaticRecos::doc_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.StaticRecos.doc_id)
  return doc_id_.Get(index);
}
inline void UserData_StaticRecos::set_doc_id(int index, ::google::protobuf::int64 value) {
  doc_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.StaticRecos.doc_id)
}
inline void UserData_StaticRecos::add_doc_id(::google::protobuf::int64 value) {
  doc_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.StaticRecos.doc_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_StaticRecos::doc_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.StaticRecos.doc_id)
  return doc_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_StaticRecos::mutable_doc_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.StaticRecos.doc_id)
  return &doc_id_;
}

// -------------------------------------------------------------------

// UserData_VisitedDocs

// optional uint32 version = 1;
inline bool UserData_VisitedDocs::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_VisitedDocs::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_VisitedDocs::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_VisitedDocs::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_VisitedDocs::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VisitedDocs.version)
  return version_;
}
inline void UserData_VisitedDocs::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VisitedDocs.version)
}

// repeated int64 source_id = 2;
inline int UserData_VisitedDocs::source_id_size() const {
  return source_id_.size();
}
inline void UserData_VisitedDocs::clear_source_id() {
  source_id_.Clear();
}
inline ::google::protobuf::int64 UserData_VisitedDocs::source_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VisitedDocs.source_id)
  return source_id_.Get(index);
}
inline void UserData_VisitedDocs::set_source_id(int index, ::google::protobuf::int64 value) {
  source_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VisitedDocs.source_id)
}
inline void UserData_VisitedDocs::add_source_id(::google::protobuf::int64 value) {
  source_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.VisitedDocs.source_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_VisitedDocs::source_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.VisitedDocs.source_id)
  return source_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_VisitedDocs::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.VisitedDocs.source_id)
  return &source_id_;
}

// repeated int64 doc_id = 3;
inline int UserData_VisitedDocs::doc_id_size() const {
  return doc_id_.size();
}
inline void UserData_VisitedDocs::clear_doc_id() {
  doc_id_.Clear();
}
inline ::google::protobuf::int64 UserData_VisitedDocs::doc_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VisitedDocs.doc_id)
  return doc_id_.Get(index);
}
inline void UserData_VisitedDocs::set_doc_id(int index, ::google::protobuf::int64 value) {
  doc_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VisitedDocs.doc_id)
}
inline void UserData_VisitedDocs::add_doc_id(::google::protobuf::int64 value) {
  doc_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.VisitedDocs.doc_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_VisitedDocs::doc_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.VisitedDocs.doc_id)
  return doc_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_VisitedDocs::mutable_doc_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.VisitedDocs.doc_id)
  return &doc_id_;
}

// -------------------------------------------------------------------

// UserData_LogsVisitedDocs

// repeated int64 doc_id = 1;
inline int UserData_LogsVisitedDocs::doc_id_size() const {
  return doc_id_.size();
}
inline void UserData_LogsVisitedDocs::clear_doc_id() {
  doc_id_.Clear();
}
inline ::google::protobuf::int64 UserData_LogsVisitedDocs::doc_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedDocs.doc_id)
  return doc_id_.Get(index);
}
inline void UserData_LogsVisitedDocs::set_doc_id(int index, ::google::protobuf::int64 value) {
  doc_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.LogsVisitedDocs.doc_id)
}
inline void UserData_LogsVisitedDocs::add_doc_id(::google::protobuf::int64 value) {
  doc_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.LogsVisitedDocs.doc_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_LogsVisitedDocs::doc_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.LogsVisitedDocs.doc_id)
  return doc_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_LogsVisitedDocs::mutable_doc_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.LogsVisitedDocs.doc_id)
  return &doc_id_;
}

// -------------------------------------------------------------------

// UserData_LogsVisitedSources

// optional uint32 version = 1;
inline bool UserData_LogsVisitedSources::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_LogsVisitedSources::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_LogsVisitedSources::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_LogsVisitedSources::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_LogsVisitedSources::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedSources.version)
  return version_;
}
inline void UserData_LogsVisitedSources::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.LogsVisitedSources.version)
}

// repeated .cosmo.pb.UserData.LogsVisitedSource sources = 2;
inline int UserData_LogsVisitedSources::sources_size() const {
  return sources_.size();
}
inline void UserData_LogsVisitedSources::clear_sources() {
  sources_.Clear();
}
inline const ::cosmo::pb::UserData_LogsVisitedSource& UserData_LogsVisitedSources::sources(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedSources.sources)
  return sources_.Get(index);
}
inline ::cosmo::pb::UserData_LogsVisitedSource* UserData_LogsVisitedSources::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.LogsVisitedSources.sources)
  return sources_.Mutable(index);
}
inline ::cosmo::pb::UserData_LogsVisitedSource* UserData_LogsVisitedSources::add_sources() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.LogsVisitedSources.sources)
  return sources_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_LogsVisitedSource >*
UserData_LogsVisitedSources::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.LogsVisitedSources.sources)
  return &sources_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_LogsVisitedSource >&
UserData_LogsVisitedSources::sources() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.LogsVisitedSources.sources)
  return sources_;
}

// -------------------------------------------------------------------

// UserData_LogsVisitedSource

// optional int64 source_id = 1;
inline bool UserData_LogsVisitedSource::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_LogsVisitedSource::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_LogsVisitedSource::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_LogsVisitedSource::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 UserData_LogsVisitedSource::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedSource.source_id)
  return source_id_;
}
inline void UserData_LogsVisitedSource::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.LogsVisitedSource.source_id)
}

// optional int64 source_urls = 2;
inline bool UserData_LogsVisitedSource::has_source_urls() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_LogsVisitedSource::set_has_source_urls() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_LogsVisitedSource::clear_has_source_urls() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_LogsVisitedSource::clear_source_urls() {
  source_urls_ = GOOGLE_LONGLONG(0);
  clear_has_source_urls();
}
inline ::google::protobuf::int64 UserData_LogsVisitedSource::source_urls() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedSource.source_urls)
  return source_urls_;
}
inline void UserData_LogsVisitedSource::set_source_urls(::google::protobuf::int64 value) {
  set_has_source_urls();
  source_urls_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.LogsVisitedSource.source_urls)
}

// optional int64 source_last_ts = 3;
inline bool UserData_LogsVisitedSource::has_source_last_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_LogsVisitedSource::set_has_source_last_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_LogsVisitedSource::clear_has_source_last_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_LogsVisitedSource::clear_source_last_ts() {
  source_last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_source_last_ts();
}
inline ::google::protobuf::int64 UserData_LogsVisitedSource::source_last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.LogsVisitedSource.source_last_ts)
  return source_last_ts_;
}
inline void UserData_LogsVisitedSource::set_source_last_ts(::google::protobuf::int64 value) {
  set_has_source_last_ts();
  source_last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.LogsVisitedSource.source_last_ts)
}

// -------------------------------------------------------------------

// UserData_SitesForUser

// required uint32 version = 1;
inline bool UserData_SitesForUser::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SitesForUser::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SitesForUser::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SitesForUser::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_SitesForUser::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SitesForUser.version)
  return version_;
}
inline void UserData_SitesForUser::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SitesForUser.version)
}

// repeated int64 site_hash = 2;
inline int UserData_SitesForUser::site_hash_size() const {
  return site_hash_.size();
}
inline void UserData_SitesForUser::clear_site_hash() {
  site_hash_.Clear();
}
inline ::google::protobuf::int64 UserData_SitesForUser::site_hash(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SitesForUser.site_hash)
  return site_hash_.Get(index);
}
inline void UserData_SitesForUser::set_site_hash(int index, ::google::protobuf::int64 value) {
  site_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SitesForUser.site_hash)
}
inline void UserData_SitesForUser::add_site_hash(::google::protobuf::int64 value) {
  site_hash_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SitesForUser.site_hash)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_SitesForUser::site_hash() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SitesForUser.site_hash)
  return site_hash_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_SitesForUser::mutable_site_hash() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SitesForUser.site_hash)
  return &site_hash_;
}

// repeated uint32 site_visits = 3;
inline int UserData_SitesForUser::site_visits_size() const {
  return site_visits_.size();
}
inline void UserData_SitesForUser::clear_site_visits() {
  site_visits_.Clear();
}
inline ::google::protobuf::uint32 UserData_SitesForUser::site_visits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SitesForUser.site_visits)
  return site_visits_.Get(index);
}
inline void UserData_SitesForUser::set_site_visits(int index, ::google::protobuf::uint32 value) {
  site_visits_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SitesForUser.site_visits)
}
inline void UserData_SitesForUser::add_site_visits(::google::protobuf::uint32 value) {
  site_visits_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SitesForUser.site_visits)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserData_SitesForUser::site_visits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SitesForUser.site_visits)
  return site_visits_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserData_SitesForUser::mutable_site_visits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SitesForUser.site_visits)
  return &site_visits_;
}

// repeated uint32 site_urls = 4;
inline int UserData_SitesForUser::site_urls_size() const {
  return site_urls_.size();
}
inline void UserData_SitesForUser::clear_site_urls() {
  site_urls_.Clear();
}
inline ::google::protobuf::uint32 UserData_SitesForUser::site_urls(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SitesForUser.site_urls)
  return site_urls_.Get(index);
}
inline void UserData_SitesForUser::set_site_urls(int index, ::google::protobuf::uint32 value) {
  site_urls_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SitesForUser.site_urls)
}
inline void UserData_SitesForUser::add_site_urls(::google::protobuf::uint32 value) {
  site_urls_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SitesForUser.site_urls)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserData_SitesForUser::site_urls() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SitesForUser.site_urls)
  return site_urls_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserData_SitesForUser::mutable_site_urls() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SitesForUser.site_urls)
  return &site_urls_;
}

// repeated int64 site_last_ts = 5;
inline int UserData_SitesForUser::site_last_ts_size() const {
  return site_last_ts_.size();
}
inline void UserData_SitesForUser::clear_site_last_ts() {
  site_last_ts_.Clear();
}
inline ::google::protobuf::int64 UserData_SitesForUser::site_last_ts(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SitesForUser.site_last_ts)
  return site_last_ts_.Get(index);
}
inline void UserData_SitesForUser::set_site_last_ts(int index, ::google::protobuf::int64 value) {
  site_last_ts_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SitesForUser.site_last_ts)
}
inline void UserData_SitesForUser::add_site_last_ts(::google::protobuf::int64 value) {
  site_last_ts_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SitesForUser.site_last_ts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_SitesForUser::site_last_ts() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SitesForUser.site_last_ts)
  return site_last_ts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_SitesForUser::mutable_site_last_ts() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SitesForUser.site_last_ts)
  return &site_last_ts_;
}

// -------------------------------------------------------------------

// UserData_VkGroupsForUser

// required uint32 version = 1;
inline bool UserData_VkGroupsForUser::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_VkGroupsForUser::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_VkGroupsForUser::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_VkGroupsForUser::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_VkGroupsForUser::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VkGroupsForUser.version)
  return version_;
}
inline void UserData_VkGroupsForUser::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VkGroupsForUser.version)
}

// repeated int64 group_url_hash = 2;
inline int UserData_VkGroupsForUser::group_url_hash_size() const {
  return group_url_hash_.size();
}
inline void UserData_VkGroupsForUser::clear_group_url_hash() {
  group_url_hash_.Clear();
}
inline ::google::protobuf::int64 UserData_VkGroupsForUser::group_url_hash(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VkGroupsForUser.group_url_hash)
  return group_url_hash_.Get(index);
}
inline void UserData_VkGroupsForUser::set_group_url_hash(int index, ::google::protobuf::int64 value) {
  group_url_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VkGroupsForUser.group_url_hash)
}
inline void UserData_VkGroupsForUser::add_group_url_hash(::google::protobuf::int64 value) {
  group_url_hash_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.VkGroupsForUser.group_url_hash)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_VkGroupsForUser::group_url_hash() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.VkGroupsForUser.group_url_hash)
  return group_url_hash_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_VkGroupsForUser::mutable_group_url_hash() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.VkGroupsForUser.group_url_hash)
  return &group_url_hash_;
}

// repeated float rank = 3;
inline int UserData_VkGroupsForUser::rank_size() const {
  return rank_.size();
}
inline void UserData_VkGroupsForUser::clear_rank() {
  rank_.Clear();
}
inline float UserData_VkGroupsForUser::rank(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.VkGroupsForUser.rank)
  return rank_.Get(index);
}
inline void UserData_VkGroupsForUser::set_rank(int index, float value) {
  rank_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.VkGroupsForUser.rank)
}
inline void UserData_VkGroupsForUser::add_rank(float value) {
  rank_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.VkGroupsForUser.rank)
}
inline const ::google::protobuf::RepeatedField< float >&
UserData_VkGroupsForUser::rank() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.VkGroupsForUser.rank)
  return rank_;
}
inline ::google::protobuf::RepeatedField< float >*
UserData_VkGroupsForUser::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.VkGroupsForUser.rank)
  return &rank_;
}

// -------------------------------------------------------------------

// UserData_UserKeywords

// required uint32 version = 1;
inline bool UserData_UserKeywords::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserKeywords::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserKeywords::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserKeywords::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_UserKeywords::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserKeywords.version)
  return version_;
}
inline void UserData_UserKeywords::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserKeywords.version)
}

// repeated int64 keyword_hash = 2;
inline int UserData_UserKeywords::keyword_hash_size() const {
  return keyword_hash_.size();
}
inline void UserData_UserKeywords::clear_keyword_hash() {
  keyword_hash_.Clear();
}
inline ::google::protobuf::int64 UserData_UserKeywords::keyword_hash(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserKeywords.keyword_hash)
  return keyword_hash_.Get(index);
}
inline void UserData_UserKeywords::set_keyword_hash(int index, ::google::protobuf::int64 value) {
  keyword_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserKeywords.keyword_hash)
}
inline void UserData_UserKeywords::add_keyword_hash(::google::protobuf::int64 value) {
  keyword_hash_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserKeywords.keyword_hash)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_UserKeywords::keyword_hash() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserKeywords.keyword_hash)
  return keyword_hash_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_UserKeywords::mutable_keyword_hash() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserKeywords.keyword_hash)
  return &keyword_hash_;
}

// repeated float keyword_weight = 3;
inline int UserData_UserKeywords::keyword_weight_size() const {
  return keyword_weight_.size();
}
inline void UserData_UserKeywords::clear_keyword_weight() {
  keyword_weight_.Clear();
}
inline float UserData_UserKeywords::keyword_weight(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserKeywords.keyword_weight)
  return keyword_weight_.Get(index);
}
inline void UserData_UserKeywords::set_keyword_weight(int index, float value) {
  keyword_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserKeywords.keyword_weight)
}
inline void UserData_UserKeywords::add_keyword_weight(float value) {
  keyword_weight_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserKeywords.keyword_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
UserData_UserKeywords::keyword_weight() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserKeywords.keyword_weight)
  return keyword_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
UserData_UserKeywords::mutable_keyword_weight() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserKeywords.keyword_weight)
  return &keyword_weight_;
}

// -------------------------------------------------------------------

// UserData_UserEvents_SiteDislike

// required int64 site_hash = 1;
inline bool UserData_UserEvents_SiteDislike::has_site_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserEvents_SiteDislike::set_has_site_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserEvents_SiteDislike::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserEvents_SiteDislike::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
inline ::google::protobuf::int64 UserData_UserEvents_SiteDislike::site_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.SiteDislike.site_hash)
  return site_hash_;
}
inline void UserData_UserEvents_SiteDislike::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.SiteDislike.site_hash)
}

// optional int64 last_ts = 2;
inline bool UserData_UserEvents_SiteDislike::has_last_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserEvents_SiteDislike::set_has_last_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserEvents_SiteDislike::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserEvents_SiteDislike::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
inline ::google::protobuf::int64 UserData_UserEvents_SiteDislike::last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.SiteDislike.last_ts)
  return last_ts_;
}
inline void UserData_UserEvents_SiteDislike::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.SiteDislike.last_ts)
}

// -------------------------------------------------------------------

// UserData_UserEvents_SourceDislike

// required int64 source_id = 1;
inline bool UserData_UserEvents_SourceDislike::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserEvents_SourceDislike::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserEvents_SourceDislike::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserEvents_SourceDislike::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 UserData_UserEvents_SourceDislike::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.SourceDislike.source_id)
  return source_id_;
}
inline void UserData_UserEvents_SourceDislike::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.SourceDislike.source_id)
}

// optional int64 last_ts = 2;
inline bool UserData_UserEvents_SourceDislike::has_last_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserEvents_SourceDislike::set_has_last_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserEvents_SourceDislike::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserEvents_SourceDislike::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
inline ::google::protobuf::int64 UserData_UserEvents_SourceDislike::last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.SourceDislike.last_ts)
  return last_ts_;
}
inline void UserData_UserEvents_SourceDislike::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.SourceDislike.last_ts)
}

// -------------------------------------------------------------------

// UserData_UserEvents_DocumentDislike

// required int64 doc_id = 1;
inline bool UserData_UserEvents_DocumentDislike::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserEvents_DocumentDislike::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserEvents_DocumentDislike::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserEvents_DocumentDislike::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 UserData_UserEvents_DocumentDislike::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.DocumentDislike.doc_id)
  return doc_id_;
}
inline void UserData_UserEvents_DocumentDislike::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.DocumentDislike.doc_id)
}

// optional int64 last_ts = 2;
inline bool UserData_UserEvents_DocumentDislike::has_last_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserEvents_DocumentDislike::set_has_last_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserEvents_DocumentDislike::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserEvents_DocumentDislike::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
inline ::google::protobuf::int64 UserData_UserEvents_DocumentDislike::last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.DocumentDislike.last_ts)
  return last_ts_;
}
inline void UserData_UserEvents_DocumentDislike::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserEvents.DocumentDislike.last_ts)
}

// -------------------------------------------------------------------

// UserData_UserEvents

// repeated .cosmo.pb.UserData.UserEvents.SiteDislike site_dislikes = 1;
inline int UserData_UserEvents::site_dislikes_size() const {
  return site_dislikes_.size();
}
inline void UserData_UserEvents::clear_site_dislikes() {
  site_dislikes_.Clear();
}
inline const ::cosmo::pb::UserData_UserEvents_SiteDislike& UserData_UserEvents::site_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.site_dislikes)
  return site_dislikes_.Get(index);
}
inline ::cosmo::pb::UserData_UserEvents_SiteDislike* UserData_UserEvents::mutable_site_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserEvents.site_dislikes)
  return site_dislikes_.Mutable(index);
}
inline ::cosmo::pb::UserData_UserEvents_SiteDislike* UserData_UserEvents::add_site_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserEvents.site_dislikes)
  return site_dislikes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SiteDislike >*
UserData_UserEvents::mutable_site_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserEvents.site_dislikes)
  return &site_dislikes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SiteDislike >&
UserData_UserEvents::site_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserEvents.site_dislikes)
  return site_dislikes_;
}

// repeated .cosmo.pb.UserData.UserEvents.SourceDislike source_dislikes = 2;
inline int UserData_UserEvents::source_dislikes_size() const {
  return source_dislikes_.size();
}
inline void UserData_UserEvents::clear_source_dislikes() {
  source_dislikes_.Clear();
}
inline const ::cosmo::pb::UserData_UserEvents_SourceDislike& UserData_UserEvents::source_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.source_dislikes)
  return source_dislikes_.Get(index);
}
inline ::cosmo::pb::UserData_UserEvents_SourceDislike* UserData_UserEvents::mutable_source_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserEvents.source_dislikes)
  return source_dislikes_.Mutable(index);
}
inline ::cosmo::pb::UserData_UserEvents_SourceDislike* UserData_UserEvents::add_source_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserEvents.source_dislikes)
  return source_dislikes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SourceDislike >*
UserData_UserEvents::mutable_source_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserEvents.source_dislikes)
  return &source_dislikes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_SourceDislike >&
UserData_UserEvents::source_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserEvents.source_dislikes)
  return source_dislikes_;
}

// repeated .cosmo.pb.UserData.UserEvents.DocumentDislike document_dislikes = 3;
inline int UserData_UserEvents::document_dislikes_size() const {
  return document_dislikes_.size();
}
inline void UserData_UserEvents::clear_document_dislikes() {
  document_dislikes_.Clear();
}
inline const ::cosmo::pb::UserData_UserEvents_DocumentDislike& UserData_UserEvents::document_dislikes(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserEvents.document_dislikes)
  return document_dislikes_.Get(index);
}
inline ::cosmo::pb::UserData_UserEvents_DocumentDislike* UserData_UserEvents::mutable_document_dislikes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserEvents.document_dislikes)
  return document_dislikes_.Mutable(index);
}
inline ::cosmo::pb::UserData_UserEvents_DocumentDislike* UserData_UserEvents::add_document_dislikes() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserEvents.document_dislikes)
  return document_dislikes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_DocumentDislike >*
UserData_UserEvents::mutable_document_dislikes() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserEvents.document_dislikes)
  return &document_dislikes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserEvents_DocumentDislike >&
UserData_UserEvents::document_dislikes() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserEvents.document_dislikes)
  return document_dislikes_;
}

// -------------------------------------------------------------------

// UserData_UserThemesEvents_UserThemeEventInfo

// required int64 last_timestamp = 1;
inline bool UserData_UserThemesEvents_UserThemeEventInfo::has_last_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserThemesEvents_UserThemeEventInfo::set_has_last_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserThemesEvents_UserThemeEventInfo::clear_has_last_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserThemesEvents_UserThemeEventInfo::clear_last_timestamp() {
  last_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_timestamp();
}
inline ::google::protobuf::int64 UserData_UserThemesEvents_UserThemeEventInfo::last_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo.last_timestamp)
  return last_timestamp_;
}
inline void UserData_UserThemesEvents_UserThemeEventInfo::set_last_timestamp(::google::protobuf::int64 value) {
  set_has_last_timestamp();
  last_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo.last_timestamp)
}

// required int64 count = 2 [default = 0];
inline bool UserData_UserThemesEvents_UserThemeEventInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserThemesEvents_UserThemeEventInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserThemesEvents_UserThemeEventInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserThemesEvents_UserThemeEventInfo::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 UserData_UserThemesEvents_UserThemeEventInfo::count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo.count)
  return count_;
}
inline void UserData_UserThemesEvents_UserThemeEventInfo::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo.count)
}

// -------------------------------------------------------------------

// UserData_UserThemesEvents_UserThemeEvent

// required int64 theme_hash = 1;
inline bool UserData_UserThemesEvents_UserThemeEvent::has_theme_hash() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserData_UserThemesEvents_UserThemeEvent::set_has_theme_hash() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_has_theme_hash() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_theme_hash() {
  theme_hash_ = GOOGLE_LONGLONG(0);
  clear_has_theme_hash();
}
inline ::google::protobuf::int64 UserData_UserThemesEvents_UserThemeEvent::theme_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.theme_hash)
  return theme_hash_;
}
inline void UserData_UserThemesEvents_UserThemeEvent::set_theme_hash(::google::protobuf::int64 value) {
  set_has_theme_hash();
  theme_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.theme_hash)
}

// optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo clicks = 2;
inline bool UserData_UserThemesEvents_UserThemeEvent::has_clicks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserThemesEvents_UserThemeEvent::set_has_clicks() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_clicks() {
  if (clicks_ != NULL) clicks_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
  clear_has_clicks();
}
inline const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEvent::clicks() const {
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* p = clicks_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.clicks)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      &::cosmo::pb::_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::mutable_clicks() {
  set_has_clicks();
  if (clicks_ == NULL) {
    _slow_mutable_clicks();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.clicks)
  return clicks_;
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::release_clicks() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.clicks)
  clear_has_clicks();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = clicks_;
    clicks_ = NULL;
    return temp;
  }
}
inline  void UserData_UserThemesEvents_UserThemeEvent::set_allocated_clicks(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* clicks) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_;
  }
  if (clicks != NULL) {
    _slow_set_allocated_clicks(message_arena, &clicks);
  }
  clicks_ = clicks;
  if (clicks) {
    set_has_clicks();
  } else {
    clear_has_clicks();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.clicks)
}

// optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo shows = 3;
inline bool UserData_UserThemesEvents_UserThemeEvent::has_shows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserThemesEvents_UserThemeEvent::set_has_shows() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_has_shows() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_shows() {
  if (shows_ != NULL) shows_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
  clear_has_shows();
}
inline const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEvent::shows() const {
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* p = shows_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.shows)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      &::cosmo::pb::_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::mutable_shows() {
  set_has_shows();
  if (shows_ == NULL) {
    _slow_mutable_shows();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.shows)
  return shows_;
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::release_shows() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.shows)
  clear_has_shows();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = shows_;
    shows_ = NULL;
    return temp;
  }
}
inline  void UserData_UserThemesEvents_UserThemeEvent::set_allocated_shows(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* shows) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_;
  }
  if (shows != NULL) {
    _slow_set_allocated_shows(message_arena, &shows);
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.shows)
}

// optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_dislikes = 4;
inline bool UserData_UserThemesEvents_UserThemeEvent::has_doc_dislikes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserThemesEvents_UserThemeEvent::set_has_doc_dislikes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_has_doc_dislikes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_doc_dislikes() {
  if (doc_dislikes_ != NULL) doc_dislikes_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
  clear_has_doc_dislikes();
}
inline const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEvent::doc_dislikes() const {
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* p = doc_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      &::cosmo::pb::_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::mutable_doc_dislikes() {
  set_has_doc_dislikes();
  if (doc_dislikes_ == NULL) {
    _slow_mutable_doc_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_dislikes)
  return doc_dislikes_;
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::release_doc_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_dislikes)
  clear_has_doc_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_doc_dislikes();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = doc_dislikes_;
    doc_dislikes_ = NULL;
    return temp;
  }
}
inline  void UserData_UserThemesEvents_UserThemeEvent::set_allocated_doc_dislikes(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_dislikes_;
  }
  if (doc_dislikes != NULL) {
    _slow_set_allocated_doc_dislikes(message_arena, &doc_dislikes);
  }
  doc_dislikes_ = doc_dislikes;
  if (doc_dislikes) {
    set_has_doc_dislikes();
  } else {
    clear_has_doc_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_dislikes)
}

// optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo doc_likes = 5;
inline bool UserData_UserThemesEvents_UserThemeEvent::has_doc_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_UserThemesEvents_UserThemeEvent::set_has_doc_likes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_has_doc_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_doc_likes() {
  if (doc_likes_ != NULL) doc_likes_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
  clear_has_doc_likes();
}
inline const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEvent::doc_likes() const {
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* p = doc_likes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_likes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      &::cosmo::pb::_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::mutable_doc_likes() {
  set_has_doc_likes();
  if (doc_likes_ == NULL) {
    _slow_mutable_doc_likes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_likes)
  return doc_likes_;
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::release_doc_likes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_likes)
  clear_has_doc_likes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_doc_likes();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = doc_likes_;
    doc_likes_ = NULL;
    return temp;
  }
}
inline  void UserData_UserThemesEvents_UserThemeEvent::set_allocated_doc_likes(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* doc_likes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_likes_;
  }
  if (doc_likes != NULL) {
    _slow_set_allocated_doc_likes(message_arena, &doc_likes);
  }
  doc_likes_ = doc_likes;
  if (doc_likes) {
    set_has_doc_likes();
  } else {
    clear_has_doc_likes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.doc_likes)
}

// optional .cosmo.pb.UserData.UserThemesEvents.UserThemeEventInfo site_dislikes = 6;
inline bool UserData_UserThemesEvents_UserThemeEvent::has_site_dislikes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData_UserThemesEvents_UserThemeEvent::set_has_site_dislikes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_has_site_dislikes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData_UserThemesEvents_UserThemeEvent::clear_site_dislikes() {
  if (site_dislikes_ != NULL) site_dislikes_->::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo::Clear();
  clear_has_site_dislikes();
}
inline const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo& UserData_UserThemesEvents_UserThemeEvent::site_dislikes() const {
  const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* p = site_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.site_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo*>(
      &::cosmo::pb::_UserData_UserThemesEvents_UserThemeEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::mutable_site_dislikes() {
  set_has_site_dislikes();
  if (site_dislikes_ == NULL) {
    _slow_mutable_site_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.site_dislikes)
  return site_dislikes_;
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* UserData_UserThemesEvents_UserThemeEvent::release_site_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.site_dislikes)
  clear_has_site_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_site_dislikes();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* temp = site_dislikes_;
    site_dislikes_ = NULL;
    return temp;
  }
}
inline  void UserData_UserThemesEvents_UserThemeEvent::set_allocated_site_dislikes(::cosmo::pb::UserData_UserThemesEvents_UserThemeEventInfo* site_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete site_dislikes_;
  }
  if (site_dislikes != NULL) {
    _slow_set_allocated_site_dislikes(message_arena, &site_dislikes);
  }
  site_dislikes_ = site_dislikes;
  if (site_dislikes) {
    set_has_site_dislikes();
  } else {
    clear_has_site_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserThemesEvents.UserThemeEvent.site_dislikes)
}

// -------------------------------------------------------------------

// UserData_UserThemesEvents

// repeated .cosmo.pb.UserData.UserThemesEvents.UserThemeEvent events = 1;
inline int UserData_UserThemesEvents::events_size() const {
  return events_.size();
}
inline void UserData_UserThemesEvents::clear_events() {
  events_.Clear();
}
inline const ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent& UserData_UserThemesEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserThemesEvents.events)
  return events_.Get(index);
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent* UserData_UserThemesEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserThemesEvents.events)
  return events_.Mutable(index);
}
inline ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent* UserData_UserThemesEvents::add_events() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserThemesEvents.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent >*
UserData_UserThemesEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserThemesEvents.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserThemesEvents_UserThemeEvent >&
UserData_UserThemesEvents::events() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserThemesEvents.events)
  return events_;
}

// -------------------------------------------------------------------

// UserData_UserI2IEvents_UserI2IEventInfo

// required int64 last_timestamp = 1;
inline bool UserData_UserI2IEvents_UserI2IEventInfo::has_last_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserI2IEvents_UserI2IEventInfo::set_has_last_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserI2IEvents_UserI2IEventInfo::clear_has_last_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserI2IEvents_UserI2IEventInfo::clear_last_timestamp() {
  last_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_timestamp();
}
inline ::google::protobuf::int64 UserData_UserI2IEvents_UserI2IEventInfo::last_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo.last_timestamp)
  return last_timestamp_;
}
inline void UserData_UserI2IEvents_UserI2IEventInfo::set_last_timestamp(::google::protobuf::int64 value) {
  set_has_last_timestamp();
  last_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo.last_timestamp)
}

// required int64 count = 2 [default = 0];
inline bool UserData_UserI2IEvents_UserI2IEventInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserI2IEvents_UserI2IEventInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserI2IEvents_UserI2IEventInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserI2IEvents_UserI2IEventInfo::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 UserData_UserI2IEvents_UserI2IEventInfo::count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo.count)
  return count_;
}
inline void UserData_UserI2IEvents_UserI2IEventInfo::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo.count)
}

// -------------------------------------------------------------------

// UserData_UserI2IEvents_UserI2IEvent

// required int64 i2i_doc_id = 1;
inline bool UserData_UserI2IEvents_UserI2IEvent::has_i2i_doc_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserData_UserI2IEvents_UserI2IEvent::set_has_i2i_doc_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_has_i2i_doc_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_i2i_doc_id() {
  i2i_doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_i2i_doc_id();
}
inline ::google::protobuf::int64 UserData_UserI2IEvents_UserI2IEvent::i2i_doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.i2i_doc_id)
  return i2i_doc_id_;
}
inline void UserData_UserI2IEvents_UserI2IEvent::set_i2i_doc_id(::google::protobuf::int64 value) {
  set_has_i2i_doc_id();
  i2i_doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.i2i_doc_id)
}

// optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo clicks = 2;
inline bool UserData_UserI2IEvents_UserI2IEvent::has_clicks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserI2IEvents_UserI2IEvent::set_has_clicks() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_clicks() {
  if (clicks_ != NULL) clicks_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
  clear_has_clicks();
}
inline const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEvent::clicks() const {
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* p = clicks_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.clicks)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      &::cosmo::pb::_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::mutable_clicks() {
  set_has_clicks();
  if (clicks_ == NULL) {
    _slow_mutable_clicks();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.clicks)
  return clicks_;
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::release_clicks() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.clicks)
  clear_has_clicks();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = clicks_;
    clicks_ = NULL;
    return temp;
  }
}
inline  void UserData_UserI2IEvents_UserI2IEvent::set_allocated_clicks(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* clicks) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_;
  }
  if (clicks != NULL) {
    _slow_set_allocated_clicks(message_arena, &clicks);
  }
  clicks_ = clicks;
  if (clicks) {
    set_has_clicks();
  } else {
    clear_has_clicks();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.clicks)
}

// optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo shows = 3;
inline bool UserData_UserI2IEvents_UserI2IEvent::has_shows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserI2IEvents_UserI2IEvent::set_has_shows() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_has_shows() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_shows() {
  if (shows_ != NULL) shows_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
  clear_has_shows();
}
inline const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEvent::shows() const {
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* p = shows_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.shows)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      &::cosmo::pb::_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::mutable_shows() {
  set_has_shows();
  if (shows_ == NULL) {
    _slow_mutable_shows();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.shows)
  return shows_;
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::release_shows() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.shows)
  clear_has_shows();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = shows_;
    shows_ = NULL;
    return temp;
  }
}
inline  void UserData_UserI2IEvents_UserI2IEvent::set_allocated_shows(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* shows) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_;
  }
  if (shows != NULL) {
    _slow_set_allocated_shows(message_arena, &shows);
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.shows)
}

// optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_dislikes = 4;
inline bool UserData_UserI2IEvents_UserI2IEvent::has_doc_dislikes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserI2IEvents_UserI2IEvent::set_has_doc_dislikes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_has_doc_dislikes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_doc_dislikes() {
  if (doc_dislikes_ != NULL) doc_dislikes_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
  clear_has_doc_dislikes();
}
inline const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEvent::doc_dislikes() const {
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* p = doc_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      &::cosmo::pb::_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::mutable_doc_dislikes() {
  set_has_doc_dislikes();
  if (doc_dislikes_ == NULL) {
    _slow_mutable_doc_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_dislikes)
  return doc_dislikes_;
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::release_doc_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_dislikes)
  clear_has_doc_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_doc_dislikes();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = doc_dislikes_;
    doc_dislikes_ = NULL;
    return temp;
  }
}
inline  void UserData_UserI2IEvents_UserI2IEvent::set_allocated_doc_dislikes(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_dislikes_;
  }
  if (doc_dislikes != NULL) {
    _slow_set_allocated_doc_dislikes(message_arena, &doc_dislikes);
  }
  doc_dislikes_ = doc_dislikes;
  if (doc_dislikes) {
    set_has_doc_dislikes();
  } else {
    clear_has_doc_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_dislikes)
}

// optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo doc_likes = 5;
inline bool UserData_UserI2IEvents_UserI2IEvent::has_doc_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_UserI2IEvents_UserI2IEvent::set_has_doc_likes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_has_doc_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_doc_likes() {
  if (doc_likes_ != NULL) doc_likes_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
  clear_has_doc_likes();
}
inline const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEvent::doc_likes() const {
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* p = doc_likes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_likes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      &::cosmo::pb::_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::mutable_doc_likes() {
  set_has_doc_likes();
  if (doc_likes_ == NULL) {
    _slow_mutable_doc_likes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_likes)
  return doc_likes_;
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::release_doc_likes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_likes)
  clear_has_doc_likes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_doc_likes();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = doc_likes_;
    doc_likes_ = NULL;
    return temp;
  }
}
inline  void UserData_UserI2IEvents_UserI2IEvent::set_allocated_doc_likes(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* doc_likes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete doc_likes_;
  }
  if (doc_likes != NULL) {
    _slow_set_allocated_doc_likes(message_arena, &doc_likes);
  }
  doc_likes_ = doc_likes;
  if (doc_likes) {
    set_has_doc_likes();
  } else {
    clear_has_doc_likes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.doc_likes)
}

// optional .cosmo.pb.UserData.UserI2IEvents.UserI2IEventInfo site_dislikes = 6;
inline bool UserData_UserI2IEvents_UserI2IEvent::has_site_dislikes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData_UserI2IEvents_UserI2IEvent::set_has_site_dislikes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_has_site_dislikes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData_UserI2IEvents_UserI2IEvent::clear_site_dislikes() {
  if (site_dislikes_ != NULL) site_dislikes_->::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo::Clear();
  clear_has_site_dislikes();
}
inline const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo& UserData_UserI2IEvents_UserI2IEvent::site_dislikes() const {
  const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* p = site_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.site_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo*>(
      &::cosmo::pb::_UserData_UserI2IEvents_UserI2IEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::mutable_site_dislikes() {
  set_has_site_dislikes();
  if (site_dislikes_ == NULL) {
    _slow_mutable_site_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.site_dislikes)
  return site_dislikes_;
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* UserData_UserI2IEvents_UserI2IEvent::release_site_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.site_dislikes)
  clear_has_site_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_site_dislikes();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* temp = site_dislikes_;
    site_dislikes_ = NULL;
    return temp;
  }
}
inline  void UserData_UserI2IEvents_UserI2IEvent::set_allocated_site_dislikes(::cosmo::pb::UserData_UserI2IEvents_UserI2IEventInfo* site_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete site_dislikes_;
  }
  if (site_dislikes != NULL) {
    _slow_set_allocated_site_dislikes(message_arena, &site_dislikes);
  }
  site_dislikes_ = site_dislikes;
  if (site_dislikes) {
    set_has_site_dislikes();
  } else {
    clear_has_site_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserI2IEvents.UserI2IEvent.site_dislikes)
}

// -------------------------------------------------------------------

// UserData_UserI2IEvents

// repeated .cosmo.pb.UserData.UserI2IEvents.UserI2IEvent events = 1;
inline int UserData_UserI2IEvents::events_size() const {
  return events_.size();
}
inline void UserData_UserI2IEvents::clear_events() {
  events_.Clear();
}
inline const ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent& UserData_UserI2IEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserI2IEvents.events)
  return events_.Get(index);
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent* UserData_UserI2IEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserI2IEvents.events)
  return events_.Mutable(index);
}
inline ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent* UserData_UserI2IEvents::add_events() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserI2IEvents.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent >*
UserData_UserI2IEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserI2IEvents.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserI2IEvents_UserI2IEvent >&
UserData_UserI2IEvents::events() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserI2IEvents.events)
  return events_;
}

// -------------------------------------------------------------------

// UserData_UserSourcesEvents_UserSourceEventInfo

// required int64 last_timestamp = 1;
inline bool UserData_UserSourcesEvents_UserSourceEventInfo::has_last_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserSourcesEvents_UserSourceEventInfo::set_has_last_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserSourcesEvents_UserSourceEventInfo::clear_has_last_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserSourcesEvents_UserSourceEventInfo::clear_last_timestamp() {
  last_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_timestamp();
}
inline ::google::protobuf::int64 UserData_UserSourcesEvents_UserSourceEventInfo::last_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo.last_timestamp)
  return last_timestamp_;
}
inline void UserData_UserSourcesEvents_UserSourceEventInfo::set_last_timestamp(::google::protobuf::int64 value) {
  set_has_last_timestamp();
  last_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo.last_timestamp)
}

// required int64 count = 2 [default = 0];
inline bool UserData_UserSourcesEvents_UserSourceEventInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserSourcesEvents_UserSourceEventInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserSourcesEvents_UserSourceEventInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserSourcesEvents_UserSourceEventInfo::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::int64 UserData_UserSourcesEvents_UserSourceEventInfo::count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo.count)
  return count_;
}
inline void UserData_UserSourcesEvents_UserSourceEventInfo::set_count(::google::protobuf::int64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo.count)
}

// -------------------------------------------------------------------

// UserData_UserSourcesEvents_UserSourceEvent

// required int64 source_id = 1;
inline bool UserData_UserSourcesEvents_UserSourceEvent::has_source_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserSourcesEvents_UserSourceEvent::set_has_source_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserSourcesEvents_UserSourceEvent::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserSourcesEvents_UserSourceEvent::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 UserData_UserSourcesEvents_UserSourceEvent::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.source_id)
  return source_id_;
}
inline void UserData_UserSourcesEvents_UserSourceEvent::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.source_id)
}

// optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo clicks = 2;
inline bool UserData_UserSourcesEvents_UserSourceEvent::has_clicks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserSourcesEvents_UserSourceEvent::set_has_clicks() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserSourcesEvents_UserSourceEvent::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserSourcesEvents_UserSourceEvent::clear_clicks() {
  if (clicks_ != NULL) clicks_->::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo::Clear();
  clear_has_clicks();
}
inline const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo& UserData_UserSourcesEvents_UserSourceEvent::clicks() const {
  const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* p = clicks_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.clicks)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo*>(
      &::cosmo::pb::_UserData_UserSourcesEvents_UserSourceEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::mutable_clicks() {
  set_has_clicks();
  if (clicks_ == NULL) {
    _slow_mutable_clicks();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.clicks)
  return clicks_;
}
inline ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::release_clicks() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.clicks)
  clear_has_clicks();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks();
  } else {
    ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* temp = clicks_;
    clicks_ = NULL;
    return temp;
  }
}
inline  void UserData_UserSourcesEvents_UserSourceEvent::set_allocated_clicks(::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* clicks) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_;
  }
  if (clicks != NULL) {
    _slow_set_allocated_clicks(message_arena, &clicks);
  }
  clicks_ = clicks;
  if (clicks) {
    set_has_clicks();
  } else {
    clear_has_clicks();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.clicks)
}

// optional .cosmo.pb.UserData.UserSourcesEvents.UserSourceEventInfo shows = 3;
inline bool UserData_UserSourcesEvents_UserSourceEvent::has_shows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserSourcesEvents_UserSourceEvent::set_has_shows() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserSourcesEvents_UserSourceEvent::clear_has_shows() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserSourcesEvents_UserSourceEvent::clear_shows() {
  if (shows_ != NULL) shows_->::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo::Clear();
  clear_has_shows();
}
inline const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo& UserData_UserSourcesEvents_UserSourceEvent::shows() const {
  const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* p = shows_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.shows)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo*>(
      &::cosmo::pb::_UserData_UserSourcesEvents_UserSourceEventInfo_default_instance_);
}
inline ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::mutable_shows() {
  set_has_shows();
  if (shows_ == NULL) {
    _slow_mutable_shows();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.shows)
  return shows_;
}
inline ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* UserData_UserSourcesEvents_UserSourceEvent::release_shows() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.shows)
  clear_has_shows();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows();
  } else {
    ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* temp = shows_;
    shows_ = NULL;
    return temp;
  }
}
inline  void UserData_UserSourcesEvents_UserSourceEvent::set_allocated_shows(::cosmo::pb::UserData_UserSourcesEvents_UserSourceEventInfo* shows) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_;
  }
  if (shows != NULL) {
    _slow_set_allocated_shows(message_arena, &shows);
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent.shows)
}

// -------------------------------------------------------------------

// UserData_UserSourcesEvents

// repeated .cosmo.pb.UserData.UserSourcesEvents.UserSourceEvent events = 1;
inline int UserData_UserSourcesEvents::events_size() const {
  return events_.size();
}
inline void UserData_UserSourcesEvents::clear_events() {
  events_.Clear();
}
inline const ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent& UserData_UserSourcesEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserSourcesEvents.events)
  return events_.Get(index);
}
inline ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent* UserData_UserSourcesEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserSourcesEvents.events)
  return events_.Mutable(index);
}
inline ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent* UserData_UserSourcesEvents::add_events() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserSourcesEvents.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent >*
UserData_UserSourcesEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserSourcesEvents.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserSourcesEvents_UserSourceEvent >&
UserData_UserSourcesEvents::events() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserSourcesEvents.events)
  return events_;
}

// -------------------------------------------------------------------

// UserData_UserVideos

// required uint32 version = 1;
inline bool UserData_UserVideos::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideos::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideos::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideos::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_UserVideos::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideos.version)
  return version_;
}
inline void UserData_UserVideos::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideos.version)
}

// repeated int64 video_id = 2;
inline int UserData_UserVideos::video_id_size() const {
  return video_id_.size();
}
inline void UserData_UserVideos::clear_video_id() {
  video_id_.Clear();
}
inline ::google::protobuf::int64 UserData_UserVideos::video_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideos.video_id)
  return video_id_.Get(index);
}
inline void UserData_UserVideos::set_video_id(int index, ::google::protobuf::int64 value) {
  video_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideos.video_id)
}
inline void UserData_UserVideos::add_video_id(::google::protobuf::int64 value) {
  video_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserVideos.video_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
UserData_UserVideos::video_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserVideos.video_id)
  return video_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
UserData_UserVideos::mutable_video_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserVideos.video_id)
  return &video_id_;
}

// -------------------------------------------------------------------

// UserData_UserMusic_TrackInfo

// required int64 hash_id = 1;
inline bool UserData_UserMusic_TrackInfo::has_hash_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserMusic_TrackInfo::set_has_hash_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserMusic_TrackInfo::clear_has_hash_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserMusic_TrackInfo::clear_hash_id() {
  hash_id_ = GOOGLE_LONGLONG(0);
  clear_has_hash_id();
}
inline ::google::protobuf::int64 UserData_UserMusic_TrackInfo::hash_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserMusic.TrackInfo.hash_id)
  return hash_id_;
}
inline void UserData_UserMusic_TrackInfo::set_hash_id(::google::protobuf::int64 value) {
  set_has_hash_id();
  hash_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserMusic.TrackInfo.hash_id)
}

// optional uint32 listens_count = 2;
inline bool UserData_UserMusic_TrackInfo::has_listens_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserMusic_TrackInfo::set_has_listens_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserMusic_TrackInfo::clear_has_listens_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserMusic_TrackInfo::clear_listens_count() {
  listens_count_ = 0u;
  clear_has_listens_count();
}
inline ::google::protobuf::uint32 UserData_UserMusic_TrackInfo::listens_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserMusic.TrackInfo.listens_count)
  return listens_count_;
}
inline void UserData_UserMusic_TrackInfo::set_listens_count(::google::protobuf::uint32 value) {
  set_has_listens_count();
  listens_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserMusic.TrackInfo.listens_count)
}

// optional int64 last_listen_ts = 3;
inline bool UserData_UserMusic_TrackInfo::has_last_listen_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserMusic_TrackInfo::set_has_last_listen_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserMusic_TrackInfo::clear_has_last_listen_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserMusic_TrackInfo::clear_last_listen_ts() {
  last_listen_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_listen_ts();
}
inline ::google::protobuf::int64 UserData_UserMusic_TrackInfo::last_listen_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserMusic.TrackInfo.last_listen_ts)
  return last_listen_ts_;
}
inline void UserData_UserMusic_TrackInfo::set_last_listen_ts(::google::protobuf::int64 value) {
  set_has_last_listen_ts();
  last_listen_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserMusic.TrackInfo.last_listen_ts)
}

// -------------------------------------------------------------------

// UserData_UserMusic

// required uint32 version = 1;
inline bool UserData_UserMusic::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserMusic::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserMusic::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserMusic::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 UserData_UserMusic::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserMusic.version)
  return version_;
}
inline void UserData_UserMusic::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserMusic.version)
}

// repeated .cosmo.pb.UserData.UserMusic.TrackInfo tracks = 2;
inline int UserData_UserMusic::tracks_size() const {
  return tracks_.size();
}
inline void UserData_UserMusic::clear_tracks() {
  tracks_.Clear();
}
inline const ::cosmo::pb::UserData_UserMusic_TrackInfo& UserData_UserMusic::tracks(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserMusic.tracks)
  return tracks_.Get(index);
}
inline ::cosmo::pb::UserData_UserMusic_TrackInfo* UserData_UserMusic::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserMusic.tracks)
  return tracks_.Mutable(index);
}
inline ::cosmo::pb::UserData_UserMusic_TrackInfo* UserData_UserMusic::add_tracks() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserMusic.tracks)
  return tracks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserMusic_TrackInfo >*
UserData_UserMusic::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserMusic.tracks)
  return &tracks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserMusic_TrackInfo >&
UserData_UserMusic::tracks() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserMusic.tracks)
  return tracks_;
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_DailyCounters

// optional uint64 common = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::has_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_has_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_has_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_common() {
  common_ = GOOGLE_ULONGLONG(0);
  clear_has_common();
}
inline ::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_DailyCounters::common() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.common)
  return common_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_common(::google::protobuf::uint64 value) {
  set_has_common();
  common_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.common)
}

// optional uint64 morning = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::has_morning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_has_morning() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_has_morning() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_morning() {
  morning_ = GOOGLE_ULONGLONG(0);
  clear_has_morning();
}
inline ::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_DailyCounters::morning() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.morning)
  return morning_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_morning(::google::protobuf::uint64 value) {
  set_has_morning();
  morning_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.morning)
}

// optional uint64 day = 3;
inline bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_day() {
  day_ = GOOGLE_ULONGLONG(0);
  clear_has_day();
}
inline ::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_DailyCounters::day() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.day)
  return day_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_day(::google::protobuf::uint64 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.day)
}

// optional uint64 evening = 4;
inline bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::has_evening() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_has_evening() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_has_evening() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_evening() {
  evening_ = GOOGLE_ULONGLONG(0);
  clear_has_evening();
}
inline ::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_DailyCounters::evening() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.evening)
  return evening_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_evening(::google::protobuf::uint64 value) {
  set_has_evening();
  evening_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.evening)
}

// optional uint64 night = 5;
inline bool UserData_UserVideoEvents_UserVideoEvent_DailyCounters::has_night() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_has_night() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_has_night() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::clear_night() {
  night_ = GOOGLE_ULONGLONG(0);
  clear_has_night();
}
inline ::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_DailyCounters::night() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.night)
  return night_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_DailyCounters::set_night(::google::protobuf::uint64 value) {
  set_has_night();
  night_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters.night)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Location

// optional string block = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Location::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::clear_block() {
  block_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_block();
}
inline const ::std::string& UserData_UserVideoEvents_UserVideoEvent_Location::block() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
  return block_.Get();
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_block(const ::std::string& value) {
  set_has_block();
  block_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}
#if LANG_CXX11
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_block(::std::string&& value) {
  set_has_block();
  block_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}
#endif
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_block(const char* value,
    size_t size) {
  set_has_block();
  block_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}
inline ::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
  return block_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::release_block() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
  clear_has_block();
  return block_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_block();
  return block_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::unsafe_arena_set_allocated_block(
    ::std::string* block) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      block, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.block)
}

// optional string screen = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Location::has_screen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_has_screen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::clear_has_screen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::clear_screen() {
  screen_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_screen();
}
inline const ::std::string& UserData_UserVideoEvents_UserVideoEvent_Location::screen() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
  return screen_.Get();
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_screen(const ::std::string& value) {
  set_has_screen();
  screen_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}
#if LANG_CXX11
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_screen(::std::string&& value) {
  set_has_screen();
  screen_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}
#endif
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_screen(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_screen();
  screen_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_screen(const char* value,
    size_t size) {
  set_has_screen();
  screen_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}
inline ::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::mutable_screen() {
  set_has_screen();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
  return screen_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::release_screen() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
  clear_has_screen();
  return screen_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UserData_UserVideoEvents_UserVideoEvent_Location::unsafe_arena_release_screen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_screen();
  return screen_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::set_allocated_screen(::std::string* screen) {
  if (screen != NULL) {
    set_has_screen();
  } else {
    clear_has_screen();
  }
  screen_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), screen,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}
inline void UserData_UserVideoEvents_UserVideoEvent_Location::unsafe_arena_set_allocated_screen(
    ::std::string* screen) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (screen != NULL) {
    set_has_screen();
  } else {
    clear_has_screen();
  }
  screen_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      screen, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location.screen)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Emotion

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Emotion::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Emotion::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Emotion::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Emotion::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Emotion::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Emotion::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion.timestamp)
}

// optional int32 value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Emotion::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Emotion::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Emotion::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Emotion::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Emotion::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Emotion::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Favorite

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Favorite::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Favorite::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Favorite::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Favorite::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Favorite::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Favorite::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite.timestamp)
}

// optional bool value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Favorite::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Favorite::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Favorite::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Favorite::clear_value() {
  value_ = false;
  clear_has_value();
}
inline bool UserData_UserVideoEvents_UserVideoEvent_Favorite::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Favorite::set_value(bool value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Rate

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Rate::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Rate::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate.timestamp)
}

// optional int32 value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Rate::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Rate::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Comment

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Comment::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Comment::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Comment::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Comment::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Comment::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Comment::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment.timestamp)
}

// optional int32 value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Comment::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Comment::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Comment::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Comment::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Comment::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Comment::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Block

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Block::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Block::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Block::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Block::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Block::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Block::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block.timestamp)
}

// optional bool value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Block::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Block::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Block::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Block::clear_value() {
  value_ = false;
  clear_has_value();
}
inline bool UserData_UserVideoEvents_UserVideoEvent_Block::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Block::set_value(bool value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Share

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Share::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Share::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Share::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Share::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Share::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Share::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share.timestamp)
}

// optional int32 value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Share::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Share::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Share::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Share::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Share::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Share::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Watch

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Watch::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.timestamp)
}

// optional int32 duration = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Watch::duration() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.duration)
  return duration_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.duration)
}

// optional int32 percent = 3;
inline bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_percent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_percent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Watch::percent() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.percent)
  return percent_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.percent)
}

// optional int32 cumulative_duration = 4;
inline bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_cumulative_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_cumulative_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_cumulative_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_cumulative_duration() {
  cumulative_duration_ = 0;
  clear_has_cumulative_duration();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Watch::cumulative_duration() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.cumulative_duration)
  return cumulative_duration_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_cumulative_duration(::google::protobuf::int32 value) {
  set_has_cumulative_duration();
  cumulative_duration_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.cumulative_duration)
}

// optional int32 cumulative_percent = 5;
inline bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_cumulative_percent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_cumulative_percent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_cumulative_percent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_cumulative_percent() {
  cumulative_percent_ = 0;
  clear_has_cumulative_percent();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Watch::cumulative_percent() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.cumulative_percent)
  return cumulative_percent_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_cumulative_percent(::google::protobuf::int32 value) {
  set_has_cumulative_percent();
  cumulative_percent_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.cumulative_percent)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 6;
inline bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_location() {
  if (location_ != NULL) location_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::Clear();
  clear_has_location();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location& UserData_UserVideoEvents_UserVideoEvent_Watch::location() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* p = location_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.location)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_Watch::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    _slow_mutable_location();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.location)
  return location_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_Watch::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.location)
  clear_has_location();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_location();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = location_;
    location_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent_Watch::set_allocated_location(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location != NULL) {
    _slow_set_allocated_location(message_arena, &location);
  }
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.location)
}

// optional int64 counter_timestamp = 7;
inline bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_counter_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_counter_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_counter_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_counter_timestamp() {
  counter_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_counter_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Watch::counter_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.counter_timestamp)
  return counter_timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_counter_timestamp(::google::protobuf::int64 value) {
  set_has_counter_timestamp();
  counter_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.counter_timestamp)
}

// optional uint64 counter = 8;
inline bool UserData_UserVideoEvents_UserVideoEvent_Watch::has_counter() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_has_counter() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_has_counter() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::clear_counter() {
  counter_ = GOOGLE_ULONGLONG(0);
  clear_has_counter();
}
inline ::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_Watch::counter() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.counter)
  return counter_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Watch::set_counter(::google::protobuf::uint64 value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch.counter)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_VideoNext

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_VideoNext::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.timestamp)
}

// optional int32 duration = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_VideoNext::duration() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.duration)
  return duration_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.duration)
}

// optional int32 percent = 3;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_percent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_percent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_percent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_VideoNext::percent() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.percent)
  return percent_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.percent)
}

// optional int32 cumulative_duration = 4;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_cumulative_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_cumulative_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_cumulative_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_cumulative_duration() {
  cumulative_duration_ = 0;
  clear_has_cumulative_duration();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_VideoNext::cumulative_duration() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.cumulative_duration)
  return cumulative_duration_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_cumulative_duration(::google::protobuf::int32 value) {
  set_has_cumulative_duration();
  cumulative_duration_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.cumulative_duration)
}

// optional int32 cumulative_percent = 5;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_cumulative_percent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_cumulative_percent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_cumulative_percent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_cumulative_percent() {
  cumulative_percent_ = 0;
  clear_has_cumulative_percent();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_VideoNext::cumulative_percent() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.cumulative_percent)
  return cumulative_percent_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_cumulative_percent(::google::protobuf::int32 value) {
  set_has_cumulative_percent();
  cumulative_percent_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.cumulative_percent)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.DailyCounters daily_counters = 6;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoNext::has_daily_counters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_has_daily_counters() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_has_daily_counters() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoNext::clear_daily_counters() {
  if (daily_counters_ != NULL) daily_counters_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters::Clear();
  clear_has_daily_counters();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters& UserData_UserVideoEvents_UserVideoEvent_VideoNext::daily_counters() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* p = daily_counters_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.daily_counters)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_DailyCounters_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* UserData_UserVideoEvents_UserVideoEvent_VideoNext::mutable_daily_counters() {
  set_has_daily_counters();
  if (daily_counters_ == NULL) {
    _slow_mutable_daily_counters();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.daily_counters)
  return daily_counters_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* UserData_UserVideoEvents_UserVideoEvent_VideoNext::release_daily_counters() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.daily_counters)
  clear_has_daily_counters();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_daily_counters();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* temp = daily_counters_;
    daily_counters_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent_VideoNext::set_allocated_daily_counters(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_DailyCounters* daily_counters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete daily_counters_;
  }
  if (daily_counters != NULL) {
    _slow_set_allocated_daily_counters(message_arena, &daily_counters);
  }
  daily_counters_ = daily_counters;
  if (daily_counters) {
    set_has_daily_counters();
  } else {
    clear_has_daily_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext.daily_counters)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_VideoStart

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoStart::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoStart::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoStart::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoStart::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_VideoStart::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoStart::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart.timestamp)
}

// optional uint64 counter = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoStart::has_counter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoStart::set_has_counter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoStart::clear_has_counter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoStart::clear_counter() {
  counter_ = GOOGLE_ULONGLONG(0);
  clear_has_counter();
}
inline ::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_VideoStart::counter() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart.counter)
  return counter_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoStart::set_counter(::google::protobuf::uint64 value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart.counter)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_VideoInViewport

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.timestamp)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_location() {
  if (location_ != NULL) location_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::Clear();
  clear_has_location();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location& UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::location() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* p = location_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.location)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    _slow_mutable_location();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.location)
  return location_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.location)
  clear_has_location();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_location();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = location_;
    location_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_allocated_location(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location != NULL) {
    _slow_set_allocated_location(message_arena, &location);
  }
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.location)
}

// optional uint64 counter = 3;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::has_counter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_has_counter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_has_counter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::clear_counter() {
  counter_ = GOOGLE_ULONGLONG(0);
  clear_has_counter();
}
inline ::google::protobuf::uint64 UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::counter() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.counter)
  return counter_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::set_counter(::google::protobuf::uint64 value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport.counter)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_PlayStatus

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_PlayStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_PlayStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus.timestamp)
}

// optional int32 value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_PlayStatus::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_PlayStatus::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_PlayStatus::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Like

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Like::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Like::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Like::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Like::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Like::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Like::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like.timestamp)
}

// optional int32 value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Like::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Like::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Like::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Like::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Like::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Like::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Dislike

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Dislike::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Dislike::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Dislike::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Dislike::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Dislike::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Dislike::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike.timestamp)
}

// optional int32 value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Dislike::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Dislike::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Dislike::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Dislike::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Dislike::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Dislike::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Norm

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Norm::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Norm::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Norm::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Norm::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Norm::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Norm::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm.timestamp)
}

// optional int32 value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Norm::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Norm::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Norm::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Norm::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Norm::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Norm::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Rate3

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Rate3::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate3::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate3::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate3::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Rate3::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate3::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3.timestamp)
}

// optional int32 value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Rate3::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate3::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate3::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate3::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Rate3::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate3::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_Rate10

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_Rate10::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate10::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate10::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate10::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_Rate10::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate10::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10.timestamp)
}

// optional int32 value = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_Rate10::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate10::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate10::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate10::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UserData_UserVideoEvents_UserVideoEvent_Rate10::value() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10.value)
  return value_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_Rate10::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10.value)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent_VideoClick

// optional int64 timestamp = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoClick::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoClick::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoClick::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoClick::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent_VideoClick::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.timestamp)
  return timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoClick::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.timestamp)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Location location = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent_VideoClick::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoClick::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoClick::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent_VideoClick::clear_location() {
  if (location_ != NULL) location_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location::Clear();
  clear_has_location();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location& UserData_UserVideoEvents_UserVideoEvent_VideoClick::location() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* p = location_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.location)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Location_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoClick::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    _slow_mutable_location();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.location)
  return location_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* UserData_UserVideoEvents_UserVideoEvent_VideoClick::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.location)
  clear_has_location();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_location();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* temp = location_;
    location_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent_VideoClick::set_allocated_location(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Location* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location != NULL) {
    _slow_set_allocated_location(message_arena, &location);
  }
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick.location)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents_UserVideoEvent

// required int64 doc_id = 1;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_doc_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_doc_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.doc_id)
  return doc_id_;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.doc_id)
}

// required int64 last_timestamp = 2;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_last_timestamp() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_last_timestamp() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_last_timestamp() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_last_timestamp() {
  last_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_timestamp();
}
inline ::google::protobuf::int64 UserData_UserVideoEvents_UserVideoEvent::last_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.last_timestamp)
  return last_timestamp_;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_last_timestamp(::google::protobuf::int64 value) {
  set_has_last_timestamp();
  last_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.last_timestamp)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Emotion emotion = 11;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_emotion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_emotion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_emotion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_emotion() {
  if (emotion_ != NULL) emotion_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion::Clear();
  clear_has_emotion();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion& UserData_UserVideoEvents_UserVideoEvent::emotion() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* p = emotion_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.emotion)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Emotion_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* UserData_UserVideoEvents_UserVideoEvent::mutable_emotion() {
  set_has_emotion();
  if (emotion_ == NULL) {
    _slow_mutable_emotion();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.emotion)
  return emotion_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* UserData_UserVideoEvents_UserVideoEvent::release_emotion() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.emotion)
  clear_has_emotion();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_emotion();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* temp = emotion_;
    emotion_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_emotion(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Emotion* emotion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete emotion_;
  }
  if (emotion != NULL) {
    _slow_set_allocated_emotion(message_arena, &emotion);
  }
  emotion_ = emotion;
  if (emotion) {
    set_has_emotion();
  } else {
    clear_has_emotion();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.emotion)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Favorite favorite = 12;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_favorite() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_favorite() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_favorite() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_favorite() {
  if (favorite_ != NULL) favorite_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite::Clear();
  clear_has_favorite();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite& UserData_UserVideoEvents_UserVideoEvent::favorite() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* p = favorite_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.favorite)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Favorite_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* UserData_UserVideoEvents_UserVideoEvent::mutable_favorite() {
  set_has_favorite();
  if (favorite_ == NULL) {
    _slow_mutable_favorite();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.favorite)
  return favorite_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* UserData_UserVideoEvents_UserVideoEvent::release_favorite() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.favorite)
  clear_has_favorite();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_favorite();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* temp = favorite_;
    favorite_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_favorite(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Favorite* favorite) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete favorite_;
  }
  if (favorite != NULL) {
    _slow_set_allocated_favorite(message_arena, &favorite);
  }
  favorite_ = favorite;
  if (favorite) {
    set_has_favorite();
  } else {
    clear_has_favorite();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.favorite)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate rate = 13;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_rate() {
  if (rate_ != NULL) rate_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate::Clear();
  clear_has_rate();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate& UserData_UserVideoEvents_UserVideoEvent::rate() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* p = rate_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Rate_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::mutable_rate() {
  set_has_rate();
  if (rate_ == NULL) {
    _slow_mutable_rate();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate)
  return rate_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::release_rate() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate)
  clear_has_rate();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rate();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* temp = rate_;
    rate_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_rate(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rate_;
  }
  if (rate != NULL) {
    _slow_set_allocated_rate(message_arena, &rate);
  }
  rate_ = rate;
  if (rate) {
    set_has_rate();
  } else {
    clear_has_rate();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Comment comment = 14;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_comment() {
  if (comment_ != NULL) comment_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment::Clear();
  clear_has_comment();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment& UserData_UserVideoEvents_UserVideoEvent::comment() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* p = comment_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.comment)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Comment_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* UserData_UserVideoEvents_UserVideoEvent::mutable_comment() {
  set_has_comment();
  if (comment_ == NULL) {
    _slow_mutable_comment();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.comment)
  return comment_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* UserData_UserVideoEvents_UserVideoEvent::release_comment() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.comment)
  clear_has_comment();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_comment();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* temp = comment_;
    comment_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_comment(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Comment* comment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comment_;
  }
  if (comment != NULL) {
    _slow_set_allocated_comment(message_arena, &comment);
  }
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.comment)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Block block = 15;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_block() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_block() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_block() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_block() {
  if (block_ != NULL) block_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block::Clear();
  clear_has_block();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block& UserData_UserVideoEvents_UserVideoEvent::block() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* p = block_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.block)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Block_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* UserData_UserVideoEvents_UserVideoEvent::mutable_block() {
  set_has_block();
  if (block_ == NULL) {
    _slow_mutable_block();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.block)
  return block_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* UserData_UserVideoEvents_UserVideoEvent::release_block() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.block)
  clear_has_block();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_block();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* temp = block_;
    block_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_block(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Block* block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_;
  }
  if (block != NULL) {
    _slow_set_allocated_block(message_arena, &block);
  }
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.block)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Share share = 16;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_share() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_share() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_share() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_share() {
  if (share_ != NULL) share_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share::Clear();
  clear_has_share();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share& UserData_UserVideoEvents_UserVideoEvent::share() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* p = share_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.share)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Share_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* UserData_UserVideoEvents_UserVideoEvent::mutable_share() {
  set_has_share();
  if (share_ == NULL) {
    _slow_mutable_share();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.share)
  return share_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* UserData_UserVideoEvents_UserVideoEvent::release_share() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.share)
  clear_has_share();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_share();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* temp = share_;
    share_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_share(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Share* share) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete share_;
  }
  if (share != NULL) {
    _slow_set_allocated_share(message_arena, &share);
  }
  share_ = share;
  if (share) {
    set_has_share();
  } else {
    clear_has_share();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.share)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch = 17;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_watch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_watch() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_watch() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_watch() {
  if (watch_ != NULL) watch_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::Clear();
  clear_has_watch();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch& UserData_UserVideoEvents_UserVideoEvent::watch() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* p = watch_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::mutable_watch() {
  set_has_watch();
  if (watch_ == NULL) {
    _slow_mutable_watch();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch)
  return watch_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::release_watch() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch)
  clear_has_watch();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_watch();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = watch_;
    watch_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_watch(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete watch_;
  }
  if (watch != NULL) {
    _slow_set_allocated_watch(message_arena, &watch);
  }
  watch_ = watch;
  if (watch) {
    set_has_watch();
  } else {
    clear_has_watch();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoNext video_next = 18;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_video_next() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_video_next() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_video_next() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_video_next() {
  if (video_next_ != NULL) video_next_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext::Clear();
  clear_has_video_next();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext& UserData_UserVideoEvents_UserVideoEvent::video_next() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* p = video_next_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_next)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_VideoNext_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* UserData_UserVideoEvents_UserVideoEvent::mutable_video_next() {
  set_has_video_next();
  if (video_next_ == NULL) {
    _slow_mutable_video_next();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_next)
  return video_next_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* UserData_UserVideoEvents_UserVideoEvent::release_video_next() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_next)
  clear_has_video_next();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_next();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* temp = video_next_;
    video_next_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_video_next(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoNext* video_next) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_next_;
  }
  if (video_next != NULL) {
    _slow_set_allocated_video_next(message_arena, &video_next);
  }
  video_next_ = video_next;
  if (video_next) {
    set_has_video_next();
  } else {
    clear_has_video_next();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_next)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoInViewport video_in_viewport = 19;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_video_in_viewport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_video_in_viewport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_video_in_viewport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_video_in_viewport() {
  if (video_in_viewport_ != NULL) video_in_viewport_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport::Clear();
  clear_has_video_in_viewport();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport& UserData_UserVideoEvents_UserVideoEvent::video_in_viewport() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* p = video_in_viewport_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_in_viewport)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_VideoInViewport_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* UserData_UserVideoEvents_UserVideoEvent::mutable_video_in_viewport() {
  set_has_video_in_viewport();
  if (video_in_viewport_ == NULL) {
    _slow_mutable_video_in_viewport();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_in_viewport)
  return video_in_viewport_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* UserData_UserVideoEvents_UserVideoEvent::release_video_in_viewport() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_in_viewport)
  clear_has_video_in_viewport();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_in_viewport();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* temp = video_in_viewport_;
    video_in_viewport_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_video_in_viewport(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoInViewport* video_in_viewport) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_in_viewport_;
  }
  if (video_in_viewport != NULL) {
    _slow_set_allocated_video_in_viewport(message_arena, &video_in_viewport);
  }
  video_in_viewport_ = video_in_viewport;
  if (video_in_viewport) {
    set_has_video_in_viewport();
  } else {
    clear_has_video_in_viewport();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_in_viewport)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.PlayStatus play_status = 20;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_play_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_play_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_play_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_play_status() {
  if (play_status_ != NULL) play_status_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus::Clear();
  clear_has_play_status();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus& UserData_UserVideoEvents_UserVideoEvent::play_status() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* p = play_status_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.play_status)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_PlayStatus_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* UserData_UserVideoEvents_UserVideoEvent::mutable_play_status() {
  set_has_play_status();
  if (play_status_ == NULL) {
    _slow_mutable_play_status();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.play_status)
  return play_status_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* UserData_UserVideoEvents_UserVideoEvent::release_play_status() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.play_status)
  clear_has_play_status();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_play_status();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* temp = play_status_;
    play_status_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_play_status(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_PlayStatus* play_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete play_status_;
  }
  if (play_status != NULL) {
    _slow_set_allocated_play_status(message_arena, &play_status);
  }
  play_status_ = play_status;
  if (play_status) {
    set_has_play_status();
  } else {
    clear_has_play_status();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.play_status)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Like like = 21;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_like() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_like() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_like() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_like() {
  if (like_ != NULL) like_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like::Clear();
  clear_has_like();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like& UserData_UserVideoEvents_UserVideoEvent::like() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* p = like_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.like)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Like_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* UserData_UserVideoEvents_UserVideoEvent::mutable_like() {
  set_has_like();
  if (like_ == NULL) {
    _slow_mutable_like();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.like)
  return like_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* UserData_UserVideoEvents_UserVideoEvent::release_like() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.like)
  clear_has_like();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_like();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* temp = like_;
    like_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_like(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Like* like) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete like_;
  }
  if (like != NULL) {
    _slow_set_allocated_like(message_arena, &like);
  }
  like_ = like;
  if (like) {
    set_has_like();
  } else {
    clear_has_like();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.like)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Dislike dislike = 22;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_dislike() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_dislike() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_dislike() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_dislike() {
  if (dislike_ != NULL) dislike_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike::Clear();
  clear_has_dislike();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike& UserData_UserVideoEvents_UserVideoEvent::dislike() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* p = dislike_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.dislike)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Dislike_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* UserData_UserVideoEvents_UserVideoEvent::mutable_dislike() {
  set_has_dislike();
  if (dislike_ == NULL) {
    _slow_mutable_dislike();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.dislike)
  return dislike_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* UserData_UserVideoEvents_UserVideoEvent::release_dislike() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.dislike)
  clear_has_dislike();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dislike();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* temp = dislike_;
    dislike_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_dislike(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Dislike* dislike) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dislike_;
  }
  if (dislike != NULL) {
    _slow_set_allocated_dislike(message_arena, &dislike);
  }
  dislike_ = dislike;
  if (dislike) {
    set_has_dislike();
  } else {
    clear_has_dislike();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.dislike)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Norm norm = 23;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_norm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_norm() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_norm() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_norm() {
  if (norm_ != NULL) norm_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm::Clear();
  clear_has_norm();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm& UserData_UserVideoEvents_UserVideoEvent::norm() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* p = norm_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.norm)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Norm_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* UserData_UserVideoEvents_UserVideoEvent::mutable_norm() {
  set_has_norm();
  if (norm_ == NULL) {
    _slow_mutable_norm();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.norm)
  return norm_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* UserData_UserVideoEvents_UserVideoEvent::release_norm() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.norm)
  clear_has_norm();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_norm();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* temp = norm_;
    norm_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_norm(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Norm* norm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete norm_;
  }
  if (norm != NULL) {
    _slow_set_allocated_norm(message_arena, &norm);
  }
  norm_ = norm;
  if (norm) {
    set_has_norm();
  } else {
    clear_has_norm();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.norm)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate3 rate3 = 24;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_rate3() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_rate3() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_rate3() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_rate3() {
  if (rate3_ != NULL) rate3_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3::Clear();
  clear_has_rate3();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3& UserData_UserVideoEvents_UserVideoEvent::rate3() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* p = rate3_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate3)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Rate3_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* UserData_UserVideoEvents_UserVideoEvent::mutable_rate3() {
  set_has_rate3();
  if (rate3_ == NULL) {
    _slow_mutable_rate3();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate3)
  return rate3_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* UserData_UserVideoEvents_UserVideoEvent::release_rate3() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate3)
  clear_has_rate3();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rate3();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* temp = rate3_;
    rate3_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_rate3(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate3* rate3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rate3_;
  }
  if (rate3 != NULL) {
    _slow_set_allocated_rate3(message_arena, &rate3);
  }
  rate3_ = rate3;
  if (rate3) {
    set_has_rate3();
  } else {
    clear_has_rate3();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate3)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate10 rate10 = 25;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_rate10() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_rate10() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_rate10() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_rate10() {
  if (rate10_ != NULL) rate10_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10::Clear();
  clear_has_rate10();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10& UserData_UserVideoEvents_UserVideoEvent::rate10() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* p = rate10_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate10)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Rate10_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* UserData_UserVideoEvents_UserVideoEvent::mutable_rate10() {
  set_has_rate10();
  if (rate10_ == NULL) {
    _slow_mutable_rate10();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate10)
  return rate10_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* UserData_UserVideoEvents_UserVideoEvent::release_rate10() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate10)
  clear_has_rate10();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rate10();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* temp = rate10_;
    rate10_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_rate10(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate10* rate10) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rate10_;
  }
  if (rate10 != NULL) {
    _slow_set_allocated_rate10(message_arena, &rate10);
  }
  rate10_ = rate10;
  if (rate10) {
    set_has_rate10();
  } else {
    clear_has_rate10();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.rate10)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click = 26;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_video_click() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_video_click() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_video_click() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_video_click() {
  if (video_click_ != NULL) video_click_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick::Clear();
  clear_has_video_click();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick& UserData_UserVideoEvents_UserVideoEvent::video_click() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* p = video_click_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::mutable_video_click() {
  set_has_video_click();
  if (video_click_ == NULL) {
    _slow_mutable_video_click();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click)
  return video_click_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::release_video_click() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click)
  clear_has_video_click();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_click();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* temp = video_click_;
    video_click_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_video_click(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_click_;
  }
  if (video_click != NULL) {
    _slow_set_allocated_video_click(message_arena, &video_click);
  }
  video_click_ = video_click;
  if (video_click) {
    set_has_video_click();
  } else {
    clear_has_video_click();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_in_search = 27;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_watch_in_search() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_watch_in_search() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_watch_in_search() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_watch_in_search() {
  if (watch_in_search_ != NULL) watch_in_search_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::Clear();
  clear_has_watch_in_search();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch& UserData_UserVideoEvents_UserVideoEvent::watch_in_search() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* p = watch_in_search_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_in_search)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::mutable_watch_in_search() {
  set_has_watch_in_search();
  if (watch_in_search_ == NULL) {
    _slow_mutable_watch_in_search();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_in_search)
  return watch_in_search_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::release_watch_in_search() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_in_search)
  clear_has_watch_in_search();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_watch_in_search();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = watch_in_search_;
    watch_in_search_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_watch_in_search(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_in_search) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete watch_in_search_;
  }
  if (watch_in_search != NULL) {
    _slow_set_allocated_watch_in_search(message_arena, &watch_in_search);
  }
  watch_in_search_ = watch_in_search;
  if (watch_in_search) {
    set_has_watch_in_search();
  } else {
    clear_has_watch_in_search();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_in_search)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoClick video_click_in_search = 28;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_video_click_in_search() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_video_click_in_search() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_video_click_in_search() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_video_click_in_search() {
  if (video_click_in_search_ != NULL) video_click_in_search_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick::Clear();
  clear_has_video_click_in_search();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick& UserData_UserVideoEvents_UserVideoEvent::video_click_in_search() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* p = video_click_in_search_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click_in_search)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_VideoClick_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::mutable_video_click_in_search() {
  set_has_video_click_in_search();
  if (video_click_in_search_ == NULL) {
    _slow_mutable_video_click_in_search();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click_in_search)
  return video_click_in_search_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* UserData_UserVideoEvents_UserVideoEvent::release_video_click_in_search() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click_in_search)
  clear_has_video_click_in_search();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_click_in_search();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* temp = video_click_in_search_;
    video_click_in_search_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_video_click_in_search(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoClick* video_click_in_search) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_click_in_search_;
  }
  if (video_click_in_search != NULL) {
    _slow_set_allocated_video_click_in_search(message_arena, &video_click_in_search);
  }
  video_click_in_search_ = video_click_in_search;
  if (video_click_in_search) {
    set_has_video_click_in_search();
  } else {
    clear_has_video_click_in_search();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_click_in_search)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Rate cold_rate = 29;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_cold_rate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_cold_rate() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_cold_rate() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_cold_rate() {
  if (cold_rate_ != NULL) cold_rate_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate::Clear();
  clear_has_cold_rate();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate& UserData_UserVideoEvents_UserVideoEvent::cold_rate() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* p = cold_rate_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.cold_rate)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Rate_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::mutable_cold_rate() {
  set_has_cold_rate();
  if (cold_rate_ == NULL) {
    _slow_mutable_cold_rate();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.cold_rate)
  return cold_rate_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* UserData_UserVideoEvents_UserVideoEvent::release_cold_rate() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.cold_rate)
  clear_has_cold_rate();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_cold_rate();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* temp = cold_rate_;
    cold_rate_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_cold_rate(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Rate* cold_rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cold_rate_;
  }
  if (cold_rate != NULL) {
    _slow_set_allocated_cold_rate(message_arena, &cold_rate);
  }
  cold_rate_ = cold_rate;
  if (cold_rate) {
    set_has_cold_rate();
  } else {
    clear_has_cold_rate();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.cold_rate)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.Watch watch_with_sound = 30;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_watch_with_sound() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_watch_with_sound() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_watch_with_sound() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_watch_with_sound() {
  if (watch_with_sound_ != NULL) watch_with_sound_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch::Clear();
  clear_has_watch_with_sound();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch& UserData_UserVideoEvents_UserVideoEvent::watch_with_sound() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* p = watch_with_sound_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_with_sound)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_Watch_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::mutable_watch_with_sound() {
  set_has_watch_with_sound();
  if (watch_with_sound_ == NULL) {
    _slow_mutable_watch_with_sound();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_with_sound)
  return watch_with_sound_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* UserData_UserVideoEvents_UserVideoEvent::release_watch_with_sound() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_with_sound)
  clear_has_watch_with_sound();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_watch_with_sound();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* temp = watch_with_sound_;
    watch_with_sound_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_watch_with_sound(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_Watch* watch_with_sound) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete watch_with_sound_;
  }
  if (watch_with_sound != NULL) {
    _slow_set_allocated_watch_with_sound(message_arena, &watch_with_sound);
  }
  watch_with_sound_ = watch_with_sound;
  if (watch_with_sound) {
    set_has_watch_with_sound();
  } else {
    clear_has_watch_with_sound();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.watch_with_sound)
}

// optional .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.VideoStart video_start = 31;
inline bool UserData_UserVideoEvents_UserVideoEvent::has_video_start() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UserData_UserVideoEvents_UserVideoEvent::set_has_video_start() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_has_video_start() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UserData_UserVideoEvents_UserVideoEvent::clear_video_start() {
  if (video_start_ != NULL) video_start_->::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart::Clear();
  clear_has_video_start();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart& UserData_UserVideoEvents_UserVideoEvent::video_start() const {
  const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* p = video_start_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_start)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart*>(
      &::cosmo::pb::_UserData_UserVideoEvents_UserVideoEvent_VideoStart_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* UserData_UserVideoEvents_UserVideoEvent::mutable_video_start() {
  set_has_video_start();
  if (video_start_ == NULL) {
    _slow_mutable_video_start();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_start)
  return video_start_;
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* UserData_UserVideoEvents_UserVideoEvent::release_video_start() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_start)
  clear_has_video_start();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_video_start();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* temp = video_start_;
    video_start_ = NULL;
    return temp;
  }
}
inline  void UserData_UserVideoEvents_UserVideoEvent::set_allocated_video_start(::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent_VideoStart* video_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete video_start_;
  }
  if (video_start != NULL) {
    _slow_set_allocated_video_start(message_arena, &video_start);
  }
  video_start_ = video_start;
  if (video_start) {
    set_has_video_start();
  } else {
    clear_has_video_start();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.UserVideoEvents.UserVideoEvent.video_start)
}

// -------------------------------------------------------------------

// UserData_UserVideoEvents

// repeated .cosmo.pb.UserData.UserVideoEvents.UserVideoEvent events = 1;
inline int UserData_UserVideoEvents::events_size() const {
  return events_.size();
}
inline void UserData_UserVideoEvents::clear_events() {
  events_.Clear();
}
inline const ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent& UserData_UserVideoEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.UserVideoEvents.events)
  return events_.Get(index);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent* UserData_UserVideoEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.UserVideoEvents.events)
  return events_.Mutable(index);
}
inline ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent* UserData_UserVideoEvents::add_events() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.UserVideoEvents.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent >*
UserData_UserVideoEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.UserVideoEvents.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_UserVideoEvents_UserVideoEvent >&
UserData_UserVideoEvents::events() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.UserVideoEvents.events)
  return events_;
}

// -------------------------------------------------------------------

// UserData_SubscriptionInfo_SubscriptionItem

// required int64 id = 1;
inline bool UserData_SubscriptionInfo_SubscriptionItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 UserData_SubscriptionInfo_SubscriptionItem::id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.id)
  return id_;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.id)
}

// required .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.SubscriptionStatus status = 2;
inline bool UserData_SubscriptionInfo_SubscriptionItem::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus UserData_SubscriptionInfo_SubscriptionItem::status() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.status)
  return static_cast< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus >(status_);
}
inline void UserData_SubscriptionInfo_SubscriptionItem::set_status(::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus value) {
  assert(::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.status)
}

// required int64 last_ts = 3;
inline bool UserData_SubscriptionInfo_SubscriptionItem::has_last_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::set_has_last_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::clear_has_last_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::clear_last_ts() {
  last_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_ts();
}
inline ::google::protobuf::int64 UserData_SubscriptionInfo_SubscriptionItem::last_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.last_ts)
  return last_ts_;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::set_last_ts(::google::protobuf::int64 value) {
  set_has_last_ts();
  last_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.last_ts)
}

// optional int32 shows = 4;
inline bool UserData_SubscriptionInfo_SubscriptionItem::has_shows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::set_has_shows() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::clear_has_shows() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::clear_shows() {
  shows_ = 0;
  clear_has_shows();
}
inline ::google::protobuf::int32 UserData_SubscriptionInfo_SubscriptionItem::shows() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.shows)
  return shows_;
}
inline void UserData_SubscriptionInfo_SubscriptionItem::set_shows(::google::protobuf::int32 value) {
  set_has_shows();
  shows_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem.shows)
}

// -------------------------------------------------------------------

// UserData_SubscriptionInfo

// repeated .cosmo.pb.UserData.SubscriptionInfo.SubscriptionItem items = 1;
inline int UserData_SubscriptionInfo::items_size() const {
  return items_.size();
}
inline void UserData_SubscriptionInfo::clear_items() {
  items_.Clear();
}
inline const ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem& UserData_SubscriptionInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.items)
  return items_.Get(index);
}
inline ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem* UserData_SubscriptionInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.SubscriptionInfo.items)
  return items_.Mutable(index);
}
inline ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem* UserData_SubscriptionInfo::add_items() {
  // @@protoc_insertion_point(field_add:cosmo.pb.UserData.SubscriptionInfo.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem >*
UserData_SubscriptionInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.UserData.SubscriptionInfo.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem >&
UserData_SubscriptionInfo::items() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.UserData.SubscriptionInfo.items)
  return items_;
}

// optional int32 onboarding_shows_count = 2;
inline bool UserData_SubscriptionInfo::has_onboarding_shows_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData_SubscriptionInfo::set_has_onboarding_shows_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData_SubscriptionInfo::clear_has_onboarding_shows_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData_SubscriptionInfo::clear_onboarding_shows_count() {
  onboarding_shows_count_ = 0;
  clear_has_onboarding_shows_count();
}
inline ::google::protobuf::int32 UserData_SubscriptionInfo::onboarding_shows_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.onboarding_shows_count)
  return onboarding_shows_count_;
}
inline void UserData_SubscriptionInfo::set_onboarding_shows_count(::google::protobuf::int32 value) {
  set_has_onboarding_shows_count();
  onboarding_shows_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.onboarding_shows_count)
}

// optional int64 last_onboarding_show_ts = 3;
inline bool UserData_SubscriptionInfo::has_last_onboarding_show_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData_SubscriptionInfo::set_has_last_onboarding_show_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData_SubscriptionInfo::clear_has_last_onboarding_show_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData_SubscriptionInfo::clear_last_onboarding_show_ts() {
  last_onboarding_show_ts_ = GOOGLE_LONGLONG(0);
  clear_has_last_onboarding_show_ts();
}
inline ::google::protobuf::int64 UserData_SubscriptionInfo::last_onboarding_show_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.SubscriptionInfo.last_onboarding_show_ts)
  return last_onboarding_show_ts_;
}
inline void UserData_SubscriptionInfo::set_last_onboarding_show_ts(::google::protobuf::int64 value) {
  set_has_last_onboarding_show_ts();
  last_onboarding_show_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.SubscriptionInfo.last_onboarding_show_ts)
}

// -------------------------------------------------------------------

// UserData

// optional int64 user_id = 1;
inline bool UserData::has_user_id() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void UserData::set_has_user_id() {
  _has_bits_[1] |= 0x00010000u;
}
inline void UserData::clear_has_user_id() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void UserData::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::int64 UserData::user_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_id)
  return user_id_;
}
inline void UserData::set_user_id(::google::protobuf::int64 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.UserData.user_id)
}

// optional .cosmo.pb.UserData.SocDemFea socdem_fea = 2;
inline bool UserData::has_socdem_fea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData::set_has_socdem_fea() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData::clear_has_socdem_fea() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData::clear_socdem_fea() {
  if (socdem_fea_ != NULL) socdem_fea_->::cosmo::pb::UserData_SocDemFea::Clear();
  clear_has_socdem_fea();
}
inline const ::cosmo::pb::UserData_SocDemFea& UserData::socdem_fea() const {
  const ::cosmo::pb::UserData_SocDemFea* p = socdem_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.socdem_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SocDemFea*>(
      &::cosmo::pb::_UserData_SocDemFea_default_instance_);
}
inline ::cosmo::pb::UserData_SocDemFea* UserData::mutable_socdem_fea() {
  set_has_socdem_fea();
  if (socdem_fea_ == NULL) {
    _slow_mutable_socdem_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.socdem_fea)
  return socdem_fea_;
}
inline ::cosmo::pb::UserData_SocDemFea* UserData::release_socdem_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.socdem_fea)
  clear_has_socdem_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_socdem_fea();
  } else {
    ::cosmo::pb::UserData_SocDemFea* temp = socdem_fea_;
    socdem_fea_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_socdem_fea(::cosmo::pb::UserData_SocDemFea* socdem_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete socdem_fea_;
  }
  if (socdem_fea != NULL) {
    _slow_set_allocated_socdem_fea(message_arena, &socdem_fea);
  }
  socdem_fea_ = socdem_fea;
  if (socdem_fea) {
    set_has_socdem_fea();
  } else {
    clear_has_socdem_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.socdem_fea)
}

// optional .cosmo.pb.UserData.AlsFea als_fea = 3;
inline bool UserData::has_als_fea() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData::set_has_als_fea() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData::clear_has_als_fea() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData::clear_als_fea() {
  if (als_fea_ != NULL) als_fea_->::cosmo::pb::UserData_AlsFea::Clear();
  clear_has_als_fea();
}
inline const ::cosmo::pb::UserData_AlsFea& UserData::als_fea() const {
  const ::cosmo::pb::UserData_AlsFea* p = als_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsFea*>(
      &::cosmo::pb::_UserData_AlsFea_default_instance_);
}
inline ::cosmo::pb::UserData_AlsFea* UserData::mutable_als_fea() {
  set_has_als_fea();
  if (als_fea_ == NULL) {
    _slow_mutable_als_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_fea)
  return als_fea_;
}
inline ::cosmo::pb::UserData_AlsFea* UserData::release_als_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_fea)
  clear_has_als_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_fea();
  } else {
    ::cosmo::pb::UserData_AlsFea* temp = als_fea_;
    als_fea_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_als_fea(::cosmo::pb::UserData_AlsFea* als_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_fea_;
  }
  if (als_fea != NULL) {
    _slow_set_allocated_als_fea(message_arena, &als_fea);
  }
  als_fea_ = als_fea;
  if (als_fea) {
    set_has_als_fea();
  } else {
    clear_has_als_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_fea)
}

// optional .cosmo.pb.UserData.OkInfo ok_info = 4;
inline bool UserData::has_ok_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData::set_has_ok_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData::clear_has_ok_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData::clear_ok_info() {
  if (ok_info_ != NULL) ok_info_->::cosmo::pb::UserData_OkInfo::Clear();
  clear_has_ok_info();
}
inline const ::cosmo::pb::UserData_OkInfo& UserData::ok_info() const {
  const ::cosmo::pb::UserData_OkInfo* p = ok_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.ok_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_OkInfo*>(
      &::cosmo::pb::_UserData_OkInfo_default_instance_);
}
inline ::cosmo::pb::UserData_OkInfo* UserData::mutable_ok_info() {
  set_has_ok_info();
  if (ok_info_ == NULL) {
    _slow_mutable_ok_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.ok_info)
  return ok_info_;
}
inline ::cosmo::pb::UserData_OkInfo* UserData::release_ok_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.ok_info)
  clear_has_ok_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_info();
  } else {
    ::cosmo::pb::UserData_OkInfo* temp = ok_info_;
    ok_info_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_ok_info(::cosmo::pb::UserData_OkInfo* ok_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_info_;
  }
  if (ok_info != NULL) {
    _slow_set_allocated_ok_info(message_arena, &ok_info);
  }
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.ok_info)
}

// optional .cosmo.pb.UserData.DetiRecos deti_reco = 5;
inline bool UserData::has_deti_reco() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData::set_has_deti_reco() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData::clear_has_deti_reco() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData::clear_deti_reco() {
  if (deti_reco_ != NULL) deti_reco_->::cosmo::pb::UserData_DetiRecos::Clear();
  clear_has_deti_reco();
}
inline const ::cosmo::pb::UserData_DetiRecos& UserData::deti_reco() const {
  const ::cosmo::pb::UserData_DetiRecos* p = deti_reco_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.deti_reco)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_DetiRecos*>(
      &::cosmo::pb::_UserData_DetiRecos_default_instance_);
}
inline ::cosmo::pb::UserData_DetiRecos* UserData::mutable_deti_reco() {
  set_has_deti_reco();
  if (deti_reco_ == NULL) {
    _slow_mutable_deti_reco();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.deti_reco)
  return deti_reco_;
}
inline ::cosmo::pb::UserData_DetiRecos* UserData::release_deti_reco() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.deti_reco)
  clear_has_deti_reco();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_deti_reco();
  } else {
    ::cosmo::pb::UserData_DetiRecos* temp = deti_reco_;
    deti_reco_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_deti_reco(::cosmo::pb::UserData_DetiRecos* deti_reco) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deti_reco_;
  }
  if (deti_reco != NULL) {
    _slow_set_allocated_deti_reco(message_arena, &deti_reco);
  }
  deti_reco_ = deti_reco;
  if (deti_reco) {
    set_has_deti_reco();
  } else {
    clear_has_deti_reco();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.deti_reco)
}

// optional .cosmo.pb.UserData.AlsItemsBiases als_items_fea = 6;
inline bool UserData::has_als_items_fea() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserData::set_has_als_items_fea() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserData::clear_has_als_items_fea() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserData::clear_als_items_fea() {
  if (als_items_fea_ != NULL) als_items_fea_->::cosmo::pb::UserData_AlsItemsBiases::Clear();
  clear_has_als_items_fea();
}
inline const ::cosmo::pb::UserData_AlsItemsBiases& UserData::als_items_fea() const {
  const ::cosmo::pb::UserData_AlsItemsBiases* p = als_items_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_items_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsItemsBiases*>(
      &::cosmo::pb::_UserData_AlsItemsBiases_default_instance_);
}
inline ::cosmo::pb::UserData_AlsItemsBiases* UserData::mutable_als_items_fea() {
  set_has_als_items_fea();
  if (als_items_fea_ == NULL) {
    _slow_mutable_als_items_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_items_fea)
  return als_items_fea_;
}
inline ::cosmo::pb::UserData_AlsItemsBiases* UserData::release_als_items_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_items_fea)
  clear_has_als_items_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_items_fea();
  } else {
    ::cosmo::pb::UserData_AlsItemsBiases* temp = als_items_fea_;
    als_items_fea_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_als_items_fea(::cosmo::pb::UserData_AlsItemsBiases* als_items_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_items_fea_;
  }
  if (als_items_fea != NULL) {
    _slow_set_allocated_als_items_fea(message_arena, &als_items_fea);
  }
  als_items_fea_ = als_items_fea;
  if (als_items_fea) {
    set_has_als_items_fea();
  } else {
    clear_has_als_items_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_items_fea)
}

// optional .cosmo.pb.UserData.NewsSources news_sources = 7;
inline bool UserData::has_news_sources() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserData::set_has_news_sources() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserData::clear_has_news_sources() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserData::clear_news_sources() {
  if (news_sources_ != NULL) news_sources_->::cosmo::pb::UserData_NewsSources::Clear();
  clear_has_news_sources();
}
inline const ::cosmo::pb::UserData_NewsSources& UserData::news_sources() const {
  const ::cosmo::pb::UserData_NewsSources* p = news_sources_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.news_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_NewsSources*>(
      &::cosmo::pb::_UserData_NewsSources_default_instance_);
}
inline ::cosmo::pb::UserData_NewsSources* UserData::mutable_news_sources() {
  set_has_news_sources();
  if (news_sources_ == NULL) {
    _slow_mutable_news_sources();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.news_sources)
  return news_sources_;
}
inline ::cosmo::pb::UserData_NewsSources* UserData::release_news_sources() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.news_sources)
  clear_has_news_sources();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_news_sources();
  } else {
    ::cosmo::pb::UserData_NewsSources* temp = news_sources_;
    news_sources_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_news_sources(::cosmo::pb::UserData_NewsSources* news_sources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete news_sources_;
  }
  if (news_sources != NULL) {
    _slow_set_allocated_news_sources(message_arena, &news_sources);
  }
  news_sources_ = news_sources;
  if (news_sources) {
    set_has_news_sources();
  } else {
    clear_has_news_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.news_sources)
}

// optional .cosmo.pb.UserData.Stats stats = 8;
inline bool UserData::has_stats() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserData::set_has_stats() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserData::clear_has_stats() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserData::clear_stats() {
  if (stats_ != NULL) stats_->::cosmo::pb::UserData_Stats::Clear();
  clear_has_stats();
}
inline const ::cosmo::pb::UserData_Stats& UserData::stats() const {
  const ::cosmo::pb::UserData_Stats* p = stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_Stats*>(
      &::cosmo::pb::_UserData_Stats_default_instance_);
}
inline ::cosmo::pb::UserData_Stats* UserData::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) {
    _slow_mutable_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.stats)
  return stats_;
}
inline ::cosmo::pb::UserData_Stats* UserData::release_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.stats)
  clear_has_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stats();
  } else {
    ::cosmo::pb::UserData_Stats* temp = stats_;
    stats_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_stats(::cosmo::pb::UserData_Stats* stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stats_;
  }
  if (stats != NULL) {
    _slow_set_allocated_stats(message_arena, &stats);
  }
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.stats)
}

// optional .cosmo.pb.UserData.OriginalInfo original_info = 9;
inline bool UserData::has_original_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserData::set_has_original_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserData::clear_has_original_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserData::clear_original_info() {
  if (original_info_ != NULL) original_info_->::cosmo::pb::UserData_OriginalInfo::Clear();
  clear_has_original_info();
}
inline const ::cosmo::pb::UserData_OriginalInfo& UserData::original_info() const {
  const ::cosmo::pb::UserData_OriginalInfo* p = original_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.original_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_OriginalInfo*>(
      &::cosmo::pb::_UserData_OriginalInfo_default_instance_);
}
inline ::cosmo::pb::UserData_OriginalInfo* UserData::mutable_original_info() {
  set_has_original_info();
  if (original_info_ == NULL) {
    _slow_mutable_original_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.original_info)
  return original_info_;
}
inline ::cosmo::pb::UserData_OriginalInfo* UserData::release_original_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.original_info)
  clear_has_original_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_info();
  } else {
    ::cosmo::pb::UserData_OriginalInfo* temp = original_info_;
    original_info_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_original_info(::cosmo::pb::UserData_OriginalInfo* original_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_info_;
  }
  if (original_info != NULL) {
    _slow_set_allocated_original_info(message_arena, &original_info);
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.original_info)
}

// optional .cosmo.pb.UserData.AlsFea als_fea_2 = 10;
inline bool UserData::has_als_fea_2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserData::set_has_als_fea_2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserData::clear_has_als_fea_2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserData::clear_als_fea_2() {
  if (als_fea_2_ != NULL) als_fea_2_->::cosmo::pb::UserData_AlsFea::Clear();
  clear_has_als_fea_2();
}
inline const ::cosmo::pb::UserData_AlsFea& UserData::als_fea_2() const {
  const ::cosmo::pb::UserData_AlsFea* p = als_fea_2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.als_fea_2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_AlsFea*>(
      &::cosmo::pb::_UserData_AlsFea_default_instance_);
}
inline ::cosmo::pb::UserData_AlsFea* UserData::mutable_als_fea_2() {
  set_has_als_fea_2();
  if (als_fea_2_ == NULL) {
    _slow_mutable_als_fea_2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.als_fea_2)
  return als_fea_2_;
}
inline ::cosmo::pb::UserData_AlsFea* UserData::release_als_fea_2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.als_fea_2)
  clear_has_als_fea_2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_fea_2();
  } else {
    ::cosmo::pb::UserData_AlsFea* temp = als_fea_2_;
    als_fea_2_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_als_fea_2(::cosmo::pb::UserData_AlsFea* als_fea_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_fea_2_;
  }
  if (als_fea_2 != NULL) {
    _slow_set_allocated_als_fea_2(message_arena, &als_fea_2);
  }
  als_fea_2_ = als_fea_2;
  if (als_fea_2) {
    set_has_als_fea_2();
  } else {
    clear_has_als_fea_2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.als_fea_2)
}

// optional .cosmo.pb.UserData.SourcesWebStats sources_web_stats = 11;
inline bool UserData::has_sources_web_stats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserData::set_has_sources_web_stats() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserData::clear_has_sources_web_stats() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserData::clear_sources_web_stats() {
  if (sources_web_stats_ != NULL) sources_web_stats_->::cosmo::pb::UserData_SourcesWebStats::Clear();
  clear_has_sources_web_stats();
}
inline const ::cosmo::pb::UserData_SourcesWebStats& UserData::sources_web_stats() const {
  const ::cosmo::pb::UserData_SourcesWebStats* p = sources_web_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sources_web_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SourcesWebStats*>(
      &::cosmo::pb::_UserData_SourcesWebStats_default_instance_);
}
inline ::cosmo::pb::UserData_SourcesWebStats* UserData::mutable_sources_web_stats() {
  set_has_sources_web_stats();
  if (sources_web_stats_ == NULL) {
    _slow_mutable_sources_web_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sources_web_stats)
  return sources_web_stats_;
}
inline ::cosmo::pb::UserData_SourcesWebStats* UserData::release_sources_web_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sources_web_stats)
  clear_has_sources_web_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sources_web_stats();
  } else {
    ::cosmo::pb::UserData_SourcesWebStats* temp = sources_web_stats_;
    sources_web_stats_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_sources_web_stats(::cosmo::pb::UserData_SourcesWebStats* sources_web_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sources_web_stats_;
  }
  if (sources_web_stats != NULL) {
    _slow_set_allocated_sources_web_stats(message_arena, &sources_web_stats);
  }
  sources_web_stats_ = sources_web_stats;
  if (sources_web_stats) {
    set_has_sources_web_stats();
  } else {
    clear_has_sources_web_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sources_web_stats)
}

// optional .cosmo.pb.UserData.Stats sources_reco_stats = 12;
inline bool UserData::has_sources_reco_stats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserData::set_has_sources_reco_stats() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserData::clear_has_sources_reco_stats() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserData::clear_sources_reco_stats() {
  if (sources_reco_stats_ != NULL) sources_reco_stats_->::cosmo::pb::UserData_Stats::Clear();
  clear_has_sources_reco_stats();
}
inline const ::cosmo::pb::UserData_Stats& UserData::sources_reco_stats() const {
  const ::cosmo::pb::UserData_Stats* p = sources_reco_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sources_reco_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_Stats*>(
      &::cosmo::pb::_UserData_Stats_default_instance_);
}
inline ::cosmo::pb::UserData_Stats* UserData::mutable_sources_reco_stats() {
  set_has_sources_reco_stats();
  if (sources_reco_stats_ == NULL) {
    _slow_mutable_sources_reco_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sources_reco_stats)
  return sources_reco_stats_;
}
inline ::cosmo::pb::UserData_Stats* UserData::release_sources_reco_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sources_reco_stats)
  clear_has_sources_reco_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sources_reco_stats();
  } else {
    ::cosmo::pb::UserData_Stats* temp = sources_reco_stats_;
    sources_reco_stats_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_sources_reco_stats(::cosmo::pb::UserData_Stats* sources_reco_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sources_reco_stats_;
  }
  if (sources_reco_stats != NULL) {
    _slow_set_allocated_sources_reco_stats(message_arena, &sources_reco_stats);
  }
  sources_reco_stats_ = sources_reco_stats;
  if (sources_reco_stats) {
    set_has_sources_reco_stats();
  } else {
    clear_has_sources_reco_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sources_reco_stats)
}

// optional .cosmo.pb.UserData.UserLinks user_links = 13;
inline bool UserData::has_user_links() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserData::set_has_user_links() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserData::clear_has_user_links() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserData::clear_user_links() {
  if (user_links_ != NULL) user_links_->::cosmo::pb::UserData_UserLinks::Clear();
  clear_has_user_links();
}
inline const ::cosmo::pb::UserData_UserLinks& UserData::user_links() const {
  const ::cosmo::pb::UserData_UserLinks* p = user_links_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_links)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserLinks*>(
      &::cosmo::pb::_UserData_UserLinks_default_instance_);
}
inline ::cosmo::pb::UserData_UserLinks* UserData::mutable_user_links() {
  set_has_user_links();
  if (user_links_ == NULL) {
    _slow_mutable_user_links();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_links)
  return user_links_;
}
inline ::cosmo::pb::UserData_UserLinks* UserData::release_user_links() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_links)
  clear_has_user_links();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_links();
  } else {
    ::cosmo::pb::UserData_UserLinks* temp = user_links_;
    user_links_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_user_links(::cosmo::pb::UserData_UserLinks* user_links) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_links_;
  }
  if (user_links != NULL) {
    _slow_set_allocated_user_links(message_arena, &user_links);
  }
  user_links_ = user_links;
  if (user_links) {
    set_has_user_links();
  } else {
    clear_has_user_links();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_links)
}

// optional .cosmo.pb.UserData.UserClusters user_clusters = 14;
inline bool UserData::has_user_clusters() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserData::set_has_user_clusters() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserData::clear_has_user_clusters() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserData::clear_user_clusters() {
  if (user_clusters_ != NULL) user_clusters_->::cosmo::pb::UserData_UserClusters::Clear();
  clear_has_user_clusters();
}
inline const ::cosmo::pb::UserData_UserClusters& UserData::user_clusters() const {
  const ::cosmo::pb::UserData_UserClusters* p = user_clusters_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_clusters)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserClusters*>(
      &::cosmo::pb::_UserData_UserClusters_default_instance_);
}
inline ::cosmo::pb::UserData_UserClusters* UserData::mutable_user_clusters() {
  set_has_user_clusters();
  if (user_clusters_ == NULL) {
    _slow_mutable_user_clusters();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_clusters)
  return user_clusters_;
}
inline ::cosmo::pb::UserData_UserClusters* UserData::release_user_clusters() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_clusters)
  clear_has_user_clusters();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_clusters();
  } else {
    ::cosmo::pb::UserData_UserClusters* temp = user_clusters_;
    user_clusters_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_user_clusters(::cosmo::pb::UserData_UserClusters* user_clusters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_clusters_;
  }
  if (user_clusters != NULL) {
    _slow_set_allocated_user_clusters(message_arena, &user_clusters);
  }
  user_clusters_ = user_clusters;
  if (user_clusters) {
    set_has_user_clusters();
  } else {
    clear_has_user_clusters();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_clusters)
}

// optional .cosmo.pb.UserData.SimilarSites similar_sites = 15;
inline bool UserData::has_similar_sites() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserData::set_has_similar_sites() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserData::clear_has_similar_sites() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserData::clear_similar_sites() {
  if (similar_sites_ != NULL) similar_sites_->::cosmo::pb::UserData_SimilarSites::Clear();
  clear_has_similar_sites();
}
inline const ::cosmo::pb::UserData_SimilarSites& UserData::similar_sites() const {
  const ::cosmo::pb::UserData_SimilarSites* p = similar_sites_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.similar_sites)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SimilarSites*>(
      &::cosmo::pb::_UserData_SimilarSites_default_instance_);
}
inline ::cosmo::pb::UserData_SimilarSites* UserData::mutable_similar_sites() {
  set_has_similar_sites();
  if (similar_sites_ == NULL) {
    _slow_mutable_similar_sites();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.similar_sites)
  return similar_sites_;
}
inline ::cosmo::pb::UserData_SimilarSites* UserData::release_similar_sites() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.similar_sites)
  clear_has_similar_sites();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_similar_sites();
  } else {
    ::cosmo::pb::UserData_SimilarSites* temp = similar_sites_;
    similar_sites_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_similar_sites(::cosmo::pb::UserData_SimilarSites* similar_sites) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete similar_sites_;
  }
  if (similar_sites != NULL) {
    _slow_set_allocated_similar_sites(message_arena, &similar_sites);
  }
  similar_sites_ = similar_sites;
  if (similar_sites) {
    set_has_similar_sites();
  } else {
    clear_has_similar_sites();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.similar_sites)
}

// optional .cosmo.pb.UserData.ContentThemes content_themes = 17;
inline bool UserData::has_content_themes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserData::set_has_content_themes() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserData::clear_has_content_themes() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserData::clear_content_themes() {
  if (content_themes_ != NULL) content_themes_->::cosmo::pb::UserData_ContentThemes::Clear();
  clear_has_content_themes();
}
inline const ::cosmo::pb::UserData_ContentThemes& UserData::content_themes() const {
  const ::cosmo::pb::UserData_ContentThemes* p = content_themes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.content_themes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_ContentThemes*>(
      &::cosmo::pb::_UserData_ContentThemes_default_instance_);
}
inline ::cosmo::pb::UserData_ContentThemes* UserData::mutable_content_themes() {
  set_has_content_themes();
  if (content_themes_ == NULL) {
    _slow_mutable_content_themes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.content_themes)
  return content_themes_;
}
inline ::cosmo::pb::UserData_ContentThemes* UserData::release_content_themes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.content_themes)
  clear_has_content_themes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_content_themes();
  } else {
    ::cosmo::pb::UserData_ContentThemes* temp = content_themes_;
    content_themes_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_content_themes(::cosmo::pb::UserData_ContentThemes* content_themes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_themes_;
  }
  if (content_themes != NULL) {
    _slow_set_allocated_content_themes(message_arena, &content_themes);
  }
  content_themes_ = content_themes;
  if (content_themes) {
    set_has_content_themes();
  } else {
    clear_has_content_themes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.content_themes)
}

// optional .cosmo.pb.UserData.StaticRecos static_recos_1 = 18;
inline bool UserData::has_static_recos_1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserData::set_has_static_recos_1() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserData::clear_has_static_recos_1() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserData::clear_static_recos_1() {
  if (static_recos_1_ != NULL) static_recos_1_->::cosmo::pb::UserData_StaticRecos::Clear();
  clear_has_static_recos_1();
}
inline const ::cosmo::pb::UserData_StaticRecos& UserData::static_recos_1() const {
  const ::cosmo::pb::UserData_StaticRecos* p = static_recos_1_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.static_recos_1)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_StaticRecos*>(
      &::cosmo::pb::_UserData_StaticRecos_default_instance_);
}
inline ::cosmo::pb::UserData_StaticRecos* UserData::mutable_static_recos_1() {
  set_has_static_recos_1();
  if (static_recos_1_ == NULL) {
    _slow_mutable_static_recos_1();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.static_recos_1)
  return static_recos_1_;
}
inline ::cosmo::pb::UserData_StaticRecos* UserData::release_static_recos_1() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.static_recos_1)
  clear_has_static_recos_1();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_static_recos_1();
  } else {
    ::cosmo::pb::UserData_StaticRecos* temp = static_recos_1_;
    static_recos_1_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_static_recos_1(::cosmo::pb::UserData_StaticRecos* static_recos_1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete static_recos_1_;
  }
  if (static_recos_1 != NULL) {
    _slow_set_allocated_static_recos_1(message_arena, &static_recos_1);
  }
  static_recos_1_ = static_recos_1;
  if (static_recos_1) {
    set_has_static_recos_1();
  } else {
    clear_has_static_recos_1();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.static_recos_1)
}

// optional .cosmo.pb.UserData.StaticRecos static_recos_2 = 19;
inline bool UserData::has_static_recos_2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserData::set_has_static_recos_2() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserData::clear_has_static_recos_2() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserData::clear_static_recos_2() {
  if (static_recos_2_ != NULL) static_recos_2_->::cosmo::pb::UserData_StaticRecos::Clear();
  clear_has_static_recos_2();
}
inline const ::cosmo::pb::UserData_StaticRecos& UserData::static_recos_2() const {
  const ::cosmo::pb::UserData_StaticRecos* p = static_recos_2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.static_recos_2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_StaticRecos*>(
      &::cosmo::pb::_UserData_StaticRecos_default_instance_);
}
inline ::cosmo::pb::UserData_StaticRecos* UserData::mutable_static_recos_2() {
  set_has_static_recos_2();
  if (static_recos_2_ == NULL) {
    _slow_mutable_static_recos_2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.static_recos_2)
  return static_recos_2_;
}
inline ::cosmo::pb::UserData_StaticRecos* UserData::release_static_recos_2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.static_recos_2)
  clear_has_static_recos_2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_static_recos_2();
  } else {
    ::cosmo::pb::UserData_StaticRecos* temp = static_recos_2_;
    static_recos_2_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_static_recos_2(::cosmo::pb::UserData_StaticRecos* static_recos_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete static_recos_2_;
  }
  if (static_recos_2 != NULL) {
    _slow_set_allocated_static_recos_2(message_arena, &static_recos_2);
  }
  static_recos_2_ = static_recos_2;
  if (static_recos_2) {
    set_has_static_recos_2();
  } else {
    clear_has_static_recos_2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.static_recos_2)
}

// optional .cosmo.pb.UserData.SitesForUser sites_for_user = 20;
inline bool UserData::has_sites_for_user() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserData::set_has_sites_for_user() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserData::clear_has_sites_for_user() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserData::clear_sites_for_user() {
  if (sites_for_user_ != NULL) sites_for_user_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_sites_for_user();
}
inline const ::cosmo::pb::UserData_SitesForUser& UserData::sites_for_user() const {
  const ::cosmo::pb::UserData_SitesForUser* p = sites_for_user_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sites_for_user)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::mutable_sites_for_user() {
  set_has_sites_for_user();
  if (sites_for_user_ == NULL) {
    _slow_mutable_sites_for_user();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sites_for_user)
  return sites_for_user_;
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::release_sites_for_user() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sites_for_user)
  clear_has_sites_for_user();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sites_for_user();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user_;
    sites_for_user_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_sites_for_user(::cosmo::pb::UserData_SitesForUser* sites_for_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sites_for_user_;
  }
  if (sites_for_user != NULL) {
    _slow_set_allocated_sites_for_user(message_arena, &sites_for_user);
  }
  sites_for_user_ = sites_for_user;
  if (sites_for_user) {
    set_has_sites_for_user();
  } else {
    clear_has_sites_for_user();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sites_for_user)
}

// optional .cosmo.pb.UserData.UserKeywords keywords_daily = 21;
inline bool UserData::has_keywords_daily() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserData::set_has_keywords_daily() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserData::clear_has_keywords_daily() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserData::clear_keywords_daily() {
  if (keywords_daily_ != NULL) keywords_daily_->::cosmo::pb::UserData_UserKeywords::Clear();
  clear_has_keywords_daily();
}
inline const ::cosmo::pb::UserData_UserKeywords& UserData::keywords_daily() const {
  const ::cosmo::pb::UserData_UserKeywords* p = keywords_daily_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.keywords_daily)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserKeywords*>(
      &::cosmo::pb::_UserData_UserKeywords_default_instance_);
}
inline ::cosmo::pb::UserData_UserKeywords* UserData::mutable_keywords_daily() {
  set_has_keywords_daily();
  if (keywords_daily_ == NULL) {
    _slow_mutable_keywords_daily();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.keywords_daily)
  return keywords_daily_;
}
inline ::cosmo::pb::UserData_UserKeywords* UserData::release_keywords_daily() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.keywords_daily)
  clear_has_keywords_daily();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_keywords_daily();
  } else {
    ::cosmo::pb::UserData_UserKeywords* temp = keywords_daily_;
    keywords_daily_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_keywords_daily(::cosmo::pb::UserData_UserKeywords* keywords_daily) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete keywords_daily_;
  }
  if (keywords_daily != NULL) {
    _slow_set_allocated_keywords_daily(message_arena, &keywords_daily);
  }
  keywords_daily_ = keywords_daily;
  if (keywords_daily) {
    set_has_keywords_daily();
  } else {
    clear_has_keywords_daily();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.keywords_daily)
}

// optional .cosmo.pb.UserData.UserKeywords keywords_monthly = 22;
inline bool UserData::has_keywords_monthly() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UserData::set_has_keywords_monthly() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UserData::clear_has_keywords_monthly() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UserData::clear_keywords_monthly() {
  if (keywords_monthly_ != NULL) keywords_monthly_->::cosmo::pb::UserData_UserKeywords::Clear();
  clear_has_keywords_monthly();
}
inline const ::cosmo::pb::UserData_UserKeywords& UserData::keywords_monthly() const {
  const ::cosmo::pb::UserData_UserKeywords* p = keywords_monthly_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.keywords_monthly)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserKeywords*>(
      &::cosmo::pb::_UserData_UserKeywords_default_instance_);
}
inline ::cosmo::pb::UserData_UserKeywords* UserData::mutable_keywords_monthly() {
  set_has_keywords_monthly();
  if (keywords_monthly_ == NULL) {
    _slow_mutable_keywords_monthly();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.keywords_monthly)
  return keywords_monthly_;
}
inline ::cosmo::pb::UserData_UserKeywords* UserData::release_keywords_monthly() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.keywords_monthly)
  clear_has_keywords_monthly();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_keywords_monthly();
  } else {
    ::cosmo::pb::UserData_UserKeywords* temp = keywords_monthly_;
    keywords_monthly_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_keywords_monthly(::cosmo::pb::UserData_UserKeywords* keywords_monthly) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete keywords_monthly_;
  }
  if (keywords_monthly != NULL) {
    _slow_set_allocated_keywords_monthly(message_arena, &keywords_monthly);
  }
  keywords_monthly_ = keywords_monthly;
  if (keywords_monthly) {
    set_has_keywords_monthly();
  } else {
    clear_has_keywords_monthly();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.keywords_monthly)
}

// optional .cosmo.pb.UserData.SitesForUser sites_for_user1 = 23;
inline bool UserData::has_sites_for_user1() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UserData::set_has_sites_for_user1() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UserData::clear_has_sites_for_user1() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UserData::clear_sites_for_user1() {
  if (sites_for_user1_ != NULL) sites_for_user1_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_sites_for_user1();
}
inline const ::cosmo::pb::UserData_SitesForUser& UserData::sites_for_user1() const {
  const ::cosmo::pb::UserData_SitesForUser* p = sites_for_user1_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sites_for_user1)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::mutable_sites_for_user1() {
  set_has_sites_for_user1();
  if (sites_for_user1_ == NULL) {
    _slow_mutable_sites_for_user1();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sites_for_user1)
  return sites_for_user1_;
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::release_sites_for_user1() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sites_for_user1)
  clear_has_sites_for_user1();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sites_for_user1();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user1_;
    sites_for_user1_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_sites_for_user1(::cosmo::pb::UserData_SitesForUser* sites_for_user1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sites_for_user1_;
  }
  if (sites_for_user1 != NULL) {
    _slow_set_allocated_sites_for_user1(message_arena, &sites_for_user1);
  }
  sites_for_user1_ = sites_for_user1;
  if (sites_for_user1) {
    set_has_sites_for_user1();
  } else {
    clear_has_sites_for_user1();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sites_for_user1)
}

// optional .cosmo.pb.UserData.SitesForUser sites_for_user2 = 24;
inline bool UserData::has_sites_for_user2() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UserData::set_has_sites_for_user2() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UserData::clear_has_sites_for_user2() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UserData::clear_sites_for_user2() {
  if (sites_for_user2_ != NULL) sites_for_user2_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_sites_for_user2();
}
inline const ::cosmo::pb::UserData_SitesForUser& UserData::sites_for_user2() const {
  const ::cosmo::pb::UserData_SitesForUser* p = sites_for_user2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sites_for_user2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::mutable_sites_for_user2() {
  set_has_sites_for_user2();
  if (sites_for_user2_ == NULL) {
    _slow_mutable_sites_for_user2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sites_for_user2)
  return sites_for_user2_;
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::release_sites_for_user2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sites_for_user2)
  clear_has_sites_for_user2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sites_for_user2();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user2_;
    sites_for_user2_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_sites_for_user2(::cosmo::pb::UserData_SitesForUser* sites_for_user2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sites_for_user2_;
  }
  if (sites_for_user2 != NULL) {
    _slow_set_allocated_sites_for_user2(message_arena, &sites_for_user2);
  }
  sites_for_user2_ = sites_for_user2;
  if (sites_for_user2) {
    set_has_sites_for_user2();
  } else {
    clear_has_sites_for_user2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sites_for_user2)
}

// optional .cosmo.pb.UserData.VisitedDocs visited_docs = 25;
inline bool UserData::has_visited_docs() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UserData::set_has_visited_docs() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UserData::clear_has_visited_docs() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UserData::clear_visited_docs() {
  if (visited_docs_ != NULL) visited_docs_->::cosmo::pb::UserData_VisitedDocs::Clear();
  clear_has_visited_docs();
}
inline const ::cosmo::pb::UserData_VisitedDocs& UserData::visited_docs() const {
  const ::cosmo::pb::UserData_VisitedDocs* p = visited_docs_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.visited_docs)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_VisitedDocs*>(
      &::cosmo::pb::_UserData_VisitedDocs_default_instance_);
}
inline ::cosmo::pb::UserData_VisitedDocs* UserData::mutable_visited_docs() {
  set_has_visited_docs();
  if (visited_docs_ == NULL) {
    _slow_mutable_visited_docs();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.visited_docs)
  return visited_docs_;
}
inline ::cosmo::pb::UserData_VisitedDocs* UserData::release_visited_docs() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.visited_docs)
  clear_has_visited_docs();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_visited_docs();
  } else {
    ::cosmo::pb::UserData_VisitedDocs* temp = visited_docs_;
    visited_docs_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_visited_docs(::cosmo::pb::UserData_VisitedDocs* visited_docs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete visited_docs_;
  }
  if (visited_docs != NULL) {
    _slow_set_allocated_visited_docs(message_arena, &visited_docs);
  }
  visited_docs_ = visited_docs;
  if (visited_docs) {
    set_has_visited_docs();
  } else {
    clear_has_visited_docs();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.visited_docs)
}

// optional .cosmo.pb.UserData.SitesForUser sites_for_user3 = 26;
inline bool UserData::has_sites_for_user3() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UserData::set_has_sites_for_user3() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UserData::clear_has_sites_for_user3() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UserData::clear_sites_for_user3() {
  if (sites_for_user3_ != NULL) sites_for_user3_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_sites_for_user3();
}
inline const ::cosmo::pb::UserData_SitesForUser& UserData::sites_for_user3() const {
  const ::cosmo::pb::UserData_SitesForUser* p = sites_for_user3_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sites_for_user3)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::mutable_sites_for_user3() {
  set_has_sites_for_user3();
  if (sites_for_user3_ == NULL) {
    _slow_mutable_sites_for_user3();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sites_for_user3)
  return sites_for_user3_;
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::release_sites_for_user3() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sites_for_user3)
  clear_has_sites_for_user3();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sites_for_user3();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user3_;
    sites_for_user3_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_sites_for_user3(::cosmo::pb::UserData_SitesForUser* sites_for_user3) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sites_for_user3_;
  }
  if (sites_for_user3 != NULL) {
    _slow_set_allocated_sites_for_user3(message_arena, &sites_for_user3);
  }
  sites_for_user3_ = sites_for_user3;
  if (sites_for_user3) {
    set_has_sites_for_user3();
  } else {
    clear_has_sites_for_user3();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sites_for_user3)
}

// optional .cosmo.pb.UserData.LogsVisitedDocs logs_visited_docs = 27;
inline bool UserData::has_logs_visited_docs() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UserData::set_has_logs_visited_docs() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UserData::clear_has_logs_visited_docs() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UserData::clear_logs_visited_docs() {
  if (logs_visited_docs_ != NULL) logs_visited_docs_->::cosmo::pb::UserData_LogsVisitedDocs::Clear();
  clear_has_logs_visited_docs();
}
inline const ::cosmo::pb::UserData_LogsVisitedDocs& UserData::logs_visited_docs() const {
  const ::cosmo::pb::UserData_LogsVisitedDocs* p = logs_visited_docs_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.logs_visited_docs)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_LogsVisitedDocs*>(
      &::cosmo::pb::_UserData_LogsVisitedDocs_default_instance_);
}
inline ::cosmo::pb::UserData_LogsVisitedDocs* UserData::mutable_logs_visited_docs() {
  set_has_logs_visited_docs();
  if (logs_visited_docs_ == NULL) {
    _slow_mutable_logs_visited_docs();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.logs_visited_docs)
  return logs_visited_docs_;
}
inline ::cosmo::pb::UserData_LogsVisitedDocs* UserData::release_logs_visited_docs() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.logs_visited_docs)
  clear_has_logs_visited_docs();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_logs_visited_docs();
  } else {
    ::cosmo::pb::UserData_LogsVisitedDocs* temp = logs_visited_docs_;
    logs_visited_docs_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_logs_visited_docs(::cosmo::pb::UserData_LogsVisitedDocs* logs_visited_docs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logs_visited_docs_;
  }
  if (logs_visited_docs != NULL) {
    _slow_set_allocated_logs_visited_docs(message_arena, &logs_visited_docs);
  }
  logs_visited_docs_ = logs_visited_docs;
  if (logs_visited_docs) {
    set_has_logs_visited_docs();
  } else {
    clear_has_logs_visited_docs();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.logs_visited_docs)
}

// optional .cosmo.pb.UserData.SitesForUser sites_for_user4 = 28;
inline bool UserData::has_sites_for_user4() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void UserData::set_has_sites_for_user4() {
  _has_bits_[0] |= 0x02000000u;
}
inline void UserData::clear_has_sites_for_user4() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void UserData::clear_sites_for_user4() {
  if (sites_for_user4_ != NULL) sites_for_user4_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_sites_for_user4();
}
inline const ::cosmo::pb::UserData_SitesForUser& UserData::sites_for_user4() const {
  const ::cosmo::pb::UserData_SitesForUser* p = sites_for_user4_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.sites_for_user4)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::mutable_sites_for_user4() {
  set_has_sites_for_user4();
  if (sites_for_user4_ == NULL) {
    _slow_mutable_sites_for_user4();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.sites_for_user4)
  return sites_for_user4_;
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::release_sites_for_user4() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.sites_for_user4)
  clear_has_sites_for_user4();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_sites_for_user4();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = sites_for_user4_;
    sites_for_user4_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_sites_for_user4(::cosmo::pb::UserData_SitesForUser* sites_for_user4) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sites_for_user4_;
  }
  if (sites_for_user4 != NULL) {
    _slow_set_allocated_sites_for_user4(message_arena, &sites_for_user4);
  }
  sites_for_user4_ = sites_for_user4;
  if (sites_for_user4) {
    set_has_sites_for_user4();
  } else {
    clear_has_sites_for_user4();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.sites_for_user4)
}

// optional .cosmo.pb.UserData.UserThemesEvents user_themes = 29;
inline bool UserData::has_user_themes() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UserData::set_has_user_themes() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UserData::clear_has_user_themes() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UserData::clear_user_themes() {
  if (user_themes_ != NULL) user_themes_->::cosmo::pb::UserData_UserThemesEvents::Clear();
  clear_has_user_themes();
}
inline const ::cosmo::pb::UserData_UserThemesEvents& UserData::user_themes() const {
  const ::cosmo::pb::UserData_UserThemesEvents* p = user_themes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_themes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserThemesEvents*>(
      &::cosmo::pb::_UserData_UserThemesEvents_default_instance_);
}
inline ::cosmo::pb::UserData_UserThemesEvents* UserData::mutable_user_themes() {
  set_has_user_themes();
  if (user_themes_ == NULL) {
    _slow_mutable_user_themes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_themes)
  return user_themes_;
}
inline ::cosmo::pb::UserData_UserThemesEvents* UserData::release_user_themes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_themes)
  clear_has_user_themes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_themes();
  } else {
    ::cosmo::pb::UserData_UserThemesEvents* temp = user_themes_;
    user_themes_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_user_themes(::cosmo::pb::UserData_UserThemesEvents* user_themes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_themes_;
  }
  if (user_themes != NULL) {
    _slow_set_allocated_user_themes(message_arena, &user_themes);
  }
  user_themes_ = user_themes;
  if (user_themes) {
    set_has_user_themes();
  } else {
    clear_has_user_themes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_themes)
}

// optional .cosmo.pb.UserData.UserEvents user_dislikes = 30;
inline bool UserData::has_user_dislikes() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void UserData::set_has_user_dislikes() {
  _has_bits_[0] |= 0x08000000u;
}
inline void UserData::clear_has_user_dislikes() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void UserData::clear_user_dislikes() {
  if (user_dislikes_ != NULL) user_dislikes_->::cosmo::pb::UserData_UserEvents::Clear();
  clear_has_user_dislikes();
}
inline const ::cosmo::pb::UserData_UserEvents& UserData::user_dislikes() const {
  const ::cosmo::pb::UserData_UserEvents* p = user_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserEvents*>(
      &::cosmo::pb::_UserData_UserEvents_default_instance_);
}
inline ::cosmo::pb::UserData_UserEvents* UserData::mutable_user_dislikes() {
  set_has_user_dislikes();
  if (user_dislikes_ == NULL) {
    _slow_mutable_user_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_dislikes)
  return user_dislikes_;
}
inline ::cosmo::pb::UserData_UserEvents* UserData::release_user_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_dislikes)
  clear_has_user_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_dislikes();
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = user_dislikes_;
    user_dislikes_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_user_dislikes(::cosmo::pb::UserData_UserEvents* user_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_dislikes_;
  }
  if (user_dislikes != NULL) {
    _slow_set_allocated_user_dislikes(message_arena, &user_dislikes);
  }
  user_dislikes_ = user_dislikes;
  if (user_dislikes) {
    set_has_user_dislikes();
  } else {
    clear_has_user_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_dislikes)
}

// optional .cosmo.pb.UserData.UserVideos user_videos = 31;
inline bool UserData::has_user_videos() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void UserData::set_has_user_videos() {
  _has_bits_[0] |= 0x10000000u;
}
inline void UserData::clear_has_user_videos() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void UserData::clear_user_videos() {
  if (user_videos_ != NULL) user_videos_->::cosmo::pb::UserData_UserVideos::Clear();
  clear_has_user_videos();
}
inline const ::cosmo::pb::UserData_UserVideos& UserData::user_videos() const {
  const ::cosmo::pb::UserData_UserVideos* p = user_videos_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_videos)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideos*>(
      &::cosmo::pb::_UserData_UserVideos_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideos* UserData::mutable_user_videos() {
  set_has_user_videos();
  if (user_videos_ == NULL) {
    _slow_mutable_user_videos();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_videos)
  return user_videos_;
}
inline ::cosmo::pb::UserData_UserVideos* UserData::release_user_videos() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_videos)
  clear_has_user_videos();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_videos();
  } else {
    ::cosmo::pb::UserData_UserVideos* temp = user_videos_;
    user_videos_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_user_videos(::cosmo::pb::UserData_UserVideos* user_videos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_videos_;
  }
  if (user_videos != NULL) {
    _slow_set_allocated_user_videos(message_arena, &user_videos);
  }
  user_videos_ = user_videos;
  if (user_videos) {
    set_has_user_videos();
  } else {
    clear_has_user_videos();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_videos)
}

// optional .cosmo.pb.UserData.UserVideoEvents user_video_events = 32;
inline bool UserData::has_user_video_events() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void UserData::set_has_user_video_events() {
  _has_bits_[0] |= 0x20000000u;
}
inline void UserData::clear_has_user_video_events() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void UserData::clear_user_video_events() {
  if (user_video_events_ != NULL) user_video_events_->::cosmo::pb::UserData_UserVideoEvents::Clear();
  clear_has_user_video_events();
}
inline const ::cosmo::pb::UserData_UserVideoEvents& UserData::user_video_events() const {
  const ::cosmo::pb::UserData_UserVideoEvents* p = user_video_events_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_video_events)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserVideoEvents*>(
      &::cosmo::pb::_UserData_UserVideoEvents_default_instance_);
}
inline ::cosmo::pb::UserData_UserVideoEvents* UserData::mutable_user_video_events() {
  set_has_user_video_events();
  if (user_video_events_ == NULL) {
    _slow_mutable_user_video_events();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_video_events)
  return user_video_events_;
}
inline ::cosmo::pb::UserData_UserVideoEvents* UserData::release_user_video_events() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_video_events)
  clear_has_user_video_events();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_video_events();
  } else {
    ::cosmo::pb::UserData_UserVideoEvents* temp = user_video_events_;
    user_video_events_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_user_video_events(::cosmo::pb::UserData_UserVideoEvents* user_video_events) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_video_events_;
  }
  if (user_video_events != NULL) {
    _slow_set_allocated_user_video_events(message_arena, &user_video_events);
  }
  user_video_events_ = user_video_events;
  if (user_video_events) {
    set_has_user_video_events();
  } else {
    clear_has_user_video_events();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_video_events)
}

// optional .cosmo.pb.UserData.UserMusic user_music = 33;
inline bool UserData::has_user_music() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void UserData::set_has_user_music() {
  _has_bits_[0] |= 0x40000000u;
}
inline void UserData::clear_has_user_music() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void UserData::clear_user_music() {
  if (user_music_ != NULL) user_music_->::cosmo::pb::UserData_UserMusic::Clear();
  clear_has_user_music();
}
inline const ::cosmo::pb::UserData_UserMusic& UserData::user_music() const {
  const ::cosmo::pb::UserData_UserMusic* p = user_music_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_music)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserMusic*>(
      &::cosmo::pb::_UserData_UserMusic_default_instance_);
}
inline ::cosmo::pb::UserData_UserMusic* UserData::mutable_user_music() {
  set_has_user_music();
  if (user_music_ == NULL) {
    _slow_mutable_user_music();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_music)
  return user_music_;
}
inline ::cosmo::pb::UserData_UserMusic* UserData::release_user_music() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_music)
  clear_has_user_music();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_music();
  } else {
    ::cosmo::pb::UserData_UserMusic* temp = user_music_;
    user_music_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_user_music(::cosmo::pb::UserData_UserMusic* user_music) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_music_;
  }
  if (user_music != NULL) {
    _slow_set_allocated_user_music(message_arena, &user_music);
  }
  user_music_ = user_music;
  if (user_music) {
    set_has_user_music();
  } else {
    clear_has_user_music();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_music)
}

// optional .cosmo.pb.UserData.SubscriptionInfo recostream_categories_subscriptions = 34;
inline bool UserData::has_recostream_categories_subscriptions() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void UserData::set_has_recostream_categories_subscriptions() {
  _has_bits_[0] |= 0x80000000u;
}
inline void UserData::clear_has_recostream_categories_subscriptions() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void UserData::clear_recostream_categories_subscriptions() {
  if (recostream_categories_subscriptions_ != NULL) recostream_categories_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_recostream_categories_subscriptions();
}
inline const ::cosmo::pb::UserData_SubscriptionInfo& UserData::recostream_categories_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = recostream_categories_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.recostream_categories_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_recostream_categories_subscriptions() {
  set_has_recostream_categories_subscriptions();
  if (recostream_categories_subscriptions_ == NULL) {
    _slow_mutable_recostream_categories_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.recostream_categories_subscriptions)
  return recostream_categories_subscriptions_;
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::release_recostream_categories_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.recostream_categories_subscriptions)
  clear_has_recostream_categories_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_recostream_categories_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = recostream_categories_subscriptions_;
    recostream_categories_subscriptions_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_recostream_categories_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* recostream_categories_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recostream_categories_subscriptions_;
  }
  if (recostream_categories_subscriptions != NULL) {
    _slow_set_allocated_recostream_categories_subscriptions(message_arena, &recostream_categories_subscriptions);
  }
  recostream_categories_subscriptions_ = recostream_categories_subscriptions;
  if (recostream_categories_subscriptions) {
    set_has_recostream_categories_subscriptions();
  } else {
    clear_has_recostream_categories_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.recostream_categories_subscriptions)
}

// optional .cosmo.pb.UserData.SubscriptionInfo recostream_domains_subscriptions = 35;
inline bool UserData::has_recostream_domains_subscriptions() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void UserData::set_has_recostream_domains_subscriptions() {
  _has_bits_[1] |= 0x00000001u;
}
inline void UserData::clear_has_recostream_domains_subscriptions() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void UserData::clear_recostream_domains_subscriptions() {
  if (recostream_domains_subscriptions_ != NULL) recostream_domains_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_recostream_domains_subscriptions();
}
inline const ::cosmo::pb::UserData_SubscriptionInfo& UserData::recostream_domains_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = recostream_domains_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.recostream_domains_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_recostream_domains_subscriptions() {
  set_has_recostream_domains_subscriptions();
  if (recostream_domains_subscriptions_ == NULL) {
    _slow_mutable_recostream_domains_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.recostream_domains_subscriptions)
  return recostream_domains_subscriptions_;
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::release_recostream_domains_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.recostream_domains_subscriptions)
  clear_has_recostream_domains_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_recostream_domains_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = recostream_domains_subscriptions_;
    recostream_domains_subscriptions_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_recostream_domains_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* recostream_domains_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recostream_domains_subscriptions_;
  }
  if (recostream_domains_subscriptions != NULL) {
    _slow_set_allocated_recostream_domains_subscriptions(message_arena, &recostream_domains_subscriptions);
  }
  recostream_domains_subscriptions_ = recostream_domains_subscriptions;
  if (recostream_domains_subscriptions) {
    set_has_recostream_domains_subscriptions();
  } else {
    clear_has_recostream_domains_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.recostream_domains_subscriptions)
}

// optional .cosmo.pb.UserData.SubscriptionInfo kafka_categories_subscriptions = 36;
inline bool UserData::has_kafka_categories_subscriptions() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void UserData::set_has_kafka_categories_subscriptions() {
  _has_bits_[1] |= 0x00000002u;
}
inline void UserData::clear_has_kafka_categories_subscriptions() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void UserData::clear_kafka_categories_subscriptions() {
  if (kafka_categories_subscriptions_ != NULL) kafka_categories_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_kafka_categories_subscriptions();
}
inline const ::cosmo::pb::UserData_SubscriptionInfo& UserData::kafka_categories_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = kafka_categories_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.kafka_categories_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_kafka_categories_subscriptions() {
  set_has_kafka_categories_subscriptions();
  if (kafka_categories_subscriptions_ == NULL) {
    _slow_mutable_kafka_categories_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.kafka_categories_subscriptions)
  return kafka_categories_subscriptions_;
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::release_kafka_categories_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.kafka_categories_subscriptions)
  clear_has_kafka_categories_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_kafka_categories_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = kafka_categories_subscriptions_;
    kafka_categories_subscriptions_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_kafka_categories_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* kafka_categories_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kafka_categories_subscriptions_;
  }
  if (kafka_categories_subscriptions != NULL) {
    _slow_set_allocated_kafka_categories_subscriptions(message_arena, &kafka_categories_subscriptions);
  }
  kafka_categories_subscriptions_ = kafka_categories_subscriptions;
  if (kafka_categories_subscriptions) {
    set_has_kafka_categories_subscriptions();
  } else {
    clear_has_kafka_categories_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.kafka_categories_subscriptions)
}

// optional .cosmo.pb.UserData.SubscriptionInfo kafka_domains_subscriptions = 37;
inline bool UserData::has_kafka_domains_subscriptions() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void UserData::set_has_kafka_domains_subscriptions() {
  _has_bits_[1] |= 0x00000004u;
}
inline void UserData::clear_has_kafka_domains_subscriptions() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void UserData::clear_kafka_domains_subscriptions() {
  if (kafka_domains_subscriptions_ != NULL) kafka_domains_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_kafka_domains_subscriptions();
}
inline const ::cosmo::pb::UserData_SubscriptionInfo& UserData::kafka_domains_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = kafka_domains_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.kafka_domains_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_kafka_domains_subscriptions() {
  set_has_kafka_domains_subscriptions();
  if (kafka_domains_subscriptions_ == NULL) {
    _slow_mutable_kafka_domains_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.kafka_domains_subscriptions)
  return kafka_domains_subscriptions_;
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::release_kafka_domains_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.kafka_domains_subscriptions)
  clear_has_kafka_domains_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_kafka_domains_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = kafka_domains_subscriptions_;
    kafka_domains_subscriptions_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_kafka_domains_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* kafka_domains_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kafka_domains_subscriptions_;
  }
  if (kafka_domains_subscriptions != NULL) {
    _slow_set_allocated_kafka_domains_subscriptions(message_arena, &kafka_domains_subscriptions);
  }
  kafka_domains_subscriptions_ = kafka_domains_subscriptions;
  if (kafka_domains_subscriptions) {
    set_has_kafka_domains_subscriptions();
  } else {
    clear_has_kafka_domains_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.kafka_domains_subscriptions)
}

// optional .cosmo.pb.UserData.SubscriptionInfo recostream_sources_subscriptions = 38;
inline bool UserData::has_recostream_sources_subscriptions() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void UserData::set_has_recostream_sources_subscriptions() {
  _has_bits_[1] |= 0x00000008u;
}
inline void UserData::clear_has_recostream_sources_subscriptions() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void UserData::clear_recostream_sources_subscriptions() {
  if (recostream_sources_subscriptions_ != NULL) recostream_sources_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_recostream_sources_subscriptions();
}
inline const ::cosmo::pb::UserData_SubscriptionInfo& UserData::recostream_sources_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = recostream_sources_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.recostream_sources_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_recostream_sources_subscriptions() {
  set_has_recostream_sources_subscriptions();
  if (recostream_sources_subscriptions_ == NULL) {
    _slow_mutable_recostream_sources_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.recostream_sources_subscriptions)
  return recostream_sources_subscriptions_;
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::release_recostream_sources_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.recostream_sources_subscriptions)
  clear_has_recostream_sources_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_recostream_sources_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = recostream_sources_subscriptions_;
    recostream_sources_subscriptions_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_recostream_sources_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* recostream_sources_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recostream_sources_subscriptions_;
  }
  if (recostream_sources_subscriptions != NULL) {
    _slow_set_allocated_recostream_sources_subscriptions(message_arena, &recostream_sources_subscriptions);
  }
  recostream_sources_subscriptions_ = recostream_sources_subscriptions;
  if (recostream_sources_subscriptions) {
    set_has_recostream_sources_subscriptions();
  } else {
    clear_has_recostream_sources_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.recostream_sources_subscriptions)
}

// optional .cosmo.pb.UserData.UserEvents recostream_dislikes = 39;
inline bool UserData::has_recostream_dislikes() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void UserData::set_has_recostream_dislikes() {
  _has_bits_[1] |= 0x00000010u;
}
inline void UserData::clear_has_recostream_dislikes() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void UserData::clear_recostream_dislikes() {
  if (recostream_dislikes_ != NULL) recostream_dislikes_->::cosmo::pb::UserData_UserEvents::Clear();
  clear_has_recostream_dislikes();
}
inline const ::cosmo::pb::UserData_UserEvents& UserData::recostream_dislikes() const {
  const ::cosmo::pb::UserData_UserEvents* p = recostream_dislikes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.recostream_dislikes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserEvents*>(
      &::cosmo::pb::_UserData_UserEvents_default_instance_);
}
inline ::cosmo::pb::UserData_UserEvents* UserData::mutable_recostream_dislikes() {
  set_has_recostream_dislikes();
  if (recostream_dislikes_ == NULL) {
    _slow_mutable_recostream_dislikes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.recostream_dislikes)
  return recostream_dislikes_;
}
inline ::cosmo::pb::UserData_UserEvents* UserData::release_recostream_dislikes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.recostream_dislikes)
  clear_has_recostream_dislikes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_recostream_dislikes();
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = recostream_dislikes_;
    recostream_dislikes_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_recostream_dislikes(::cosmo::pb::UserData_UserEvents* recostream_dislikes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recostream_dislikes_;
  }
  if (recostream_dislikes != NULL) {
    _slow_set_allocated_recostream_dislikes(message_arena, &recostream_dislikes);
  }
  recostream_dislikes_ = recostream_dislikes;
  if (recostream_dislikes) {
    set_has_recostream_dislikes();
  } else {
    clear_has_recostream_dislikes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.recostream_dislikes)
}

// optional .cosmo.pb.UserData.VkGroupsForUser vk_groups_for_user = 40;
inline bool UserData::has_vk_groups_for_user() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void UserData::set_has_vk_groups_for_user() {
  _has_bits_[1] |= 0x00000020u;
}
inline void UserData::clear_has_vk_groups_for_user() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void UserData::clear_vk_groups_for_user() {
  if (vk_groups_for_user_ != NULL) vk_groups_for_user_->::cosmo::pb::UserData_VkGroupsForUser::Clear();
  clear_has_vk_groups_for_user();
}
inline const ::cosmo::pb::UserData_VkGroupsForUser& UserData::vk_groups_for_user() const {
  const ::cosmo::pb::UserData_VkGroupsForUser* p = vk_groups_for_user_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.vk_groups_for_user)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_VkGroupsForUser*>(
      &::cosmo::pb::_UserData_VkGroupsForUser_default_instance_);
}
inline ::cosmo::pb::UserData_VkGroupsForUser* UserData::mutable_vk_groups_for_user() {
  set_has_vk_groups_for_user();
  if (vk_groups_for_user_ == NULL) {
    _slow_mutable_vk_groups_for_user();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.vk_groups_for_user)
  return vk_groups_for_user_;
}
inline ::cosmo::pb::UserData_VkGroupsForUser* UserData::release_vk_groups_for_user() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.vk_groups_for_user)
  clear_has_vk_groups_for_user();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_groups_for_user();
  } else {
    ::cosmo::pb::UserData_VkGroupsForUser* temp = vk_groups_for_user_;
    vk_groups_for_user_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_vk_groups_for_user(::cosmo::pb::UserData_VkGroupsForUser* vk_groups_for_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_groups_for_user_;
  }
  if (vk_groups_for_user != NULL) {
    _slow_set_allocated_vk_groups_for_user(message_arena, &vk_groups_for_user);
  }
  vk_groups_for_user_ = vk_groups_for_user;
  if (vk_groups_for_user) {
    set_has_vk_groups_for_user();
  } else {
    clear_has_vk_groups_for_user();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.vk_groups_for_user)
}

// optional .cosmo.pb.UserData.LogsVisitedSources logs_visited_sources = 41;
inline bool UserData::has_logs_visited_sources() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void UserData::set_has_logs_visited_sources() {
  _has_bits_[1] |= 0x00000040u;
}
inline void UserData::clear_has_logs_visited_sources() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void UserData::clear_logs_visited_sources() {
  if (logs_visited_sources_ != NULL) logs_visited_sources_->::cosmo::pb::UserData_LogsVisitedSources::Clear();
  clear_has_logs_visited_sources();
}
inline const ::cosmo::pb::UserData_LogsVisitedSources& UserData::logs_visited_sources() const {
  const ::cosmo::pb::UserData_LogsVisitedSources* p = logs_visited_sources_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.logs_visited_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_LogsVisitedSources*>(
      &::cosmo::pb::_UserData_LogsVisitedSources_default_instance_);
}
inline ::cosmo::pb::UserData_LogsVisitedSources* UserData::mutable_logs_visited_sources() {
  set_has_logs_visited_sources();
  if (logs_visited_sources_ == NULL) {
    _slow_mutable_logs_visited_sources();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.logs_visited_sources)
  return logs_visited_sources_;
}
inline ::cosmo::pb::UserData_LogsVisitedSources* UserData::release_logs_visited_sources() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.logs_visited_sources)
  clear_has_logs_visited_sources();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_logs_visited_sources();
  } else {
    ::cosmo::pb::UserData_LogsVisitedSources* temp = logs_visited_sources_;
    logs_visited_sources_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_logs_visited_sources(::cosmo::pb::UserData_LogsVisitedSources* logs_visited_sources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete logs_visited_sources_;
  }
  if (logs_visited_sources != NULL) {
    _slow_set_allocated_logs_visited_sources(message_arena, &logs_visited_sources);
  }
  logs_visited_sources_ = logs_visited_sources;
  if (logs_visited_sources) {
    set_has_logs_visited_sources();
  } else {
    clear_has_logs_visited_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.logs_visited_sources)
}

// optional .cosmo.pb.UserData.SubscriptionInfo kafka_sources_subscriptions = 42;
inline bool UserData::has_kafka_sources_subscriptions() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void UserData::set_has_kafka_sources_subscriptions() {
  _has_bits_[1] |= 0x00000080u;
}
inline void UserData::clear_has_kafka_sources_subscriptions() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void UserData::clear_kafka_sources_subscriptions() {
  if (kafka_sources_subscriptions_ != NULL) kafka_sources_subscriptions_->::cosmo::pb::UserData_SubscriptionInfo::Clear();
  clear_has_kafka_sources_subscriptions();
}
inline const ::cosmo::pb::UserData_SubscriptionInfo& UserData::kafka_sources_subscriptions() const {
  const ::cosmo::pb::UserData_SubscriptionInfo* p = kafka_sources_subscriptions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.kafka_sources_subscriptions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SubscriptionInfo*>(
      &::cosmo::pb::_UserData_SubscriptionInfo_default_instance_);
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::mutable_kafka_sources_subscriptions() {
  set_has_kafka_sources_subscriptions();
  if (kafka_sources_subscriptions_ == NULL) {
    _slow_mutable_kafka_sources_subscriptions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.kafka_sources_subscriptions)
  return kafka_sources_subscriptions_;
}
inline ::cosmo::pb::UserData_SubscriptionInfo* UserData::release_kafka_sources_subscriptions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.kafka_sources_subscriptions)
  clear_has_kafka_sources_subscriptions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_kafka_sources_subscriptions();
  } else {
    ::cosmo::pb::UserData_SubscriptionInfo* temp = kafka_sources_subscriptions_;
    kafka_sources_subscriptions_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_kafka_sources_subscriptions(::cosmo::pb::UserData_SubscriptionInfo* kafka_sources_subscriptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kafka_sources_subscriptions_;
  }
  if (kafka_sources_subscriptions != NULL) {
    _slow_set_allocated_kafka_sources_subscriptions(message_arena, &kafka_sources_subscriptions);
  }
  kafka_sources_subscriptions_ = kafka_sources_subscriptions;
  if (kafka_sources_subscriptions) {
    set_has_kafka_sources_subscriptions();
  } else {
    clear_has_kafka_sources_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.kafka_sources_subscriptions)
}

// optional .cosmo.pb.UserData.UserEvents recostream_likes = 43;
inline bool UserData::has_recostream_likes() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void UserData::set_has_recostream_likes() {
  _has_bits_[1] |= 0x00000100u;
}
inline void UserData::clear_has_recostream_likes() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void UserData::clear_recostream_likes() {
  if (recostream_likes_ != NULL) recostream_likes_->::cosmo::pb::UserData_UserEvents::Clear();
  clear_has_recostream_likes();
}
inline const ::cosmo::pb::UserData_UserEvents& UserData::recostream_likes() const {
  const ::cosmo::pb::UserData_UserEvents* p = recostream_likes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.recostream_likes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserEvents*>(
      &::cosmo::pb::_UserData_UserEvents_default_instance_);
}
inline ::cosmo::pb::UserData_UserEvents* UserData::mutable_recostream_likes() {
  set_has_recostream_likes();
  if (recostream_likes_ == NULL) {
    _slow_mutable_recostream_likes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.recostream_likes)
  return recostream_likes_;
}
inline ::cosmo::pb::UserData_UserEvents* UserData::release_recostream_likes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.recostream_likes)
  clear_has_recostream_likes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_recostream_likes();
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = recostream_likes_;
    recostream_likes_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_recostream_likes(::cosmo::pb::UserData_UserEvents* recostream_likes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recostream_likes_;
  }
  if (recostream_likes != NULL) {
    _slow_set_allocated_recostream_likes(message_arena, &recostream_likes);
  }
  recostream_likes_ = recostream_likes;
  if (recostream_likes) {
    set_has_recostream_likes();
  } else {
    clear_has_recostream_likes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.recostream_likes)
}

// optional .cosmo.pb.UserData.UserEvents user_likes = 44;
inline bool UserData::has_user_likes() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void UserData::set_has_user_likes() {
  _has_bits_[1] |= 0x00000200u;
}
inline void UserData::clear_has_user_likes() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void UserData::clear_user_likes() {
  if (user_likes_ != NULL) user_likes_->::cosmo::pb::UserData_UserEvents::Clear();
  clear_has_user_likes();
}
inline const ::cosmo::pb::UserData_UserEvents& UserData::user_likes() const {
  const ::cosmo::pb::UserData_UserEvents* p = user_likes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_likes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserEvents*>(
      &::cosmo::pb::_UserData_UserEvents_default_instance_);
}
inline ::cosmo::pb::UserData_UserEvents* UserData::mutable_user_likes() {
  set_has_user_likes();
  if (user_likes_ == NULL) {
    _slow_mutable_user_likes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_likes)
  return user_likes_;
}
inline ::cosmo::pb::UserData_UserEvents* UserData::release_user_likes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_likes)
  clear_has_user_likes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_likes();
  } else {
    ::cosmo::pb::UserData_UserEvents* temp = user_likes_;
    user_likes_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_user_likes(::cosmo::pb::UserData_UserEvents* user_likes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_likes_;
  }
  if (user_likes != NULL) {
    _slow_set_allocated_user_likes(message_arena, &user_likes);
  }
  user_likes_ = user_likes;
  if (user_likes) {
    set_has_user_likes();
  } else {
    clear_has_user_likes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_likes)
}

// optional .cosmo.pb.UserData.UserSourcesEvents user_sources_events = 45;
inline bool UserData::has_user_sources_events() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void UserData::set_has_user_sources_events() {
  _has_bits_[1] |= 0x00000400u;
}
inline void UserData::clear_has_user_sources_events() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void UserData::clear_user_sources_events() {
  if (user_sources_events_ != NULL) user_sources_events_->::cosmo::pb::UserData_UserSourcesEvents::Clear();
  clear_has_user_sources_events();
}
inline const ::cosmo::pb::UserData_UserSourcesEvents& UserData::user_sources_events() const {
  const ::cosmo::pb::UserData_UserSourcesEvents* p = user_sources_events_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.user_sources_events)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserSourcesEvents*>(
      &::cosmo::pb::_UserData_UserSourcesEvents_default_instance_);
}
inline ::cosmo::pb::UserData_UserSourcesEvents* UserData::mutable_user_sources_events() {
  set_has_user_sources_events();
  if (user_sources_events_ == NULL) {
    _slow_mutable_user_sources_events();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.user_sources_events)
  return user_sources_events_;
}
inline ::cosmo::pb::UserData_UserSourcesEvents* UserData::release_user_sources_events() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.user_sources_events)
  clear_has_user_sources_events();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_sources_events();
  } else {
    ::cosmo::pb::UserData_UserSourcesEvents* temp = user_sources_events_;
    user_sources_events_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_user_sources_events(::cosmo::pb::UserData_UserSourcesEvents* user_sources_events) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_sources_events_;
  }
  if (user_sources_events != NULL) {
    _slow_set_allocated_user_sources_events(message_arena, &user_sources_events);
  }
  user_sources_events_ = user_sources_events;
  if (user_sources_events) {
    set_has_user_sources_events();
  } else {
    clear_has_user_sources_events();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.user_sources_events)
}

// optional .cosmo.pb.UserData.SitesForUser narrow_sites = 46;
inline bool UserData::has_narrow_sites() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void UserData::set_has_narrow_sites() {
  _has_bits_[1] |= 0x00000800u;
}
inline void UserData::clear_has_narrow_sites() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void UserData::clear_narrow_sites() {
  if (narrow_sites_ != NULL) narrow_sites_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_narrow_sites();
}
inline const ::cosmo::pb::UserData_SitesForUser& UserData::narrow_sites() const {
  const ::cosmo::pb::UserData_SitesForUser* p = narrow_sites_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.narrow_sites)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::mutable_narrow_sites() {
  set_has_narrow_sites();
  if (narrow_sites_ == NULL) {
    _slow_mutable_narrow_sites();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.narrow_sites)
  return narrow_sites_;
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::release_narrow_sites() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.narrow_sites)
  clear_has_narrow_sites();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_narrow_sites();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = narrow_sites_;
    narrow_sites_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_narrow_sites(::cosmo::pb::UserData_SitesForUser* narrow_sites) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete narrow_sites_;
  }
  if (narrow_sites != NULL) {
    _slow_set_allocated_narrow_sites(message_arena, &narrow_sites);
  }
  narrow_sites_ = narrow_sites;
  if (narrow_sites) {
    set_has_narrow_sites();
  } else {
    clear_has_narrow_sites();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.narrow_sites)
}

// optional .cosmo.pb.UserData.SitesForUser narrow_sites1 = 47;
inline bool UserData::has_narrow_sites1() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void UserData::set_has_narrow_sites1() {
  _has_bits_[1] |= 0x00001000u;
}
inline void UserData::clear_has_narrow_sites1() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void UserData::clear_narrow_sites1() {
  if (narrow_sites1_ != NULL) narrow_sites1_->::cosmo::pb::UserData_SitesForUser::Clear();
  clear_has_narrow_sites1();
}
inline const ::cosmo::pb::UserData_SitesForUser& UserData::narrow_sites1() const {
  const ::cosmo::pb::UserData_SitesForUser* p = narrow_sites1_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.narrow_sites1)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_SitesForUser*>(
      &::cosmo::pb::_UserData_SitesForUser_default_instance_);
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::mutable_narrow_sites1() {
  set_has_narrow_sites1();
  if (narrow_sites1_ == NULL) {
    _slow_mutable_narrow_sites1();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.narrow_sites1)
  return narrow_sites1_;
}
inline ::cosmo::pb::UserData_SitesForUser* UserData::release_narrow_sites1() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.narrow_sites1)
  clear_has_narrow_sites1();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_narrow_sites1();
  } else {
    ::cosmo::pb::UserData_SitesForUser* temp = narrow_sites1_;
    narrow_sites1_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_narrow_sites1(::cosmo::pb::UserData_SitesForUser* narrow_sites1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete narrow_sites1_;
  }
  if (narrow_sites1 != NULL) {
    _slow_set_allocated_narrow_sites1(message_arena, &narrow_sites1);
  }
  narrow_sites1_ = narrow_sites1;
  if (narrow_sites1) {
    set_has_narrow_sites1();
  } else {
    clear_has_narrow_sites1();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.narrow_sites1)
}

// optional .cosmo.pb.PackedReactionsArr reactions = 48;
inline bool UserData::has_reactions() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void UserData::set_has_reactions() {
  _has_bits_[1] |= 0x00002000u;
}
inline void UserData::clear_has_reactions() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void UserData::clear_reactions() {
  if (reactions_ != NULL) reactions_->::cosmo::pb::PackedReactionsArr::Clear();
  clear_has_reactions();
}
inline const ::cosmo::pb::PackedReactionsArr& UserData::reactions() const {
  const ::cosmo::pb::PackedReactionsArr* p = reactions_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.reactions)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::PackedReactionsArr*>(
      &::cosmo::pb::_PackedReactionsArr_default_instance_);
}
inline ::cosmo::pb::PackedReactionsArr* UserData::mutable_reactions() {
  set_has_reactions();
  if (reactions_ == NULL) {
    _slow_mutable_reactions();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.reactions)
  return reactions_;
}
inline ::cosmo::pb::PackedReactionsArr* UserData::release_reactions() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.reactions)
  clear_has_reactions();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_reactions();
  } else {
    ::cosmo::pb::PackedReactionsArr* temp = reactions_;
    reactions_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_reactions(::cosmo::pb::PackedReactionsArr* reactions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reactions_;
  }
  if (reactions != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(reactions);
    }
  }
  reactions_ = reactions;
  if (reactions) {
    set_has_reactions();
  } else {
    clear_has_reactions();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.reactions)
}

// optional .cosmo.pb.ShowsArr shows = 49;
inline bool UserData::has_shows() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void UserData::set_has_shows() {
  _has_bits_[1] |= 0x00004000u;
}
inline void UserData::clear_has_shows() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void UserData::clear_shows() {
  if (shows_ != NULL) shows_->::cosmo::pb::ShowsArr::Clear();
  clear_has_shows();
}
inline const ::cosmo::pb::ShowsArr& UserData::shows() const {
  const ::cosmo::pb::ShowsArr* p = shows_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.shows)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::ShowsArr*>(
      &::cosmo::pb::_ShowsArr_default_instance_);
}
inline ::cosmo::pb::ShowsArr* UserData::mutable_shows() {
  set_has_shows();
  if (shows_ == NULL) {
    _slow_mutable_shows();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.shows)
  return shows_;
}
inline ::cosmo::pb::ShowsArr* UserData::release_shows() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.shows)
  clear_has_shows();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows();
  } else {
    ::cosmo::pb::ShowsArr* temp = shows_;
    shows_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_shows(::cosmo::pb::ShowsArr* shows) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_;
  }
  if (shows != NULL) {
    if (message_arena != NULL) {
      message_arena->Own(shows);
    }
  }
  shows_ = shows;
  if (shows) {
    set_has_shows();
  } else {
    clear_has_shows();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.shows)
}

// optional .cosmo.pb.UserData.UserI2IEvents i2i_user_themes = 50;
inline bool UserData::has_i2i_user_themes() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void UserData::set_has_i2i_user_themes() {
  _has_bits_[1] |= 0x00008000u;
}
inline void UserData::clear_has_i2i_user_themes() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void UserData::clear_i2i_user_themes() {
  if (i2i_user_themes_ != NULL) i2i_user_themes_->::cosmo::pb::UserData_UserI2IEvents::Clear();
  clear_has_i2i_user_themes();
}
inline const ::cosmo::pb::UserData_UserI2IEvents& UserData::i2i_user_themes() const {
  const ::cosmo::pb::UserData_UserI2IEvents* p = i2i_user_themes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.UserData.i2i_user_themes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData_UserI2IEvents*>(
      &::cosmo::pb::_UserData_UserI2IEvents_default_instance_);
}
inline ::cosmo::pb::UserData_UserI2IEvents* UserData::mutable_i2i_user_themes() {
  set_has_i2i_user_themes();
  if (i2i_user_themes_ == NULL) {
    _slow_mutable_i2i_user_themes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.UserData.i2i_user_themes)
  return i2i_user_themes_;
}
inline ::cosmo::pb::UserData_UserI2IEvents* UserData::release_i2i_user_themes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.UserData.i2i_user_themes)
  clear_has_i2i_user_themes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_i2i_user_themes();
  } else {
    ::cosmo::pb::UserData_UserI2IEvents* temp = i2i_user_themes_;
    i2i_user_themes_ = NULL;
    return temp;
  }
}
inline  void UserData::set_allocated_i2i_user_themes(::cosmo::pb::UserData_UserI2IEvents* i2i_user_themes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete i2i_user_themes_;
  }
  if (i2i_user_themes != NULL) {
    _slow_set_allocated_i2i_user_themes(message_arena, &i2i_user_themes);
  }
  i2i_user_themes_ = i2i_user_themes;
  if (i2i_user_themes) {
    set_has_i2i_user_themes();
  } else {
    clear_has_i2i_user_themes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.UserData.i2i_user_themes)
}

// -------------------------------------------------------------------

// GroupedUserData

// optional .cosmo.pb.UserData data = 1;
inline bool GroupedUserData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupedUserData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupedUserData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupedUserData::clear_data() {
  if (data_ != NULL) data_->::cosmo::pb::UserData::Clear();
  clear_has_data();
}
inline const ::cosmo::pb::UserData& GroupedUserData::data() const {
  const ::cosmo::pb::UserData* p = data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.GroupedUserData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData*>(
      &::cosmo::pb::_UserData_default_instance_);
}
inline ::cosmo::pb::UserData* GroupedUserData::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    _slow_mutable_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.GroupedUserData.data)
  return data_;
}
inline ::cosmo::pb::UserData* GroupedUserData::release_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.GroupedUserData.data)
  clear_has_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_data();
  } else {
    ::cosmo::pb::UserData* temp = data_;
    data_ = NULL;
    return temp;
  }
}
inline  void GroupedUserData::set_allocated_data(::cosmo::pb::UserData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data != NULL) {
    _slow_set_allocated_data(message_arena, &data);
  }
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.GroupedUserData.data)
}

// -------------------------------------------------------------------

// SourceData_OriginalInfo

// optional string id = 1;
inline bool SourceData_OriginalInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_OriginalInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_OriginalInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_OriginalInfo::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_id();
}
inline const ::std::string& SourceData_OriginalInfo::id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.OriginalInfo.id)
  return id_.Get();
}
inline void SourceData_OriginalInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.OriginalInfo.id)
}
#if LANG_CXX11
inline void SourceData_OriginalInfo::set_id(::std::string&& value) {
  set_has_id();
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.SourceData.OriginalInfo.id)
}
#endif
inline void SourceData_OriginalInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.SourceData.OriginalInfo.id)
}
inline void SourceData_OriginalInfo::set_id(const char* value,
    size_t size) {
  set_has_id();
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.SourceData.OriginalInfo.id)
}
inline ::std::string* SourceData_OriginalInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.OriginalInfo.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SourceData_OriginalInfo::release_id() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.OriginalInfo.id)
  clear_has_id();
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SourceData_OriginalInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.OriginalInfo.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_id();
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SourceData_OriginalInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.OriginalInfo.id)
}
inline void SourceData_OriginalInfo::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.OriginalInfo.id)
}

// -------------------------------------------------------------------

// SourceData_OkInfo

// required int64 source_id = 1;
inline bool SourceData_OkInfo::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_OkInfo::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_OkInfo::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_OkInfo::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 SourceData_OkInfo::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.OkInfo.source_id)
  return source_id_;
}
inline void SourceData_OkInfo::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.OkInfo.source_id)
}

// -------------------------------------------------------------------

// SourceData_NewsData

// optional int32 rubric = 1;
inline bool SourceData_NewsData::has_rubric() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_NewsData::set_has_rubric() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_NewsData::clear_has_rubric() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_NewsData::clear_rubric() {
  rubric_ = 0;
  clear_has_rubric();
}
inline ::google::protobuf::int32 SourceData_NewsData::rubric() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.NewsData.rubric)
  return rubric_;
}
inline void SourceData_NewsData::set_rubric(::google::protobuf::int32 value) {
  set_has_rubric();
  rubric_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.NewsData.rubric)
}

// -------------------------------------------------------------------

// SourceData_SourceInfo

// required .cosmo.pb.SourceData.SourceInfo.SourceType type = 1;
inline bool SourceData_SourceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourceInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cosmo::pb::SourceData_SourceInfo_SourceType SourceData_SourceInfo::type() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.type)
  return static_cast< ::cosmo::pb::SourceData_SourceInfo_SourceType >(type_);
}
inline void SourceData_SourceInfo::set_type(::cosmo::pb::SourceData_SourceInfo_SourceType value) {
  assert(::cosmo::pb::SourceData_SourceInfo_SourceType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.type)
}

// optional bool is_censored = 2;
inline bool SourceData_SourceInfo::has_is_censored() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourceInfo::set_has_is_censored() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourceInfo::clear_has_is_censored() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourceInfo::clear_is_censored() {
  is_censored_ = false;
  clear_has_is_censored();
}
inline bool SourceData_SourceInfo::is_censored() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.is_censored)
  return is_censored_;
}
inline void SourceData_SourceInfo::set_is_censored(bool value) {
  set_has_is_censored();
  is_censored_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.is_censored)
}

// repeated int32 category = 3;
inline int SourceData_SourceInfo::category_size() const {
  return category_.size();
}
inline void SourceData_SourceInfo::clear_category() {
  category_.Clear();
}
inline ::google::protobuf::int32 SourceData_SourceInfo::category(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.category)
  return category_.Get(index);
}
inline void SourceData_SourceInfo::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.category)
}
inline void SourceData_SourceInfo::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceInfo.category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SourceData_SourceInfo::category() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceInfo.category)
  return category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SourceData_SourceInfo::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceInfo.category)
  return &category_;
}

// optional bool tape_show = 4;
inline bool SourceData_SourceInfo::has_tape_show() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData_SourceInfo::set_has_tape_show() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData_SourceInfo::clear_has_tape_show() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData_SourceInfo::clear_tape_show() {
  tape_show_ = false;
  clear_has_tape_show();
}
inline bool SourceData_SourceInfo::tape_show() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.tape_show)
  return tape_show_;
}
inline void SourceData_SourceInfo::set_tape_show(bool value) {
  set_has_tape_show();
  tape_show_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.tape_show)
}

// optional bool tape_whitelist = 5;
inline bool SourceData_SourceInfo::has_tape_whitelist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SourceData_SourceInfo::set_has_tape_whitelist() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SourceData_SourceInfo::clear_has_tape_whitelist() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SourceData_SourceInfo::clear_tape_whitelist() {
  tape_whitelist_ = false;
  clear_has_tape_whitelist();
}
inline bool SourceData_SourceInfo::tape_whitelist() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.tape_whitelist)
  return tape_whitelist_;
}
inline void SourceData_SourceInfo::set_tape_whitelist(bool value) {
  set_has_tape_whitelist();
  tape_whitelist_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.tape_whitelist)
}

// optional bool tape_blacklist = 6;
inline bool SourceData_SourceInfo::has_tape_blacklist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SourceData_SourceInfo::set_has_tape_blacklist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SourceData_SourceInfo::clear_has_tape_blacklist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SourceData_SourceInfo::clear_tape_blacklist() {
  tape_blacklist_ = false;
  clear_has_tape_blacklist();
}
inline bool SourceData_SourceInfo::tape_blacklist() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceInfo.tape_blacklist)
  return tape_blacklist_;
}
inline void SourceData_SourceInfo::set_tape_blacklist(bool value) {
  set_has_tape_blacklist();
  tape_blacklist_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceInfo.tape_blacklist)
}

// -------------------------------------------------------------------

// SourceData_LentaAdminSourceInfo

// optional bool use_in_lenta = 1;
inline bool SourceData_LentaAdminSourceInfo::has_use_in_lenta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_LentaAdminSourceInfo::set_has_use_in_lenta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_LentaAdminSourceInfo::clear_has_use_in_lenta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_LentaAdminSourceInfo::clear_use_in_lenta() {
  use_in_lenta_ = false;
  clear_has_use_in_lenta();
}
inline bool SourceData_LentaAdminSourceInfo::use_in_lenta() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LentaAdminSourceInfo.use_in_lenta)
  return use_in_lenta_;
}
inline void SourceData_LentaAdminSourceInfo::set_use_in_lenta(bool value) {
  set_has_use_in_lenta();
  use_in_lenta_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LentaAdminSourceInfo.use_in_lenta)
}

// optional bool use_in_main = 2;
inline bool SourceData_LentaAdminSourceInfo::has_use_in_main() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_LentaAdminSourceInfo::set_has_use_in_main() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_LentaAdminSourceInfo::clear_has_use_in_main() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_LentaAdminSourceInfo::clear_use_in_main() {
  use_in_main_ = false;
  clear_has_use_in_main();
}
inline bool SourceData_LentaAdminSourceInfo::use_in_main() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LentaAdminSourceInfo.use_in_main)
  return use_in_main_;
}
inline void SourceData_LentaAdminSourceInfo::set_use_in_main(bool value) {
  set_has_use_in_main();
  use_in_main_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LentaAdminSourceInfo.use_in_main)
}

// repeated uint32 regions = 3;
inline int SourceData_LentaAdminSourceInfo::regions_size() const {
  return regions_.size();
}
inline void SourceData_LentaAdminSourceInfo::clear_regions() {
  regions_.Clear();
}
inline ::google::protobuf::uint32 SourceData_LentaAdminSourceInfo::regions(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LentaAdminSourceInfo.regions)
  return regions_.Get(index);
}
inline void SourceData_LentaAdminSourceInfo::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LentaAdminSourceInfo.regions)
}
inline void SourceData_LentaAdminSourceInfo::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.LentaAdminSourceInfo.regions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SourceData_LentaAdminSourceInfo::regions() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.LentaAdminSourceInfo.regions)
  return regions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SourceData_LentaAdminSourceInfo::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.LentaAdminSourceInfo.regions)
  return &regions_;
}

// optional bool use_fulltext = 4;
inline bool SourceData_LentaAdminSourceInfo::has_use_fulltext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData_LentaAdminSourceInfo::set_has_use_fulltext() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData_LentaAdminSourceInfo::clear_has_use_fulltext() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData_LentaAdminSourceInfo::clear_use_fulltext() {
  use_fulltext_ = false;
  clear_has_use_fulltext();
}
inline bool SourceData_LentaAdminSourceInfo::use_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LentaAdminSourceInfo.use_fulltext)
  return use_fulltext_;
}
inline void SourceData_LentaAdminSourceInfo::set_use_fulltext(bool value) {
  set_has_use_fulltext();
  use_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LentaAdminSourceInfo.use_fulltext)
}

// -------------------------------------------------------------------

// SourceData_GroupStat

// optional float sigma = 1;
inline bool SourceData_GroupStat::has_sigma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_GroupStat::set_has_sigma() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_GroupStat::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_GroupStat::clear_sigma() {
  sigma_ = 0;
  clear_has_sigma();
}
inline float SourceData_GroupStat::sigma() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupStat.sigma)
  return sigma_;
}
inline void SourceData_GroupStat::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupStat.sigma)
}

// optional float mean = 2;
inline bool SourceData_GroupStat::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_GroupStat::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_GroupStat::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_GroupStat::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float SourceData_GroupStat::mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupStat.mean)
  return mean_;
}
inline void SourceData_GroupStat::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupStat.mean)
}

// optional float likes = 3;
inline bool SourceData_GroupStat::has_likes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData_GroupStat::set_has_likes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData_GroupStat::clear_has_likes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData_GroupStat::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
inline float SourceData_GroupStat::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupStat.likes)
  return likes_;
}
inline void SourceData_GroupStat::set_likes(float value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupStat.likes)
}

// optional float norm_likes = 4;
inline bool SourceData_GroupStat::has_norm_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SourceData_GroupStat::set_has_norm_likes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SourceData_GroupStat::clear_has_norm_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SourceData_GroupStat::clear_norm_likes() {
  norm_likes_ = 0;
  clear_has_norm_likes();
}
inline float SourceData_GroupStat::norm_likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupStat.norm_likes)
  return norm_likes_;
}
inline void SourceData_GroupStat::set_norm_likes(float value) {
  set_has_norm_likes();
  norm_likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupStat.norm_likes)
}

// optional float norm_likes_kafka = 5;
inline bool SourceData_GroupStat::has_norm_likes_kafka() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SourceData_GroupStat::set_has_norm_likes_kafka() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SourceData_GroupStat::clear_has_norm_likes_kafka() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SourceData_GroupStat::clear_norm_likes_kafka() {
  norm_likes_kafka_ = 0;
  clear_has_norm_likes_kafka();
}
inline float SourceData_GroupStat::norm_likes_kafka() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupStat.norm_likes_kafka)
  return norm_likes_kafka_;
}
inline void SourceData_GroupStat::set_norm_likes_kafka(float value) {
  set_has_norm_likes_kafka();
  norm_likes_kafka_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupStat.norm_likes_kafka)
}

// -------------------------------------------------------------------

// SourceData_AlsFea

// repeated float als = 1;
inline int SourceData_AlsFea::als_size() const {
  return als_.size();
}
inline void SourceData_AlsFea::clear_als() {
  als_.Clear();
}
inline float SourceData_AlsFea::als(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.AlsFea.als)
  return als_.Get(index);
}
inline void SourceData_AlsFea::set_als(int index, float value) {
  als_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.AlsFea.als)
}
inline void SourceData_AlsFea::add_als(float value) {
  als_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.AlsFea.als)
}
inline const ::google::protobuf::RepeatedField< float >&
SourceData_AlsFea::als() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.AlsFea.als)
  return als_;
}
inline ::google::protobuf::RepeatedField< float >*
SourceData_AlsFea::mutable_als() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.AlsFea.als)
  return &als_;
}

// optional float vector_length = 2;
inline bool SourceData_AlsFea::has_vector_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_AlsFea::set_has_vector_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_AlsFea::clear_has_vector_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_AlsFea::clear_vector_length() {
  vector_length_ = 0;
  clear_has_vector_length();
}
inline float SourceData_AlsFea::vector_length() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.AlsFea.vector_length)
  return vector_length_;
}
inline void SourceData_AlsFea::set_vector_length(float value) {
  set_has_vector_length();
  vector_length_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.AlsFea.vector_length)
}

// optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
inline bool SourceData_AlsFea::has_als_c_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_AlsFea::set_has_als_c_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_AlsFea::clear_has_als_c_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_AlsFea::clear_als_c_stat() {
  if (als_c_stat_ != NULL) als_c_stat_->::cosmo::pb::SourceData_GroupStat::Clear();
  clear_has_als_c_stat();
}
inline const ::cosmo::pb::SourceData_GroupStat& SourceData_AlsFea::als_c_stat() const {
  const ::cosmo::pb::SourceData_GroupStat* p = als_c_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.AlsFea.als_c_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupStat*>(
      &::cosmo::pb::_SourceData_GroupStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupStat* SourceData_AlsFea::mutable_als_c_stat() {
  set_has_als_c_stat();
  if (als_c_stat_ == NULL) {
    _slow_mutable_als_c_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.AlsFea.als_c_stat)
  return als_c_stat_;
}
inline ::cosmo::pb::SourceData_GroupStat* SourceData_AlsFea::release_als_c_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.AlsFea.als_c_stat)
  clear_has_als_c_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_c_stat();
  } else {
    ::cosmo::pb::SourceData_GroupStat* temp = als_c_stat_;
    als_c_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_AlsFea::set_allocated_als_c_stat(::cosmo::pb::SourceData_GroupStat* als_c_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_c_stat_;
  }
  if (als_c_stat != NULL) {
    _slow_set_allocated_als_c_stat(message_arena, &als_c_stat);
  }
  als_c_stat_ = als_c_stat;
  if (als_c_stat) {
    set_has_als_c_stat();
  } else {
    clear_has_als_c_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.AlsFea.als_c_stat)
}

// -------------------------------------------------------------------

// SourceData_LdaFea

// repeated float lda = 1;
inline int SourceData_LdaFea::lda_size() const {
  return lda_.size();
}
inline void SourceData_LdaFea::clear_lda() {
  lda_.Clear();
}
inline float SourceData_LdaFea::lda(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LdaFea.lda)
  return lda_.Get(index);
}
inline void SourceData_LdaFea::set_lda(int index, float value) {
  lda_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LdaFea.lda)
}
inline void SourceData_LdaFea::add_lda(float value) {
  lda_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.LdaFea.lda)
}
inline const ::google::protobuf::RepeatedField< float >&
SourceData_LdaFea::lda() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.LdaFea.lda)
  return lda_;
}
inline ::google::protobuf::RepeatedField< float >*
SourceData_LdaFea::mutable_lda() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.LdaFea.lda)
  return &lda_;
}

// optional float vector_length = 2;
inline bool SourceData_LdaFea::has_vector_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_LdaFea::set_has_vector_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_LdaFea::clear_has_vector_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_LdaFea::clear_vector_length() {
  vector_length_ = 0;
  clear_has_vector_length();
}
inline float SourceData_LdaFea::vector_length() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LdaFea.vector_length)
  return vector_length_;
}
inline void SourceData_LdaFea::set_vector_length(float value) {
  set_has_vector_length();
  vector_length_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.LdaFea.vector_length)
}

// optional .cosmo.pb.SourceData.GroupStat als_c_stat = 3;
inline bool SourceData_LdaFea::has_als_c_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_LdaFea::set_has_als_c_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_LdaFea::clear_has_als_c_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_LdaFea::clear_als_c_stat() {
  if (als_c_stat_ != NULL) als_c_stat_->::cosmo::pb::SourceData_GroupStat::Clear();
  clear_has_als_c_stat();
}
inline const ::cosmo::pb::SourceData_GroupStat& SourceData_LdaFea::als_c_stat() const {
  const ::cosmo::pb::SourceData_GroupStat* p = als_c_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.LdaFea.als_c_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupStat*>(
      &::cosmo::pb::_SourceData_GroupStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupStat* SourceData_LdaFea::mutable_als_c_stat() {
  set_has_als_c_stat();
  if (als_c_stat_ == NULL) {
    _slow_mutable_als_c_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.LdaFea.als_c_stat)
  return als_c_stat_;
}
inline ::cosmo::pb::SourceData_GroupStat* SourceData_LdaFea::release_als_c_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.LdaFea.als_c_stat)
  clear_has_als_c_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_c_stat();
  } else {
    ::cosmo::pb::SourceData_GroupStat* temp = als_c_stat_;
    als_c_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_LdaFea::set_allocated_als_c_stat(::cosmo::pb::SourceData_GroupStat* als_c_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_c_stat_;
  }
  if (als_c_stat != NULL) {
    _slow_set_allocated_als_c_stat(message_arena, &als_c_stat);
  }
  als_c_stat_ = als_c_stat;
  if (als_c_stat) {
    set_has_als_c_stat();
  } else {
    clear_has_als_c_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.LdaFea.als_c_stat)
}

// -------------------------------------------------------------------

// SourceData_GroupPeriodStats

// optional double all_likes_mean = 1;
inline bool SourceData_GroupPeriodStats::has_all_likes_mean() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_all_likes_mean() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_GroupPeriodStats::clear_has_all_likes_mean() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_GroupPeriodStats::clear_all_likes_mean() {
  all_likes_mean_ = 0;
  clear_has_all_likes_mean();
}
inline double SourceData_GroupPeriodStats::all_likes_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.all_likes_mean)
  return all_likes_mean_;
}
inline void SourceData_GroupPeriodStats::set_all_likes_mean(double value) {
  set_has_all_likes_mean();
  all_likes_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.all_likes_mean)
}

// optional double all_likes_variance = 2;
inline bool SourceData_GroupPeriodStats::has_all_likes_variance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_all_likes_variance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_GroupPeriodStats::clear_has_all_likes_variance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_GroupPeriodStats::clear_all_likes_variance() {
  all_likes_variance_ = 0;
  clear_has_all_likes_variance();
}
inline double SourceData_GroupPeriodStats::all_likes_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.all_likes_variance)
  return all_likes_variance_;
}
inline void SourceData_GroupPeriodStats::set_all_likes_variance(double value) {
  set_has_all_likes_variance();
  all_likes_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.all_likes_variance)
}

// optional double period_likes_mean = 3;
inline bool SourceData_GroupPeriodStats::has_period_likes_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_likes_mean() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_likes_mean() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData_GroupPeriodStats::clear_period_likes_mean() {
  period_likes_mean_ = 0;
  clear_has_period_likes_mean();
}
inline double SourceData_GroupPeriodStats::period_likes_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_likes_mean)
  return period_likes_mean_;
}
inline void SourceData_GroupPeriodStats::set_period_likes_mean(double value) {
  set_has_period_likes_mean();
  period_likes_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_likes_mean)
}

// optional double period_likes_variance = 4;
inline bool SourceData_GroupPeriodStats::has_period_likes_variance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_likes_variance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_likes_variance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SourceData_GroupPeriodStats::clear_period_likes_variance() {
  period_likes_variance_ = 0;
  clear_has_period_likes_variance();
}
inline double SourceData_GroupPeriodStats::period_likes_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_likes_variance)
  return period_likes_variance_;
}
inline void SourceData_GroupPeriodStats::set_period_likes_variance(double value) {
  set_has_period_likes_variance();
  period_likes_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_likes_variance)
}

// optional double period_clicks_mean = 5;
inline bool SourceData_GroupPeriodStats::has_period_clicks_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_clicks_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_clicks_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SourceData_GroupPeriodStats::clear_period_clicks_mean() {
  period_clicks_mean_ = 0;
  clear_has_period_clicks_mean();
}
inline double SourceData_GroupPeriodStats::period_clicks_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_clicks_mean)
  return period_clicks_mean_;
}
inline void SourceData_GroupPeriodStats::set_period_clicks_mean(double value) {
  set_has_period_clicks_mean();
  period_clicks_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_clicks_mean)
}

// optional double period_clicks_variance = 6;
inline bool SourceData_GroupPeriodStats::has_period_clicks_variance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_clicks_variance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_clicks_variance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SourceData_GroupPeriodStats::clear_period_clicks_variance() {
  period_clicks_variance_ = 0;
  clear_has_period_clicks_variance();
}
inline double SourceData_GroupPeriodStats::period_clicks_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_clicks_variance)
  return period_clicks_variance_;
}
inline void SourceData_GroupPeriodStats::set_period_clicks_variance(double value) {
  set_has_period_clicks_variance();
  period_clicks_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_clicks_variance)
}

// optional double period_reshares_mean = 7;
inline bool SourceData_GroupPeriodStats::has_period_reshares_mean() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_reshares_mean() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_reshares_mean() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SourceData_GroupPeriodStats::clear_period_reshares_mean() {
  period_reshares_mean_ = 0;
  clear_has_period_reshares_mean();
}
inline double SourceData_GroupPeriodStats::period_reshares_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_reshares_mean)
  return period_reshares_mean_;
}
inline void SourceData_GroupPeriodStats::set_period_reshares_mean(double value) {
  set_has_period_reshares_mean();
  period_reshares_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_reshares_mean)
}

// optional double period_reshares_variance = 8;
inline bool SourceData_GroupPeriodStats::has_period_reshares_variance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_reshares_variance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_reshares_variance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SourceData_GroupPeriodStats::clear_period_reshares_variance() {
  period_reshares_variance_ = 0;
  clear_has_period_reshares_variance();
}
inline double SourceData_GroupPeriodStats::period_reshares_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_reshares_variance)
  return period_reshares_variance_;
}
inline void SourceData_GroupPeriodStats::set_period_reshares_variance(double value) {
  set_has_period_reshares_variance();
  period_reshares_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_reshares_variance)
}

// optional double period_comments_mean = 9;
inline bool SourceData_GroupPeriodStats::has_period_comments_mean() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_comments_mean() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_comments_mean() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SourceData_GroupPeriodStats::clear_period_comments_mean() {
  period_comments_mean_ = 0;
  clear_has_period_comments_mean();
}
inline double SourceData_GroupPeriodStats::period_comments_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_comments_mean)
  return period_comments_mean_;
}
inline void SourceData_GroupPeriodStats::set_period_comments_mean(double value) {
  set_has_period_comments_mean();
  period_comments_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_comments_mean)
}

// optional double period_comments_variance = 10;
inline bool SourceData_GroupPeriodStats::has_period_comments_variance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_comments_variance() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_comments_variance() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SourceData_GroupPeriodStats::clear_period_comments_variance() {
  period_comments_variance_ = 0;
  clear_has_period_comments_variance();
}
inline double SourceData_GroupPeriodStats::period_comments_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_comments_variance)
  return period_comments_variance_;
}
inline void SourceData_GroupPeriodStats::set_period_comments_variance(double value) {
  set_has_period_comments_variance();
  period_comments_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_comments_variance)
}

// optional int64 all_likes = 11;
inline bool SourceData_GroupPeriodStats::has_all_likes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_all_likes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SourceData_GroupPeriodStats::clear_has_all_likes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SourceData_GroupPeriodStats::clear_all_likes() {
  all_likes_ = GOOGLE_LONGLONG(0);
  clear_has_all_likes();
}
inline ::google::protobuf::int64 SourceData_GroupPeriodStats::all_likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.all_likes)
  return all_likes_;
}
inline void SourceData_GroupPeriodStats::set_all_likes(::google::protobuf::int64 value) {
  set_has_all_likes();
  all_likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.all_likes)
}

// optional int64 period_likes = 12;
inline bool SourceData_GroupPeriodStats::has_period_likes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_likes() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_likes() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SourceData_GroupPeriodStats::clear_period_likes() {
  period_likes_ = GOOGLE_LONGLONG(0);
  clear_has_period_likes();
}
inline ::google::protobuf::int64 SourceData_GroupPeriodStats::period_likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_likes)
  return period_likes_;
}
inline void SourceData_GroupPeriodStats::set_period_likes(::google::protobuf::int64 value) {
  set_has_period_likes();
  period_likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_likes)
}

// optional int64 period_clicks = 13;
inline bool SourceData_GroupPeriodStats::has_period_clicks() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_clicks() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_clicks() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SourceData_GroupPeriodStats::clear_period_clicks() {
  period_clicks_ = GOOGLE_LONGLONG(0);
  clear_has_period_clicks();
}
inline ::google::protobuf::int64 SourceData_GroupPeriodStats::period_clicks() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_clicks)
  return period_clicks_;
}
inline void SourceData_GroupPeriodStats::set_period_clicks(::google::protobuf::int64 value) {
  set_has_period_clicks();
  period_clicks_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_clicks)
}

// optional int64 period_reshares = 14;
inline bool SourceData_GroupPeriodStats::has_period_reshares() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_reshares() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_reshares() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SourceData_GroupPeriodStats::clear_period_reshares() {
  period_reshares_ = GOOGLE_LONGLONG(0);
  clear_has_period_reshares();
}
inline ::google::protobuf::int64 SourceData_GroupPeriodStats::period_reshares() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_reshares)
  return period_reshares_;
}
inline void SourceData_GroupPeriodStats::set_period_reshares(::google::protobuf::int64 value) {
  set_has_period_reshares();
  period_reshares_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_reshares)
}

// optional int64 period_comments = 15;
inline bool SourceData_GroupPeriodStats::has_period_comments() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SourceData_GroupPeriodStats::set_has_period_comments() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SourceData_GroupPeriodStats::clear_has_period_comments() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SourceData_GroupPeriodStats::clear_period_comments() {
  period_comments_ = GOOGLE_LONGLONG(0);
  clear_has_period_comments();
}
inline ::google::protobuf::int64 SourceData_GroupPeriodStats::period_comments() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupPeriodStats.period_comments)
  return period_comments_;
}
inline void SourceData_GroupPeriodStats::set_period_comments(::google::protobuf::int64 value) {
  set_has_period_comments();
  period_comments_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupPeriodStats.period_comments)
}

// -------------------------------------------------------------------

// SourceData_SourcePopularityStat_PopularityStat

// optional uint32 hits = 1;
inline bool SourceData_SourcePopularityStat_PopularityStat::has_hits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourcePopularityStat_PopularityStat::set_has_hits() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourcePopularityStat_PopularityStat::clear_has_hits() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourcePopularityStat_PopularityStat::clear_hits() {
  hits_ = 0u;
  clear_has_hits();
}
inline ::google::protobuf::uint32 SourceData_SourcePopularityStat_PopularityStat::hits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits)
  return hits_;
}
inline void SourceData_SourcePopularityStat_PopularityStat::set_hits(::google::protobuf::uint32 value) {
  set_has_hits();
  hits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits)
}

// optional float hits_mean = 2;
inline bool SourceData_SourcePopularityStat_PopularityStat::has_hits_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourcePopularityStat_PopularityStat::set_has_hits_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourcePopularityStat_PopularityStat::clear_has_hits_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourcePopularityStat_PopularityStat::clear_hits_mean() {
  hits_mean_ = 0;
  clear_has_hits_mean();
}
inline float SourceData_SourcePopularityStat_PopularityStat::hits_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits_mean)
  return hits_mean_;
}
inline void SourceData_SourcePopularityStat_PopularityStat::set_hits_mean(float value) {
  set_has_hits_mean();
  hits_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits_mean)
}

// optional float hits_variance = 3;
inline bool SourceData_SourcePopularityStat_PopularityStat::has_hits_variance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData_SourcePopularityStat_PopularityStat::set_has_hits_variance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData_SourcePopularityStat_PopularityStat::clear_has_hits_variance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData_SourcePopularityStat_PopularityStat::clear_hits_variance() {
  hits_variance_ = 0;
  clear_has_hits_variance();
}
inline float SourceData_SourcePopularityStat_PopularityStat::hits_variance() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits_variance)
  return hits_variance_;
}
inline void SourceData_SourcePopularityStat_PopularityStat::set_hits_variance(float value) {
  set_has_hits_variance();
  hits_variance_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.hits_variance)
}

// optional uint32 urls = 4;
inline bool SourceData_SourcePopularityStat_PopularityStat::has_urls() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SourceData_SourcePopularityStat_PopularityStat::set_has_urls() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SourceData_SourcePopularityStat_PopularityStat::clear_has_urls() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SourceData_SourcePopularityStat_PopularityStat::clear_urls() {
  urls_ = 0u;
  clear_has_urls();
}
inline ::google::protobuf::uint32 SourceData_SourcePopularityStat_PopularityStat::urls() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.urls)
  return urls_;
}
inline void SourceData_SourcePopularityStat_PopularityStat::set_urls(::google::protobuf::uint32 value) {
  set_has_urls();
  urls_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.PopularityStat.urls)
}

// -------------------------------------------------------------------

// SourceData_SourcePopularityStat_GeoPopularity

// required uint32 geo = 1;
inline bool SourceData_SourcePopularityStat_GeoPopularity::has_geo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourcePopularityStat_GeoPopularity::set_has_geo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourcePopularityStat_GeoPopularity::clear_has_geo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourcePopularityStat_GeoPopularity::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
inline ::google::protobuf::uint32 SourceData_SourcePopularityStat_GeoPopularity::geo() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.geo)
  return geo_;
}
inline void SourceData_SourcePopularityStat_GeoPopularity::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.geo)
}

// required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 2;
inline bool SourceData_SourcePopularityStat_GeoPopularity::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourcePopularityStat_GeoPopularity::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourcePopularityStat_GeoPopularity::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourcePopularityStat_GeoPopularity::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat::Clear();
  clear_has_stat();
}
inline const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& SourceData_SourcePopularityStat_GeoPopularity::stat() const {
  const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat*>(
      &::cosmo::pb::_SourceData_SourcePopularityStat_PopularityStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat_GeoPopularity::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.stat)
  return stat_;
}
inline ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat_GeoPopularity::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourcePopularityStat_GeoPopularity::set_allocated_stat(::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity.stat)
}

// -------------------------------------------------------------------

// SourceData_SourcePopularityStat

// required .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat stat = 1;
inline bool SourceData_SourcePopularityStat::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourcePopularityStat::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourcePopularityStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourcePopularityStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat::Clear();
  clear_has_stat();
}
inline const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& SourceData_SourcePopularityStat::stat() const {
  const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat*>(
      &::cosmo::pb::_SourceData_SourcePopularityStat_PopularityStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourcePopularityStat.stat)
  return stat_;
}
inline ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourcePopularityStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourcePopularityStat::set_allocated_stat(::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourcePopularityStat.stat)
}

// repeated .cosmo.pb.SourceData.SourcePopularityStat.GeoPopularity geo_stat = 2;
inline int SourceData_SourcePopularityStat::geo_stat_size() const {
  return geo_stat_.size();
}
inline void SourceData_SourcePopularityStat::clear_geo_stat() {
  geo_stat_.Clear();
}
inline const ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity& SourceData_SourcePopularityStat::geo_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.geo_stat)
  return geo_stat_.Get(index);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity* SourceData_SourcePopularityStat::mutable_geo_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourcePopularityStat.geo_stat)
  return geo_stat_.Mutable(index);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity* SourceData_SourcePopularityStat::add_geo_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourcePopularityStat.geo_stat)
  return geo_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity >*
SourceData_SourcePopularityStat::mutable_geo_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourcePopularityStat.geo_stat)
  return &geo_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_GeoPopularity >&
SourceData_SourcePopularityStat::geo_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourcePopularityStat.geo_stat)
  return geo_stat_;
}

// repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat male_stat = 3;
inline int SourceData_SourcePopularityStat::male_stat_size() const {
  return male_stat_.size();
}
inline void SourceData_SourcePopularityStat::clear_male_stat() {
  male_stat_.Clear();
}
inline const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& SourceData_SourcePopularityStat::male_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.male_stat)
  return male_stat_.Get(index);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::mutable_male_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourcePopularityStat.male_stat)
  return male_stat_.Mutable(index);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::add_male_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourcePopularityStat.male_stat)
  return male_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >*
SourceData_SourcePopularityStat::mutable_male_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourcePopularityStat.male_stat)
  return &male_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >&
SourceData_SourcePopularityStat::male_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourcePopularityStat.male_stat)
  return male_stat_;
}

// repeated .cosmo.pb.SourceData.SourcePopularityStat.PopularityStat female_stat = 4;
inline int SourceData_SourcePopularityStat::female_stat_size() const {
  return female_stat_.size();
}
inline void SourceData_SourcePopularityStat::clear_female_stat() {
  female_stat_.Clear();
}
inline const ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat& SourceData_SourcePopularityStat::female_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.female_stat)
  return female_stat_.Get(index);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::mutable_female_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourcePopularityStat.female_stat)
  return female_stat_.Mutable(index);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat* SourceData_SourcePopularityStat::add_female_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourcePopularityStat.female_stat)
  return female_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >*
SourceData_SourcePopularityStat::mutable_female_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourcePopularityStat.female_stat)
  return &female_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourcePopularityStat_PopularityStat >&
SourceData_SourcePopularityStat::female_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourcePopularityStat.female_stat)
  return female_stat_;
}

// required uint32 version = 5;
inline bool SourceData_SourcePopularityStat::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourcePopularityStat::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourcePopularityStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourcePopularityStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 SourceData_SourcePopularityStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourcePopularityStat.version)
  return version_;
}
inline void SourceData_SourcePopularityStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourcePopularityStat.version)
}

// -------------------------------------------------------------------

// SourceData_SourceEventStat_EventStat

// optional uint32 events_count = 1;
inline bool SourceData_SourceEventStat_EventStat::has_events_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourceEventStat_EventStat::set_has_events_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourceEventStat_EventStat::clear_has_events_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourceEventStat_EventStat::clear_events_count() {
  events_count_ = 0u;
  clear_has_events_count();
}
inline ::google::protobuf::uint32 SourceData_SourceEventStat_EventStat::events_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.EventStat.events_count)
  return events_count_;
}
inline void SourceData_SourceEventStat_EventStat::set_events_count(::google::protobuf::uint32 value) {
  set_has_events_count();
  events_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.EventStat.events_count)
}

// optional float events_mean = 2;
inline bool SourceData_SourceEventStat_EventStat::has_events_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourceEventStat_EventStat::set_has_events_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourceEventStat_EventStat::clear_has_events_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourceEventStat_EventStat::clear_events_mean() {
  events_mean_ = 0;
  clear_has_events_mean();
}
inline float SourceData_SourceEventStat_EventStat::events_mean() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.EventStat.events_mean)
  return events_mean_;
}
inline void SourceData_SourceEventStat_EventStat::set_events_mean(float value) {
  set_has_events_mean();
  events_mean_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.EventStat.events_mean)
}

// optional float events_sigma = 3;
inline bool SourceData_SourceEventStat_EventStat::has_events_sigma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData_SourceEventStat_EventStat::set_has_events_sigma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData_SourceEventStat_EventStat::clear_has_events_sigma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData_SourceEventStat_EventStat::clear_events_sigma() {
  events_sigma_ = 0;
  clear_has_events_sigma();
}
inline float SourceData_SourceEventStat_EventStat::events_sigma() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.EventStat.events_sigma)
  return events_sigma_;
}
inline void SourceData_SourceEventStat_EventStat::set_events_sigma(float value) {
  set_has_events_sigma();
  events_sigma_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.EventStat.events_sigma)
}

// optional uint32 documents_count = 4;
inline bool SourceData_SourceEventStat_EventStat::has_documents_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SourceData_SourceEventStat_EventStat::set_has_documents_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SourceData_SourceEventStat_EventStat::clear_has_documents_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SourceData_SourceEventStat_EventStat::clear_documents_count() {
  documents_count_ = 0u;
  clear_has_documents_count();
}
inline ::google::protobuf::uint32 SourceData_SourceEventStat_EventStat::documents_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.EventStat.documents_count)
  return documents_count_;
}
inline void SourceData_SourceEventStat_EventStat::set_documents_count(::google::protobuf::uint32 value) {
  set_has_documents_count();
  documents_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.EventStat.documents_count)
}

// -------------------------------------------------------------------

// SourceData_SourceEventStat_GeoEventStat

// required uint32 geo = 1;
inline bool SourceData_SourceEventStat_GeoEventStat::has_geo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourceEventStat_GeoEventStat::set_has_geo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourceEventStat_GeoEventStat::clear_has_geo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourceEventStat_GeoEventStat::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
inline ::google::protobuf::uint32 SourceData_SourceEventStat_GeoEventStat::geo() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.geo)
  return geo_;
}
inline void SourceData_SourceEventStat_GeoEventStat::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.geo)
}

// required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
inline bool SourceData_SourceEventStat_GeoEventStat::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourceEventStat_GeoEventStat::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourceEventStat_GeoEventStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourceEventStat_GeoEventStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourceEventStat_EventStat::Clear();
  clear_has_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat_EventStat& SourceData_SourceEventStat_GeoEventStat::stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat_EventStat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat_EventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_EventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_GeoEventStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.stat)
  return stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_GeoEventStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourceEventStat_GeoEventStat::set_allocated_stat(::cosmo::pb::SourceData_SourceEventStat_EventStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceEventStat.GeoEventStat.stat)
}

// -------------------------------------------------------------------

// SourceData_SourceEventStat_SocDemEventStat

// required uint32 socdem_id = 1;
inline bool SourceData_SourceEventStat_SocDemEventStat::has_socdem_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourceEventStat_SocDemEventStat::set_has_socdem_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourceEventStat_SocDemEventStat::clear_has_socdem_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourceEventStat_SocDemEventStat::clear_socdem_id() {
  socdem_id_ = 0u;
  clear_has_socdem_id();
}
inline ::google::protobuf::uint32 SourceData_SourceEventStat_SocDemEventStat::socdem_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.socdem_id)
  return socdem_id_;
}
inline void SourceData_SourceEventStat_SocDemEventStat::set_socdem_id(::google::protobuf::uint32 value) {
  set_has_socdem_id();
  socdem_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.socdem_id)
}

// required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 2;
inline bool SourceData_SourceEventStat_SocDemEventStat::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourceEventStat_SocDemEventStat::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourceEventStat_SocDemEventStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourceEventStat_SocDemEventStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourceEventStat_EventStat::Clear();
  clear_has_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat_EventStat& SourceData_SourceEventStat_SocDemEventStat::stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat_EventStat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat_EventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_EventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_SocDemEventStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.stat)
  return stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat_SocDemEventStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourceEventStat_SocDemEventStat::set_allocated_stat(::cosmo::pb::SourceData_SourceEventStat_EventStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceEventStat.SocDemEventStat.stat)
}

// -------------------------------------------------------------------

// SourceData_SourceEventStat

// required .cosmo.pb.SourceData.SourceEventStat.EventStat stat = 1;
inline bool SourceData_SourceEventStat::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourceEventStat::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourceEventStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourceEventStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourceEventStat_EventStat::Clear();
  clear_has_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat_EventStat& SourceData_SourceEventStat::stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat_EventStat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat_EventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_EventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceEventStat.stat)
  return stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat_EventStat* SourceData_SourceEventStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceEventStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat_EventStat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourceEventStat::set_allocated_stat(::cosmo::pb::SourceData_SourceEventStat_EventStat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceEventStat.stat)
}

// repeated .cosmo.pb.SourceData.SourceEventStat.GeoEventStat geo_stat = 2;
inline int SourceData_SourceEventStat::geo_stat_size() const {
  return geo_stat_.size();
}
inline void SourceData_SourceEventStat::clear_geo_stat() {
  geo_stat_.Clear();
}
inline const ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat& SourceData_SourceEventStat::geo_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.geo_stat)
  return geo_stat_.Get(index);
}
inline ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat* SourceData_SourceEventStat::mutable_geo_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceEventStat.geo_stat)
  return geo_stat_.Mutable(index);
}
inline ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat* SourceData_SourceEventStat::add_geo_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceEventStat.geo_stat)
  return geo_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat >*
SourceData_SourceEventStat::mutable_geo_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceEventStat.geo_stat)
  return &geo_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_GeoEventStat >&
SourceData_SourceEventStat::geo_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceEventStat.geo_stat)
  return geo_stat_;
}

// repeated .cosmo.pb.SourceData.SourceEventStat.SocDemEventStat soc_dem_stat = 3;
inline int SourceData_SourceEventStat::soc_dem_stat_size() const {
  return soc_dem_stat_.size();
}
inline void SourceData_SourceEventStat::clear_soc_dem_stat() {
  soc_dem_stat_.Clear();
}
inline const ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat& SourceData_SourceEventStat::soc_dem_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceEventStat.soc_dem_stat)
  return soc_dem_stat_.Get(index);
}
inline ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat* SourceData_SourceEventStat::mutable_soc_dem_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceEventStat.soc_dem_stat)
  return soc_dem_stat_.Mutable(index);
}
inline ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat* SourceData_SourceEventStat::add_soc_dem_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceEventStat.soc_dem_stat)
  return soc_dem_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat >*
SourceData_SourceEventStat::mutable_soc_dem_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceEventStat.soc_dem_stat)
  return &soc_dem_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceEventStat_SocDemEventStat >&
SourceData_SourceEventStat::soc_dem_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceEventStat.soc_dem_stat)
  return soc_dem_stat_;
}

// -------------------------------------------------------------------

// SourceData_GroupEventStat

// required uint32 version = 1;
inline bool SourceData_GroupEventStat::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SourceData_GroupEventStat::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SourceData_GroupEventStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SourceData_GroupEventStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 SourceData_GroupEventStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupEventStat.version)
  return version_;
}
inline void SourceData_GroupEventStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.GroupEventStat.version)
}

// optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 2;
inline bool SourceData_GroupEventStat::has_likes_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_GroupEventStat::set_has_likes_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_GroupEventStat::clear_has_likes_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_GroupEventStat::clear_likes_stat() {
  if (likes_stat_ != NULL) likes_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_likes_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat& SourceData_GroupEventStat::likes_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = likes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupEventStat.likes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::mutable_likes_stat() {
  set_has_likes_stat();
  if (likes_stat_ == NULL) {
    _slow_mutable_likes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.GroupEventStat.likes_stat)
  return likes_stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::release_likes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.GroupEventStat.likes_stat)
  clear_has_likes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_likes_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = likes_stat_;
    likes_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_GroupEventStat::set_allocated_likes_stat(::cosmo::pb::SourceData_SourceEventStat* likes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete likes_stat_;
  }
  if (likes_stat != NULL) {
    _slow_set_allocated_likes_stat(message_arena, &likes_stat);
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.GroupEventStat.likes_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 3;
inline bool SourceData_GroupEventStat::has_clicks_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_GroupEventStat::set_has_clicks_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_GroupEventStat::clear_has_clicks_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_GroupEventStat::clear_clicks_stat() {
  if (clicks_stat_ != NULL) clicks_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_clicks_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat& SourceData_GroupEventStat::clicks_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = clicks_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupEventStat.clicks_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::mutable_clicks_stat() {
  set_has_clicks_stat();
  if (clicks_stat_ == NULL) {
    _slow_mutable_clicks_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.GroupEventStat.clicks_stat)
  return clicks_stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::release_clicks_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.GroupEventStat.clicks_stat)
  clear_has_clicks_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = clicks_stat_;
    clicks_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_GroupEventStat::set_allocated_clicks_stat(::cosmo::pb::SourceData_SourceEventStat* clicks_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_stat_;
  }
  if (clicks_stat != NULL) {
    _slow_set_allocated_clicks_stat(message_arena, &clicks_stat);
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.GroupEventStat.clicks_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 4;
inline bool SourceData_GroupEventStat::has_reshares_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData_GroupEventStat::set_has_reshares_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData_GroupEventStat::clear_has_reshares_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData_GroupEventStat::clear_reshares_stat() {
  if (reshares_stat_ != NULL) reshares_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_reshares_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat& SourceData_GroupEventStat::reshares_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = reshares_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupEventStat.reshares_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::mutable_reshares_stat() {
  set_has_reshares_stat();
  if (reshares_stat_ == NULL) {
    _slow_mutable_reshares_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.GroupEventStat.reshares_stat)
  return reshares_stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::release_reshares_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.GroupEventStat.reshares_stat)
  clear_has_reshares_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_reshares_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = reshares_stat_;
    reshares_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_GroupEventStat::set_allocated_reshares_stat(::cosmo::pb::SourceData_SourceEventStat* reshares_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reshares_stat_;
  }
  if (reshares_stat != NULL) {
    _slow_set_allocated_reshares_stat(message_arena, &reshares_stat);
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.GroupEventStat.reshares_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat comments_stat = 5;
inline bool SourceData_GroupEventStat::has_comments_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SourceData_GroupEventStat::set_has_comments_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SourceData_GroupEventStat::clear_has_comments_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SourceData_GroupEventStat::clear_comments_stat() {
  if (comments_stat_ != NULL) comments_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_comments_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat& SourceData_GroupEventStat::comments_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = comments_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.GroupEventStat.comments_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::mutable_comments_stat() {
  set_has_comments_stat();
  if (comments_stat_ == NULL) {
    _slow_mutable_comments_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.GroupEventStat.comments_stat)
  return comments_stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_GroupEventStat::release_comments_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.GroupEventStat.comments_stat)
  clear_has_comments_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_comments_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = comments_stat_;
    comments_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_GroupEventStat::set_allocated_comments_stat(::cosmo::pb::SourceData_SourceEventStat* comments_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comments_stat_;
  }
  if (comments_stat != NULL) {
    _slow_set_allocated_comments_stat(message_arena, &comments_stat);
  }
  comments_stat_ = comments_stat;
  if (comments_stat) {
    set_has_comments_stat();
  } else {
    clear_has_comments_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.GroupEventStat.comments_stat)
}

// -------------------------------------------------------------------

// SourceData_SourceLocationStat_Stat

// optional .cosmo.pb.SourceData.SourceEventStat shows_stat = 1;
inline bool SourceData_SourceLocationStat_Stat::has_shows_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourceLocationStat_Stat::set_has_shows_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourceLocationStat_Stat::clear_has_shows_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourceLocationStat_Stat::clear_shows_stat() {
  if (shows_stat_ != NULL) shows_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_shows_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat& SourceData_SourceLocationStat_Stat::shows_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = shows_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.Stat.shows_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::mutable_shows_stat() {
  set_has_shows_stat();
  if (shows_stat_ == NULL) {
    _slow_mutable_shows_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.Stat.shows_stat)
  return shows_stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::release_shows_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.Stat.shows_stat)
  clear_has_shows_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = shows_stat_;
    shows_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourceLocationStat_Stat::set_allocated_shows_stat(::cosmo::pb::SourceData_SourceEventStat* shows_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_stat_;
  }
  if (shows_stat != NULL) {
    _slow_set_allocated_shows_stat(message_arena, &shows_stat);
  }
  shows_stat_ = shows_stat;
  if (shows_stat) {
    set_has_shows_stat();
  } else {
    clear_has_shows_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.shows_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat clicks_stat = 2;
inline bool SourceData_SourceLocationStat_Stat::has_clicks_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourceLocationStat_Stat::set_has_clicks_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourceLocationStat_Stat::clear_has_clicks_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourceLocationStat_Stat::clear_clicks_stat() {
  if (clicks_stat_ != NULL) clicks_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_clicks_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat& SourceData_SourceLocationStat_Stat::clicks_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = clicks_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.Stat.clicks_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::mutable_clicks_stat() {
  set_has_clicks_stat();
  if (clicks_stat_ == NULL) {
    _slow_mutable_clicks_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.Stat.clicks_stat)
  return clicks_stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::release_clicks_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.Stat.clicks_stat)
  clear_has_clicks_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = clicks_stat_;
    clicks_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourceLocationStat_Stat::set_allocated_clicks_stat(::cosmo::pb::SourceData_SourceEventStat* clicks_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_stat_;
  }
  if (clicks_stat != NULL) {
    _slow_set_allocated_clicks_stat(message_arena, &clicks_stat);
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.clicks_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat likes_stat = 3;
inline bool SourceData_SourceLocationStat_Stat::has_likes_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData_SourceLocationStat_Stat::set_has_likes_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData_SourceLocationStat_Stat::clear_has_likes_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData_SourceLocationStat_Stat::clear_likes_stat() {
  if (likes_stat_ != NULL) likes_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_likes_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat& SourceData_SourceLocationStat_Stat::likes_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = likes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.Stat.likes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::mutable_likes_stat() {
  set_has_likes_stat();
  if (likes_stat_ == NULL) {
    _slow_mutable_likes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.Stat.likes_stat)
  return likes_stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::release_likes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.Stat.likes_stat)
  clear_has_likes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_likes_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = likes_stat_;
    likes_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourceLocationStat_Stat::set_allocated_likes_stat(::cosmo::pb::SourceData_SourceEventStat* likes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete likes_stat_;
  }
  if (likes_stat != NULL) {
    _slow_set_allocated_likes_stat(message_arena, &likes_stat);
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.likes_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat dislikes_stat = 4;
inline bool SourceData_SourceLocationStat_Stat::has_dislikes_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SourceData_SourceLocationStat_Stat::set_has_dislikes_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SourceData_SourceLocationStat_Stat::clear_has_dislikes_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SourceData_SourceLocationStat_Stat::clear_dislikes_stat() {
  if (dislikes_stat_ != NULL) dislikes_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_dislikes_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat& SourceData_SourceLocationStat_Stat::dislikes_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = dislikes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.Stat.dislikes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::mutable_dislikes_stat() {
  set_has_dislikes_stat();
  if (dislikes_stat_ == NULL) {
    _slow_mutable_dislikes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.Stat.dislikes_stat)
  return dislikes_stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::release_dislikes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.Stat.dislikes_stat)
  clear_has_dislikes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dislikes_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = dislikes_stat_;
    dislikes_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourceLocationStat_Stat::set_allocated_dislikes_stat(::cosmo::pb::SourceData_SourceEventStat* dislikes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dislikes_stat_;
  }
  if (dislikes_stat != NULL) {
    _slow_set_allocated_dislikes_stat(message_arena, &dislikes_stat);
  }
  dislikes_stat_ = dislikes_stat;
  if (dislikes_stat) {
    set_has_dislikes_stat();
  } else {
    clear_has_dislikes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.dislikes_stat)
}

// optional .cosmo.pb.SourceData.SourceEventStat reshares_stat = 5;
inline bool SourceData_SourceLocationStat_Stat::has_reshares_stat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SourceData_SourceLocationStat_Stat::set_has_reshares_stat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SourceData_SourceLocationStat_Stat::clear_has_reshares_stat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SourceData_SourceLocationStat_Stat::clear_reshares_stat() {
  if (reshares_stat_ != NULL) reshares_stat_->::cosmo::pb::SourceData_SourceEventStat::Clear();
  clear_has_reshares_stat();
}
inline const ::cosmo::pb::SourceData_SourceEventStat& SourceData_SourceLocationStat_Stat::reshares_stat() const {
  const ::cosmo::pb::SourceData_SourceEventStat* p = reshares_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.Stat.reshares_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceEventStat*>(
      &::cosmo::pb::_SourceData_SourceEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::mutable_reshares_stat() {
  set_has_reshares_stat();
  if (reshares_stat_ == NULL) {
    _slow_mutable_reshares_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.Stat.reshares_stat)
  return reshares_stat_;
}
inline ::cosmo::pb::SourceData_SourceEventStat* SourceData_SourceLocationStat_Stat::release_reshares_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.Stat.reshares_stat)
  clear_has_reshares_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_reshares_stat();
  } else {
    ::cosmo::pb::SourceData_SourceEventStat* temp = reshares_stat_;
    reshares_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourceLocationStat_Stat::set_allocated_reshares_stat(::cosmo::pb::SourceData_SourceEventStat* reshares_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reshares_stat_;
  }
  if (reshares_stat != NULL) {
    _slow_set_allocated_reshares_stat(message_arena, &reshares_stat);
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.Stat.reshares_stat)
}

// -------------------------------------------------------------------

// SourceData_SourceLocationStat_LocationStat

// required string location = 1;
inline bool SourceData_SourceLocationStat_LocationStat::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourceLocationStat_LocationStat::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourceLocationStat_LocationStat::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourceLocationStat_LocationStat::clear_location() {
  location_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_location();
}
inline const ::std::string& SourceData_SourceLocationStat_LocationStat::location() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
  return location_.Get();
}
inline void SourceData_SourceLocationStat_LocationStat::set_location(const ::std::string& value) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}
#if LANG_CXX11
inline void SourceData_SourceLocationStat_LocationStat::set_location(::std::string&& value) {
  set_has_location();
  location_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}
#endif
inline void SourceData_SourceLocationStat_LocationStat::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}
inline void SourceData_SourceLocationStat_LocationStat::set_location(const char* value,
    size_t size) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}
inline ::std::string* SourceData_SourceLocationStat_LocationStat::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
  return location_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SourceData_SourceLocationStat_LocationStat::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
  clear_has_location();
  return location_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SourceData_SourceLocationStat_LocationStat::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_location();
  return location_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SourceData_SourceLocationStat_LocationStat::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}
inline void SourceData_SourceLocationStat_LocationStat::unsafe_arena_set_allocated_location(
    ::std::string* location) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      location, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.SourceData.SourceLocationStat.LocationStat.location)
}

// optional .cosmo.pb.SourceData.SourceLocationStat.Stat stat = 2;
inline bool SourceData_SourceLocationStat_LocationStat::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourceLocationStat_LocationStat::set_has_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourceLocationStat_LocationStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourceLocationStat_LocationStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::SourceData_SourceLocationStat_Stat::Clear();
  clear_has_stat();
}
inline const ::cosmo::pb::SourceData_SourceLocationStat_Stat& SourceData_SourceLocationStat_LocationStat::stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat_Stat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.LocationStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat_Stat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_Stat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat_LocationStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.LocationStat.stat)
  return stat_;
}
inline ::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat_LocationStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.LocationStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat_Stat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourceLocationStat_LocationStat::set_allocated_stat(::cosmo::pb::SourceData_SourceLocationStat_Stat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.LocationStat.stat)
}

// optional uint64 last_event_ts = 3;
inline bool SourceData_SourceLocationStat_LocationStat::has_last_event_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData_SourceLocationStat_LocationStat::set_has_last_event_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData_SourceLocationStat_LocationStat::clear_has_last_event_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData_SourceLocationStat_LocationStat::clear_last_event_ts() {
  last_event_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_last_event_ts();
}
inline ::google::protobuf::uint64 SourceData_SourceLocationStat_LocationStat::last_event_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.LocationStat.last_event_ts)
  return last_event_ts_;
}
inline void SourceData_SourceLocationStat_LocationStat::set_last_event_ts(::google::protobuf::uint64 value) {
  set_has_last_event_ts();
  last_event_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceLocationStat.LocationStat.last_event_ts)
}

// -------------------------------------------------------------------

// SourceData_SourceLocationStat

// required uint32 version = 1;
inline bool SourceData_SourceLocationStat::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourceLocationStat::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourceLocationStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourceLocationStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 SourceData_SourceLocationStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.version)
  return version_;
}
inline void SourceData_SourceLocationStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceLocationStat.version)
}

// repeated .cosmo.pb.SourceData.SourceLocationStat.LocationStat stat_by_location = 2;
inline int SourceData_SourceLocationStat::stat_by_location_size() const {
  return stat_by_location_.size();
}
inline void SourceData_SourceLocationStat::clear_stat_by_location() {
  stat_by_location_.Clear();
}
inline const ::cosmo::pb::SourceData_SourceLocationStat_LocationStat& SourceData_SourceLocationStat::stat_by_location(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.stat_by_location)
  return stat_by_location_.Get(index);
}
inline ::cosmo::pb::SourceData_SourceLocationStat_LocationStat* SourceData_SourceLocationStat::mutable_stat_by_location(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.stat_by_location)
  return stat_by_location_.Mutable(index);
}
inline ::cosmo::pb::SourceData_SourceLocationStat_LocationStat* SourceData_SourceLocationStat::add_stat_by_location() {
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceLocationStat.stat_by_location)
  return stat_by_location_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceLocationStat_LocationStat >*
SourceData_SourceLocationStat::mutable_stat_by_location() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceLocationStat.stat_by_location)
  return &stat_by_location_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::SourceData_SourceLocationStat_LocationStat >&
SourceData_SourceLocationStat::stat_by_location() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceLocationStat.stat_by_location)
  return stat_by_location_;
}

// optional .cosmo.pb.SourceData.SourceLocationStat.Stat summary_stat = 3;
inline bool SourceData_SourceLocationStat::has_summary_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourceLocationStat::set_has_summary_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourceLocationStat::clear_has_summary_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourceLocationStat::clear_summary_stat() {
  if (summary_stat_ != NULL) summary_stat_->::cosmo::pb::SourceData_SourceLocationStat_Stat::Clear();
  clear_has_summary_stat();
}
inline const ::cosmo::pb::SourceData_SourceLocationStat_Stat& SourceData_SourceLocationStat::summary_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat_Stat* p = summary_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceLocationStat.summary_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat_Stat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_Stat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat::mutable_summary_stat() {
  set_has_summary_stat();
  if (summary_stat_ == NULL) {
    _slow_mutable_summary_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.SourceLocationStat.summary_stat)
  return summary_stat_;
}
inline ::cosmo::pb::SourceData_SourceLocationStat_Stat* SourceData_SourceLocationStat::release_summary_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.SourceLocationStat.summary_stat)
  clear_has_summary_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_summary_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat_Stat* temp = summary_stat_;
    summary_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData_SourceLocationStat::set_allocated_summary_stat(::cosmo::pb::SourceData_SourceLocationStat_Stat* summary_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete summary_stat_;
  }
  if (summary_stat != NULL) {
    _slow_set_allocated_summary_stat(message_arena, &summary_stat);
  }
  summary_stat_ = summary_stat;
  if (summary_stat) {
    set_has_summary_stat();
  } else {
    clear_has_summary_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.SourceLocationStat.summary_stat)
}

// -------------------------------------------------------------------

// SourceData_SourceSimilarity

// required uint32 version = 1;
inline bool SourceData_SourceSimilarity::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourceSimilarity::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourceSimilarity::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourceSimilarity::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 SourceData_SourceSimilarity::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceSimilarity.version)
  return version_;
}
inline void SourceData_SourceSimilarity::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceSimilarity.version)
}

// repeated int64 source = 2;
inline int SourceData_SourceSimilarity::source_size() const {
  return source_.size();
}
inline void SourceData_SourceSimilarity::clear_source() {
  source_.Clear();
}
inline ::google::protobuf::int64 SourceData_SourceSimilarity::source(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceSimilarity.source)
  return source_.Get(index);
}
inline void SourceData_SourceSimilarity::set_source(int index, ::google::protobuf::int64 value) {
  source_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceSimilarity.source)
}
inline void SourceData_SourceSimilarity::add_source(::google::protobuf::int64 value) {
  source_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceSimilarity.source)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SourceData_SourceSimilarity::source() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceSimilarity.source)
  return source_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SourceData_SourceSimilarity::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceSimilarity.source)
  return &source_;
}

// repeated float jaccard_similarity = 3;
inline int SourceData_SourceSimilarity::jaccard_similarity_size() const {
  return jaccard_similarity_.size();
}
inline void SourceData_SourceSimilarity::clear_jaccard_similarity() {
  jaccard_similarity_.Clear();
}
inline float SourceData_SourceSimilarity::jaccard_similarity(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceSimilarity.jaccard_similarity)
  return jaccard_similarity_.Get(index);
}
inline void SourceData_SourceSimilarity::set_jaccard_similarity(int index, float value) {
  jaccard_similarity_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceSimilarity.jaccard_similarity)
}
inline void SourceData_SourceSimilarity::add_jaccard_similarity(float value) {
  jaccard_similarity_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.SourceSimilarity.jaccard_similarity)
}
inline const ::google::protobuf::RepeatedField< float >&
SourceData_SourceSimilarity::jaccard_similarity() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.SourceSimilarity.jaccard_similarity)
  return jaccard_similarity_;
}
inline ::google::protobuf::RepeatedField< float >*
SourceData_SourceSimilarity::mutable_jaccard_similarity() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.SourceSimilarity.jaccard_similarity)
  return &jaccard_similarity_;
}

// -------------------------------------------------------------------

// SourceData_SourceGeo

// required uint32 version = 1;
inline bool SourceData_SourceGeo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_SourceGeo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_SourceGeo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_SourceGeo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 SourceData_SourceGeo::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceGeo.version)
  return version_;
}
inline void SourceData_SourceGeo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceGeo.version)
}

// optional uint32 country_id = 2;
inline bool SourceData_SourceGeo::has_country_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_SourceGeo::set_has_country_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_SourceGeo::clear_has_country_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_SourceGeo::clear_country_id() {
  country_id_ = 0u;
  clear_has_country_id();
}
inline ::google::protobuf::uint32 SourceData_SourceGeo::country_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceGeo.country_id)
  return country_id_;
}
inline void SourceData_SourceGeo::set_country_id(::google::protobuf::uint32 value) {
  set_has_country_id();
  country_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceGeo.country_id)
}

// optional uint32 region_id = 3;
inline bool SourceData_SourceGeo::has_region_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData_SourceGeo::set_has_region_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData_SourceGeo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData_SourceGeo::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
inline ::google::protobuf::uint32 SourceData_SourceGeo::region_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.SourceGeo.region_id)
  return region_id_;
}
inline void SourceData_SourceGeo::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.SourceGeo.region_id)
}

// -------------------------------------------------------------------

// SourceData_ContentThemes

// required uint32 version = 1;
inline bool SourceData_ContentThemes::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData_ContentThemes::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData_ContentThemes::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData_ContentThemes::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 SourceData_ContentThemes::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ContentThemes.version)
  return version_;
}
inline void SourceData_ContentThemes::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.ContentThemes.version)
}

// repeated float themes_vector = 2;
inline int SourceData_ContentThemes::themes_vector_size() const {
  return themes_vector_.size();
}
inline void SourceData_ContentThemes::clear_themes_vector() {
  themes_vector_.Clear();
}
inline float SourceData_ContentThemes::themes_vector(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ContentThemes.themes_vector)
  return themes_vector_.Get(index);
}
inline void SourceData_ContentThemes::set_themes_vector(int index, float value) {
  themes_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.ContentThemes.themes_vector)
}
inline void SourceData_ContentThemes::add_themes_vector(float value) {
  themes_vector_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.SourceData.ContentThemes.themes_vector)
}
inline const ::google::protobuf::RepeatedField< float >&
SourceData_ContentThemes::themes_vector() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.SourceData.ContentThemes.themes_vector)
  return themes_vector_;
}
inline ::google::protobuf::RepeatedField< float >*
SourceData_ContentThemes::mutable_themes_vector() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.SourceData.ContentThemes.themes_vector)
  return &themes_vector_;
}

// optional bool bad_content = 3;
inline bool SourceData_ContentThemes::has_bad_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData_ContentThemes::set_has_bad_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData_ContentThemes::clear_has_bad_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData_ContentThemes::clear_bad_content() {
  bad_content_ = false;
  clear_has_bad_content();
}
inline bool SourceData_ContentThemes::bad_content() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ContentThemes.bad_content)
  return bad_content_;
}
inline void SourceData_ContentThemes::set_bad_content(bool value) {
  set_has_bad_content();
  bad_content_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.ContentThemes.bad_content)
}

// -------------------------------------------------------------------

// SourceData

// required int64 source_id = 1;
inline bool SourceData::has_source_id() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SourceData::set_has_source_id() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SourceData::clear_has_source_id() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SourceData::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 SourceData::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_id)
  return source_id_;
}
inline void SourceData::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.SourceData.source_id)
}

// optional .cosmo.pb.SourceData.LdaFea lda_fea = 2;
inline bool SourceData::has_lda_fea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourceData::set_has_lda_fea() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SourceData::clear_has_lda_fea() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SourceData::clear_lda_fea() {
  if (lda_fea_ != NULL) lda_fea_->::cosmo::pb::SourceData_LdaFea::Clear();
  clear_has_lda_fea();
}
inline const ::cosmo::pb::SourceData_LdaFea& SourceData::lda_fea() const {
  const ::cosmo::pb::SourceData_LdaFea* p = lda_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.lda_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_LdaFea*>(
      &::cosmo::pb::_SourceData_LdaFea_default_instance_);
}
inline ::cosmo::pb::SourceData_LdaFea* SourceData::mutable_lda_fea() {
  set_has_lda_fea();
  if (lda_fea_ == NULL) {
    _slow_mutable_lda_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.lda_fea)
  return lda_fea_;
}
inline ::cosmo::pb::SourceData_LdaFea* SourceData::release_lda_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.lda_fea)
  clear_has_lda_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lda_fea();
  } else {
    ::cosmo::pb::SourceData_LdaFea* temp = lda_fea_;
    lda_fea_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_lda_fea(::cosmo::pb::SourceData_LdaFea* lda_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lda_fea_;
  }
  if (lda_fea != NULL) {
    _slow_set_allocated_lda_fea(message_arena, &lda_fea);
  }
  lda_fea_ = lda_fea;
  if (lda_fea) {
    set_has_lda_fea();
  } else {
    clear_has_lda_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.lda_fea)
}

// optional .cosmo.pb.SourceData.AlsFea als_fea = 3;
inline bool SourceData::has_als_fea() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourceData::set_has_als_fea() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SourceData::clear_has_als_fea() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SourceData::clear_als_fea() {
  if (als_fea_ != NULL) als_fea_->::cosmo::pb::SourceData_AlsFea::Clear();
  clear_has_als_fea();
}
inline const ::cosmo::pb::SourceData_AlsFea& SourceData::als_fea() const {
  const ::cosmo::pb::SourceData_AlsFea* p = als_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.als_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_AlsFea*>(
      &::cosmo::pb::_SourceData_AlsFea_default_instance_);
}
inline ::cosmo::pb::SourceData_AlsFea* SourceData::mutable_als_fea() {
  set_has_als_fea();
  if (als_fea_ == NULL) {
    _slow_mutable_als_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.als_fea)
  return als_fea_;
}
inline ::cosmo::pb::SourceData_AlsFea* SourceData::release_als_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.als_fea)
  clear_has_als_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_fea();
  } else {
    ::cosmo::pb::SourceData_AlsFea* temp = als_fea_;
    als_fea_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_als_fea(::cosmo::pb::SourceData_AlsFea* als_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_fea_;
  }
  if (als_fea != NULL) {
    _slow_set_allocated_als_fea(message_arena, &als_fea);
  }
  als_fea_ = als_fea;
  if (als_fea) {
    set_has_als_fea();
  } else {
    clear_has_als_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.als_fea)
}

// optional .cosmo.pb.SourceData.OkInfo ok_info = 6;
inline bool SourceData::has_ok_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourceData::set_has_ok_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SourceData::clear_has_ok_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SourceData::clear_ok_info() {
  if (ok_info_ != NULL) ok_info_->::cosmo::pb::SourceData_OkInfo::Clear();
  clear_has_ok_info();
}
inline const ::cosmo::pb::SourceData_OkInfo& SourceData::ok_info() const {
  const ::cosmo::pb::SourceData_OkInfo* p = ok_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ok_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_OkInfo*>(
      &::cosmo::pb::_SourceData_OkInfo_default_instance_);
}
inline ::cosmo::pb::SourceData_OkInfo* SourceData::mutable_ok_info() {
  set_has_ok_info();
  if (ok_info_ == NULL) {
    _slow_mutable_ok_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.ok_info)
  return ok_info_;
}
inline ::cosmo::pb::SourceData_OkInfo* SourceData::release_ok_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.ok_info)
  clear_has_ok_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_info();
  } else {
    ::cosmo::pb::SourceData_OkInfo* temp = ok_info_;
    ok_info_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_ok_info(::cosmo::pb::SourceData_OkInfo* ok_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_info_;
  }
  if (ok_info != NULL) {
    _slow_set_allocated_ok_info(message_arena, &ok_info);
  }
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.ok_info)
}

// optional .cosmo.pb.SourceData.SourceInfo source_info = 7;
inline bool SourceData::has_source_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SourceData::set_has_source_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SourceData::clear_has_source_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SourceData::clear_source_info() {
  if (source_info_ != NULL) source_info_->::cosmo::pb::SourceData_SourceInfo::Clear();
  clear_has_source_info();
}
inline const ::cosmo::pb::SourceData_SourceInfo& SourceData::source_info() const {
  const ::cosmo::pb::SourceData_SourceInfo* p = source_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceInfo*>(
      &::cosmo::pb::_SourceData_SourceInfo_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceInfo* SourceData::mutable_source_info() {
  set_has_source_info();
  if (source_info_ == NULL) {
    _slow_mutable_source_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.source_info)
  return source_info_;
}
inline ::cosmo::pb::SourceData_SourceInfo* SourceData::release_source_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.source_info)
  clear_has_source_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_info();
  } else {
    ::cosmo::pb::SourceData_SourceInfo* temp = source_info_;
    source_info_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_source_info(::cosmo::pb::SourceData_SourceInfo* source_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_info_;
  }
  if (source_info != NULL) {
    _slow_set_allocated_source_info(message_arena, &source_info);
  }
  source_info_ = source_info;
  if (source_info) {
    set_has_source_info();
  } else {
    clear_has_source_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.source_info)
}

// optional .cosmo.pb.SourceData.OriginalInfo original_info = 8;
inline bool SourceData::has_original_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SourceData::set_has_original_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SourceData::clear_has_original_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SourceData::clear_original_info() {
  if (original_info_ != NULL) original_info_->::cosmo::pb::SourceData_OriginalInfo::Clear();
  clear_has_original_info();
}
inline const ::cosmo::pb::SourceData_OriginalInfo& SourceData::original_info() const {
  const ::cosmo::pb::SourceData_OriginalInfo* p = original_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.original_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_OriginalInfo*>(
      &::cosmo::pb::_SourceData_OriginalInfo_default_instance_);
}
inline ::cosmo::pb::SourceData_OriginalInfo* SourceData::mutable_original_info() {
  set_has_original_info();
  if (original_info_ == NULL) {
    _slow_mutable_original_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.original_info)
  return original_info_;
}
inline ::cosmo::pb::SourceData_OriginalInfo* SourceData::release_original_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.original_info)
  clear_has_original_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_info();
  } else {
    ::cosmo::pb::SourceData_OriginalInfo* temp = original_info_;
    original_info_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_original_info(::cosmo::pb::SourceData_OriginalInfo* original_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_info_;
  }
  if (original_info != NULL) {
    _slow_set_allocated_original_info(message_arena, &original_info);
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.original_info)
}

// optional .cosmo.pb.SourceData.GroupPeriodStats group_period_stats = 9;
inline bool SourceData::has_group_period_stats() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SourceData::set_has_group_period_stats() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SourceData::clear_has_group_period_stats() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SourceData::clear_group_period_stats() {
  if (group_period_stats_ != NULL) group_period_stats_->::cosmo::pb::SourceData_GroupPeriodStats::Clear();
  clear_has_group_period_stats();
}
inline const ::cosmo::pb::SourceData_GroupPeriodStats& SourceData::group_period_stats() const {
  const ::cosmo::pb::SourceData_GroupPeriodStats* p = group_period_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.group_period_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupPeriodStats*>(
      &::cosmo::pb::_SourceData_GroupPeriodStats_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupPeriodStats* SourceData::mutable_group_period_stats() {
  set_has_group_period_stats();
  if (group_period_stats_ == NULL) {
    _slow_mutable_group_period_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.group_period_stats)
  return group_period_stats_;
}
inline ::cosmo::pb::SourceData_GroupPeriodStats* SourceData::release_group_period_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.group_period_stats)
  clear_has_group_period_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_group_period_stats();
  } else {
    ::cosmo::pb::SourceData_GroupPeriodStats* temp = group_period_stats_;
    group_period_stats_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_group_period_stats(::cosmo::pb::SourceData_GroupPeriodStats* group_period_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete group_period_stats_;
  }
  if (group_period_stats != NULL) {
    _slow_set_allocated_group_period_stats(message_arena, &group_period_stats);
  }
  group_period_stats_ = group_period_stats;
  if (group_period_stats) {
    set_has_group_period_stats();
  } else {
    clear_has_group_period_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.group_period_stats)
}

// optional .cosmo.pb.SourceData.NewsData news_data = 10;
inline bool SourceData::has_news_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SourceData::set_has_news_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SourceData::clear_has_news_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SourceData::clear_news_data() {
  if (news_data_ != NULL) news_data_->::cosmo::pb::SourceData_NewsData::Clear();
  clear_has_news_data();
}
inline const ::cosmo::pb::SourceData_NewsData& SourceData::news_data() const {
  const ::cosmo::pb::SourceData_NewsData* p = news_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.news_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_NewsData*>(
      &::cosmo::pb::_SourceData_NewsData_default_instance_);
}
inline ::cosmo::pb::SourceData_NewsData* SourceData::mutable_news_data() {
  set_has_news_data();
  if (news_data_ == NULL) {
    _slow_mutable_news_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.news_data)
  return news_data_;
}
inline ::cosmo::pb::SourceData_NewsData* SourceData::release_news_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.news_data)
  clear_has_news_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_news_data();
  } else {
    ::cosmo::pb::SourceData_NewsData* temp = news_data_;
    news_data_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_news_data(::cosmo::pb::SourceData_NewsData* news_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete news_data_;
  }
  if (news_data != NULL) {
    _slow_set_allocated_news_data(message_arena, &news_data);
  }
  news_data_ = news_data;
  if (news_data) {
    set_has_news_data();
  } else {
    clear_has_news_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.news_data)
}

// optional .cosmo.pb.SourceData.SourcePopularityStat source_popularity = 11;
inline bool SourceData::has_source_popularity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SourceData::set_has_source_popularity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SourceData::clear_has_source_popularity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SourceData::clear_source_popularity() {
  if (source_popularity_ != NULL) source_popularity_->::cosmo::pb::SourceData_SourcePopularityStat::Clear();
  clear_has_source_popularity();
}
inline const ::cosmo::pb::SourceData_SourcePopularityStat& SourceData::source_popularity() const {
  const ::cosmo::pb::SourceData_SourcePopularityStat* p = source_popularity_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_popularity)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourcePopularityStat*>(
      &::cosmo::pb::_SourceData_SourcePopularityStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat* SourceData::mutable_source_popularity() {
  set_has_source_popularity();
  if (source_popularity_ == NULL) {
    _slow_mutable_source_popularity();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.source_popularity)
  return source_popularity_;
}
inline ::cosmo::pb::SourceData_SourcePopularityStat* SourceData::release_source_popularity() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.source_popularity)
  clear_has_source_popularity();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_popularity();
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat* temp = source_popularity_;
    source_popularity_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_source_popularity(::cosmo::pb::SourceData_SourcePopularityStat* source_popularity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_popularity_;
  }
  if (source_popularity != NULL) {
    _slow_set_allocated_source_popularity(message_arena, &source_popularity);
  }
  source_popularity_ = source_popularity;
  if (source_popularity) {
    set_has_source_popularity();
  } else {
    clear_has_source_popularity();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.source_popularity)
}

// optional .cosmo.pb.SourceData.LdaFea lda_fea_2 = 12;
inline bool SourceData::has_lda_fea_2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SourceData::set_has_lda_fea_2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SourceData::clear_has_lda_fea_2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SourceData::clear_lda_fea_2() {
  if (lda_fea_2_ != NULL) lda_fea_2_->::cosmo::pb::SourceData_LdaFea::Clear();
  clear_has_lda_fea_2();
}
inline const ::cosmo::pb::SourceData_LdaFea& SourceData::lda_fea_2() const {
  const ::cosmo::pb::SourceData_LdaFea* p = lda_fea_2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.lda_fea_2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_LdaFea*>(
      &::cosmo::pb::_SourceData_LdaFea_default_instance_);
}
inline ::cosmo::pb::SourceData_LdaFea* SourceData::mutable_lda_fea_2() {
  set_has_lda_fea_2();
  if (lda_fea_2_ == NULL) {
    _slow_mutable_lda_fea_2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.lda_fea_2)
  return lda_fea_2_;
}
inline ::cosmo::pb::SourceData_LdaFea* SourceData::release_lda_fea_2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.lda_fea_2)
  clear_has_lda_fea_2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lda_fea_2();
  } else {
    ::cosmo::pb::SourceData_LdaFea* temp = lda_fea_2_;
    lda_fea_2_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_lda_fea_2(::cosmo::pb::SourceData_LdaFea* lda_fea_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lda_fea_2_;
  }
  if (lda_fea_2 != NULL) {
    _slow_set_allocated_lda_fea_2(message_arena, &lda_fea_2);
  }
  lda_fea_2_ = lda_fea_2;
  if (lda_fea_2) {
    set_has_lda_fea_2();
  } else {
    clear_has_lda_fea_2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.lda_fea_2)
}

// optional .cosmo.pb.SourceData.AlsFea als_fea_2 = 13;
inline bool SourceData::has_als_fea_2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SourceData::set_has_als_fea_2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SourceData::clear_has_als_fea_2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SourceData::clear_als_fea_2() {
  if (als_fea_2_ != NULL) als_fea_2_->::cosmo::pb::SourceData_AlsFea::Clear();
  clear_has_als_fea_2();
}
inline const ::cosmo::pb::SourceData_AlsFea& SourceData::als_fea_2() const {
  const ::cosmo::pb::SourceData_AlsFea* p = als_fea_2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.als_fea_2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_AlsFea*>(
      &::cosmo::pb::_SourceData_AlsFea_default_instance_);
}
inline ::cosmo::pb::SourceData_AlsFea* SourceData::mutable_als_fea_2() {
  set_has_als_fea_2();
  if (als_fea_2_ == NULL) {
    _slow_mutable_als_fea_2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.als_fea_2)
  return als_fea_2_;
}
inline ::cosmo::pb::SourceData_AlsFea* SourceData::release_als_fea_2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.als_fea_2)
  clear_has_als_fea_2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_als_fea_2();
  } else {
    ::cosmo::pb::SourceData_AlsFea* temp = als_fea_2_;
    als_fea_2_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_als_fea_2(::cosmo::pb::SourceData_AlsFea* als_fea_2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete als_fea_2_;
  }
  if (als_fea_2 != NULL) {
    _slow_set_allocated_als_fea_2(message_arena, &als_fea_2);
  }
  als_fea_2_ = als_fea_2;
  if (als_fea_2) {
    set_has_als_fea_2();
  } else {
    clear_has_als_fea_2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.als_fea_2)
}

// optional .cosmo.pb.SourceData.SourcePopularityStat source_fresh_popularity = 14;
inline bool SourceData::has_source_fresh_popularity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SourceData::set_has_source_fresh_popularity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SourceData::clear_has_source_fresh_popularity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SourceData::clear_source_fresh_popularity() {
  if (source_fresh_popularity_ != NULL) source_fresh_popularity_->::cosmo::pb::SourceData_SourcePopularityStat::Clear();
  clear_has_source_fresh_popularity();
}
inline const ::cosmo::pb::SourceData_SourcePopularityStat& SourceData::source_fresh_popularity() const {
  const ::cosmo::pb::SourceData_SourcePopularityStat* p = source_fresh_popularity_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_fresh_popularity)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourcePopularityStat*>(
      &::cosmo::pb::_SourceData_SourcePopularityStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat* SourceData::mutable_source_fresh_popularity() {
  set_has_source_fresh_popularity();
  if (source_fresh_popularity_ == NULL) {
    _slow_mutable_source_fresh_popularity();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.source_fresh_popularity)
  return source_fresh_popularity_;
}
inline ::cosmo::pb::SourceData_SourcePopularityStat* SourceData::release_source_fresh_popularity() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.source_fresh_popularity)
  clear_has_source_fresh_popularity();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_fresh_popularity();
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat* temp = source_fresh_popularity_;
    source_fresh_popularity_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_source_fresh_popularity(::cosmo::pb::SourceData_SourcePopularityStat* source_fresh_popularity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_fresh_popularity_;
  }
  if (source_fresh_popularity != NULL) {
    _slow_set_allocated_source_fresh_popularity(message_arena, &source_fresh_popularity);
  }
  source_fresh_popularity_ = source_fresh_popularity;
  if (source_fresh_popularity) {
    set_has_source_fresh_popularity();
  } else {
    clear_has_source_fresh_popularity();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.source_fresh_popularity)
}

// optional .cosmo.pb.SourceData.GroupEventStat ok_group_event_stat = 15;
inline bool SourceData::has_ok_group_event_stat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SourceData::set_has_ok_group_event_stat() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SourceData::clear_has_ok_group_event_stat() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SourceData::clear_ok_group_event_stat() {
  if (ok_group_event_stat_ != NULL) ok_group_event_stat_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_ok_group_event_stat();
}
inline const ::cosmo::pb::SourceData_GroupEventStat& SourceData::ok_group_event_stat() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = ok_group_event_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ok_group_event_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_ok_group_event_stat() {
  set_has_ok_group_event_stat();
  if (ok_group_event_stat_ == NULL) {
    _slow_mutable_ok_group_event_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.ok_group_event_stat)
  return ok_group_event_stat_;
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::release_ok_group_event_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.ok_group_event_stat)
  clear_has_ok_group_event_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_group_event_stat();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = ok_group_event_stat_;
    ok_group_event_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_ok_group_event_stat(::cosmo::pb::SourceData_GroupEventStat* ok_group_event_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_group_event_stat_;
  }
  if (ok_group_event_stat != NULL) {
    _slow_set_allocated_ok_group_event_stat(message_arena, &ok_group_event_stat);
  }
  ok_group_event_stat_ = ok_group_event_stat;
  if (ok_group_event_stat) {
    set_has_ok_group_event_stat();
  } else {
    clear_has_ok_group_event_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.ok_group_event_stat)
}

// optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat = 16;
inline bool SourceData::has_vk_group_event_stat() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SourceData::set_has_vk_group_event_stat() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SourceData::clear_has_vk_group_event_stat() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SourceData::clear_vk_group_event_stat() {
  if (vk_group_event_stat_ != NULL) vk_group_event_stat_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_vk_group_event_stat();
}
inline const ::cosmo::pb::SourceData_GroupEventStat& SourceData::vk_group_event_stat() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = vk_group_event_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.vk_group_event_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_vk_group_event_stat() {
  set_has_vk_group_event_stat();
  if (vk_group_event_stat_ == NULL) {
    _slow_mutable_vk_group_event_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.vk_group_event_stat)
  return vk_group_event_stat_;
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::release_vk_group_event_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.vk_group_event_stat)
  clear_has_vk_group_event_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_group_event_stat();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_;
    vk_group_event_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_vk_group_event_stat(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_group_event_stat_;
  }
  if (vk_group_event_stat != NULL) {
    _slow_set_allocated_vk_group_event_stat(message_arena, &vk_group_event_stat);
  }
  vk_group_event_stat_ = vk_group_event_stat;
  if (vk_group_event_stat) {
    set_has_vk_group_event_stat();
  } else {
    clear_has_vk_group_event_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.vk_group_event_stat)
}

// optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week = 17;
inline bool SourceData::has_vk_group_event_stat_week() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SourceData::set_has_vk_group_event_stat_week() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SourceData::clear_has_vk_group_event_stat_week() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SourceData::clear_vk_group_event_stat_week() {
  if (vk_group_event_stat_week_ != NULL) vk_group_event_stat_week_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_vk_group_event_stat_week();
}
inline const ::cosmo::pb::SourceData_GroupEventStat& SourceData::vk_group_event_stat_week() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = vk_group_event_stat_week_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.vk_group_event_stat_week)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_vk_group_event_stat_week() {
  set_has_vk_group_event_stat_week();
  if (vk_group_event_stat_week_ == NULL) {
    _slow_mutable_vk_group_event_stat_week();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.vk_group_event_stat_week)
  return vk_group_event_stat_week_;
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::release_vk_group_event_stat_week() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.vk_group_event_stat_week)
  clear_has_vk_group_event_stat_week();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_group_event_stat_week();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_week_;
    vk_group_event_stat_week_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_vk_group_event_stat_week(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_group_event_stat_week_;
  }
  if (vk_group_event_stat_week != NULL) {
    _slow_set_allocated_vk_group_event_stat_week(message_arena, &vk_group_event_stat_week);
  }
  vk_group_event_stat_week_ = vk_group_event_stat_week;
  if (vk_group_event_stat_week) {
    set_has_vk_group_event_stat_week();
  } else {
    clear_has_vk_group_event_stat_week();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.vk_group_event_stat_week)
}

// optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat = 18;
inline bool SourceData::has_youtube_group_event_stat() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SourceData::set_has_youtube_group_event_stat() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SourceData::clear_has_youtube_group_event_stat() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SourceData::clear_youtube_group_event_stat() {
  if (youtube_group_event_stat_ != NULL) youtube_group_event_stat_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_youtube_group_event_stat();
}
inline const ::cosmo::pb::SourceData_GroupEventStat& SourceData::youtube_group_event_stat() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = youtube_group_event_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.youtube_group_event_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_youtube_group_event_stat() {
  set_has_youtube_group_event_stat();
  if (youtube_group_event_stat_ == NULL) {
    _slow_mutable_youtube_group_event_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.youtube_group_event_stat)
  return youtube_group_event_stat_;
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::release_youtube_group_event_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.youtube_group_event_stat)
  clear_has_youtube_group_event_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_group_event_stat();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_;
    youtube_group_event_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_youtube_group_event_stat(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_group_event_stat_;
  }
  if (youtube_group_event_stat != NULL) {
    _slow_set_allocated_youtube_group_event_stat(message_arena, &youtube_group_event_stat);
  }
  youtube_group_event_stat_ = youtube_group_event_stat;
  if (youtube_group_event_stat) {
    set_has_youtube_group_event_stat();
  } else {
    clear_has_youtube_group_event_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat)
}

// optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week = 19;
inline bool SourceData::has_youtube_group_event_stat_week() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SourceData::set_has_youtube_group_event_stat_week() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SourceData::clear_has_youtube_group_event_stat_week() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SourceData::clear_youtube_group_event_stat_week() {
  if (youtube_group_event_stat_week_ != NULL) youtube_group_event_stat_week_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_youtube_group_event_stat_week();
}
inline const ::cosmo::pb::SourceData_GroupEventStat& SourceData::youtube_group_event_stat_week() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = youtube_group_event_stat_week_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.youtube_group_event_stat_week)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_youtube_group_event_stat_week() {
  set_has_youtube_group_event_stat_week();
  if (youtube_group_event_stat_week_ == NULL) {
    _slow_mutable_youtube_group_event_stat_week();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.youtube_group_event_stat_week)
  return youtube_group_event_stat_week_;
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::release_youtube_group_event_stat_week() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.youtube_group_event_stat_week)
  clear_has_youtube_group_event_stat_week();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_group_event_stat_week();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_week_;
    youtube_group_event_stat_week_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_youtube_group_event_stat_week(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_group_event_stat_week_;
  }
  if (youtube_group_event_stat_week != NULL) {
    _slow_set_allocated_youtube_group_event_stat_week(message_arena, &youtube_group_event_stat_week);
  }
  youtube_group_event_stat_week_ = youtube_group_event_stat_week;
  if (youtube_group_event_stat_week) {
    set_has_youtube_group_event_stat_week();
  } else {
    clear_has_youtube_group_event_stat_week();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat_week)
}

// optional .cosmo.pb.SourceData.SourceLocationStat taped_location_stat = 21;
inline bool SourceData::has_taped_location_stat() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SourceData::set_has_taped_location_stat() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SourceData::clear_has_taped_location_stat() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SourceData::clear_taped_location_stat() {
  if (taped_location_stat_ != NULL) taped_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_taped_location_stat();
}
inline const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::taped_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = taped_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.taped_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_taped_location_stat() {
  set_has_taped_location_stat();
  if (taped_location_stat_ == NULL) {
    _slow_mutable_taped_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.taped_location_stat)
  return taped_location_stat_;
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_taped_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.taped_location_stat)
  clear_has_taped_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_taped_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = taped_location_stat_;
    taped_location_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_taped_location_stat(::cosmo::pb::SourceData_SourceLocationStat* taped_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete taped_location_stat_;
  }
  if (taped_location_stat != NULL) {
    _slow_set_allocated_taped_location_stat(message_arena, &taped_location_stat);
  }
  taped_location_stat_ = taped_location_stat;
  if (taped_location_stat) {
    set_has_taped_location_stat();
  } else {
    clear_has_taped_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.taped_location_stat)
}

// optional .cosmo.pb.SourceData.SourceLocationStat homer_location_stat = 22;
inline bool SourceData::has_homer_location_stat() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SourceData::set_has_homer_location_stat() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SourceData::clear_has_homer_location_stat() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SourceData::clear_homer_location_stat() {
  if (homer_location_stat_ != NULL) homer_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_homer_location_stat();
}
inline const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::homer_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = homer_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.homer_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_homer_location_stat() {
  set_has_homer_location_stat();
  if (homer_location_stat_ == NULL) {
    _slow_mutable_homer_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.homer_location_stat)
  return homer_location_stat_;
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_homer_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.homer_location_stat)
  clear_has_homer_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_homer_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = homer_location_stat_;
    homer_location_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_homer_location_stat(::cosmo::pb::SourceData_SourceLocationStat* homer_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete homer_location_stat_;
  }
  if (homer_location_stat != NULL) {
    _slow_set_allocated_homer_location_stat(message_arena, &homer_location_stat);
  }
  homer_location_stat_ = homer_location_stat;
  if (homer_location_stat) {
    set_has_homer_location_stat();
  } else {
    clear_has_homer_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.homer_location_stat)
}

// optional .cosmo.pb.SourceData.SourceSimilarity web_top_similar_sources = 23;
inline bool SourceData::has_web_top_similar_sources() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SourceData::set_has_web_top_similar_sources() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SourceData::clear_has_web_top_similar_sources() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SourceData::clear_web_top_similar_sources() {
  if (web_top_similar_sources_ != NULL) web_top_similar_sources_->::cosmo::pb::SourceData_SourceSimilarity::Clear();
  clear_has_web_top_similar_sources();
}
inline const ::cosmo::pb::SourceData_SourceSimilarity& SourceData::web_top_similar_sources() const {
  const ::cosmo::pb::SourceData_SourceSimilarity* p = web_top_similar_sources_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.web_top_similar_sources)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceSimilarity*>(
      &::cosmo::pb::_SourceData_SourceSimilarity_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceSimilarity* SourceData::mutable_web_top_similar_sources() {
  set_has_web_top_similar_sources();
  if (web_top_similar_sources_ == NULL) {
    _slow_mutable_web_top_similar_sources();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.web_top_similar_sources)
  return web_top_similar_sources_;
}
inline ::cosmo::pb::SourceData_SourceSimilarity* SourceData::release_web_top_similar_sources() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.web_top_similar_sources)
  clear_has_web_top_similar_sources();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_web_top_similar_sources();
  } else {
    ::cosmo::pb::SourceData_SourceSimilarity* temp = web_top_similar_sources_;
    web_top_similar_sources_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_web_top_similar_sources(::cosmo::pb::SourceData_SourceSimilarity* web_top_similar_sources) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete web_top_similar_sources_;
  }
  if (web_top_similar_sources != NULL) {
    _slow_set_allocated_web_top_similar_sources(message_arena, &web_top_similar_sources);
  }
  web_top_similar_sources_ = web_top_similar_sources;
  if (web_top_similar_sources) {
    set_has_web_top_similar_sources();
  } else {
    clear_has_web_top_similar_sources();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.web_top_similar_sources)
}

// optional .cosmo.pb.SourceData.SourceSimilarity ok_top_similar_groups = 24;
inline bool SourceData::has_ok_top_similar_groups() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SourceData::set_has_ok_top_similar_groups() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SourceData::clear_has_ok_top_similar_groups() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SourceData::clear_ok_top_similar_groups() {
  if (ok_top_similar_groups_ != NULL) ok_top_similar_groups_->::cosmo::pb::SourceData_SourceSimilarity::Clear();
  clear_has_ok_top_similar_groups();
}
inline const ::cosmo::pb::SourceData_SourceSimilarity& SourceData::ok_top_similar_groups() const {
  const ::cosmo::pb::SourceData_SourceSimilarity* p = ok_top_similar_groups_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.ok_top_similar_groups)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceSimilarity*>(
      &::cosmo::pb::_SourceData_SourceSimilarity_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceSimilarity* SourceData::mutable_ok_top_similar_groups() {
  set_has_ok_top_similar_groups();
  if (ok_top_similar_groups_ == NULL) {
    _slow_mutable_ok_top_similar_groups();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.ok_top_similar_groups)
  return ok_top_similar_groups_;
}
inline ::cosmo::pb::SourceData_SourceSimilarity* SourceData::release_ok_top_similar_groups() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.ok_top_similar_groups)
  clear_has_ok_top_similar_groups();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_top_similar_groups();
  } else {
    ::cosmo::pb::SourceData_SourceSimilarity* temp = ok_top_similar_groups_;
    ok_top_similar_groups_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_ok_top_similar_groups(::cosmo::pb::SourceData_SourceSimilarity* ok_top_similar_groups) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_top_similar_groups_;
  }
  if (ok_top_similar_groups != NULL) {
    _slow_set_allocated_ok_top_similar_groups(message_arena, &ok_top_similar_groups);
  }
  ok_top_similar_groups_ = ok_top_similar_groups;
  if (ok_top_similar_groups) {
    set_has_ok_top_similar_groups();
  } else {
    clear_has_ok_top_similar_groups();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.ok_top_similar_groups)
}

// optional .cosmo.pb.SourceData.SourceLocationStat hourly_location_stat = 25;
inline bool SourceData::has_hourly_location_stat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SourceData::set_has_hourly_location_stat() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SourceData::clear_has_hourly_location_stat() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SourceData::clear_hourly_location_stat() {
  if (hourly_location_stat_ != NULL) hourly_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_hourly_location_stat();
}
inline const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::hourly_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = hourly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.hourly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_hourly_location_stat() {
  set_has_hourly_location_stat();
  if (hourly_location_stat_ == NULL) {
    _slow_mutable_hourly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.hourly_location_stat)
  return hourly_location_stat_;
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_hourly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.hourly_location_stat)
  clear_has_hourly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_hourly_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = hourly_location_stat_;
    hourly_location_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_hourly_location_stat(::cosmo::pb::SourceData_SourceLocationStat* hourly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hourly_location_stat_;
  }
  if (hourly_location_stat != NULL) {
    _slow_set_allocated_hourly_location_stat(message_arena, &hourly_location_stat);
  }
  hourly_location_stat_ = hourly_location_stat;
  if (hourly_location_stat) {
    set_has_hourly_location_stat();
  } else {
    clear_has_hourly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.hourly_location_stat)
}

// optional .cosmo.pb.SourceData.SourceLocationStat daily_location_stat = 26;
inline bool SourceData::has_daily_location_stat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SourceData::set_has_daily_location_stat() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SourceData::clear_has_daily_location_stat() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SourceData::clear_daily_location_stat() {
  if (daily_location_stat_ != NULL) daily_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_daily_location_stat();
}
inline const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::daily_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = daily_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.daily_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_daily_location_stat() {
  set_has_daily_location_stat();
  if (daily_location_stat_ == NULL) {
    _slow_mutable_daily_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.daily_location_stat)
  return daily_location_stat_;
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_daily_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.daily_location_stat)
  clear_has_daily_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_daily_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = daily_location_stat_;
    daily_location_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_daily_location_stat(::cosmo::pb::SourceData_SourceLocationStat* daily_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete daily_location_stat_;
  }
  if (daily_location_stat != NULL) {
    _slow_set_allocated_daily_location_stat(message_arena, &daily_location_stat);
  }
  daily_location_stat_ = daily_location_stat;
  if (daily_location_stat) {
    set_has_daily_location_stat();
  } else {
    clear_has_daily_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.daily_location_stat)
}

// optional .cosmo.pb.SourceData.SourceLocationStat weekly_location_stat = 27;
inline bool SourceData::has_weekly_location_stat() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SourceData::set_has_weekly_location_stat() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SourceData::clear_has_weekly_location_stat() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SourceData::clear_weekly_location_stat() {
  if (weekly_location_stat_ != NULL) weekly_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_weekly_location_stat();
}
inline const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::weekly_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = weekly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.weekly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_weekly_location_stat() {
  set_has_weekly_location_stat();
  if (weekly_location_stat_ == NULL) {
    _slow_mutable_weekly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.weekly_location_stat)
  return weekly_location_stat_;
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_weekly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.weekly_location_stat)
  clear_has_weekly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_weekly_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = weekly_location_stat_;
    weekly_location_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_weekly_location_stat(::cosmo::pb::SourceData_SourceLocationStat* weekly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weekly_location_stat_;
  }
  if (weekly_location_stat != NULL) {
    _slow_set_allocated_weekly_location_stat(message_arena, &weekly_location_stat);
  }
  weekly_location_stat_ = weekly_location_stat;
  if (weekly_location_stat) {
    set_has_weekly_location_stat();
  } else {
    clear_has_weekly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.weekly_location_stat)
}

// optional .cosmo.pb.SourceData.SourceLocationStat monthly_location_stat = 28;
inline bool SourceData::has_monthly_location_stat() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SourceData::set_has_monthly_location_stat() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SourceData::clear_has_monthly_location_stat() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SourceData::clear_monthly_location_stat() {
  if (monthly_location_stat_ != NULL) monthly_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_monthly_location_stat();
}
inline const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::monthly_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = monthly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.monthly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_monthly_location_stat() {
  set_has_monthly_location_stat();
  if (monthly_location_stat_ == NULL) {
    _slow_mutable_monthly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.monthly_location_stat)
  return monthly_location_stat_;
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_monthly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.monthly_location_stat)
  clear_has_monthly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_monthly_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = monthly_location_stat_;
    monthly_location_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_monthly_location_stat(::cosmo::pb::SourceData_SourceLocationStat* monthly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete monthly_location_stat_;
  }
  if (monthly_location_stat != NULL) {
    _slow_set_allocated_monthly_location_stat(message_arena, &monthly_location_stat);
  }
  monthly_location_stat_ = monthly_location_stat;
  if (monthly_location_stat) {
    set_has_monthly_location_stat();
  } else {
    clear_has_monthly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.monthly_location_stat)
}

// optional .cosmo.pb.SourceData.SourcePopularityStat source_new_popularity = 29;
inline bool SourceData::has_source_new_popularity() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SourceData::set_has_source_new_popularity() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SourceData::clear_has_source_new_popularity() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SourceData::clear_source_new_popularity() {
  if (source_new_popularity_ != NULL) source_new_popularity_->::cosmo::pb::SourceData_SourcePopularityStat::Clear();
  clear_has_source_new_popularity();
}
inline const ::cosmo::pb::SourceData_SourcePopularityStat& SourceData::source_new_popularity() const {
  const ::cosmo::pb::SourceData_SourcePopularityStat* p = source_new_popularity_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_new_popularity)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourcePopularityStat*>(
      &::cosmo::pb::_SourceData_SourcePopularityStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourcePopularityStat* SourceData::mutable_source_new_popularity() {
  set_has_source_new_popularity();
  if (source_new_popularity_ == NULL) {
    _slow_mutable_source_new_popularity();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.source_new_popularity)
  return source_new_popularity_;
}
inline ::cosmo::pb::SourceData_SourcePopularityStat* SourceData::release_source_new_popularity() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.source_new_popularity)
  clear_has_source_new_popularity();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_new_popularity();
  } else {
    ::cosmo::pb::SourceData_SourcePopularityStat* temp = source_new_popularity_;
    source_new_popularity_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_source_new_popularity(::cosmo::pb::SourceData_SourcePopularityStat* source_new_popularity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_new_popularity_;
  }
  if (source_new_popularity != NULL) {
    _slow_set_allocated_source_new_popularity(message_arena, &source_new_popularity);
  }
  source_new_popularity_ = source_new_popularity;
  if (source_new_popularity) {
    set_has_source_new_popularity();
  } else {
    clear_has_source_new_popularity();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.source_new_popularity)
}

// optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_v2 = 30;
inline bool SourceData::has_vk_group_event_stat_v2() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SourceData::set_has_vk_group_event_stat_v2() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SourceData::clear_has_vk_group_event_stat_v2() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SourceData::clear_vk_group_event_stat_v2() {
  if (vk_group_event_stat_v2_ != NULL) vk_group_event_stat_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_vk_group_event_stat_v2();
}
inline const ::cosmo::pb::SourceData_GroupEventStat& SourceData::vk_group_event_stat_v2() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = vk_group_event_stat_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.vk_group_event_stat_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_vk_group_event_stat_v2() {
  set_has_vk_group_event_stat_v2();
  if (vk_group_event_stat_v2_ == NULL) {
    _slow_mutable_vk_group_event_stat_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.vk_group_event_stat_v2)
  return vk_group_event_stat_v2_;
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::release_vk_group_event_stat_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.vk_group_event_stat_v2)
  clear_has_vk_group_event_stat_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_group_event_stat_v2();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_v2_;
    vk_group_event_stat_v2_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_vk_group_event_stat_v2(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_group_event_stat_v2_;
  }
  if (vk_group_event_stat_v2 != NULL) {
    _slow_set_allocated_vk_group_event_stat_v2(message_arena, &vk_group_event_stat_v2);
  }
  vk_group_event_stat_v2_ = vk_group_event_stat_v2;
  if (vk_group_event_stat_v2) {
    set_has_vk_group_event_stat_v2();
  } else {
    clear_has_vk_group_event_stat_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.vk_group_event_stat_v2)
}

// optional .cosmo.pb.SourceData.GroupEventStat vk_group_event_stat_week_v2 = 31;
inline bool SourceData::has_vk_group_event_stat_week_v2() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SourceData::set_has_vk_group_event_stat_week_v2() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SourceData::clear_has_vk_group_event_stat_week_v2() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SourceData::clear_vk_group_event_stat_week_v2() {
  if (vk_group_event_stat_week_v2_ != NULL) vk_group_event_stat_week_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_vk_group_event_stat_week_v2();
}
inline const ::cosmo::pb::SourceData_GroupEventStat& SourceData::vk_group_event_stat_week_v2() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = vk_group_event_stat_week_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.vk_group_event_stat_week_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_vk_group_event_stat_week_v2() {
  set_has_vk_group_event_stat_week_v2();
  if (vk_group_event_stat_week_v2_ == NULL) {
    _slow_mutable_vk_group_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.vk_group_event_stat_week_v2)
  return vk_group_event_stat_week_v2_;
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::release_vk_group_event_stat_week_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.vk_group_event_stat_week_v2)
  clear_has_vk_group_event_stat_week_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_group_event_stat_week_v2();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = vk_group_event_stat_week_v2_;
    vk_group_event_stat_week_v2_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_vk_group_event_stat_week_v2(::cosmo::pb::SourceData_GroupEventStat* vk_group_event_stat_week_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_group_event_stat_week_v2_;
  }
  if (vk_group_event_stat_week_v2 != NULL) {
    _slow_set_allocated_vk_group_event_stat_week_v2(message_arena, &vk_group_event_stat_week_v2);
  }
  vk_group_event_stat_week_v2_ = vk_group_event_stat_week_v2;
  if (vk_group_event_stat_week_v2) {
    set_has_vk_group_event_stat_week_v2();
  } else {
    clear_has_vk_group_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.vk_group_event_stat_week_v2)
}

// optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_v2 = 32;
inline bool SourceData::has_youtube_group_event_stat_v2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SourceData::set_has_youtube_group_event_stat_v2() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SourceData::clear_has_youtube_group_event_stat_v2() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SourceData::clear_youtube_group_event_stat_v2() {
  if (youtube_group_event_stat_v2_ != NULL) youtube_group_event_stat_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_youtube_group_event_stat_v2();
}
inline const ::cosmo::pb::SourceData_GroupEventStat& SourceData::youtube_group_event_stat_v2() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = youtube_group_event_stat_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.youtube_group_event_stat_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_youtube_group_event_stat_v2() {
  set_has_youtube_group_event_stat_v2();
  if (youtube_group_event_stat_v2_ == NULL) {
    _slow_mutable_youtube_group_event_stat_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.youtube_group_event_stat_v2)
  return youtube_group_event_stat_v2_;
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::release_youtube_group_event_stat_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.youtube_group_event_stat_v2)
  clear_has_youtube_group_event_stat_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_group_event_stat_v2();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_v2_;
    youtube_group_event_stat_v2_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_youtube_group_event_stat_v2(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_group_event_stat_v2_;
  }
  if (youtube_group_event_stat_v2 != NULL) {
    _slow_set_allocated_youtube_group_event_stat_v2(message_arena, &youtube_group_event_stat_v2);
  }
  youtube_group_event_stat_v2_ = youtube_group_event_stat_v2;
  if (youtube_group_event_stat_v2) {
    set_has_youtube_group_event_stat_v2();
  } else {
    clear_has_youtube_group_event_stat_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat_v2)
}

// optional .cosmo.pb.SourceData.GroupEventStat youtube_group_event_stat_week_v2 = 33;
inline bool SourceData::has_youtube_group_event_stat_week_v2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SourceData::set_has_youtube_group_event_stat_week_v2() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SourceData::clear_has_youtube_group_event_stat_week_v2() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SourceData::clear_youtube_group_event_stat_week_v2() {
  if (youtube_group_event_stat_week_v2_ != NULL) youtube_group_event_stat_week_v2_->::cosmo::pb::SourceData_GroupEventStat::Clear();
  clear_has_youtube_group_event_stat_week_v2();
}
inline const ::cosmo::pb::SourceData_GroupEventStat& SourceData::youtube_group_event_stat_week_v2() const {
  const ::cosmo::pb::SourceData_GroupEventStat* p = youtube_group_event_stat_week_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.youtube_group_event_stat_week_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_GroupEventStat*>(
      &::cosmo::pb::_SourceData_GroupEventStat_default_instance_);
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::mutable_youtube_group_event_stat_week_v2() {
  set_has_youtube_group_event_stat_week_v2();
  if (youtube_group_event_stat_week_v2_ == NULL) {
    _slow_mutable_youtube_group_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.youtube_group_event_stat_week_v2)
  return youtube_group_event_stat_week_v2_;
}
inline ::cosmo::pb::SourceData_GroupEventStat* SourceData::release_youtube_group_event_stat_week_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.youtube_group_event_stat_week_v2)
  clear_has_youtube_group_event_stat_week_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_group_event_stat_week_v2();
  } else {
    ::cosmo::pb::SourceData_GroupEventStat* temp = youtube_group_event_stat_week_v2_;
    youtube_group_event_stat_week_v2_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_youtube_group_event_stat_week_v2(::cosmo::pb::SourceData_GroupEventStat* youtube_group_event_stat_week_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_group_event_stat_week_v2_;
  }
  if (youtube_group_event_stat_week_v2 != NULL) {
    _slow_set_allocated_youtube_group_event_stat_week_v2(message_arena, &youtube_group_event_stat_week_v2);
  }
  youtube_group_event_stat_week_v2_ = youtube_group_event_stat_week_v2;
  if (youtube_group_event_stat_week_v2) {
    set_has_youtube_group_event_stat_week_v2();
  } else {
    clear_has_youtube_group_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.youtube_group_event_stat_week_v2)
}

// optional .cosmo.pb.SourceData.SourceLocationStat fast_location_stat = 34;
inline bool SourceData::has_fast_location_stat() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SourceData::set_has_fast_location_stat() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SourceData::clear_has_fast_location_stat() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SourceData::clear_fast_location_stat() {
  if (fast_location_stat_ != NULL) fast_location_stat_->::cosmo::pb::SourceData_SourceLocationStat::Clear();
  clear_has_fast_location_stat();
}
inline const ::cosmo::pb::SourceData_SourceLocationStat& SourceData::fast_location_stat() const {
  const ::cosmo::pb::SourceData_SourceLocationStat* p = fast_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.fast_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceLocationStat*>(
      &::cosmo::pb::_SourceData_SourceLocationStat_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::mutable_fast_location_stat() {
  set_has_fast_location_stat();
  if (fast_location_stat_ == NULL) {
    _slow_mutable_fast_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.fast_location_stat)
  return fast_location_stat_;
}
inline ::cosmo::pb::SourceData_SourceLocationStat* SourceData::release_fast_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.fast_location_stat)
  clear_has_fast_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fast_location_stat();
  } else {
    ::cosmo::pb::SourceData_SourceLocationStat* temp = fast_location_stat_;
    fast_location_stat_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_fast_location_stat(::cosmo::pb::SourceData_SourceLocationStat* fast_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fast_location_stat_;
  }
  if (fast_location_stat != NULL) {
    _slow_set_allocated_fast_location_stat(message_arena, &fast_location_stat);
  }
  fast_location_stat_ = fast_location_stat;
  if (fast_location_stat) {
    set_has_fast_location_stat();
  } else {
    clear_has_fast_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.fast_location_stat)
}

// optional .cosmo.pb.SourceData.SourceGeo source_stat_geo = 35;
inline bool SourceData::has_source_stat_geo() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SourceData::set_has_source_stat_geo() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SourceData::clear_has_source_stat_geo() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SourceData::clear_source_stat_geo() {
  if (source_stat_geo_ != NULL) source_stat_geo_->::cosmo::pb::SourceData_SourceGeo::Clear();
  clear_has_source_stat_geo();
}
inline const ::cosmo::pb::SourceData_SourceGeo& SourceData::source_stat_geo() const {
  const ::cosmo::pb::SourceData_SourceGeo* p = source_stat_geo_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.source_stat_geo)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_SourceGeo*>(
      &::cosmo::pb::_SourceData_SourceGeo_default_instance_);
}
inline ::cosmo::pb::SourceData_SourceGeo* SourceData::mutable_source_stat_geo() {
  set_has_source_stat_geo();
  if (source_stat_geo_ == NULL) {
    _slow_mutable_source_stat_geo();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.source_stat_geo)
  return source_stat_geo_;
}
inline ::cosmo::pb::SourceData_SourceGeo* SourceData::release_source_stat_geo() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.source_stat_geo)
  clear_has_source_stat_geo();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_stat_geo();
  } else {
    ::cosmo::pb::SourceData_SourceGeo* temp = source_stat_geo_;
    source_stat_geo_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_source_stat_geo(::cosmo::pb::SourceData_SourceGeo* source_stat_geo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_stat_geo_;
  }
  if (source_stat_geo != NULL) {
    _slow_set_allocated_source_stat_geo(message_arena, &source_stat_geo);
  }
  source_stat_geo_ = source_stat_geo;
  if (source_stat_geo) {
    set_has_source_stat_geo();
  } else {
    clear_has_source_stat_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.source_stat_geo)
}

// optional .cosmo.pb.SourceData.ContentThemes content_themes = 36;
inline bool SourceData::has_content_themes() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SourceData::set_has_content_themes() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SourceData::clear_has_content_themes() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SourceData::clear_content_themes() {
  if (content_themes_ != NULL) content_themes_->::cosmo::pb::SourceData_ContentThemes::Clear();
  clear_has_content_themes();
}
inline const ::cosmo::pb::SourceData_ContentThemes& SourceData::content_themes() const {
  const ::cosmo::pb::SourceData_ContentThemes* p = content_themes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.content_themes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_ContentThemes*>(
      &::cosmo::pb::_SourceData_ContentThemes_default_instance_);
}
inline ::cosmo::pb::SourceData_ContentThemes* SourceData::mutable_content_themes() {
  set_has_content_themes();
  if (content_themes_ == NULL) {
    _slow_mutable_content_themes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.content_themes)
  return content_themes_;
}
inline ::cosmo::pb::SourceData_ContentThemes* SourceData::release_content_themes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.content_themes)
  clear_has_content_themes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_content_themes();
  } else {
    ::cosmo::pb::SourceData_ContentThemes* temp = content_themes_;
    content_themes_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_content_themes(::cosmo::pb::SourceData_ContentThemes* content_themes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_themes_;
  }
  if (content_themes != NULL) {
    _slow_set_allocated_content_themes(message_arena, &content_themes);
  }
  content_themes_ = content_themes;
  if (content_themes) {
    set_has_content_themes();
  } else {
    clear_has_content_themes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.content_themes)
}

// optional .cosmo.pb.SourceData.LentaAdminSourceInfo lenta_admin_source_info = 37;
inline bool SourceData::has_lenta_admin_source_info() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SourceData::set_has_lenta_admin_source_info() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SourceData::clear_has_lenta_admin_source_info() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SourceData::clear_lenta_admin_source_info() {
  if (lenta_admin_source_info_ != NULL) lenta_admin_source_info_->::cosmo::pb::SourceData_LentaAdminSourceInfo::Clear();
  clear_has_lenta_admin_source_info();
}
inline const ::cosmo::pb::SourceData_LentaAdminSourceInfo& SourceData::lenta_admin_source_info() const {
  const ::cosmo::pb::SourceData_LentaAdminSourceInfo* p = lenta_admin_source_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.SourceData.lenta_admin_source_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData_LentaAdminSourceInfo*>(
      &::cosmo::pb::_SourceData_LentaAdminSourceInfo_default_instance_);
}
inline ::cosmo::pb::SourceData_LentaAdminSourceInfo* SourceData::mutable_lenta_admin_source_info() {
  set_has_lenta_admin_source_info();
  if (lenta_admin_source_info_ == NULL) {
    _slow_mutable_lenta_admin_source_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.SourceData.lenta_admin_source_info)
  return lenta_admin_source_info_;
}
inline ::cosmo::pb::SourceData_LentaAdminSourceInfo* SourceData::release_lenta_admin_source_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.SourceData.lenta_admin_source_info)
  clear_has_lenta_admin_source_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_lenta_admin_source_info();
  } else {
    ::cosmo::pb::SourceData_LentaAdminSourceInfo* temp = lenta_admin_source_info_;
    lenta_admin_source_info_ = NULL;
    return temp;
  }
}
inline  void SourceData::set_allocated_lenta_admin_source_info(::cosmo::pb::SourceData_LentaAdminSourceInfo* lenta_admin_source_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lenta_admin_source_info_;
  }
  if (lenta_admin_source_info != NULL) {
    _slow_set_allocated_lenta_admin_source_info(message_arena, &lenta_admin_source_info);
  }
  lenta_admin_source_info_ = lenta_admin_source_info;
  if (lenta_admin_source_info) {
    set_has_lenta_admin_source_info();
  } else {
    clear_has_lenta_admin_source_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.SourceData.lenta_admin_source_info)
}

// -------------------------------------------------------------------

// DocumentData_OriginalInfo

// optional string url = 2;
inline bool DocumentData_OriginalInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_OriginalInfo::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_OriginalInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_OriginalInfo::clear_url() {
  url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_url();
}
inline const ::std::string& DocumentData_OriginalInfo::url() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.OriginalInfo.url)
  return url_.Get();
}
inline void DocumentData_OriginalInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.OriginalInfo.url)
}
#if LANG_CXX11
inline void DocumentData_OriginalInfo::set_url(::std::string&& value) {
  set_has_url();
  url_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.DocumentData.OriginalInfo.url)
}
#endif
inline void DocumentData_OriginalInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.DocumentData.OriginalInfo.url)
}
inline void DocumentData_OriginalInfo::set_url(const char* value,
    size_t size) {
  set_has_url();
  url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.DocumentData.OriginalInfo.url)
}
inline ::std::string* DocumentData_OriginalInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.OriginalInfo.url)
  return url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DocumentData_OriginalInfo::release_url() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.OriginalInfo.url)
  clear_has_url();
  return url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DocumentData_OriginalInfo::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.OriginalInfo.url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_url();
  return url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DocumentData_OriginalInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.OriginalInfo.url)
}
inline void DocumentData_OriginalInfo::unsafe_arena_set_allocated_url(
    ::std::string* url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.OriginalInfo.url)
}

// -------------------------------------------------------------------

// DocumentData_OkInfo

// required int64 source_id = 1;
inline bool DocumentData_OkInfo::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_OkInfo::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_OkInfo::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_OkInfo::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 DocumentData_OkInfo::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.OkInfo.source_id)
  return source_id_;
}
inline void DocumentData_OkInfo::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.OkInfo.source_id)
}

// required int64 doc_id = 2;
inline bool DocumentData_OkInfo::has_doc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_OkInfo::set_has_doc_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_OkInfo::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_OkInfo::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 DocumentData_OkInfo::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.OkInfo.doc_id)
  return doc_id_;
}
inline void DocumentData_OkInfo::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.OkInfo.doc_id)
}

// -------------------------------------------------------------------

// DocumentData_ContentData

// repeated float content_vector = 1;
inline int DocumentData_ContentData::content_vector_size() const {
  return content_vector_.size();
}
inline void DocumentData_ContentData::clear_content_vector() {
  content_vector_.Clear();
}
inline float DocumentData_ContentData::content_vector(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentData.content_vector)
  return content_vector_.Get(index);
}
inline void DocumentData_ContentData::set_content_vector(int index, float value) {
  content_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentData.content_vector)
}
inline void DocumentData_ContentData::add_content_vector(float value) {
  content_vector_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.ContentData.content_vector)
}
inline const ::google::protobuf::RepeatedField< float >&
DocumentData_ContentData::content_vector() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.ContentData.content_vector)
  return content_vector_;
}
inline ::google::protobuf::RepeatedField< float >*
DocumentData_ContentData::mutable_content_vector() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.ContentData.content_vector)
  return &content_vector_;
}

// required uint64 algo_version = 2;
inline bool DocumentData_ContentData::has_algo_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_ContentData::set_has_algo_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_ContentData::clear_has_algo_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_ContentData::clear_algo_version() {
  algo_version_ = GOOGLE_ULONGLONG(0);
  clear_has_algo_version();
}
inline ::google::protobuf::uint64 DocumentData_ContentData::algo_version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentData.algo_version)
  return algo_version_;
}
inline void DocumentData_ContentData::set_algo_version(::google::protobuf::uint64 value) {
  set_has_algo_version();
  algo_version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentData.algo_version)
}

// -------------------------------------------------------------------

// DocumentData_FreshnessData

// required int64 expiration_timestamp = 1;
inline bool DocumentData_FreshnessData::has_expiration_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_FreshnessData::set_has_expiration_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_FreshnessData::clear_has_expiration_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_FreshnessData::clear_expiration_timestamp() {
  expiration_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_expiration_timestamp();
}
inline ::google::protobuf::int64 DocumentData_FreshnessData::expiration_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FreshnessData.expiration_timestamp)
  return expiration_timestamp_;
}
inline void DocumentData_FreshnessData::set_expiration_timestamp(::google::protobuf::int64 value) {
  set_has_expiration_timestamp();
  expiration_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FreshnessData.expiration_timestamp)
}

// -------------------------------------------------------------------

// DocumentData_NewsData

// required int32 clusterId = 1;
inline bool DocumentData_NewsData::has_clusterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_NewsData::set_has_clusterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_NewsData::clear_has_clusterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_NewsData::clear_clusterid() {
  clusterid_ = 0;
  clear_has_clusterid();
}
inline ::google::protobuf::int32 DocumentData_NewsData::clusterid() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsData.clusterId)
  return clusterid_;
}
inline void DocumentData_NewsData::set_clusterid(::google::protobuf::int32 value) {
  set_has_clusterid();
  clusterid_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsData.clusterId)
}

// required int32 issue_ts = 2;
inline bool DocumentData_NewsData::has_issue_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_NewsData::set_has_issue_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_NewsData::clear_has_issue_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_NewsData::clear_issue_ts() {
  issue_ts_ = 0;
  clear_has_issue_ts();
}
inline ::google::protobuf::int32 DocumentData_NewsData::issue_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsData.issue_ts)
  return issue_ts_;
}
inline void DocumentData_NewsData::set_issue_ts(::google::protobuf::int32 value) {
  set_has_issue_ts();
  issue_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsData.issue_ts)
}

// optional int32 region_id = 3;
inline bool DocumentData_NewsData::has_region_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_NewsData::set_has_region_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_NewsData::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_NewsData::clear_region_id() {
  region_id_ = 0;
  clear_has_region_id();
}
inline ::google::protobuf::int32 DocumentData_NewsData::region_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsData.region_id)
  return region_id_;
}
inline void DocumentData_NewsData::set_region_id(::google::protobuf::int32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsData.region_id)
}

// optional int32 parent_id = 4;
inline bool DocumentData_NewsData::has_parent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentData_NewsData::set_has_parent_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentData_NewsData::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentData_NewsData::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 DocumentData_NewsData::parent_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsData.parent_id)
  return parent_id_;
}
inline void DocumentData_NewsData::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsData.parent_id)
}

// -------------------------------------------------------------------

// DocumentData_Censor

// optional bool is_allowed = 1;
inline bool DocumentData_Censor::has_is_allowed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_Censor::set_has_is_allowed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_Censor::clear_has_is_allowed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_Censor::clear_is_allowed() {
  is_allowed_ = false;
  clear_has_is_allowed();
}
inline bool DocumentData_Censor::is_allowed() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Censor.is_allowed)
  return is_allowed_;
}
inline void DocumentData_Censor::set_is_allowed(bool value) {
  set_has_is_allowed();
  is_allowed_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Censor.is_allowed)
}

// -------------------------------------------------------------------

// DocumentData_UserStats

// optional uint32 likes = 1;
inline bool DocumentData_UserStats::has_likes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_UserStats::set_has_likes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_UserStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_UserStats::clear_likes() {
  likes_ = 0u;
  clear_has_likes();
}
inline ::google::protobuf::uint32 DocumentData_UserStats::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.UserStats.likes)
  return likes_;
}
inline void DocumentData_UserStats::set_likes(::google::protobuf::uint32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.UserStats.likes)
}

// optional uint32 dislikes = 2;
inline bool DocumentData_UserStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_UserStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_UserStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_UserStats::clear_dislikes() {
  dislikes_ = 0u;
  clear_has_dislikes();
}
inline ::google::protobuf::uint32 DocumentData_UserStats::dislikes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.UserStats.dislikes)
  return dislikes_;
}
inline void DocumentData_UserStats::set_dislikes(::google::protobuf::uint32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.UserStats.dislikes)
}

// optional uint32 views = 3;
inline bool DocumentData_UserStats::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_UserStats::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_UserStats::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_UserStats::clear_views() {
  views_ = 0u;
  clear_has_views();
}
inline ::google::protobuf::uint32 DocumentData_UserStats::views() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.UserStats.views)
  return views_;
}
inline void DocumentData_UserStats::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.UserStats.views)
}

// -------------------------------------------------------------------

// DocumentData_Trends

// optional uint32 version = 1;
inline bool DocumentData_Trends::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_Trends::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_Trends::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_Trends::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 DocumentData_Trends::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Trends.version)
  return version_;
}
inline void DocumentData_Trends::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Trends.version)
}

// optional int32 likes = 2;
inline bool DocumentData_Trends::has_likes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_Trends::set_has_likes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_Trends::clear_has_likes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_Trends::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
inline ::google::protobuf::int32 DocumentData_Trends::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Trends.likes)
  return likes_;
}
inline void DocumentData_Trends::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Trends.likes)
}

// optional int32 views = 3;
inline bool DocumentData_Trends::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_Trends::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_Trends::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_Trends::clear_views() {
  views_ = 0;
  clear_has_views();
}
inline ::google::protobuf::int32 DocumentData_Trends::views() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Trends.views)
  return views_;
}
inline void DocumentData_Trends::set_views(::google::protobuf::int32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Trends.views)
}

// -------------------------------------------------------------------

// DocumentData_GeoHits

// required uint32 geo = 1;
inline bool DocumentData_GeoHits::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_GeoHits::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_GeoHits::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_GeoHits::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
inline ::google::protobuf::uint32 DocumentData_GeoHits::geo() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.GeoHits.geo)
  return geo_;
}
inline void DocumentData_GeoHits::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.GeoHits.geo)
}

// required int32 hits = 2;
inline bool DocumentData_GeoHits::has_hits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_GeoHits::set_has_hits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_GeoHits::clear_has_hits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_GeoHits::clear_hits() {
  hits_ = 0;
  clear_has_hits();
}
inline ::google::protobuf::int32 DocumentData_GeoHits::hits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.GeoHits.hits)
  return hits_;
}
inline void DocumentData_GeoHits::set_hits(::google::protobuf::int32 value) {
  set_has_hits();
  hits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.GeoHits.hits)
}

// -------------------------------------------------------------------

// DocumentData_MediametricsFea

// required int32 hits = 1;
inline bool DocumentData_MediametricsFea::has_hits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_MediametricsFea::set_has_hits() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_MediametricsFea::clear_has_hits() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_MediametricsFea::clear_hits() {
  hits_ = 0;
  clear_has_hits();
}
inline ::google::protobuf::int32 DocumentData_MediametricsFea::hits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.MediametricsFea.hits)
  return hits_;
}
inline void DocumentData_MediametricsFea::set_hits(::google::protobuf::int32 value) {
  set_has_hits();
  hits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.MediametricsFea.hits)
}

// required uint32 version = 2;
inline bool DocumentData_MediametricsFea::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_MediametricsFea::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_MediametricsFea::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_MediametricsFea::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 DocumentData_MediametricsFea::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.MediametricsFea.version)
  return version_;
}
inline void DocumentData_MediametricsFea::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.MediametricsFea.version)
}

// repeated .cosmo.pb.DocumentData.GeoHits geo_hits = 3;
inline int DocumentData_MediametricsFea::geo_hits_size() const {
  return geo_hits_.size();
}
inline void DocumentData_MediametricsFea::clear_geo_hits() {
  geo_hits_.Clear();
}
inline const ::cosmo::pb::DocumentData_GeoHits& DocumentData_MediametricsFea::geo_hits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.MediametricsFea.geo_hits)
  return geo_hits_.Get(index);
}
inline ::cosmo::pb::DocumentData_GeoHits* DocumentData_MediametricsFea::mutable_geo_hits(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.MediametricsFea.geo_hits)
  return geo_hits_.Mutable(index);
}
inline ::cosmo::pb::DocumentData_GeoHits* DocumentData_MediametricsFea::add_geo_hits() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.MediametricsFea.geo_hits)
  return geo_hits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_GeoHits >*
DocumentData_MediametricsFea::mutable_geo_hits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.MediametricsFea.geo_hits)
  return &geo_hits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_GeoHits >&
DocumentData_MediametricsFea::geo_hits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.MediametricsFea.geo_hits)
  return geo_hits_;
}

// repeated uint32 male_hits = 4;
inline int DocumentData_MediametricsFea::male_hits_size() const {
  return male_hits_.size();
}
inline void DocumentData_MediametricsFea::clear_male_hits() {
  male_hits_.Clear();
}
inline ::google::protobuf::uint32 DocumentData_MediametricsFea::male_hits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.MediametricsFea.male_hits)
  return male_hits_.Get(index);
}
inline void DocumentData_MediametricsFea::set_male_hits(int index, ::google::protobuf::uint32 value) {
  male_hits_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.MediametricsFea.male_hits)
}
inline void DocumentData_MediametricsFea::add_male_hits(::google::protobuf::uint32 value) {
  male_hits_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.MediametricsFea.male_hits)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DocumentData_MediametricsFea::male_hits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.MediametricsFea.male_hits)
  return male_hits_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DocumentData_MediametricsFea::mutable_male_hits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.MediametricsFea.male_hits)
  return &male_hits_;
}

// repeated uint32 female_hits = 5;
inline int DocumentData_MediametricsFea::female_hits_size() const {
  return female_hits_.size();
}
inline void DocumentData_MediametricsFea::clear_female_hits() {
  female_hits_.Clear();
}
inline ::google::protobuf::uint32 DocumentData_MediametricsFea::female_hits(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.MediametricsFea.female_hits)
  return female_hits_.Get(index);
}
inline void DocumentData_MediametricsFea::set_female_hits(int index, ::google::protobuf::uint32 value) {
  female_hits_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.MediametricsFea.female_hits)
}
inline void DocumentData_MediametricsFea::add_female_hits(::google::protobuf::uint32 value) {
  female_hits_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.MediametricsFea.female_hits)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DocumentData_MediametricsFea::female_hits() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.MediametricsFea.female_hits)
  return female_hits_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DocumentData_MediametricsFea::mutable_female_hits() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.MediametricsFea.female_hits)
  return &female_hits_;
}

// -------------------------------------------------------------------

// DocumentData_Fetcher

// optional int64 fetch_timestamp = 1;
inline bool DocumentData_Fetcher::has_fetch_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_Fetcher::set_has_fetch_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_Fetcher::clear_has_fetch_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_Fetcher::clear_fetch_timestamp() {
  fetch_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_fetch_timestamp();
}
inline ::google::protobuf::int64 DocumentData_Fetcher::fetch_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.fetch_timestamp)
  return fetch_timestamp_;
}
inline void DocumentData_Fetcher::set_fetch_timestamp(::google::protobuf::int64 value) {
  set_has_fetch_timestamp();
  fetch_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.fetch_timestamp)
}

// optional uint32 region_id = 2;
inline bool DocumentData_Fetcher::has_region_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_Fetcher::set_has_region_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_Fetcher::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_Fetcher::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
inline ::google::protobuf::uint32 DocumentData_Fetcher::region_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.region_id)
  return region_id_;
}
inline void DocumentData_Fetcher::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.region_id)
}

// optional bool has_title = 3;
inline bool DocumentData_Fetcher::has_has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_Fetcher::set_has_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_Fetcher::clear_has_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_Fetcher::clear_has_title() {
  has_title_ = false;
  clear_has_has_title();
}
inline bool DocumentData_Fetcher::has_title() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.has_title)
  return has_title_;
}
inline void DocumentData_Fetcher::set_has_title(bool value) {
  set_has_has_title();
  has_title_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.has_title)
}

// optional bool has_img = 4;
inline bool DocumentData_Fetcher::has_has_img() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentData_Fetcher::set_has_has_img() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentData_Fetcher::clear_has_has_img() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentData_Fetcher::clear_has_img() {
  has_img_ = false;
  clear_has_has_img();
}
inline bool DocumentData_Fetcher::has_img() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.has_img)
  return has_img_;
}
inline void DocumentData_Fetcher::set_has_img(bool value) {
  set_has_has_img();
  has_img_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.has_img)
}

// optional bool has_description = 5;
inline bool DocumentData_Fetcher::has_has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentData_Fetcher::set_has_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentData_Fetcher::clear_has_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentData_Fetcher::clear_has_description() {
  has_description_ = false;
  clear_has_has_description();
}
inline bool DocumentData_Fetcher::has_description() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.has_description)
  return has_description_;
}
inline void DocumentData_Fetcher::set_has_description(bool value) {
  set_has_has_description();
  has_description_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.has_description)
}

// optional int64 last_fetch_timestamp = 6;
inline bool DocumentData_Fetcher::has_last_fetch_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocumentData_Fetcher::set_has_last_fetch_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocumentData_Fetcher::clear_has_last_fetch_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocumentData_Fetcher::clear_last_fetch_timestamp() {
  last_fetch_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_last_fetch_timestamp();
}
inline ::google::protobuf::int64 DocumentData_Fetcher::last_fetch_timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.last_fetch_timestamp)
  return last_fetch_timestamp_;
}
inline void DocumentData_Fetcher::set_last_fetch_timestamp(::google::protobuf::int64 value) {
  set_has_last_fetch_timestamp();
  last_fetch_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.last_fetch_timestamp)
}

// optional int32 title_len = 7;
inline bool DocumentData_Fetcher::has_title_len() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DocumentData_Fetcher::set_has_title_len() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DocumentData_Fetcher::clear_has_title_len() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DocumentData_Fetcher::clear_title_len() {
  title_len_ = 0;
  clear_has_title_len();
}
inline ::google::protobuf::int32 DocumentData_Fetcher::title_len() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.title_len)
  return title_len_;
}
inline void DocumentData_Fetcher::set_title_len(::google::protobuf::int32 value) {
  set_has_title_len();
  title_len_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.title_len)
}

// optional int32 description_len = 8;
inline bool DocumentData_Fetcher::has_description_len() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DocumentData_Fetcher::set_has_description_len() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DocumentData_Fetcher::clear_has_description_len() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DocumentData_Fetcher::clear_description_len() {
  description_len_ = 0;
  clear_has_description_len();
}
inline ::google::protobuf::int32 DocumentData_Fetcher::description_len() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.description_len)
  return description_len_;
}
inline void DocumentData_Fetcher::set_description_len(::google::protobuf::int32 value) {
  set_has_description_len();
  description_len_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.description_len)
}

// optional bool has_fulltext = 9;
inline bool DocumentData_Fetcher::has_has_fulltext() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentData_Fetcher::set_has_has_fulltext() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentData_Fetcher::clear_has_has_fulltext() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentData_Fetcher::clear_has_fulltext() {
  has_fulltext_ = false;
  clear_has_has_fulltext();
}
inline bool DocumentData_Fetcher::has_fulltext() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.has_fulltext)
  return has_fulltext_;
}
inline void DocumentData_Fetcher::set_has_fulltext(bool value) {
  set_has_has_fulltext();
  has_fulltext_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.has_fulltext)
}

// optional bool has_video = 10;
inline bool DocumentData_Fetcher::has_has_video() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DocumentData_Fetcher::set_has_has_video() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DocumentData_Fetcher::clear_has_has_video() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DocumentData_Fetcher::clear_has_video() {
  has_video_ = false;
  clear_has_has_video();
}
inline bool DocumentData_Fetcher::has_video() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.Fetcher.has_video)
  return has_video_;
}
inline void DocumentData_Fetcher::set_has_video(bool value) {
  set_has_has_video();
  has_video_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.Fetcher.has_video)
}

// -------------------------------------------------------------------

// DocumentData_FetcherFirstmeet

// optional int64 firstmeet = 1;
inline bool DocumentData_FetcherFirstmeet::has_firstmeet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_FetcherFirstmeet::set_has_firstmeet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_FetcherFirstmeet::clear_has_firstmeet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_FetcherFirstmeet::clear_firstmeet() {
  firstmeet_ = GOOGLE_LONGLONG(0);
  clear_has_firstmeet();
}
inline ::google::protobuf::int64 DocumentData_FetcherFirstmeet::firstmeet() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherFirstmeet.firstmeet)
  return firstmeet_;
}
inline void DocumentData_FetcherFirstmeet::set_firstmeet(::google::protobuf::int64 value) {
  set_has_firstmeet();
  firstmeet_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherFirstmeet.firstmeet)
}

// -------------------------------------------------------------------

// DocumentData_FetcherPubdate

// optional int64 pubdate = 1;
inline bool DocumentData_FetcherPubdate::has_pubdate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_FetcherPubdate::set_has_pubdate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_FetcherPubdate::clear_has_pubdate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_FetcherPubdate::clear_pubdate() {
  pubdate_ = GOOGLE_LONGLONG(0);
  clear_has_pubdate();
}
inline ::google::protobuf::int64 DocumentData_FetcherPubdate::pubdate() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherPubdate.pubdate)
  return pubdate_;
}
inline void DocumentData_FetcherPubdate::set_pubdate(::google::protobuf::int64 value) {
  set_has_pubdate();
  pubdate_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherPubdate.pubdate)
}

// -------------------------------------------------------------------

// DocumentData_FetcherGeo

// required uint32 region_id = 1;
inline bool DocumentData_FetcherGeo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_FetcherGeo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_FetcherGeo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_FetcherGeo::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
inline ::google::protobuf::uint32 DocumentData_FetcherGeo::region_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherGeo.region_id)
  return region_id_;
}
inline void DocumentData_FetcherGeo::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherGeo.region_id)
}

// -------------------------------------------------------------------

// DocumentData_FetcherImage

// required int32 width = 1;
inline bool DocumentData_FetcherImage::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_FetcherImage::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_FetcherImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_FetcherImage::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 DocumentData_FetcherImage::width() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherImage.width)
  return width_;
}
inline void DocumentData_FetcherImage::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherImage.width)
}

// required int32 height = 2;
inline bool DocumentData_FetcherImage::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_FetcherImage::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_FetcherImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_FetcherImage::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 DocumentData_FetcherImage::height() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherImage.height)
  return height_;
}
inline void DocumentData_FetcherImage::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherImage.height)
}

// required uint64 simhash = 3;
inline bool DocumentData_FetcherImage::has_simhash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_FetcherImage::set_has_simhash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_FetcherImage::clear_has_simhash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_FetcherImage::clear_simhash() {
  simhash_ = GOOGLE_ULONGLONG(0);
  clear_has_simhash();
}
inline ::google::protobuf::uint64 DocumentData_FetcherImage::simhash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.FetcherImage.simhash)
  return simhash_;
}
inline void DocumentData_FetcherImage::set_simhash(::google::protobuf::uint64 value) {
  set_has_simhash();
  simhash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.FetcherImage.simhash)
}

// -------------------------------------------------------------------

// DocumentData_DocState

// required bool banned = 1;
inline bool DocumentData_DocState::has_banned() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocState::set_has_banned() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocState::clear_has_banned() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocState::clear_banned() {
  banned_ = false;
  clear_has_banned();
}
inline bool DocumentData_DocState::banned() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocState.banned)
  return banned_;
}
inline void DocumentData_DocState::set_banned(bool value) {
  set_has_banned();
  banned_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocState.banned)
}

// required bool shadowed = 2;
inline bool DocumentData_DocState::has_shadowed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_DocState::set_has_shadowed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_DocState::clear_has_shadowed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_DocState::clear_shadowed() {
  shadowed_ = false;
  clear_has_shadowed();
}
inline bool DocumentData_DocState::shadowed() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocState.shadowed)
  return shadowed_;
}
inline void DocumentData_DocState::set_shadowed(bool value) {
  set_has_shadowed();
  shadowed_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocState.shadowed)
}

// required bool disabled_in_channel = 3;
inline bool DocumentData_DocState::has_disabled_in_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_DocState::set_has_disabled_in_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_DocState::clear_has_disabled_in_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_DocState::clear_disabled_in_channel() {
  disabled_in_channel_ = false;
  clear_has_disabled_in_channel();
}
inline bool DocumentData_DocState::disabled_in_channel() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocState.disabled_in_channel)
  return disabled_in_channel_;
}
inline void DocumentData_DocState::set_disabled_in_channel(bool value) {
  set_has_disabled_in_channel();
  disabled_in_channel_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocState.disabled_in_channel)
}

// -------------------------------------------------------------------

// DocumentData_TopicPeriodStats

// optional int64 all_likes = 1;
inline bool DocumentData_TopicPeriodStats::has_all_likes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_TopicPeriodStats::set_has_all_likes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_TopicPeriodStats::clear_has_all_likes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_TopicPeriodStats::clear_all_likes() {
  all_likes_ = GOOGLE_LONGLONG(0);
  clear_has_all_likes();
}
inline ::google::protobuf::int64 DocumentData_TopicPeriodStats::all_likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicPeriodStats.all_likes)
  return all_likes_;
}
inline void DocumentData_TopicPeriodStats::set_all_likes(::google::protobuf::int64 value) {
  set_has_all_likes();
  all_likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicPeriodStats.all_likes)
}

// optional int64 period_likes = 2;
inline bool DocumentData_TopicPeriodStats::has_period_likes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_TopicPeriodStats::set_has_period_likes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_TopicPeriodStats::clear_has_period_likes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_TopicPeriodStats::clear_period_likes() {
  period_likes_ = GOOGLE_LONGLONG(0);
  clear_has_period_likes();
}
inline ::google::protobuf::int64 DocumentData_TopicPeriodStats::period_likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicPeriodStats.period_likes)
  return period_likes_;
}
inline void DocumentData_TopicPeriodStats::set_period_likes(::google::protobuf::int64 value) {
  set_has_period_likes();
  period_likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicPeriodStats.period_likes)
}

// optional int64 period_clicks = 3;
inline bool DocumentData_TopicPeriodStats::has_period_clicks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_TopicPeriodStats::set_has_period_clicks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_TopicPeriodStats::clear_has_period_clicks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_TopicPeriodStats::clear_period_clicks() {
  period_clicks_ = GOOGLE_LONGLONG(0);
  clear_has_period_clicks();
}
inline ::google::protobuf::int64 DocumentData_TopicPeriodStats::period_clicks() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicPeriodStats.period_clicks)
  return period_clicks_;
}
inline void DocumentData_TopicPeriodStats::set_period_clicks(::google::protobuf::int64 value) {
  set_has_period_clicks();
  period_clicks_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicPeriodStats.period_clicks)
}

// optional int64 period_reshares = 4;
inline bool DocumentData_TopicPeriodStats::has_period_reshares() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentData_TopicPeriodStats::set_has_period_reshares() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentData_TopicPeriodStats::clear_has_period_reshares() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentData_TopicPeriodStats::clear_period_reshares() {
  period_reshares_ = GOOGLE_LONGLONG(0);
  clear_has_period_reshares();
}
inline ::google::protobuf::int64 DocumentData_TopicPeriodStats::period_reshares() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicPeriodStats.period_reshares)
  return period_reshares_;
}
inline void DocumentData_TopicPeriodStats::set_period_reshares(::google::protobuf::int64 value) {
  set_has_period_reshares();
  period_reshares_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicPeriodStats.period_reshares)
}

// optional int64 period_comments = 5;
inline bool DocumentData_TopicPeriodStats::has_period_comments() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentData_TopicPeriodStats::set_has_period_comments() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentData_TopicPeriodStats::clear_has_period_comments() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentData_TopicPeriodStats::clear_period_comments() {
  period_comments_ = GOOGLE_LONGLONG(0);
  clear_has_period_comments();
}
inline ::google::protobuf::int64 DocumentData_TopicPeriodStats::period_comments() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicPeriodStats.period_comments)
  return period_comments_;
}
inline void DocumentData_TopicPeriodStats::set_period_comments(::google::protobuf::int64 value) {
  set_has_period_comments();
  period_comments_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicPeriodStats.period_comments)
}

// -------------------------------------------------------------------

// DocumentData_AppFilterStats

// required uint32 version = 1;
inline bool DocumentData_AppFilterStats::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_AppFilterStats::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_AppFilterStats::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_AppFilterStats::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 DocumentData_AppFilterStats::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.version)
  return version_;
}
inline void DocumentData_AppFilterStats::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.version)
}

// required int32 shows = 2;
inline bool DocumentData_AppFilterStats::has_shows() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_AppFilterStats::set_has_shows() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_AppFilterStats::clear_has_shows() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_AppFilterStats::clear_shows() {
  shows_ = 0;
  clear_has_shows();
}
inline ::google::protobuf::int32 DocumentData_AppFilterStats::shows() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.shows)
  return shows_;
}
inline void DocumentData_AppFilterStats::set_shows(::google::protobuf::int32 value) {
  set_has_shows();
  shows_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.shows)
}

// required int32 clicks = 3;
inline bool DocumentData_AppFilterStats::has_clicks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_AppFilterStats::set_has_clicks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_AppFilterStats::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_AppFilterStats::clear_clicks() {
  clicks_ = 0;
  clear_has_clicks();
}
inline ::google::protobuf::int32 DocumentData_AppFilterStats::clicks() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.clicks)
  return clicks_;
}
inline void DocumentData_AppFilterStats::set_clicks(::google::protobuf::int32 value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.clicks)
}

// optional int32 likes = 4;
inline bool DocumentData_AppFilterStats::has_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentData_AppFilterStats::set_has_likes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentData_AppFilterStats::clear_has_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentData_AppFilterStats::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
inline ::google::protobuf::int32 DocumentData_AppFilterStats::likes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.likes)
  return likes_;
}
inline void DocumentData_AppFilterStats::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.likes)
}

// optional int32 shares = 5;
inline bool DocumentData_AppFilterStats::has_shares() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentData_AppFilterStats::set_has_shares() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentData_AppFilterStats::clear_has_shares() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentData_AppFilterStats::clear_shares() {
  shares_ = 0;
  clear_has_shares();
}
inline ::google::protobuf::int32 DocumentData_AppFilterStats::shares() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.shares)
  return shares_;
}
inline void DocumentData_AppFilterStats::set_shares(::google::protobuf::int32 value) {
  set_has_shares();
  shares_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.shares)
}

// optional int32 dislikes = 6;
inline bool DocumentData_AppFilterStats::has_dislikes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentData_AppFilterStats::set_has_dislikes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentData_AppFilterStats::clear_has_dislikes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentData_AppFilterStats::clear_dislikes() {
  dislikes_ = 0;
  clear_has_dislikes();
}
inline ::google::protobuf::int32 DocumentData_AppFilterStats::dislikes() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.AppFilterStats.dislikes)
  return dislikes_;
}
inline void DocumentData_AppFilterStats::set_dislikes(::google::protobuf::int32 value) {
  set_has_dislikes();
  dislikes_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.AppFilterStats.dislikes)
}

// -------------------------------------------------------------------

// DocumentData_DocumentEventStat_GeoEventStat

// required uint32 geo = 1;
inline bool DocumentData_DocumentEventStat_GeoEventStat::has_geo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocumentEventStat_GeoEventStat::set_has_geo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocumentEventStat_GeoEventStat::clear_has_geo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocumentEventStat_GeoEventStat::clear_geo() {
  geo_ = 0u;
  clear_has_geo();
}
inline ::google::protobuf::uint32 DocumentData_DocumentEventStat_GeoEventStat::geo() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat.geo)
  return geo_;
}
inline void DocumentData_DocumentEventStat_GeoEventStat::set_geo(::google::protobuf::uint32 value) {
  set_has_geo();
  geo_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat.geo)
}

// required uint32 events_count = 2;
inline bool DocumentData_DocumentEventStat_GeoEventStat::has_events_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_DocumentEventStat_GeoEventStat::set_has_events_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_DocumentEventStat_GeoEventStat::clear_has_events_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_DocumentEventStat_GeoEventStat::clear_events_count() {
  events_count_ = 0u;
  clear_has_events_count();
}
inline ::google::protobuf::uint32 DocumentData_DocumentEventStat_GeoEventStat::events_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat.events_count)
  return events_count_;
}
inline void DocumentData_DocumentEventStat_GeoEventStat::set_events_count(::google::protobuf::uint32 value) {
  set_has_events_count();
  events_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat.events_count)
}

// -------------------------------------------------------------------

// DocumentData_DocumentEventStat_SocDemEventStat

// required uint32 socdem_id = 1;
inline bool DocumentData_DocumentEventStat_SocDemEventStat::has_socdem_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocumentEventStat_SocDemEventStat::set_has_socdem_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocumentEventStat_SocDemEventStat::clear_has_socdem_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocumentEventStat_SocDemEventStat::clear_socdem_id() {
  socdem_id_ = 0u;
  clear_has_socdem_id();
}
inline ::google::protobuf::uint32 DocumentData_DocumentEventStat_SocDemEventStat::socdem_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat.socdem_id)
  return socdem_id_;
}
inline void DocumentData_DocumentEventStat_SocDemEventStat::set_socdem_id(::google::protobuf::uint32 value) {
  set_has_socdem_id();
  socdem_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat.socdem_id)
}

// required uint32 events_count = 2;
inline bool DocumentData_DocumentEventStat_SocDemEventStat::has_events_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_DocumentEventStat_SocDemEventStat::set_has_events_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_DocumentEventStat_SocDemEventStat::clear_has_events_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_DocumentEventStat_SocDemEventStat::clear_events_count() {
  events_count_ = 0u;
  clear_has_events_count();
}
inline ::google::protobuf::uint32 DocumentData_DocumentEventStat_SocDemEventStat::events_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat.events_count)
  return events_count_;
}
inline void DocumentData_DocumentEventStat_SocDemEventStat::set_events_count(::google::protobuf::uint32 value) {
  set_has_events_count();
  events_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat.events_count)
}

// -------------------------------------------------------------------

// DocumentData_DocumentEventStat

// required uint32 events_count = 1;
inline bool DocumentData_DocumentEventStat::has_events_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocumentEventStat::set_has_events_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocumentEventStat::clear_has_events_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocumentEventStat::clear_events_count() {
  events_count_ = 0u;
  clear_has_events_count();
}
inline ::google::protobuf::uint32 DocumentData_DocumentEventStat::events_count() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.events_count)
  return events_count_;
}
inline void DocumentData_DocumentEventStat::set_events_count(::google::protobuf::uint32 value) {
  set_has_events_count();
  events_count_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentEventStat.events_count)
}

// repeated .cosmo.pb.DocumentData.DocumentEventStat.GeoEventStat geo_stat = 2;
inline int DocumentData_DocumentEventStat::geo_stat_size() const {
  return geo_stat_.size();
}
inline void DocumentData_DocumentEventStat::clear_geo_stat() {
  geo_stat_.Clear();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat& DocumentData_DocumentEventStat::geo_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.geo_stat)
  return geo_stat_.Get(index);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat* DocumentData_DocumentEventStat::mutable_geo_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentEventStat.geo_stat)
  return geo_stat_.Mutable(index);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat* DocumentData_DocumentEventStat::add_geo_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentEventStat.geo_stat)
  return geo_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat >*
DocumentData_DocumentEventStat::mutable_geo_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentEventStat.geo_stat)
  return &geo_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_GeoEventStat >&
DocumentData_DocumentEventStat::geo_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentEventStat.geo_stat)
  return geo_stat_;
}

// repeated .cosmo.pb.DocumentData.DocumentEventStat.SocDemEventStat soc_dem_stat = 3;
inline int DocumentData_DocumentEventStat::soc_dem_stat_size() const {
  return soc_dem_stat_.size();
}
inline void DocumentData_DocumentEventStat::clear_soc_dem_stat() {
  soc_dem_stat_.Clear();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat& DocumentData_DocumentEventStat::soc_dem_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentEventStat.soc_dem_stat)
  return soc_dem_stat_.Get(index);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat* DocumentData_DocumentEventStat::mutable_soc_dem_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentEventStat.soc_dem_stat)
  return soc_dem_stat_.Mutable(index);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat* DocumentData_DocumentEventStat::add_soc_dem_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentEventStat.soc_dem_stat)
  return soc_dem_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat >*
DocumentData_DocumentEventStat::mutable_soc_dem_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentEventStat.soc_dem_stat)
  return &soc_dem_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentEventStat_SocDemEventStat >&
DocumentData_DocumentEventStat::soc_dem_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentEventStat.soc_dem_stat)
  return soc_dem_stat_;
}

// -------------------------------------------------------------------

// DocumentData_TopicEventStat

// required uint32 version = 1;
inline bool DocumentData_TopicEventStat::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentData_TopicEventStat::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentData_TopicEventStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentData_TopicEventStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 DocumentData_TopicEventStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicEventStat.version)
  return version_;
}
inline void DocumentData_TopicEventStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.TopicEventStat.version)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 2;
inline bool DocumentData_TopicEventStat::has_likes_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_TopicEventStat::set_has_likes_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_TopicEventStat::clear_has_likes_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_TopicEventStat::clear_likes_stat() {
  if (likes_stat_ != NULL) likes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_likes_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_TopicEventStat::likes_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = likes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicEventStat.likes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::mutable_likes_stat() {
  set_has_likes_stat();
  if (likes_stat_ == NULL) {
    _slow_mutable_likes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.TopicEventStat.likes_stat)
  return likes_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::release_likes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.TopicEventStat.likes_stat)
  clear_has_likes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_likes_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = likes_stat_;
    likes_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_TopicEventStat::set_allocated_likes_stat(::cosmo::pb::DocumentData_DocumentEventStat* likes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete likes_stat_;
  }
  if (likes_stat != NULL) {
    _slow_set_allocated_likes_stat(message_arena, &likes_stat);
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.TopicEventStat.likes_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 3;
inline bool DocumentData_TopicEventStat::has_clicks_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_TopicEventStat::set_has_clicks_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_TopicEventStat::clear_has_clicks_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_TopicEventStat::clear_clicks_stat() {
  if (clicks_stat_ != NULL) clicks_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_clicks_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_TopicEventStat::clicks_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = clicks_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicEventStat.clicks_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::mutable_clicks_stat() {
  set_has_clicks_stat();
  if (clicks_stat_ == NULL) {
    _slow_mutable_clicks_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.TopicEventStat.clicks_stat)
  return clicks_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::release_clicks_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.TopicEventStat.clicks_stat)
  clear_has_clicks_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = clicks_stat_;
    clicks_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_TopicEventStat::set_allocated_clicks_stat(::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_stat_;
  }
  if (clicks_stat != NULL) {
    _slow_set_allocated_clicks_stat(message_arena, &clicks_stat);
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.TopicEventStat.clicks_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 4;
inline bool DocumentData_TopicEventStat::has_reshares_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_TopicEventStat::set_has_reshares_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_TopicEventStat::clear_has_reshares_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_TopicEventStat::clear_reshares_stat() {
  if (reshares_stat_ != NULL) reshares_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_reshares_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_TopicEventStat::reshares_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = reshares_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicEventStat.reshares_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::mutable_reshares_stat() {
  set_has_reshares_stat();
  if (reshares_stat_ == NULL) {
    _slow_mutable_reshares_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.TopicEventStat.reshares_stat)
  return reshares_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::release_reshares_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.TopicEventStat.reshares_stat)
  clear_has_reshares_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_reshares_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = reshares_stat_;
    reshares_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_TopicEventStat::set_allocated_reshares_stat(::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reshares_stat_;
  }
  if (reshares_stat != NULL) {
    _slow_set_allocated_reshares_stat(message_arena, &reshares_stat);
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.TopicEventStat.reshares_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat comments_stat = 5;
inline bool DocumentData_TopicEventStat::has_comments_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentData_TopicEventStat::set_has_comments_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentData_TopicEventStat::clear_has_comments_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentData_TopicEventStat::clear_comments_stat() {
  if (comments_stat_ != NULL) comments_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_comments_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_TopicEventStat::comments_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = comments_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TopicEventStat.comments_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::mutable_comments_stat() {
  set_has_comments_stat();
  if (comments_stat_ == NULL) {
    _slow_mutable_comments_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.TopicEventStat.comments_stat)
  return comments_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_TopicEventStat::release_comments_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.TopicEventStat.comments_stat)
  clear_has_comments_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_comments_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = comments_stat_;
    comments_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_TopicEventStat::set_allocated_comments_stat(::cosmo::pb::DocumentData_DocumentEventStat* comments_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comments_stat_;
  }
  if (comments_stat != NULL) {
    _slow_set_allocated_comments_stat(message_arena, &comments_stat);
  }
  comments_stat_ = comments_stat;
  if (comments_stat) {
    set_has_comments_stat();
  } else {
    clear_has_comments_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.TopicEventStat.comments_stat)
}

// -------------------------------------------------------------------

// DocumentData_DocumentLocationStat_Stat

// optional .cosmo.pb.DocumentData.DocumentEventStat shows_stat = 1;
inline bool DocumentData_DocumentLocationStat_Stat::has_shows_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocumentLocationStat_Stat::set_has_shows_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_has_shows_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_shows_stat() {
  if (shows_stat_ != NULL) shows_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_shows_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::shows_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = shows_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.shows_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_shows_stat() {
  set_has_shows_stat();
  if (shows_stat_ == NULL) {
    _slow_mutable_shows_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.shows_stat)
  return shows_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_shows_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.shows_stat)
  clear_has_shows_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_shows_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = shows_stat_;
    shows_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_DocumentLocationStat_Stat::set_allocated_shows_stat(::cosmo::pb::DocumentData_DocumentEventStat* shows_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shows_stat_;
  }
  if (shows_stat != NULL) {
    _slow_set_allocated_shows_stat(message_arena, &shows_stat);
  }
  shows_stat_ = shows_stat;
  if (shows_stat) {
    set_has_shows_stat();
  } else {
    clear_has_shows_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.shows_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat clicks_stat = 2;
inline bool DocumentData_DocumentLocationStat_Stat::has_clicks_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_DocumentLocationStat_Stat::set_has_clicks_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_has_clicks_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_clicks_stat() {
  if (clicks_stat_ != NULL) clicks_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_clicks_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::clicks_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = clicks_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.clicks_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_clicks_stat() {
  set_has_clicks_stat();
  if (clicks_stat_ == NULL) {
    _slow_mutable_clicks_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.clicks_stat)
  return clicks_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_clicks_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.clicks_stat)
  clear_has_clicks_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_clicks_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = clicks_stat_;
    clicks_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_DocumentLocationStat_Stat::set_allocated_clicks_stat(::cosmo::pb::DocumentData_DocumentEventStat* clicks_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete clicks_stat_;
  }
  if (clicks_stat != NULL) {
    _slow_set_allocated_clicks_stat(message_arena, &clicks_stat);
  }
  clicks_stat_ = clicks_stat;
  if (clicks_stat) {
    set_has_clicks_stat();
  } else {
    clear_has_clicks_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.clicks_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat likes_stat = 3;
inline bool DocumentData_DocumentLocationStat_Stat::has_likes_stat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_DocumentLocationStat_Stat::set_has_likes_stat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_has_likes_stat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_likes_stat() {
  if (likes_stat_ != NULL) likes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_likes_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::likes_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = likes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.likes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_likes_stat() {
  set_has_likes_stat();
  if (likes_stat_ == NULL) {
    _slow_mutable_likes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.likes_stat)
  return likes_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_likes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.likes_stat)
  clear_has_likes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_likes_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = likes_stat_;
    likes_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_DocumentLocationStat_Stat::set_allocated_likes_stat(::cosmo::pb::DocumentData_DocumentEventStat* likes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete likes_stat_;
  }
  if (likes_stat != NULL) {
    _slow_set_allocated_likes_stat(message_arena, &likes_stat);
  }
  likes_stat_ = likes_stat;
  if (likes_stat) {
    set_has_likes_stat();
  } else {
    clear_has_likes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.likes_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat dislikes_stat = 4;
inline bool DocumentData_DocumentLocationStat_Stat::has_dislikes_stat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentData_DocumentLocationStat_Stat::set_has_dislikes_stat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_has_dislikes_stat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_dislikes_stat() {
  if (dislikes_stat_ != NULL) dislikes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_dislikes_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::dislikes_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = dislikes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.dislikes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_dislikes_stat() {
  set_has_dislikes_stat();
  if (dislikes_stat_ == NULL) {
    _slow_mutable_dislikes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.dislikes_stat)
  return dislikes_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_dislikes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.dislikes_stat)
  clear_has_dislikes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dislikes_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = dislikes_stat_;
    dislikes_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_DocumentLocationStat_Stat::set_allocated_dislikes_stat(::cosmo::pb::DocumentData_DocumentEventStat* dislikes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dislikes_stat_;
  }
  if (dislikes_stat != NULL) {
    _slow_set_allocated_dislikes_stat(message_arena, &dislikes_stat);
  }
  dislikes_stat_ = dislikes_stat;
  if (dislikes_stat) {
    set_has_dislikes_stat();
  } else {
    clear_has_dislikes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.dislikes_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat reshares_stat = 5;
inline bool DocumentData_DocumentLocationStat_Stat::has_reshares_stat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentData_DocumentLocationStat_Stat::set_has_reshares_stat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_has_reshares_stat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_reshares_stat() {
  if (reshares_stat_ != NULL) reshares_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_reshares_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::reshares_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = reshares_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.reshares_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_reshares_stat() {
  set_has_reshares_stat();
  if (reshares_stat_ == NULL) {
    _slow_mutable_reshares_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.reshares_stat)
  return reshares_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_reshares_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.reshares_stat)
  clear_has_reshares_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_reshares_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = reshares_stat_;
    reshares_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_DocumentLocationStat_Stat::set_allocated_reshares_stat(::cosmo::pb::DocumentData_DocumentEventStat* reshares_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reshares_stat_;
  }
  if (reshares_stat != NULL) {
    _slow_set_allocated_reshares_stat(message_arena, &reshares_stat);
  }
  reshares_stat_ = reshares_stat;
  if (reshares_stat) {
    set_has_reshares_stat();
  } else {
    clear_has_reshares_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.reshares_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat unlikes_stat = 6;
inline bool DocumentData_DocumentLocationStat_Stat::has_unlikes_stat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentData_DocumentLocationStat_Stat::set_has_unlikes_stat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_has_unlikes_stat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_unlikes_stat() {
  if (unlikes_stat_ != NULL) unlikes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_unlikes_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::unlikes_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = unlikes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.unlikes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_unlikes_stat() {
  set_has_unlikes_stat();
  if (unlikes_stat_ == NULL) {
    _slow_mutable_unlikes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.unlikes_stat)
  return unlikes_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_unlikes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.unlikes_stat)
  clear_has_unlikes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_unlikes_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = unlikes_stat_;
    unlikes_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_DocumentLocationStat_Stat::set_allocated_unlikes_stat(::cosmo::pb::DocumentData_DocumentEventStat* unlikes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unlikes_stat_;
  }
  if (unlikes_stat != NULL) {
    _slow_set_allocated_unlikes_stat(message_arena, &unlikes_stat);
  }
  unlikes_stat_ = unlikes_stat;
  if (unlikes_stat) {
    set_has_unlikes_stat();
  } else {
    clear_has_unlikes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.unlikes_stat)
}

// optional .cosmo.pb.DocumentData.DocumentEventStat undislikes_stat = 7;
inline bool DocumentData_DocumentLocationStat_Stat::has_undislikes_stat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocumentData_DocumentLocationStat_Stat::set_has_undislikes_stat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_has_undislikes_stat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocumentData_DocumentLocationStat_Stat::clear_undislikes_stat() {
  if (undislikes_stat_ != NULL) undislikes_stat_->::cosmo::pb::DocumentData_DocumentEventStat::Clear();
  clear_has_undislikes_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentEventStat& DocumentData_DocumentLocationStat_Stat::undislikes_stat() const {
  const ::cosmo::pb::DocumentData_DocumentEventStat* p = undislikes_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.Stat.undislikes_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentEventStat*>(
      &::cosmo::pb::_DocumentData_DocumentEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::mutable_undislikes_stat() {
  set_has_undislikes_stat();
  if (undislikes_stat_ == NULL) {
    _slow_mutable_undislikes_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.Stat.undislikes_stat)
  return undislikes_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentEventStat* DocumentData_DocumentLocationStat_Stat::release_undislikes_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.Stat.undislikes_stat)
  clear_has_undislikes_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_undislikes_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentEventStat* temp = undislikes_stat_;
    undislikes_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_DocumentLocationStat_Stat::set_allocated_undislikes_stat(::cosmo::pb::DocumentData_DocumentEventStat* undislikes_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete undislikes_stat_;
  }
  if (undislikes_stat != NULL) {
    _slow_set_allocated_undislikes_stat(message_arena, &undislikes_stat);
  }
  undislikes_stat_ = undislikes_stat;
  if (undislikes_stat) {
    set_has_undislikes_stat();
  } else {
    clear_has_undislikes_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.Stat.undislikes_stat)
}

// -------------------------------------------------------------------

// DocumentData_DocumentLocationStat_LocationStat

// required string location = 1;
inline bool DocumentData_DocumentLocationStat_LocationStat::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocumentLocationStat_LocationStat::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocumentLocationStat_LocationStat::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocumentLocationStat_LocationStat::clear_location() {
  location_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_location();
}
inline const ::std::string& DocumentData_DocumentLocationStat_LocationStat::location() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
  return location_.Get();
}
inline void DocumentData_DocumentLocationStat_LocationStat::set_location(const ::std::string& value) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}
#if LANG_CXX11
inline void DocumentData_DocumentLocationStat_LocationStat::set_location(::std::string&& value) {
  set_has_location();
  location_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}
#endif
inline void DocumentData_DocumentLocationStat_LocationStat::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}
inline void DocumentData_DocumentLocationStat_LocationStat::set_location(const char* value,
    size_t size) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}
inline ::std::string* DocumentData_DocumentLocationStat_LocationStat::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
  return location_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DocumentData_DocumentLocationStat_LocationStat::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
  clear_has_location();
  return location_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DocumentData_DocumentLocationStat_LocationStat::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_location();
  return location_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DocumentData_DocumentLocationStat_LocationStat::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}
inline void DocumentData_DocumentLocationStat_LocationStat::unsafe_arena_set_allocated_location(
    ::std::string* location) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      location, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.location)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat stat = 2;
inline bool DocumentData_DocumentLocationStat_LocationStat::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_DocumentLocationStat_LocationStat::set_has_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_DocumentLocationStat_LocationStat::clear_has_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_DocumentLocationStat_LocationStat::clear_stat() {
  if (stat_ != NULL) stat_->::cosmo::pb::DocumentData_DocumentLocationStat_Stat::Clear();
  clear_has_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat& DocumentData_DocumentLocationStat_LocationStat::stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* p = stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_Stat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat_LocationStat::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    _slow_mutable_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.stat)
  return stat_;
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat_LocationStat::release_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.stat)
  clear_has_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* temp = stat_;
    stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_DocumentLocationStat_LocationStat::set_allocated_stat(::cosmo::pb::DocumentData_DocumentLocationStat_Stat* stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stat_;
  }
  if (stat != NULL) {
    _slow_set_allocated_stat(message_arena, &stat);
  }
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.stat)
}

// optional uint64 last_event_ts = 3;
inline bool DocumentData_DocumentLocationStat_LocationStat::has_last_event_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_DocumentLocationStat_LocationStat::set_has_last_event_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_DocumentLocationStat_LocationStat::clear_has_last_event_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_DocumentLocationStat_LocationStat::clear_last_event_ts() {
  last_event_ts_ = GOOGLE_ULONGLONG(0);
  clear_has_last_event_ts();
}
inline ::google::protobuf::uint64 DocumentData_DocumentLocationStat_LocationStat::last_event_ts() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.last_event_ts)
  return last_event_ts_;
}
inline void DocumentData_DocumentLocationStat_LocationStat::set_last_event_ts(::google::protobuf::uint64 value) {
  set_has_last_event_ts();
  last_event_ts_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentLocationStat.LocationStat.last_event_ts)
}

// -------------------------------------------------------------------

// DocumentData_DocumentLocationStat

// required uint32 version = 1;
inline bool DocumentData_DocumentLocationStat::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_DocumentLocationStat::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_DocumentLocationStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_DocumentLocationStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 DocumentData_DocumentLocationStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.version)
  return version_;
}
inline void DocumentData_DocumentLocationStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentLocationStat.version)
}

// repeated .cosmo.pb.DocumentData.DocumentLocationStat.LocationStat stat_by_location = 2;
inline int DocumentData_DocumentLocationStat::stat_by_location_size() const {
  return stat_by_location_.size();
}
inline void DocumentData_DocumentLocationStat::clear_stat_by_location() {
  stat_by_location_.Clear();
}
inline const ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat& DocumentData_DocumentLocationStat::stat_by_location(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.stat_by_location)
  return stat_by_location_.Get(index);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat* DocumentData_DocumentLocationStat::mutable_stat_by_location(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.stat_by_location)
  return stat_by_location_.Mutable(index);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat* DocumentData_DocumentLocationStat::add_stat_by_location() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentLocationStat.stat_by_location)
  return stat_by_location_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat >*
DocumentData_DocumentLocationStat::mutable_stat_by_location() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentLocationStat.stat_by_location)
  return &stat_by_location_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentLocationStat_LocationStat >&
DocumentData_DocumentLocationStat::stat_by_location() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentLocationStat.stat_by_location)
  return stat_by_location_;
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat.Stat summary_stat = 3;
inline bool DocumentData_DocumentLocationStat::has_summary_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocumentLocationStat::set_has_summary_stat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocumentLocationStat::clear_has_summary_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocumentLocationStat::clear_summary_stat() {
  if (summary_stat_ != NULL) summary_stat_->::cosmo::pb::DocumentData_DocumentLocationStat_Stat::Clear();
  clear_has_summary_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat& DocumentData_DocumentLocationStat::summary_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* p = summary_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentLocationStat.summary_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat_Stat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_Stat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat::mutable_summary_stat() {
  set_has_summary_stat();
  if (summary_stat_ == NULL) {
    _slow_mutable_summary_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentLocationStat.summary_stat)
  return summary_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* DocumentData_DocumentLocationStat::release_summary_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentLocationStat.summary_stat)
  clear_has_summary_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_summary_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat_Stat* temp = summary_stat_;
    summary_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData_DocumentLocationStat::set_allocated_summary_stat(::cosmo::pb::DocumentData_DocumentLocationStat_Stat* summary_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete summary_stat_;
  }
  if (summary_stat != NULL) {
    _slow_set_allocated_summary_stat(message_arena, &summary_stat);
  }
  summary_stat_ = summary_stat;
  if (summary_stat) {
    set_has_summary_stat();
  } else {
    clear_has_summary_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentLocationStat.summary_stat)
}

// -------------------------------------------------------------------

// DocumentData_DocumentMutualStat_Stat

// required int64 doc_id = 1;
inline bool DocumentData_DocumentMutualStat_Stat::has_doc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocumentMutualStat_Stat::set_has_doc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocumentMutualStat_Stat::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocumentMutualStat_Stat::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 DocumentData_DocumentMutualStat_Stat::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.doc_id)
  return doc_id_;
}
inline void DocumentData_DocumentMutualStat_Stat::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.doc_id)
}

// optional float clicks = 2;
inline bool DocumentData_DocumentMutualStat_Stat::has_clicks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_DocumentMutualStat_Stat::set_has_clicks() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_DocumentMutualStat_Stat::clear_has_clicks() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_DocumentMutualStat_Stat::clear_clicks() {
  clicks_ = 0;
  clear_has_clicks();
}
inline float DocumentData_DocumentMutualStat_Stat::clicks() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.clicks)
  return clicks_;
}
inline void DocumentData_DocumentMutualStat_Stat::set_clicks(float value) {
  set_has_clicks();
  clicks_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.clicks)
}

// optional float views = 3;
inline bool DocumentData_DocumentMutualStat_Stat::has_views() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_DocumentMutualStat_Stat::set_has_views() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_DocumentMutualStat_Stat::clear_has_views() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_DocumentMutualStat_Stat::clear_views() {
  views_ = 0;
  clear_has_views();
}
inline float DocumentData_DocumentMutualStat_Stat::views() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.views)
  return views_;
}
inline void DocumentData_DocumentMutualStat_Stat::set_views(float value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.views)
}

// optional float visits = 4;
inline bool DocumentData_DocumentMutualStat_Stat::has_visits() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentData_DocumentMutualStat_Stat::set_has_visits() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentData_DocumentMutualStat_Stat::clear_has_visits() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentData_DocumentMutualStat_Stat::clear_visits() {
  visits_ = 0;
  clear_has_visits();
}
inline float DocumentData_DocumentMutualStat_Stat::visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.visits)
  return visits_;
}
inline void DocumentData_DocumentMutualStat_Stat::set_visits(float value) {
  set_has_visits();
  visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.visits)
}

// optional float total_visits = 5;
inline bool DocumentData_DocumentMutualStat_Stat::has_total_visits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentData_DocumentMutualStat_Stat::set_has_total_visits() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentData_DocumentMutualStat_Stat::clear_has_total_visits() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentData_DocumentMutualStat_Stat::clear_total_visits() {
  total_visits_ = 0;
  clear_has_total_visits();
}
inline float DocumentData_DocumentMutualStat_Stat::total_visits() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.total_visits)
  return total_visits_;
}
inline void DocumentData_DocumentMutualStat_Stat::set_total_visits(float value) {
  set_has_total_visits();
  total_visits_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.total_visits)
}

// repeated int64 source_id = 6;
inline int DocumentData_DocumentMutualStat_Stat::source_id_size() const {
  return source_id_.size();
}
inline void DocumentData_DocumentMutualStat_Stat::clear_source_id() {
  source_id_.Clear();
}
inline ::google::protobuf::int64 DocumentData_DocumentMutualStat_Stat::source_id(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.Stat.source_id)
  return source_id_.Get(index);
}
inline void DocumentData_DocumentMutualStat_Stat::set_source_id(int index, ::google::protobuf::int64 value) {
  source_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.Stat.source_id)
}
inline void DocumentData_DocumentMutualStat_Stat::add_source_id(::google::protobuf::int64 value) {
  source_id_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentMutualStat.Stat.source_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DocumentData_DocumentMutualStat_Stat::source_id() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentMutualStat.Stat.source_id)
  return source_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DocumentData_DocumentMutualStat_Stat::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentMutualStat.Stat.source_id)
  return &source_id_;
}

// -------------------------------------------------------------------

// DocumentData_DocumentMutualStat_LocationStat

// required string location = 1;
inline bool DocumentData_DocumentMutualStat_LocationStat::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocumentMutualStat_LocationStat::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocumentMutualStat_LocationStat::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocumentMutualStat_LocationStat::clear_location() {
  location_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_location();
}
inline const ::std::string& DocumentData_DocumentMutualStat_LocationStat::location() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
  return location_.Get();
}
inline void DocumentData_DocumentMutualStat_LocationStat::set_location(const ::std::string& value) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}
#if LANG_CXX11
inline void DocumentData_DocumentMutualStat_LocationStat::set_location(::std::string&& value) {
  set_has_location();
  location_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}
#endif
inline void DocumentData_DocumentMutualStat_LocationStat::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}
inline void DocumentData_DocumentMutualStat_LocationStat::set_location(const char* value,
    size_t size) {
  set_has_location();
  location_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}
inline ::std::string* DocumentData_DocumentMutualStat_LocationStat::mutable_location() {
  set_has_location();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
  return location_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DocumentData_DocumentMutualStat_LocationStat::release_location() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
  clear_has_location();
  return location_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DocumentData_DocumentMutualStat_LocationStat::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_location();
  return location_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DocumentData_DocumentMutualStat_LocationStat::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}
inline void DocumentData_DocumentMutualStat_LocationStat::unsafe_arena_set_allocated_location(
    ::std::string* location) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (location != NULL) {
    set_has_location();
  } else {
    clear_has_location();
  }
  location_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      location, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.location)
}

// repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
inline int DocumentData_DocumentMutualStat_LocationStat::doc_mutual_stat_size() const {
  return doc_mutual_stat_.size();
}
inline void DocumentData_DocumentMutualStat_LocationStat::clear_doc_mutual_stat() {
  doc_mutual_stat_.Clear();
}
inline const ::cosmo::pb::DocumentData_DocumentMutualStat_Stat& DocumentData_DocumentMutualStat_LocationStat::doc_mutual_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.doc_mutual_stat)
  return doc_mutual_stat_.Get(index);
}
inline ::cosmo::pb::DocumentData_DocumentMutualStat_Stat* DocumentData_DocumentMutualStat_LocationStat::mutable_doc_mutual_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.doc_mutual_stat)
  return doc_mutual_stat_.Mutable(index);
}
inline ::cosmo::pb::DocumentData_DocumentMutualStat_Stat* DocumentData_DocumentMutualStat_LocationStat::add_doc_mutual_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.doc_mutual_stat)
  return doc_mutual_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >*
DocumentData_DocumentMutualStat_LocationStat::mutable_doc_mutual_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.doc_mutual_stat)
  return &doc_mutual_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >&
DocumentData_DocumentMutualStat_LocationStat::doc_mutual_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentMutualStat.LocationStat.doc_mutual_stat)
  return doc_mutual_stat_;
}

// -------------------------------------------------------------------

// DocumentData_DocumentMutualStat

// required uint32 version = 1;
inline bool DocumentData_DocumentMutualStat::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocumentMutualStat::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocumentMutualStat::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocumentMutualStat::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 DocumentData_DocumentMutualStat::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.version)
  return version_;
}
inline void DocumentData_DocumentMutualStat::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentMutualStat.version)
}

// repeated .cosmo.pb.DocumentData.DocumentMutualStat.Stat doc_mutual_stat = 2;
inline int DocumentData_DocumentMutualStat::doc_mutual_stat_size() const {
  return doc_mutual_stat_.size();
}
inline void DocumentData_DocumentMutualStat::clear_doc_mutual_stat() {
  doc_mutual_stat_.Clear();
}
inline const ::cosmo::pb::DocumentData_DocumentMutualStat_Stat& DocumentData_DocumentMutualStat::doc_mutual_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.doc_mutual_stat)
  return doc_mutual_stat_.Get(index);
}
inline ::cosmo::pb::DocumentData_DocumentMutualStat_Stat* DocumentData_DocumentMutualStat::mutable_doc_mutual_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentMutualStat.doc_mutual_stat)
  return doc_mutual_stat_.Mutable(index);
}
inline ::cosmo::pb::DocumentData_DocumentMutualStat_Stat* DocumentData_DocumentMutualStat::add_doc_mutual_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentMutualStat.doc_mutual_stat)
  return doc_mutual_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >*
DocumentData_DocumentMutualStat::mutable_doc_mutual_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentMutualStat.doc_mutual_stat)
  return &doc_mutual_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_Stat >&
DocumentData_DocumentMutualStat::doc_mutual_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentMutualStat.doc_mutual_stat)
  return doc_mutual_stat_;
}

// repeated .cosmo.pb.DocumentData.DocumentMutualStat.LocationStat loc_doc_mutual_stat = 3;
inline int DocumentData_DocumentMutualStat::loc_doc_mutual_stat_size() const {
  return loc_doc_mutual_stat_.size();
}
inline void DocumentData_DocumentMutualStat::clear_loc_doc_mutual_stat() {
  loc_doc_mutual_stat_.Clear();
}
inline const ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat& DocumentData_DocumentMutualStat::loc_doc_mutual_stat(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentMutualStat.loc_doc_mutual_stat)
  return loc_doc_mutual_stat_.Get(index);
}
inline ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat* DocumentData_DocumentMutualStat::mutable_loc_doc_mutual_stat(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.DocumentMutualStat.loc_doc_mutual_stat)
  return loc_doc_mutual_stat_.Mutable(index);
}
inline ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat* DocumentData_DocumentMutualStat::add_loc_doc_mutual_stat() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentMutualStat.loc_doc_mutual_stat)
  return loc_doc_mutual_stat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat >*
DocumentData_DocumentMutualStat::mutable_loc_doc_mutual_stat() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentMutualStat.loc_doc_mutual_stat)
  return &loc_doc_mutual_stat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_DocumentMutualStat_LocationStat >&
DocumentData_DocumentMutualStat::loc_doc_mutual_stat() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentMutualStat.loc_doc_mutual_stat)
  return loc_doc_mutual_stat_;
}

// -------------------------------------------------------------------

// DocumentData_ContentVector

// required string label = 1;
inline bool DocumentData_ContentVector::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_ContentVector::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_ContentVector::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_ContentVector::clear_label() {
  label_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_has_label();
}
inline const ::std::string& DocumentData_ContentVector::label() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentVector.label)
  return label_.Get();
}
inline void DocumentData_ContentVector::set_label(const ::std::string& value) {
  set_has_label();
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentVector.label)
}
#if LANG_CXX11
inline void DocumentData_ContentVector::set_label(::std::string&& value) {
  set_has_label();
  label_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.DocumentData.ContentVector.label)
}
#endif
inline void DocumentData_ContentVector::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cosmo.pb.DocumentData.ContentVector.label)
}
inline void DocumentData_ContentVector::set_label(const char* value,
    size_t size) {
  set_has_label();
  label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.DocumentData.ContentVector.label)
}
inline ::std::string* DocumentData_ContentVector::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.ContentVector.label)
  return label_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DocumentData_ContentVector::release_label() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.ContentVector.label)
  clear_has_label();
  return label_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DocumentData_ContentVector::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmo.pb.DocumentData.ContentVector.label)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  clear_has_label();
  return label_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DocumentData_ContentVector::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.ContentVector.label)
}
inline void DocumentData_ContentVector::unsafe_arena_set_allocated_label(
    ::std::string* label) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      label, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmo.pb.DocumentData.ContentVector.label)
}

// repeated float vector = 2;
inline int DocumentData_ContentVector::vector_size() const {
  return vector_.size();
}
inline void DocumentData_ContentVector::clear_vector() {
  vector_.Clear();
}
inline float DocumentData_ContentVector::vector(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentVector.vector)
  return vector_.Get(index);
}
inline void DocumentData_ContentVector::set_vector(int index, float value) {
  vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentVector.vector)
}
inline void DocumentData_ContentVector::add_vector(float value) {
  vector_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.ContentVector.vector)
}
inline const ::google::protobuf::RepeatedField< float >&
DocumentData_ContentVector::vector() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.ContentVector.vector)
  return vector_;
}
inline ::google::protobuf::RepeatedField< float >*
DocumentData_ContentVector::mutable_vector() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.ContentVector.vector)
  return &vector_;
}

// -------------------------------------------------------------------

// DocumentData_TitleContentFea

// repeated .cosmo.pb.DocumentData.ContentVector content_vectors = 1;
inline int DocumentData_TitleContentFea::content_vectors_size() const {
  return content_vectors_.size();
}
inline void DocumentData_TitleContentFea::clear_content_vectors() {
  content_vectors_.Clear();
}
inline const ::cosmo::pb::DocumentData_ContentVector& DocumentData_TitleContentFea::content_vectors(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.TitleContentFea.content_vectors)
  return content_vectors_.Get(index);
}
inline ::cosmo::pb::DocumentData_ContentVector* DocumentData_TitleContentFea::mutable_content_vectors(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.TitleContentFea.content_vectors)
  return content_vectors_.Mutable(index);
}
inline ::cosmo::pb::DocumentData_ContentVector* DocumentData_TitleContentFea::add_content_vectors() {
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.TitleContentFea.content_vectors)
  return content_vectors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_ContentVector >*
DocumentData_TitleContentFea::mutable_content_vectors() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.TitleContentFea.content_vectors)
  return &content_vectors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::DocumentData_ContentVector >&
DocumentData_TitleContentFea::content_vectors() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.TitleContentFea.content_vectors)
  return content_vectors_;
}

// -------------------------------------------------------------------

// DocumentData_ContentPornFea

// optional float weight = 1;
inline bool DocumentData_ContentPornFea::has_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_ContentPornFea::set_has_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_ContentPornFea::clear_has_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_ContentPornFea::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float DocumentData_ContentPornFea::weight() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentPornFea.weight)
  return weight_;
}
inline void DocumentData_ContentPornFea::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentPornFea.weight)
}

// optional bool bad_content = 2;
inline bool DocumentData_ContentPornFea::has_bad_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_ContentPornFea::set_has_bad_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_ContentPornFea::clear_has_bad_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_ContentPornFea::clear_bad_content() {
  bad_content_ = false;
  clear_has_bad_content();
}
inline bool DocumentData_ContentPornFea::bad_content() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentPornFea.bad_content)
  return bad_content_;
}
inline void DocumentData_ContentPornFea::set_bad_content(bool value) {
  set_has_bad_content();
  bad_content_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentPornFea.bad_content)
}

// -------------------------------------------------------------------

// DocumentData_ImagePornFea

// optional float weight = 1;
inline bool DocumentData_ImagePornFea::has_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_ImagePornFea::set_has_weight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_ImagePornFea::clear_has_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_ImagePornFea::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float DocumentData_ImagePornFea::weight() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ImagePornFea.weight)
  return weight_;
}
inline void DocumentData_ImagePornFea::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ImagePornFea.weight)
}

// -------------------------------------------------------------------

// DocumentData_ContentThemes

// repeated float themes_vector = 1;
inline int DocumentData_ContentThemes::themes_vector_size() const {
  return themes_vector_.size();
}
inline void DocumentData_ContentThemes::clear_themes_vector() {
  themes_vector_.Clear();
}
inline float DocumentData_ContentThemes::themes_vector(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentThemes.themes_vector)
  return themes_vector_.Get(index);
}
inline void DocumentData_ContentThemes::set_themes_vector(int index, float value) {
  themes_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentThemes.themes_vector)
}
inline void DocumentData_ContentThemes::add_themes_vector(float value) {
  themes_vector_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.ContentThemes.themes_vector)
}
inline const ::google::protobuf::RepeatedField< float >&
DocumentData_ContentThemes::themes_vector() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.ContentThemes.themes_vector)
  return themes_vector_;
}
inline ::google::protobuf::RepeatedField< float >*
DocumentData_ContentThemes::mutable_themes_vector() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.ContentThemes.themes_vector)
  return &themes_vector_;
}

// optional bool bad_content = 2;
inline bool DocumentData_ContentThemes::has_bad_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_ContentThemes::set_has_bad_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_ContentThemes::clear_has_bad_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_ContentThemes::clear_bad_content() {
  bad_content_ = false;
  clear_has_bad_content();
}
inline bool DocumentData_ContentThemes::bad_content() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ContentThemes.bad_content)
  return bad_content_;
}
inline void DocumentData_ContentThemes::set_bad_content(bool value) {
  set_has_bad_content();
  bad_content_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.ContentThemes.bad_content)
}

// -------------------------------------------------------------------

// DocumentData_StoryClusterId

// required uint32 version = 1;
inline bool DocumentData_StoryClusterId::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_StoryClusterId::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_StoryClusterId::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_StoryClusterId::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 DocumentData_StoryClusterId::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.StoryClusterId.version)
  return version_;
}
inline void DocumentData_StoryClusterId::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.StoryClusterId.version)
}

// optional uint32 cluster_id = 2;
inline bool DocumentData_StoryClusterId::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_StoryClusterId::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_StoryClusterId::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_StoryClusterId::clear_cluster_id() {
  cluster_id_ = 0u;
  clear_has_cluster_id();
}
inline ::google::protobuf::uint32 DocumentData_StoryClusterId::cluster_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.StoryClusterId.cluster_id)
  return cluster_id_;
}
inline void DocumentData_StoryClusterId::set_cluster_id(::google::protobuf::uint32 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.StoryClusterId.cluster_id)
}

// -------------------------------------------------------------------

// DocumentData_NewsTagsData

// repeated int32 tag_ids = 1;
inline int DocumentData_NewsTagsData::tag_ids_size() const {
  return tag_ids_.size();
}
inline void DocumentData_NewsTagsData::clear_tag_ids() {
  tag_ids_.Clear();
}
inline ::google::protobuf::int32 DocumentData_NewsTagsData::tag_ids(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsTagsData.tag_ids)
  return tag_ids_.Get(index);
}
inline void DocumentData_NewsTagsData::set_tag_ids(int index, ::google::protobuf::int32 value) {
  tag_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsTagsData.tag_ids)
}
inline void DocumentData_NewsTagsData::add_tag_ids(::google::protobuf::int32 value) {
  tag_ids_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.NewsTagsData.tag_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocumentData_NewsTagsData::tag_ids() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.NewsTagsData.tag_ids)
  return tag_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocumentData_NewsTagsData::mutable_tag_ids() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.NewsTagsData.tag_ids)
  return &tag_ids_;
}

// -------------------------------------------------------------------

// DocumentData_NewsStoryData

// required int32 story_id = 1;
inline bool DocumentData_NewsStoryData::has_story_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_NewsStoryData::set_has_story_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_NewsStoryData::clear_has_story_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_NewsStoryData::clear_story_id() {
  story_id_ = 0;
  clear_has_story_id();
}
inline ::google::protobuf::int32 DocumentData_NewsStoryData::story_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NewsStoryData.story_id)
  return story_id_;
}
inline void DocumentData_NewsStoryData::set_story_id(::google::protobuf::int32 value) {
  set_has_story_id();
  story_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NewsStoryData.story_id)
}

// -------------------------------------------------------------------

// DocumentData_NativeTargetIsActive

// required uint32 version = 1;
inline bool DocumentData_NativeTargetIsActive::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_NativeTargetIsActive::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_NativeTargetIsActive::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_NativeTargetIsActive::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 DocumentData_NativeTargetIsActive::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NativeTargetIsActive.version)
  return version_;
}
inline void DocumentData_NativeTargetIsActive::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NativeTargetIsActive.version)
}

// required bool is_active = 2;
inline bool DocumentData_NativeTargetIsActive::has_is_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_NativeTargetIsActive::set_has_is_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_NativeTargetIsActive::clear_has_is_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_NativeTargetIsActive::clear_is_active() {
  is_active_ = false;
  clear_has_is_active();
}
inline bool DocumentData_NativeTargetIsActive::is_active() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.NativeTargetIsActive.is_active)
  return is_active_;
}
inline void DocumentData_NativeTargetIsActive::set_is_active(bool value) {
  set_has_is_active();
  is_active_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.NativeTargetIsActive.is_active)
}

// -------------------------------------------------------------------

// DocumentData_DocumentKeywordsInfo

// required uint32 version = 1;
inline bool DocumentData_DocumentKeywordsInfo::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_DocumentKeywordsInfo::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_DocumentKeywordsInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_DocumentKeywordsInfo::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 DocumentData_DocumentKeywordsInfo::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentKeywordsInfo.version)
  return version_;
}
inline void DocumentData_DocumentKeywordsInfo::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentKeywordsInfo.version)
}

// repeated int64 keyword_hash = 2;
inline int DocumentData_DocumentKeywordsInfo::keyword_hash_size() const {
  return keyword_hash_.size();
}
inline void DocumentData_DocumentKeywordsInfo::clear_keyword_hash() {
  keyword_hash_.Clear();
}
inline ::google::protobuf::int64 DocumentData_DocumentKeywordsInfo::keyword_hash(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_hash)
  return keyword_hash_.Get(index);
}
inline void DocumentData_DocumentKeywordsInfo::set_keyword_hash(int index, ::google::protobuf::int64 value) {
  keyword_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_hash)
}
inline void DocumentData_DocumentKeywordsInfo::add_keyword_hash(::google::protobuf::int64 value) {
  keyword_hash_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_hash)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DocumentData_DocumentKeywordsInfo::keyword_hash() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_hash)
  return keyword_hash_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DocumentData_DocumentKeywordsInfo::mutable_keyword_hash() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_hash)
  return &keyword_hash_;
}

// repeated .cosmo.pb.DocumentData.DocumentKeywordsInfo.KeywordType keyword_type = 3;
inline int DocumentData_DocumentKeywordsInfo::keyword_type_size() const {
  return keyword_type_.size();
}
inline void DocumentData_DocumentKeywordsInfo::clear_keyword_type() {
  keyword_type_.Clear();
}
inline ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType DocumentData_DocumentKeywordsInfo::keyword_type(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_type)
  return static_cast< ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType >(keyword_type_.Get(index));
}
inline void DocumentData_DocumentKeywordsInfo::set_keyword_type(int index, ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType value) {
  assert(::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType_IsValid(value));
  keyword_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_type)
}
inline void DocumentData_DocumentKeywordsInfo::add_keyword_type(::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType value) {
  assert(::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType_IsValid(value));
  keyword_type_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_type)
}
inline const ::google::protobuf::RepeatedField<int>&
DocumentData_DocumentKeywordsInfo::keyword_type() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_type)
  return keyword_type_;
}
inline ::google::protobuf::RepeatedField<int>*
DocumentData_DocumentKeywordsInfo::mutable_keyword_type() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.DocumentKeywordsInfo.keyword_type)
  return &keyword_type_;
}

// optional uint32 cluster_id = 4;
inline bool DocumentData_DocumentKeywordsInfo::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_DocumentKeywordsInfo::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_DocumentKeywordsInfo::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_DocumentKeywordsInfo::clear_cluster_id() {
  cluster_id_ = 0u;
  clear_has_cluster_id();
}
inline ::google::protobuf::uint32 DocumentData_DocumentKeywordsInfo::cluster_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.DocumentKeywordsInfo.cluster_id)
  return cluster_id_;
}
inline void DocumentData_DocumentKeywordsInfo::set_cluster_id(::google::protobuf::uint32 value) {
  set_has_cluster_id();
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.DocumentKeywordsInfo.cluster_id)
}

// -------------------------------------------------------------------

// DocumentData_RisksFields

// optional float ero_score = 1;
inline bool DocumentData_RisksFields::has_ero_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData_RisksFields::set_has_ero_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData_RisksFields::clear_has_ero_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData_RisksFields::clear_ero_score() {
  ero_score_ = 0;
  clear_has_ero_score();
}
inline float DocumentData_RisksFields::ero_score() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.RisksFields.ero_score)
  return ero_score_;
}
inline void DocumentData_RisksFields::set_ero_score(float value) {
  set_has_ero_score();
  ero_score_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.RisksFields.ero_score)
}

// optional float porno_score = 2;
inline bool DocumentData_RisksFields::has_porno_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData_RisksFields::set_has_porno_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData_RisksFields::clear_has_porno_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData_RisksFields::clear_porno_score() {
  porno_score_ = 0;
  clear_has_porno_score();
}
inline float DocumentData_RisksFields::porno_score() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.RisksFields.porno_score)
  return porno_score_;
}
inline void DocumentData_RisksFields::set_porno_score(float value) {
  set_has_porno_score();
  porno_score_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.RisksFields.porno_score)
}

// optional float safe_content = 3;
inline bool DocumentData_RisksFields::has_safe_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData_RisksFields::set_has_safe_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData_RisksFields::clear_has_safe_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData_RisksFields::clear_safe_content() {
  safe_content_ = 0;
  clear_has_safe_content();
}
inline float DocumentData_RisksFields::safe_content() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.RisksFields.safe_content)
  return safe_content_;
}
inline void DocumentData_RisksFields::set_safe_content(float value) {
  set_has_safe_content();
  safe_content_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.RisksFields.safe_content)
}

// -------------------------------------------------------------------

// DocumentData

// optional int64 source_id = 1;
inline bool DocumentData::has_source_id() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void DocumentData::set_has_source_id() {
  _has_bits_[1] |= 0x00008000u;
}
inline void DocumentData::clear_has_source_id() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void DocumentData::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 DocumentData::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.source_id)
  return source_id_;
}
inline void DocumentData::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.source_id)
}

// required int64 doc_id = 2;
inline bool DocumentData::has_doc_id() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void DocumentData::set_has_doc_id() {
  _has_bits_[1] |= 0x00010000u;
}
inline void DocumentData::clear_has_doc_id() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void DocumentData::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 DocumentData::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.doc_id)
  return doc_id_;
}
inline void DocumentData::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.doc_id)
}

// optional .cosmo.pb.DocumentData.OkInfo ok_info = 7;
inline bool DocumentData::has_ok_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentData::set_has_ok_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentData::clear_has_ok_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentData::clear_ok_info() {
  if (ok_info_ != NULL) ok_info_->::cosmo::pb::DocumentData_OkInfo::Clear();
  clear_has_ok_info();
}
inline const ::cosmo::pb::DocumentData_OkInfo& DocumentData::ok_info() const {
  const ::cosmo::pb::DocumentData_OkInfo* p = ok_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ok_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_OkInfo*>(
      &::cosmo::pb::_DocumentData_OkInfo_default_instance_);
}
inline ::cosmo::pb::DocumentData_OkInfo* DocumentData::mutable_ok_info() {
  set_has_ok_info();
  if (ok_info_ == NULL) {
    _slow_mutable_ok_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.ok_info)
  return ok_info_;
}
inline ::cosmo::pb::DocumentData_OkInfo* DocumentData::release_ok_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.ok_info)
  clear_has_ok_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_info();
  } else {
    ::cosmo::pb::DocumentData_OkInfo* temp = ok_info_;
    ok_info_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_ok_info(::cosmo::pb::DocumentData_OkInfo* ok_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_info_;
  }
  if (ok_info != NULL) {
    _slow_set_allocated_ok_info(message_arena, &ok_info);
  }
  ok_info_ = ok_info;
  if (ok_info) {
    set_has_ok_info();
  } else {
    clear_has_ok_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.ok_info)
}

// optional .cosmo.pb.DocumentData.NewsData news_data = 8;
inline bool DocumentData::has_news_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentData::set_has_news_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentData::clear_has_news_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentData::clear_news_data() {
  if (news_data_ != NULL) news_data_->::cosmo::pb::DocumentData_NewsData::Clear();
  clear_has_news_data();
}
inline const ::cosmo::pb::DocumentData_NewsData& DocumentData::news_data() const {
  const ::cosmo::pb::DocumentData_NewsData* p = news_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.news_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_NewsData*>(
      &::cosmo::pb::_DocumentData_NewsData_default_instance_);
}
inline ::cosmo::pb::DocumentData_NewsData* DocumentData::mutable_news_data() {
  set_has_news_data();
  if (news_data_ == NULL) {
    _slow_mutable_news_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.news_data)
  return news_data_;
}
inline ::cosmo::pb::DocumentData_NewsData* DocumentData::release_news_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.news_data)
  clear_has_news_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_news_data();
  } else {
    ::cosmo::pb::DocumentData_NewsData* temp = news_data_;
    news_data_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_news_data(::cosmo::pb::DocumentData_NewsData* news_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete news_data_;
  }
  if (news_data != NULL) {
    _slow_set_allocated_news_data(message_arena, &news_data);
  }
  news_data_ = news_data;
  if (news_data) {
    set_has_news_data();
  } else {
    clear_has_news_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.news_data)
}

// optional .cosmo.pb.DocumentData.Censor censor = 10;
inline bool DocumentData::has_censor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DocumentData::set_has_censor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DocumentData::clear_has_censor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DocumentData::clear_censor() {
  if (censor_ != NULL) censor_->::cosmo::pb::DocumentData_Censor::Clear();
  clear_has_censor();
}
inline const ::cosmo::pb::DocumentData_Censor& DocumentData::censor() const {
  const ::cosmo::pb::DocumentData_Censor* p = censor_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.censor)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_Censor*>(
      &::cosmo::pb::_DocumentData_Censor_default_instance_);
}
inline ::cosmo::pb::DocumentData_Censor* DocumentData::mutable_censor() {
  set_has_censor();
  if (censor_ == NULL) {
    _slow_mutable_censor();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.censor)
  return censor_;
}
inline ::cosmo::pb::DocumentData_Censor* DocumentData::release_censor() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.censor)
  clear_has_censor();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_censor();
  } else {
    ::cosmo::pb::DocumentData_Censor* temp = censor_;
    censor_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_censor(::cosmo::pb::DocumentData_Censor* censor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete censor_;
  }
  if (censor != NULL) {
    _slow_set_allocated_censor(message_arena, &censor);
  }
  censor_ = censor;
  if (censor) {
    set_has_censor();
  } else {
    clear_has_censor();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.censor)
}

// optional .cosmo.pb.DocumentData.UserStats user_stats = 11;
inline bool DocumentData::has_user_stats() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DocumentData::set_has_user_stats() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DocumentData::clear_has_user_stats() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DocumentData::clear_user_stats() {
  if (user_stats_ != NULL) user_stats_->::cosmo::pb::DocumentData_UserStats::Clear();
  clear_has_user_stats();
}
inline const ::cosmo::pb::DocumentData_UserStats& DocumentData::user_stats() const {
  const ::cosmo::pb::DocumentData_UserStats* p = user_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.user_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_UserStats*>(
      &::cosmo::pb::_DocumentData_UserStats_default_instance_);
}
inline ::cosmo::pb::DocumentData_UserStats* DocumentData::mutable_user_stats() {
  set_has_user_stats();
  if (user_stats_ == NULL) {
    _slow_mutable_user_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.user_stats)
  return user_stats_;
}
inline ::cosmo::pb::DocumentData_UserStats* DocumentData::release_user_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.user_stats)
  clear_has_user_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_stats();
  } else {
    ::cosmo::pb::DocumentData_UserStats* temp = user_stats_;
    user_stats_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_user_stats(::cosmo::pb::DocumentData_UserStats* user_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_stats_;
  }
  if (user_stats != NULL) {
    _slow_set_allocated_user_stats(message_arena, &user_stats);
  }
  user_stats_ = user_stats;
  if (user_stats) {
    set_has_user_stats();
  } else {
    clear_has_user_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.user_stats)
}

// optional .cosmo.pb.DocumentData.Trends trends = 12;
inline bool DocumentData::has_trends() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DocumentData::set_has_trends() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DocumentData::clear_has_trends() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DocumentData::clear_trends() {
  if (trends_ != NULL) trends_->::cosmo::pb::DocumentData_Trends::Clear();
  clear_has_trends();
}
inline const ::cosmo::pb::DocumentData_Trends& DocumentData::trends() const {
  const ::cosmo::pb::DocumentData_Trends* p = trends_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.trends)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_Trends*>(
      &::cosmo::pb::_DocumentData_Trends_default_instance_);
}
inline ::cosmo::pb::DocumentData_Trends* DocumentData::mutable_trends() {
  set_has_trends();
  if (trends_ == NULL) {
    _slow_mutable_trends();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.trends)
  return trends_;
}
inline ::cosmo::pb::DocumentData_Trends* DocumentData::release_trends() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.trends)
  clear_has_trends();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_trends();
  } else {
    ::cosmo::pb::DocumentData_Trends* temp = trends_;
    trends_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_trends(::cosmo::pb::DocumentData_Trends* trends) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trends_;
  }
  if (trends != NULL) {
    _slow_set_allocated_trends(message_arena, &trends);
  }
  trends_ = trends;
  if (trends) {
    set_has_trends();
  } else {
    clear_has_trends();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.trends)
}

// optional .cosmo.pb.DocumentData.OriginalInfo original_info = 13;
inline bool DocumentData::has_original_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DocumentData::set_has_original_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DocumentData::clear_has_original_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DocumentData::clear_original_info() {
  if (original_info_ != NULL) original_info_->::cosmo::pb::DocumentData_OriginalInfo::Clear();
  clear_has_original_info();
}
inline const ::cosmo::pb::DocumentData_OriginalInfo& DocumentData::original_info() const {
  const ::cosmo::pb::DocumentData_OriginalInfo* p = original_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.original_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_OriginalInfo*>(
      &::cosmo::pb::_DocumentData_OriginalInfo_default_instance_);
}
inline ::cosmo::pb::DocumentData_OriginalInfo* DocumentData::mutable_original_info() {
  set_has_original_info();
  if (original_info_ == NULL) {
    _slow_mutable_original_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.original_info)
  return original_info_;
}
inline ::cosmo::pb::DocumentData_OriginalInfo* DocumentData::release_original_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.original_info)
  clear_has_original_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_info();
  } else {
    ::cosmo::pb::DocumentData_OriginalInfo* temp = original_info_;
    original_info_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_original_info(::cosmo::pb::DocumentData_OriginalInfo* original_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_info_;
  }
  if (original_info != NULL) {
    _slow_set_allocated_original_info(message_arena, &original_info);
  }
  original_info_ = original_info;
  if (original_info) {
    set_has_original_info();
  } else {
    clear_has_original_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.original_info)
}

// optional .cosmo.pb.DocumentData.Fetcher fetcher = 14;
inline bool DocumentData::has_fetcher() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DocumentData::set_has_fetcher() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DocumentData::clear_has_fetcher() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DocumentData::clear_fetcher() {
  if (fetcher_ != NULL) fetcher_->::cosmo::pb::DocumentData_Fetcher::Clear();
  clear_has_fetcher();
}
inline const ::cosmo::pb::DocumentData_Fetcher& DocumentData::fetcher() const {
  const ::cosmo::pb::DocumentData_Fetcher* p = fetcher_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.fetcher)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_Fetcher*>(
      &::cosmo::pb::_DocumentData_Fetcher_default_instance_);
}
inline ::cosmo::pb::DocumentData_Fetcher* DocumentData::mutable_fetcher() {
  set_has_fetcher();
  if (fetcher_ == NULL) {
    _slow_mutable_fetcher();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.fetcher)
  return fetcher_;
}
inline ::cosmo::pb::DocumentData_Fetcher* DocumentData::release_fetcher() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.fetcher)
  clear_has_fetcher();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fetcher();
  } else {
    ::cosmo::pb::DocumentData_Fetcher* temp = fetcher_;
    fetcher_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_fetcher(::cosmo::pb::DocumentData_Fetcher* fetcher) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fetcher_;
  }
  if (fetcher != NULL) {
    _slow_set_allocated_fetcher(message_arena, &fetcher);
  }
  fetcher_ = fetcher;
  if (fetcher) {
    set_has_fetcher();
  } else {
    clear_has_fetcher();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.fetcher)
}

// optional .cosmo.pb.DocumentData.MediametricsFea mediametrics_fea = 15;
inline bool DocumentData::has_mediametrics_fea() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DocumentData::set_has_mediametrics_fea() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DocumentData::clear_has_mediametrics_fea() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DocumentData::clear_mediametrics_fea() {
  if (mediametrics_fea_ != NULL) mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
  clear_has_mediametrics_fea();
}
inline const ::cosmo::pb::DocumentData_MediametricsFea& DocumentData::mediametrics_fea() const {
  const ::cosmo::pb::DocumentData_MediametricsFea* p = mediametrics_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.mediametrics_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_MediametricsFea*>(
      &::cosmo::pb::_DocumentData_MediametricsFea_default_instance_);
}
inline ::cosmo::pb::DocumentData_MediametricsFea* DocumentData::mutable_mediametrics_fea() {
  set_has_mediametrics_fea();
  if (mediametrics_fea_ == NULL) {
    _slow_mutable_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.mediametrics_fea)
  return mediametrics_fea_;
}
inline ::cosmo::pb::DocumentData_MediametricsFea* DocumentData::release_mediametrics_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.mediametrics_fea)
  clear_has_mediametrics_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_mediametrics_fea();
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = mediametrics_fea_;
    mediametrics_fea_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* mediametrics_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mediametrics_fea_;
  }
  if (mediametrics_fea != NULL) {
    _slow_set_allocated_mediametrics_fea(message_arena, &mediametrics_fea);
  }
  mediametrics_fea_ = mediametrics_fea;
  if (mediametrics_fea) {
    set_has_mediametrics_fea();
  } else {
    clear_has_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.mediametrics_fea)
}

// optional .cosmo.pb.DocumentData.TopicPeriodStats topic_period_stats = 16;
inline bool DocumentData::has_topic_period_stats() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DocumentData::set_has_topic_period_stats() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DocumentData::clear_has_topic_period_stats() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DocumentData::clear_topic_period_stats() {
  if (topic_period_stats_ != NULL) topic_period_stats_->::cosmo::pb::DocumentData_TopicPeriodStats::Clear();
  clear_has_topic_period_stats();
}
inline const ::cosmo::pb::DocumentData_TopicPeriodStats& DocumentData::topic_period_stats() const {
  const ::cosmo::pb::DocumentData_TopicPeriodStats* p = topic_period_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.topic_period_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicPeriodStats*>(
      &::cosmo::pb::_DocumentData_TopicPeriodStats_default_instance_);
}
inline ::cosmo::pb::DocumentData_TopicPeriodStats* DocumentData::mutable_topic_period_stats() {
  set_has_topic_period_stats();
  if (topic_period_stats_ == NULL) {
    _slow_mutable_topic_period_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.topic_period_stats)
  return topic_period_stats_;
}
inline ::cosmo::pb::DocumentData_TopicPeriodStats* DocumentData::release_topic_period_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.topic_period_stats)
  clear_has_topic_period_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_topic_period_stats();
  } else {
    ::cosmo::pb::DocumentData_TopicPeriodStats* temp = topic_period_stats_;
    topic_period_stats_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_topic_period_stats(::cosmo::pb::DocumentData_TopicPeriodStats* topic_period_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete topic_period_stats_;
  }
  if (topic_period_stats != NULL) {
    _slow_set_allocated_topic_period_stats(message_arena, &topic_period_stats);
  }
  topic_period_stats_ = topic_period_stats;
  if (topic_period_stats) {
    set_has_topic_period_stats();
  } else {
    clear_has_topic_period_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.topic_period_stats)
}

// optional .cosmo.pb.DocumentData.AppFilterStats app_filter_stats = 17;
inline bool DocumentData::has_app_filter_stats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DocumentData::set_has_app_filter_stats() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DocumentData::clear_has_app_filter_stats() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DocumentData::clear_app_filter_stats() {
  if (app_filter_stats_ != NULL) app_filter_stats_->::cosmo::pb::DocumentData_AppFilterStats::Clear();
  clear_has_app_filter_stats();
}
inline const ::cosmo::pb::DocumentData_AppFilterStats& DocumentData::app_filter_stats() const {
  const ::cosmo::pb::DocumentData_AppFilterStats* p = app_filter_stats_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.app_filter_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_AppFilterStats*>(
      &::cosmo::pb::_DocumentData_AppFilterStats_default_instance_);
}
inline ::cosmo::pb::DocumentData_AppFilterStats* DocumentData::mutable_app_filter_stats() {
  set_has_app_filter_stats();
  if (app_filter_stats_ == NULL) {
    _slow_mutable_app_filter_stats();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.app_filter_stats)
  return app_filter_stats_;
}
inline ::cosmo::pb::DocumentData_AppFilterStats* DocumentData::release_app_filter_stats() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.app_filter_stats)
  clear_has_app_filter_stats();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_app_filter_stats();
  } else {
    ::cosmo::pb::DocumentData_AppFilterStats* temp = app_filter_stats_;
    app_filter_stats_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_app_filter_stats(::cosmo::pb::DocumentData_AppFilterStats* app_filter_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete app_filter_stats_;
  }
  if (app_filter_stats != NULL) {
    _slow_set_allocated_app_filter_stats(message_arena, &app_filter_stats);
  }
  app_filter_stats_ = app_filter_stats;
  if (app_filter_stats) {
    set_has_app_filter_stats();
  } else {
    clear_has_app_filter_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.app_filter_stats)
}

// optional .cosmo.pb.DocumentData.MediametricsFea week_mediametrics_fea = 18;
inline bool DocumentData::has_week_mediametrics_fea() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DocumentData::set_has_week_mediametrics_fea() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DocumentData::clear_has_week_mediametrics_fea() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DocumentData::clear_week_mediametrics_fea() {
  if (week_mediametrics_fea_ != NULL) week_mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
  clear_has_week_mediametrics_fea();
}
inline const ::cosmo::pb::DocumentData_MediametricsFea& DocumentData::week_mediametrics_fea() const {
  const ::cosmo::pb::DocumentData_MediametricsFea* p = week_mediametrics_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.week_mediametrics_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_MediametricsFea*>(
      &::cosmo::pb::_DocumentData_MediametricsFea_default_instance_);
}
inline ::cosmo::pb::DocumentData_MediametricsFea* DocumentData::mutable_week_mediametrics_fea() {
  set_has_week_mediametrics_fea();
  if (week_mediametrics_fea_ == NULL) {
    _slow_mutable_week_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.week_mediametrics_fea)
  return week_mediametrics_fea_;
}
inline ::cosmo::pb::DocumentData_MediametricsFea* DocumentData::release_week_mediametrics_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.week_mediametrics_fea)
  clear_has_week_mediametrics_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_week_mediametrics_fea();
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = week_mediametrics_fea_;
    week_mediametrics_fea_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_week_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* week_mediametrics_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete week_mediametrics_fea_;
  }
  if (week_mediametrics_fea != NULL) {
    _slow_set_allocated_week_mediametrics_fea(message_arena, &week_mediametrics_fea);
  }
  week_mediametrics_fea_ = week_mediametrics_fea;
  if (week_mediametrics_fea) {
    set_has_week_mediametrics_fea();
  } else {
    clear_has_week_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.week_mediametrics_fea)
}

// optional .cosmo.pb.DocumentData.TopicEventStat ok_topic_event_stat = 20;
inline bool DocumentData::has_ok_topic_event_stat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DocumentData::set_has_ok_topic_event_stat() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DocumentData::clear_has_ok_topic_event_stat() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DocumentData::clear_ok_topic_event_stat() {
  if (ok_topic_event_stat_ != NULL) ok_topic_event_stat_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_ok_topic_event_stat();
}
inline const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::ok_topic_event_stat() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = ok_topic_event_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.ok_topic_event_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_ok_topic_event_stat() {
  set_has_ok_topic_event_stat();
  if (ok_topic_event_stat_ == NULL) {
    _slow_mutable_ok_topic_event_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.ok_topic_event_stat)
  return ok_topic_event_stat_;
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_ok_topic_event_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.ok_topic_event_stat)
  clear_has_ok_topic_event_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ok_topic_event_stat();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = ok_topic_event_stat_;
    ok_topic_event_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_ok_topic_event_stat(::cosmo::pb::DocumentData_TopicEventStat* ok_topic_event_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ok_topic_event_stat_;
  }
  if (ok_topic_event_stat != NULL) {
    _slow_set_allocated_ok_topic_event_stat(message_arena, &ok_topic_event_stat);
  }
  ok_topic_event_stat_ = ok_topic_event_stat;
  if (ok_topic_event_stat) {
    set_has_ok_topic_event_stat();
  } else {
    clear_has_ok_topic_event_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.ok_topic_event_stat)
}

// optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day = 21;
inline bool DocumentData::has_vk_topic_event_stat_day() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DocumentData::set_has_vk_topic_event_stat_day() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DocumentData::clear_has_vk_topic_event_stat_day() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DocumentData::clear_vk_topic_event_stat_day() {
  if (vk_topic_event_stat_day_ != NULL) vk_topic_event_stat_day_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_vk_topic_event_stat_day();
}
inline const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::vk_topic_event_stat_day() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = vk_topic_event_stat_day_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.vk_topic_event_stat_day)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_vk_topic_event_stat_day() {
  set_has_vk_topic_event_stat_day();
  if (vk_topic_event_stat_day_ == NULL) {
    _slow_mutable_vk_topic_event_stat_day();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.vk_topic_event_stat_day)
  return vk_topic_event_stat_day_;
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_vk_topic_event_stat_day() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.vk_topic_event_stat_day)
  clear_has_vk_topic_event_stat_day();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_topic_event_stat_day();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_day_;
    vk_topic_event_stat_day_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_vk_topic_event_stat_day(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_topic_event_stat_day_;
  }
  if (vk_topic_event_stat_day != NULL) {
    _slow_set_allocated_vk_topic_event_stat_day(message_arena, &vk_topic_event_stat_day);
  }
  vk_topic_event_stat_day_ = vk_topic_event_stat_day;
  if (vk_topic_event_stat_day) {
    set_has_vk_topic_event_stat_day();
  } else {
    clear_has_vk_topic_event_stat_day();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_day)
}

// optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week = 22;
inline bool DocumentData::has_vk_topic_event_stat_week() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DocumentData::set_has_vk_topic_event_stat_week() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DocumentData::clear_has_vk_topic_event_stat_week() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DocumentData::clear_vk_topic_event_stat_week() {
  if (vk_topic_event_stat_week_ != NULL) vk_topic_event_stat_week_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_vk_topic_event_stat_week();
}
inline const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::vk_topic_event_stat_week() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = vk_topic_event_stat_week_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.vk_topic_event_stat_week)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_vk_topic_event_stat_week() {
  set_has_vk_topic_event_stat_week();
  if (vk_topic_event_stat_week_ == NULL) {
    _slow_mutable_vk_topic_event_stat_week();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.vk_topic_event_stat_week)
  return vk_topic_event_stat_week_;
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_vk_topic_event_stat_week() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.vk_topic_event_stat_week)
  clear_has_vk_topic_event_stat_week();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_topic_event_stat_week();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_week_;
    vk_topic_event_stat_week_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_vk_topic_event_stat_week(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_topic_event_stat_week_;
  }
  if (vk_topic_event_stat_week != NULL) {
    _slow_set_allocated_vk_topic_event_stat_week(message_arena, &vk_topic_event_stat_week);
  }
  vk_topic_event_stat_week_ = vk_topic_event_stat_week;
  if (vk_topic_event_stat_week) {
    set_has_vk_topic_event_stat_week();
  } else {
    clear_has_vk_topic_event_stat_week();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_week)
}

// optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day = 23;
inline bool DocumentData::has_youtube_topic_event_stat_day() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DocumentData::set_has_youtube_topic_event_stat_day() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DocumentData::clear_has_youtube_topic_event_stat_day() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DocumentData::clear_youtube_topic_event_stat_day() {
  if (youtube_topic_event_stat_day_ != NULL) youtube_topic_event_stat_day_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_youtube_topic_event_stat_day();
}
inline const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::youtube_topic_event_stat_day() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = youtube_topic_event_stat_day_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.youtube_topic_event_stat_day)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_youtube_topic_event_stat_day() {
  set_has_youtube_topic_event_stat_day();
  if (youtube_topic_event_stat_day_ == NULL) {
    _slow_mutable_youtube_topic_event_stat_day();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.youtube_topic_event_stat_day)
  return youtube_topic_event_stat_day_;
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_youtube_topic_event_stat_day() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.youtube_topic_event_stat_day)
  clear_has_youtube_topic_event_stat_day();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_topic_event_stat_day();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_day_;
    youtube_topic_event_stat_day_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_youtube_topic_event_stat_day(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_topic_event_stat_day_;
  }
  if (youtube_topic_event_stat_day != NULL) {
    _slow_set_allocated_youtube_topic_event_stat_day(message_arena, &youtube_topic_event_stat_day);
  }
  youtube_topic_event_stat_day_ = youtube_topic_event_stat_day;
  if (youtube_topic_event_stat_day) {
    set_has_youtube_topic_event_stat_day();
  } else {
    clear_has_youtube_topic_event_stat_day();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_day)
}

// optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week = 24;
inline bool DocumentData::has_youtube_topic_event_stat_week() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DocumentData::set_has_youtube_topic_event_stat_week() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DocumentData::clear_has_youtube_topic_event_stat_week() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DocumentData::clear_youtube_topic_event_stat_week() {
  if (youtube_topic_event_stat_week_ != NULL) youtube_topic_event_stat_week_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_youtube_topic_event_stat_week();
}
inline const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::youtube_topic_event_stat_week() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = youtube_topic_event_stat_week_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.youtube_topic_event_stat_week)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_youtube_topic_event_stat_week() {
  set_has_youtube_topic_event_stat_week();
  if (youtube_topic_event_stat_week_ == NULL) {
    _slow_mutable_youtube_topic_event_stat_week();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.youtube_topic_event_stat_week)
  return youtube_topic_event_stat_week_;
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_youtube_topic_event_stat_week() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.youtube_topic_event_stat_week)
  clear_has_youtube_topic_event_stat_week();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_topic_event_stat_week();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_week_;
    youtube_topic_event_stat_week_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_youtube_topic_event_stat_week(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_topic_event_stat_week_;
  }
  if (youtube_topic_event_stat_week != NULL) {
    _slow_set_allocated_youtube_topic_event_stat_week(message_arena, &youtube_topic_event_stat_week);
  }
  youtube_topic_event_stat_week_ = youtube_topic_event_stat_week;
  if (youtube_topic_event_stat_week) {
    set_has_youtube_topic_event_stat_week();
  } else {
    clear_has_youtube_topic_event_stat_week();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_week)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat taped_location_stat = 25;
inline bool DocumentData::has_taped_location_stat() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DocumentData::set_has_taped_location_stat() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DocumentData::clear_has_taped_location_stat() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DocumentData::clear_taped_location_stat() {
  if (taped_location_stat_ != NULL) taped_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_taped_location_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::taped_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = taped_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.taped_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_taped_location_stat() {
  set_has_taped_location_stat();
  if (taped_location_stat_ == NULL) {
    _slow_mutable_taped_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.taped_location_stat)
  return taped_location_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_taped_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.taped_location_stat)
  clear_has_taped_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_taped_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = taped_location_stat_;
    taped_location_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_taped_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* taped_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete taped_location_stat_;
  }
  if (taped_location_stat != NULL) {
    _slow_set_allocated_taped_location_stat(message_arena, &taped_location_stat);
  }
  taped_location_stat_ = taped_location_stat;
  if (taped_location_stat) {
    set_has_taped_location_stat();
  } else {
    clear_has_taped_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.taped_location_stat)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat homer_location_stat = 26;
inline bool DocumentData::has_homer_location_stat() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DocumentData::set_has_homer_location_stat() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DocumentData::clear_has_homer_location_stat() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DocumentData::clear_homer_location_stat() {
  if (homer_location_stat_ != NULL) homer_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_homer_location_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::homer_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = homer_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.homer_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_homer_location_stat() {
  set_has_homer_location_stat();
  if (homer_location_stat_ == NULL) {
    _slow_mutable_homer_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.homer_location_stat)
  return homer_location_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_homer_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.homer_location_stat)
  clear_has_homer_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_homer_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = homer_location_stat_;
    homer_location_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_homer_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* homer_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete homer_location_stat_;
  }
  if (homer_location_stat != NULL) {
    _slow_set_allocated_homer_location_stat(message_arena, &homer_location_stat);
  }
  homer_location_stat_ = homer_location_stat;
  if (homer_location_stat) {
    set_has_homer_location_stat();
  } else {
    clear_has_homer_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.homer_location_stat)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat hourly_location_stat = 27;
inline bool DocumentData::has_hourly_location_stat() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DocumentData::set_has_hourly_location_stat() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DocumentData::clear_has_hourly_location_stat() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DocumentData::clear_hourly_location_stat() {
  if (hourly_location_stat_ != NULL) hourly_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_hourly_location_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::hourly_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = hourly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.hourly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_hourly_location_stat() {
  set_has_hourly_location_stat();
  if (hourly_location_stat_ == NULL) {
    _slow_mutable_hourly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.hourly_location_stat)
  return hourly_location_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_hourly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.hourly_location_stat)
  clear_has_hourly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_hourly_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = hourly_location_stat_;
    hourly_location_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_hourly_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* hourly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hourly_location_stat_;
  }
  if (hourly_location_stat != NULL) {
    _slow_set_allocated_hourly_location_stat(message_arena, &hourly_location_stat);
  }
  hourly_location_stat_ = hourly_location_stat;
  if (hourly_location_stat) {
    set_has_hourly_location_stat();
  } else {
    clear_has_hourly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.hourly_location_stat)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat daily_location_stat = 28;
inline bool DocumentData::has_daily_location_stat() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DocumentData::set_has_daily_location_stat() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DocumentData::clear_has_daily_location_stat() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DocumentData::clear_daily_location_stat() {
  if (daily_location_stat_ != NULL) daily_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_daily_location_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::daily_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = daily_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.daily_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_daily_location_stat() {
  set_has_daily_location_stat();
  if (daily_location_stat_ == NULL) {
    _slow_mutable_daily_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.daily_location_stat)
  return daily_location_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_daily_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.daily_location_stat)
  clear_has_daily_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_daily_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = daily_location_stat_;
    daily_location_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_daily_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* daily_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete daily_location_stat_;
  }
  if (daily_location_stat != NULL) {
    _slow_set_allocated_daily_location_stat(message_arena, &daily_location_stat);
  }
  daily_location_stat_ = daily_location_stat;
  if (daily_location_stat) {
    set_has_daily_location_stat();
  } else {
    clear_has_daily_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.daily_location_stat)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat weekly_location_stat = 29;
inline bool DocumentData::has_weekly_location_stat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DocumentData::set_has_weekly_location_stat() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DocumentData::clear_has_weekly_location_stat() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DocumentData::clear_weekly_location_stat() {
  if (weekly_location_stat_ != NULL) weekly_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_weekly_location_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::weekly_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = weekly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.weekly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_weekly_location_stat() {
  set_has_weekly_location_stat();
  if (weekly_location_stat_ == NULL) {
    _slow_mutable_weekly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.weekly_location_stat)
  return weekly_location_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_weekly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.weekly_location_stat)
  clear_has_weekly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_weekly_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = weekly_location_stat_;
    weekly_location_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_weekly_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* weekly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete weekly_location_stat_;
  }
  if (weekly_location_stat != NULL) {
    _slow_set_allocated_weekly_location_stat(message_arena, &weekly_location_stat);
  }
  weekly_location_stat_ = weekly_location_stat;
  if (weekly_location_stat) {
    set_has_weekly_location_stat();
  } else {
    clear_has_weekly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.weekly_location_stat)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat monthly_location_stat = 30;
inline bool DocumentData::has_monthly_location_stat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DocumentData::set_has_monthly_location_stat() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DocumentData::clear_has_monthly_location_stat() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DocumentData::clear_monthly_location_stat() {
  if (monthly_location_stat_ != NULL) monthly_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_monthly_location_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::monthly_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = monthly_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.monthly_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_monthly_location_stat() {
  set_has_monthly_location_stat();
  if (monthly_location_stat_ == NULL) {
    _slow_mutable_monthly_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.monthly_location_stat)
  return monthly_location_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_monthly_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.monthly_location_stat)
  clear_has_monthly_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_monthly_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = monthly_location_stat_;
    monthly_location_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_monthly_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* monthly_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete monthly_location_stat_;
  }
  if (monthly_location_stat != NULL) {
    _slow_set_allocated_monthly_location_stat(message_arena, &monthly_location_stat);
  }
  monthly_location_stat_ = monthly_location_stat;
  if (monthly_location_stat) {
    set_has_monthly_location_stat();
  } else {
    clear_has_monthly_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.monthly_location_stat)
}

// optional .cosmo.pb.DocumentData.FetcherGeo fetcher_geo = 31;
inline bool DocumentData::has_fetcher_geo() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DocumentData::set_has_fetcher_geo() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DocumentData::clear_has_fetcher_geo() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DocumentData::clear_fetcher_geo() {
  if (fetcher_geo_ != NULL) fetcher_geo_->::cosmo::pb::DocumentData_FetcherGeo::Clear();
  clear_has_fetcher_geo();
}
inline const ::cosmo::pb::DocumentData_FetcherGeo& DocumentData::fetcher_geo() const {
  const ::cosmo::pb::DocumentData_FetcherGeo* p = fetcher_geo_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.fetcher_geo)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_FetcherGeo*>(
      &::cosmo::pb::_DocumentData_FetcherGeo_default_instance_);
}
inline ::cosmo::pb::DocumentData_FetcherGeo* DocumentData::mutable_fetcher_geo() {
  set_has_fetcher_geo();
  if (fetcher_geo_ == NULL) {
    _slow_mutable_fetcher_geo();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.fetcher_geo)
  return fetcher_geo_;
}
inline ::cosmo::pb::DocumentData_FetcherGeo* DocumentData::release_fetcher_geo() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.fetcher_geo)
  clear_has_fetcher_geo();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fetcher_geo();
  } else {
    ::cosmo::pb::DocumentData_FetcherGeo* temp = fetcher_geo_;
    fetcher_geo_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_fetcher_geo(::cosmo::pb::DocumentData_FetcherGeo* fetcher_geo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fetcher_geo_;
  }
  if (fetcher_geo != NULL) {
    _slow_set_allocated_fetcher_geo(message_arena, &fetcher_geo);
  }
  fetcher_geo_ = fetcher_geo;
  if (fetcher_geo) {
    set_has_fetcher_geo();
  } else {
    clear_has_fetcher_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.fetcher_geo)
}

// optional .cosmo.pb.DocumentData.MediametricsFea hourly_fast_mediametrics_fea = 32;
inline bool DocumentData::has_hourly_fast_mediametrics_fea() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DocumentData::set_has_hourly_fast_mediametrics_fea() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DocumentData::clear_has_hourly_fast_mediametrics_fea() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DocumentData::clear_hourly_fast_mediametrics_fea() {
  if (hourly_fast_mediametrics_fea_ != NULL) hourly_fast_mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
  clear_has_hourly_fast_mediametrics_fea();
}
inline const ::cosmo::pb::DocumentData_MediametricsFea& DocumentData::hourly_fast_mediametrics_fea() const {
  const ::cosmo::pb::DocumentData_MediametricsFea* p = hourly_fast_mediametrics_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.hourly_fast_mediametrics_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_MediametricsFea*>(
      &::cosmo::pb::_DocumentData_MediametricsFea_default_instance_);
}
inline ::cosmo::pb::DocumentData_MediametricsFea* DocumentData::mutable_hourly_fast_mediametrics_fea() {
  set_has_hourly_fast_mediametrics_fea();
  if (hourly_fast_mediametrics_fea_ == NULL) {
    _slow_mutable_hourly_fast_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.hourly_fast_mediametrics_fea)
  return hourly_fast_mediametrics_fea_;
}
inline ::cosmo::pb::DocumentData_MediametricsFea* DocumentData::release_hourly_fast_mediametrics_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.hourly_fast_mediametrics_fea)
  clear_has_hourly_fast_mediametrics_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_hourly_fast_mediametrics_fea();
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = hourly_fast_mediametrics_fea_;
    hourly_fast_mediametrics_fea_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_hourly_fast_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* hourly_fast_mediametrics_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hourly_fast_mediametrics_fea_;
  }
  if (hourly_fast_mediametrics_fea != NULL) {
    _slow_set_allocated_hourly_fast_mediametrics_fea(message_arena, &hourly_fast_mediametrics_fea);
  }
  hourly_fast_mediametrics_fea_ = hourly_fast_mediametrics_fea;
  if (hourly_fast_mediametrics_fea) {
    set_has_hourly_fast_mediametrics_fea();
  } else {
    clear_has_hourly_fast_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.hourly_fast_mediametrics_fea)
}

// optional .cosmo.pb.DocumentData.MediametricsFea daily_fast_mediametrics_fea = 33;
inline bool DocumentData::has_daily_fast_mediametrics_fea() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DocumentData::set_has_daily_fast_mediametrics_fea() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DocumentData::clear_has_daily_fast_mediametrics_fea() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DocumentData::clear_daily_fast_mediametrics_fea() {
  if (daily_fast_mediametrics_fea_ != NULL) daily_fast_mediametrics_fea_->::cosmo::pb::DocumentData_MediametricsFea::Clear();
  clear_has_daily_fast_mediametrics_fea();
}
inline const ::cosmo::pb::DocumentData_MediametricsFea& DocumentData::daily_fast_mediametrics_fea() const {
  const ::cosmo::pb::DocumentData_MediametricsFea* p = daily_fast_mediametrics_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.daily_fast_mediametrics_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_MediametricsFea*>(
      &::cosmo::pb::_DocumentData_MediametricsFea_default_instance_);
}
inline ::cosmo::pb::DocumentData_MediametricsFea* DocumentData::mutable_daily_fast_mediametrics_fea() {
  set_has_daily_fast_mediametrics_fea();
  if (daily_fast_mediametrics_fea_ == NULL) {
    _slow_mutable_daily_fast_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.daily_fast_mediametrics_fea)
  return daily_fast_mediametrics_fea_;
}
inline ::cosmo::pb::DocumentData_MediametricsFea* DocumentData::release_daily_fast_mediametrics_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.daily_fast_mediametrics_fea)
  clear_has_daily_fast_mediametrics_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_daily_fast_mediametrics_fea();
  } else {
    ::cosmo::pb::DocumentData_MediametricsFea* temp = daily_fast_mediametrics_fea_;
    daily_fast_mediametrics_fea_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_daily_fast_mediametrics_fea(::cosmo::pb::DocumentData_MediametricsFea* daily_fast_mediametrics_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete daily_fast_mediametrics_fea_;
  }
  if (daily_fast_mediametrics_fea != NULL) {
    _slow_set_allocated_daily_fast_mediametrics_fea(message_arena, &daily_fast_mediametrics_fea);
  }
  daily_fast_mediametrics_fea_ = daily_fast_mediametrics_fea;
  if (daily_fast_mediametrics_fea) {
    set_has_daily_fast_mediametrics_fea();
  } else {
    clear_has_daily_fast_mediametrics_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.daily_fast_mediametrics_fea)
}

// optional .cosmo.pb.DocumentData.FetcherImage fetcher_image = 34;
inline bool DocumentData::has_fetcher_image() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DocumentData::set_has_fetcher_image() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DocumentData::clear_has_fetcher_image() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DocumentData::clear_fetcher_image() {
  if (fetcher_image_ != NULL) fetcher_image_->::cosmo::pb::DocumentData_FetcherImage::Clear();
  clear_has_fetcher_image();
}
inline const ::cosmo::pb::DocumentData_FetcherImage& DocumentData::fetcher_image() const {
  const ::cosmo::pb::DocumentData_FetcherImage* p = fetcher_image_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.fetcher_image)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_FetcherImage*>(
      &::cosmo::pb::_DocumentData_FetcherImage_default_instance_);
}
inline ::cosmo::pb::DocumentData_FetcherImage* DocumentData::mutable_fetcher_image() {
  set_has_fetcher_image();
  if (fetcher_image_ == NULL) {
    _slow_mutable_fetcher_image();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.fetcher_image)
  return fetcher_image_;
}
inline ::cosmo::pb::DocumentData_FetcherImage* DocumentData::release_fetcher_image() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.fetcher_image)
  clear_has_fetcher_image();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fetcher_image();
  } else {
    ::cosmo::pb::DocumentData_FetcherImage* temp = fetcher_image_;
    fetcher_image_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_fetcher_image(::cosmo::pb::DocumentData_FetcherImage* fetcher_image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fetcher_image_;
  }
  if (fetcher_image != NULL) {
    _slow_set_allocated_fetcher_image(message_arena, &fetcher_image);
  }
  fetcher_image_ = fetcher_image;
  if (fetcher_image) {
    set_has_fetcher_image();
  } else {
    clear_has_fetcher_image();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.fetcher_image)
}

// optional .cosmo.pb.DocumentData.ContentData content_data = 35;
inline bool DocumentData::has_content_data() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DocumentData::set_has_content_data() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DocumentData::clear_has_content_data() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DocumentData::clear_content_data() {
  if (content_data_ != NULL) content_data_->::cosmo::pb::DocumentData_ContentData::Clear();
  clear_has_content_data();
}
inline const ::cosmo::pb::DocumentData_ContentData& DocumentData::content_data() const {
  const ::cosmo::pb::DocumentData_ContentData* p = content_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.content_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_ContentData*>(
      &::cosmo::pb::_DocumentData_ContentData_default_instance_);
}
inline ::cosmo::pb::DocumentData_ContentData* DocumentData::mutable_content_data() {
  set_has_content_data();
  if (content_data_ == NULL) {
    _slow_mutable_content_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.content_data)
  return content_data_;
}
inline ::cosmo::pb::DocumentData_ContentData* DocumentData::release_content_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.content_data)
  clear_has_content_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_content_data();
  } else {
    ::cosmo::pb::DocumentData_ContentData* temp = content_data_;
    content_data_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_content_data(::cosmo::pb::DocumentData_ContentData* content_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_data_;
  }
  if (content_data != NULL) {
    _slow_set_allocated_content_data(message_arena, &content_data);
  }
  content_data_ = content_data;
  if (content_data) {
    set_has_content_data();
  } else {
    clear_has_content_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.content_data)
}

// optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_day_v2 = 36;
inline bool DocumentData::has_vk_topic_event_stat_day_v2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DocumentData::set_has_vk_topic_event_stat_day_v2() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DocumentData::clear_has_vk_topic_event_stat_day_v2() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DocumentData::clear_vk_topic_event_stat_day_v2() {
  if (vk_topic_event_stat_day_v2_ != NULL) vk_topic_event_stat_day_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_vk_topic_event_stat_day_v2();
}
inline const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::vk_topic_event_stat_day_v2() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = vk_topic_event_stat_day_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.vk_topic_event_stat_day_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_vk_topic_event_stat_day_v2() {
  set_has_vk_topic_event_stat_day_v2();
  if (vk_topic_event_stat_day_v2_ == NULL) {
    _slow_mutable_vk_topic_event_stat_day_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.vk_topic_event_stat_day_v2)
  return vk_topic_event_stat_day_v2_;
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_vk_topic_event_stat_day_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.vk_topic_event_stat_day_v2)
  clear_has_vk_topic_event_stat_day_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_topic_event_stat_day_v2();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_day_v2_;
    vk_topic_event_stat_day_v2_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_vk_topic_event_stat_day_v2(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_day_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_topic_event_stat_day_v2_;
  }
  if (vk_topic_event_stat_day_v2 != NULL) {
    _slow_set_allocated_vk_topic_event_stat_day_v2(message_arena, &vk_topic_event_stat_day_v2);
  }
  vk_topic_event_stat_day_v2_ = vk_topic_event_stat_day_v2;
  if (vk_topic_event_stat_day_v2) {
    set_has_vk_topic_event_stat_day_v2();
  } else {
    clear_has_vk_topic_event_stat_day_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_day_v2)
}

// optional .cosmo.pb.DocumentData.TopicEventStat vk_topic_event_stat_week_v2 = 37;
inline bool DocumentData::has_vk_topic_event_stat_week_v2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void DocumentData::set_has_vk_topic_event_stat_week_v2() {
  _has_bits_[0] |= 0x10000000u;
}
inline void DocumentData::clear_has_vk_topic_event_stat_week_v2() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void DocumentData::clear_vk_topic_event_stat_week_v2() {
  if (vk_topic_event_stat_week_v2_ != NULL) vk_topic_event_stat_week_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_vk_topic_event_stat_week_v2();
}
inline const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::vk_topic_event_stat_week_v2() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = vk_topic_event_stat_week_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.vk_topic_event_stat_week_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_vk_topic_event_stat_week_v2() {
  set_has_vk_topic_event_stat_week_v2();
  if (vk_topic_event_stat_week_v2_ == NULL) {
    _slow_mutable_vk_topic_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.vk_topic_event_stat_week_v2)
  return vk_topic_event_stat_week_v2_;
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_vk_topic_event_stat_week_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.vk_topic_event_stat_week_v2)
  clear_has_vk_topic_event_stat_week_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_vk_topic_event_stat_week_v2();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = vk_topic_event_stat_week_v2_;
    vk_topic_event_stat_week_v2_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_vk_topic_event_stat_week_v2(::cosmo::pb::DocumentData_TopicEventStat* vk_topic_event_stat_week_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vk_topic_event_stat_week_v2_;
  }
  if (vk_topic_event_stat_week_v2 != NULL) {
    _slow_set_allocated_vk_topic_event_stat_week_v2(message_arena, &vk_topic_event_stat_week_v2);
  }
  vk_topic_event_stat_week_v2_ = vk_topic_event_stat_week_v2;
  if (vk_topic_event_stat_week_v2) {
    set_has_vk_topic_event_stat_week_v2();
  } else {
    clear_has_vk_topic_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.vk_topic_event_stat_week_v2)
}

// optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_day_v2 = 38;
inline bool DocumentData::has_youtube_topic_event_stat_day_v2() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void DocumentData::set_has_youtube_topic_event_stat_day_v2() {
  _has_bits_[0] |= 0x20000000u;
}
inline void DocumentData::clear_has_youtube_topic_event_stat_day_v2() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void DocumentData::clear_youtube_topic_event_stat_day_v2() {
  if (youtube_topic_event_stat_day_v2_ != NULL) youtube_topic_event_stat_day_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_youtube_topic_event_stat_day_v2();
}
inline const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::youtube_topic_event_stat_day_v2() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = youtube_topic_event_stat_day_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.youtube_topic_event_stat_day_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_youtube_topic_event_stat_day_v2() {
  set_has_youtube_topic_event_stat_day_v2();
  if (youtube_topic_event_stat_day_v2_ == NULL) {
    _slow_mutable_youtube_topic_event_stat_day_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.youtube_topic_event_stat_day_v2)
  return youtube_topic_event_stat_day_v2_;
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_youtube_topic_event_stat_day_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.youtube_topic_event_stat_day_v2)
  clear_has_youtube_topic_event_stat_day_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_topic_event_stat_day_v2();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_day_v2_;
    youtube_topic_event_stat_day_v2_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_youtube_topic_event_stat_day_v2(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_day_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_topic_event_stat_day_v2_;
  }
  if (youtube_topic_event_stat_day_v2 != NULL) {
    _slow_set_allocated_youtube_topic_event_stat_day_v2(message_arena, &youtube_topic_event_stat_day_v2);
  }
  youtube_topic_event_stat_day_v2_ = youtube_topic_event_stat_day_v2;
  if (youtube_topic_event_stat_day_v2) {
    set_has_youtube_topic_event_stat_day_v2();
  } else {
    clear_has_youtube_topic_event_stat_day_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_day_v2)
}

// optional .cosmo.pb.DocumentData.TopicEventStat youtube_topic_event_stat_week_v2 = 39;
inline bool DocumentData::has_youtube_topic_event_stat_week_v2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void DocumentData::set_has_youtube_topic_event_stat_week_v2() {
  _has_bits_[0] |= 0x40000000u;
}
inline void DocumentData::clear_has_youtube_topic_event_stat_week_v2() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void DocumentData::clear_youtube_topic_event_stat_week_v2() {
  if (youtube_topic_event_stat_week_v2_ != NULL) youtube_topic_event_stat_week_v2_->::cosmo::pb::DocumentData_TopicEventStat::Clear();
  clear_has_youtube_topic_event_stat_week_v2();
}
inline const ::cosmo::pb::DocumentData_TopicEventStat& DocumentData::youtube_topic_event_stat_week_v2() const {
  const ::cosmo::pb::DocumentData_TopicEventStat* p = youtube_topic_event_stat_week_v2_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.youtube_topic_event_stat_week_v2)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_TopicEventStat*>(
      &::cosmo::pb::_DocumentData_TopicEventStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::mutable_youtube_topic_event_stat_week_v2() {
  set_has_youtube_topic_event_stat_week_v2();
  if (youtube_topic_event_stat_week_v2_ == NULL) {
    _slow_mutable_youtube_topic_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.youtube_topic_event_stat_week_v2)
  return youtube_topic_event_stat_week_v2_;
}
inline ::cosmo::pb::DocumentData_TopicEventStat* DocumentData::release_youtube_topic_event_stat_week_v2() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.youtube_topic_event_stat_week_v2)
  clear_has_youtube_topic_event_stat_week_v2();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_youtube_topic_event_stat_week_v2();
  } else {
    ::cosmo::pb::DocumentData_TopicEventStat* temp = youtube_topic_event_stat_week_v2_;
    youtube_topic_event_stat_week_v2_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_youtube_topic_event_stat_week_v2(::cosmo::pb::DocumentData_TopicEventStat* youtube_topic_event_stat_week_v2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete youtube_topic_event_stat_week_v2_;
  }
  if (youtube_topic_event_stat_week_v2 != NULL) {
    _slow_set_allocated_youtube_topic_event_stat_week_v2(message_arena, &youtube_topic_event_stat_week_v2);
  }
  youtube_topic_event_stat_week_v2_ = youtube_topic_event_stat_week_v2;
  if (youtube_topic_event_stat_week_v2) {
    set_has_youtube_topic_event_stat_week_v2();
  } else {
    clear_has_youtube_topic_event_stat_week_v2();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.youtube_topic_event_stat_week_v2)
}

// optional .cosmo.pb.DocumentData.DocumentMutualStat document_i2i_stat = 40;
inline bool DocumentData::has_document_i2i_stat() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void DocumentData::set_has_document_i2i_stat() {
  _has_bits_[0] |= 0x80000000u;
}
inline void DocumentData::clear_has_document_i2i_stat() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void DocumentData::clear_document_i2i_stat() {
  if (document_i2i_stat_ != NULL) document_i2i_stat_->::cosmo::pb::DocumentData_DocumentMutualStat::Clear();
  clear_has_document_i2i_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentMutualStat& DocumentData::document_i2i_stat() const {
  const ::cosmo::pb::DocumentData_DocumentMutualStat* p = document_i2i_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.document_i2i_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentMutualStat*>(
      &::cosmo::pb::_DocumentData_DocumentMutualStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::mutable_document_i2i_stat() {
  set_has_document_i2i_stat();
  if (document_i2i_stat_ == NULL) {
    _slow_mutable_document_i2i_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.document_i2i_stat)
  return document_i2i_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::release_document_i2i_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.document_i2i_stat)
  clear_has_document_i2i_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_document_i2i_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentMutualStat* temp = document_i2i_stat_;
    document_i2i_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_document_i2i_stat(::cosmo::pb::DocumentData_DocumentMutualStat* document_i2i_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete document_i2i_stat_;
  }
  if (document_i2i_stat != NULL) {
    _slow_set_allocated_document_i2i_stat(message_arena, &document_i2i_stat);
  }
  document_i2i_stat_ = document_i2i_stat;
  if (document_i2i_stat) {
    set_has_document_i2i_stat();
  } else {
    clear_has_document_i2i_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.document_i2i_stat)
}

// optional .cosmo.pb.DocumentData.DocumentMutualStat document_mv_stat = 42;
inline bool DocumentData::has_document_mv_stat() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void DocumentData::set_has_document_mv_stat() {
  _has_bits_[1] |= 0x00000001u;
}
inline void DocumentData::clear_has_document_mv_stat() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void DocumentData::clear_document_mv_stat() {
  if (document_mv_stat_ != NULL) document_mv_stat_->::cosmo::pb::DocumentData_DocumentMutualStat::Clear();
  clear_has_document_mv_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentMutualStat& DocumentData::document_mv_stat() const {
  const ::cosmo::pb::DocumentData_DocumentMutualStat* p = document_mv_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.document_mv_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentMutualStat*>(
      &::cosmo::pb::_DocumentData_DocumentMutualStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::mutable_document_mv_stat() {
  set_has_document_mv_stat();
  if (document_mv_stat_ == NULL) {
    _slow_mutable_document_mv_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.document_mv_stat)
  return document_mv_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentMutualStat* DocumentData::release_document_mv_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.document_mv_stat)
  clear_has_document_mv_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_document_mv_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentMutualStat* temp = document_mv_stat_;
    document_mv_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_document_mv_stat(::cosmo::pb::DocumentData_DocumentMutualStat* document_mv_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete document_mv_stat_;
  }
  if (document_mv_stat != NULL) {
    _slow_set_allocated_document_mv_stat(message_arena, &document_mv_stat);
  }
  document_mv_stat_ = document_mv_stat;
  if (document_mv_stat) {
    set_has_document_mv_stat();
  } else {
    clear_has_document_mv_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.document_mv_stat)
}

// optional .cosmo.pb.DocumentData.NewsTagsData news_tags_data = 43;
inline bool DocumentData::has_news_tags_data() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void DocumentData::set_has_news_tags_data() {
  _has_bits_[1] |= 0x00000002u;
}
inline void DocumentData::clear_has_news_tags_data() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void DocumentData::clear_news_tags_data() {
  if (news_tags_data_ != NULL) news_tags_data_->::cosmo::pb::DocumentData_NewsTagsData::Clear();
  clear_has_news_tags_data();
}
inline const ::cosmo::pb::DocumentData_NewsTagsData& DocumentData::news_tags_data() const {
  const ::cosmo::pb::DocumentData_NewsTagsData* p = news_tags_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.news_tags_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_NewsTagsData*>(
      &::cosmo::pb::_DocumentData_NewsTagsData_default_instance_);
}
inline ::cosmo::pb::DocumentData_NewsTagsData* DocumentData::mutable_news_tags_data() {
  set_has_news_tags_data();
  if (news_tags_data_ == NULL) {
    _slow_mutable_news_tags_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.news_tags_data)
  return news_tags_data_;
}
inline ::cosmo::pb::DocumentData_NewsTagsData* DocumentData::release_news_tags_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.news_tags_data)
  clear_has_news_tags_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_news_tags_data();
  } else {
    ::cosmo::pb::DocumentData_NewsTagsData* temp = news_tags_data_;
    news_tags_data_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_news_tags_data(::cosmo::pb::DocumentData_NewsTagsData* news_tags_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete news_tags_data_;
  }
  if (news_tags_data != NULL) {
    _slow_set_allocated_news_tags_data(message_arena, &news_tags_data);
  }
  news_tags_data_ = news_tags_data;
  if (news_tags_data) {
    set_has_news_tags_data();
  } else {
    clear_has_news_tags_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.news_tags_data)
}

// optional .cosmo.pb.DocumentData.NewsStoryData news_story_data = 44;
inline bool DocumentData::has_news_story_data() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void DocumentData::set_has_news_story_data() {
  _has_bits_[1] |= 0x00000004u;
}
inline void DocumentData::clear_has_news_story_data() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void DocumentData::clear_news_story_data() {
  if (news_story_data_ != NULL) news_story_data_->::cosmo::pb::DocumentData_NewsStoryData::Clear();
  clear_has_news_story_data();
}
inline const ::cosmo::pb::DocumentData_NewsStoryData& DocumentData::news_story_data() const {
  const ::cosmo::pb::DocumentData_NewsStoryData* p = news_story_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.news_story_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_NewsStoryData*>(
      &::cosmo::pb::_DocumentData_NewsStoryData_default_instance_);
}
inline ::cosmo::pb::DocumentData_NewsStoryData* DocumentData::mutable_news_story_data() {
  set_has_news_story_data();
  if (news_story_data_ == NULL) {
    _slow_mutable_news_story_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.news_story_data)
  return news_story_data_;
}
inline ::cosmo::pb::DocumentData_NewsStoryData* DocumentData::release_news_story_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.news_story_data)
  clear_has_news_story_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_news_story_data();
  } else {
    ::cosmo::pb::DocumentData_NewsStoryData* temp = news_story_data_;
    news_story_data_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_news_story_data(::cosmo::pb::DocumentData_NewsStoryData* news_story_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete news_story_data_;
  }
  if (news_story_data != NULL) {
    _slow_set_allocated_news_story_data(message_arena, &news_story_data);
  }
  news_story_data_ = news_story_data;
  if (news_story_data) {
    set_has_news_story_data();
  } else {
    clear_has_news_story_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.news_story_data)
}

// optional .cosmo.pb.DocumentData.NativeTargetIsActive native_target_is_active = 45;
inline bool DocumentData::has_native_target_is_active() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void DocumentData::set_has_native_target_is_active() {
  _has_bits_[1] |= 0x00000008u;
}
inline void DocumentData::clear_has_native_target_is_active() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void DocumentData::clear_native_target_is_active() {
  if (native_target_is_active_ != NULL) native_target_is_active_->::cosmo::pb::DocumentData_NativeTargetIsActive::Clear();
  clear_has_native_target_is_active();
}
inline const ::cosmo::pb::DocumentData_NativeTargetIsActive& DocumentData::native_target_is_active() const {
  const ::cosmo::pb::DocumentData_NativeTargetIsActive* p = native_target_is_active_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.native_target_is_active)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_NativeTargetIsActive*>(
      &::cosmo::pb::_DocumentData_NativeTargetIsActive_default_instance_);
}
inline ::cosmo::pb::DocumentData_NativeTargetIsActive* DocumentData::mutable_native_target_is_active() {
  set_has_native_target_is_active();
  if (native_target_is_active_ == NULL) {
    _slow_mutable_native_target_is_active();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.native_target_is_active)
  return native_target_is_active_;
}
inline ::cosmo::pb::DocumentData_NativeTargetIsActive* DocumentData::release_native_target_is_active() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.native_target_is_active)
  clear_has_native_target_is_active();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_native_target_is_active();
  } else {
    ::cosmo::pb::DocumentData_NativeTargetIsActive* temp = native_target_is_active_;
    native_target_is_active_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_native_target_is_active(::cosmo::pb::DocumentData_NativeTargetIsActive* native_target_is_active) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete native_target_is_active_;
  }
  if (native_target_is_active != NULL) {
    _slow_set_allocated_native_target_is_active(message_arena, &native_target_is_active);
  }
  native_target_is_active_ = native_target_is_active;
  if (native_target_is_active) {
    set_has_native_target_is_active();
  } else {
    clear_has_native_target_is_active();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.native_target_is_active)
}

// optional .cosmo.pb.DocumentData.DocumentLocationStat fast_location_stat = 46;
inline bool DocumentData::has_fast_location_stat() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void DocumentData::set_has_fast_location_stat() {
  _has_bits_[1] |= 0x00000010u;
}
inline void DocumentData::clear_has_fast_location_stat() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void DocumentData::clear_fast_location_stat() {
  if (fast_location_stat_ != NULL) fast_location_stat_->::cosmo::pb::DocumentData_DocumentLocationStat::Clear();
  clear_has_fast_location_stat();
}
inline const ::cosmo::pb::DocumentData_DocumentLocationStat& DocumentData::fast_location_stat() const {
  const ::cosmo::pb::DocumentData_DocumentLocationStat* p = fast_location_stat_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.fast_location_stat)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentLocationStat*>(
      &::cosmo::pb::_DocumentData_DocumentLocationStat_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::mutable_fast_location_stat() {
  set_has_fast_location_stat();
  if (fast_location_stat_ == NULL) {
    _slow_mutable_fast_location_stat();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.fast_location_stat)
  return fast_location_stat_;
}
inline ::cosmo::pb::DocumentData_DocumentLocationStat* DocumentData::release_fast_location_stat() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.fast_location_stat)
  clear_has_fast_location_stat();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fast_location_stat();
  } else {
    ::cosmo::pb::DocumentData_DocumentLocationStat* temp = fast_location_stat_;
    fast_location_stat_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_fast_location_stat(::cosmo::pb::DocumentData_DocumentLocationStat* fast_location_stat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fast_location_stat_;
  }
  if (fast_location_stat != NULL) {
    _slow_set_allocated_fast_location_stat(message_arena, &fast_location_stat);
  }
  fast_location_stat_ = fast_location_stat;
  if (fast_location_stat) {
    set_has_fast_location_stat();
  } else {
    clear_has_fast_location_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.fast_location_stat)
}

// optional .cosmo.pb.DocumentData.ContentPornFea content_porn_fea = 48;
inline bool DocumentData::has_content_porn_fea() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void DocumentData::set_has_content_porn_fea() {
  _has_bits_[1] |= 0x00000020u;
}
inline void DocumentData::clear_has_content_porn_fea() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void DocumentData::clear_content_porn_fea() {
  if (content_porn_fea_ != NULL) content_porn_fea_->::cosmo::pb::DocumentData_ContentPornFea::Clear();
  clear_has_content_porn_fea();
}
inline const ::cosmo::pb::DocumentData_ContentPornFea& DocumentData::content_porn_fea() const {
  const ::cosmo::pb::DocumentData_ContentPornFea* p = content_porn_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.content_porn_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_ContentPornFea*>(
      &::cosmo::pb::_DocumentData_ContentPornFea_default_instance_);
}
inline ::cosmo::pb::DocumentData_ContentPornFea* DocumentData::mutable_content_porn_fea() {
  set_has_content_porn_fea();
  if (content_porn_fea_ == NULL) {
    _slow_mutable_content_porn_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.content_porn_fea)
  return content_porn_fea_;
}
inline ::cosmo::pb::DocumentData_ContentPornFea* DocumentData::release_content_porn_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.content_porn_fea)
  clear_has_content_porn_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_content_porn_fea();
  } else {
    ::cosmo::pb::DocumentData_ContentPornFea* temp = content_porn_fea_;
    content_porn_fea_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_content_porn_fea(::cosmo::pb::DocumentData_ContentPornFea* content_porn_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_porn_fea_;
  }
  if (content_porn_fea != NULL) {
    _slow_set_allocated_content_porn_fea(message_arena, &content_porn_fea);
  }
  content_porn_fea_ = content_porn_fea;
  if (content_porn_fea) {
    set_has_content_porn_fea();
  } else {
    clear_has_content_porn_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.content_porn_fea)
}

// optional .cosmo.pb.DocumentData.ContentThemes content_themes = 49;
inline bool DocumentData::has_content_themes() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void DocumentData::set_has_content_themes() {
  _has_bits_[1] |= 0x00000040u;
}
inline void DocumentData::clear_has_content_themes() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void DocumentData::clear_content_themes() {
  if (content_themes_ != NULL) content_themes_->::cosmo::pb::DocumentData_ContentThemes::Clear();
  clear_has_content_themes();
}
inline const ::cosmo::pb::DocumentData_ContentThemes& DocumentData::content_themes() const {
  const ::cosmo::pb::DocumentData_ContentThemes* p = content_themes_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.content_themes)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_ContentThemes*>(
      &::cosmo::pb::_DocumentData_ContentThemes_default_instance_);
}
inline ::cosmo::pb::DocumentData_ContentThemes* DocumentData::mutable_content_themes() {
  set_has_content_themes();
  if (content_themes_ == NULL) {
    _slow_mutable_content_themes();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.content_themes)
  return content_themes_;
}
inline ::cosmo::pb::DocumentData_ContentThemes* DocumentData::release_content_themes() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.content_themes)
  clear_has_content_themes();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_content_themes();
  } else {
    ::cosmo::pb::DocumentData_ContentThemes* temp = content_themes_;
    content_themes_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_content_themes(::cosmo::pb::DocumentData_ContentThemes* content_themes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_themes_;
  }
  if (content_themes != NULL) {
    _slow_set_allocated_content_themes(message_arena, &content_themes);
  }
  content_themes_ = content_themes;
  if (content_themes) {
    set_has_content_themes();
  } else {
    clear_has_content_themes();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.content_themes)
}

// optional .cosmo.pb.DocumentData.StoryClusterId story_cluster_id = 50;
inline bool DocumentData::has_story_cluster_id() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void DocumentData::set_has_story_cluster_id() {
  _has_bits_[1] |= 0x00000080u;
}
inline void DocumentData::clear_has_story_cluster_id() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void DocumentData::clear_story_cluster_id() {
  if (story_cluster_id_ != NULL) story_cluster_id_->::cosmo::pb::DocumentData_StoryClusterId::Clear();
  clear_has_story_cluster_id();
}
inline const ::cosmo::pb::DocumentData_StoryClusterId& DocumentData::story_cluster_id() const {
  const ::cosmo::pb::DocumentData_StoryClusterId* p = story_cluster_id_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.story_cluster_id)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_StoryClusterId*>(
      &::cosmo::pb::_DocumentData_StoryClusterId_default_instance_);
}
inline ::cosmo::pb::DocumentData_StoryClusterId* DocumentData::mutable_story_cluster_id() {
  set_has_story_cluster_id();
  if (story_cluster_id_ == NULL) {
    _slow_mutable_story_cluster_id();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.story_cluster_id)
  return story_cluster_id_;
}
inline ::cosmo::pb::DocumentData_StoryClusterId* DocumentData::release_story_cluster_id() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.story_cluster_id)
  clear_has_story_cluster_id();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_story_cluster_id();
  } else {
    ::cosmo::pb::DocumentData_StoryClusterId* temp = story_cluster_id_;
    story_cluster_id_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_story_cluster_id(::cosmo::pb::DocumentData_StoryClusterId* story_cluster_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete story_cluster_id_;
  }
  if (story_cluster_id != NULL) {
    _slow_set_allocated_story_cluster_id(message_arena, &story_cluster_id);
  }
  story_cluster_id_ = story_cluster_id;
  if (story_cluster_id) {
    set_has_story_cluster_id();
  } else {
    clear_has_story_cluster_id();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.story_cluster_id)
}

// optional .cosmo.pb.DocumentData.DocumentKeywordsInfo document_keywords_info = 51;
inline bool DocumentData::has_document_keywords_info() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void DocumentData::set_has_document_keywords_info() {
  _has_bits_[1] |= 0x00000100u;
}
inline void DocumentData::clear_has_document_keywords_info() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void DocumentData::clear_document_keywords_info() {
  if (document_keywords_info_ != NULL) document_keywords_info_->::cosmo::pb::DocumentData_DocumentKeywordsInfo::Clear();
  clear_has_document_keywords_info();
}
inline const ::cosmo::pb::DocumentData_DocumentKeywordsInfo& DocumentData::document_keywords_info() const {
  const ::cosmo::pb::DocumentData_DocumentKeywordsInfo* p = document_keywords_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.document_keywords_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocumentKeywordsInfo*>(
      &::cosmo::pb::_DocumentData_DocumentKeywordsInfo_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocumentKeywordsInfo* DocumentData::mutable_document_keywords_info() {
  set_has_document_keywords_info();
  if (document_keywords_info_ == NULL) {
    _slow_mutable_document_keywords_info();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.document_keywords_info)
  return document_keywords_info_;
}
inline ::cosmo::pb::DocumentData_DocumentKeywordsInfo* DocumentData::release_document_keywords_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.document_keywords_info)
  clear_has_document_keywords_info();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_document_keywords_info();
  } else {
    ::cosmo::pb::DocumentData_DocumentKeywordsInfo* temp = document_keywords_info_;
    document_keywords_info_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_document_keywords_info(::cosmo::pb::DocumentData_DocumentKeywordsInfo* document_keywords_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete document_keywords_info_;
  }
  if (document_keywords_info != NULL) {
    _slow_set_allocated_document_keywords_info(message_arena, &document_keywords_info);
  }
  document_keywords_info_ = document_keywords_info;
  if (document_keywords_info) {
    set_has_document_keywords_info();
  } else {
    clear_has_document_keywords_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.document_keywords_info)
}

// optional .cosmo.pb.DocumentData.ImagePornFea image_porn_fea = 52;
inline bool DocumentData::has_image_porn_fea() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void DocumentData::set_has_image_porn_fea() {
  _has_bits_[1] |= 0x00000200u;
}
inline void DocumentData::clear_has_image_porn_fea() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void DocumentData::clear_image_porn_fea() {
  if (image_porn_fea_ != NULL) image_porn_fea_->::cosmo::pb::DocumentData_ImagePornFea::Clear();
  clear_has_image_porn_fea();
}
inline const ::cosmo::pb::DocumentData_ImagePornFea& DocumentData::image_porn_fea() const {
  const ::cosmo::pb::DocumentData_ImagePornFea* p = image_porn_fea_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.image_porn_fea)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_ImagePornFea*>(
      &::cosmo::pb::_DocumentData_ImagePornFea_default_instance_);
}
inline ::cosmo::pb::DocumentData_ImagePornFea* DocumentData::mutable_image_porn_fea() {
  set_has_image_porn_fea();
  if (image_porn_fea_ == NULL) {
    _slow_mutable_image_porn_fea();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.image_porn_fea)
  return image_porn_fea_;
}
inline ::cosmo::pb::DocumentData_ImagePornFea* DocumentData::release_image_porn_fea() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.image_porn_fea)
  clear_has_image_porn_fea();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_image_porn_fea();
  } else {
    ::cosmo::pb::DocumentData_ImagePornFea* temp = image_porn_fea_;
    image_porn_fea_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_image_porn_fea(::cosmo::pb::DocumentData_ImagePornFea* image_porn_fea) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_porn_fea_;
  }
  if (image_porn_fea != NULL) {
    _slow_set_allocated_image_porn_fea(message_arena, &image_porn_fea);
  }
  image_porn_fea_ = image_porn_fea;
  if (image_porn_fea) {
    set_has_image_porn_fea();
  } else {
    clear_has_image_porn_fea();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.image_porn_fea)
}

// optional .cosmo.pb.DocumentData.FetcherFirstmeet fetcherFirstmeet = 53;
inline bool DocumentData::has_fetcherfirstmeet() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void DocumentData::set_has_fetcherfirstmeet() {
  _has_bits_[1] |= 0x00000400u;
}
inline void DocumentData::clear_has_fetcherfirstmeet() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void DocumentData::clear_fetcherfirstmeet() {
  if (fetcherfirstmeet_ != NULL) fetcherfirstmeet_->::cosmo::pb::DocumentData_FetcherFirstmeet::Clear();
  clear_has_fetcherfirstmeet();
}
inline const ::cosmo::pb::DocumentData_FetcherFirstmeet& DocumentData::fetcherfirstmeet() const {
  const ::cosmo::pb::DocumentData_FetcherFirstmeet* p = fetcherfirstmeet_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.fetcherFirstmeet)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_FetcherFirstmeet*>(
      &::cosmo::pb::_DocumentData_FetcherFirstmeet_default_instance_);
}
inline ::cosmo::pb::DocumentData_FetcherFirstmeet* DocumentData::mutable_fetcherfirstmeet() {
  set_has_fetcherfirstmeet();
  if (fetcherfirstmeet_ == NULL) {
    _slow_mutable_fetcherfirstmeet();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.fetcherFirstmeet)
  return fetcherfirstmeet_;
}
inline ::cosmo::pb::DocumentData_FetcherFirstmeet* DocumentData::release_fetcherfirstmeet() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.fetcherFirstmeet)
  clear_has_fetcherfirstmeet();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_fetcherfirstmeet();
  } else {
    ::cosmo::pb::DocumentData_FetcherFirstmeet* temp = fetcherfirstmeet_;
    fetcherfirstmeet_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_fetcherfirstmeet(::cosmo::pb::DocumentData_FetcherFirstmeet* fetcherfirstmeet) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fetcherfirstmeet_;
  }
  if (fetcherfirstmeet != NULL) {
    _slow_set_allocated_fetcherfirstmeet(message_arena, &fetcherfirstmeet);
  }
  fetcherfirstmeet_ = fetcherfirstmeet;
  if (fetcherfirstmeet) {
    set_has_fetcherfirstmeet();
  } else {
    clear_has_fetcherfirstmeet();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.fetcherFirstmeet)
}

// optional .cosmo.pb.DocumentData.FetcherPubdate pubdate = 54;
inline bool DocumentData::has_pubdate() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void DocumentData::set_has_pubdate() {
  _has_bits_[1] |= 0x00000800u;
}
inline void DocumentData::clear_has_pubdate() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void DocumentData::clear_pubdate() {
  if (pubdate_ != NULL) pubdate_->::cosmo::pb::DocumentData_FetcherPubdate::Clear();
  clear_has_pubdate();
}
inline const ::cosmo::pb::DocumentData_FetcherPubdate& DocumentData::pubdate() const {
  const ::cosmo::pb::DocumentData_FetcherPubdate* p = pubdate_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.pubdate)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_FetcherPubdate*>(
      &::cosmo::pb::_DocumentData_FetcherPubdate_default_instance_);
}
inline ::cosmo::pb::DocumentData_FetcherPubdate* DocumentData::mutable_pubdate() {
  set_has_pubdate();
  if (pubdate_ == NULL) {
    _slow_mutable_pubdate();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.pubdate)
  return pubdate_;
}
inline ::cosmo::pb::DocumentData_FetcherPubdate* DocumentData::release_pubdate() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.pubdate)
  clear_has_pubdate();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_pubdate();
  } else {
    ::cosmo::pb::DocumentData_FetcherPubdate* temp = pubdate_;
    pubdate_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_pubdate(::cosmo::pb::DocumentData_FetcherPubdate* pubdate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubdate_;
  }
  if (pubdate != NULL) {
    _slow_set_allocated_pubdate(message_arena, &pubdate);
  }
  pubdate_ = pubdate;
  if (pubdate) {
    set_has_pubdate();
  } else {
    clear_has_pubdate();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.pubdate)
}

// optional .cosmo.pb.DocumentData.FreshnessData freshness_data = 55;
inline bool DocumentData::has_freshness_data() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void DocumentData::set_has_freshness_data() {
  _has_bits_[1] |= 0x00001000u;
}
inline void DocumentData::clear_has_freshness_data() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void DocumentData::clear_freshness_data() {
  if (freshness_data_ != NULL) freshness_data_->::cosmo::pb::DocumentData_FreshnessData::Clear();
  clear_has_freshness_data();
}
inline const ::cosmo::pb::DocumentData_FreshnessData& DocumentData::freshness_data() const {
  const ::cosmo::pb::DocumentData_FreshnessData* p = freshness_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.freshness_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_FreshnessData*>(
      &::cosmo::pb::_DocumentData_FreshnessData_default_instance_);
}
inline ::cosmo::pb::DocumentData_FreshnessData* DocumentData::mutable_freshness_data() {
  set_has_freshness_data();
  if (freshness_data_ == NULL) {
    _slow_mutable_freshness_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.freshness_data)
  return freshness_data_;
}
inline ::cosmo::pb::DocumentData_FreshnessData* DocumentData::release_freshness_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.freshness_data)
  clear_has_freshness_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_freshness_data();
  } else {
    ::cosmo::pb::DocumentData_FreshnessData* temp = freshness_data_;
    freshness_data_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_freshness_data(::cosmo::pb::DocumentData_FreshnessData* freshness_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete freshness_data_;
  }
  if (freshness_data != NULL) {
    _slow_set_allocated_freshness_data(message_arena, &freshness_data);
  }
  freshness_data_ = freshness_data;
  if (freshness_data) {
    set_has_freshness_data();
  } else {
    clear_has_freshness_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.freshness_data)
}

// optional .cosmo.pb.DocumentData.DocState state = 56;
inline bool DocumentData::has_state() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void DocumentData::set_has_state() {
  _has_bits_[1] |= 0x00002000u;
}
inline void DocumentData::clear_has_state() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void DocumentData::clear_state() {
  if (state_ != NULL) state_->::cosmo::pb::DocumentData_DocState::Clear();
  clear_has_state();
}
inline const ::cosmo::pb::DocumentData_DocState& DocumentData::state() const {
  const ::cosmo::pb::DocumentData_DocState* p = state_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.state)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_DocState*>(
      &::cosmo::pb::_DocumentData_DocState_default_instance_);
}
inline ::cosmo::pb::DocumentData_DocState* DocumentData::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    _slow_mutable_state();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.state)
  return state_;
}
inline ::cosmo::pb::DocumentData_DocState* DocumentData::release_state() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.state)
  clear_has_state();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_state();
  } else {
    ::cosmo::pb::DocumentData_DocState* temp = state_;
    state_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_state(::cosmo::pb::DocumentData_DocState* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state != NULL) {
    _slow_set_allocated_state(message_arena, &state);
  }
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.state)
}

// optional .cosmo.pb.DocumentData.RisksFields risks_fields = 57;
inline bool DocumentData::has_risks_fields() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void DocumentData::set_has_risks_fields() {
  _has_bits_[1] |= 0x00004000u;
}
inline void DocumentData::clear_has_risks_fields() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void DocumentData::clear_risks_fields() {
  if (risks_fields_ != NULL) risks_fields_->::cosmo::pb::DocumentData_RisksFields::Clear();
  clear_has_risks_fields();
}
inline const ::cosmo::pb::DocumentData_RisksFields& DocumentData::risks_fields() const {
  const ::cosmo::pb::DocumentData_RisksFields* p = risks_fields_;
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.risks_fields)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData_RisksFields*>(
      &::cosmo::pb::_DocumentData_RisksFields_default_instance_);
}
inline ::cosmo::pb::DocumentData_RisksFields* DocumentData::mutable_risks_fields() {
  set_has_risks_fields();
  if (risks_fields_ == NULL) {
    _slow_mutable_risks_fields();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.DocumentData.risks_fields)
  return risks_fields_;
}
inline ::cosmo::pb::DocumentData_RisksFields* DocumentData::release_risks_fields() {
  // @@protoc_insertion_point(field_release:cosmo.pb.DocumentData.risks_fields)
  clear_has_risks_fields();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_risks_fields();
  } else {
    ::cosmo::pb::DocumentData_RisksFields* temp = risks_fields_;
    risks_fields_ = NULL;
    return temp;
  }
}
inline  void DocumentData::set_allocated_risks_fields(::cosmo::pb::DocumentData_RisksFields* risks_fields) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete risks_fields_;
  }
  if (risks_fields != NULL) {
    _slow_set_allocated_risks_fields(message_arena, &risks_fields);
  }
  risks_fields_ = risks_fields;
  if (risks_fields) {
    set_has_risks_fields();
  } else {
    clear_has_risks_fields();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.DocumentData.risks_fields)
}

// repeated int32 doc_region_ids = 58;
inline int DocumentData::doc_region_ids_size() const {
  return doc_region_ids_.size();
}
inline void DocumentData::clear_doc_region_ids() {
  doc_region_ids_.Clear();
}
inline ::google::protobuf::int32 DocumentData::doc_region_ids(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentData.doc_region_ids)
  return doc_region_ids_.Get(index);
}
inline void DocumentData::set_doc_region_ids(int index, ::google::protobuf::int32 value) {
  doc_region_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentData.doc_region_ids)
}
inline void DocumentData::add_doc_region_ids(::google::protobuf::int32 value) {
  doc_region_ids_.Add(value);
  // @@protoc_insertion_point(field_add:cosmo.pb.DocumentData.doc_region_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DocumentData::doc_region_ids() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.DocumentData.doc_region_ids)
  return doc_region_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DocumentData::mutable_doc_region_ids() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.DocumentData.doc_region_ids)
  return &doc_region_ids_;
}

// -------------------------------------------------------------------

// DocumentSourceLink

// required int64 source_id = 1;
inline bool DocumentSourceLink::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DocumentSourceLink::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DocumentSourceLink::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DocumentSourceLink::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 DocumentSourceLink::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentSourceLink.source_id)
  return source_id_;
}
inline void DocumentSourceLink::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentSourceLink.source_id)
}

// required int64 doc_id = 2;
inline bool DocumentSourceLink::has_doc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DocumentSourceLink::set_has_doc_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DocumentSourceLink::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DocumentSourceLink::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 DocumentSourceLink::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.DocumentSourceLink.doc_id)
  return doc_id_;
}
inline void DocumentSourceLink::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.DocumentSourceLink.doc_id)
}

// -------------------------------------------------------------------

// StorageEvent_Data

// optional .cosmo.pb.UserData user_data = 1;
inline bool StorageEvent_Data::has_user_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageEvent_Data::set_has_user_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageEvent_Data::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageEvent_Data::clear_user_data() {
  if (user_data_ != NULL) user_data_->::cosmo::pb::UserData::Clear();
  clear_has_user_data();
}
inline const ::cosmo::pb::UserData& StorageEvent_Data::user_data() const {
  const ::cosmo::pb::UserData* p = user_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.Data.user_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::UserData*>(
      &::cosmo::pb::_UserData_default_instance_);
}
inline ::cosmo::pb::UserData* StorageEvent_Data::mutable_user_data() {
  set_has_user_data();
  if (user_data_ == NULL) {
    _slow_mutable_user_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StorageEvent.Data.user_data)
  return user_data_;
}
inline ::cosmo::pb::UserData* StorageEvent_Data::release_user_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StorageEvent.Data.user_data)
  clear_has_user_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_user_data();
  } else {
    ::cosmo::pb::UserData* temp = user_data_;
    user_data_ = NULL;
    return temp;
  }
}
inline  void StorageEvent_Data::set_allocated_user_data(::cosmo::pb::UserData* user_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_data_;
  }
  if (user_data != NULL) {
    _slow_set_allocated_user_data(message_arena, &user_data);
  }
  user_data_ = user_data;
  if (user_data) {
    set_has_user_data();
  } else {
    clear_has_user_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StorageEvent.Data.user_data)
}

// optional .cosmo.pb.SourceData source_data = 2;
inline bool StorageEvent_Data::has_source_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageEvent_Data::set_has_source_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageEvent_Data::clear_has_source_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageEvent_Data::clear_source_data() {
  if (source_data_ != NULL) source_data_->::cosmo::pb::SourceData::Clear();
  clear_has_source_data();
}
inline const ::cosmo::pb::SourceData& StorageEvent_Data::source_data() const {
  const ::cosmo::pb::SourceData* p = source_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.Data.source_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData*>(
      &::cosmo::pb::_SourceData_default_instance_);
}
inline ::cosmo::pb::SourceData* StorageEvent_Data::mutable_source_data() {
  set_has_source_data();
  if (source_data_ == NULL) {
    _slow_mutable_source_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StorageEvent.Data.source_data)
  return source_data_;
}
inline ::cosmo::pb::SourceData* StorageEvent_Data::release_source_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StorageEvent.Data.source_data)
  clear_has_source_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_source_data();
  } else {
    ::cosmo::pb::SourceData* temp = source_data_;
    source_data_ = NULL;
    return temp;
  }
}
inline  void StorageEvent_Data::set_allocated_source_data(::cosmo::pb::SourceData* source_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_data_;
  }
  if (source_data != NULL) {
    _slow_set_allocated_source_data(message_arena, &source_data);
  }
  source_data_ = source_data;
  if (source_data) {
    set_has_source_data();
  } else {
    clear_has_source_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StorageEvent.Data.source_data)
}

// optional .cosmo.pb.DocumentData document_data = 3;
inline bool StorageEvent_Data::has_document_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageEvent_Data::set_has_document_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageEvent_Data::clear_has_document_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageEvent_Data::clear_document_data() {
  if (document_data_ != NULL) document_data_->::cosmo::pb::DocumentData::Clear();
  clear_has_document_data();
}
inline const ::cosmo::pb::DocumentData& StorageEvent_Data::document_data() const {
  const ::cosmo::pb::DocumentData* p = document_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.Data.document_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData*>(
      &::cosmo::pb::_DocumentData_default_instance_);
}
inline ::cosmo::pb::DocumentData* StorageEvent_Data::mutable_document_data() {
  set_has_document_data();
  if (document_data_ == NULL) {
    _slow_mutable_document_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StorageEvent.Data.document_data)
  return document_data_;
}
inline ::cosmo::pb::DocumentData* StorageEvent_Data::release_document_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StorageEvent.Data.document_data)
  clear_has_document_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_document_data();
  } else {
    ::cosmo::pb::DocumentData* temp = document_data_;
    document_data_ = NULL;
    return temp;
  }
}
inline  void StorageEvent_Data::set_allocated_document_data(::cosmo::pb::DocumentData* document_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete document_data_;
  }
  if (document_data != NULL) {
    _slow_set_allocated_document_data(message_arena, &document_data);
  }
  document_data_ = document_data;
  if (document_data) {
    set_has_document_data();
  } else {
    clear_has_document_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StorageEvent.Data.document_data)
}

// optional .cosmo.pb.DocumentSourceLink document_source_link = 4;
inline bool StorageEvent_Data::has_document_source_link() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StorageEvent_Data::set_has_document_source_link() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StorageEvent_Data::clear_has_document_source_link() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StorageEvent_Data::clear_document_source_link() {
  if (document_source_link_ != NULL) document_source_link_->::cosmo::pb::DocumentSourceLink::Clear();
  clear_has_document_source_link();
}
inline const ::cosmo::pb::DocumentSourceLink& StorageEvent_Data::document_source_link() const {
  const ::cosmo::pb::DocumentSourceLink* p = document_source_link_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.Data.document_source_link)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentSourceLink*>(
      &::cosmo::pb::_DocumentSourceLink_default_instance_);
}
inline ::cosmo::pb::DocumentSourceLink* StorageEvent_Data::mutable_document_source_link() {
  set_has_document_source_link();
  if (document_source_link_ == NULL) {
    _slow_mutable_document_source_link();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StorageEvent.Data.document_source_link)
  return document_source_link_;
}
inline ::cosmo::pb::DocumentSourceLink* StorageEvent_Data::release_document_source_link() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StorageEvent.Data.document_source_link)
  clear_has_document_source_link();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_document_source_link();
  } else {
    ::cosmo::pb::DocumentSourceLink* temp = document_source_link_;
    document_source_link_ = NULL;
    return temp;
  }
}
inline  void StorageEvent_Data::set_allocated_document_source_link(::cosmo::pb::DocumentSourceLink* document_source_link) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete document_source_link_;
  }
  if (document_source_link != NULL) {
    _slow_set_allocated_document_source_link(message_arena, &document_source_link);
  }
  document_source_link_ = document_source_link;
  if (document_source_link) {
    set_has_document_source_link();
  } else {
    clear_has_document_source_link();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StorageEvent.Data.document_source_link)
}

// -------------------------------------------------------------------

// StorageEvent

// optional .cosmo.pb.StorageEvent.Type type = 1 [default = CREATE_OR_UPDATE];
inline bool StorageEvent::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageEvent::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cosmo::pb::StorageEvent_Type StorageEvent::type() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.type)
  return static_cast< ::cosmo::pb::StorageEvent_Type >(type_);
}
inline void StorageEvent::set_type(::cosmo::pb::StorageEvent_Type value) {
  assert(::cosmo::pb::StorageEvent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.StorageEvent.type)
}

// required int32 event_time = 2;
inline bool StorageEvent::has_event_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageEvent::set_has_event_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageEvent::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageEvent::clear_event_time() {
  event_time_ = 0;
  clear_has_event_time();
}
inline ::google::protobuf::int32 StorageEvent::event_time() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.event_time)
  return event_time_;
}
inline void StorageEvent::set_event_time(::google::protobuf::int32 value) {
  set_has_event_time();
  event_time_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.StorageEvent.event_time)
}

// required .cosmo.pb.StorageEvent.Data data = 3;
inline bool StorageEvent::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageEvent::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageEvent::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageEvent::clear_data() {
  if (data_ != NULL) data_->::cosmo::pb::StorageEvent_Data::Clear();
  clear_has_data();
}
inline const ::cosmo::pb::StorageEvent_Data& StorageEvent::data() const {
  const ::cosmo::pb::StorageEvent_Data* p = data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.StorageEvent.data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::StorageEvent_Data*>(
      &::cosmo::pb::_StorageEvent_Data_default_instance_);
}
inline ::cosmo::pb::StorageEvent_Data* StorageEvent::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    _slow_mutable_data();
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.StorageEvent.data)
  return data_;
}
inline ::cosmo::pb::StorageEvent_Data* StorageEvent::release_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.StorageEvent.data)
  clear_has_data();
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_data();
  } else {
    ::cosmo::pb::StorageEvent_Data* temp = data_;
    data_ = NULL;
    return temp;
  }
}
inline  void StorageEvent::set_allocated_data(::cosmo::pb::StorageEvent_Data* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data != NULL) {
    _slow_set_allocated_data(message_arena, &data);
  }
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.StorageEvent.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace cosmo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus>() {
  return ::cosmo::pb::UserData_SubscriptionInfo_SubscriptionItem_SubscriptionStatus_descriptor();
}
template <> struct is_proto_enum< ::cosmo::pb::SourceData_SourceInfo_SourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmo::pb::SourceData_SourceInfo_SourceType>() {
  return ::cosmo::pb::SourceData_SourceInfo_SourceType_descriptor();
}
template <> struct is_proto_enum< ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType>() {
  return ::cosmo::pb::DocumentData_DocumentKeywordsInfo_KeywordType_descriptor();
}
template <> struct is_proto_enum< ::cosmo::pb::StorageEvent_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmo::pb::StorageEvent_Type>() {
  return ::cosmo::pb::StorageEvent_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cosmo_2eproto__INCLUDED
