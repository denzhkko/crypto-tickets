// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_binlog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cosmo_binlog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cosmo {
namespace pb {
class PropertyVersionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PropertyVersion>
     _instance;
} _PropertyVersion_default_instance_;
class BinLogEvent_EventDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BinLogEvent_EventData>
     _instance;
} _BinLogEvent_EventData_default_instance_;
class BinLogEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BinLogEvent>
     _instance;
} _BinLogEvent_default_instance_;

namespace protobuf_cosmo_5fbinlog_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVersion, provider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVersion, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVersion, version_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent_EventData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent_EventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent_EventData, source_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent_EventData, document_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent_EventData, document_source_link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent_EventData, property_version_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent, epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent, shard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinLogEvent, data_),
  1,
  2,
  3,
  4,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(PropertyVersion)},
  { 11, 20, sizeof(BinLogEvent_EventData)},
  { 24, 34, sizeof(BinLogEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropertyVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BinLogEvent_EventData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BinLogEvent_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cosmo_binlog.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cosmo::pb::protobuf_cosmo_2eproto::InitDefaults();
  _PropertyVersion_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PropertyVersion_default_instance_);_BinLogEvent_EventData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BinLogEvent_EventData_default_instance_);_BinLogEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BinLogEvent_default_instance_);_BinLogEvent_EventData_default_instance_._instance.get_mutable()->source_data_ = const_cast< ::cosmo::pb::SourceData*>(
      ::cosmo::pb::SourceData::internal_default_instance());
  _BinLogEvent_EventData_default_instance_._instance.get_mutable()->document_data_ = const_cast< ::cosmo::pb::DocumentData*>(
      ::cosmo::pb::DocumentData::internal_default_instance());
  _BinLogEvent_EventData_default_instance_._instance.get_mutable()->document_source_link_ = const_cast< ::cosmo::pb::DocumentSourceLink*>(
      ::cosmo::pb::DocumentSourceLink::internal_default_instance());
  _BinLogEvent_EventData_default_instance_._instance.get_mutable()->property_version_ = const_cast< ::cosmo::pb::PropertyVersion*>(
      ::cosmo::pb::PropertyVersion::internal_default_instance());
  _BinLogEvent_default_instance_._instance.get_mutable()->data_ = const_cast< ::cosmo::pb::BinLogEvent_EventData*>(
      ::cosmo::pb::BinLogEvent_EventData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022cosmo_binlog.proto\022\010cosmo.pb\032\013cosmo.pr"
      "oto\"\231\001\n\017PropertyVersion\0224\n\010provider\030\001 \002("
      "\0162\".cosmo.pb.PropertyVersion.Provider\022\014\n"
      "\004name\030\002 \002(\t\022\017\n\007version\030\003 \002(\r\"1\n\010Provider"
      "\022\013\n\007UNKNOWN\020\000\022\n\n\006SOURCE\020\001\022\014\n\010DOCUMENT\020\002\""
      "\217\004\n\013BinLogEvent\022\021\n\ttimestamp\030\001 \002(\003\022\r\n\005ep"
      "och\030\002 \002(\003\022\r\n\005shard\030\003 \002(\005\022-\n\004type\030\004 \002(\0162\037"
      ".cosmo.pb.BinLogEvent.EventType\022-\n\004data\030"
      "\005 \001(\0132\037.cosmo.pb.BinLogEvent.EventData\032\326"
      "\001\n\tEventData\022)\n\013source_data\030\001 \001(\0132\024.cosm"
      "o.pb.SourceData\022-\n\rdocument_data\030\002 \001(\0132\026"
      ".cosmo.pb.DocumentData\022:\n\024document_sourc"
      "e_link\030\003 \001(\0132\034.cosmo.pb.DocumentSourceLi"
      "nk\0223\n\020property_version\030\004 \001(\0132\031.cosmo.pb."
      "PropertyVersion\"\227\001\n\tEventType\022\021\n\rUNKNOWN"
      "_EVENT\020\000\022\r\n\tLOG_START\020\001\022\017\n\013WRITE_EVENT\020\002"
      "\022\020\n\014UPDATE_EVENT\020\003\022\030\n\024START_SNAPSHOT_EVE"
      "NT\020\004\022\031\n\025FINISH_SNAPSHOT_EVENT\020\005\022\020\n\014DELET"
      "E_EVENT\020\006"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 729);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cosmo_binlog.proto", &protobuf_RegisterTypes);
  ::cosmo::pb::protobuf_cosmo_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cosmo_5fbinlog_2eproto

const ::google::protobuf::EnumDescriptor* PropertyVersion_Provider_descriptor() {
  protobuf_cosmo_5fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fbinlog_2eproto::file_level_enum_descriptors[0];
}
bool PropertyVersion_Provider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PropertyVersion_Provider PropertyVersion::UNKNOWN;
const PropertyVersion_Provider PropertyVersion::SOURCE;
const PropertyVersion_Provider PropertyVersion::DOCUMENT;
const PropertyVersion_Provider PropertyVersion::Provider_MIN;
const PropertyVersion_Provider PropertyVersion::Provider_MAX;
const int PropertyVersion::Provider_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BinLogEvent_EventType_descriptor() {
  protobuf_cosmo_5fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fbinlog_2eproto::file_level_enum_descriptors[1];
}
bool BinLogEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BinLogEvent_EventType BinLogEvent::UNKNOWN_EVENT;
const BinLogEvent_EventType BinLogEvent::LOG_START;
const BinLogEvent_EventType BinLogEvent::WRITE_EVENT;
const BinLogEvent_EventType BinLogEvent::UPDATE_EVENT;
const BinLogEvent_EventType BinLogEvent::START_SNAPSHOT_EVENT;
const BinLogEvent_EventType BinLogEvent::FINISH_SNAPSHOT_EVENT;
const BinLogEvent_EventType BinLogEvent::DELETE_EVENT;
const BinLogEvent_EventType BinLogEvent::EventType_MIN;
const BinLogEvent_EventType BinLogEvent::EventType_MAX;
const int BinLogEvent::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyVersion::kProviderFieldNumber;
const int PropertyVersion::kNameFieldNumber;
const int PropertyVersion::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyVersion::PropertyVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fbinlog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.PropertyVersion)
}
PropertyVersion::PropertyVersion(const PropertyVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&provider_, &from.provider_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.PropertyVersion)
}

void PropertyVersion::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&provider_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&provider_)) + sizeof(version_));
}

PropertyVersion::~PropertyVersion() {
  // @@protoc_insertion_point(destructor:cosmo.pb.PropertyVersion)
  SharedDtor();
}

void PropertyVersion::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PropertyVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyVersion::descriptor() {
  protobuf_cosmo_5fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fbinlog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropertyVersion& PropertyVersion::default_instance() {
  protobuf_cosmo_5fbinlog_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropertyVersion* PropertyVersion::New(::google::protobuf::Arena* arena) const {
  PropertyVersion* n = new PropertyVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.PropertyVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&provider_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&provider_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.PropertyVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cosmo.pb.PropertyVersion.Provider provider = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cosmo::pb::PropertyVersion_Provider_IsValid(value)) {
            set_provider(static_cast< ::cosmo::pb::PropertyVersion_Provider >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cosmo.pb.PropertyVersion.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.PropertyVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.PropertyVersion)
  return false;
#undef DO_
}

void PropertyVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.PropertyVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cosmo.pb.PropertyVersion.Provider provider = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->provider(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PropertyVersion.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.PropertyVersion)
}

::google::protobuf::uint8* PropertyVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.PropertyVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .cosmo.pb.PropertyVersion.Provider provider = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->provider(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cosmo.pb.PropertyVersion.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.PropertyVersion)
  return target;
}

size_t PropertyVersion::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.PropertyVersion)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_provider()) {
    // required .cosmo.pb.PropertyVersion.Provider provider = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());
  }

  if (has_version()) {
    // required uint32 version = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t PropertyVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.PropertyVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .cosmo.pb.PropertyVersion.Provider provider = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->provider());

    // required uint32 version = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.PropertyVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.PropertyVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.PropertyVersion)
    MergeFrom(*source);
  }
}

void PropertyVersion::MergeFrom(const PropertyVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.PropertyVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      provider_ = from.provider_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PropertyVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.PropertyVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyVersion::CopyFrom(const PropertyVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.PropertyVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PropertyVersion::Swap(PropertyVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyVersion::InternalSwap(PropertyVersion* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(provider_, other->provider_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyVersion::GetMetadata() const {
  protobuf_cosmo_5fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fbinlog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyVersion

// required .cosmo.pb.PropertyVersion.Provider provider = 1;
bool PropertyVersion::has_provider() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyVersion::set_has_provider() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyVersion::clear_has_provider() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyVersion::clear_provider() {
  provider_ = 0;
  clear_has_provider();
}
::cosmo::pb::PropertyVersion_Provider PropertyVersion::provider() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PropertyVersion.provider)
  return static_cast< ::cosmo::pb::PropertyVersion_Provider >(provider_);
}
void PropertyVersion::set_provider(::cosmo::pb::PropertyVersion_Provider value) {
  assert(::cosmo::pb::PropertyVersion_Provider_IsValid(value));
  set_has_provider();
  provider_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PropertyVersion.provider)
}

// required string name = 2;
bool PropertyVersion::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyVersion::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyVersion::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyVersion::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PropertyVersion::name() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PropertyVersion.name)
  return name_.GetNoArena();
}
void PropertyVersion::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmo.pb.PropertyVersion.name)
}
#if LANG_CXX11
void PropertyVersion::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmo.pb.PropertyVersion.name)
}
#endif
void PropertyVersion::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmo.pb.PropertyVersion.name)
}
void PropertyVersion::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmo.pb.PropertyVersion.name)
}
::std::string* PropertyVersion::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:cosmo.pb.PropertyVersion.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyVersion::release_name() {
  // @@protoc_insertion_point(field_release:cosmo.pb.PropertyVersion.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyVersion::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.PropertyVersion.name)
}

// required uint32 version = 3;
bool PropertyVersion::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PropertyVersion::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void PropertyVersion::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void PropertyVersion::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 PropertyVersion::version() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.PropertyVersion.version)
  return version_;
}
void PropertyVersion::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.PropertyVersion.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinLogEvent_EventData::kSourceDataFieldNumber;
const int BinLogEvent_EventData::kDocumentDataFieldNumber;
const int BinLogEvent_EventData::kDocumentSourceLinkFieldNumber;
const int BinLogEvent_EventData::kPropertyVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinLogEvent_EventData::BinLogEvent_EventData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fbinlog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.BinLogEvent.EventData)
}
BinLogEvent_EventData::BinLogEvent_EventData(const BinLogEvent_EventData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_source_data()) {
    source_data_ = new ::cosmo::pb::SourceData(*from.source_data_);
  } else {
    source_data_ = NULL;
  }
  if (from.has_document_data()) {
    document_data_ = new ::cosmo::pb::DocumentData(*from.document_data_);
  } else {
    document_data_ = NULL;
  }
  if (from.has_document_source_link()) {
    document_source_link_ = new ::cosmo::pb::DocumentSourceLink(*from.document_source_link_);
  } else {
    document_source_link_ = NULL;
  }
  if (from.has_property_version()) {
    property_version_ = new ::cosmo::pb::PropertyVersion(*from.property_version_);
  } else {
    property_version_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.BinLogEvent.EventData)
}

void BinLogEvent_EventData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&source_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&property_version_) -
      reinterpret_cast<char*>(&source_data_)) + sizeof(property_version_));
}

BinLogEvent_EventData::~BinLogEvent_EventData() {
  // @@protoc_insertion_point(destructor:cosmo.pb.BinLogEvent.EventData)
  SharedDtor();
}

void BinLogEvent_EventData::SharedDtor() {
  if (this != internal_default_instance()) delete source_data_;
  if (this != internal_default_instance()) delete document_data_;
  if (this != internal_default_instance()) delete document_source_link_;
  if (this != internal_default_instance()) delete property_version_;
}

void BinLogEvent_EventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinLogEvent_EventData::descriptor() {
  protobuf_cosmo_5fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fbinlog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BinLogEvent_EventData& BinLogEvent_EventData::default_instance() {
  protobuf_cosmo_5fbinlog_2eproto::InitDefaults();
  return *internal_default_instance();
}

BinLogEvent_EventData* BinLogEvent_EventData::New(::google::protobuf::Arena* arena) const {
  BinLogEvent_EventData* n = new BinLogEvent_EventData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BinLogEvent_EventData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.BinLogEvent.EventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(source_data_ != NULL);
      source_data_->::cosmo::pb::SourceData::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(document_data_ != NULL);
      document_data_->::cosmo::pb::DocumentData::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(document_source_link_ != NULL);
      document_source_link_->::cosmo::pb::DocumentSourceLink::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(property_version_ != NULL);
      property_version_->::cosmo::pb::PropertyVersion::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BinLogEvent_EventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.BinLogEvent.EventData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cosmo.pb.SourceData source_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentData document_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentSourceLink document_source_link = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_source_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.PropertyVersion property_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.BinLogEvent.EventData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.BinLogEvent.EventData)
  return false;
#undef DO_
}

void BinLogEvent_EventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.BinLogEvent.EventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.SourceData source_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->source_data_, output);
  }

  // optional .cosmo.pb.DocumentData document_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->document_data_, output);
  }

  // optional .cosmo.pb.DocumentSourceLink document_source_link = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->document_source_link_, output);
  }

  // optional .cosmo.pb.PropertyVersion property_version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->property_version_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.BinLogEvent.EventData)
}

::google::protobuf::uint8* BinLogEvent_EventData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.BinLogEvent.EventData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.SourceData source_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->source_data_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentData document_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->document_data_, deterministic, target);
  }

  // optional .cosmo.pb.DocumentSourceLink document_source_link = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->document_source_link_, deterministic, target);
  }

  // optional .cosmo.pb.PropertyVersion property_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->property_version_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.BinLogEvent.EventData)
  return target;
}

size_t BinLogEvent_EventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.BinLogEvent.EventData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .cosmo.pb.SourceData source_data = 1;
    if (has_source_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->source_data_);
    }

    // optional .cosmo.pb.DocumentData document_data = 2;
    if (has_document_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_data_);
    }

    // optional .cosmo.pb.DocumentSourceLink document_source_link = 3;
    if (has_document_source_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_source_link_);
    }

    // optional .cosmo.pb.PropertyVersion property_version = 4;
    if (has_property_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->property_version_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinLogEvent_EventData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.BinLogEvent.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  const BinLogEvent_EventData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BinLogEvent_EventData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.BinLogEvent.EventData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.BinLogEvent.EventData)
    MergeFrom(*source);
  }
}

void BinLogEvent_EventData::MergeFrom(const BinLogEvent_EventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.BinLogEvent.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_source_data()->::cosmo::pb::SourceData::MergeFrom(from.source_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_document_data()->::cosmo::pb::DocumentData::MergeFrom(from.document_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_document_source_link()->::cosmo::pb::DocumentSourceLink::MergeFrom(from.document_source_link());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_property_version()->::cosmo::pb::PropertyVersion::MergeFrom(from.property_version());
    }
  }
}

void BinLogEvent_EventData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.BinLogEvent.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinLogEvent_EventData::CopyFrom(const BinLogEvent_EventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.BinLogEvent.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinLogEvent_EventData::IsInitialized() const {
  if (has_source_data()) {
    if (!this->source_data_->IsInitialized()) return false;
  }
  if (has_document_data()) {
    if (!this->document_data_->IsInitialized()) return false;
  }
  if (has_document_source_link()) {
    if (!this->document_source_link_->IsInitialized()) return false;
  }
  if (has_property_version()) {
    if (!this->property_version_->IsInitialized()) return false;
  }
  return true;
}

void BinLogEvent_EventData::Swap(BinLogEvent_EventData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinLogEvent_EventData::InternalSwap(BinLogEvent_EventData* other) {
  using std::swap;
  swap(source_data_, other->source_data_);
  swap(document_data_, other->document_data_);
  swap(document_source_link_, other->document_source_link_);
  swap(property_version_, other->property_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BinLogEvent_EventData::GetMetadata() const {
  protobuf_cosmo_5fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fbinlog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BinLogEvent_EventData

// optional .cosmo.pb.SourceData source_data = 1;
bool BinLogEvent_EventData::has_source_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BinLogEvent_EventData::set_has_source_data() {
  _has_bits_[0] |= 0x00000001u;
}
void BinLogEvent_EventData::clear_has_source_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void BinLogEvent_EventData::clear_source_data() {
  if (source_data_ != NULL) source_data_->::cosmo::pb::SourceData::Clear();
  clear_has_source_data();
}
const ::cosmo::pb::SourceData& BinLogEvent_EventData::source_data() const {
  const ::cosmo::pb::SourceData* p = source_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.BinLogEvent.EventData.source_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::SourceData*>(
      &::cosmo::pb::_SourceData_default_instance_);
}
::cosmo::pb::SourceData* BinLogEvent_EventData::mutable_source_data() {
  set_has_source_data();
  if (source_data_ == NULL) {
    source_data_ = new ::cosmo::pb::SourceData;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.BinLogEvent.EventData.source_data)
  return source_data_;
}
::cosmo::pb::SourceData* BinLogEvent_EventData::release_source_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.BinLogEvent.EventData.source_data)
  clear_has_source_data();
  ::cosmo::pb::SourceData* temp = source_data_;
  source_data_ = NULL;
  return temp;
}
void BinLogEvent_EventData::set_allocated_source_data(::cosmo::pb::SourceData* source_data) {
  delete source_data_;
  if (source_data != NULL && source_data->GetArena() != NULL) {
    ::cosmo::pb::SourceData* new_source_data = new ::cosmo::pb::SourceData;
    new_source_data->CopyFrom(*source_data);
    source_data = new_source_data;
  }
  source_data_ = source_data;
  if (source_data) {
    set_has_source_data();
  } else {
    clear_has_source_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.BinLogEvent.EventData.source_data)
}

// optional .cosmo.pb.DocumentData document_data = 2;
bool BinLogEvent_EventData::has_document_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BinLogEvent_EventData::set_has_document_data() {
  _has_bits_[0] |= 0x00000002u;
}
void BinLogEvent_EventData::clear_has_document_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void BinLogEvent_EventData::clear_document_data() {
  if (document_data_ != NULL) document_data_->::cosmo::pb::DocumentData::Clear();
  clear_has_document_data();
}
const ::cosmo::pb::DocumentData& BinLogEvent_EventData::document_data() const {
  const ::cosmo::pb::DocumentData* p = document_data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.BinLogEvent.EventData.document_data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentData*>(
      &::cosmo::pb::_DocumentData_default_instance_);
}
::cosmo::pb::DocumentData* BinLogEvent_EventData::mutable_document_data() {
  set_has_document_data();
  if (document_data_ == NULL) {
    document_data_ = new ::cosmo::pb::DocumentData;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.BinLogEvent.EventData.document_data)
  return document_data_;
}
::cosmo::pb::DocumentData* BinLogEvent_EventData::release_document_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.BinLogEvent.EventData.document_data)
  clear_has_document_data();
  ::cosmo::pb::DocumentData* temp = document_data_;
  document_data_ = NULL;
  return temp;
}
void BinLogEvent_EventData::set_allocated_document_data(::cosmo::pb::DocumentData* document_data) {
  delete document_data_;
  if (document_data != NULL && document_data->GetArena() != NULL) {
    ::cosmo::pb::DocumentData* new_document_data = new ::cosmo::pb::DocumentData;
    new_document_data->CopyFrom(*document_data);
    document_data = new_document_data;
  }
  document_data_ = document_data;
  if (document_data) {
    set_has_document_data();
  } else {
    clear_has_document_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.BinLogEvent.EventData.document_data)
}

// optional .cosmo.pb.DocumentSourceLink document_source_link = 3;
bool BinLogEvent_EventData::has_document_source_link() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BinLogEvent_EventData::set_has_document_source_link() {
  _has_bits_[0] |= 0x00000004u;
}
void BinLogEvent_EventData::clear_has_document_source_link() {
  _has_bits_[0] &= ~0x00000004u;
}
void BinLogEvent_EventData::clear_document_source_link() {
  if (document_source_link_ != NULL) document_source_link_->::cosmo::pb::DocumentSourceLink::Clear();
  clear_has_document_source_link();
}
const ::cosmo::pb::DocumentSourceLink& BinLogEvent_EventData::document_source_link() const {
  const ::cosmo::pb::DocumentSourceLink* p = document_source_link_;
  // @@protoc_insertion_point(field_get:cosmo.pb.BinLogEvent.EventData.document_source_link)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentSourceLink*>(
      &::cosmo::pb::_DocumentSourceLink_default_instance_);
}
::cosmo::pb::DocumentSourceLink* BinLogEvent_EventData::mutable_document_source_link() {
  set_has_document_source_link();
  if (document_source_link_ == NULL) {
    document_source_link_ = new ::cosmo::pb::DocumentSourceLink;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.BinLogEvent.EventData.document_source_link)
  return document_source_link_;
}
::cosmo::pb::DocumentSourceLink* BinLogEvent_EventData::release_document_source_link() {
  // @@protoc_insertion_point(field_release:cosmo.pb.BinLogEvent.EventData.document_source_link)
  clear_has_document_source_link();
  ::cosmo::pb::DocumentSourceLink* temp = document_source_link_;
  document_source_link_ = NULL;
  return temp;
}
void BinLogEvent_EventData::set_allocated_document_source_link(::cosmo::pb::DocumentSourceLink* document_source_link) {
  delete document_source_link_;
  if (document_source_link != NULL && document_source_link->GetArena() != NULL) {
    ::cosmo::pb::DocumentSourceLink* new_document_source_link = new ::cosmo::pb::DocumentSourceLink;
    new_document_source_link->CopyFrom(*document_source_link);
    document_source_link = new_document_source_link;
  }
  document_source_link_ = document_source_link;
  if (document_source_link) {
    set_has_document_source_link();
  } else {
    clear_has_document_source_link();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.BinLogEvent.EventData.document_source_link)
}

// optional .cosmo.pb.PropertyVersion property_version = 4;
bool BinLogEvent_EventData::has_property_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BinLogEvent_EventData::set_has_property_version() {
  _has_bits_[0] |= 0x00000008u;
}
void BinLogEvent_EventData::clear_has_property_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void BinLogEvent_EventData::clear_property_version() {
  if (property_version_ != NULL) property_version_->::cosmo::pb::PropertyVersion::Clear();
  clear_has_property_version();
}
const ::cosmo::pb::PropertyVersion& BinLogEvent_EventData::property_version() const {
  const ::cosmo::pb::PropertyVersion* p = property_version_;
  // @@protoc_insertion_point(field_get:cosmo.pb.BinLogEvent.EventData.property_version)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::PropertyVersion*>(
      &::cosmo::pb::_PropertyVersion_default_instance_);
}
::cosmo::pb::PropertyVersion* BinLogEvent_EventData::mutable_property_version() {
  set_has_property_version();
  if (property_version_ == NULL) {
    property_version_ = new ::cosmo::pb::PropertyVersion;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.BinLogEvent.EventData.property_version)
  return property_version_;
}
::cosmo::pb::PropertyVersion* BinLogEvent_EventData::release_property_version() {
  // @@protoc_insertion_point(field_release:cosmo.pb.BinLogEvent.EventData.property_version)
  clear_has_property_version();
  ::cosmo::pb::PropertyVersion* temp = property_version_;
  property_version_ = NULL;
  return temp;
}
void BinLogEvent_EventData::set_allocated_property_version(::cosmo::pb::PropertyVersion* property_version) {
  delete property_version_;
  property_version_ = property_version;
  if (property_version) {
    set_has_property_version();
  } else {
    clear_has_property_version();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.BinLogEvent.EventData.property_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinLogEvent::kTimestampFieldNumber;
const int BinLogEvent::kEpochFieldNumber;
const int BinLogEvent::kShardFieldNumber;
const int BinLogEvent::kTypeFieldNumber;
const int BinLogEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinLogEvent::BinLogEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fbinlog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.BinLogEvent)
}
BinLogEvent::BinLogEvent(const BinLogEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::cosmo::pb::BinLogEvent_EventData(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.BinLogEvent)
}

void BinLogEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&data_)) + sizeof(type_));
}

BinLogEvent::~BinLogEvent() {
  // @@protoc_insertion_point(destructor:cosmo.pb.BinLogEvent)
  SharedDtor();
}

void BinLogEvent::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void BinLogEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinLogEvent::descriptor() {
  protobuf_cosmo_5fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fbinlog_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BinLogEvent& BinLogEvent::default_instance() {
  protobuf_cosmo_5fbinlog_2eproto::InitDefaults();
  return *internal_default_instance();
}

BinLogEvent* BinLogEvent::New(::google::protobuf::Arena* arena) const {
  BinLogEvent* n = new BinLogEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BinLogEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.BinLogEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::cosmo::pb::BinLogEvent_EventData::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BinLogEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.BinLogEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 epoch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_epoch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 shard = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_shard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .cosmo.pb.BinLogEvent.EventType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cosmo::pb::BinLogEvent_EventType_IsValid(value)) {
            set_type(static_cast< ::cosmo::pb::BinLogEvent_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.BinLogEvent.EventData data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.BinLogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.BinLogEvent)
  return false;
#undef DO_
}

void BinLogEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.BinLogEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // required int64 epoch = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->epoch(), output);
  }

  // required int32 shard = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shard(), output);
  }

  // required .cosmo.pb.BinLogEvent.EventType type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .cosmo.pb.BinLogEvent.EventData data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.BinLogEvent)
}

::google::protobuf::uint8* BinLogEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.BinLogEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // required int64 epoch = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->epoch(), target);
  }

  // required int32 shard = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shard(), target);
  }

  // required .cosmo.pb.BinLogEvent.EventType type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .cosmo.pb.BinLogEvent.EventData data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.BinLogEvent)
  return target;
}

size_t BinLogEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cosmo.pb.BinLogEvent)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required int64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_epoch()) {
    // required int64 epoch = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->epoch());
  }

  if (has_shard()) {
    // required int32 shard = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shard());
  }

  if (has_type()) {
    // required .cosmo.pb.BinLogEvent.EventType type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t BinLogEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.BinLogEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required int64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required int64 epoch = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->epoch());

    // required int32 shard = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shard());

    // required .cosmo.pb.BinLogEvent.EventType type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .cosmo.pb.BinLogEvent.EventData data = 5;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinLogEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.BinLogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const BinLogEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BinLogEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.BinLogEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.BinLogEvent)
    MergeFrom(*source);
  }
}

void BinLogEvent::MergeFrom(const BinLogEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.BinLogEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::cosmo::pb::BinLogEvent_EventData::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      epoch_ = from.epoch_;
    }
    if (cached_has_bits & 0x00000008u) {
      shard_ = from.shard_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BinLogEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.BinLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinLogEvent::CopyFrom(const BinLogEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.BinLogEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinLogEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void BinLogEvent::Swap(BinLogEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinLogEvent::InternalSwap(BinLogEvent* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(timestamp_, other->timestamp_);
  swap(epoch_, other->epoch_);
  swap(shard_, other->shard_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BinLogEvent::GetMetadata() const {
  protobuf_cosmo_5fbinlog_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fbinlog_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BinLogEvent

// required int64 timestamp = 1;
bool BinLogEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BinLogEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void BinLogEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void BinLogEvent::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 BinLogEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.BinLogEvent.timestamp)
  return timestamp_;
}
void BinLogEvent::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.BinLogEvent.timestamp)
}

// required int64 epoch = 2;
bool BinLogEvent::has_epoch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BinLogEvent::set_has_epoch() {
  _has_bits_[0] |= 0x00000004u;
}
void BinLogEvent::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000004u;
}
void BinLogEvent::clear_epoch() {
  epoch_ = GOOGLE_LONGLONG(0);
  clear_has_epoch();
}
::google::protobuf::int64 BinLogEvent::epoch() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.BinLogEvent.epoch)
  return epoch_;
}
void BinLogEvent::set_epoch(::google::protobuf::int64 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.BinLogEvent.epoch)
}

// required int32 shard = 3;
bool BinLogEvent::has_shard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BinLogEvent::set_has_shard() {
  _has_bits_[0] |= 0x00000008u;
}
void BinLogEvent::clear_has_shard() {
  _has_bits_[0] &= ~0x00000008u;
}
void BinLogEvent::clear_shard() {
  shard_ = 0;
  clear_has_shard();
}
::google::protobuf::int32 BinLogEvent::shard() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.BinLogEvent.shard)
  return shard_;
}
void BinLogEvent::set_shard(::google::protobuf::int32 value) {
  set_has_shard();
  shard_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.BinLogEvent.shard)
}

// required .cosmo.pb.BinLogEvent.EventType type = 4;
bool BinLogEvent::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BinLogEvent::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void BinLogEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void BinLogEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
::cosmo::pb::BinLogEvent_EventType BinLogEvent::type() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.BinLogEvent.type)
  return static_cast< ::cosmo::pb::BinLogEvent_EventType >(type_);
}
void BinLogEvent::set_type(::cosmo::pb::BinLogEvent_EventType value) {
  assert(::cosmo::pb::BinLogEvent_EventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.BinLogEvent.type)
}

// optional .cosmo.pb.BinLogEvent.EventData data = 5;
bool BinLogEvent::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BinLogEvent::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void BinLogEvent::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void BinLogEvent::clear_data() {
  if (data_ != NULL) data_->::cosmo::pb::BinLogEvent_EventData::Clear();
  clear_has_data();
}
const ::cosmo::pb::BinLogEvent_EventData& BinLogEvent::data() const {
  const ::cosmo::pb::BinLogEvent_EventData* p = data_;
  // @@protoc_insertion_point(field_get:cosmo.pb.BinLogEvent.data)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::BinLogEvent_EventData*>(
      &::cosmo::pb::_BinLogEvent_EventData_default_instance_);
}
::cosmo::pb::BinLogEvent_EventData* BinLogEvent::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::cosmo::pb::BinLogEvent_EventData;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.BinLogEvent.data)
  return data_;
}
::cosmo::pb::BinLogEvent_EventData* BinLogEvent::release_data() {
  // @@protoc_insertion_point(field_release:cosmo.pb.BinLogEvent.data)
  clear_has_data();
  ::cosmo::pb::BinLogEvent_EventData* temp = data_;
  data_ = NULL;
  return temp;
}
void BinLogEvent::set_allocated_data(::cosmo::pb::BinLogEvent_EventData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.BinLogEvent.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace cosmo

// @@protoc_insertion_point(global_scope)
