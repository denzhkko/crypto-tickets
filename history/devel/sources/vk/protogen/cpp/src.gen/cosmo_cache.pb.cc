// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_cache.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cosmo_cache.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cosmo {
namespace pb {
class ExperimentInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExperimentInfo>
     _instance;
} _ExperimentInfo_default_instance_;
class RankedDocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RankedDocument>
     _instance;
} _RankedDocument_default_instance_;
class CosmoCacheDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CosmoCache>
     _instance;
} _CosmoCache_default_instance_;

namespace protobuf_cosmo_5fcache_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentInfo, experiment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExperimentInfo, showed_from_a_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedDocument, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedDocument, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedDocument, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedDocument, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedDocument, category_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedDocument, document_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedDocument, interleaving_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedDocument, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankedDocument, site_hash_),
  2,
  3,
  4,
  5,
  0,
  1,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCache, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCache, documents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCache, experiment_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCache, metrics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCache, mixer_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoCache, native_documents_),
  ~0u,
  0,
  1,
  2,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(ExperimentInfo)},
  { 9, 22, sizeof(RankedDocument)},
  { 30, 40, sizeof(CosmoCache)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExperimentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RankedDocument_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CosmoCache_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cosmo_cache.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::cosmo::pb::protobuf_cosmo_5fresult_2eproto::InitDefaults();
  _ExperimentInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExperimentInfo_default_instance_);_RankedDocument_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RankedDocument_default_instance_);_CosmoCache_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CosmoCache_default_instance_);_RankedDocument_default_instance_._instance.get_mutable()->document_info_ = const_cast< ::cosmo::pb::DocumentInfo*>(
      ::cosmo::pb::DocumentInfo::internal_default_instance());
  _RankedDocument_default_instance_._instance.get_mutable()->interleaving_info_ = const_cast< ::cosmo::pb::InterleavingInfo*>(
      ::cosmo::pb::InterleavingInfo::internal_default_instance());
  _CosmoCache_default_instance_._instance.get_mutable()->experiment_info_ = const_cast< ::cosmo::pb::ExperimentInfo*>(
      ::cosmo::pb::ExperimentInfo::internal_default_instance());
  _CosmoCache_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::cosmo::pb::Metrics*>(
      ::cosmo::pb::Metrics::internal_default_instance());
  _CosmoCache_default_instance_._instance.get_mutable()->mixer_info_ = const_cast< ::cosmo::pb::MixerInfo*>(
      ::cosmo::pb::MixerInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021cosmo_cache.proto\022\010cosmo.pb\032\022cosmo_res"
      "ult.proto\">\n\016ExperimentInfo\022\025\n\rexperimen"
      "t_id\030\001 \002(\r\022\025\n\rshowed_from_a\030\002 \001(\010\"\366\001\n\016Ra"
      "nkedDocument\022\021\n\tsource_id\030\001 \001(\003\022\016\n\006doc_i"
      "d\030\002 \001(\003\022\014\n\004rank\030\003 \001(\002\022\023\n\013category_id\030\005 \001"
      "(\005\022-\n\rdocument_info\030\006 \001(\0132\026.cosmo.pb.Doc"
      "umentInfo\0225\n\021interleaving_info\030\007 \001(\0132\032.c"
      "osmo.pb.InterleavingInfo\022%\n\004type\030\010 \001(\0162\027"
      ".cosmo.pb.Document.Type\022\021\n\tsite_hash\030\t \001"
      "(\003\"\347\001\n\nCosmoCache\022+\n\tdocuments\030\001 \003(\0132\030.c"
      "osmo.pb.RankedDocument\0221\n\017experiment_inf"
      "o\030\002 \001(\0132\030.cosmo.pb.ExperimentInfo\022\"\n\007met"
      "rics\030\003 \001(\0132\021.cosmo.pb.Metrics\022\'\n\nmixer_i"
      "nfo\030\004 \001(\0132\023.cosmo.pb.MixerInfo\022,\n\020native"
      "_documents\030\005 \003(\0132\022.cosmo.pb.Document"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 596);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cosmo_cache.proto", &protobuf_RegisterTypes);
  ::cosmo::pb::protobuf_cosmo_5fresult_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cosmo_5fcache_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExperimentInfo::kExperimentIdFieldNumber;
const int ExperimentInfo::kShowedFromAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExperimentInfo::ExperimentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.ExperimentInfo)
}
ExperimentInfo::ExperimentInfo(const ExperimentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&experiment_id_, &from.experiment_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&showed_from_a_) -
    reinterpret_cast<char*>(&experiment_id_)) + sizeof(showed_from_a_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.ExperimentInfo)
}

void ExperimentInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&experiment_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&showed_from_a_) -
      reinterpret_cast<char*>(&experiment_id_)) + sizeof(showed_from_a_));
}

ExperimentInfo::~ExperimentInfo() {
  // @@protoc_insertion_point(destructor:cosmo.pb.ExperimentInfo)
  SharedDtor();
}

void ExperimentInfo::SharedDtor() {
}

void ExperimentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExperimentInfo::descriptor() {
  protobuf_cosmo_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fcache_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExperimentInfo& ExperimentInfo::default_instance() {
  protobuf_cosmo_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExperimentInfo* ExperimentInfo::New(::google::protobuf::Arena* arena) const {
  ExperimentInfo* n = new ExperimentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExperimentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.ExperimentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&experiment_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&showed_from_a_) -
        reinterpret_cast<char*>(&experiment_id_)) + sizeof(showed_from_a_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExperimentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.ExperimentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 experiment_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_experiment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experiment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool showed_from_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_showed_from_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showed_from_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.ExperimentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.ExperimentInfo)
  return false;
#undef DO_
}

void ExperimentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.ExperimentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 experiment_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->experiment_id(), output);
  }

  // optional bool showed_from_a = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->showed_from_a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.ExperimentInfo)
}

::google::protobuf::uint8* ExperimentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.ExperimentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 experiment_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->experiment_id(), target);
  }

  // optional bool showed_from_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->showed_from_a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.ExperimentInfo)
  return target;
}

size_t ExperimentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.ExperimentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 experiment_id = 1;
  if (has_experiment_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->experiment_id());
  }
  // optional bool showed_from_a = 2;
  if (has_showed_from_a()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExperimentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.ExperimentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ExperimentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExperimentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.ExperimentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.ExperimentInfo)
    MergeFrom(*source);
  }
}

void ExperimentInfo::MergeFrom(const ExperimentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.ExperimentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      experiment_id_ = from.experiment_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      showed_from_a_ = from.showed_from_a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExperimentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.ExperimentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExperimentInfo::CopyFrom(const ExperimentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.ExperimentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExperimentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ExperimentInfo::Swap(ExperimentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExperimentInfo::InternalSwap(ExperimentInfo* other) {
  using std::swap;
  swap(experiment_id_, other->experiment_id_);
  swap(showed_from_a_, other->showed_from_a_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExperimentInfo::GetMetadata() const {
  protobuf_cosmo_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fcache_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExperimentInfo

// required uint32 experiment_id = 1;
bool ExperimentInfo::has_experiment_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ExperimentInfo::set_has_experiment_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ExperimentInfo::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ExperimentInfo::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
::google::protobuf::uint32 ExperimentInfo::experiment_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.ExperimentInfo.experiment_id)
  return experiment_id_;
}
void ExperimentInfo::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.ExperimentInfo.experiment_id)
}

// optional bool showed_from_a = 2;
bool ExperimentInfo::has_showed_from_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ExperimentInfo::set_has_showed_from_a() {
  _has_bits_[0] |= 0x00000002u;
}
void ExperimentInfo::clear_has_showed_from_a() {
  _has_bits_[0] &= ~0x00000002u;
}
void ExperimentInfo::clear_showed_from_a() {
  showed_from_a_ = false;
  clear_has_showed_from_a();
}
bool ExperimentInfo::showed_from_a() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.ExperimentInfo.showed_from_a)
  return showed_from_a_;
}
void ExperimentInfo::set_showed_from_a(bool value) {
  set_has_showed_from_a();
  showed_from_a_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.ExperimentInfo.showed_from_a)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RankedDocument::kSourceIdFieldNumber;
const int RankedDocument::kDocIdFieldNumber;
const int RankedDocument::kRankFieldNumber;
const int RankedDocument::kCategoryIdFieldNumber;
const int RankedDocument::kDocumentInfoFieldNumber;
const int RankedDocument::kInterleavingInfoFieldNumber;
const int RankedDocument::kTypeFieldNumber;
const int RankedDocument::kSiteHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RankedDocument::RankedDocument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.RankedDocument)
}
RankedDocument::RankedDocument(const RankedDocument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_document_info()) {
    document_info_ = new ::cosmo::pb::DocumentInfo(*from.document_info_);
  } else {
    document_info_ = NULL;
  }
  if (from.has_interleaving_info()) {
    interleaving_info_ = new ::cosmo::pb::InterleavingInfo(*from.interleaving_info_);
  } else {
    interleaving_info_ = NULL;
  }
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.RankedDocument)
}

void RankedDocument::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&document_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&document_info_)) + sizeof(type_));
}

RankedDocument::~RankedDocument() {
  // @@protoc_insertion_point(destructor:cosmo.pb.RankedDocument)
  SharedDtor();
}

void RankedDocument::SharedDtor() {
  if (this != internal_default_instance()) delete document_info_;
  if (this != internal_default_instance()) delete interleaving_info_;
}

void RankedDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankedDocument::descriptor() {
  protobuf_cosmo_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fcache_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RankedDocument& RankedDocument::default_instance() {
  protobuf_cosmo_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

RankedDocument* RankedDocument::New(::google::protobuf::Arena* arena) const {
  RankedDocument* n = new RankedDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RankedDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.RankedDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(document_info_ != NULL);
      document_info_->::cosmo::pb::DocumentInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(interleaving_info_ != NULL);
      interleaving_info_->::cosmo::pb::InterleavingInfo::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&source_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&source_id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RankedDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.RankedDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 source_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_source_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 doc_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_doc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rank = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 category_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_category_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.DocumentInfo document_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interleaving_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Document.Type type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cosmo::pb::Document_Type_IsValid(value)) {
            set_type(static_cast< ::cosmo::pb::Document_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 site_hash = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_site_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &site_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.RankedDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.RankedDocument)
  return false;
#undef DO_
}

void RankedDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.RankedDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 source_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source_id(), output);
  }

  // optional int64 doc_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->doc_id(), output);
  }

  // optional float rank = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rank(), output);
  }

  // optional int32 category_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->category_id(), output);
  }

  // optional .cosmo.pb.DocumentInfo document_info = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->document_info_, output);
  }

  // optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->interleaving_info_, output);
  }

  // optional .cosmo.pb.Document.Type type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // optional int64 site_hash = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->site_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.RankedDocument)
}

::google::protobuf::uint8* RankedDocument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.RankedDocument)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 source_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source_id(), target);
  }

  // optional int64 doc_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->doc_id(), target);
  }

  // optional float rank = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rank(), target);
  }

  // optional int32 category_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->category_id(), target);
  }

  // optional .cosmo.pb.DocumentInfo document_info = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->document_info_, deterministic, target);
  }

  // optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->interleaving_info_, deterministic, target);
  }

  // optional .cosmo.pb.Document.Type type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  // optional int64 site_hash = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->site_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.RankedDocument)
  return target;
}

size_t RankedDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.RankedDocument)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .cosmo.pb.DocumentInfo document_info = 6;
    if (has_document_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->document_info_);
    }

    // optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
    if (has_interleaving_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->interleaving_info_);
    }

    // optional int64 source_id = 1;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->source_id());
    }

    // optional int64 doc_id = 2;
    if (has_doc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->doc_id());
    }

    // optional float rank = 3;
    if (has_rank()) {
      total_size += 1 + 4;
    }

    // optional int32 category_id = 5;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_id());
    }

    // optional int64 site_hash = 9;
    if (has_site_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->site_hash());
    }

    // optional .cosmo.pb.Document.Type type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankedDocument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.RankedDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const RankedDocument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RankedDocument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.RankedDocument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.RankedDocument)
    MergeFrom(*source);
  }
}

void RankedDocument::MergeFrom(const RankedDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.RankedDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_document_info()->::cosmo::pb::DocumentInfo::MergeFrom(from.document_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_interleaving_info()->::cosmo::pb::InterleavingInfo::MergeFrom(from.interleaving_info());
    }
    if (cached_has_bits & 0x00000004u) {
      source_id_ = from.source_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      doc_id_ = from.doc_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000020u) {
      category_id_ = from.category_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      site_hash_ = from.site_hash_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RankedDocument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.RankedDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankedDocument::CopyFrom(const RankedDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.RankedDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankedDocument::IsInitialized() const {
  if (has_interleaving_info()) {
    if (!this->interleaving_info_->IsInitialized()) return false;
  }
  return true;
}

void RankedDocument::Swap(RankedDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RankedDocument::InternalSwap(RankedDocument* other) {
  using std::swap;
  swap(document_info_, other->document_info_);
  swap(interleaving_info_, other->interleaving_info_);
  swap(source_id_, other->source_id_);
  swap(doc_id_, other->doc_id_);
  swap(rank_, other->rank_);
  swap(category_id_, other->category_id_);
  swap(site_hash_, other->site_hash_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RankedDocument::GetMetadata() const {
  protobuf_cosmo_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fcache_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RankedDocument

// optional int64 source_id = 1;
bool RankedDocument::has_source_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RankedDocument::set_has_source_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RankedDocument::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RankedDocument::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
::google::protobuf::int64 RankedDocument::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.source_id)
  return source_id_;
}
void RankedDocument::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.source_id)
}

// optional int64 doc_id = 2;
bool RankedDocument::has_doc_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RankedDocument::set_has_doc_id() {
  _has_bits_[0] |= 0x00000008u;
}
void RankedDocument::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void RankedDocument::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
::google::protobuf::int64 RankedDocument::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.doc_id)
  return doc_id_;
}
void RankedDocument::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.doc_id)
}

// optional float rank = 3;
bool RankedDocument::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RankedDocument::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
void RankedDocument::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
void RankedDocument::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
float RankedDocument::rank() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.rank)
  return rank_;
}
void RankedDocument::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.rank)
}

// optional int32 category_id = 5;
bool RankedDocument::has_category_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RankedDocument::set_has_category_id() {
  _has_bits_[0] |= 0x00000020u;
}
void RankedDocument::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void RankedDocument::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
::google::protobuf::int32 RankedDocument::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.category_id)
  return category_id_;
}
void RankedDocument::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.category_id)
}

// optional .cosmo.pb.DocumentInfo document_info = 6;
bool RankedDocument::has_document_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RankedDocument::set_has_document_info() {
  _has_bits_[0] |= 0x00000001u;
}
void RankedDocument::clear_has_document_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void RankedDocument::clear_document_info() {
  if (document_info_ != NULL) document_info_->::cosmo::pb::DocumentInfo::Clear();
  clear_has_document_info();
}
const ::cosmo::pb::DocumentInfo& RankedDocument::document_info() const {
  const ::cosmo::pb::DocumentInfo* p = document_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.document_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentInfo*>(
      &::cosmo::pb::_DocumentInfo_default_instance_);
}
::cosmo::pb::DocumentInfo* RankedDocument::mutable_document_info() {
  set_has_document_info();
  if (document_info_ == NULL) {
    document_info_ = new ::cosmo::pb::DocumentInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.RankedDocument.document_info)
  return document_info_;
}
::cosmo::pb::DocumentInfo* RankedDocument::release_document_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.RankedDocument.document_info)
  clear_has_document_info();
  ::cosmo::pb::DocumentInfo* temp = document_info_;
  document_info_ = NULL;
  return temp;
}
void RankedDocument::set_allocated_document_info(::cosmo::pb::DocumentInfo* document_info) {
  delete document_info_;
  document_info_ = document_info;
  if (document_info) {
    set_has_document_info();
  } else {
    clear_has_document_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.RankedDocument.document_info)
}

// optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
bool RankedDocument::has_interleaving_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RankedDocument::set_has_interleaving_info() {
  _has_bits_[0] |= 0x00000002u;
}
void RankedDocument::clear_has_interleaving_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void RankedDocument::clear_interleaving_info() {
  if (interleaving_info_ != NULL) interleaving_info_->::cosmo::pb::InterleavingInfo::Clear();
  clear_has_interleaving_info();
}
const ::cosmo::pb::InterleavingInfo& RankedDocument::interleaving_info() const {
  const ::cosmo::pb::InterleavingInfo* p = interleaving_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.interleaving_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::InterleavingInfo*>(
      &::cosmo::pb::_InterleavingInfo_default_instance_);
}
::cosmo::pb::InterleavingInfo* RankedDocument::mutable_interleaving_info() {
  set_has_interleaving_info();
  if (interleaving_info_ == NULL) {
    interleaving_info_ = new ::cosmo::pb::InterleavingInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.RankedDocument.interleaving_info)
  return interleaving_info_;
}
::cosmo::pb::InterleavingInfo* RankedDocument::release_interleaving_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.RankedDocument.interleaving_info)
  clear_has_interleaving_info();
  ::cosmo::pb::InterleavingInfo* temp = interleaving_info_;
  interleaving_info_ = NULL;
  return temp;
}
void RankedDocument::set_allocated_interleaving_info(::cosmo::pb::InterleavingInfo* interleaving_info) {
  delete interleaving_info_;
  interleaving_info_ = interleaving_info;
  if (interleaving_info) {
    set_has_interleaving_info();
  } else {
    clear_has_interleaving_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.RankedDocument.interleaving_info)
}

// optional .cosmo.pb.Document.Type type = 8;
bool RankedDocument::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RankedDocument::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void RankedDocument::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void RankedDocument::clear_type() {
  type_ = 0;
  clear_has_type();
}
::cosmo::pb::Document_Type RankedDocument::type() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.type)
  return static_cast< ::cosmo::pb::Document_Type >(type_);
}
void RankedDocument::set_type(::cosmo::pb::Document_Type value) {
  assert(::cosmo::pb::Document_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.type)
}

// optional int64 site_hash = 9;
bool RankedDocument::has_site_hash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RankedDocument::set_has_site_hash() {
  _has_bits_[0] |= 0x00000040u;
}
void RankedDocument::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00000040u;
}
void RankedDocument::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
::google::protobuf::int64 RankedDocument::site_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.site_hash)
  return site_hash_;
}
void RankedDocument::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.site_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmoCache::kDocumentsFieldNumber;
const int CosmoCache::kExperimentInfoFieldNumber;
const int CosmoCache::kMetricsFieldNumber;
const int CosmoCache::kMixerInfoFieldNumber;
const int CosmoCache::kNativeDocumentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmoCache::CosmoCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fcache_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmo.pb.CosmoCache)
}
CosmoCache::CosmoCache(const CosmoCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      documents_(from.documents_),
      native_documents_(from.native_documents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_experiment_info()) {
    experiment_info_ = new ::cosmo::pb::ExperimentInfo(*from.experiment_info_);
  } else {
    experiment_info_ = NULL;
  }
  if (from.has_metrics()) {
    metrics_ = new ::cosmo::pb::Metrics(*from.metrics_);
  } else {
    metrics_ = NULL;
  }
  if (from.has_mixer_info()) {
    mixer_info_ = new ::cosmo::pb::MixerInfo(*from.mixer_info_);
  } else {
    mixer_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmo.pb.CosmoCache)
}

void CosmoCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&experiment_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mixer_info_) -
      reinterpret_cast<char*>(&experiment_info_)) + sizeof(mixer_info_));
}

CosmoCache::~CosmoCache() {
  // @@protoc_insertion_point(destructor:cosmo.pb.CosmoCache)
  SharedDtor();
}

void CosmoCache::SharedDtor() {
  if (this != internal_default_instance()) delete experiment_info_;
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete mixer_info_;
}

void CosmoCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmoCache::descriptor() {
  protobuf_cosmo_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fcache_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosmoCache& CosmoCache::default_instance() {
  protobuf_cosmo_5fcache_2eproto::InitDefaults();
  return *internal_default_instance();
}

CosmoCache* CosmoCache::New(::google::protobuf::Arena* arena) const {
  CosmoCache* n = new CosmoCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmoCache::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmo.pb.CosmoCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  native_documents_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(experiment_info_ != NULL);
      experiment_info_->::cosmo::pb::ExperimentInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metrics_ != NULL);
      metrics_->::cosmo::pb::Metrics::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mixer_info_ != NULL);
      mixer_info_->::cosmo::pb::MixerInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosmoCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmo.pb.CosmoCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmo.pb.RankedDocument documents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.ExperimentInfo experiment_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_experiment_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.Metrics metrics = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .cosmo.pb.MixerInfo mixer_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mixer_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cosmo.pb.Document native_documents = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_native_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmo.pb.CosmoCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmo.pb.CosmoCache)
  return false;
#undef DO_
}

void CosmoCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmo.pb.CosmoCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.RankedDocument documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.ExperimentInfo experiment_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->experiment_info_, output);
  }

  // optional .cosmo.pb.Metrics metrics = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->metrics_, output);
  }

  // optional .cosmo.pb.MixerInfo mixer_info = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mixer_info_, output);
  }

  // repeated .cosmo.pb.Document native_documents = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->native_documents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->native_documents(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmo.pb.CosmoCache)
}

::google::protobuf::uint8* CosmoCache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmo.pb.CosmoCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmo.pb.RankedDocument documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->documents(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .cosmo.pb.ExperimentInfo experiment_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->experiment_info_, deterministic, target);
  }

  // optional .cosmo.pb.Metrics metrics = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->metrics_, deterministic, target);
  }

  // optional .cosmo.pb.MixerInfo mixer_info = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->mixer_info_, deterministic, target);
  }

  // repeated .cosmo.pb.Document native_documents = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->native_documents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->native_documents(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmo.pb.CosmoCache)
  return target;
}

size_t CosmoCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmo.pb.CosmoCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .cosmo.pb.RankedDocument documents = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->documents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documents(static_cast<int>(i)));
    }
  }

  // repeated .cosmo.pb.Document native_documents = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->native_documents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->native_documents(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .cosmo.pb.ExperimentInfo experiment_info = 2;
    if (has_experiment_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->experiment_info_);
    }

    // optional .cosmo.pb.Metrics metrics = 3;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metrics_);
    }

    // optional .cosmo.pb.MixerInfo mixer_info = 4;
    if (has_mixer_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mixer_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmoCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmo.pb.CosmoCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CosmoCache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmoCache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmo.pb.CosmoCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmo.pb.CosmoCache)
    MergeFrom(*source);
  }
}

void CosmoCache::MergeFrom(const CosmoCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmo.pb.CosmoCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  native_documents_.MergeFrom(from.native_documents_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_experiment_info()->::cosmo::pb::ExperimentInfo::MergeFrom(from.experiment_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_metrics()->::cosmo::pb::Metrics::MergeFrom(from.metrics());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_mixer_info()->::cosmo::pb::MixerInfo::MergeFrom(from.mixer_info());
    }
  }
}

void CosmoCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmo.pb.CosmoCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmoCache::CopyFrom(const CosmoCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmo.pb.CosmoCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmoCache::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->documents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->native_documents())) return false;
  if (has_experiment_info()) {
    if (!this->experiment_info_->IsInitialized()) return false;
  }
  if (has_metrics()) {
    if (!this->metrics_->IsInitialized()) return false;
  }
  if (has_mixer_info()) {
    if (!this->mixer_info_->IsInitialized()) return false;
  }
  return true;
}

void CosmoCache::Swap(CosmoCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmoCache::InternalSwap(CosmoCache* other) {
  using std::swap;
  documents_.InternalSwap(&other->documents_);
  native_documents_.InternalSwap(&other->native_documents_);
  swap(experiment_info_, other->experiment_info_);
  swap(metrics_, other->metrics_);
  swap(mixer_info_, other->mixer_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmoCache::GetMetadata() const {
  protobuf_cosmo_5fcache_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fcache_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmoCache

// repeated .cosmo.pb.RankedDocument documents = 1;
int CosmoCache::documents_size() const {
  return documents_.size();
}
void CosmoCache::clear_documents() {
  documents_.Clear();
}
const ::cosmo::pb::RankedDocument& CosmoCache::documents(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoCache.documents)
  return documents_.Get(index);
}
::cosmo::pb::RankedDocument* CosmoCache::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoCache.documents)
  return documents_.Mutable(index);
}
::cosmo::pb::RankedDocument* CosmoCache::add_documents() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoCache.documents)
  return documents_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankedDocument >*
CosmoCache::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoCache.documents)
  return &documents_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankedDocument >&
CosmoCache::documents() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoCache.documents)
  return documents_;
}

// optional .cosmo.pb.ExperimentInfo experiment_info = 2;
bool CosmoCache::has_experiment_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CosmoCache::set_has_experiment_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CosmoCache::clear_has_experiment_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CosmoCache::clear_experiment_info() {
  if (experiment_info_ != NULL) experiment_info_->::cosmo::pb::ExperimentInfo::Clear();
  clear_has_experiment_info();
}
const ::cosmo::pb::ExperimentInfo& CosmoCache::experiment_info() const {
  const ::cosmo::pb::ExperimentInfo* p = experiment_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoCache.experiment_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::ExperimentInfo*>(
      &::cosmo::pb::_ExperimentInfo_default_instance_);
}
::cosmo::pb::ExperimentInfo* CosmoCache::mutable_experiment_info() {
  set_has_experiment_info();
  if (experiment_info_ == NULL) {
    experiment_info_ = new ::cosmo::pb::ExperimentInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoCache.experiment_info)
  return experiment_info_;
}
::cosmo::pb::ExperimentInfo* CosmoCache::release_experiment_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoCache.experiment_info)
  clear_has_experiment_info();
  ::cosmo::pb::ExperimentInfo* temp = experiment_info_;
  experiment_info_ = NULL;
  return temp;
}
void CosmoCache::set_allocated_experiment_info(::cosmo::pb::ExperimentInfo* experiment_info) {
  delete experiment_info_;
  experiment_info_ = experiment_info;
  if (experiment_info) {
    set_has_experiment_info();
  } else {
    clear_has_experiment_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoCache.experiment_info)
}

// optional .cosmo.pb.Metrics metrics = 3;
bool CosmoCache::has_metrics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CosmoCache::set_has_metrics() {
  _has_bits_[0] |= 0x00000002u;
}
void CosmoCache::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000002u;
}
void CosmoCache::clear_metrics() {
  if (metrics_ != NULL) metrics_->::cosmo::pb::Metrics::Clear();
  clear_has_metrics();
}
const ::cosmo::pb::Metrics& CosmoCache::metrics() const {
  const ::cosmo::pb::Metrics* p = metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoCache.metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics*>(
      &::cosmo::pb::_Metrics_default_instance_);
}
::cosmo::pb::Metrics* CosmoCache::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::cosmo::pb::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoCache.metrics)
  return metrics_;
}
::cosmo::pb::Metrics* CosmoCache::release_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoCache.metrics)
  clear_has_metrics();
  ::cosmo::pb::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
void CosmoCache::set_allocated_metrics(::cosmo::pb::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoCache.metrics)
}

// optional .cosmo.pb.MixerInfo mixer_info = 4;
bool CosmoCache::has_mixer_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CosmoCache::set_has_mixer_info() {
  _has_bits_[0] |= 0x00000004u;
}
void CosmoCache::clear_has_mixer_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void CosmoCache::clear_mixer_info() {
  if (mixer_info_ != NULL) mixer_info_->::cosmo::pb::MixerInfo::Clear();
  clear_has_mixer_info();
}
const ::cosmo::pb::MixerInfo& CosmoCache::mixer_info() const {
  const ::cosmo::pb::MixerInfo* p = mixer_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoCache.mixer_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::MixerInfo*>(
      &::cosmo::pb::_MixerInfo_default_instance_);
}
::cosmo::pb::MixerInfo* CosmoCache::mutable_mixer_info() {
  set_has_mixer_info();
  if (mixer_info_ == NULL) {
    mixer_info_ = new ::cosmo::pb::MixerInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoCache.mixer_info)
  return mixer_info_;
}
::cosmo::pb::MixerInfo* CosmoCache::release_mixer_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoCache.mixer_info)
  clear_has_mixer_info();
  ::cosmo::pb::MixerInfo* temp = mixer_info_;
  mixer_info_ = NULL;
  return temp;
}
void CosmoCache::set_allocated_mixer_info(::cosmo::pb::MixerInfo* mixer_info) {
  delete mixer_info_;
  mixer_info_ = mixer_info;
  if (mixer_info) {
    set_has_mixer_info();
  } else {
    clear_has_mixer_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoCache.mixer_info)
}

// repeated .cosmo.pb.Document native_documents = 5;
int CosmoCache::native_documents_size() const {
  return native_documents_.size();
}
void CosmoCache::clear_native_documents() {
  native_documents_.Clear();
}
const ::cosmo::pb::Document& CosmoCache::native_documents(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoCache.native_documents)
  return native_documents_.Get(index);
}
::cosmo::pb::Document* CosmoCache::mutable_native_documents(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoCache.native_documents)
  return native_documents_.Mutable(index);
}
::cosmo::pb::Document* CosmoCache::add_native_documents() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoCache.native_documents)
  return native_documents_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >*
CosmoCache::mutable_native_documents() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoCache.native_documents)
  return &native_documents_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >&
CosmoCache::native_documents() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoCache.native_documents)
  return native_documents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace cosmo

// @@protoc_insertion_point(global_scope)
