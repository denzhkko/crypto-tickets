// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_cache.proto

#ifndef PROTOBUF_cosmo_5fcache_2eproto__INCLUDED
#define PROTOBUF_cosmo_5fcache_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cosmo_result.pb.h"
// @@protoc_insertion_point(includes)
namespace cosmo {
namespace pb {
class CosmoCache;
class CosmoCacheDefaultTypeInternal;
extern CosmoCacheDefaultTypeInternal _CosmoCache_default_instance_;
class ExperimentInfo;
class ExperimentInfoDefaultTypeInternal;
extern ExperimentInfoDefaultTypeInternal _ExperimentInfo_default_instance_;
class RankedDocument;
class RankedDocumentDefaultTypeInternal;
extern RankedDocumentDefaultTypeInternal _RankedDocument_default_instance_;
}  // namespace pb
}  // namespace cosmo

namespace cosmo {
namespace pb {

namespace protobuf_cosmo_5fcache_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cosmo_5fcache_2eproto

// ===================================================================

class ExperimentInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.ExperimentInfo) */ {
 public:
  ExperimentInfo();
  virtual ~ExperimentInfo();

  ExperimentInfo(const ExperimentInfo& from);

  inline ExperimentInfo& operator=(const ExperimentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExperimentInfo(ExperimentInfo&& from) noexcept
    : ExperimentInfo() {
    *this = ::std::move(from);
  }

  inline ExperimentInfo& operator=(ExperimentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExperimentInfo& default_instance();

  static inline const ExperimentInfo* internal_default_instance() {
    return reinterpret_cast<const ExperimentInfo*>(
               &_ExperimentInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ExperimentInfo* other);
  friend void swap(ExperimentInfo& a, ExperimentInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExperimentInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ExperimentInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExperimentInfo& from);
  void MergeFrom(const ExperimentInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExperimentInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 experiment_id = 1;
  bool has_experiment_id() const;
  void clear_experiment_id();
  static const int kExperimentIdFieldNumber = 1;
  ::google::protobuf::uint32 experiment_id() const;
  void set_experiment_id(::google::protobuf::uint32 value);

  // optional bool showed_from_a = 2;
  bool has_showed_from_a() const;
  void clear_showed_from_a();
  static const int kShowedFromAFieldNumber = 2;
  bool showed_from_a() const;
  void set_showed_from_a(bool value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.ExperimentInfo)
 private:
  void set_has_experiment_id();
  void clear_has_experiment_id();
  void set_has_showed_from_a();
  void clear_has_showed_from_a();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 experiment_id_;
  bool showed_from_a_;
  friend struct protobuf_cosmo_5fcache_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankedDocument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.RankedDocument) */ {
 public:
  RankedDocument();
  virtual ~RankedDocument();

  RankedDocument(const RankedDocument& from);

  inline RankedDocument& operator=(const RankedDocument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankedDocument(RankedDocument&& from) noexcept
    : RankedDocument() {
    *this = ::std::move(from);
  }

  inline RankedDocument& operator=(RankedDocument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankedDocument& default_instance();

  static inline const RankedDocument* internal_default_instance() {
    return reinterpret_cast<const RankedDocument*>(
               &_RankedDocument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RankedDocument* other);
  friend void swap(RankedDocument& a, RankedDocument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankedDocument* New() const PROTOBUF_FINAL { return New(NULL); }

  RankedDocument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RankedDocument& from);
  void MergeFrom(const RankedDocument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RankedDocument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cosmo.pb.DocumentInfo document_info = 6;
  bool has_document_info() const;
  void clear_document_info();
  static const int kDocumentInfoFieldNumber = 6;
  const ::cosmo::pb::DocumentInfo& document_info() const;
  ::cosmo::pb::DocumentInfo* mutable_document_info();
  ::cosmo::pb::DocumentInfo* release_document_info();
  void set_allocated_document_info(::cosmo::pb::DocumentInfo* document_info);

  // optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
  bool has_interleaving_info() const;
  void clear_interleaving_info();
  static const int kInterleavingInfoFieldNumber = 7;
  const ::cosmo::pb::InterleavingInfo& interleaving_info() const;
  ::cosmo::pb::InterleavingInfo* mutable_interleaving_info();
  ::cosmo::pb::InterleavingInfo* release_interleaving_info();
  void set_allocated_interleaving_info(::cosmo::pb::InterleavingInfo* interleaving_info);

  // optional int64 source_id = 1;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::int64 source_id() const;
  void set_source_id(::google::protobuf::int64 value);

  // optional int64 doc_id = 2;
  bool has_doc_id() const;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 2;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // optional float rank = 3;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 3;
  float rank() const;
  void set_rank(float value);

  // optional int32 category_id = 5;
  bool has_category_id() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 5;
  ::google::protobuf::int32 category_id() const;
  void set_category_id(::google::protobuf::int32 value);

  // optional int64 site_hash = 9;
  bool has_site_hash() const;
  void clear_site_hash();
  static const int kSiteHashFieldNumber = 9;
  ::google::protobuf::int64 site_hash() const;
  void set_site_hash(::google::protobuf::int64 value);

  // optional .cosmo.pb.Document.Type type = 8;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::cosmo::pb::Document_Type type() const;
  void set_type(::cosmo::pb::Document_Type value);

  // @@protoc_insertion_point(class_scope:cosmo.pb.RankedDocument)
 private:
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_doc_id();
  void clear_has_doc_id();
  void set_has_rank();
  void clear_has_rank();
  void set_has_category_id();
  void clear_has_category_id();
  void set_has_document_info();
  void clear_has_document_info();
  void set_has_interleaving_info();
  void clear_has_interleaving_info();
  void set_has_type();
  void clear_has_type();
  void set_has_site_hash();
  void clear_has_site_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cosmo::pb::DocumentInfo* document_info_;
  ::cosmo::pb::InterleavingInfo* interleaving_info_;
  ::google::protobuf::int64 source_id_;
  ::google::protobuf::int64 doc_id_;
  float rank_;
  ::google::protobuf::int32 category_id_;
  ::google::protobuf::int64 site_hash_;
  int type_;
  friend struct protobuf_cosmo_5fcache_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CosmoCache : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmo.pb.CosmoCache) */ {
 public:
  CosmoCache();
  virtual ~CosmoCache();

  CosmoCache(const CosmoCache& from);

  inline CosmoCache& operator=(const CosmoCache& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosmoCache(CosmoCache&& from) noexcept
    : CosmoCache() {
    *this = ::std::move(from);
  }

  inline CosmoCache& operator=(CosmoCache&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CosmoCache& default_instance();

  static inline const CosmoCache* internal_default_instance() {
    return reinterpret_cast<const CosmoCache*>(
               &_CosmoCache_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CosmoCache* other);
  friend void swap(CosmoCache& a, CosmoCache& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosmoCache* New() const PROTOBUF_FINAL { return New(NULL); }

  CosmoCache* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CosmoCache& from);
  void MergeFrom(const CosmoCache& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CosmoCache* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmo.pb.RankedDocument documents = 1;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 1;
  const ::cosmo::pb::RankedDocument& documents(int index) const;
  ::cosmo::pb::RankedDocument* mutable_documents(int index);
  ::cosmo::pb::RankedDocument* add_documents();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankedDocument >*
      mutable_documents();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankedDocument >&
      documents() const;

  // repeated .cosmo.pb.Document native_documents = 5;
  int native_documents_size() const;
  void clear_native_documents();
  static const int kNativeDocumentsFieldNumber = 5;
  const ::cosmo::pb::Document& native_documents(int index) const;
  ::cosmo::pb::Document* mutable_native_documents(int index);
  ::cosmo::pb::Document* add_native_documents();
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >*
      mutable_native_documents();
  const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >&
      native_documents() const;

  // optional .cosmo.pb.ExperimentInfo experiment_info = 2;
  bool has_experiment_info() const;
  void clear_experiment_info();
  static const int kExperimentInfoFieldNumber = 2;
  const ::cosmo::pb::ExperimentInfo& experiment_info() const;
  ::cosmo::pb::ExperimentInfo* mutable_experiment_info();
  ::cosmo::pb::ExperimentInfo* release_experiment_info();
  void set_allocated_experiment_info(::cosmo::pb::ExperimentInfo* experiment_info);

  // optional .cosmo.pb.Metrics metrics = 3;
  bool has_metrics() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 3;
  const ::cosmo::pb::Metrics& metrics() const;
  ::cosmo::pb::Metrics* mutable_metrics();
  ::cosmo::pb::Metrics* release_metrics();
  void set_allocated_metrics(::cosmo::pb::Metrics* metrics);

  // optional .cosmo.pb.MixerInfo mixer_info = 4;
  bool has_mixer_info() const;
  void clear_mixer_info();
  static const int kMixerInfoFieldNumber = 4;
  const ::cosmo::pb::MixerInfo& mixer_info() const;
  ::cosmo::pb::MixerInfo* mutable_mixer_info();
  ::cosmo::pb::MixerInfo* release_mixer_info();
  void set_allocated_mixer_info(::cosmo::pb::MixerInfo* mixer_info);

  // @@protoc_insertion_point(class_scope:cosmo.pb.CosmoCache)
 private:
  void set_has_experiment_info();
  void clear_has_experiment_info();
  void set_has_metrics();
  void clear_has_metrics();
  void set_has_mixer_info();
  void clear_has_mixer_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankedDocument > documents_;
  ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document > native_documents_;
  ::cosmo::pb::ExperimentInfo* experiment_info_;
  ::cosmo::pb::Metrics* metrics_;
  ::cosmo::pb::MixerInfo* mixer_info_;
  friend struct protobuf_cosmo_5fcache_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExperimentInfo

// required uint32 experiment_id = 1;
inline bool ExperimentInfo::has_experiment_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExperimentInfo::set_has_experiment_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExperimentInfo::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExperimentInfo::clear_experiment_id() {
  experiment_id_ = 0u;
  clear_has_experiment_id();
}
inline ::google::protobuf::uint32 ExperimentInfo::experiment_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.ExperimentInfo.experiment_id)
  return experiment_id_;
}
inline void ExperimentInfo::set_experiment_id(::google::protobuf::uint32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.ExperimentInfo.experiment_id)
}

// optional bool showed_from_a = 2;
inline bool ExperimentInfo::has_showed_from_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExperimentInfo::set_has_showed_from_a() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExperimentInfo::clear_has_showed_from_a() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExperimentInfo::clear_showed_from_a() {
  showed_from_a_ = false;
  clear_has_showed_from_a();
}
inline bool ExperimentInfo::showed_from_a() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.ExperimentInfo.showed_from_a)
  return showed_from_a_;
}
inline void ExperimentInfo::set_showed_from_a(bool value) {
  set_has_showed_from_a();
  showed_from_a_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.ExperimentInfo.showed_from_a)
}

// -------------------------------------------------------------------

// RankedDocument

// optional int64 source_id = 1;
inline bool RankedDocument::has_source_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankedDocument::set_has_source_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankedDocument::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankedDocument::clear_source_id() {
  source_id_ = GOOGLE_LONGLONG(0);
  clear_has_source_id();
}
inline ::google::protobuf::int64 RankedDocument::source_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.source_id)
  return source_id_;
}
inline void RankedDocument::set_source_id(::google::protobuf::int64 value) {
  set_has_source_id();
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.source_id)
}

// optional int64 doc_id = 2;
inline bool RankedDocument::has_doc_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankedDocument::set_has_doc_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankedDocument::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankedDocument::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
  clear_has_doc_id();
}
inline ::google::protobuf::int64 RankedDocument::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.doc_id)
  return doc_id_;
}
inline void RankedDocument::set_doc_id(::google::protobuf::int64 value) {
  set_has_doc_id();
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.doc_id)
}

// optional float rank = 3;
inline bool RankedDocument::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankedDocument::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankedDocument::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankedDocument::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline float RankedDocument::rank() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.rank)
  return rank_;
}
inline void RankedDocument::set_rank(float value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.rank)
}

// optional int32 category_id = 5;
inline bool RankedDocument::has_category_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankedDocument::set_has_category_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankedDocument::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankedDocument::clear_category_id() {
  category_id_ = 0;
  clear_has_category_id();
}
inline ::google::protobuf::int32 RankedDocument::category_id() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.category_id)
  return category_id_;
}
inline void RankedDocument::set_category_id(::google::protobuf::int32 value) {
  set_has_category_id();
  category_id_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.category_id)
}

// optional .cosmo.pb.DocumentInfo document_info = 6;
inline bool RankedDocument::has_document_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankedDocument::set_has_document_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankedDocument::clear_has_document_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankedDocument::clear_document_info() {
  if (document_info_ != NULL) document_info_->::cosmo::pb::DocumentInfo::Clear();
  clear_has_document_info();
}
inline const ::cosmo::pb::DocumentInfo& RankedDocument::document_info() const {
  const ::cosmo::pb::DocumentInfo* p = document_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.document_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::DocumentInfo*>(
      &::cosmo::pb::_DocumentInfo_default_instance_);
}
inline ::cosmo::pb::DocumentInfo* RankedDocument::mutable_document_info() {
  set_has_document_info();
  if (document_info_ == NULL) {
    document_info_ = new ::cosmo::pb::DocumentInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.RankedDocument.document_info)
  return document_info_;
}
inline ::cosmo::pb::DocumentInfo* RankedDocument::release_document_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.RankedDocument.document_info)
  clear_has_document_info();
  ::cosmo::pb::DocumentInfo* temp = document_info_;
  document_info_ = NULL;
  return temp;
}
inline void RankedDocument::set_allocated_document_info(::cosmo::pb::DocumentInfo* document_info) {
  delete document_info_;
  document_info_ = document_info;
  if (document_info) {
    set_has_document_info();
  } else {
    clear_has_document_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.RankedDocument.document_info)
}

// optional .cosmo.pb.InterleavingInfo interleaving_info = 7;
inline bool RankedDocument::has_interleaving_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankedDocument::set_has_interleaving_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankedDocument::clear_has_interleaving_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankedDocument::clear_interleaving_info() {
  if (interleaving_info_ != NULL) interleaving_info_->::cosmo::pb::InterleavingInfo::Clear();
  clear_has_interleaving_info();
}
inline const ::cosmo::pb::InterleavingInfo& RankedDocument::interleaving_info() const {
  const ::cosmo::pb::InterleavingInfo* p = interleaving_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.interleaving_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::InterleavingInfo*>(
      &::cosmo::pb::_InterleavingInfo_default_instance_);
}
inline ::cosmo::pb::InterleavingInfo* RankedDocument::mutable_interleaving_info() {
  set_has_interleaving_info();
  if (interleaving_info_ == NULL) {
    interleaving_info_ = new ::cosmo::pb::InterleavingInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.RankedDocument.interleaving_info)
  return interleaving_info_;
}
inline ::cosmo::pb::InterleavingInfo* RankedDocument::release_interleaving_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.RankedDocument.interleaving_info)
  clear_has_interleaving_info();
  ::cosmo::pb::InterleavingInfo* temp = interleaving_info_;
  interleaving_info_ = NULL;
  return temp;
}
inline void RankedDocument::set_allocated_interleaving_info(::cosmo::pb::InterleavingInfo* interleaving_info) {
  delete interleaving_info_;
  interleaving_info_ = interleaving_info;
  if (interleaving_info) {
    set_has_interleaving_info();
  } else {
    clear_has_interleaving_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.RankedDocument.interleaving_info)
}

// optional .cosmo.pb.Document.Type type = 8;
inline bool RankedDocument::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankedDocument::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankedDocument::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankedDocument::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cosmo::pb::Document_Type RankedDocument::type() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.type)
  return static_cast< ::cosmo::pb::Document_Type >(type_);
}
inline void RankedDocument::set_type(::cosmo::pb::Document_Type value) {
  assert(::cosmo::pb::Document_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.type)
}

// optional int64 site_hash = 9;
inline bool RankedDocument::has_site_hash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankedDocument::set_has_site_hash() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankedDocument::clear_has_site_hash() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankedDocument::clear_site_hash() {
  site_hash_ = GOOGLE_LONGLONG(0);
  clear_has_site_hash();
}
inline ::google::protobuf::int64 RankedDocument::site_hash() const {
  // @@protoc_insertion_point(field_get:cosmo.pb.RankedDocument.site_hash)
  return site_hash_;
}
inline void RankedDocument::set_site_hash(::google::protobuf::int64 value) {
  set_has_site_hash();
  site_hash_ = value;
  // @@protoc_insertion_point(field_set:cosmo.pb.RankedDocument.site_hash)
}

// -------------------------------------------------------------------

// CosmoCache

// repeated .cosmo.pb.RankedDocument documents = 1;
inline int CosmoCache::documents_size() const {
  return documents_.size();
}
inline void CosmoCache::clear_documents() {
  documents_.Clear();
}
inline const ::cosmo::pb::RankedDocument& CosmoCache::documents(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoCache.documents)
  return documents_.Get(index);
}
inline ::cosmo::pb::RankedDocument* CosmoCache::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoCache.documents)
  return documents_.Mutable(index);
}
inline ::cosmo::pb::RankedDocument* CosmoCache::add_documents() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoCache.documents)
  return documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankedDocument >*
CosmoCache::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoCache.documents)
  return &documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::RankedDocument >&
CosmoCache::documents() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoCache.documents)
  return documents_;
}

// optional .cosmo.pb.ExperimentInfo experiment_info = 2;
inline bool CosmoCache::has_experiment_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CosmoCache::set_has_experiment_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CosmoCache::clear_has_experiment_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CosmoCache::clear_experiment_info() {
  if (experiment_info_ != NULL) experiment_info_->::cosmo::pb::ExperimentInfo::Clear();
  clear_has_experiment_info();
}
inline const ::cosmo::pb::ExperimentInfo& CosmoCache::experiment_info() const {
  const ::cosmo::pb::ExperimentInfo* p = experiment_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoCache.experiment_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::ExperimentInfo*>(
      &::cosmo::pb::_ExperimentInfo_default_instance_);
}
inline ::cosmo::pb::ExperimentInfo* CosmoCache::mutable_experiment_info() {
  set_has_experiment_info();
  if (experiment_info_ == NULL) {
    experiment_info_ = new ::cosmo::pb::ExperimentInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoCache.experiment_info)
  return experiment_info_;
}
inline ::cosmo::pb::ExperimentInfo* CosmoCache::release_experiment_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoCache.experiment_info)
  clear_has_experiment_info();
  ::cosmo::pb::ExperimentInfo* temp = experiment_info_;
  experiment_info_ = NULL;
  return temp;
}
inline void CosmoCache::set_allocated_experiment_info(::cosmo::pb::ExperimentInfo* experiment_info) {
  delete experiment_info_;
  experiment_info_ = experiment_info;
  if (experiment_info) {
    set_has_experiment_info();
  } else {
    clear_has_experiment_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoCache.experiment_info)
}

// optional .cosmo.pb.Metrics metrics = 3;
inline bool CosmoCache::has_metrics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CosmoCache::set_has_metrics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CosmoCache::clear_has_metrics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CosmoCache::clear_metrics() {
  if (metrics_ != NULL) metrics_->::cosmo::pb::Metrics::Clear();
  clear_has_metrics();
}
inline const ::cosmo::pb::Metrics& CosmoCache::metrics() const {
  const ::cosmo::pb::Metrics* p = metrics_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoCache.metrics)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::Metrics*>(
      &::cosmo::pb::_Metrics_default_instance_);
}
inline ::cosmo::pb::Metrics* CosmoCache::mutable_metrics() {
  set_has_metrics();
  if (metrics_ == NULL) {
    metrics_ = new ::cosmo::pb::Metrics;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoCache.metrics)
  return metrics_;
}
inline ::cosmo::pb::Metrics* CosmoCache::release_metrics() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoCache.metrics)
  clear_has_metrics();
  ::cosmo::pb::Metrics* temp = metrics_;
  metrics_ = NULL;
  return temp;
}
inline void CosmoCache::set_allocated_metrics(::cosmo::pb::Metrics* metrics) {
  delete metrics_;
  metrics_ = metrics;
  if (metrics) {
    set_has_metrics();
  } else {
    clear_has_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoCache.metrics)
}

// optional .cosmo.pb.MixerInfo mixer_info = 4;
inline bool CosmoCache::has_mixer_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CosmoCache::set_has_mixer_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CosmoCache::clear_has_mixer_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CosmoCache::clear_mixer_info() {
  if (mixer_info_ != NULL) mixer_info_->::cosmo::pb::MixerInfo::Clear();
  clear_has_mixer_info();
}
inline const ::cosmo::pb::MixerInfo& CosmoCache::mixer_info() const {
  const ::cosmo::pb::MixerInfo* p = mixer_info_;
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoCache.mixer_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmo::pb::MixerInfo*>(
      &::cosmo::pb::_MixerInfo_default_instance_);
}
inline ::cosmo::pb::MixerInfo* CosmoCache::mutable_mixer_info() {
  set_has_mixer_info();
  if (mixer_info_ == NULL) {
    mixer_info_ = new ::cosmo::pb::MixerInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoCache.mixer_info)
  return mixer_info_;
}
inline ::cosmo::pb::MixerInfo* CosmoCache::release_mixer_info() {
  // @@protoc_insertion_point(field_release:cosmo.pb.CosmoCache.mixer_info)
  clear_has_mixer_info();
  ::cosmo::pb::MixerInfo* temp = mixer_info_;
  mixer_info_ = NULL;
  return temp;
}
inline void CosmoCache::set_allocated_mixer_info(::cosmo::pb::MixerInfo* mixer_info) {
  delete mixer_info_;
  mixer_info_ = mixer_info;
  if (mixer_info) {
    set_has_mixer_info();
  } else {
    clear_has_mixer_info();
  }
  // @@protoc_insertion_point(field_set_allocated:cosmo.pb.CosmoCache.mixer_info)
}

// repeated .cosmo.pb.Document native_documents = 5;
inline int CosmoCache::native_documents_size() const {
  return native_documents_.size();
}
inline void CosmoCache::clear_native_documents() {
  native_documents_.Clear();
}
inline const ::cosmo::pb::Document& CosmoCache::native_documents(int index) const {
  // @@protoc_insertion_point(field_get:cosmo.pb.CosmoCache.native_documents)
  return native_documents_.Get(index);
}
inline ::cosmo::pb::Document* CosmoCache::mutable_native_documents(int index) {
  // @@protoc_insertion_point(field_mutable:cosmo.pb.CosmoCache.native_documents)
  return native_documents_.Mutable(index);
}
inline ::cosmo::pb::Document* CosmoCache::add_native_documents() {
  // @@protoc_insertion_point(field_add:cosmo.pb.CosmoCache.native_documents)
  return native_documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >*
CosmoCache::mutable_native_documents() {
  // @@protoc_insertion_point(field_mutable_list:cosmo.pb.CosmoCache.native_documents)
  return &native_documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmo::pb::Document >&
CosmoCache::native_documents() const {
  // @@protoc_insertion_point(field_list:cosmo.pb.CosmoCache.native_documents)
  return native_documents_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace cosmo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cosmo_5fcache_2eproto__INCLUDED
