// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_efir.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cosmo_efir.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cosmoefir {
namespace pb {
class UserSimpleMetaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserSimpleMetaInfo>
     _instance;
} _UserSimpleMetaInfo_default_instance_;
class UserMetaInfo_RetrieverMetaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserMetaInfo_RetrieverMetaInfo>
     _instance;
} _UserMetaInfo_RetrieverMetaInfo_default_instance_;
class UserMetaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UserMetaInfo>
     _instance;
  int gender_;
} _UserMetaInfo_default_instance_;
class DocumentMetaInfo_OriginOfRecommendationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentMetaInfo_OriginOfRecommendation>
     _instance;
} _DocumentMetaInfo_OriginOfRecommendation_default_instance_;
class DocumentMetaInfo_RetrieverKindDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentMetaInfo_RetrieverKind>
     _instance;
} _DocumentMetaInfo_RetrieverKind_default_instance_;
class DocumentMetaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentMetaInfo>
     _instance;
} _DocumentMetaInfo_default_instance_;
class PixelMetaInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PixelMetaInfo>
     _instance;
} _PixelMetaInfo_default_instance_;
class VideoInfo_PlayerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoInfo_Player>
     _instance;
} _VideoInfo_Player_default_instance_;
class VideoInfo_PreviewDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoInfo_Preview>
     _instance;
} _VideoInfo_Preview_default_instance_;
class VideoInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VideoInfo>
     _instance;
} _VideoInfo_default_instance_;
class DocumentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Document>
     _instance;
  const ::google::protobuf::Int64Value* external_int_id_;
  const ::google::protobuf::StringValue* external_string_id_;
} _Document_default_instance_;
class CosmoResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CosmoResponse>
     _instance;
} _CosmoResponse_default_instance_;
class DocumentIdListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DocumentIdList>
     _instance;
} _DocumentIdList_default_instance_;

namespace protobuf_cosmo_5fefir_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleMetaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleMetaInfo, email_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleMetaInfo, vid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleMetaInfo, partner_user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo_RetrieverMetaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo_RetrieverMetaInfo, video_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo_RetrieverMetaInfo, music_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo_RetrieverMetaInfo, youtube_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo_RetrieverMetaInfo, news_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo_RetrieverMetaInfo, kids_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo_RetrieverMetaInfo, trailers_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo_RetrieverMetaInfo, sport_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo_RetrieverMetaInfo, podcasts_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo_RetrieverMetaInfo, relevant_documents_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(UserMetaInfoDefaultTypeInternal, gender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo, watched_videos_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo, site_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo, sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo, retriever_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMetaInfo, optional_gender_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo_OriginOfRecommendation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo_OriginOfRecommendation, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo_RetrieverKind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo_RetrieverKind, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, origin_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, retriever_kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentMetaInfo, tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelMetaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelMetaInfo, document_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelMetaInfo, user_common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelMetaInfo, user_simple_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo_Player, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo_Player, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo_Player, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo_Player, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo_Preview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo_Preview, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo_Preview, local_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo_Preview, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo_Preview, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, hd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, full_hd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, sig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, source_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, preview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, poster_preview_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, doc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, age_restrict_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, is_published_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, video_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, image_poster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, preview_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, is_series_),
  offsetof(DocumentDefaultTypeInternal, external_int_id_),
  offsetof(DocumentDefaultTypeInternal, external_string_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, compact_meta_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, variant_external_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoResponse, documents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoResponse, compact_user_meta_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CosmoResponse, channels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentIdList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentIdList, ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentIdList, ids_limit_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(UserSimpleMetaInfo)},
  { 8, -1, sizeof(UserMetaInfo_RetrieverMetaInfo)},
  { 22, -1, sizeof(UserMetaInfo)},
  { 34, -1, sizeof(DocumentMetaInfo_OriginOfRecommendation)},
  { 40, -1, sizeof(DocumentMetaInfo_RetrieverKind)},
  { 46, -1, sizeof(DocumentMetaInfo)},
  { 56, -1, sizeof(PixelMetaInfo)},
  { 64, -1, sizeof(VideoInfo_Player)},
  { 73, -1, sizeof(VideoInfo_Preview)},
  { 82, -1, sizeof(VideoInfo)},
  { 101, -1, sizeof(Document)},
  { 120, -1, sizeof(CosmoResponse)},
  { 128, -1, sizeof(DocumentIdList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserSimpleMetaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserMetaInfo_RetrieverMetaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserMetaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentMetaInfo_OriginOfRecommendation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentMetaInfo_RetrieverKind_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentMetaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PixelMetaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoInfo_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoInfo_Preview_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VideoInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Document_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CosmoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DocumentIdList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cosmo_efir.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaults();
  _UserSimpleMetaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserSimpleMetaInfo_default_instance_);_UserMetaInfo_RetrieverMetaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserMetaInfo_RetrieverMetaInfo_default_instance_);_UserMetaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UserMetaInfo_default_instance_);_DocumentMetaInfo_OriginOfRecommendation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentMetaInfo_OriginOfRecommendation_default_instance_);_DocumentMetaInfo_RetrieverKind_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentMetaInfo_RetrieverKind_default_instance_);_DocumentMetaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentMetaInfo_default_instance_);_PixelMetaInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PixelMetaInfo_default_instance_);_VideoInfo_Player_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoInfo_Player_default_instance_);_VideoInfo_Preview_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoInfo_Preview_default_instance_);_VideoInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VideoInfo_default_instance_);_Document_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Document_default_instance_);_CosmoResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CosmoResponse_default_instance_);_DocumentIdList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DocumentIdList_default_instance_);_UserSimpleMetaInfo_default_instance_._instance.get_mutable()->email_hash_ = const_cast< ::google::protobuf::UInt64Value*>(
      ::google::protobuf::UInt64Value::internal_default_instance());
  _UserSimpleMetaInfo_default_instance_._instance.get_mutable()->vid_ = const_cast< ::google::protobuf::UInt64Value*>(
      ::google::protobuf::UInt64Value::internal_default_instance());
  _UserMetaInfo_RetrieverMetaInfo_default_instance_._instance.get_mutable()->video_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_RetrieverMetaInfo_default_instance_._instance.get_mutable()->music_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_RetrieverMetaInfo_default_instance_._instance.get_mutable()->youtube_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_RetrieverMetaInfo_default_instance_._instance.get_mutable()->news_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_RetrieverMetaInfo_default_instance_._instance.get_mutable()->kids_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_RetrieverMetaInfo_default_instance_._instance.get_mutable()->trailers_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_RetrieverMetaInfo_default_instance_._instance.get_mutable()->sport_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_RetrieverMetaInfo_default_instance_._instance.get_mutable()->podcasts_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_RetrieverMetaInfo_default_instance_._instance.get_mutable()->relevant_documents_count_ = const_cast< ::google::protobuf::UInt64Value*>(
      ::google::protobuf::UInt64Value::internal_default_instance());
  _UserMetaInfo_default_instance_.gender_ = 0;
  _UserMetaInfo_default_instance_._instance.get_mutable()->age_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_default_instance_._instance.get_mutable()->watched_videos_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_default_instance_._instance.get_mutable()->site_count_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _UserMetaInfo_default_instance_._instance.get_mutable()->retriever_ = const_cast< ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo*>(
      ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo::internal_default_instance());
  _DocumentMetaInfo_default_instance_._instance.get_mutable()->origin_ = const_cast< ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation*>(
      ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation::internal_default_instance());
  _DocumentMetaInfo_default_instance_._instance.get_mutable()->retriever_kind_ = const_cast< ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind*>(
      ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind::internal_default_instance());
  _VideoInfo_default_instance_._instance.get_mutable()->player_ = const_cast< ::cosmoefir::pb::VideoInfo_Player*>(
      ::cosmoefir::pb::VideoInfo_Player::internal_default_instance());
  _VideoInfo_default_instance_._instance.get_mutable()->preview_ = const_cast< ::cosmoefir::pb::VideoInfo_Preview*>(
      ::cosmoefir::pb::VideoInfo_Preview::internal_default_instance());
  _VideoInfo_default_instance_._instance.get_mutable()->poster_preview_ = const_cast< ::cosmoefir::pb::VideoInfo_Preview*>(
      ::cosmoefir::pb::VideoInfo_Preview::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->name_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->category_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->age_restrict_ = const_cast< ::google::protobuf::UInt32Value*>(
      ::google::protobuf::UInt32Value::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->is_published_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->video_info_ = const_cast< ::cosmoefir::pb::VideoInfo*>(
      ::cosmoefir::pb::VideoInfo::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->image_poster_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->preview_url_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  _Document_default_instance_._instance.get_mutable()->is_series_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
  _Document_default_instance_.external_int_id_ = const_cast< ::google::protobuf::Int64Value*>(
      ::google::protobuf::Int64Value::internal_default_instance());
  _Document_default_instance_.external_string_id_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020cosmo_efir.proto\022\014cosmoefir.pb\032\036google"
      "/protobuf/wrappers.proto\"\212\001\n\022UserSimpleM"
      "etaInfo\0220\n\nemail_hash\030\001 \001(\0132\034.google.pro"
      "tobuf.UInt64Value\022)\n\003vid\030\002 \001(\0132\034.google."
      "protobuf.UInt64Value\022\027\n\017partner_user_id\030"
      "\003 \001(\t\"\250\006\n\014UserMetaInfo\022&\n\006gender\030\001 \001(\0162\024"
      ".cosmoefir.pb.GenderH\000\022)\n\003age\030\002 \001(\0132\034.go"
      "ogle.protobuf.UInt32Value\022:\n\024watched_vid"
      "eos_count\030\003 \001(\0132\034.google.protobuf.UInt32"
      "Value\0220\n\nsite_count\030\004 \001(\0132\034.google.proto"
      "buf.UInt32Value\022\017\n\007sources\030\005 \003(\004\022\?\n\tretr"
      "iever\030\n \001(\0132,.cosmoefir.pb.UserMetaInfo."
      "RetrieverMetaInfo\032\361\003\n\021RetrieverMetaInfo\022"
      "1\n\013video_count\030\001 \001(\0132\034.google.protobuf.U"
      "Int32Value\0221\n\013music_count\030\002 \001(\0132\034.google"
      ".protobuf.UInt32Value\0223\n\ryoutube_count\030\003"
      " \001(\0132\034.google.protobuf.UInt32Value\0220\n\nne"
      "ws_count\030\004 \001(\0132\034.google.protobuf.UInt32V"
      "alue\0220\n\nkids_count\030\005 \001(\0132\034.google.protob"
      "uf.UInt32Value\0224\n\016trailers_count\030\006 \001(\0132\034"
      ".google.protobuf.UInt32Value\0221\n\013sport_co"
      "unt\030\007 \001(\0132\034.google.protobuf.UInt32Value\022"
      "4\n\016podcasts_count\030\010 \001(\0132\034.google.protobu"
      "f.UInt32Value\022>\n\030relevant_documents_coun"
      "t\0302 \001(\0132\034.google.protobuf.UInt64ValueB\021\n"
      "\017optional_gender\"\212\006\n\020DocumentMetaInfo\022E\n"
      "\006origin\030\001 \001(\01325.cosmoefir.pb.DocumentMet"
      "aInfo.OriginOfRecommendation\022\021\n\torigin_i"
      "d\030\002 \001(\003\022D\n\016retriever_kind\030\003 \001(\0132,.cosmoe"
      "fir.pb.DocumentMetaInfo.RetrieverKind\022\020\n"
      "\010category\030\004 \001(\t\022\014\n\004tags\030\005 \003(\004\032\364\002\n\026Origin"
      "OfRecommendation\022F\n\005value\030\001 \001(\01627.cosmoe"
      "fir.pb.DocumentMetaInfo.OriginOfRecommen"
      "dation._\"\221\002\n\001_\022\013\n\007UNKNOWN\020\000\022\016\n\nUSER_VIDE"
      "O\020\001\022\016\n\nUSER_MUSIC\020\002\022\017\n\013USER_SOURCE\020\003\022\021\n\r"
      "FEEDBACK_LIKE\020\004\022\013\n\007SOC_DEM\020\005\022\007\n\003TOP\020\006\022\014\n"
      "\010START_ID\020\007\022\n\n\006LATEST\020\010\022\013\n\007DEFERED\020\t\022\021\n\r"
      "FEEDBACK_NEXT\020\n\022\t\n\005PROMO\020\013\022\020\n\014SOURCE_MOD"
      "EL\020\014\022\n\n\006RANDOM\020\r\022\025\n\021SIMILAR_DOCUMENTS\020\016\022"
      "\020\n\014TOP_PERSONAL\020\017\022\020\n\014TOP_SAMPLING\020\020\022\007\n\003U"
      "RL\020\021\032\276\001\n\rRetrieverKind\022=\n\005value\030\001 \001(\0162.."
      "cosmoefir.pb.DocumentMetaInfo.RetrieverK"
      "ind._\"n\n\001_\022\013\n\007UNKNOWN\020\000\022\t\n\005VIDEO\020\001\022\t\n\005MU"
      "SIC\020\002\022\013\n\007YOUTUBE\020\003\022\010\n\004NEWS\020\004\022\010\n\004KIDS\020\005\022\014"
      "\n\010TRAILERS\020\006\022\t\n\005SPORT\020\007\022\014\n\010PODCASTS\020\010\"K\n"
      "\rPixelMetaInfo\022\020\n\010document\030\001 \001(\014\022\023\n\013user"
      "_common\030\002 \001(\014\022\023\n\013user_simple\030\003 \001(\014\"\342\003\n\tV"
      "ideoInfo\022\013\n\003url\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\022\014\n\004nam"
      "e\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\022\020\n\010duration"
      "\030\005 \001(\r\022\n\n\002hd\030\006 \001(\010\022\017\n\007full_hd\030\007 \001(\010\022\013\n\003s"
      "ig\030\010 \001(\t\022\021\n\tsource_id\030\t \001(\r\022\023\n\013source_na"
      "me\030\n \001(\t\022\014\n\004time\030\013 \001(\004\022.\n\006player\030\014 \001(\0132\036"
      ".cosmoefir.pb.VideoInfo.Player\0220\n\007previe"
      "w\030\r \001(\0132\037.cosmoefir.pb.VideoInfo.Preview"
      "\0227\n\016poster_preview\030\016 \001(\0132\037.cosmoefir.pb."
      "VideoInfo.Preview\032B\n\006Player\022\014\n\004type\030\001 \001("
      "\t\022\013\n\003url\030\002 \001(\t\022\r\n\005width\030\003 \001(\r\022\016\n\006height\030"
      "\004 \001(\r\032H\n\007Preview\022\013\n\003url\030\001 \001(\t\022\021\n\tlocal_u"
      "rl\030\002 \001(\t\022\r\n\005width\030\003 \001(\r\022\016\n\006height\030\004 \001(\r\""
      "\344\004\n\010Document\022\016\n\006doc_id\030\001 \001(\003\022\014\n\004rank\030\002 \001"
      "(\002\022*\n\004name\030\003 \001(\0132\034.google.protobuf.Strin"
      "gValue\022.\n\010category\030\004 \001(\0132\034.google.protob"
      "uf.StringValue\0222\n\014age_restrict\030\005 \001(\0132\034.g"
      "oogle.protobuf.UInt32Value\0220\n\014is_publish"
      "ed\030\006 \001(\0132\032.google.protobuf.BoolValue\022+\n\n"
      "video_info\030\010 \001(\0132\027.cosmoefir.pb.VideoInf"
      "o\0222\n\014image_poster\030\t \001(\0132\034.google.protobu"
      "f.StringValue\0221\n\013preview_url\030\n \001(\0132\034.goo"
      "gle.protobuf.StringValue\022-\n\tis_series\030\013 "
      "\001(\0132\032.google.protobuf.BoolValue\0226\n\017exter"
      "nal_int_id\030\014 \001(\0132\033.google.protobuf.Int64"
      "ValueH\000\022:\n\022external_string_id\030\r \001(\0132\034.go"
      "ogle.protobuf.StringValueH\000\022\031\n\021compact_m"
      "eta_info\0303 \001(\014B\025\n\023variant_external_idJ\004\010"
      "2\0203R\tmeta_info\"\202\001\n\rCosmoResponse\022)\n\tdocu"
      "ments\030\001 \003(\0132\026.cosmoefir.pb.Document\022\036\n\026c"
      "ompact_user_meta_info\030\003 \001(\014\022\020\n\010channels\030"
      "\004 \003(\rJ\004\010\002\020\003R\016user_meta_info\"0\n\016DocumentI"
      "dList\022\013\n\003ids\030\001 \003(\003\022\021\n\tids_limit\030\002 \001(\r*(\n"
      "\006Gender\022\010\n\004NONE\020\000\022\010\n\004MALE\020\001\022\n\n\006FEMALE\020\002b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cosmo_efir.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cosmo_5fefir_2eproto

const ::google::protobuf::EnumDescriptor* DocumentMetaInfo_OriginOfRecommendation___descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_enum_descriptors[0];
}
bool DocumentMetaInfo_OriginOfRecommendation___IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::UNKNOWN;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::USER_VIDEO;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::USER_MUSIC;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::USER_SOURCE;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::FEEDBACK_LIKE;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::SOC_DEM;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::TOP;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::START_ID;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::LATEST;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::DEFERED;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::FEEDBACK_NEXT;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::PROMO;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::SOURCE_MODEL;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::RANDOM;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::SIMILAR_DOCUMENTS;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::TOP_PERSONAL;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::TOP_SAMPLING;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::URL;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::__MIN;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::__MAX;
const int DocumentMetaInfo_OriginOfRecommendation::__ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DocumentMetaInfo_RetrieverKind___descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_enum_descriptors[1];
}
bool DocumentMetaInfo_RetrieverKind___IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::UNKNOWN;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::VIDEO;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::MUSIC;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::YOUTUBE;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::NEWS;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::KIDS;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::TRAILERS;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::SPORT;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::PODCASTS;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::__MIN;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::__MAX;
const int DocumentMetaInfo_RetrieverKind::__ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gender_descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_enum_descriptors[2];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserSimpleMetaInfo::kEmailHashFieldNumber;
const int UserSimpleMetaInfo::kVidFieldNumber;
const int UserSimpleMetaInfo::kPartnerUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserSimpleMetaInfo::UserSimpleMetaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.UserSimpleMetaInfo)
}
UserSimpleMetaInfo::UserSimpleMetaInfo(const UserSimpleMetaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partner_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.partner_user_id().size() > 0) {
    partner_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partner_user_id_);
  }
  if (from.has_email_hash()) {
    email_hash_ = new ::google::protobuf::UInt64Value(*from.email_hash_);
  } else {
    email_hash_ = NULL;
  }
  if (from.has_vid()) {
    vid_ = new ::google::protobuf::UInt64Value(*from.vid_);
  } else {
    vid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.UserSimpleMetaInfo)
}

void UserSimpleMetaInfo::SharedCtor() {
  partner_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&email_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vid_) -
      reinterpret_cast<char*>(&email_hash_)) + sizeof(vid_));
  _cached_size_ = 0;
}

UserSimpleMetaInfo::~UserSimpleMetaInfo() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.UserSimpleMetaInfo)
  SharedDtor();
}

void UserSimpleMetaInfo::SharedDtor() {
  partner_user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete email_hash_;
  if (this != internal_default_instance()) delete vid_;
}

void UserSimpleMetaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSimpleMetaInfo::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserSimpleMetaInfo& UserSimpleMetaInfo::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserSimpleMetaInfo* UserSimpleMetaInfo::New(::google::protobuf::Arena* arena) const {
  UserSimpleMetaInfo* n = new UserSimpleMetaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserSimpleMetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.UserSimpleMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partner_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && email_hash_ != NULL) {
    delete email_hash_;
  }
  email_hash_ = NULL;
  if (GetArenaNoVirtual() == NULL && vid_ != NULL) {
    delete vid_;
  }
  vid_ = NULL;
  _internal_metadata_.Clear();
}

bool UserSimpleMetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.UserSimpleMetaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.UInt64Value email_hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_email_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt64Value vid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string partner_user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partner_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->partner_user_id().data(), static_cast<int>(this->partner_user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.UserSimpleMetaInfo.partner_user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.UserSimpleMetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.UserSimpleMetaInfo)
  return false;
#undef DO_
}

void UserSimpleMetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.UserSimpleMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt64Value email_hash = 1;
  if (this->has_email_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->email_hash_, output);
  }

  // .google.protobuf.UInt64Value vid = 2;
  if (this->has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vid_, output);
  }

  // string partner_user_id = 3;
  if (this->partner_user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partner_user_id().data(), static_cast<int>(this->partner_user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.UserSimpleMetaInfo.partner_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->partner_user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.UserSimpleMetaInfo)
}

::google::protobuf::uint8* UserSimpleMetaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.UserSimpleMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt64Value email_hash = 1;
  if (this->has_email_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->email_hash_, deterministic, target);
  }

  // .google.protobuf.UInt64Value vid = 2;
  if (this->has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vid_, deterministic, target);
  }

  // string partner_user_id = 3;
  if (this->partner_user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->partner_user_id().data(), static_cast<int>(this->partner_user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.UserSimpleMetaInfo.partner_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->partner_user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.UserSimpleMetaInfo)
  return target;
}

size_t UserSimpleMetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.UserSimpleMetaInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string partner_user_id = 3;
  if (this->partner_user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partner_user_id());
  }

  // .google.protobuf.UInt64Value email_hash = 1;
  if (this->has_email_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->email_hash_);
  }

  // .google.protobuf.UInt64Value vid = 2;
  if (this->has_vid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSimpleMetaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.UserSimpleMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSimpleMetaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserSimpleMetaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.UserSimpleMetaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.UserSimpleMetaInfo)
    MergeFrom(*source);
  }
}

void UserSimpleMetaInfo::MergeFrom(const UserSimpleMetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.UserSimpleMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.partner_user_id().size() > 0) {

    partner_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partner_user_id_);
  }
  if (from.has_email_hash()) {
    mutable_email_hash()->::google::protobuf::UInt64Value::MergeFrom(from.email_hash());
  }
  if (from.has_vid()) {
    mutable_vid()->::google::protobuf::UInt64Value::MergeFrom(from.vid());
  }
}

void UserSimpleMetaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.UserSimpleMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSimpleMetaInfo::CopyFrom(const UserSimpleMetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.UserSimpleMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSimpleMetaInfo::IsInitialized() const {
  return true;
}

void UserSimpleMetaInfo::Swap(UserSimpleMetaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserSimpleMetaInfo::InternalSwap(UserSimpleMetaInfo* other) {
  using std::swap;
  partner_user_id_.Swap(&other->partner_user_id_);
  swap(email_hash_, other->email_hash_);
  swap(vid_, other->vid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserSimpleMetaInfo::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserSimpleMetaInfo

// .google.protobuf.UInt64Value email_hash = 1;
bool UserSimpleMetaInfo::has_email_hash() const {
  return this != internal_default_instance() && email_hash_ != NULL;
}
void UserSimpleMetaInfo::clear_email_hash() {
  if (GetArenaNoVirtual() == NULL && email_hash_ != NULL) delete email_hash_;
  email_hash_ = NULL;
}
const ::google::protobuf::UInt64Value& UserSimpleMetaInfo::email_hash() const {
  const ::google::protobuf::UInt64Value* p = email_hash_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserSimpleMetaInfo.email_hash)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt64Value*>(
      &::google::protobuf::_UInt64Value_default_instance_);
}
::google::protobuf::UInt64Value* UserSimpleMetaInfo::mutable_email_hash() {
  
  if (email_hash_ == NULL) {
    email_hash_ = new ::google::protobuf::UInt64Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserSimpleMetaInfo.email_hash)
  return email_hash_;
}
::google::protobuf::UInt64Value* UserSimpleMetaInfo::release_email_hash() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserSimpleMetaInfo.email_hash)
  
  ::google::protobuf::UInt64Value* temp = email_hash_;
  email_hash_ = NULL;
  return temp;
}
void UserSimpleMetaInfo::set_allocated_email_hash(::google::protobuf::UInt64Value* email_hash) {
  delete email_hash_;
  if (email_hash != NULL && email_hash->GetArena() != NULL) {
    ::google::protobuf::UInt64Value* new_email_hash = new ::google::protobuf::UInt64Value;
    new_email_hash->CopyFrom(*email_hash);
    email_hash = new_email_hash;
  }
  email_hash_ = email_hash;
  if (email_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserSimpleMetaInfo.email_hash)
}

// .google.protobuf.UInt64Value vid = 2;
bool UserSimpleMetaInfo::has_vid() const {
  return this != internal_default_instance() && vid_ != NULL;
}
void UserSimpleMetaInfo::clear_vid() {
  if (GetArenaNoVirtual() == NULL && vid_ != NULL) delete vid_;
  vid_ = NULL;
}
const ::google::protobuf::UInt64Value& UserSimpleMetaInfo::vid() const {
  const ::google::protobuf::UInt64Value* p = vid_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserSimpleMetaInfo.vid)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt64Value*>(
      &::google::protobuf::_UInt64Value_default_instance_);
}
::google::protobuf::UInt64Value* UserSimpleMetaInfo::mutable_vid() {
  
  if (vid_ == NULL) {
    vid_ = new ::google::protobuf::UInt64Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserSimpleMetaInfo.vid)
  return vid_;
}
::google::protobuf::UInt64Value* UserSimpleMetaInfo::release_vid() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserSimpleMetaInfo.vid)
  
  ::google::protobuf::UInt64Value* temp = vid_;
  vid_ = NULL;
  return temp;
}
void UserSimpleMetaInfo::set_allocated_vid(::google::protobuf::UInt64Value* vid) {
  delete vid_;
  if (vid != NULL && vid->GetArena() != NULL) {
    ::google::protobuf::UInt64Value* new_vid = new ::google::protobuf::UInt64Value;
    new_vid->CopyFrom(*vid);
    vid = new_vid;
  }
  vid_ = vid;
  if (vid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserSimpleMetaInfo.vid)
}

// string partner_user_id = 3;
void UserSimpleMetaInfo::clear_partner_user_id() {
  partner_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserSimpleMetaInfo::partner_user_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
  return partner_user_id_.GetNoArena();
}
void UserSimpleMetaInfo::set_partner_user_id(const ::std::string& value) {
  
  partner_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
}
#if LANG_CXX11
void UserSimpleMetaInfo::set_partner_user_id(::std::string&& value) {
  
  partner_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
}
#endif
void UserSimpleMetaInfo::set_partner_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  partner_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
}
void UserSimpleMetaInfo::set_partner_user_id(const char* value, size_t size) {
  
  partner_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
}
::std::string* UserSimpleMetaInfo::mutable_partner_user_id() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
  return partner_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserSimpleMetaInfo::release_partner_user_id() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
  
  return partner_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserSimpleMetaInfo::set_allocated_partner_user_id(::std::string* partner_user_id) {
  if (partner_user_id != NULL) {
    
  } else {
    
  }
  partner_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partner_user_id);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMetaInfo_RetrieverMetaInfo::kVideoCountFieldNumber;
const int UserMetaInfo_RetrieverMetaInfo::kMusicCountFieldNumber;
const int UserMetaInfo_RetrieverMetaInfo::kYoutubeCountFieldNumber;
const int UserMetaInfo_RetrieverMetaInfo::kNewsCountFieldNumber;
const int UserMetaInfo_RetrieverMetaInfo::kKidsCountFieldNumber;
const int UserMetaInfo_RetrieverMetaInfo::kTrailersCountFieldNumber;
const int UserMetaInfo_RetrieverMetaInfo::kSportCountFieldNumber;
const int UserMetaInfo_RetrieverMetaInfo::kPodcastsCountFieldNumber;
const int UserMetaInfo_RetrieverMetaInfo::kRelevantDocumentsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMetaInfo_RetrieverMetaInfo::UserMetaInfo_RetrieverMetaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
}
UserMetaInfo_RetrieverMetaInfo::UserMetaInfo_RetrieverMetaInfo(const UserMetaInfo_RetrieverMetaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_count()) {
    video_count_ = new ::google::protobuf::UInt32Value(*from.video_count_);
  } else {
    video_count_ = NULL;
  }
  if (from.has_music_count()) {
    music_count_ = new ::google::protobuf::UInt32Value(*from.music_count_);
  } else {
    music_count_ = NULL;
  }
  if (from.has_youtube_count()) {
    youtube_count_ = new ::google::protobuf::UInt32Value(*from.youtube_count_);
  } else {
    youtube_count_ = NULL;
  }
  if (from.has_news_count()) {
    news_count_ = new ::google::protobuf::UInt32Value(*from.news_count_);
  } else {
    news_count_ = NULL;
  }
  if (from.has_kids_count()) {
    kids_count_ = new ::google::protobuf::UInt32Value(*from.kids_count_);
  } else {
    kids_count_ = NULL;
  }
  if (from.has_trailers_count()) {
    trailers_count_ = new ::google::protobuf::UInt32Value(*from.trailers_count_);
  } else {
    trailers_count_ = NULL;
  }
  if (from.has_sport_count()) {
    sport_count_ = new ::google::protobuf::UInt32Value(*from.sport_count_);
  } else {
    sport_count_ = NULL;
  }
  if (from.has_podcasts_count()) {
    podcasts_count_ = new ::google::protobuf::UInt32Value(*from.podcasts_count_);
  } else {
    podcasts_count_ = NULL;
  }
  if (from.has_relevant_documents_count()) {
    relevant_documents_count_ = new ::google::protobuf::UInt64Value(*from.relevant_documents_count_);
  } else {
    relevant_documents_count_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
}

void UserMetaInfo_RetrieverMetaInfo::SharedCtor() {
  ::memset(&video_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relevant_documents_count_) -
      reinterpret_cast<char*>(&video_count_)) + sizeof(relevant_documents_count_));
  _cached_size_ = 0;
}

UserMetaInfo_RetrieverMetaInfo::~UserMetaInfo_RetrieverMetaInfo() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  SharedDtor();
}

void UserMetaInfo_RetrieverMetaInfo::SharedDtor() {
  if (this != internal_default_instance()) delete video_count_;
  if (this != internal_default_instance()) delete music_count_;
  if (this != internal_default_instance()) delete youtube_count_;
  if (this != internal_default_instance()) delete news_count_;
  if (this != internal_default_instance()) delete kids_count_;
  if (this != internal_default_instance()) delete trailers_count_;
  if (this != internal_default_instance()) delete sport_count_;
  if (this != internal_default_instance()) delete podcasts_count_;
  if (this != internal_default_instance()) delete relevant_documents_count_;
}

void UserMetaInfo_RetrieverMetaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMetaInfo_RetrieverMetaInfo::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserMetaInfo_RetrieverMetaInfo& UserMetaInfo_RetrieverMetaInfo::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserMetaInfo_RetrieverMetaInfo* UserMetaInfo_RetrieverMetaInfo::New(::google::protobuf::Arena* arena) const {
  UserMetaInfo_RetrieverMetaInfo* n = new UserMetaInfo_RetrieverMetaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserMetaInfo_RetrieverMetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && video_count_ != NULL) {
    delete video_count_;
  }
  video_count_ = NULL;
  if (GetArenaNoVirtual() == NULL && music_count_ != NULL) {
    delete music_count_;
  }
  music_count_ = NULL;
  if (GetArenaNoVirtual() == NULL && youtube_count_ != NULL) {
    delete youtube_count_;
  }
  youtube_count_ = NULL;
  if (GetArenaNoVirtual() == NULL && news_count_ != NULL) {
    delete news_count_;
  }
  news_count_ = NULL;
  if (GetArenaNoVirtual() == NULL && kids_count_ != NULL) {
    delete kids_count_;
  }
  kids_count_ = NULL;
  if (GetArenaNoVirtual() == NULL && trailers_count_ != NULL) {
    delete trailers_count_;
  }
  trailers_count_ = NULL;
  if (GetArenaNoVirtual() == NULL && sport_count_ != NULL) {
    delete sport_count_;
  }
  sport_count_ = NULL;
  if (GetArenaNoVirtual() == NULL && podcasts_count_ != NULL) {
    delete podcasts_count_;
  }
  podcasts_count_ = NULL;
  if (GetArenaNoVirtual() == NULL && relevant_documents_count_ != NULL) {
    delete relevant_documents_count_;
  }
  relevant_documents_count_ = NULL;
  _internal_metadata_.Clear();
}

bool UserMetaInfo_RetrieverMetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.UInt32Value video_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value music_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value youtube_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youtube_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value news_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value kids_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kids_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value trailers_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trailers_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value sport_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sport_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value podcasts_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_podcasts_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt64Value relevant_documents_count = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relevant_documents_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  return false;
#undef DO_
}

void UserMetaInfo_RetrieverMetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value video_count = 1;
  if (this->has_video_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->video_count_, output);
  }

  // .google.protobuf.UInt32Value music_count = 2;
  if (this->has_music_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->music_count_, output);
  }

  // .google.protobuf.UInt32Value youtube_count = 3;
  if (this->has_youtube_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->youtube_count_, output);
  }

  // .google.protobuf.UInt32Value news_count = 4;
  if (this->has_news_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->news_count_, output);
  }

  // .google.protobuf.UInt32Value kids_count = 5;
  if (this->has_kids_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->kids_count_, output);
  }

  // .google.protobuf.UInt32Value trailers_count = 6;
  if (this->has_trailers_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->trailers_count_, output);
  }

  // .google.protobuf.UInt32Value sport_count = 7;
  if (this->has_sport_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->sport_count_, output);
  }

  // .google.protobuf.UInt32Value podcasts_count = 8;
  if (this->has_podcasts_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->podcasts_count_, output);
  }

  // .google.protobuf.UInt64Value relevant_documents_count = 50;
  if (this->has_relevant_documents_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->relevant_documents_count_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
}

::google::protobuf::uint8* UserMetaInfo_RetrieverMetaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value video_count = 1;
  if (this->has_video_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->video_count_, deterministic, target);
  }

  // .google.protobuf.UInt32Value music_count = 2;
  if (this->has_music_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->music_count_, deterministic, target);
  }

  // .google.protobuf.UInt32Value youtube_count = 3;
  if (this->has_youtube_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->youtube_count_, deterministic, target);
  }

  // .google.protobuf.UInt32Value news_count = 4;
  if (this->has_news_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->news_count_, deterministic, target);
  }

  // .google.protobuf.UInt32Value kids_count = 5;
  if (this->has_kids_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->kids_count_, deterministic, target);
  }

  // .google.protobuf.UInt32Value trailers_count = 6;
  if (this->has_trailers_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->trailers_count_, deterministic, target);
  }

  // .google.protobuf.UInt32Value sport_count = 7;
  if (this->has_sport_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->sport_count_, deterministic, target);
  }

  // .google.protobuf.UInt32Value podcasts_count = 8;
  if (this->has_podcasts_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->podcasts_count_, deterministic, target);
  }

  // .google.protobuf.UInt64Value relevant_documents_count = 50;
  if (this->has_relevant_documents_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->relevant_documents_count_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  return target;
}

size_t UserMetaInfo_RetrieverMetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.UInt32Value video_count = 1;
  if (this->has_video_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_count_);
  }

  // .google.protobuf.UInt32Value music_count = 2;
  if (this->has_music_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->music_count_);
  }

  // .google.protobuf.UInt32Value youtube_count = 3;
  if (this->has_youtube_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->youtube_count_);
  }

  // .google.protobuf.UInt32Value news_count = 4;
  if (this->has_news_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->news_count_);
  }

  // .google.protobuf.UInt32Value kids_count = 5;
  if (this->has_kids_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kids_count_);
  }

  // .google.protobuf.UInt32Value trailers_count = 6;
  if (this->has_trailers_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trailers_count_);
  }

  // .google.protobuf.UInt32Value sport_count = 7;
  if (this->has_sport_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sport_count_);
  }

  // .google.protobuf.UInt32Value podcasts_count = 8;
  if (this->has_podcasts_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->podcasts_count_);
  }

  // .google.protobuf.UInt64Value relevant_documents_count = 50;
  if (this->has_relevant_documents_count()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relevant_documents_count_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMetaInfo_RetrieverMetaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMetaInfo_RetrieverMetaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserMetaInfo_RetrieverMetaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
    MergeFrom(*source);
  }
}

void UserMetaInfo_RetrieverMetaInfo::MergeFrom(const UserMetaInfo_RetrieverMetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video_count()) {
    mutable_video_count()->::google::protobuf::UInt32Value::MergeFrom(from.video_count());
  }
  if (from.has_music_count()) {
    mutable_music_count()->::google::protobuf::UInt32Value::MergeFrom(from.music_count());
  }
  if (from.has_youtube_count()) {
    mutable_youtube_count()->::google::protobuf::UInt32Value::MergeFrom(from.youtube_count());
  }
  if (from.has_news_count()) {
    mutable_news_count()->::google::protobuf::UInt32Value::MergeFrom(from.news_count());
  }
  if (from.has_kids_count()) {
    mutable_kids_count()->::google::protobuf::UInt32Value::MergeFrom(from.kids_count());
  }
  if (from.has_trailers_count()) {
    mutable_trailers_count()->::google::protobuf::UInt32Value::MergeFrom(from.trailers_count());
  }
  if (from.has_sport_count()) {
    mutable_sport_count()->::google::protobuf::UInt32Value::MergeFrom(from.sport_count());
  }
  if (from.has_podcasts_count()) {
    mutable_podcasts_count()->::google::protobuf::UInt32Value::MergeFrom(from.podcasts_count());
  }
  if (from.has_relevant_documents_count()) {
    mutable_relevant_documents_count()->::google::protobuf::UInt64Value::MergeFrom(from.relevant_documents_count());
  }
}

void UserMetaInfo_RetrieverMetaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMetaInfo_RetrieverMetaInfo::CopyFrom(const UserMetaInfo_RetrieverMetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMetaInfo_RetrieverMetaInfo::IsInitialized() const {
  return true;
}

void UserMetaInfo_RetrieverMetaInfo::Swap(UserMetaInfo_RetrieverMetaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserMetaInfo_RetrieverMetaInfo::InternalSwap(UserMetaInfo_RetrieverMetaInfo* other) {
  using std::swap;
  swap(video_count_, other->video_count_);
  swap(music_count_, other->music_count_);
  swap(youtube_count_, other->youtube_count_);
  swap(news_count_, other->news_count_);
  swap(kids_count_, other->kids_count_);
  swap(trailers_count_, other->trailers_count_);
  swap(sport_count_, other->sport_count_);
  swap(podcasts_count_, other->podcasts_count_);
  swap(relevant_documents_count_, other->relevant_documents_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserMetaInfo_RetrieverMetaInfo::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserMetaInfo_RetrieverMetaInfo

// .google.protobuf.UInt32Value video_count = 1;
bool UserMetaInfo_RetrieverMetaInfo::has_video_count() const {
  return this != internal_default_instance() && video_count_ != NULL;
}
void UserMetaInfo_RetrieverMetaInfo::clear_video_count() {
  if (GetArenaNoVirtual() == NULL && video_count_ != NULL) delete video_count_;
  video_count_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::video_count() const {
  const ::google::protobuf::UInt32Value* p = video_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.video_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_video_count() {
  
  if (video_count_ == NULL) {
    video_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.video_count)
  return video_count_;
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_video_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.video_count)
  
  ::google::protobuf::UInt32Value* temp = video_count_;
  video_count_ = NULL;
  return temp;
}
void UserMetaInfo_RetrieverMetaInfo::set_allocated_video_count(::google::protobuf::UInt32Value* video_count) {
  delete video_count_;
  if (video_count != NULL && video_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_video_count = new ::google::protobuf::UInt32Value;
    new_video_count->CopyFrom(*video_count);
    video_count = new_video_count;
  }
  video_count_ = video_count;
  if (video_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.video_count)
}

// .google.protobuf.UInt32Value music_count = 2;
bool UserMetaInfo_RetrieverMetaInfo::has_music_count() const {
  return this != internal_default_instance() && music_count_ != NULL;
}
void UserMetaInfo_RetrieverMetaInfo::clear_music_count() {
  if (GetArenaNoVirtual() == NULL && music_count_ != NULL) delete music_count_;
  music_count_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::music_count() const {
  const ::google::protobuf::UInt32Value* p = music_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.music_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_music_count() {
  
  if (music_count_ == NULL) {
    music_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.music_count)
  return music_count_;
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_music_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.music_count)
  
  ::google::protobuf::UInt32Value* temp = music_count_;
  music_count_ = NULL;
  return temp;
}
void UserMetaInfo_RetrieverMetaInfo::set_allocated_music_count(::google::protobuf::UInt32Value* music_count) {
  delete music_count_;
  if (music_count != NULL && music_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_music_count = new ::google::protobuf::UInt32Value;
    new_music_count->CopyFrom(*music_count);
    music_count = new_music_count;
  }
  music_count_ = music_count;
  if (music_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.music_count)
}

// .google.protobuf.UInt32Value youtube_count = 3;
bool UserMetaInfo_RetrieverMetaInfo::has_youtube_count() const {
  return this != internal_default_instance() && youtube_count_ != NULL;
}
void UserMetaInfo_RetrieverMetaInfo::clear_youtube_count() {
  if (GetArenaNoVirtual() == NULL && youtube_count_ != NULL) delete youtube_count_;
  youtube_count_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::youtube_count() const {
  const ::google::protobuf::UInt32Value* p = youtube_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.youtube_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_youtube_count() {
  
  if (youtube_count_ == NULL) {
    youtube_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.youtube_count)
  return youtube_count_;
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_youtube_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.youtube_count)
  
  ::google::protobuf::UInt32Value* temp = youtube_count_;
  youtube_count_ = NULL;
  return temp;
}
void UserMetaInfo_RetrieverMetaInfo::set_allocated_youtube_count(::google::protobuf::UInt32Value* youtube_count) {
  delete youtube_count_;
  if (youtube_count != NULL && youtube_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_youtube_count = new ::google::protobuf::UInt32Value;
    new_youtube_count->CopyFrom(*youtube_count);
    youtube_count = new_youtube_count;
  }
  youtube_count_ = youtube_count;
  if (youtube_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.youtube_count)
}

// .google.protobuf.UInt32Value news_count = 4;
bool UserMetaInfo_RetrieverMetaInfo::has_news_count() const {
  return this != internal_default_instance() && news_count_ != NULL;
}
void UserMetaInfo_RetrieverMetaInfo::clear_news_count() {
  if (GetArenaNoVirtual() == NULL && news_count_ != NULL) delete news_count_;
  news_count_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::news_count() const {
  const ::google::protobuf::UInt32Value* p = news_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.news_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_news_count() {
  
  if (news_count_ == NULL) {
    news_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.news_count)
  return news_count_;
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_news_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.news_count)
  
  ::google::protobuf::UInt32Value* temp = news_count_;
  news_count_ = NULL;
  return temp;
}
void UserMetaInfo_RetrieverMetaInfo::set_allocated_news_count(::google::protobuf::UInt32Value* news_count) {
  delete news_count_;
  if (news_count != NULL && news_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_news_count = new ::google::protobuf::UInt32Value;
    new_news_count->CopyFrom(*news_count);
    news_count = new_news_count;
  }
  news_count_ = news_count;
  if (news_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.news_count)
}

// .google.protobuf.UInt32Value kids_count = 5;
bool UserMetaInfo_RetrieverMetaInfo::has_kids_count() const {
  return this != internal_default_instance() && kids_count_ != NULL;
}
void UserMetaInfo_RetrieverMetaInfo::clear_kids_count() {
  if (GetArenaNoVirtual() == NULL && kids_count_ != NULL) delete kids_count_;
  kids_count_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::kids_count() const {
  const ::google::protobuf::UInt32Value* p = kids_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.kids_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_kids_count() {
  
  if (kids_count_ == NULL) {
    kids_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.kids_count)
  return kids_count_;
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_kids_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.kids_count)
  
  ::google::protobuf::UInt32Value* temp = kids_count_;
  kids_count_ = NULL;
  return temp;
}
void UserMetaInfo_RetrieverMetaInfo::set_allocated_kids_count(::google::protobuf::UInt32Value* kids_count) {
  delete kids_count_;
  if (kids_count != NULL && kids_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_kids_count = new ::google::protobuf::UInt32Value;
    new_kids_count->CopyFrom(*kids_count);
    kids_count = new_kids_count;
  }
  kids_count_ = kids_count;
  if (kids_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.kids_count)
}

// .google.protobuf.UInt32Value trailers_count = 6;
bool UserMetaInfo_RetrieverMetaInfo::has_trailers_count() const {
  return this != internal_default_instance() && trailers_count_ != NULL;
}
void UserMetaInfo_RetrieverMetaInfo::clear_trailers_count() {
  if (GetArenaNoVirtual() == NULL && trailers_count_ != NULL) delete trailers_count_;
  trailers_count_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::trailers_count() const {
  const ::google::protobuf::UInt32Value* p = trailers_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.trailers_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_trailers_count() {
  
  if (trailers_count_ == NULL) {
    trailers_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.trailers_count)
  return trailers_count_;
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_trailers_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.trailers_count)
  
  ::google::protobuf::UInt32Value* temp = trailers_count_;
  trailers_count_ = NULL;
  return temp;
}
void UserMetaInfo_RetrieverMetaInfo::set_allocated_trailers_count(::google::protobuf::UInt32Value* trailers_count) {
  delete trailers_count_;
  if (trailers_count != NULL && trailers_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_trailers_count = new ::google::protobuf::UInt32Value;
    new_trailers_count->CopyFrom(*trailers_count);
    trailers_count = new_trailers_count;
  }
  trailers_count_ = trailers_count;
  if (trailers_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.trailers_count)
}

// .google.protobuf.UInt32Value sport_count = 7;
bool UserMetaInfo_RetrieverMetaInfo::has_sport_count() const {
  return this != internal_default_instance() && sport_count_ != NULL;
}
void UserMetaInfo_RetrieverMetaInfo::clear_sport_count() {
  if (GetArenaNoVirtual() == NULL && sport_count_ != NULL) delete sport_count_;
  sport_count_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::sport_count() const {
  const ::google::protobuf::UInt32Value* p = sport_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.sport_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_sport_count() {
  
  if (sport_count_ == NULL) {
    sport_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.sport_count)
  return sport_count_;
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_sport_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.sport_count)
  
  ::google::protobuf::UInt32Value* temp = sport_count_;
  sport_count_ = NULL;
  return temp;
}
void UserMetaInfo_RetrieverMetaInfo::set_allocated_sport_count(::google::protobuf::UInt32Value* sport_count) {
  delete sport_count_;
  if (sport_count != NULL && sport_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_sport_count = new ::google::protobuf::UInt32Value;
    new_sport_count->CopyFrom(*sport_count);
    sport_count = new_sport_count;
  }
  sport_count_ = sport_count;
  if (sport_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.sport_count)
}

// .google.protobuf.UInt32Value podcasts_count = 8;
bool UserMetaInfo_RetrieverMetaInfo::has_podcasts_count() const {
  return this != internal_default_instance() && podcasts_count_ != NULL;
}
void UserMetaInfo_RetrieverMetaInfo::clear_podcasts_count() {
  if (GetArenaNoVirtual() == NULL && podcasts_count_ != NULL) delete podcasts_count_;
  podcasts_count_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::podcasts_count() const {
  const ::google::protobuf::UInt32Value* p = podcasts_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.podcasts_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_podcasts_count() {
  
  if (podcasts_count_ == NULL) {
    podcasts_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.podcasts_count)
  return podcasts_count_;
}
::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_podcasts_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.podcasts_count)
  
  ::google::protobuf::UInt32Value* temp = podcasts_count_;
  podcasts_count_ = NULL;
  return temp;
}
void UserMetaInfo_RetrieverMetaInfo::set_allocated_podcasts_count(::google::protobuf::UInt32Value* podcasts_count) {
  delete podcasts_count_;
  if (podcasts_count != NULL && podcasts_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_podcasts_count = new ::google::protobuf::UInt32Value;
    new_podcasts_count->CopyFrom(*podcasts_count);
    podcasts_count = new_podcasts_count;
  }
  podcasts_count_ = podcasts_count;
  if (podcasts_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.podcasts_count)
}

// .google.protobuf.UInt64Value relevant_documents_count = 50;
bool UserMetaInfo_RetrieverMetaInfo::has_relevant_documents_count() const {
  return this != internal_default_instance() && relevant_documents_count_ != NULL;
}
void UserMetaInfo_RetrieverMetaInfo::clear_relevant_documents_count() {
  if (GetArenaNoVirtual() == NULL && relevant_documents_count_ != NULL) delete relevant_documents_count_;
  relevant_documents_count_ = NULL;
}
const ::google::protobuf::UInt64Value& UserMetaInfo_RetrieverMetaInfo::relevant_documents_count() const {
  const ::google::protobuf::UInt64Value* p = relevant_documents_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.relevant_documents_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt64Value*>(
      &::google::protobuf::_UInt64Value_default_instance_);
}
::google::protobuf::UInt64Value* UserMetaInfo_RetrieverMetaInfo::mutable_relevant_documents_count() {
  
  if (relevant_documents_count_ == NULL) {
    relevant_documents_count_ = new ::google::protobuf::UInt64Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.relevant_documents_count)
  return relevant_documents_count_;
}
::google::protobuf::UInt64Value* UserMetaInfo_RetrieverMetaInfo::release_relevant_documents_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.relevant_documents_count)
  
  ::google::protobuf::UInt64Value* temp = relevant_documents_count_;
  relevant_documents_count_ = NULL;
  return temp;
}
void UserMetaInfo_RetrieverMetaInfo::set_allocated_relevant_documents_count(::google::protobuf::UInt64Value* relevant_documents_count) {
  delete relevant_documents_count_;
  if (relevant_documents_count != NULL && relevant_documents_count->GetArena() != NULL) {
    ::google::protobuf::UInt64Value* new_relevant_documents_count = new ::google::protobuf::UInt64Value;
    new_relevant_documents_count->CopyFrom(*relevant_documents_count);
    relevant_documents_count = new_relevant_documents_count;
  }
  relevant_documents_count_ = relevant_documents_count;
  if (relevant_documents_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.relevant_documents_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserMetaInfo::kGenderFieldNumber;
const int UserMetaInfo::kAgeFieldNumber;
const int UserMetaInfo::kWatchedVideosCountFieldNumber;
const int UserMetaInfo::kSiteCountFieldNumber;
const int UserMetaInfo::kSourcesFieldNumber;
const int UserMetaInfo::kRetrieverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserMetaInfo::UserMetaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.UserMetaInfo)
}
UserMetaInfo::UserMetaInfo(const UserMetaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sources_(from.sources_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_age()) {
    age_ = new ::google::protobuf::UInt32Value(*from.age_);
  } else {
    age_ = NULL;
  }
  if (from.has_watched_videos_count()) {
    watched_videos_count_ = new ::google::protobuf::UInt32Value(*from.watched_videos_count_);
  } else {
    watched_videos_count_ = NULL;
  }
  if (from.has_site_count()) {
    site_count_ = new ::google::protobuf::UInt32Value(*from.site_count_);
  } else {
    site_count_ = NULL;
  }
  if (from.has_retriever()) {
    retriever_ = new ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo(*from.retriever_);
  } else {
    retriever_ = NULL;
  }
  clear_has_optional_gender();
  switch (from.optional_gender_case()) {
    case kGender: {
      set_gender(from.gender());
      break;
    }
    case OPTIONAL_GENDER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.UserMetaInfo)
}

void UserMetaInfo::SharedCtor() {
  ::memset(&age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retriever_) -
      reinterpret_cast<char*>(&age_)) + sizeof(retriever_));
  clear_has_optional_gender();
  _cached_size_ = 0;
}

UserMetaInfo::~UserMetaInfo() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.UserMetaInfo)
  SharedDtor();
}

void UserMetaInfo::SharedDtor() {
  if (this != internal_default_instance()) delete age_;
  if (this != internal_default_instance()) delete watched_videos_count_;
  if (this != internal_default_instance()) delete site_count_;
  if (this != internal_default_instance()) delete retriever_;
  if (has_optional_gender()) {
    clear_optional_gender();
  }
}

void UserMetaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMetaInfo::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserMetaInfo& UserMetaInfo::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserMetaInfo* UserMetaInfo::New(::google::protobuf::Arena* arena) const {
  UserMetaInfo* n = new UserMetaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserMetaInfo::clear_optional_gender() {
// @@protoc_insertion_point(one_of_clear_start:cosmoefir.pb.UserMetaInfo)
  switch (optional_gender_case()) {
    case kGender: {
      // No need to clear
      break;
    }
    case OPTIONAL_GENDER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_GENDER_NOT_SET;
}


void UserMetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.UserMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sources_.Clear();
  if (GetArenaNoVirtual() == NULL && age_ != NULL) {
    delete age_;
  }
  age_ = NULL;
  if (GetArenaNoVirtual() == NULL && watched_videos_count_ != NULL) {
    delete watched_videos_count_;
  }
  watched_videos_count_ = NULL;
  if (GetArenaNoVirtual() == NULL && site_count_ != NULL) {
    delete site_count_;
  }
  site_count_ = NULL;
  if (GetArenaNoVirtual() == NULL && retriever_ != NULL) {
    delete retriever_;
  }
  retriever_ = NULL;
  clear_optional_gender();
  _internal_metadata_.Clear();
}

bool UserMetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.UserMetaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cosmoefir.pb.Gender gender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gender(static_cast< ::cosmoefir::pb::Gender >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value watched_videos_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_watched_videos_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value site_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 sources = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_sources())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42u, input, this->mutable_sources())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo retriever = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retriever()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.UserMetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.UserMetaInfo)
  return false;
#undef DO_
}

void UserMetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.UserMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmoefir.pb.Gender gender = 1;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gender(), output);
  }

  // .google.protobuf.UInt32Value age = 2;
  if (this->has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->age_, output);
  }

  // .google.protobuf.UInt32Value watched_videos_count = 3;
  if (this->has_watched_videos_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->watched_videos_count_, output);
  }

  // .google.protobuf.UInt32Value site_count = 4;
  if (this->has_site_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->site_count_, output);
  }

  // repeated uint64 sources = 5;
  if (this->sources_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sources_cached_byte_size_));
  }
  for (int i = 0, n = this->sources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->sources(i), output);
  }

  // .cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo retriever = 10;
  if (this->has_retriever()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->retriever_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.UserMetaInfo)
}

::google::protobuf::uint8* UserMetaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.UserMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmoefir.pb.Gender gender = 1;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gender(), target);
  }

  // .google.protobuf.UInt32Value age = 2;
  if (this->has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->age_, deterministic, target);
  }

  // .google.protobuf.UInt32Value watched_videos_count = 3;
  if (this->has_watched_videos_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->watched_videos_count_, deterministic, target);
  }

  // .google.protobuf.UInt32Value site_count = 4;
  if (this->has_site_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->site_count_, deterministic, target);
  }

  // repeated uint64 sources = 5;
  if (this->sources_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _sources_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->sources_, target);
  }

  // .cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo retriever = 10;
  if (this->has_retriever()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->retriever_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.UserMetaInfo)
  return target;
}

size_t UserMetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.UserMetaInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 sources = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->sources_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sources_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .google.protobuf.UInt32Value age = 2;
  if (this->has_age()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->age_);
  }

  // .google.protobuf.UInt32Value watched_videos_count = 3;
  if (this->has_watched_videos_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->watched_videos_count_);
  }

  // .google.protobuf.UInt32Value site_count = 4;
  if (this->has_site_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->site_count_);
  }

  // .cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo retriever = 10;
  if (this->has_retriever()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->retriever_);
  }

  switch (optional_gender_case()) {
    // .cosmoefir.pb.Gender gender = 1;
    case kGender: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
      break;
    }
    case OPTIONAL_GENDER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMetaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.UserMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserMetaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserMetaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.UserMetaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.UserMetaInfo)
    MergeFrom(*source);
  }
}

void UserMetaInfo::MergeFrom(const UserMetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.UserMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sources_.MergeFrom(from.sources_);
  if (from.has_age()) {
    mutable_age()->::google::protobuf::UInt32Value::MergeFrom(from.age());
  }
  if (from.has_watched_videos_count()) {
    mutable_watched_videos_count()->::google::protobuf::UInt32Value::MergeFrom(from.watched_videos_count());
  }
  if (from.has_site_count()) {
    mutable_site_count()->::google::protobuf::UInt32Value::MergeFrom(from.site_count());
  }
  if (from.has_retriever()) {
    mutable_retriever()->::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo::MergeFrom(from.retriever());
  }
  switch (from.optional_gender_case()) {
    case kGender: {
      set_gender(from.gender());
      break;
    }
    case OPTIONAL_GENDER_NOT_SET: {
      break;
    }
  }
}

void UserMetaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.UserMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMetaInfo::CopyFrom(const UserMetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.UserMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMetaInfo::IsInitialized() const {
  return true;
}

void UserMetaInfo::Swap(UserMetaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserMetaInfo::InternalSwap(UserMetaInfo* other) {
  using std::swap;
  sources_.InternalSwap(&other->sources_);
  swap(age_, other->age_);
  swap(watched_videos_count_, other->watched_videos_count_);
  swap(site_count_, other->site_count_);
  swap(retriever_, other->retriever_);
  swap(optional_gender_, other->optional_gender_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserMetaInfo::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserMetaInfo

// .cosmoefir.pb.Gender gender = 1;
bool UserMetaInfo::has_gender() const {
  return optional_gender_case() == kGender;
}
void UserMetaInfo::set_has_gender() {
  _oneof_case_[0] = kGender;
}
void UserMetaInfo::clear_gender() {
  if (has_gender()) {
    optional_gender_.gender_ = 0;
    clear_has_optional_gender();
  }
}
::cosmoefir::pb::Gender UserMetaInfo::gender() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.gender)
  if (has_gender()) {
    return static_cast< ::cosmoefir::pb::Gender >(optional_gender_.gender_);
  }
  return static_cast< ::cosmoefir::pb::Gender >(0);
}
void UserMetaInfo::set_gender(::cosmoefir::pb::Gender value) {
  if (!has_gender()) {
    clear_optional_gender();
    set_has_gender();
  }
  optional_gender_.gender_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.UserMetaInfo.gender)
}

// .google.protobuf.UInt32Value age = 2;
bool UserMetaInfo::has_age() const {
  return this != internal_default_instance() && age_ != NULL;
}
void UserMetaInfo::clear_age() {
  if (GetArenaNoVirtual() == NULL && age_ != NULL) delete age_;
  age_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo::age() const {
  const ::google::protobuf::UInt32Value* p = age_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.age)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo::mutable_age() {
  
  if (age_ == NULL) {
    age_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.age)
  return age_;
}
::google::protobuf::UInt32Value* UserMetaInfo::release_age() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.age)
  
  ::google::protobuf::UInt32Value* temp = age_;
  age_ = NULL;
  return temp;
}
void UserMetaInfo::set_allocated_age(::google::protobuf::UInt32Value* age) {
  delete age_;
  if (age != NULL && age->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_age = new ::google::protobuf::UInt32Value;
    new_age->CopyFrom(*age);
    age = new_age;
  }
  age_ = age;
  if (age) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.age)
}

// .google.protobuf.UInt32Value watched_videos_count = 3;
bool UserMetaInfo::has_watched_videos_count() const {
  return this != internal_default_instance() && watched_videos_count_ != NULL;
}
void UserMetaInfo::clear_watched_videos_count() {
  if (GetArenaNoVirtual() == NULL && watched_videos_count_ != NULL) delete watched_videos_count_;
  watched_videos_count_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo::watched_videos_count() const {
  const ::google::protobuf::UInt32Value* p = watched_videos_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.watched_videos_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo::mutable_watched_videos_count() {
  
  if (watched_videos_count_ == NULL) {
    watched_videos_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.watched_videos_count)
  return watched_videos_count_;
}
::google::protobuf::UInt32Value* UserMetaInfo::release_watched_videos_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.watched_videos_count)
  
  ::google::protobuf::UInt32Value* temp = watched_videos_count_;
  watched_videos_count_ = NULL;
  return temp;
}
void UserMetaInfo::set_allocated_watched_videos_count(::google::protobuf::UInt32Value* watched_videos_count) {
  delete watched_videos_count_;
  if (watched_videos_count != NULL && watched_videos_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_watched_videos_count = new ::google::protobuf::UInt32Value;
    new_watched_videos_count->CopyFrom(*watched_videos_count);
    watched_videos_count = new_watched_videos_count;
  }
  watched_videos_count_ = watched_videos_count;
  if (watched_videos_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.watched_videos_count)
}

// .google.protobuf.UInt32Value site_count = 4;
bool UserMetaInfo::has_site_count() const {
  return this != internal_default_instance() && site_count_ != NULL;
}
void UserMetaInfo::clear_site_count() {
  if (GetArenaNoVirtual() == NULL && site_count_ != NULL) delete site_count_;
  site_count_ = NULL;
}
const ::google::protobuf::UInt32Value& UserMetaInfo::site_count() const {
  const ::google::protobuf::UInt32Value* p = site_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.site_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* UserMetaInfo::mutable_site_count() {
  
  if (site_count_ == NULL) {
    site_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.site_count)
  return site_count_;
}
::google::protobuf::UInt32Value* UserMetaInfo::release_site_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.site_count)
  
  ::google::protobuf::UInt32Value* temp = site_count_;
  site_count_ = NULL;
  return temp;
}
void UserMetaInfo::set_allocated_site_count(::google::protobuf::UInt32Value* site_count) {
  delete site_count_;
  if (site_count != NULL && site_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_site_count = new ::google::protobuf::UInt32Value;
    new_site_count->CopyFrom(*site_count);
    site_count = new_site_count;
  }
  site_count_ = site_count;
  if (site_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.site_count)
}

// repeated uint64 sources = 5;
int UserMetaInfo::sources_size() const {
  return sources_.size();
}
void UserMetaInfo::clear_sources() {
  sources_.Clear();
}
::google::protobuf::uint64 UserMetaInfo::sources(int index) const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.sources)
  return sources_.Get(index);
}
void UserMetaInfo::set_sources(int index, ::google::protobuf::uint64 value) {
  sources_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.UserMetaInfo.sources)
}
void UserMetaInfo::add_sources(::google::protobuf::uint64 value) {
  sources_.Add(value);
  // @@protoc_insertion_point(field_add:cosmoefir.pb.UserMetaInfo.sources)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserMetaInfo::sources() const {
  // @@protoc_insertion_point(field_list:cosmoefir.pb.UserMetaInfo.sources)
  return sources_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserMetaInfo::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:cosmoefir.pb.UserMetaInfo.sources)
  return &sources_;
}

// .cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo retriever = 10;
bool UserMetaInfo::has_retriever() const {
  return this != internal_default_instance() && retriever_ != NULL;
}
void UserMetaInfo::clear_retriever() {
  if (GetArenaNoVirtual() == NULL && retriever_ != NULL) delete retriever_;
  retriever_ = NULL;
}
const ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo& UserMetaInfo::retriever() const {
  const ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* p = retriever_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.retriever)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo*>(
      &::cosmoefir::pb::_UserMetaInfo_RetrieverMetaInfo_default_instance_);
}
::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* UserMetaInfo::mutable_retriever() {
  
  if (retriever_ == NULL) {
    retriever_ = new ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.retriever)
  return retriever_;
}
::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* UserMetaInfo::release_retriever() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.retriever)
  
  ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* temp = retriever_;
  retriever_ = NULL;
  return temp;
}
void UserMetaInfo::set_allocated_retriever(::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* retriever) {
  delete retriever_;
  retriever_ = retriever;
  if (retriever) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.retriever)
}

bool UserMetaInfo::has_optional_gender() const {
  return optional_gender_case() != OPTIONAL_GENDER_NOT_SET;
}
void UserMetaInfo::clear_has_optional_gender() {
  _oneof_case_[0] = OPTIONAL_GENDER_NOT_SET;
}
UserMetaInfo::OptionalGenderCase UserMetaInfo::optional_gender_case() const {
  return UserMetaInfo::OptionalGenderCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentMetaInfo_OriginOfRecommendation::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentMetaInfo_OriginOfRecommendation::DocumentMetaInfo_OriginOfRecommendation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
}
DocumentMetaInfo_OriginOfRecommendation::DocumentMetaInfo_OriginOfRecommendation(const DocumentMetaInfo_OriginOfRecommendation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
}

void DocumentMetaInfo_OriginOfRecommendation::SharedCtor() {
  value_ = 0;
  _cached_size_ = 0;
}

DocumentMetaInfo_OriginOfRecommendation::~DocumentMetaInfo_OriginOfRecommendation() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  SharedDtor();
}

void DocumentMetaInfo_OriginOfRecommendation::SharedDtor() {
}

void DocumentMetaInfo_OriginOfRecommendation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentMetaInfo_OriginOfRecommendation::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentMetaInfo_OriginOfRecommendation& DocumentMetaInfo_OriginOfRecommendation::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentMetaInfo_OriginOfRecommendation* DocumentMetaInfo_OriginOfRecommendation::New(::google::protobuf::Arena* arena) const {
  DocumentMetaInfo_OriginOfRecommendation* n = new DocumentMetaInfo_OriginOfRecommendation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentMetaInfo_OriginOfRecommendation::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

bool DocumentMetaInfo_OriginOfRecommendation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation._ value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__ >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  return false;
#undef DO_
}

void DocumentMetaInfo_OriginOfRecommendation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation._ value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
}

::google::protobuf::uint8* DocumentMetaInfo_OriginOfRecommendation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation._ value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  return target;
}

size_t DocumentMetaInfo_OriginOfRecommendation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation._ value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentMetaInfo_OriginOfRecommendation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentMetaInfo_OriginOfRecommendation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentMetaInfo_OriginOfRecommendation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
    MergeFrom(*source);
  }
}

void DocumentMetaInfo_OriginOfRecommendation::MergeFrom(const DocumentMetaInfo_OriginOfRecommendation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void DocumentMetaInfo_OriginOfRecommendation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentMetaInfo_OriginOfRecommendation::CopyFrom(const DocumentMetaInfo_OriginOfRecommendation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentMetaInfo_OriginOfRecommendation::IsInitialized() const {
  return true;
}

void DocumentMetaInfo_OriginOfRecommendation::Swap(DocumentMetaInfo_OriginOfRecommendation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentMetaInfo_OriginOfRecommendation::InternalSwap(DocumentMetaInfo_OriginOfRecommendation* other) {
  using std::swap;
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentMetaInfo_OriginOfRecommendation::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentMetaInfo_OriginOfRecommendation

// .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation._ value = 1;
void DocumentMetaInfo_OriginOfRecommendation::clear_value() {
  value_ = 0;
}
::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::value() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation.value)
  return static_cast< ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__ >(value_);
}
void DocumentMetaInfo_OriginOfRecommendation::set_value(::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__ value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentMetaInfo_RetrieverKind::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentMetaInfo_RetrieverKind::DocumentMetaInfo_RetrieverKind()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
}
DocumentMetaInfo_RetrieverKind::DocumentMetaInfo_RetrieverKind(const DocumentMetaInfo_RetrieverKind& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
}

void DocumentMetaInfo_RetrieverKind::SharedCtor() {
  value_ = 0;
  _cached_size_ = 0;
}

DocumentMetaInfo_RetrieverKind::~DocumentMetaInfo_RetrieverKind() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  SharedDtor();
}

void DocumentMetaInfo_RetrieverKind::SharedDtor() {
}

void DocumentMetaInfo_RetrieverKind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentMetaInfo_RetrieverKind::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentMetaInfo_RetrieverKind& DocumentMetaInfo_RetrieverKind::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentMetaInfo_RetrieverKind* DocumentMetaInfo_RetrieverKind::New(::google::protobuf::Arena* arena) const {
  DocumentMetaInfo_RetrieverKind* n = new DocumentMetaInfo_RetrieverKind;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentMetaInfo_RetrieverKind::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

bool DocumentMetaInfo_RetrieverKind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cosmoefir.pb.DocumentMetaInfo.RetrieverKind._ value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__ >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  return false;
#undef DO_
}

void DocumentMetaInfo_RetrieverKind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmoefir.pb.DocumentMetaInfo.RetrieverKind._ value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
}

::google::protobuf::uint8* DocumentMetaInfo_RetrieverKind::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmoefir.pb.DocumentMetaInfo.RetrieverKind._ value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  return target;
}

size_t DocumentMetaInfo_RetrieverKind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cosmoefir.pb.DocumentMetaInfo.RetrieverKind._ value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentMetaInfo_RetrieverKind::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentMetaInfo_RetrieverKind* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentMetaInfo_RetrieverKind>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
    MergeFrom(*source);
  }
}

void DocumentMetaInfo_RetrieverKind::MergeFrom(const DocumentMetaInfo_RetrieverKind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void DocumentMetaInfo_RetrieverKind::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentMetaInfo_RetrieverKind::CopyFrom(const DocumentMetaInfo_RetrieverKind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentMetaInfo_RetrieverKind::IsInitialized() const {
  return true;
}

void DocumentMetaInfo_RetrieverKind::Swap(DocumentMetaInfo_RetrieverKind* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentMetaInfo_RetrieverKind::InternalSwap(DocumentMetaInfo_RetrieverKind* other) {
  using std::swap;
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentMetaInfo_RetrieverKind::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentMetaInfo_RetrieverKind

// .cosmoefir.pb.DocumentMetaInfo.RetrieverKind._ value = 1;
void DocumentMetaInfo_RetrieverKind::clear_value() {
  value_ = 0;
}
::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::value() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.RetrieverKind.value)
  return static_cast< ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__ >(value_);
}
void DocumentMetaInfo_RetrieverKind::set_value(::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__ value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentMetaInfo.RetrieverKind.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentMetaInfo::kOriginFieldNumber;
const int DocumentMetaInfo::kOriginIdFieldNumber;
const int DocumentMetaInfo::kRetrieverKindFieldNumber;
const int DocumentMetaInfo::kCategoryFieldNumber;
const int DocumentMetaInfo::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentMetaInfo::DocumentMetaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.DocumentMetaInfo)
}
DocumentMetaInfo::DocumentMetaInfo(const DocumentMetaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.category().size() > 0) {
    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.has_origin()) {
    origin_ = new ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_retriever_kind()) {
    retriever_kind_ = new ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind(*from.retriever_kind_);
  } else {
    retriever_kind_ = NULL;
  }
  origin_id_ = from.origin_id_;
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.DocumentMetaInfo)
}

void DocumentMetaInfo::SharedCtor() {
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_id_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(origin_id_));
  _cached_size_ = 0;
}

DocumentMetaInfo::~DocumentMetaInfo() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.DocumentMetaInfo)
  SharedDtor();
}

void DocumentMetaInfo::SharedDtor() {
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete retriever_kind_;
}

void DocumentMetaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentMetaInfo::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentMetaInfo& DocumentMetaInfo::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentMetaInfo* DocumentMetaInfo::New(::google::protobuf::Arena* arena) const {
  DocumentMetaInfo* n = new DocumentMetaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentMetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.DocumentMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
  if (GetArenaNoVirtual() == NULL && retriever_kind_ != NULL) {
    delete retriever_kind_;
  }
  retriever_kind_ = NULL;
  origin_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool DocumentMetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.DocumentMetaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 origin_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &origin_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cosmoefir.pb.DocumentMetaInfo.RetrieverKind retriever_kind = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retriever_kind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string category = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->category().data(), static_cast<int>(this->category().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.DocumentMetaInfo.category"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 tags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tags())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42u, input, this->mutable_tags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.DocumentMetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.DocumentMetaInfo)
  return false;
#undef DO_
}

void DocumentMetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.DocumentMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation origin = 1;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // int64 origin_id = 2;
  if (this->origin_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->origin_id(), output);
  }

  // .cosmoefir.pb.DocumentMetaInfo.RetrieverKind retriever_kind = 3;
  if (this->has_retriever_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->retriever_kind_, output);
  }

  // string category = 4;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.DocumentMetaInfo.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->category(), output);
  }

  // repeated uint64 tags = 5;
  if (this->tags_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tags_cached_byte_size_));
  }
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->tags(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.DocumentMetaInfo)
}

::google::protobuf::uint8* DocumentMetaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.DocumentMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation origin = 1;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // int64 origin_id = 2;
  if (this->origin_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->origin_id(), target);
  }

  // .cosmoefir.pb.DocumentMetaInfo.RetrieverKind retriever_kind = 3;
  if (this->has_retriever_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->retriever_kind_, deterministic, target);
  }

  // string category = 4;
  if (this->category().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->category().data(), static_cast<int>(this->category().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.DocumentMetaInfo.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->category(), target);
  }

  // repeated uint64 tags = 5;
  if (this->tags_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _tags_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->tags_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.DocumentMetaInfo)
  return target;
}

size_t DocumentMetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.DocumentMetaInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 tags = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->tags_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tags_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string category = 4;
  if (this->category().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  // .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation origin = 1;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->origin_);
  }

  // .cosmoefir.pb.DocumentMetaInfo.RetrieverKind retriever_kind = 3;
  if (this->has_retriever_kind()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->retriever_kind_);
  }

  // int64 origin_id = 2;
  if (this->origin_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->origin_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentMetaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.DocumentMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentMetaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentMetaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.DocumentMetaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.DocumentMetaInfo)
    MergeFrom(*source);
  }
}

void DocumentMetaInfo::MergeFrom(const DocumentMetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.DocumentMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.category().size() > 0) {

    category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
  }
  if (from.has_origin()) {
    mutable_origin()->::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation::MergeFrom(from.origin());
  }
  if (from.has_retriever_kind()) {
    mutable_retriever_kind()->::cosmoefir::pb::DocumentMetaInfo_RetrieverKind::MergeFrom(from.retriever_kind());
  }
  if (from.origin_id() != 0) {
    set_origin_id(from.origin_id());
  }
}

void DocumentMetaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.DocumentMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentMetaInfo::CopyFrom(const DocumentMetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.DocumentMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentMetaInfo::IsInitialized() const {
  return true;
}

void DocumentMetaInfo::Swap(DocumentMetaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentMetaInfo::InternalSwap(DocumentMetaInfo* other) {
  using std::swap;
  tags_.InternalSwap(&other->tags_);
  category_.Swap(&other->category_);
  swap(origin_, other->origin_);
  swap(retriever_kind_, other->retriever_kind_);
  swap(origin_id_, other->origin_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentMetaInfo::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentMetaInfo

// .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation origin = 1;
bool DocumentMetaInfo::has_origin() const {
  return this != internal_default_instance() && origin_ != NULL;
}
void DocumentMetaInfo::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) delete origin_;
  origin_ = NULL;
}
const ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation& DocumentMetaInfo::origin() const {
  const ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* p = origin_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.origin)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation*>(
      &::cosmoefir::pb::_DocumentMetaInfo_OriginOfRecommendation_default_instance_);
}
::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* DocumentMetaInfo::mutable_origin() {
  
  if (origin_ == NULL) {
    origin_ = new ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.DocumentMetaInfo.origin)
  return origin_;
}
::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* DocumentMetaInfo::release_origin() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.DocumentMetaInfo.origin)
  
  ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* temp = origin_;
  origin_ = NULL;
  return temp;
}
void DocumentMetaInfo::set_allocated_origin(::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.DocumentMetaInfo.origin)
}

// int64 origin_id = 2;
void DocumentMetaInfo::clear_origin_id() {
  origin_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DocumentMetaInfo::origin_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.origin_id)
  return origin_id_;
}
void DocumentMetaInfo::set_origin_id(::google::protobuf::int64 value) {
  
  origin_id_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentMetaInfo.origin_id)
}

// .cosmoefir.pb.DocumentMetaInfo.RetrieverKind retriever_kind = 3;
bool DocumentMetaInfo::has_retriever_kind() const {
  return this != internal_default_instance() && retriever_kind_ != NULL;
}
void DocumentMetaInfo::clear_retriever_kind() {
  if (GetArenaNoVirtual() == NULL && retriever_kind_ != NULL) delete retriever_kind_;
  retriever_kind_ = NULL;
}
const ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind& DocumentMetaInfo::retriever_kind() const {
  const ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* p = retriever_kind_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.retriever_kind)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind*>(
      &::cosmoefir::pb::_DocumentMetaInfo_RetrieverKind_default_instance_);
}
::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* DocumentMetaInfo::mutable_retriever_kind() {
  
  if (retriever_kind_ == NULL) {
    retriever_kind_ = new ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.DocumentMetaInfo.retriever_kind)
  return retriever_kind_;
}
::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* DocumentMetaInfo::release_retriever_kind() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.DocumentMetaInfo.retriever_kind)
  
  ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* temp = retriever_kind_;
  retriever_kind_ = NULL;
  return temp;
}
void DocumentMetaInfo::set_allocated_retriever_kind(::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* retriever_kind) {
  delete retriever_kind_;
  retriever_kind_ = retriever_kind;
  if (retriever_kind) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.DocumentMetaInfo.retriever_kind)
}

// string category = 4;
void DocumentMetaInfo::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DocumentMetaInfo::category() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.category)
  return category_.GetNoArena();
}
void DocumentMetaInfo::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentMetaInfo.category)
}
#if LANG_CXX11
void DocumentMetaInfo::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.DocumentMetaInfo.category)
}
#endif
void DocumentMetaInfo::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.DocumentMetaInfo.category)
}
void DocumentMetaInfo::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.DocumentMetaInfo.category)
}
::std::string* DocumentMetaInfo::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.DocumentMetaInfo.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DocumentMetaInfo::release_category() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.DocumentMetaInfo.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DocumentMetaInfo::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.DocumentMetaInfo.category)
}

// repeated uint64 tags = 5;
int DocumentMetaInfo::tags_size() const {
  return tags_.size();
}
void DocumentMetaInfo::clear_tags() {
  tags_.Clear();
}
::google::protobuf::uint64 DocumentMetaInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.tags)
  return tags_.Get(index);
}
void DocumentMetaInfo::set_tags(int index, ::google::protobuf::uint64 value) {
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentMetaInfo.tags)
}
void DocumentMetaInfo::add_tags(::google::protobuf::uint64 value) {
  tags_.Add(value);
  // @@protoc_insertion_point(field_add:cosmoefir.pb.DocumentMetaInfo.tags)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DocumentMetaInfo::tags() const {
  // @@protoc_insertion_point(field_list:cosmoefir.pb.DocumentMetaInfo.tags)
  return tags_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DocumentMetaInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:cosmoefir.pb.DocumentMetaInfo.tags)
  return &tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PixelMetaInfo::kDocumentFieldNumber;
const int PixelMetaInfo::kUserCommonFieldNumber;
const int PixelMetaInfo::kUserSimpleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PixelMetaInfo::PixelMetaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.PixelMetaInfo)
}
PixelMetaInfo::PixelMetaInfo(const PixelMetaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.document().size() > 0) {
    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  user_common_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_common().size() > 0) {
    user_common_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_common_);
  }
  user_simple_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_simple().size() > 0) {
    user_simple_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_simple_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.PixelMetaInfo)
}

void PixelMetaInfo::SharedCtor() {
  document_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_common_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_simple_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PixelMetaInfo::~PixelMetaInfo() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.PixelMetaInfo)
  SharedDtor();
}

void PixelMetaInfo::SharedDtor() {
  document_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_common_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_simple_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PixelMetaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PixelMetaInfo::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PixelMetaInfo& PixelMetaInfo::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

PixelMetaInfo* PixelMetaInfo::New(::google::protobuf::Arena* arena) const {
  PixelMetaInfo* n = new PixelMetaInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PixelMetaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.PixelMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_common_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_simple_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PixelMetaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.PixelMetaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes document = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes user_common = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes user_simple = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_simple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.PixelMetaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.PixelMetaInfo)
  return false;
#undef DO_
}

void PixelMetaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.PixelMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes document = 1;
  if (this->document().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->document(), output);
  }

  // bytes user_common = 2;
  if (this->user_common().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_common(), output);
  }

  // bytes user_simple = 3;
  if (this->user_simple().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->user_simple(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.PixelMetaInfo)
}

::google::protobuf::uint8* PixelMetaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.PixelMetaInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes document = 1;
  if (this->document().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->document(), target);
  }

  // bytes user_common = 2;
  if (this->user_common().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_common(), target);
  }

  // bytes user_simple = 3;
  if (this->user_simple().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->user_simple(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.PixelMetaInfo)
  return target;
}

size_t PixelMetaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.PixelMetaInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes document = 1;
  if (this->document().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->document());
  }

  // bytes user_common = 2;
  if (this->user_common().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_common());
  }

  // bytes user_simple = 3;
  if (this->user_simple().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_simple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PixelMetaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.PixelMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PixelMetaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PixelMetaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.PixelMetaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.PixelMetaInfo)
    MergeFrom(*source);
  }
}

void PixelMetaInfo::MergeFrom(const PixelMetaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.PixelMetaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.document().size() > 0) {

    document_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.document_);
  }
  if (from.user_common().size() > 0) {

    user_common_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_common_);
  }
  if (from.user_simple().size() > 0) {

    user_simple_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_simple_);
  }
}

void PixelMetaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.PixelMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PixelMetaInfo::CopyFrom(const PixelMetaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.PixelMetaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelMetaInfo::IsInitialized() const {
  return true;
}

void PixelMetaInfo::Swap(PixelMetaInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PixelMetaInfo::InternalSwap(PixelMetaInfo* other) {
  using std::swap;
  document_.Swap(&other->document_);
  user_common_.Swap(&other->user_common_);
  user_simple_.Swap(&other->user_simple_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PixelMetaInfo::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PixelMetaInfo

// bytes document = 1;
void PixelMetaInfo::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PixelMetaInfo::document() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.PixelMetaInfo.document)
  return document_.GetNoArena();
}
void PixelMetaInfo::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.PixelMetaInfo.document)
}
#if LANG_CXX11
void PixelMetaInfo::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.PixelMetaInfo.document)
}
#endif
void PixelMetaInfo::set_document(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.PixelMetaInfo.document)
}
void PixelMetaInfo::set_document(const void* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.PixelMetaInfo.document)
}
::std::string* PixelMetaInfo::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.PixelMetaInfo.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PixelMetaInfo::release_document() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.PixelMetaInfo.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PixelMetaInfo::set_allocated_document(::std::string* document) {
  if (document != NULL) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.PixelMetaInfo.document)
}

// bytes user_common = 2;
void PixelMetaInfo::clear_user_common() {
  user_common_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PixelMetaInfo::user_common() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.PixelMetaInfo.user_common)
  return user_common_.GetNoArena();
}
void PixelMetaInfo::set_user_common(const ::std::string& value) {
  
  user_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.PixelMetaInfo.user_common)
}
#if LANG_CXX11
void PixelMetaInfo::set_user_common(::std::string&& value) {
  
  user_common_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.PixelMetaInfo.user_common)
}
#endif
void PixelMetaInfo::set_user_common(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.PixelMetaInfo.user_common)
}
void PixelMetaInfo::set_user_common(const void* value, size_t size) {
  
  user_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.PixelMetaInfo.user_common)
}
::std::string* PixelMetaInfo::mutable_user_common() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.PixelMetaInfo.user_common)
  return user_common_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PixelMetaInfo::release_user_common() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.PixelMetaInfo.user_common)
  
  return user_common_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PixelMetaInfo::set_allocated_user_common(::std::string* user_common) {
  if (user_common != NULL) {
    
  } else {
    
  }
  user_common_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_common);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.PixelMetaInfo.user_common)
}

// bytes user_simple = 3;
void PixelMetaInfo::clear_user_simple() {
  user_simple_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PixelMetaInfo::user_simple() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.PixelMetaInfo.user_simple)
  return user_simple_.GetNoArena();
}
void PixelMetaInfo::set_user_simple(const ::std::string& value) {
  
  user_simple_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.PixelMetaInfo.user_simple)
}
#if LANG_CXX11
void PixelMetaInfo::set_user_simple(::std::string&& value) {
  
  user_simple_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.PixelMetaInfo.user_simple)
}
#endif
void PixelMetaInfo::set_user_simple(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_simple_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.PixelMetaInfo.user_simple)
}
void PixelMetaInfo::set_user_simple(const void* value, size_t size) {
  
  user_simple_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.PixelMetaInfo.user_simple)
}
::std::string* PixelMetaInfo::mutable_user_simple() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.PixelMetaInfo.user_simple)
  return user_simple_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PixelMetaInfo::release_user_simple() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.PixelMetaInfo.user_simple)
  
  return user_simple_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PixelMetaInfo::set_allocated_user_simple(::std::string* user_simple) {
  if (user_simple != NULL) {
    
  } else {
    
  }
  user_simple_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_simple);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.PixelMetaInfo.user_simple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoInfo_Player::kTypeFieldNumber;
const int VideoInfo_Player::kUrlFieldNumber;
const int VideoInfo_Player::kWidthFieldNumber;
const int VideoInfo_Player::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoInfo_Player::VideoInfo_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.VideoInfo.Player)
}
VideoInfo_Player::VideoInfo_Player(const VideoInfo_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.VideoInfo.Player)
}

void VideoInfo_Player::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _cached_size_ = 0;
}

VideoInfo_Player::~VideoInfo_Player() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.VideoInfo.Player)
  SharedDtor();
}

void VideoInfo_Player::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoInfo_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoInfo_Player::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoInfo_Player& VideoInfo_Player::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoInfo_Player* VideoInfo_Player::New(::google::protobuf::Arena* arena) const {
  VideoInfo_Player* n = new VideoInfo_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoInfo_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.VideoInfo.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool VideoInfo_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.VideoInfo.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.VideoInfo.Player.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.VideoInfo.Player.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.VideoInfo.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.VideoInfo.Player)
  return false;
#undef DO_
}

void VideoInfo_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.VideoInfo.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.Player.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.Player.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.VideoInfo.Player)
}

::google::protobuf::uint8* VideoInfo_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.VideoInfo.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.Player.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.Player.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.VideoInfo.Player)
  return target;
}

size_t VideoInfo_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.VideoInfo.Player)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoInfo_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.VideoInfo.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoInfo_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoInfo_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.VideoInfo.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.VideoInfo.Player)
    MergeFrom(*source);
  }
}

void VideoInfo_Player::MergeFrom(const VideoInfo_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.VideoInfo.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void VideoInfo_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.VideoInfo.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoInfo_Player::CopyFrom(const VideoInfo_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.VideoInfo.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoInfo_Player::IsInitialized() const {
  return true;
}

void VideoInfo_Player::Swap(VideoInfo_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoInfo_Player::InternalSwap(VideoInfo_Player* other) {
  using std::swap;
  type_.Swap(&other->type_);
  url_.Swap(&other->url_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoInfo_Player::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoInfo_Player

// string type = 1;
void VideoInfo_Player::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo_Player::type() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Player.type)
  return type_.GetNoArena();
}
void VideoInfo_Player::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Player.type)
}
#if LANG_CXX11
void VideoInfo_Player::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.Player.type)
}
#endif
void VideoInfo_Player::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.Player.type)
}
void VideoInfo_Player::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.Player.type)
}
::std::string* VideoInfo_Player::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.Player.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo_Player::release_type() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.Player.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo_Player::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.Player.type)
}

// string url = 2;
void VideoInfo_Player::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo_Player::url() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Player.url)
  return url_.GetNoArena();
}
void VideoInfo_Player::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Player.url)
}
#if LANG_CXX11
void VideoInfo_Player::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.Player.url)
}
#endif
void VideoInfo_Player::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.Player.url)
}
void VideoInfo_Player::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.Player.url)
}
::std::string* VideoInfo_Player::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.Player.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo_Player::release_url() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.Player.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo_Player::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.Player.url)
}

// uint32 width = 3;
void VideoInfo_Player::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 VideoInfo_Player::width() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Player.width)
  return width_;
}
void VideoInfo_Player::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Player.width)
}

// uint32 height = 4;
void VideoInfo_Player::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 VideoInfo_Player::height() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Player.height)
  return height_;
}
void VideoInfo_Player::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Player.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoInfo_Preview::kUrlFieldNumber;
const int VideoInfo_Preview::kLocalUrlFieldNumber;
const int VideoInfo_Preview::kWidthFieldNumber;
const int VideoInfo_Preview::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoInfo_Preview::VideoInfo_Preview()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.VideoInfo.Preview)
}
VideoInfo_Preview::VideoInfo_Preview(const VideoInfo_Preview& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  local_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.local_url().size() > 0) {
    local_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_url_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.VideoInfo.Preview)
}

void VideoInfo_Preview::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _cached_size_ = 0;
}

VideoInfo_Preview::~VideoInfo_Preview() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.VideoInfo.Preview)
  SharedDtor();
}

void VideoInfo_Preview::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VideoInfo_Preview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoInfo_Preview::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoInfo_Preview& VideoInfo_Preview::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoInfo_Preview* VideoInfo_Preview::New(::google::protobuf::Arena* arena) const {
  VideoInfo_Preview* n = new VideoInfo_Preview;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoInfo_Preview::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.VideoInfo.Preview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool VideoInfo_Preview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.VideoInfo.Preview)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.VideoInfo.Preview.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string local_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->local_url().data(), static_cast<int>(this->local_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.VideoInfo.Preview.local_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.VideoInfo.Preview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.VideoInfo.Preview)
  return false;
#undef DO_
}

void VideoInfo_Preview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.VideoInfo.Preview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.Preview.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // string local_url = 2;
  if (this->local_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_url().data(), static_cast<int>(this->local_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.Preview.local_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_url(), output);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.VideoInfo.Preview)
}

::google::protobuf::uint8* VideoInfo_Preview::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.VideoInfo.Preview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.Preview.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // string local_url = 2;
  if (this->local_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->local_url().data(), static_cast<int>(this->local_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.Preview.local_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_url(), target);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.VideoInfo.Preview)
  return target;
}

size_t VideoInfo_Preview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.VideoInfo.Preview)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // string local_url = 2;
  if (this->local_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->local_url());
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoInfo_Preview::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.VideoInfo.Preview)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoInfo_Preview* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoInfo_Preview>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.VideoInfo.Preview)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.VideoInfo.Preview)
    MergeFrom(*source);
  }
}

void VideoInfo_Preview::MergeFrom(const VideoInfo_Preview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.VideoInfo.Preview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.local_url().size() > 0) {

    local_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_url_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void VideoInfo_Preview::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.VideoInfo.Preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoInfo_Preview::CopyFrom(const VideoInfo_Preview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.VideoInfo.Preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoInfo_Preview::IsInitialized() const {
  return true;
}

void VideoInfo_Preview::Swap(VideoInfo_Preview* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoInfo_Preview::InternalSwap(VideoInfo_Preview* other) {
  using std::swap;
  url_.Swap(&other->url_);
  local_url_.Swap(&other->local_url_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoInfo_Preview::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoInfo_Preview

// string url = 1;
void VideoInfo_Preview::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo_Preview::url() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Preview.url)
  return url_.GetNoArena();
}
void VideoInfo_Preview::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Preview.url)
}
#if LANG_CXX11
void VideoInfo_Preview::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.Preview.url)
}
#endif
void VideoInfo_Preview::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.Preview.url)
}
void VideoInfo_Preview::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.Preview.url)
}
::std::string* VideoInfo_Preview::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.Preview.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo_Preview::release_url() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.Preview.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo_Preview::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.Preview.url)
}

// string local_url = 2;
void VideoInfo_Preview::clear_local_url() {
  local_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo_Preview::local_url() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Preview.local_url)
  return local_url_.GetNoArena();
}
void VideoInfo_Preview::set_local_url(const ::std::string& value) {
  
  local_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Preview.local_url)
}
#if LANG_CXX11
void VideoInfo_Preview::set_local_url(::std::string&& value) {
  
  local_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.Preview.local_url)
}
#endif
void VideoInfo_Preview::set_local_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.Preview.local_url)
}
void VideoInfo_Preview::set_local_url(const char* value, size_t size) {
  
  local_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.Preview.local_url)
}
::std::string* VideoInfo_Preview::mutable_local_url() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.Preview.local_url)
  return local_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo_Preview::release_local_url() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.Preview.local_url)
  
  return local_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo_Preview::set_allocated_local_url(::std::string* local_url) {
  if (local_url != NULL) {
    
  } else {
    
  }
  local_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_url);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.Preview.local_url)
}

// uint32 width = 3;
void VideoInfo_Preview::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 VideoInfo_Preview::width() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Preview.width)
  return width_;
}
void VideoInfo_Preview::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Preview.width)
}

// uint32 height = 4;
void VideoInfo_Preview::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 VideoInfo_Preview::height() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Preview.height)
  return height_;
}
void VideoInfo_Preview::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Preview.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoInfo::kUrlFieldNumber;
const int VideoInfo::kIdFieldNumber;
const int VideoInfo::kNameFieldNumber;
const int VideoInfo::kDescriptionFieldNumber;
const int VideoInfo::kDurationFieldNumber;
const int VideoInfo::kHdFieldNumber;
const int VideoInfo::kFullHdFieldNumber;
const int VideoInfo::kSigFieldNumber;
const int VideoInfo::kSourceIdFieldNumber;
const int VideoInfo::kSourceNameFieldNumber;
const int VideoInfo::kTimeFieldNumber;
const int VideoInfo::kPlayerFieldNumber;
const int VideoInfo::kPreviewFieldNumber;
const int VideoInfo::kPosterPreviewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoInfo::VideoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.VideoInfo)
}
VideoInfo::VideoInfo(const VideoInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sig().size() > 0) {
    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_name().size() > 0) {
    source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  if (from.has_player()) {
    player_ = new ::cosmoefir::pb::VideoInfo_Player(*from.player_);
  } else {
    player_ = NULL;
  }
  if (from.has_preview()) {
    preview_ = new ::cosmoefir::pb::VideoInfo_Preview(*from.preview_);
  } else {
    preview_ = NULL;
  }
  if (from.has_poster_preview()) {
    poster_preview_ = new ::cosmoefir::pb::VideoInfo_Preview(*from.poster_preview_);
  } else {
    poster_preview_ = NULL;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_id_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(source_id_));
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.VideoInfo)
}

void VideoInfo::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_id_) -
      reinterpret_cast<char*>(&player_)) + sizeof(source_id_));
  _cached_size_ = 0;
}

VideoInfo::~VideoInfo() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.VideoInfo)
  SharedDtor();
}

void VideoInfo::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete preview_;
  if (this != internal_default_instance()) delete poster_preview_;
}

void VideoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoInfo::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VideoInfo& VideoInfo::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoInfo* VideoInfo::New(::google::protobuf::Arena* arena) const {
  VideoInfo* n = new VideoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.VideoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && player_ != NULL) {
    delete player_;
  }
  player_ = NULL;
  if (GetArenaNoVirtual() == NULL && preview_ != NULL) {
    delete preview_;
  }
  preview_ = NULL;
  if (GetArenaNoVirtual() == NULL && poster_preview_ != NULL) {
    delete poster_preview_;
  }
  poster_preview_ = NULL;
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_id_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(source_id_));
  _internal_metadata_.Clear();
}

bool VideoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.VideoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.VideoInfo.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.VideoInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.VideoInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.VideoInfo.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool full_hd = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_hd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sig = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sig().data(), static_cast<int>(this->sig().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.VideoInfo.sig"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_name().data(), static_cast<int>(this->source_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cosmoefir.pb.VideoInfo.source_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cosmoefir.pb.VideoInfo.Player player = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cosmoefir.pb.VideoInfo.Preview preview = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cosmoefir.pb.VideoInfo.Preview poster_preview = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poster_preview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.VideoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.VideoInfo)
  return false;
#undef DO_
}

void VideoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.VideoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // uint32 duration = 5;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->duration(), output);
  }

  // bool hd = 6;
  if (this->hd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hd(), output);
  }

  // bool full_hd = 7;
  if (this->full_hd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->full_hd(), output);
  }

  // string sig = 8;
  if (this->sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sig().data(), static_cast<int>(this->sig().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.sig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sig(), output);
  }

  // uint32 source_id = 9;
  if (this->source_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->source_id(), output);
  }

  // string source_name = 10;
  if (this->source_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_name().data(), static_cast<int>(this->source_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->source_name(), output);
  }

  // uint64 time = 11;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->time(), output);
  }

  // .cosmoefir.pb.VideoInfo.Player player = 12;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->player_, output);
  }

  // .cosmoefir.pb.VideoInfo.Preview preview = 13;
  if (this->has_preview()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->preview_, output);
  }

  // .cosmoefir.pb.VideoInfo.Preview poster_preview = 14;
  if (this->has_poster_preview()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->poster_preview_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.VideoInfo)
}

::google::protobuf::uint8* VideoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.VideoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // uint32 duration = 5;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->duration(), target);
  }

  // bool hd = 6;
  if (this->hd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hd(), target);
  }

  // bool full_hd = 7;
  if (this->full_hd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->full_hd(), target);
  }

  // string sig = 8;
  if (this->sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sig().data(), static_cast<int>(this->sig().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.sig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sig(), target);
  }

  // uint32 source_id = 9;
  if (this->source_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->source_id(), target);
  }

  // string source_name = 10;
  if (this->source_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_name().data(), static_cast<int>(this->source_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cosmoefir.pb.VideoInfo.source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->source_name(), target);
  }

  // uint64 time = 11;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->time(), target);
  }

  // .cosmoefir.pb.VideoInfo.Player player = 12;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->player_, deterministic, target);
  }

  // .cosmoefir.pb.VideoInfo.Preview preview = 13;
  if (this->has_preview()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->preview_, deterministic, target);
  }

  // .cosmoefir.pb.VideoInfo.Preview poster_preview = 14;
  if (this->has_poster_preview()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->poster_preview_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.VideoInfo)
  return target;
}

size_t VideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.VideoInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string sig = 8;
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sig());
  }

  // string source_name = 10;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_name());
  }

  // .cosmoefir.pb.VideoInfo.Player player = 12;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // .cosmoefir.pb.VideoInfo.Preview preview = 13;
  if (this->has_preview()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preview_);
  }

  // .cosmoefir.pb.VideoInfo.Preview poster_preview = 14;
  if (this->has_poster_preview()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->poster_preview_);
  }

  // uint32 duration = 5;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  // bool hd = 6;
  if (this->hd() != 0) {
    total_size += 1 + 1;
  }

  // bool full_hd = 7;
  if (this->full_hd() != 0) {
    total_size += 1 + 1;
  }

  // uint64 time = 11;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint32 source_id = 9;
  if (this->source_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.VideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.VideoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.VideoInfo)
    MergeFrom(*source);
  }
}

void VideoInfo::MergeFrom(const VideoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.VideoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.sig().size() > 0) {

    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
  if (from.source_name().size() > 0) {

    source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  if (from.has_player()) {
    mutable_player()->::cosmoefir::pb::VideoInfo_Player::MergeFrom(from.player());
  }
  if (from.has_preview()) {
    mutable_preview()->::cosmoefir::pb::VideoInfo_Preview::MergeFrom(from.preview());
  }
  if (from.has_poster_preview()) {
    mutable_poster_preview()->::cosmoefir::pb::VideoInfo_Preview::MergeFrom(from.poster_preview());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.hd() != 0) {
    set_hd(from.hd());
  }
  if (from.full_hd() != 0) {
    set_full_hd(from.full_hd());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.source_id() != 0) {
    set_source_id(from.source_id());
  }
}

void VideoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoInfo::CopyFrom(const VideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoInfo::IsInitialized() const {
  return true;
}

void VideoInfo::Swap(VideoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoInfo::InternalSwap(VideoInfo* other) {
  using std::swap;
  url_.Swap(&other->url_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  sig_.Swap(&other->sig_);
  source_name_.Swap(&other->source_name_);
  swap(player_, other->player_);
  swap(preview_, other->preview_);
  swap(poster_preview_, other->poster_preview_);
  swap(duration_, other->duration_);
  swap(hd_, other->hd_);
  swap(full_hd_, other->full_hd_);
  swap(time_, other->time_);
  swap(source_id_, other->source_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoInfo::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoInfo

// string url = 1;
void VideoInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::url() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.url)
  return url_.GetNoArena();
}
void VideoInfo::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.url)
}
#if LANG_CXX11
void VideoInfo::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.url)
}
#endif
void VideoInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.url)
}
void VideoInfo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.url)
}
::std::string* VideoInfo::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_url() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.url)
}

// string id = 2;
void VideoInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.id)
  return id_.GetNoArena();
}
void VideoInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.id)
}
#if LANG_CXX11
void VideoInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.id)
}
#endif
void VideoInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.id)
}
void VideoInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.id)
}
::std::string* VideoInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_id() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.id)
}

// string name = 3;
void VideoInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::name() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.name)
  return name_.GetNoArena();
}
void VideoInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.name)
}
#if LANG_CXX11
void VideoInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.name)
}
#endif
void VideoInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.name)
}
void VideoInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.name)
}
::std::string* VideoInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_name() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.name)
}

// string description = 4;
void VideoInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::description() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.description)
  return description_.GetNoArena();
}
void VideoInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.description)
}
#if LANG_CXX11
void VideoInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.description)
}
#endif
void VideoInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.description)
}
void VideoInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.description)
}
::std::string* VideoInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_description() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.description)
}

// uint32 duration = 5;
void VideoInfo::clear_duration() {
  duration_ = 0u;
}
::google::protobuf::uint32 VideoInfo::duration() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.duration)
  return duration_;
}
void VideoInfo::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.duration)
}

// bool hd = 6;
void VideoInfo::clear_hd() {
  hd_ = false;
}
bool VideoInfo::hd() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.hd)
  return hd_;
}
void VideoInfo::set_hd(bool value) {
  
  hd_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.hd)
}

// bool full_hd = 7;
void VideoInfo::clear_full_hd() {
  full_hd_ = false;
}
bool VideoInfo::full_hd() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.full_hd)
  return full_hd_;
}
void VideoInfo::set_full_hd(bool value) {
  
  full_hd_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.full_hd)
}

// string sig = 8;
void VideoInfo::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::sig() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.sig)
  return sig_.GetNoArena();
}
void VideoInfo::set_sig(const ::std::string& value) {
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.sig)
}
#if LANG_CXX11
void VideoInfo::set_sig(::std::string&& value) {
  
  sig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.sig)
}
#endif
void VideoInfo::set_sig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.sig)
}
void VideoInfo::set_sig(const char* value, size_t size) {
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.sig)
}
::std::string* VideoInfo::mutable_sig() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_sig() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.sig)
  
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    
  } else {
    
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.sig)
}

// uint32 source_id = 9;
void VideoInfo::clear_source_id() {
  source_id_ = 0u;
}
::google::protobuf::uint32 VideoInfo::source_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.source_id)
  return source_id_;
}
void VideoInfo::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.source_id)
}

// string source_name = 10;
void VideoInfo::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoInfo::source_name() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.source_name)
  return source_name_.GetNoArena();
}
void VideoInfo::set_source_name(const ::std::string& value) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.source_name)
}
#if LANG_CXX11
void VideoInfo::set_source_name(::std::string&& value) {
  
  source_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.source_name)
}
#endif
void VideoInfo::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.source_name)
}
void VideoInfo::set_source_name(const char* value, size_t size) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.source_name)
}
::std::string* VideoInfo::mutable_source_name() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.source_name)
  return source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoInfo::release_source_name() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.source_name)
  
  return source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoInfo::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.source_name)
}

// uint64 time = 11;
void VideoInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VideoInfo::time() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.time)
  return time_;
}
void VideoInfo::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.time)
}

// .cosmoefir.pb.VideoInfo.Player player = 12;
bool VideoInfo::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
void VideoInfo::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::cosmoefir::pb::VideoInfo_Player& VideoInfo::player() const {
  const ::cosmoefir::pb::VideoInfo_Player* p = player_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.player)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::VideoInfo_Player*>(
      &::cosmoefir::pb::_VideoInfo_Player_default_instance_);
}
::cosmoefir::pb::VideoInfo_Player* VideoInfo::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::cosmoefir::pb::VideoInfo_Player;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.player)
  return player_;
}
::cosmoefir::pb::VideoInfo_Player* VideoInfo::release_player() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.player)
  
  ::cosmoefir::pb::VideoInfo_Player* temp = player_;
  player_ = NULL;
  return temp;
}
void VideoInfo::set_allocated_player(::cosmoefir::pb::VideoInfo_Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.player)
}

// .cosmoefir.pb.VideoInfo.Preview preview = 13;
bool VideoInfo::has_preview() const {
  return this != internal_default_instance() && preview_ != NULL;
}
void VideoInfo::clear_preview() {
  if (GetArenaNoVirtual() == NULL && preview_ != NULL) delete preview_;
  preview_ = NULL;
}
const ::cosmoefir::pb::VideoInfo_Preview& VideoInfo::preview() const {
  const ::cosmoefir::pb::VideoInfo_Preview* p = preview_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.preview)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::VideoInfo_Preview*>(
      &::cosmoefir::pb::_VideoInfo_Preview_default_instance_);
}
::cosmoefir::pb::VideoInfo_Preview* VideoInfo::mutable_preview() {
  
  if (preview_ == NULL) {
    preview_ = new ::cosmoefir::pb::VideoInfo_Preview;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.preview)
  return preview_;
}
::cosmoefir::pb::VideoInfo_Preview* VideoInfo::release_preview() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.preview)
  
  ::cosmoefir::pb::VideoInfo_Preview* temp = preview_;
  preview_ = NULL;
  return temp;
}
void VideoInfo::set_allocated_preview(::cosmoefir::pb::VideoInfo_Preview* preview) {
  delete preview_;
  preview_ = preview;
  if (preview) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.preview)
}

// .cosmoefir.pb.VideoInfo.Preview poster_preview = 14;
bool VideoInfo::has_poster_preview() const {
  return this != internal_default_instance() && poster_preview_ != NULL;
}
void VideoInfo::clear_poster_preview() {
  if (GetArenaNoVirtual() == NULL && poster_preview_ != NULL) delete poster_preview_;
  poster_preview_ = NULL;
}
const ::cosmoefir::pb::VideoInfo_Preview& VideoInfo::poster_preview() const {
  const ::cosmoefir::pb::VideoInfo_Preview* p = poster_preview_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.poster_preview)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::VideoInfo_Preview*>(
      &::cosmoefir::pb::_VideoInfo_Preview_default_instance_);
}
::cosmoefir::pb::VideoInfo_Preview* VideoInfo::mutable_poster_preview() {
  
  if (poster_preview_ == NULL) {
    poster_preview_ = new ::cosmoefir::pb::VideoInfo_Preview;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.poster_preview)
  return poster_preview_;
}
::cosmoefir::pb::VideoInfo_Preview* VideoInfo::release_poster_preview() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.poster_preview)
  
  ::cosmoefir::pb::VideoInfo_Preview* temp = poster_preview_;
  poster_preview_ = NULL;
  return temp;
}
void VideoInfo::set_allocated_poster_preview(::cosmoefir::pb::VideoInfo_Preview* poster_preview) {
  delete poster_preview_;
  poster_preview_ = poster_preview;
  if (poster_preview) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.poster_preview)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kDocIdFieldNumber;
const int Document::kRankFieldNumber;
const int Document::kNameFieldNumber;
const int Document::kCategoryFieldNumber;
const int Document::kAgeRestrictFieldNumber;
const int Document::kIsPublishedFieldNumber;
const int Document::kVideoInfoFieldNumber;
const int Document::kImagePosterFieldNumber;
const int Document::kPreviewUrlFieldNumber;
const int Document::kIsSeriesFieldNumber;
const int Document::kExternalIntIdFieldNumber;
const int Document::kExternalStringIdFieldNumber;
const int Document::kCompactMetaInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.Document)
}
Document::Document(const Document& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  compact_meta_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.compact_meta_info().size() > 0) {
    compact_meta_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compact_meta_info_);
  }
  if (from.has_name()) {
    name_ = new ::google::protobuf::StringValue(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_category()) {
    category_ = new ::google::protobuf::StringValue(*from.category_);
  } else {
    category_ = NULL;
  }
  if (from.has_age_restrict()) {
    age_restrict_ = new ::google::protobuf::UInt32Value(*from.age_restrict_);
  } else {
    age_restrict_ = NULL;
  }
  if (from.has_is_published()) {
    is_published_ = new ::google::protobuf::BoolValue(*from.is_published_);
  } else {
    is_published_ = NULL;
  }
  if (from.has_video_info()) {
    video_info_ = new ::cosmoefir::pb::VideoInfo(*from.video_info_);
  } else {
    video_info_ = NULL;
  }
  if (from.has_image_poster()) {
    image_poster_ = new ::google::protobuf::StringValue(*from.image_poster_);
  } else {
    image_poster_ = NULL;
  }
  if (from.has_preview_url()) {
    preview_url_ = new ::google::protobuf::StringValue(*from.preview_url_);
  } else {
    preview_url_ = NULL;
  }
  if (from.has_is_series()) {
    is_series_ = new ::google::protobuf::BoolValue(*from.is_series_);
  } else {
    is_series_ = NULL;
  }
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(rank_));
  clear_has_variant_external_id();
  switch (from.variant_external_id_case()) {
    case kExternalIntId: {
      mutable_external_int_id()->::google::protobuf::Int64Value::MergeFrom(from.external_int_id());
      break;
    }
    case kExternalStringId: {
      mutable_external_string_id()->::google::protobuf::StringValue::MergeFrom(from.external_string_id());
      break;
    }
    case VARIANT_EXTERNAL_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.Document)
}

void Document::SharedCtor() {
  compact_meta_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&name_)) + sizeof(rank_));
  clear_has_variant_external_id();
  _cached_size_ = 0;
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.Document)
  SharedDtor();
}

void Document::SharedDtor() {
  compact_meta_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete category_;
  if (this != internal_default_instance()) delete age_restrict_;
  if (this != internal_default_instance()) delete is_published_;
  if (this != internal_default_instance()) delete video_info_;
  if (this != internal_default_instance()) delete image_poster_;
  if (this != internal_default_instance()) delete preview_url_;
  if (this != internal_default_instance()) delete is_series_;
  if (has_variant_external_id()) {
    clear_variant_external_id();
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Document& Document::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::clear_variant_external_id() {
// @@protoc_insertion_point(one_of_clear_start:cosmoefir.pb.Document)
  switch (variant_external_id_case()) {
    case kExternalIntId: {
      delete variant_external_id_.external_int_id_;
      break;
    }
    case kExternalStringId: {
      delete variant_external_id_.external_string_id_;
      break;
    }
    case VARIANT_EXTERNAL_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VARIANT_EXTERNAL_ID_NOT_SET;
}


void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compact_meta_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && category_ != NULL) {
    delete category_;
  }
  category_ = NULL;
  if (GetArenaNoVirtual() == NULL && age_restrict_ != NULL) {
    delete age_restrict_;
  }
  age_restrict_ = NULL;
  if (GetArenaNoVirtual() == NULL && is_published_ != NULL) {
    delete is_published_;
  }
  is_published_ = NULL;
  if (GetArenaNoVirtual() == NULL && video_info_ != NULL) {
    delete video_info_;
  }
  video_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_poster_ != NULL) {
    delete image_poster_;
  }
  image_poster_ = NULL;
  if (GetArenaNoVirtual() == NULL && preview_url_ != NULL) {
    delete preview_url_;
  }
  preview_url_ = NULL;
  if (GetArenaNoVirtual() == NULL && is_series_ != NULL) {
    delete is_series_;
  }
  is_series_ = NULL;
  ::memset(&doc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&doc_id_)) + sizeof(rank_));
  clear_variant_external_id();
  _internal_metadata_.Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 doc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &doc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rank = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue category = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.UInt32Value age_restrict = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_age_restrict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue is_published = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_published()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cosmoefir.pb.VideoInfo video_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue image_poster = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_poster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue preview_url = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preview_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue is_series = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_series()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value external_int_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external_int_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue external_string_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external_string_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes compact_meta_info = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_compact_meta_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 doc_id = 1;
  if (this->doc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->doc_id(), output);
  }

  // float rank = 2;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rank(), output);
  }

  // .google.protobuf.StringValue name = 3;
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->name_, output);
  }

  // .google.protobuf.StringValue category = 4;
  if (this->has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->category_, output);
  }

  // .google.protobuf.UInt32Value age_restrict = 5;
  if (this->has_age_restrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->age_restrict_, output);
  }

  // .google.protobuf.BoolValue is_published = 6;
  if (this->has_is_published()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->is_published_, output);
  }

  // .cosmoefir.pb.VideoInfo video_info = 8;
  if (this->has_video_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->video_info_, output);
  }

  // .google.protobuf.StringValue image_poster = 9;
  if (this->has_image_poster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->image_poster_, output);
  }

  // .google.protobuf.StringValue preview_url = 10;
  if (this->has_preview_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->preview_url_, output);
  }

  // .google.protobuf.BoolValue is_series = 11;
  if (this->has_is_series()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->is_series_, output);
  }

  // .google.protobuf.Int64Value external_int_id = 12;
  if (has_external_int_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *variant_external_id_.external_int_id_, output);
  }

  // .google.protobuf.StringValue external_string_id = 13;
  if (has_external_string_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *variant_external_id_.external_string_id_, output);
  }

  // bytes compact_meta_info = 51;
  if (this->compact_meta_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      51, this->compact_meta_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.Document)
}

::google::protobuf::uint8* Document::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.Document)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 doc_id = 1;
  if (this->doc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->doc_id(), target);
  }

  // float rank = 2;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rank(), target);
  }

  // .google.protobuf.StringValue name = 3;
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->name_, deterministic, target);
  }

  // .google.protobuf.StringValue category = 4;
  if (this->has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->category_, deterministic, target);
  }

  // .google.protobuf.UInt32Value age_restrict = 5;
  if (this->has_age_restrict()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->age_restrict_, deterministic, target);
  }

  // .google.protobuf.BoolValue is_published = 6;
  if (this->has_is_published()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->is_published_, deterministic, target);
  }

  // .cosmoefir.pb.VideoInfo video_info = 8;
  if (this->has_video_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->video_info_, deterministic, target);
  }

  // .google.protobuf.StringValue image_poster = 9;
  if (this->has_image_poster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->image_poster_, deterministic, target);
  }

  // .google.protobuf.StringValue preview_url = 10;
  if (this->has_preview_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->preview_url_, deterministic, target);
  }

  // .google.protobuf.BoolValue is_series = 11;
  if (this->has_is_series()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->is_series_, deterministic, target);
  }

  // .google.protobuf.Int64Value external_int_id = 12;
  if (has_external_int_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *variant_external_id_.external_int_id_, deterministic, target);
  }

  // .google.protobuf.StringValue external_string_id = 13;
  if (has_external_string_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *variant_external_id_.external_string_id_, deterministic, target);
  }

  // bytes compact_meta_info = 51;
  if (this->compact_meta_info().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        51, this->compact_meta_info(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.Document)
  return target;
}

size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.Document)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes compact_meta_info = 51;
  if (this->compact_meta_info().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->compact_meta_info());
  }

  // .google.protobuf.StringValue name = 3;
  if (this->has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->name_);
  }

  // .google.protobuf.StringValue category = 4;
  if (this->has_category()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->category_);
  }

  // .google.protobuf.UInt32Value age_restrict = 5;
  if (this->has_age_restrict()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->age_restrict_);
  }

  // .google.protobuf.BoolValue is_published = 6;
  if (this->has_is_published()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->is_published_);
  }

  // .cosmoefir.pb.VideoInfo video_info = 8;
  if (this->has_video_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_info_);
  }

  // .google.protobuf.StringValue image_poster = 9;
  if (this->has_image_poster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_poster_);
  }

  // .google.protobuf.StringValue preview_url = 10;
  if (this->has_preview_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->preview_url_);
  }

  // .google.protobuf.BoolValue is_series = 11;
  if (this->has_is_series()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->is_series_);
  }

  // int64 doc_id = 1;
  if (this->doc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->doc_id());
  }

  // float rank = 2;
  if (this->rank() != 0) {
    total_size += 1 + 4;
  }

  switch (variant_external_id_case()) {
    // .google.protobuf.Int64Value external_int_id = 12;
    case kExternalIntId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *variant_external_id_.external_int_id_);
      break;
    }
    // .google.protobuf.StringValue external_string_id = 13;
    case kExternalStringId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *variant_external_id_.external_string_id_);
      break;
    }
    case VARIANT_EXTERNAL_ID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  const Document* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Document>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.Document)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.Document)
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.Document)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.compact_meta_info().size() > 0) {

    compact_meta_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compact_meta_info_);
  }
  if (from.has_name()) {
    mutable_name()->::google::protobuf::StringValue::MergeFrom(from.name());
  }
  if (from.has_category()) {
    mutable_category()->::google::protobuf::StringValue::MergeFrom(from.category());
  }
  if (from.has_age_restrict()) {
    mutable_age_restrict()->::google::protobuf::UInt32Value::MergeFrom(from.age_restrict());
  }
  if (from.has_is_published()) {
    mutable_is_published()->::google::protobuf::BoolValue::MergeFrom(from.is_published());
  }
  if (from.has_video_info()) {
    mutable_video_info()->::cosmoefir::pb::VideoInfo::MergeFrom(from.video_info());
  }
  if (from.has_image_poster()) {
    mutable_image_poster()->::google::protobuf::StringValue::MergeFrom(from.image_poster());
  }
  if (from.has_preview_url()) {
    mutable_preview_url()->::google::protobuf::StringValue::MergeFrom(from.preview_url());
  }
  if (from.has_is_series()) {
    mutable_is_series()->::google::protobuf::BoolValue::MergeFrom(from.is_series());
  }
  if (from.doc_id() != 0) {
    set_doc_id(from.doc_id());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
  switch (from.variant_external_id_case()) {
    case kExternalIntId: {
      mutable_external_int_id()->::google::protobuf::Int64Value::MergeFrom(from.external_int_id());
      break;
    }
    case kExternalStringId: {
      mutable_external_string_id()->::google::protobuf::StringValue::MergeFrom(from.external_string_id());
      break;
    }
    case VARIANT_EXTERNAL_ID_NOT_SET: {
      break;
    }
  }
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  using std::swap;
  compact_meta_info_.Swap(&other->compact_meta_info_);
  swap(name_, other->name_);
  swap(category_, other->category_);
  swap(age_restrict_, other->age_restrict_);
  swap(is_published_, other->is_published_);
  swap(video_info_, other->video_info_);
  swap(image_poster_, other->image_poster_);
  swap(preview_url_, other->preview_url_);
  swap(is_series_, other->is_series_);
  swap(doc_id_, other->doc_id_);
  swap(rank_, other->rank_);
  swap(variant_external_id_, other->variant_external_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document

// int64 doc_id = 1;
void Document::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Document::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.doc_id)
  return doc_id_;
}
void Document::set_doc_id(::google::protobuf::int64 value) {
  
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.Document.doc_id)
}

// float rank = 2;
void Document::clear_rank() {
  rank_ = 0;
}
float Document::rank() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.rank)
  return rank_;
}
void Document::set_rank(float value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.Document.rank)
}

// .google.protobuf.StringValue name = 3;
bool Document::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
void Document::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) delete name_;
  name_ = NULL;
}
const ::google::protobuf::StringValue& Document::name() const {
  const ::google::protobuf::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
::google::protobuf::StringValue* Document::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.name)
  return name_;
}
::google::protobuf::StringValue* Document::release_name() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.name)
  
  ::google::protobuf::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
void Document::set_allocated_name(::google::protobuf::StringValue* name) {
  delete name_;
  if (name != NULL && name->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_name = new ::google::protobuf::StringValue;
    new_name->CopyFrom(*name);
    name = new_name;
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.name)
}

// .google.protobuf.StringValue category = 4;
bool Document::has_category() const {
  return this != internal_default_instance() && category_ != NULL;
}
void Document::clear_category() {
  if (GetArenaNoVirtual() == NULL && category_ != NULL) delete category_;
  category_ = NULL;
}
const ::google::protobuf::StringValue& Document::category() const {
  const ::google::protobuf::StringValue* p = category_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.category)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
::google::protobuf::StringValue* Document::mutable_category() {
  
  if (category_ == NULL) {
    category_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.category)
  return category_;
}
::google::protobuf::StringValue* Document::release_category() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.category)
  
  ::google::protobuf::StringValue* temp = category_;
  category_ = NULL;
  return temp;
}
void Document::set_allocated_category(::google::protobuf::StringValue* category) {
  delete category_;
  if (category != NULL && category->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_category = new ::google::protobuf::StringValue;
    new_category->CopyFrom(*category);
    category = new_category;
  }
  category_ = category;
  if (category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.category)
}

// .google.protobuf.UInt32Value age_restrict = 5;
bool Document::has_age_restrict() const {
  return this != internal_default_instance() && age_restrict_ != NULL;
}
void Document::clear_age_restrict() {
  if (GetArenaNoVirtual() == NULL && age_restrict_ != NULL) delete age_restrict_;
  age_restrict_ = NULL;
}
const ::google::protobuf::UInt32Value& Document::age_restrict() const {
  const ::google::protobuf::UInt32Value* p = age_restrict_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.age_restrict)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
::google::protobuf::UInt32Value* Document::mutable_age_restrict() {
  
  if (age_restrict_ == NULL) {
    age_restrict_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.age_restrict)
  return age_restrict_;
}
::google::protobuf::UInt32Value* Document::release_age_restrict() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.age_restrict)
  
  ::google::protobuf::UInt32Value* temp = age_restrict_;
  age_restrict_ = NULL;
  return temp;
}
void Document::set_allocated_age_restrict(::google::protobuf::UInt32Value* age_restrict) {
  delete age_restrict_;
  if (age_restrict != NULL && age_restrict->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_age_restrict = new ::google::protobuf::UInt32Value;
    new_age_restrict->CopyFrom(*age_restrict);
    age_restrict = new_age_restrict;
  }
  age_restrict_ = age_restrict;
  if (age_restrict) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.age_restrict)
}

// .google.protobuf.BoolValue is_published = 6;
bool Document::has_is_published() const {
  return this != internal_default_instance() && is_published_ != NULL;
}
void Document::clear_is_published() {
  if (GetArenaNoVirtual() == NULL && is_published_ != NULL) delete is_published_;
  is_published_ = NULL;
}
const ::google::protobuf::BoolValue& Document::is_published() const {
  const ::google::protobuf::BoolValue* p = is_published_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.is_published)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* Document::mutable_is_published() {
  
  if (is_published_ == NULL) {
    is_published_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.is_published)
  return is_published_;
}
::google::protobuf::BoolValue* Document::release_is_published() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.is_published)
  
  ::google::protobuf::BoolValue* temp = is_published_;
  is_published_ = NULL;
  return temp;
}
void Document::set_allocated_is_published(::google::protobuf::BoolValue* is_published) {
  delete is_published_;
  if (is_published != NULL && is_published->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_is_published = new ::google::protobuf::BoolValue;
    new_is_published->CopyFrom(*is_published);
    is_published = new_is_published;
  }
  is_published_ = is_published;
  if (is_published) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.is_published)
}

// .cosmoefir.pb.VideoInfo video_info = 8;
bool Document::has_video_info() const {
  return this != internal_default_instance() && video_info_ != NULL;
}
void Document::clear_video_info() {
  if (GetArenaNoVirtual() == NULL && video_info_ != NULL) delete video_info_;
  video_info_ = NULL;
}
const ::cosmoefir::pb::VideoInfo& Document::video_info() const {
  const ::cosmoefir::pb::VideoInfo* p = video_info_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.video_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::VideoInfo*>(
      &::cosmoefir::pb::_VideoInfo_default_instance_);
}
::cosmoefir::pb::VideoInfo* Document::mutable_video_info() {
  
  if (video_info_ == NULL) {
    video_info_ = new ::cosmoefir::pb::VideoInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.video_info)
  return video_info_;
}
::cosmoefir::pb::VideoInfo* Document::release_video_info() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.video_info)
  
  ::cosmoefir::pb::VideoInfo* temp = video_info_;
  video_info_ = NULL;
  return temp;
}
void Document::set_allocated_video_info(::cosmoefir::pb::VideoInfo* video_info) {
  delete video_info_;
  video_info_ = video_info;
  if (video_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.video_info)
}

// .google.protobuf.StringValue image_poster = 9;
bool Document::has_image_poster() const {
  return this != internal_default_instance() && image_poster_ != NULL;
}
void Document::clear_image_poster() {
  if (GetArenaNoVirtual() == NULL && image_poster_ != NULL) delete image_poster_;
  image_poster_ = NULL;
}
const ::google::protobuf::StringValue& Document::image_poster() const {
  const ::google::protobuf::StringValue* p = image_poster_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.image_poster)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
::google::protobuf::StringValue* Document::mutable_image_poster() {
  
  if (image_poster_ == NULL) {
    image_poster_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.image_poster)
  return image_poster_;
}
::google::protobuf::StringValue* Document::release_image_poster() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.image_poster)
  
  ::google::protobuf::StringValue* temp = image_poster_;
  image_poster_ = NULL;
  return temp;
}
void Document::set_allocated_image_poster(::google::protobuf::StringValue* image_poster) {
  delete image_poster_;
  if (image_poster != NULL && image_poster->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_image_poster = new ::google::protobuf::StringValue;
    new_image_poster->CopyFrom(*image_poster);
    image_poster = new_image_poster;
  }
  image_poster_ = image_poster;
  if (image_poster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.image_poster)
}

// .google.protobuf.StringValue preview_url = 10;
bool Document::has_preview_url() const {
  return this != internal_default_instance() && preview_url_ != NULL;
}
void Document::clear_preview_url() {
  if (GetArenaNoVirtual() == NULL && preview_url_ != NULL) delete preview_url_;
  preview_url_ = NULL;
}
const ::google::protobuf::StringValue& Document::preview_url() const {
  const ::google::protobuf::StringValue* p = preview_url_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.preview_url)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
::google::protobuf::StringValue* Document::mutable_preview_url() {
  
  if (preview_url_ == NULL) {
    preview_url_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.preview_url)
  return preview_url_;
}
::google::protobuf::StringValue* Document::release_preview_url() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.preview_url)
  
  ::google::protobuf::StringValue* temp = preview_url_;
  preview_url_ = NULL;
  return temp;
}
void Document::set_allocated_preview_url(::google::protobuf::StringValue* preview_url) {
  delete preview_url_;
  if (preview_url != NULL && preview_url->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_preview_url = new ::google::protobuf::StringValue;
    new_preview_url->CopyFrom(*preview_url);
    preview_url = new_preview_url;
  }
  preview_url_ = preview_url;
  if (preview_url) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.preview_url)
}

// .google.protobuf.BoolValue is_series = 11;
bool Document::has_is_series() const {
  return this != internal_default_instance() && is_series_ != NULL;
}
void Document::clear_is_series() {
  if (GetArenaNoVirtual() == NULL && is_series_ != NULL) delete is_series_;
  is_series_ = NULL;
}
const ::google::protobuf::BoolValue& Document::is_series() const {
  const ::google::protobuf::BoolValue* p = is_series_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.is_series)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
::google::protobuf::BoolValue* Document::mutable_is_series() {
  
  if (is_series_ == NULL) {
    is_series_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.is_series)
  return is_series_;
}
::google::protobuf::BoolValue* Document::release_is_series() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.is_series)
  
  ::google::protobuf::BoolValue* temp = is_series_;
  is_series_ = NULL;
  return temp;
}
void Document::set_allocated_is_series(::google::protobuf::BoolValue* is_series) {
  delete is_series_;
  if (is_series != NULL && is_series->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_is_series = new ::google::protobuf::BoolValue;
    new_is_series->CopyFrom(*is_series);
    is_series = new_is_series;
  }
  is_series_ = is_series;
  if (is_series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.is_series)
}

// .google.protobuf.Int64Value external_int_id = 12;
bool Document::has_external_int_id() const {
  return variant_external_id_case() == kExternalIntId;
}
void Document::set_has_external_int_id() {
  _oneof_case_[0] = kExternalIntId;
}
void Document::clear_external_int_id() {
  if (has_external_int_id()) {
    delete variant_external_id_.external_int_id_;
    clear_has_variant_external_id();
  }
}
 const ::google::protobuf::Int64Value& Document::external_int_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.external_int_id)
  return has_external_int_id()
      ? *variant_external_id_.external_int_id_
      : ::google::protobuf::Int64Value::default_instance();
}
::google::protobuf::Int64Value* Document::mutable_external_int_id() {
  if (!has_external_int_id()) {
    clear_variant_external_id();
    set_has_external_int_id();
    variant_external_id_.external_int_id_ = new ::google::protobuf::Int64Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.external_int_id)
  return variant_external_id_.external_int_id_;
}
::google::protobuf::Int64Value* Document::release_external_int_id() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.external_int_id)
  if (has_external_int_id()) {
    clear_has_variant_external_id();
    ::google::protobuf::Int64Value* temp = variant_external_id_.external_int_id_;
    variant_external_id_.external_int_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Document::set_allocated_external_int_id(::google::protobuf::Int64Value* external_int_id) {
  clear_variant_external_id();
  if (external_int_id) {
    if (static_cast< ::google::protobuf::Int64Value*>(external_int_id)->GetArena() != NULL) {
      ::google::protobuf::Int64Value* new_external_int_id = new ::google::protobuf::Int64Value;
      new_external_int_id->CopyFrom(*external_int_id);
      external_int_id = new_external_int_id;
    }
    set_has_external_int_id();
    variant_external_id_.external_int_id_ = external_int_id;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.external_int_id)
}

// .google.protobuf.StringValue external_string_id = 13;
bool Document::has_external_string_id() const {
  return variant_external_id_case() == kExternalStringId;
}
void Document::set_has_external_string_id() {
  _oneof_case_[0] = kExternalStringId;
}
void Document::clear_external_string_id() {
  if (has_external_string_id()) {
    delete variant_external_id_.external_string_id_;
    clear_has_variant_external_id();
  }
}
 const ::google::protobuf::StringValue& Document::external_string_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.external_string_id)
  return has_external_string_id()
      ? *variant_external_id_.external_string_id_
      : ::google::protobuf::StringValue::default_instance();
}
::google::protobuf::StringValue* Document::mutable_external_string_id() {
  if (!has_external_string_id()) {
    clear_variant_external_id();
    set_has_external_string_id();
    variant_external_id_.external_string_id_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.external_string_id)
  return variant_external_id_.external_string_id_;
}
::google::protobuf::StringValue* Document::release_external_string_id() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.external_string_id)
  if (has_external_string_id()) {
    clear_has_variant_external_id();
    ::google::protobuf::StringValue* temp = variant_external_id_.external_string_id_;
    variant_external_id_.external_string_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Document::set_allocated_external_string_id(::google::protobuf::StringValue* external_string_id) {
  clear_variant_external_id();
  if (external_string_id) {
    if (static_cast< ::google::protobuf::StringValue*>(external_string_id)->GetArena() != NULL) {
      ::google::protobuf::StringValue* new_external_string_id = new ::google::protobuf::StringValue;
      new_external_string_id->CopyFrom(*external_string_id);
      external_string_id = new_external_string_id;
    }
    set_has_external_string_id();
    variant_external_id_.external_string_id_ = external_string_id;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.external_string_id)
}

// bytes compact_meta_info = 51;
void Document::clear_compact_meta_info() {
  compact_meta_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Document::compact_meta_info() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.compact_meta_info)
  return compact_meta_info_.GetNoArena();
}
void Document::set_compact_meta_info(const ::std::string& value) {
  
  compact_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.Document.compact_meta_info)
}
#if LANG_CXX11
void Document::set_compact_meta_info(::std::string&& value) {
  
  compact_meta_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.Document.compact_meta_info)
}
#endif
void Document::set_compact_meta_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compact_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.Document.compact_meta_info)
}
void Document::set_compact_meta_info(const void* value, size_t size) {
  
  compact_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.Document.compact_meta_info)
}
::std::string* Document::mutable_compact_meta_info() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.compact_meta_info)
  return compact_meta_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Document::release_compact_meta_info() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.compact_meta_info)
  
  return compact_meta_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Document::set_allocated_compact_meta_info(::std::string* compact_meta_info) {
  if (compact_meta_info != NULL) {
    
  } else {
    
  }
  compact_meta_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compact_meta_info);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.compact_meta_info)
}

bool Document::has_variant_external_id() const {
  return variant_external_id_case() != VARIANT_EXTERNAL_ID_NOT_SET;
}
void Document::clear_has_variant_external_id() {
  _oneof_case_[0] = VARIANT_EXTERNAL_ID_NOT_SET;
}
Document::VariantExternalIdCase Document::variant_external_id_case() const {
  return Document::VariantExternalIdCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosmoResponse::kDocumentsFieldNumber;
const int CosmoResponse::kCompactUserMetaInfoFieldNumber;
const int CosmoResponse::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosmoResponse::CosmoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.CosmoResponse)
}
CosmoResponse::CosmoResponse(const CosmoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      documents_(from.documents_),
      channels_(from.channels_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  compact_user_meta_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.compact_user_meta_info().size() > 0) {
    compact_user_meta_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compact_user_meta_info_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.CosmoResponse)
}

void CosmoResponse::SharedCtor() {
  compact_user_meta_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CosmoResponse::~CosmoResponse() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.CosmoResponse)
  SharedDtor();
}

void CosmoResponse::SharedDtor() {
  compact_user_meta_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosmoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CosmoResponse::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosmoResponse& CosmoResponse::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

CosmoResponse* CosmoResponse::New(::google::protobuf::Arena* arena) const {
  CosmoResponse* n = new CosmoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CosmoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.CosmoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  channels_.Clear();
  compact_user_meta_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CosmoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.CosmoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cosmoefir.pb.Document documents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_documents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes compact_user_meta_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_compact_user_meta_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 channels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_channels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.CosmoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.CosmoResponse)
  return false;
#undef DO_
}

void CosmoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.CosmoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmoefir.pb.Document documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->documents(static_cast<int>(i)), output);
  }

  // bytes compact_user_meta_info = 3;
  if (this->compact_user_meta_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->compact_user_meta_info(), output);
  }

  // repeated uint32 channels = 4;
  if (this->channels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _channels_cached_byte_size_));
  }
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->channels(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.CosmoResponse)
}

::google::protobuf::uint8* CosmoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.CosmoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmoefir.pb.Document documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->documents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->documents(static_cast<int>(i)), deterministic, target);
  }

  // bytes compact_user_meta_info = 3;
  if (this->compact_user_meta_info().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->compact_user_meta_info(), target);
  }

  // repeated uint32 channels = 4;
  if (this->channels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _channels_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->channels_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.CosmoResponse)
  return target;
}

size_t CosmoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.CosmoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cosmoefir.pb.Document documents = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->documents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->documents(static_cast<int>(i)));
    }
  }

  // repeated uint32 channels = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->channels_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _channels_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes compact_user_meta_info = 3;
  if (this->compact_user_meta_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->compact_user_meta_info());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CosmoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.CosmoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CosmoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosmoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.CosmoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.CosmoResponse)
    MergeFrom(*source);
  }
}

void CosmoResponse::MergeFrom(const CosmoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.CosmoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  channels_.MergeFrom(from.channels_);
  if (from.compact_user_meta_info().size() > 0) {

    compact_user_meta_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compact_user_meta_info_);
  }
}

void CosmoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.CosmoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosmoResponse::CopyFrom(const CosmoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.CosmoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmoResponse::IsInitialized() const {
  return true;
}

void CosmoResponse::Swap(CosmoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosmoResponse::InternalSwap(CosmoResponse* other) {
  using std::swap;
  documents_.InternalSwap(&other->documents_);
  channels_.InternalSwap(&other->channels_);
  compact_user_meta_info_.Swap(&other->compact_user_meta_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CosmoResponse::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CosmoResponse

// repeated .cosmoefir.pb.Document documents = 1;
int CosmoResponse::documents_size() const {
  return documents_.size();
}
void CosmoResponse::clear_documents() {
  documents_.Clear();
}
const ::cosmoefir::pb::Document& CosmoResponse::documents(int index) const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.CosmoResponse.documents)
  return documents_.Get(index);
}
::cosmoefir::pb::Document* CosmoResponse::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.CosmoResponse.documents)
  return documents_.Mutable(index);
}
::cosmoefir::pb::Document* CosmoResponse::add_documents() {
  // @@protoc_insertion_point(field_add:cosmoefir.pb.CosmoResponse.documents)
  return documents_.Add();
}
::google::protobuf::RepeatedPtrField< ::cosmoefir::pb::Document >*
CosmoResponse::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:cosmoefir.pb.CosmoResponse.documents)
  return &documents_;
}
const ::google::protobuf::RepeatedPtrField< ::cosmoefir::pb::Document >&
CosmoResponse::documents() const {
  // @@protoc_insertion_point(field_list:cosmoefir.pb.CosmoResponse.documents)
  return documents_;
}

// bytes compact_user_meta_info = 3;
void CosmoResponse::clear_compact_user_meta_info() {
  compact_user_meta_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CosmoResponse::compact_user_meta_info() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
  return compact_user_meta_info_.GetNoArena();
}
void CosmoResponse::set_compact_user_meta_info(const ::std::string& value) {
  
  compact_user_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
}
#if LANG_CXX11
void CosmoResponse::set_compact_user_meta_info(::std::string&& value) {
  
  compact_user_meta_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
}
#endif
void CosmoResponse::set_compact_user_meta_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compact_user_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
}
void CosmoResponse::set_compact_user_meta_info(const void* value, size_t size) {
  
  compact_user_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
}
::std::string* CosmoResponse::mutable_compact_user_meta_info() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
  return compact_user_meta_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CosmoResponse::release_compact_user_meta_info() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
  
  return compact_user_meta_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CosmoResponse::set_allocated_compact_user_meta_info(::std::string* compact_user_meta_info) {
  if (compact_user_meta_info != NULL) {
    
  } else {
    
  }
  compact_user_meta_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compact_user_meta_info);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
}

// repeated uint32 channels = 4;
int CosmoResponse::channels_size() const {
  return channels_.size();
}
void CosmoResponse::clear_channels() {
  channels_.Clear();
}
::google::protobuf::uint32 CosmoResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.CosmoResponse.channels)
  return channels_.Get(index);
}
void CosmoResponse::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.CosmoResponse.channels)
}
void CosmoResponse::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:cosmoefir.pb.CosmoResponse.channels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CosmoResponse::channels() const {
  // @@protoc_insertion_point(field_list:cosmoefir.pb.CosmoResponse.channels)
  return channels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CosmoResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:cosmoefir.pb.CosmoResponse.channels)
  return &channels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DocumentIdList::kIdsFieldNumber;
const int DocumentIdList::kIdsLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DocumentIdList::DocumentIdList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cosmo_5fefir_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cosmoefir.pb.DocumentIdList)
}
DocumentIdList::DocumentIdList(const DocumentIdList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ids_limit_ = from.ids_limit_;
  // @@protoc_insertion_point(copy_constructor:cosmoefir.pb.DocumentIdList)
}

void DocumentIdList::SharedCtor() {
  ids_limit_ = 0u;
  _cached_size_ = 0;
}

DocumentIdList::~DocumentIdList() {
  // @@protoc_insertion_point(destructor:cosmoefir.pb.DocumentIdList)
  SharedDtor();
}

void DocumentIdList::SharedDtor() {
}

void DocumentIdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentIdList::descriptor() {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DocumentIdList& DocumentIdList::default_instance() {
  protobuf_cosmo_5fefir_2eproto::InitDefaults();
  return *internal_default_instance();
}

DocumentIdList* DocumentIdList::New(::google::protobuf::Arena* arena) const {
  DocumentIdList* n = new DocumentIdList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DocumentIdList::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmoefir.pb.DocumentIdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  ids_limit_ = 0u;
  _internal_metadata_.Clear();
}

bool DocumentIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cosmoefir.pb.DocumentIdList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ids_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ids_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cosmoefir.pb.DocumentIdList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cosmoefir.pb.DocumentIdList)
  return false;
#undef DO_
}

void DocumentIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cosmoefir.pb.DocumentIdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ids_cached_byte_size_));
  }
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->ids(i), output);
  }

  // uint32 ids_limit = 2;
  if (this->ids_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ids_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cosmoefir.pb.DocumentIdList)
}

::google::protobuf::uint8* DocumentIdList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cosmoefir.pb.DocumentIdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 ids = 1;
  if (this->ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->ids_, target);
  }

  // uint32 ids_limit = 2;
  if (this->ids_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ids_limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmoefir.pb.DocumentIdList)
  return target;
}

size_t DocumentIdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmoefir.pb.DocumentIdList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 ids_limit = 2;
  if (this->ids_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ids_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentIdList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cosmoefir.pb.DocumentIdList)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentIdList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DocumentIdList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cosmoefir.pb.DocumentIdList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cosmoefir.pb.DocumentIdList)
    MergeFrom(*source);
  }
}

void DocumentIdList::MergeFrom(const DocumentIdList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmoefir.pb.DocumentIdList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.ids_limit() != 0) {
    set_ids_limit(from.ids_limit());
  }
}

void DocumentIdList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cosmoefir.pb.DocumentIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentIdList::CopyFrom(const DocumentIdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmoefir.pb.DocumentIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentIdList::IsInitialized() const {
  return true;
}

void DocumentIdList::Swap(DocumentIdList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DocumentIdList::InternalSwap(DocumentIdList* other) {
  using std::swap;
  ids_.InternalSwap(&other->ids_);
  swap(ids_limit_, other->ids_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DocumentIdList::GetMetadata() const {
  protobuf_cosmo_5fefir_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cosmo_5fefir_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DocumentIdList

// repeated int64 ids = 1;
int DocumentIdList::ids_size() const {
  return ids_.size();
}
void DocumentIdList::clear_ids() {
  ids_.Clear();
}
::google::protobuf::int64 DocumentIdList::ids(int index) const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentIdList.ids)
  return ids_.Get(index);
}
void DocumentIdList::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentIdList.ids)
}
void DocumentIdList::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:cosmoefir.pb.DocumentIdList.ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DocumentIdList::ids() const {
  // @@protoc_insertion_point(field_list:cosmoefir.pb.DocumentIdList.ids)
  return ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DocumentIdList::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:cosmoefir.pb.DocumentIdList.ids)
  return &ids_;
}

// uint32 ids_limit = 2;
void DocumentIdList::clear_ids_limit() {
  ids_limit_ = 0u;
}
::google::protobuf::uint32 DocumentIdList::ids_limit() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentIdList.ids_limit)
  return ids_limit_;
}
void DocumentIdList::set_ids_limit(::google::protobuf::uint32 value) {
  
  ids_limit_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentIdList.ids_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace cosmoefir

// @@protoc_insertion_point(global_scope)
