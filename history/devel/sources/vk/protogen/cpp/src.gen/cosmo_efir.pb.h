// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmo_efir.proto

#ifndef PROTOBUF_cosmo_5fefir_2eproto__INCLUDED
#define PROTOBUF_cosmo_5fefir_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
namespace cosmoefir {
namespace pb {
class CosmoResponse;
class CosmoResponseDefaultTypeInternal;
extern CosmoResponseDefaultTypeInternal _CosmoResponse_default_instance_;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class DocumentIdList;
class DocumentIdListDefaultTypeInternal;
extern DocumentIdListDefaultTypeInternal _DocumentIdList_default_instance_;
class DocumentMetaInfo;
class DocumentMetaInfoDefaultTypeInternal;
extern DocumentMetaInfoDefaultTypeInternal _DocumentMetaInfo_default_instance_;
class DocumentMetaInfo_OriginOfRecommendation;
class DocumentMetaInfo_OriginOfRecommendationDefaultTypeInternal;
extern DocumentMetaInfo_OriginOfRecommendationDefaultTypeInternal _DocumentMetaInfo_OriginOfRecommendation_default_instance_;
class DocumentMetaInfo_RetrieverKind;
class DocumentMetaInfo_RetrieverKindDefaultTypeInternal;
extern DocumentMetaInfo_RetrieverKindDefaultTypeInternal _DocumentMetaInfo_RetrieverKind_default_instance_;
class PixelMetaInfo;
class PixelMetaInfoDefaultTypeInternal;
extern PixelMetaInfoDefaultTypeInternal _PixelMetaInfo_default_instance_;
class UserMetaInfo;
class UserMetaInfoDefaultTypeInternal;
extern UserMetaInfoDefaultTypeInternal _UserMetaInfo_default_instance_;
class UserMetaInfo_RetrieverMetaInfo;
class UserMetaInfo_RetrieverMetaInfoDefaultTypeInternal;
extern UserMetaInfo_RetrieverMetaInfoDefaultTypeInternal _UserMetaInfo_RetrieverMetaInfo_default_instance_;
class UserSimpleMetaInfo;
class UserSimpleMetaInfoDefaultTypeInternal;
extern UserSimpleMetaInfoDefaultTypeInternal _UserSimpleMetaInfo_default_instance_;
class VideoInfo;
class VideoInfoDefaultTypeInternal;
extern VideoInfoDefaultTypeInternal _VideoInfo_default_instance_;
class VideoInfo_Player;
class VideoInfo_PlayerDefaultTypeInternal;
extern VideoInfo_PlayerDefaultTypeInternal _VideoInfo_Player_default_instance_;
class VideoInfo_Preview;
class VideoInfo_PreviewDefaultTypeInternal;
extern VideoInfo_PreviewDefaultTypeInternal _VideoInfo_Preview_default_instance_;
}  // namespace pb
}  // namespace cosmoefir

namespace cosmoefir {
namespace pb {

namespace protobuf_cosmo_5fefir_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cosmo_5fefir_2eproto

enum DocumentMetaInfo_OriginOfRecommendation__ {
  DocumentMetaInfo_OriginOfRecommendation___UNKNOWN = 0,
  DocumentMetaInfo_OriginOfRecommendation___USER_VIDEO = 1,
  DocumentMetaInfo_OriginOfRecommendation___USER_MUSIC = 2,
  DocumentMetaInfo_OriginOfRecommendation___USER_SOURCE = 3,
  DocumentMetaInfo_OriginOfRecommendation___FEEDBACK_LIKE = 4,
  DocumentMetaInfo_OriginOfRecommendation___SOC_DEM = 5,
  DocumentMetaInfo_OriginOfRecommendation___TOP = 6,
  DocumentMetaInfo_OriginOfRecommendation___START_ID = 7,
  DocumentMetaInfo_OriginOfRecommendation___LATEST = 8,
  DocumentMetaInfo_OriginOfRecommendation___DEFERED = 9,
  DocumentMetaInfo_OriginOfRecommendation___FEEDBACK_NEXT = 10,
  DocumentMetaInfo_OriginOfRecommendation___PROMO = 11,
  DocumentMetaInfo_OriginOfRecommendation___SOURCE_MODEL = 12,
  DocumentMetaInfo_OriginOfRecommendation___RANDOM = 13,
  DocumentMetaInfo_OriginOfRecommendation___SIMILAR_DOCUMENTS = 14,
  DocumentMetaInfo_OriginOfRecommendation___TOP_PERSONAL = 15,
  DocumentMetaInfo_OriginOfRecommendation___TOP_SAMPLING = 16,
  DocumentMetaInfo_OriginOfRecommendation___URL = 17,
  DocumentMetaInfo_OriginOfRecommendation___DocumentMetaInfo_OriginOfRecommendation___INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DocumentMetaInfo_OriginOfRecommendation___DocumentMetaInfo_OriginOfRecommendation___INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DocumentMetaInfo_OriginOfRecommendation___IsValid(int value);
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation_____MIN = DocumentMetaInfo_OriginOfRecommendation___UNKNOWN;
const DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation_____MAX = DocumentMetaInfo_OriginOfRecommendation___URL;
const int DocumentMetaInfo_OriginOfRecommendation_____ARRAYSIZE = DocumentMetaInfo_OriginOfRecommendation_____MAX + 1;

const ::google::protobuf::EnumDescriptor* DocumentMetaInfo_OriginOfRecommendation___descriptor();
inline const ::std::string& DocumentMetaInfo_OriginOfRecommendation___Name(DocumentMetaInfo_OriginOfRecommendation__ value) {
  return ::google::protobuf::internal::NameOfEnum(
    DocumentMetaInfo_OriginOfRecommendation___descriptor(), value);
}
inline bool DocumentMetaInfo_OriginOfRecommendation___Parse(
    const ::std::string& name, DocumentMetaInfo_OriginOfRecommendation__* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DocumentMetaInfo_OriginOfRecommendation__>(
    DocumentMetaInfo_OriginOfRecommendation___descriptor(), name, value);
}
enum DocumentMetaInfo_RetrieverKind__ {
  DocumentMetaInfo_RetrieverKind___UNKNOWN = 0,
  DocumentMetaInfo_RetrieverKind___VIDEO = 1,
  DocumentMetaInfo_RetrieverKind___MUSIC = 2,
  DocumentMetaInfo_RetrieverKind___YOUTUBE = 3,
  DocumentMetaInfo_RetrieverKind___NEWS = 4,
  DocumentMetaInfo_RetrieverKind___KIDS = 5,
  DocumentMetaInfo_RetrieverKind___TRAILERS = 6,
  DocumentMetaInfo_RetrieverKind___SPORT = 7,
  DocumentMetaInfo_RetrieverKind___PODCASTS = 8,
  DocumentMetaInfo_RetrieverKind___DocumentMetaInfo_RetrieverKind___INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DocumentMetaInfo_RetrieverKind___DocumentMetaInfo_RetrieverKind___INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DocumentMetaInfo_RetrieverKind___IsValid(int value);
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind_____MIN = DocumentMetaInfo_RetrieverKind___UNKNOWN;
const DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind_____MAX = DocumentMetaInfo_RetrieverKind___PODCASTS;
const int DocumentMetaInfo_RetrieverKind_____ARRAYSIZE = DocumentMetaInfo_RetrieverKind_____MAX + 1;

const ::google::protobuf::EnumDescriptor* DocumentMetaInfo_RetrieverKind___descriptor();
inline const ::std::string& DocumentMetaInfo_RetrieverKind___Name(DocumentMetaInfo_RetrieverKind__ value) {
  return ::google::protobuf::internal::NameOfEnum(
    DocumentMetaInfo_RetrieverKind___descriptor(), value);
}
inline bool DocumentMetaInfo_RetrieverKind___Parse(
    const ::std::string& name, DocumentMetaInfo_RetrieverKind__* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DocumentMetaInfo_RetrieverKind__>(
    DocumentMetaInfo_RetrieverKind___descriptor(), name, value);
}
enum Gender {
  NONE = 0,
  MALE = 1,
  FEMALE = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Gender_IsValid(int value);
const Gender Gender_MIN = NONE;
const Gender Gender_MAX = FEMALE;
const int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gender_descriptor();
inline const ::std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gender_descriptor(), value);
}
inline bool Gender_Parse(
    const ::std::string& name, Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
// ===================================================================

class UserSimpleMetaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.UserSimpleMetaInfo) */ {
 public:
  UserSimpleMetaInfo();
  virtual ~UserSimpleMetaInfo();

  UserSimpleMetaInfo(const UserSimpleMetaInfo& from);

  inline UserSimpleMetaInfo& operator=(const UserSimpleMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSimpleMetaInfo(UserSimpleMetaInfo&& from) noexcept
    : UserSimpleMetaInfo() {
    *this = ::std::move(from);
  }

  inline UserSimpleMetaInfo& operator=(UserSimpleMetaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSimpleMetaInfo& default_instance();

  static inline const UserSimpleMetaInfo* internal_default_instance() {
    return reinterpret_cast<const UserSimpleMetaInfo*>(
               &_UserSimpleMetaInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UserSimpleMetaInfo* other);
  friend void swap(UserSimpleMetaInfo& a, UserSimpleMetaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSimpleMetaInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserSimpleMetaInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserSimpleMetaInfo& from);
  void MergeFrom(const UserSimpleMetaInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserSimpleMetaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string partner_user_id = 3;
  void clear_partner_user_id();
  static const int kPartnerUserIdFieldNumber = 3;
  const ::std::string& partner_user_id() const;
  void set_partner_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_partner_user_id(::std::string&& value);
  #endif
  void set_partner_user_id(const char* value);
  void set_partner_user_id(const char* value, size_t size);
  ::std::string* mutable_partner_user_id();
  ::std::string* release_partner_user_id();
  void set_allocated_partner_user_id(::std::string* partner_user_id);

  // .google.protobuf.UInt64Value email_hash = 1;
  bool has_email_hash() const;
  void clear_email_hash();
  static const int kEmailHashFieldNumber = 1;
  const ::google::protobuf::UInt64Value& email_hash() const;
  ::google::protobuf::UInt64Value* mutable_email_hash();
  ::google::protobuf::UInt64Value* release_email_hash();
  void set_allocated_email_hash(::google::protobuf::UInt64Value* email_hash);

  // .google.protobuf.UInt64Value vid = 2;
  bool has_vid() const;
  void clear_vid();
  static const int kVidFieldNumber = 2;
  const ::google::protobuf::UInt64Value& vid() const;
  ::google::protobuf::UInt64Value* mutable_vid();
  ::google::protobuf::UInt64Value* release_vid();
  void set_allocated_vid(::google::protobuf::UInt64Value* vid);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.UserSimpleMetaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr partner_user_id_;
  ::google::protobuf::UInt64Value* email_hash_;
  ::google::protobuf::UInt64Value* vid_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMetaInfo_RetrieverMetaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo) */ {
 public:
  UserMetaInfo_RetrieverMetaInfo();
  virtual ~UserMetaInfo_RetrieverMetaInfo();

  UserMetaInfo_RetrieverMetaInfo(const UserMetaInfo_RetrieverMetaInfo& from);

  inline UserMetaInfo_RetrieverMetaInfo& operator=(const UserMetaInfo_RetrieverMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMetaInfo_RetrieverMetaInfo(UserMetaInfo_RetrieverMetaInfo&& from) noexcept
    : UserMetaInfo_RetrieverMetaInfo() {
    *this = ::std::move(from);
  }

  inline UserMetaInfo_RetrieverMetaInfo& operator=(UserMetaInfo_RetrieverMetaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMetaInfo_RetrieverMetaInfo& default_instance();

  static inline const UserMetaInfo_RetrieverMetaInfo* internal_default_instance() {
    return reinterpret_cast<const UserMetaInfo_RetrieverMetaInfo*>(
               &_UserMetaInfo_RetrieverMetaInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UserMetaInfo_RetrieverMetaInfo* other);
  friend void swap(UserMetaInfo_RetrieverMetaInfo& a, UserMetaInfo_RetrieverMetaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMetaInfo_RetrieverMetaInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserMetaInfo_RetrieverMetaInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserMetaInfo_RetrieverMetaInfo& from);
  void MergeFrom(const UserMetaInfo_RetrieverMetaInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserMetaInfo_RetrieverMetaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.UInt32Value video_count = 1;
  bool has_video_count() const;
  void clear_video_count();
  static const int kVideoCountFieldNumber = 1;
  const ::google::protobuf::UInt32Value& video_count() const;
  ::google::protobuf::UInt32Value* mutable_video_count();
  ::google::protobuf::UInt32Value* release_video_count();
  void set_allocated_video_count(::google::protobuf::UInt32Value* video_count);

  // .google.protobuf.UInt32Value music_count = 2;
  bool has_music_count() const;
  void clear_music_count();
  static const int kMusicCountFieldNumber = 2;
  const ::google::protobuf::UInt32Value& music_count() const;
  ::google::protobuf::UInt32Value* mutable_music_count();
  ::google::protobuf::UInt32Value* release_music_count();
  void set_allocated_music_count(::google::protobuf::UInt32Value* music_count);

  // .google.protobuf.UInt32Value youtube_count = 3;
  bool has_youtube_count() const;
  void clear_youtube_count();
  static const int kYoutubeCountFieldNumber = 3;
  const ::google::protobuf::UInt32Value& youtube_count() const;
  ::google::protobuf::UInt32Value* mutable_youtube_count();
  ::google::protobuf::UInt32Value* release_youtube_count();
  void set_allocated_youtube_count(::google::protobuf::UInt32Value* youtube_count);

  // .google.protobuf.UInt32Value news_count = 4;
  bool has_news_count() const;
  void clear_news_count();
  static const int kNewsCountFieldNumber = 4;
  const ::google::protobuf::UInt32Value& news_count() const;
  ::google::protobuf::UInt32Value* mutable_news_count();
  ::google::protobuf::UInt32Value* release_news_count();
  void set_allocated_news_count(::google::protobuf::UInt32Value* news_count);

  // .google.protobuf.UInt32Value kids_count = 5;
  bool has_kids_count() const;
  void clear_kids_count();
  static const int kKidsCountFieldNumber = 5;
  const ::google::protobuf::UInt32Value& kids_count() const;
  ::google::protobuf::UInt32Value* mutable_kids_count();
  ::google::protobuf::UInt32Value* release_kids_count();
  void set_allocated_kids_count(::google::protobuf::UInt32Value* kids_count);

  // .google.protobuf.UInt32Value trailers_count = 6;
  bool has_trailers_count() const;
  void clear_trailers_count();
  static const int kTrailersCountFieldNumber = 6;
  const ::google::protobuf::UInt32Value& trailers_count() const;
  ::google::protobuf::UInt32Value* mutable_trailers_count();
  ::google::protobuf::UInt32Value* release_trailers_count();
  void set_allocated_trailers_count(::google::protobuf::UInt32Value* trailers_count);

  // .google.protobuf.UInt32Value sport_count = 7;
  bool has_sport_count() const;
  void clear_sport_count();
  static const int kSportCountFieldNumber = 7;
  const ::google::protobuf::UInt32Value& sport_count() const;
  ::google::protobuf::UInt32Value* mutable_sport_count();
  ::google::protobuf::UInt32Value* release_sport_count();
  void set_allocated_sport_count(::google::protobuf::UInt32Value* sport_count);

  // .google.protobuf.UInt32Value podcasts_count = 8;
  bool has_podcasts_count() const;
  void clear_podcasts_count();
  static const int kPodcastsCountFieldNumber = 8;
  const ::google::protobuf::UInt32Value& podcasts_count() const;
  ::google::protobuf::UInt32Value* mutable_podcasts_count();
  ::google::protobuf::UInt32Value* release_podcasts_count();
  void set_allocated_podcasts_count(::google::protobuf::UInt32Value* podcasts_count);

  // .google.protobuf.UInt64Value relevant_documents_count = 50;
  bool has_relevant_documents_count() const;
  void clear_relevant_documents_count();
  static const int kRelevantDocumentsCountFieldNumber = 50;
  const ::google::protobuf::UInt64Value& relevant_documents_count() const;
  ::google::protobuf::UInt64Value* mutable_relevant_documents_count();
  ::google::protobuf::UInt64Value* release_relevant_documents_count();
  void set_allocated_relevant_documents_count(::google::protobuf::UInt64Value* relevant_documents_count);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::UInt32Value* video_count_;
  ::google::protobuf::UInt32Value* music_count_;
  ::google::protobuf::UInt32Value* youtube_count_;
  ::google::protobuf::UInt32Value* news_count_;
  ::google::protobuf::UInt32Value* kids_count_;
  ::google::protobuf::UInt32Value* trailers_count_;
  ::google::protobuf::UInt32Value* sport_count_;
  ::google::protobuf::UInt32Value* podcasts_count_;
  ::google::protobuf::UInt64Value* relevant_documents_count_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserMetaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.UserMetaInfo) */ {
 public:
  UserMetaInfo();
  virtual ~UserMetaInfo();

  UserMetaInfo(const UserMetaInfo& from);

  inline UserMetaInfo& operator=(const UserMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMetaInfo(UserMetaInfo&& from) noexcept
    : UserMetaInfo() {
    *this = ::std::move(from);
  }

  inline UserMetaInfo& operator=(UserMetaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMetaInfo& default_instance();

  enum OptionalGenderCase {
    kGender = 1,
    OPTIONAL_GENDER_NOT_SET = 0,
  };

  static inline const UserMetaInfo* internal_default_instance() {
    return reinterpret_cast<const UserMetaInfo*>(
               &_UserMetaInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UserMetaInfo* other);
  friend void swap(UserMetaInfo& a, UserMetaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMetaInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserMetaInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserMetaInfo& from);
  void MergeFrom(const UserMetaInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserMetaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef UserMetaInfo_RetrieverMetaInfo RetrieverMetaInfo;

  // accessors -------------------------------------------------------

  // repeated uint64 sources = 5;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 5;
  ::google::protobuf::uint64 sources(int index) const;
  void set_sources(int index, ::google::protobuf::uint64 value);
  void add_sources(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      sources() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_sources();

  // .google.protobuf.UInt32Value age = 2;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  const ::google::protobuf::UInt32Value& age() const;
  ::google::protobuf::UInt32Value* mutable_age();
  ::google::protobuf::UInt32Value* release_age();
  void set_allocated_age(::google::protobuf::UInt32Value* age);

  // .google.protobuf.UInt32Value watched_videos_count = 3;
  bool has_watched_videos_count() const;
  void clear_watched_videos_count();
  static const int kWatchedVideosCountFieldNumber = 3;
  const ::google::protobuf::UInt32Value& watched_videos_count() const;
  ::google::protobuf::UInt32Value* mutable_watched_videos_count();
  ::google::protobuf::UInt32Value* release_watched_videos_count();
  void set_allocated_watched_videos_count(::google::protobuf::UInt32Value* watched_videos_count);

  // .google.protobuf.UInt32Value site_count = 4;
  bool has_site_count() const;
  void clear_site_count();
  static const int kSiteCountFieldNumber = 4;
  const ::google::protobuf::UInt32Value& site_count() const;
  ::google::protobuf::UInt32Value* mutable_site_count();
  ::google::protobuf::UInt32Value* release_site_count();
  void set_allocated_site_count(::google::protobuf::UInt32Value* site_count);

  // .cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo retriever = 10;
  bool has_retriever() const;
  void clear_retriever();
  static const int kRetrieverFieldNumber = 10;
  const ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo& retriever() const;
  ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* mutable_retriever();
  ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* release_retriever();
  void set_allocated_retriever(::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* retriever);

  // .cosmoefir.pb.Gender gender = 1;
  private:
  bool has_gender() const;
  public:
  void clear_gender();
  static const int kGenderFieldNumber = 1;
  ::cosmoefir::pb::Gender gender() const;
  void set_gender(::cosmoefir::pb::Gender value);

  OptionalGenderCase optional_gender_case() const;
  // @@protoc_insertion_point(class_scope:cosmoefir.pb.UserMetaInfo)
 private:
  void set_has_gender();

  inline bool has_optional_gender() const;
  void clear_optional_gender();
  inline void clear_has_optional_gender();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > sources_;
  mutable int _sources_cached_byte_size_;
  ::google::protobuf::UInt32Value* age_;
  ::google::protobuf::UInt32Value* watched_videos_count_;
  ::google::protobuf::UInt32Value* site_count_;
  ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* retriever_;
  union OptionalGenderUnion {
    OptionalGenderUnion() {}
    int gender_;
  } optional_gender_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentMetaInfo_OriginOfRecommendation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation) */ {
 public:
  DocumentMetaInfo_OriginOfRecommendation();
  virtual ~DocumentMetaInfo_OriginOfRecommendation();

  DocumentMetaInfo_OriginOfRecommendation(const DocumentMetaInfo_OriginOfRecommendation& from);

  inline DocumentMetaInfo_OriginOfRecommendation& operator=(const DocumentMetaInfo_OriginOfRecommendation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentMetaInfo_OriginOfRecommendation(DocumentMetaInfo_OriginOfRecommendation&& from) noexcept
    : DocumentMetaInfo_OriginOfRecommendation() {
    *this = ::std::move(from);
  }

  inline DocumentMetaInfo_OriginOfRecommendation& operator=(DocumentMetaInfo_OriginOfRecommendation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentMetaInfo_OriginOfRecommendation& default_instance();

  static inline const DocumentMetaInfo_OriginOfRecommendation* internal_default_instance() {
    return reinterpret_cast<const DocumentMetaInfo_OriginOfRecommendation*>(
               &_DocumentMetaInfo_OriginOfRecommendation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DocumentMetaInfo_OriginOfRecommendation* other);
  friend void swap(DocumentMetaInfo_OriginOfRecommendation& a, DocumentMetaInfo_OriginOfRecommendation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentMetaInfo_OriginOfRecommendation* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentMetaInfo_OriginOfRecommendation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentMetaInfo_OriginOfRecommendation& from);
  void MergeFrom(const DocumentMetaInfo_OriginOfRecommendation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentMetaInfo_OriginOfRecommendation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DocumentMetaInfo_OriginOfRecommendation__ _;
  static const _ UNKNOWN =
    DocumentMetaInfo_OriginOfRecommendation___UNKNOWN;
  static const _ USER_VIDEO =
    DocumentMetaInfo_OriginOfRecommendation___USER_VIDEO;
  static const _ USER_MUSIC =
    DocumentMetaInfo_OriginOfRecommendation___USER_MUSIC;
  static const _ USER_SOURCE =
    DocumentMetaInfo_OriginOfRecommendation___USER_SOURCE;
  static const _ FEEDBACK_LIKE =
    DocumentMetaInfo_OriginOfRecommendation___FEEDBACK_LIKE;
  static const _ SOC_DEM =
    DocumentMetaInfo_OriginOfRecommendation___SOC_DEM;
  static const _ TOP =
    DocumentMetaInfo_OriginOfRecommendation___TOP;
  static const _ START_ID =
    DocumentMetaInfo_OriginOfRecommendation___START_ID;
  static const _ LATEST =
    DocumentMetaInfo_OriginOfRecommendation___LATEST;
  static const _ DEFERED =
    DocumentMetaInfo_OriginOfRecommendation___DEFERED;
  static const _ FEEDBACK_NEXT =
    DocumentMetaInfo_OriginOfRecommendation___FEEDBACK_NEXT;
  static const _ PROMO =
    DocumentMetaInfo_OriginOfRecommendation___PROMO;
  static const _ SOURCE_MODEL =
    DocumentMetaInfo_OriginOfRecommendation___SOURCE_MODEL;
  static const _ RANDOM =
    DocumentMetaInfo_OriginOfRecommendation___RANDOM;
  static const _ SIMILAR_DOCUMENTS =
    DocumentMetaInfo_OriginOfRecommendation___SIMILAR_DOCUMENTS;
  static const _ TOP_PERSONAL =
    DocumentMetaInfo_OriginOfRecommendation___TOP_PERSONAL;
  static const _ TOP_SAMPLING =
    DocumentMetaInfo_OriginOfRecommendation___TOP_SAMPLING;
  static const _ URL =
    DocumentMetaInfo_OriginOfRecommendation___URL;
  static inline bool __IsValid(int value) {
    return DocumentMetaInfo_OriginOfRecommendation___IsValid(value);
  }
  static const _ __MIN =
    DocumentMetaInfo_OriginOfRecommendation_____MIN;
  static const _ __MAX =
    DocumentMetaInfo_OriginOfRecommendation_____MAX;
  static const int __ARRAYSIZE =
    DocumentMetaInfo_OriginOfRecommendation_____ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  __descriptor() {
    return DocumentMetaInfo_OriginOfRecommendation___descriptor();
  }
  static inline const ::std::string& __Name(_ value) {
    return DocumentMetaInfo_OriginOfRecommendation___Name(value);
  }
  static inline bool __Parse(const ::std::string& name,
      _* value) {
    return DocumentMetaInfo_OriginOfRecommendation___Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation._ value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__ value() const;
  void set_value(::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__ value);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int value_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentMetaInfo_RetrieverKind : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.DocumentMetaInfo.RetrieverKind) */ {
 public:
  DocumentMetaInfo_RetrieverKind();
  virtual ~DocumentMetaInfo_RetrieverKind();

  DocumentMetaInfo_RetrieverKind(const DocumentMetaInfo_RetrieverKind& from);

  inline DocumentMetaInfo_RetrieverKind& operator=(const DocumentMetaInfo_RetrieverKind& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentMetaInfo_RetrieverKind(DocumentMetaInfo_RetrieverKind&& from) noexcept
    : DocumentMetaInfo_RetrieverKind() {
    *this = ::std::move(from);
  }

  inline DocumentMetaInfo_RetrieverKind& operator=(DocumentMetaInfo_RetrieverKind&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentMetaInfo_RetrieverKind& default_instance();

  static inline const DocumentMetaInfo_RetrieverKind* internal_default_instance() {
    return reinterpret_cast<const DocumentMetaInfo_RetrieverKind*>(
               &_DocumentMetaInfo_RetrieverKind_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DocumentMetaInfo_RetrieverKind* other);
  friend void swap(DocumentMetaInfo_RetrieverKind& a, DocumentMetaInfo_RetrieverKind& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentMetaInfo_RetrieverKind* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentMetaInfo_RetrieverKind* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentMetaInfo_RetrieverKind& from);
  void MergeFrom(const DocumentMetaInfo_RetrieverKind& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentMetaInfo_RetrieverKind* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DocumentMetaInfo_RetrieverKind__ _;
  static const _ UNKNOWN =
    DocumentMetaInfo_RetrieverKind___UNKNOWN;
  static const _ VIDEO =
    DocumentMetaInfo_RetrieverKind___VIDEO;
  static const _ MUSIC =
    DocumentMetaInfo_RetrieverKind___MUSIC;
  static const _ YOUTUBE =
    DocumentMetaInfo_RetrieverKind___YOUTUBE;
  static const _ NEWS =
    DocumentMetaInfo_RetrieverKind___NEWS;
  static const _ KIDS =
    DocumentMetaInfo_RetrieverKind___KIDS;
  static const _ TRAILERS =
    DocumentMetaInfo_RetrieverKind___TRAILERS;
  static const _ SPORT =
    DocumentMetaInfo_RetrieverKind___SPORT;
  static const _ PODCASTS =
    DocumentMetaInfo_RetrieverKind___PODCASTS;
  static inline bool __IsValid(int value) {
    return DocumentMetaInfo_RetrieverKind___IsValid(value);
  }
  static const _ __MIN =
    DocumentMetaInfo_RetrieverKind_____MIN;
  static const _ __MAX =
    DocumentMetaInfo_RetrieverKind_____MAX;
  static const int __ARRAYSIZE =
    DocumentMetaInfo_RetrieverKind_____ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  __descriptor() {
    return DocumentMetaInfo_RetrieverKind___descriptor();
  }
  static inline const ::std::string& __Name(_ value) {
    return DocumentMetaInfo_RetrieverKind___Name(value);
  }
  static inline bool __Parse(const ::std::string& name,
      _* value) {
    return DocumentMetaInfo_RetrieverKind___Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .cosmoefir.pb.DocumentMetaInfo.RetrieverKind._ value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__ value() const;
  void set_value(::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__ value);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.DocumentMetaInfo.RetrieverKind)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int value_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentMetaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.DocumentMetaInfo) */ {
 public:
  DocumentMetaInfo();
  virtual ~DocumentMetaInfo();

  DocumentMetaInfo(const DocumentMetaInfo& from);

  inline DocumentMetaInfo& operator=(const DocumentMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentMetaInfo(DocumentMetaInfo&& from) noexcept
    : DocumentMetaInfo() {
    *this = ::std::move(from);
  }

  inline DocumentMetaInfo& operator=(DocumentMetaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentMetaInfo& default_instance();

  static inline const DocumentMetaInfo* internal_default_instance() {
    return reinterpret_cast<const DocumentMetaInfo*>(
               &_DocumentMetaInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DocumentMetaInfo* other);
  friend void swap(DocumentMetaInfo& a, DocumentMetaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentMetaInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentMetaInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentMetaInfo& from);
  void MergeFrom(const DocumentMetaInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentMetaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DocumentMetaInfo_OriginOfRecommendation OriginOfRecommendation;
  typedef DocumentMetaInfo_RetrieverKind RetrieverKind;

  // accessors -------------------------------------------------------

  // repeated uint64 tags = 5;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  ::google::protobuf::uint64 tags(int index) const;
  void set_tags(int index, ::google::protobuf::uint64 value);
  void add_tags(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tags() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tags();

  // string category = 4;
  void clear_category();
  static const int kCategoryFieldNumber = 4;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation origin = 1;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 1;
  const ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation& origin() const;
  ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* mutable_origin();
  ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* release_origin();
  void set_allocated_origin(::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* origin);

  // .cosmoefir.pb.DocumentMetaInfo.RetrieverKind retriever_kind = 3;
  bool has_retriever_kind() const;
  void clear_retriever_kind();
  static const int kRetrieverKindFieldNumber = 3;
  const ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind& retriever_kind() const;
  ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* mutable_retriever_kind();
  ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* release_retriever_kind();
  void set_allocated_retriever_kind(::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* retriever_kind);

  // int64 origin_id = 2;
  void clear_origin_id();
  static const int kOriginIdFieldNumber = 2;
  ::google::protobuf::int64 origin_id() const;
  void set_origin_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.DocumentMetaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tags_;
  mutable int _tags_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* origin_;
  ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* retriever_kind_;
  ::google::protobuf::int64 origin_id_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PixelMetaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.PixelMetaInfo) */ {
 public:
  PixelMetaInfo();
  virtual ~PixelMetaInfo();

  PixelMetaInfo(const PixelMetaInfo& from);

  inline PixelMetaInfo& operator=(const PixelMetaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PixelMetaInfo(PixelMetaInfo&& from) noexcept
    : PixelMetaInfo() {
    *this = ::std::move(from);
  }

  inline PixelMetaInfo& operator=(PixelMetaInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PixelMetaInfo& default_instance();

  static inline const PixelMetaInfo* internal_default_instance() {
    return reinterpret_cast<const PixelMetaInfo*>(
               &_PixelMetaInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PixelMetaInfo* other);
  friend void swap(PixelMetaInfo& a, PixelMetaInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PixelMetaInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PixelMetaInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PixelMetaInfo& from);
  void MergeFrom(const PixelMetaInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PixelMetaInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes document = 1;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::std::string& document() const;
  void set_document(const ::std::string& value);
  #if LANG_CXX11
  void set_document(::std::string&& value);
  #endif
  void set_document(const char* value);
  void set_document(const void* value, size_t size);
  ::std::string* mutable_document();
  ::std::string* release_document();
  void set_allocated_document(::std::string* document);

  // bytes user_common = 2;
  void clear_user_common();
  static const int kUserCommonFieldNumber = 2;
  const ::std::string& user_common() const;
  void set_user_common(const ::std::string& value);
  #if LANG_CXX11
  void set_user_common(::std::string&& value);
  #endif
  void set_user_common(const char* value);
  void set_user_common(const void* value, size_t size);
  ::std::string* mutable_user_common();
  ::std::string* release_user_common();
  void set_allocated_user_common(::std::string* user_common);

  // bytes user_simple = 3;
  void clear_user_simple();
  static const int kUserSimpleFieldNumber = 3;
  const ::std::string& user_simple() const;
  void set_user_simple(const ::std::string& value);
  #if LANG_CXX11
  void set_user_simple(::std::string&& value);
  #endif
  void set_user_simple(const char* value);
  void set_user_simple(const void* value, size_t size);
  ::std::string* mutable_user_simple();
  ::std::string* release_user_simple();
  void set_allocated_user_simple(::std::string* user_simple);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.PixelMetaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr document_;
  ::google::protobuf::internal::ArenaStringPtr user_common_;
  ::google::protobuf::internal::ArenaStringPtr user_simple_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoInfo_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.VideoInfo.Player) */ {
 public:
  VideoInfo_Player();
  virtual ~VideoInfo_Player();

  VideoInfo_Player(const VideoInfo_Player& from);

  inline VideoInfo_Player& operator=(const VideoInfo_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoInfo_Player(VideoInfo_Player&& from) noexcept
    : VideoInfo_Player() {
    *this = ::std::move(from);
  }

  inline VideoInfo_Player& operator=(VideoInfo_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoInfo_Player& default_instance();

  static inline const VideoInfo_Player* internal_default_instance() {
    return reinterpret_cast<const VideoInfo_Player*>(
               &_VideoInfo_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(VideoInfo_Player* other);
  friend void swap(VideoInfo_Player& a, VideoInfo_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoInfo_Player* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoInfo_Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoInfo_Player& from);
  void MergeFrom(const VideoInfo_Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoInfo_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // uint32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.VideoInfo.Player)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoInfo_Preview : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.VideoInfo.Preview) */ {
 public:
  VideoInfo_Preview();
  virtual ~VideoInfo_Preview();

  VideoInfo_Preview(const VideoInfo_Preview& from);

  inline VideoInfo_Preview& operator=(const VideoInfo_Preview& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoInfo_Preview(VideoInfo_Preview&& from) noexcept
    : VideoInfo_Preview() {
    *this = ::std::move(from);
  }

  inline VideoInfo_Preview& operator=(VideoInfo_Preview&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoInfo_Preview& default_instance();

  static inline const VideoInfo_Preview* internal_default_instance() {
    return reinterpret_cast<const VideoInfo_Preview*>(
               &_VideoInfo_Preview_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(VideoInfo_Preview* other);
  friend void swap(VideoInfo_Preview& a, VideoInfo_Preview& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoInfo_Preview* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoInfo_Preview* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoInfo_Preview& from);
  void MergeFrom(const VideoInfo_Preview& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoInfo_Preview* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string local_url = 2;
  void clear_local_url();
  static const int kLocalUrlFieldNumber = 2;
  const ::std::string& local_url() const;
  void set_local_url(const ::std::string& value);
  #if LANG_CXX11
  void set_local_url(::std::string&& value);
  #endif
  void set_local_url(const char* value);
  void set_local_url(const char* value, size_t size);
  ::std::string* mutable_local_url();
  ::std::string* release_local_url();
  void set_allocated_local_url(::std::string* local_url);

  // uint32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.VideoInfo.Preview)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr local_url_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.VideoInfo) */ {
 public:
  VideoInfo();
  virtual ~VideoInfo();

  VideoInfo(const VideoInfo& from);

  inline VideoInfo& operator=(const VideoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoInfo(VideoInfo&& from) noexcept
    : VideoInfo() {
    *this = ::std::move(from);
  }

  inline VideoInfo& operator=(VideoInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoInfo& default_instance();

  static inline const VideoInfo* internal_default_instance() {
    return reinterpret_cast<const VideoInfo*>(
               &_VideoInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(VideoInfo* other);
  friend void swap(VideoInfo& a, VideoInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoInfo& from);
  void MergeFrom(const VideoInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VideoInfo_Player Player;
  typedef VideoInfo_Preview Preview;

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string sig = 8;
  void clear_sig();
  static const int kSigFieldNumber = 8;
  const ::std::string& sig() const;
  void set_sig(const ::std::string& value);
  #if LANG_CXX11
  void set_sig(::std::string&& value);
  #endif
  void set_sig(const char* value);
  void set_sig(const char* value, size_t size);
  ::std::string* mutable_sig();
  ::std::string* release_sig();
  void set_allocated_sig(::std::string* sig);

  // string source_name = 10;
  void clear_source_name();
  static const int kSourceNameFieldNumber = 10;
  const ::std::string& source_name() const;
  void set_source_name(const ::std::string& value);
  #if LANG_CXX11
  void set_source_name(::std::string&& value);
  #endif
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  ::std::string* mutable_source_name();
  ::std::string* release_source_name();
  void set_allocated_source_name(::std::string* source_name);

  // .cosmoefir.pb.VideoInfo.Player player = 12;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 12;
  const ::cosmoefir::pb::VideoInfo_Player& player() const;
  ::cosmoefir::pb::VideoInfo_Player* mutable_player();
  ::cosmoefir::pb::VideoInfo_Player* release_player();
  void set_allocated_player(::cosmoefir::pb::VideoInfo_Player* player);

  // .cosmoefir.pb.VideoInfo.Preview preview = 13;
  bool has_preview() const;
  void clear_preview();
  static const int kPreviewFieldNumber = 13;
  const ::cosmoefir::pb::VideoInfo_Preview& preview() const;
  ::cosmoefir::pb::VideoInfo_Preview* mutable_preview();
  ::cosmoefir::pb::VideoInfo_Preview* release_preview();
  void set_allocated_preview(::cosmoefir::pb::VideoInfo_Preview* preview);

  // .cosmoefir.pb.VideoInfo.Preview poster_preview = 14;
  bool has_poster_preview() const;
  void clear_poster_preview();
  static const int kPosterPreviewFieldNumber = 14;
  const ::cosmoefir::pb::VideoInfo_Preview& poster_preview() const;
  ::cosmoefir::pb::VideoInfo_Preview* mutable_poster_preview();
  ::cosmoefir::pb::VideoInfo_Preview* release_poster_preview();
  void set_allocated_poster_preview(::cosmoefir::pb::VideoInfo_Preview* poster_preview);

  // uint32 duration = 5;
  void clear_duration();
  static const int kDurationFieldNumber = 5;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // bool hd = 6;
  void clear_hd();
  static const int kHdFieldNumber = 6;
  bool hd() const;
  void set_hd(bool value);

  // bool full_hd = 7;
  void clear_full_hd();
  static const int kFullHdFieldNumber = 7;
  bool full_hd() const;
  void set_full_hd(bool value);

  // uint64 time = 11;
  void clear_time();
  static const int kTimeFieldNumber = 11;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // uint32 source_id = 9;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 9;
  ::google::protobuf::uint32 source_id() const;
  void set_source_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.VideoInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr sig_;
  ::google::protobuf::internal::ArenaStringPtr source_name_;
  ::cosmoefir::pb::VideoInfo_Player* player_;
  ::cosmoefir::pb::VideoInfo_Preview* preview_;
  ::cosmoefir::pb::VideoInfo_Preview* poster_preview_;
  ::google::protobuf::uint32 duration_;
  bool hd_;
  bool full_hd_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 source_id_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Document : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Document& default_instance();

  enum VariantExternalIdCase {
    kExternalIntId = 12,
    kExternalStringId = 13,
    VARIANT_EXTERNAL_ID_NOT_SET = 0,
  };

  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Document* other);
  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const PROTOBUF_FINAL { return New(NULL); }

  Document* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Document* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes compact_meta_info = 51;
  void clear_compact_meta_info();
  static const int kCompactMetaInfoFieldNumber = 51;
  const ::std::string& compact_meta_info() const;
  void set_compact_meta_info(const ::std::string& value);
  #if LANG_CXX11
  void set_compact_meta_info(::std::string&& value);
  #endif
  void set_compact_meta_info(const char* value);
  void set_compact_meta_info(const void* value, size_t size);
  ::std::string* mutable_compact_meta_info();
  ::std::string* release_compact_meta_info();
  void set_allocated_compact_meta_info(::std::string* compact_meta_info);

  // .google.protobuf.StringValue name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::google::protobuf::StringValue& name() const;
  ::google::protobuf::StringValue* mutable_name();
  ::google::protobuf::StringValue* release_name();
  void set_allocated_name(::google::protobuf::StringValue* name);

  // .google.protobuf.StringValue category = 4;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 4;
  const ::google::protobuf::StringValue& category() const;
  ::google::protobuf::StringValue* mutable_category();
  ::google::protobuf::StringValue* release_category();
  void set_allocated_category(::google::protobuf::StringValue* category);

  // .google.protobuf.UInt32Value age_restrict = 5;
  bool has_age_restrict() const;
  void clear_age_restrict();
  static const int kAgeRestrictFieldNumber = 5;
  const ::google::protobuf::UInt32Value& age_restrict() const;
  ::google::protobuf::UInt32Value* mutable_age_restrict();
  ::google::protobuf::UInt32Value* release_age_restrict();
  void set_allocated_age_restrict(::google::protobuf::UInt32Value* age_restrict);

  // .google.protobuf.BoolValue is_published = 6;
  bool has_is_published() const;
  void clear_is_published();
  static const int kIsPublishedFieldNumber = 6;
  const ::google::protobuf::BoolValue& is_published() const;
  ::google::protobuf::BoolValue* mutable_is_published();
  ::google::protobuf::BoolValue* release_is_published();
  void set_allocated_is_published(::google::protobuf::BoolValue* is_published);

  // .cosmoefir.pb.VideoInfo video_info = 8;
  bool has_video_info() const;
  void clear_video_info();
  static const int kVideoInfoFieldNumber = 8;
  const ::cosmoefir::pb::VideoInfo& video_info() const;
  ::cosmoefir::pb::VideoInfo* mutable_video_info();
  ::cosmoefir::pb::VideoInfo* release_video_info();
  void set_allocated_video_info(::cosmoefir::pb::VideoInfo* video_info);

  // .google.protobuf.StringValue image_poster = 9;
  bool has_image_poster() const;
  void clear_image_poster();
  static const int kImagePosterFieldNumber = 9;
  const ::google::protobuf::StringValue& image_poster() const;
  ::google::protobuf::StringValue* mutable_image_poster();
  ::google::protobuf::StringValue* release_image_poster();
  void set_allocated_image_poster(::google::protobuf::StringValue* image_poster);

  // .google.protobuf.StringValue preview_url = 10;
  bool has_preview_url() const;
  void clear_preview_url();
  static const int kPreviewUrlFieldNumber = 10;
  const ::google::protobuf::StringValue& preview_url() const;
  ::google::protobuf::StringValue* mutable_preview_url();
  ::google::protobuf::StringValue* release_preview_url();
  void set_allocated_preview_url(::google::protobuf::StringValue* preview_url);

  // .google.protobuf.BoolValue is_series = 11;
  bool has_is_series() const;
  void clear_is_series();
  static const int kIsSeriesFieldNumber = 11;
  const ::google::protobuf::BoolValue& is_series() const;
  ::google::protobuf::BoolValue* mutable_is_series();
  ::google::protobuf::BoolValue* release_is_series();
  void set_allocated_is_series(::google::protobuf::BoolValue* is_series);

  // int64 doc_id = 1;
  void clear_doc_id();
  static const int kDocIdFieldNumber = 1;
  ::google::protobuf::int64 doc_id() const;
  void set_doc_id(::google::protobuf::int64 value);

  // float rank = 2;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  float rank() const;
  void set_rank(float value);

  // .google.protobuf.Int64Value external_int_id = 12;
  bool has_external_int_id() const;
  void clear_external_int_id();
  static const int kExternalIntIdFieldNumber = 12;
  const ::google::protobuf::Int64Value& external_int_id() const;
  ::google::protobuf::Int64Value* mutable_external_int_id();
  ::google::protobuf::Int64Value* release_external_int_id();
  void set_allocated_external_int_id(::google::protobuf::Int64Value* external_int_id);

  // .google.protobuf.StringValue external_string_id = 13;
  bool has_external_string_id() const;
  void clear_external_string_id();
  static const int kExternalStringIdFieldNumber = 13;
  const ::google::protobuf::StringValue& external_string_id() const;
  ::google::protobuf::StringValue* mutable_external_string_id();
  ::google::protobuf::StringValue* release_external_string_id();
  void set_allocated_external_string_id(::google::protobuf::StringValue* external_string_id);

  VariantExternalIdCase variant_external_id_case() const;
  // @@protoc_insertion_point(class_scope:cosmoefir.pb.Document)
 private:
  void set_has_external_int_id();
  void set_has_external_string_id();

  inline bool has_variant_external_id() const;
  void clear_variant_external_id();
  inline void clear_has_variant_external_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr compact_meta_info_;
  ::google::protobuf::StringValue* name_;
  ::google::protobuf::StringValue* category_;
  ::google::protobuf::UInt32Value* age_restrict_;
  ::google::protobuf::BoolValue* is_published_;
  ::cosmoefir::pb::VideoInfo* video_info_;
  ::google::protobuf::StringValue* image_poster_;
  ::google::protobuf::StringValue* preview_url_;
  ::google::protobuf::BoolValue* is_series_;
  ::google::protobuf::int64 doc_id_;
  float rank_;
  union VariantExternalIdUnion {
    VariantExternalIdUnion() {}
    ::google::protobuf::Int64Value* external_int_id_;
    ::google::protobuf::StringValue* external_string_id_;
  } variant_external_id_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CosmoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.CosmoResponse) */ {
 public:
  CosmoResponse();
  virtual ~CosmoResponse();

  CosmoResponse(const CosmoResponse& from);

  inline CosmoResponse& operator=(const CosmoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CosmoResponse(CosmoResponse&& from) noexcept
    : CosmoResponse() {
    *this = ::std::move(from);
  }

  inline CosmoResponse& operator=(CosmoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CosmoResponse& default_instance();

  static inline const CosmoResponse* internal_default_instance() {
    return reinterpret_cast<const CosmoResponse*>(
               &_CosmoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CosmoResponse* other);
  friend void swap(CosmoResponse& a, CosmoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CosmoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CosmoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CosmoResponse& from);
  void MergeFrom(const CosmoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CosmoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cosmoefir.pb.Document documents = 1;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 1;
  const ::cosmoefir::pb::Document& documents(int index) const;
  ::cosmoefir::pb::Document* mutable_documents(int index);
  ::cosmoefir::pb::Document* add_documents();
  ::google::protobuf::RepeatedPtrField< ::cosmoefir::pb::Document >*
      mutable_documents();
  const ::google::protobuf::RepeatedPtrField< ::cosmoefir::pb::Document >&
      documents() const;

  // repeated uint32 channels = 4;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 4;
  ::google::protobuf::uint32 channels(int index) const;
  void set_channels(int index, ::google::protobuf::uint32 value);
  void add_channels(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // bytes compact_user_meta_info = 3;
  void clear_compact_user_meta_info();
  static const int kCompactUserMetaInfoFieldNumber = 3;
  const ::std::string& compact_user_meta_info() const;
  void set_compact_user_meta_info(const ::std::string& value);
  #if LANG_CXX11
  void set_compact_user_meta_info(::std::string&& value);
  #endif
  void set_compact_user_meta_info(const char* value);
  void set_compact_user_meta_info(const void* value, size_t size);
  ::std::string* mutable_compact_user_meta_info();
  ::std::string* release_compact_user_meta_info();
  void set_allocated_compact_user_meta_info(::std::string* compact_user_meta_info);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.CosmoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cosmoefir::pb::Document > documents_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  mutable int _channels_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr compact_user_meta_info_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DocumentIdList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cosmoefir.pb.DocumentIdList) */ {
 public:
  DocumentIdList();
  virtual ~DocumentIdList();

  DocumentIdList(const DocumentIdList& from);

  inline DocumentIdList& operator=(const DocumentIdList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DocumentIdList(DocumentIdList&& from) noexcept
    : DocumentIdList() {
    *this = ::std::move(from);
  }

  inline DocumentIdList& operator=(DocumentIdList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DocumentIdList& default_instance();

  static inline const DocumentIdList* internal_default_instance() {
    return reinterpret_cast<const DocumentIdList*>(
               &_DocumentIdList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(DocumentIdList* other);
  friend void swap(DocumentIdList& a, DocumentIdList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentIdList* New() const PROTOBUF_FINAL { return New(NULL); }

  DocumentIdList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DocumentIdList& from);
  void MergeFrom(const DocumentIdList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DocumentIdList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  ::google::protobuf::int64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::int64 value);
  void add_ids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ids();

  // uint32 ids_limit = 2;
  void clear_ids_limit();
  static const int kIdsLimitFieldNumber = 2;
  ::google::protobuf::uint32 ids_limit() const;
  void set_ids_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cosmoefir.pb.DocumentIdList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ids_;
  mutable int _ids_cached_byte_size_;
  ::google::protobuf::uint32 ids_limit_;
  mutable int _cached_size_;
  friend struct protobuf_cosmo_5fefir_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserSimpleMetaInfo

// .google.protobuf.UInt64Value email_hash = 1;
inline bool UserSimpleMetaInfo::has_email_hash() const {
  return this != internal_default_instance() && email_hash_ != NULL;
}
inline void UserSimpleMetaInfo::clear_email_hash() {
  if (GetArenaNoVirtual() == NULL && email_hash_ != NULL) delete email_hash_;
  email_hash_ = NULL;
}
inline const ::google::protobuf::UInt64Value& UserSimpleMetaInfo::email_hash() const {
  const ::google::protobuf::UInt64Value* p = email_hash_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserSimpleMetaInfo.email_hash)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt64Value*>(
      &::google::protobuf::_UInt64Value_default_instance_);
}
inline ::google::protobuf::UInt64Value* UserSimpleMetaInfo::mutable_email_hash() {
  
  if (email_hash_ == NULL) {
    email_hash_ = new ::google::protobuf::UInt64Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserSimpleMetaInfo.email_hash)
  return email_hash_;
}
inline ::google::protobuf::UInt64Value* UserSimpleMetaInfo::release_email_hash() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserSimpleMetaInfo.email_hash)
  
  ::google::protobuf::UInt64Value* temp = email_hash_;
  email_hash_ = NULL;
  return temp;
}
inline void UserSimpleMetaInfo::set_allocated_email_hash(::google::protobuf::UInt64Value* email_hash) {
  delete email_hash_;
  if (email_hash != NULL && email_hash->GetArena() != NULL) {
    ::google::protobuf::UInt64Value* new_email_hash = new ::google::protobuf::UInt64Value;
    new_email_hash->CopyFrom(*email_hash);
    email_hash = new_email_hash;
  }
  email_hash_ = email_hash;
  if (email_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserSimpleMetaInfo.email_hash)
}

// .google.protobuf.UInt64Value vid = 2;
inline bool UserSimpleMetaInfo::has_vid() const {
  return this != internal_default_instance() && vid_ != NULL;
}
inline void UserSimpleMetaInfo::clear_vid() {
  if (GetArenaNoVirtual() == NULL && vid_ != NULL) delete vid_;
  vid_ = NULL;
}
inline const ::google::protobuf::UInt64Value& UserSimpleMetaInfo::vid() const {
  const ::google::protobuf::UInt64Value* p = vid_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserSimpleMetaInfo.vid)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt64Value*>(
      &::google::protobuf::_UInt64Value_default_instance_);
}
inline ::google::protobuf::UInt64Value* UserSimpleMetaInfo::mutable_vid() {
  
  if (vid_ == NULL) {
    vid_ = new ::google::protobuf::UInt64Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserSimpleMetaInfo.vid)
  return vid_;
}
inline ::google::protobuf::UInt64Value* UserSimpleMetaInfo::release_vid() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserSimpleMetaInfo.vid)
  
  ::google::protobuf::UInt64Value* temp = vid_;
  vid_ = NULL;
  return temp;
}
inline void UserSimpleMetaInfo::set_allocated_vid(::google::protobuf::UInt64Value* vid) {
  delete vid_;
  if (vid != NULL && vid->GetArena() != NULL) {
    ::google::protobuf::UInt64Value* new_vid = new ::google::protobuf::UInt64Value;
    new_vid->CopyFrom(*vid);
    vid = new_vid;
  }
  vid_ = vid;
  if (vid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserSimpleMetaInfo.vid)
}

// string partner_user_id = 3;
inline void UserSimpleMetaInfo::clear_partner_user_id() {
  partner_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserSimpleMetaInfo::partner_user_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
  return partner_user_id_.GetNoArena();
}
inline void UserSimpleMetaInfo::set_partner_user_id(const ::std::string& value) {
  
  partner_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
}
#if LANG_CXX11
inline void UserSimpleMetaInfo::set_partner_user_id(::std::string&& value) {
  
  partner_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
}
#endif
inline void UserSimpleMetaInfo::set_partner_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  partner_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
}
inline void UserSimpleMetaInfo::set_partner_user_id(const char* value, size_t size) {
  
  partner_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
}
inline ::std::string* UserSimpleMetaInfo::mutable_partner_user_id() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
  return partner_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserSimpleMetaInfo::release_partner_user_id() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
  
  return partner_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserSimpleMetaInfo::set_allocated_partner_user_id(::std::string* partner_user_id) {
  if (partner_user_id != NULL) {
    
  } else {
    
  }
  partner_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partner_user_id);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserSimpleMetaInfo.partner_user_id)
}

// -------------------------------------------------------------------

// UserMetaInfo_RetrieverMetaInfo

// .google.protobuf.UInt32Value video_count = 1;
inline bool UserMetaInfo_RetrieverMetaInfo::has_video_count() const {
  return this != internal_default_instance() && video_count_ != NULL;
}
inline void UserMetaInfo_RetrieverMetaInfo::clear_video_count() {
  if (GetArenaNoVirtual() == NULL && video_count_ != NULL) delete video_count_;
  video_count_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::video_count() const {
  const ::google::protobuf::UInt32Value* p = video_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.video_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_video_count() {
  
  if (video_count_ == NULL) {
    video_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.video_count)
  return video_count_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_video_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.video_count)
  
  ::google::protobuf::UInt32Value* temp = video_count_;
  video_count_ = NULL;
  return temp;
}
inline void UserMetaInfo_RetrieverMetaInfo::set_allocated_video_count(::google::protobuf::UInt32Value* video_count) {
  delete video_count_;
  if (video_count != NULL && video_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_video_count = new ::google::protobuf::UInt32Value;
    new_video_count->CopyFrom(*video_count);
    video_count = new_video_count;
  }
  video_count_ = video_count;
  if (video_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.video_count)
}

// .google.protobuf.UInt32Value music_count = 2;
inline bool UserMetaInfo_RetrieverMetaInfo::has_music_count() const {
  return this != internal_default_instance() && music_count_ != NULL;
}
inline void UserMetaInfo_RetrieverMetaInfo::clear_music_count() {
  if (GetArenaNoVirtual() == NULL && music_count_ != NULL) delete music_count_;
  music_count_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::music_count() const {
  const ::google::protobuf::UInt32Value* p = music_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.music_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_music_count() {
  
  if (music_count_ == NULL) {
    music_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.music_count)
  return music_count_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_music_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.music_count)
  
  ::google::protobuf::UInt32Value* temp = music_count_;
  music_count_ = NULL;
  return temp;
}
inline void UserMetaInfo_RetrieverMetaInfo::set_allocated_music_count(::google::protobuf::UInt32Value* music_count) {
  delete music_count_;
  if (music_count != NULL && music_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_music_count = new ::google::protobuf::UInt32Value;
    new_music_count->CopyFrom(*music_count);
    music_count = new_music_count;
  }
  music_count_ = music_count;
  if (music_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.music_count)
}

// .google.protobuf.UInt32Value youtube_count = 3;
inline bool UserMetaInfo_RetrieverMetaInfo::has_youtube_count() const {
  return this != internal_default_instance() && youtube_count_ != NULL;
}
inline void UserMetaInfo_RetrieverMetaInfo::clear_youtube_count() {
  if (GetArenaNoVirtual() == NULL && youtube_count_ != NULL) delete youtube_count_;
  youtube_count_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::youtube_count() const {
  const ::google::protobuf::UInt32Value* p = youtube_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.youtube_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_youtube_count() {
  
  if (youtube_count_ == NULL) {
    youtube_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.youtube_count)
  return youtube_count_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_youtube_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.youtube_count)
  
  ::google::protobuf::UInt32Value* temp = youtube_count_;
  youtube_count_ = NULL;
  return temp;
}
inline void UserMetaInfo_RetrieverMetaInfo::set_allocated_youtube_count(::google::protobuf::UInt32Value* youtube_count) {
  delete youtube_count_;
  if (youtube_count != NULL && youtube_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_youtube_count = new ::google::protobuf::UInt32Value;
    new_youtube_count->CopyFrom(*youtube_count);
    youtube_count = new_youtube_count;
  }
  youtube_count_ = youtube_count;
  if (youtube_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.youtube_count)
}

// .google.protobuf.UInt32Value news_count = 4;
inline bool UserMetaInfo_RetrieverMetaInfo::has_news_count() const {
  return this != internal_default_instance() && news_count_ != NULL;
}
inline void UserMetaInfo_RetrieverMetaInfo::clear_news_count() {
  if (GetArenaNoVirtual() == NULL && news_count_ != NULL) delete news_count_;
  news_count_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::news_count() const {
  const ::google::protobuf::UInt32Value* p = news_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.news_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_news_count() {
  
  if (news_count_ == NULL) {
    news_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.news_count)
  return news_count_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_news_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.news_count)
  
  ::google::protobuf::UInt32Value* temp = news_count_;
  news_count_ = NULL;
  return temp;
}
inline void UserMetaInfo_RetrieverMetaInfo::set_allocated_news_count(::google::protobuf::UInt32Value* news_count) {
  delete news_count_;
  if (news_count != NULL && news_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_news_count = new ::google::protobuf::UInt32Value;
    new_news_count->CopyFrom(*news_count);
    news_count = new_news_count;
  }
  news_count_ = news_count;
  if (news_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.news_count)
}

// .google.protobuf.UInt32Value kids_count = 5;
inline bool UserMetaInfo_RetrieverMetaInfo::has_kids_count() const {
  return this != internal_default_instance() && kids_count_ != NULL;
}
inline void UserMetaInfo_RetrieverMetaInfo::clear_kids_count() {
  if (GetArenaNoVirtual() == NULL && kids_count_ != NULL) delete kids_count_;
  kids_count_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::kids_count() const {
  const ::google::protobuf::UInt32Value* p = kids_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.kids_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_kids_count() {
  
  if (kids_count_ == NULL) {
    kids_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.kids_count)
  return kids_count_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_kids_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.kids_count)
  
  ::google::protobuf::UInt32Value* temp = kids_count_;
  kids_count_ = NULL;
  return temp;
}
inline void UserMetaInfo_RetrieverMetaInfo::set_allocated_kids_count(::google::protobuf::UInt32Value* kids_count) {
  delete kids_count_;
  if (kids_count != NULL && kids_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_kids_count = new ::google::protobuf::UInt32Value;
    new_kids_count->CopyFrom(*kids_count);
    kids_count = new_kids_count;
  }
  kids_count_ = kids_count;
  if (kids_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.kids_count)
}

// .google.protobuf.UInt32Value trailers_count = 6;
inline bool UserMetaInfo_RetrieverMetaInfo::has_trailers_count() const {
  return this != internal_default_instance() && trailers_count_ != NULL;
}
inline void UserMetaInfo_RetrieverMetaInfo::clear_trailers_count() {
  if (GetArenaNoVirtual() == NULL && trailers_count_ != NULL) delete trailers_count_;
  trailers_count_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::trailers_count() const {
  const ::google::protobuf::UInt32Value* p = trailers_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.trailers_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_trailers_count() {
  
  if (trailers_count_ == NULL) {
    trailers_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.trailers_count)
  return trailers_count_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_trailers_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.trailers_count)
  
  ::google::protobuf::UInt32Value* temp = trailers_count_;
  trailers_count_ = NULL;
  return temp;
}
inline void UserMetaInfo_RetrieverMetaInfo::set_allocated_trailers_count(::google::protobuf::UInt32Value* trailers_count) {
  delete trailers_count_;
  if (trailers_count != NULL && trailers_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_trailers_count = new ::google::protobuf::UInt32Value;
    new_trailers_count->CopyFrom(*trailers_count);
    trailers_count = new_trailers_count;
  }
  trailers_count_ = trailers_count;
  if (trailers_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.trailers_count)
}

// .google.protobuf.UInt32Value sport_count = 7;
inline bool UserMetaInfo_RetrieverMetaInfo::has_sport_count() const {
  return this != internal_default_instance() && sport_count_ != NULL;
}
inline void UserMetaInfo_RetrieverMetaInfo::clear_sport_count() {
  if (GetArenaNoVirtual() == NULL && sport_count_ != NULL) delete sport_count_;
  sport_count_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::sport_count() const {
  const ::google::protobuf::UInt32Value* p = sport_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.sport_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_sport_count() {
  
  if (sport_count_ == NULL) {
    sport_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.sport_count)
  return sport_count_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_sport_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.sport_count)
  
  ::google::protobuf::UInt32Value* temp = sport_count_;
  sport_count_ = NULL;
  return temp;
}
inline void UserMetaInfo_RetrieverMetaInfo::set_allocated_sport_count(::google::protobuf::UInt32Value* sport_count) {
  delete sport_count_;
  if (sport_count != NULL && sport_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_sport_count = new ::google::protobuf::UInt32Value;
    new_sport_count->CopyFrom(*sport_count);
    sport_count = new_sport_count;
  }
  sport_count_ = sport_count;
  if (sport_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.sport_count)
}

// .google.protobuf.UInt32Value podcasts_count = 8;
inline bool UserMetaInfo_RetrieverMetaInfo::has_podcasts_count() const {
  return this != internal_default_instance() && podcasts_count_ != NULL;
}
inline void UserMetaInfo_RetrieverMetaInfo::clear_podcasts_count() {
  if (GetArenaNoVirtual() == NULL && podcasts_count_ != NULL) delete podcasts_count_;
  podcasts_count_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo_RetrieverMetaInfo::podcasts_count() const {
  const ::google::protobuf::UInt32Value* p = podcasts_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.podcasts_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::mutable_podcasts_count() {
  
  if (podcasts_count_ == NULL) {
    podcasts_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.podcasts_count)
  return podcasts_count_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo_RetrieverMetaInfo::release_podcasts_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.podcasts_count)
  
  ::google::protobuf::UInt32Value* temp = podcasts_count_;
  podcasts_count_ = NULL;
  return temp;
}
inline void UserMetaInfo_RetrieverMetaInfo::set_allocated_podcasts_count(::google::protobuf::UInt32Value* podcasts_count) {
  delete podcasts_count_;
  if (podcasts_count != NULL && podcasts_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_podcasts_count = new ::google::protobuf::UInt32Value;
    new_podcasts_count->CopyFrom(*podcasts_count);
    podcasts_count = new_podcasts_count;
  }
  podcasts_count_ = podcasts_count;
  if (podcasts_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.podcasts_count)
}

// .google.protobuf.UInt64Value relevant_documents_count = 50;
inline bool UserMetaInfo_RetrieverMetaInfo::has_relevant_documents_count() const {
  return this != internal_default_instance() && relevant_documents_count_ != NULL;
}
inline void UserMetaInfo_RetrieverMetaInfo::clear_relevant_documents_count() {
  if (GetArenaNoVirtual() == NULL && relevant_documents_count_ != NULL) delete relevant_documents_count_;
  relevant_documents_count_ = NULL;
}
inline const ::google::protobuf::UInt64Value& UserMetaInfo_RetrieverMetaInfo::relevant_documents_count() const {
  const ::google::protobuf::UInt64Value* p = relevant_documents_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.relevant_documents_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt64Value*>(
      &::google::protobuf::_UInt64Value_default_instance_);
}
inline ::google::protobuf::UInt64Value* UserMetaInfo_RetrieverMetaInfo::mutable_relevant_documents_count() {
  
  if (relevant_documents_count_ == NULL) {
    relevant_documents_count_ = new ::google::protobuf::UInt64Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.relevant_documents_count)
  return relevant_documents_count_;
}
inline ::google::protobuf::UInt64Value* UserMetaInfo_RetrieverMetaInfo::release_relevant_documents_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.relevant_documents_count)
  
  ::google::protobuf::UInt64Value* temp = relevant_documents_count_;
  relevant_documents_count_ = NULL;
  return temp;
}
inline void UserMetaInfo_RetrieverMetaInfo::set_allocated_relevant_documents_count(::google::protobuf::UInt64Value* relevant_documents_count) {
  delete relevant_documents_count_;
  if (relevant_documents_count != NULL && relevant_documents_count->GetArena() != NULL) {
    ::google::protobuf::UInt64Value* new_relevant_documents_count = new ::google::protobuf::UInt64Value;
    new_relevant_documents_count->CopyFrom(*relevant_documents_count);
    relevant_documents_count = new_relevant_documents_count;
  }
  relevant_documents_count_ = relevant_documents_count;
  if (relevant_documents_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo.relevant_documents_count)
}

// -------------------------------------------------------------------

// UserMetaInfo

// .cosmoefir.pb.Gender gender = 1;
inline bool UserMetaInfo::has_gender() const {
  return optional_gender_case() == kGender;
}
inline void UserMetaInfo::set_has_gender() {
  _oneof_case_[0] = kGender;
}
inline void UserMetaInfo::clear_gender() {
  if (has_gender()) {
    optional_gender_.gender_ = 0;
    clear_has_optional_gender();
  }
}
inline ::cosmoefir::pb::Gender UserMetaInfo::gender() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.gender)
  if (has_gender()) {
    return static_cast< ::cosmoefir::pb::Gender >(optional_gender_.gender_);
  }
  return static_cast< ::cosmoefir::pb::Gender >(0);
}
inline void UserMetaInfo::set_gender(::cosmoefir::pb::Gender value) {
  if (!has_gender()) {
    clear_optional_gender();
    set_has_gender();
  }
  optional_gender_.gender_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.UserMetaInfo.gender)
}

// .google.protobuf.UInt32Value age = 2;
inline bool UserMetaInfo::has_age() const {
  return this != internal_default_instance() && age_ != NULL;
}
inline void UserMetaInfo::clear_age() {
  if (GetArenaNoVirtual() == NULL && age_ != NULL) delete age_;
  age_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo::age() const {
  const ::google::protobuf::UInt32Value* p = age_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.age)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo::mutable_age() {
  
  if (age_ == NULL) {
    age_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.age)
  return age_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo::release_age() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.age)
  
  ::google::protobuf::UInt32Value* temp = age_;
  age_ = NULL;
  return temp;
}
inline void UserMetaInfo::set_allocated_age(::google::protobuf::UInt32Value* age) {
  delete age_;
  if (age != NULL && age->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_age = new ::google::protobuf::UInt32Value;
    new_age->CopyFrom(*age);
    age = new_age;
  }
  age_ = age;
  if (age) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.age)
}

// .google.protobuf.UInt32Value watched_videos_count = 3;
inline bool UserMetaInfo::has_watched_videos_count() const {
  return this != internal_default_instance() && watched_videos_count_ != NULL;
}
inline void UserMetaInfo::clear_watched_videos_count() {
  if (GetArenaNoVirtual() == NULL && watched_videos_count_ != NULL) delete watched_videos_count_;
  watched_videos_count_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo::watched_videos_count() const {
  const ::google::protobuf::UInt32Value* p = watched_videos_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.watched_videos_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo::mutable_watched_videos_count() {
  
  if (watched_videos_count_ == NULL) {
    watched_videos_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.watched_videos_count)
  return watched_videos_count_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo::release_watched_videos_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.watched_videos_count)
  
  ::google::protobuf::UInt32Value* temp = watched_videos_count_;
  watched_videos_count_ = NULL;
  return temp;
}
inline void UserMetaInfo::set_allocated_watched_videos_count(::google::protobuf::UInt32Value* watched_videos_count) {
  delete watched_videos_count_;
  if (watched_videos_count != NULL && watched_videos_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_watched_videos_count = new ::google::protobuf::UInt32Value;
    new_watched_videos_count->CopyFrom(*watched_videos_count);
    watched_videos_count = new_watched_videos_count;
  }
  watched_videos_count_ = watched_videos_count;
  if (watched_videos_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.watched_videos_count)
}

// .google.protobuf.UInt32Value site_count = 4;
inline bool UserMetaInfo::has_site_count() const {
  return this != internal_default_instance() && site_count_ != NULL;
}
inline void UserMetaInfo::clear_site_count() {
  if (GetArenaNoVirtual() == NULL && site_count_ != NULL) delete site_count_;
  site_count_ = NULL;
}
inline const ::google::protobuf::UInt32Value& UserMetaInfo::site_count() const {
  const ::google::protobuf::UInt32Value* p = site_count_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.site_count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* UserMetaInfo::mutable_site_count() {
  
  if (site_count_ == NULL) {
    site_count_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.site_count)
  return site_count_;
}
inline ::google::protobuf::UInt32Value* UserMetaInfo::release_site_count() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.site_count)
  
  ::google::protobuf::UInt32Value* temp = site_count_;
  site_count_ = NULL;
  return temp;
}
inline void UserMetaInfo::set_allocated_site_count(::google::protobuf::UInt32Value* site_count) {
  delete site_count_;
  if (site_count != NULL && site_count->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_site_count = new ::google::protobuf::UInt32Value;
    new_site_count->CopyFrom(*site_count);
    site_count = new_site_count;
  }
  site_count_ = site_count;
  if (site_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.site_count)
}

// repeated uint64 sources = 5;
inline int UserMetaInfo::sources_size() const {
  return sources_.size();
}
inline void UserMetaInfo::clear_sources() {
  sources_.Clear();
}
inline ::google::protobuf::uint64 UserMetaInfo::sources(int index) const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.sources)
  return sources_.Get(index);
}
inline void UserMetaInfo::set_sources(int index, ::google::protobuf::uint64 value) {
  sources_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.UserMetaInfo.sources)
}
inline void UserMetaInfo::add_sources(::google::protobuf::uint64 value) {
  sources_.Add(value);
  // @@protoc_insertion_point(field_add:cosmoefir.pb.UserMetaInfo.sources)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserMetaInfo::sources() const {
  // @@protoc_insertion_point(field_list:cosmoefir.pb.UserMetaInfo.sources)
  return sources_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserMetaInfo::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:cosmoefir.pb.UserMetaInfo.sources)
  return &sources_;
}

// .cosmoefir.pb.UserMetaInfo.RetrieverMetaInfo retriever = 10;
inline bool UserMetaInfo::has_retriever() const {
  return this != internal_default_instance() && retriever_ != NULL;
}
inline void UserMetaInfo::clear_retriever() {
  if (GetArenaNoVirtual() == NULL && retriever_ != NULL) delete retriever_;
  retriever_ = NULL;
}
inline const ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo& UserMetaInfo::retriever() const {
  const ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* p = retriever_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.UserMetaInfo.retriever)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo*>(
      &::cosmoefir::pb::_UserMetaInfo_RetrieverMetaInfo_default_instance_);
}
inline ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* UserMetaInfo::mutable_retriever() {
  
  if (retriever_ == NULL) {
    retriever_ = new ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.UserMetaInfo.retriever)
  return retriever_;
}
inline ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* UserMetaInfo::release_retriever() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.UserMetaInfo.retriever)
  
  ::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* temp = retriever_;
  retriever_ = NULL;
  return temp;
}
inline void UserMetaInfo::set_allocated_retriever(::cosmoefir::pb::UserMetaInfo_RetrieverMetaInfo* retriever) {
  delete retriever_;
  retriever_ = retriever;
  if (retriever) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.UserMetaInfo.retriever)
}

inline bool UserMetaInfo::has_optional_gender() const {
  return optional_gender_case() != OPTIONAL_GENDER_NOT_SET;
}
inline void UserMetaInfo::clear_has_optional_gender() {
  _oneof_case_[0] = OPTIONAL_GENDER_NOT_SET;
}
inline UserMetaInfo::OptionalGenderCase UserMetaInfo::optional_gender_case() const {
  return UserMetaInfo::OptionalGenderCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DocumentMetaInfo_OriginOfRecommendation

// .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation._ value = 1;
inline void DocumentMetaInfo_OriginOfRecommendation::clear_value() {
  value_ = 0;
}
inline ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__ DocumentMetaInfo_OriginOfRecommendation::value() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation.value)
  return static_cast< ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__ >(value_);
}
inline void DocumentMetaInfo_OriginOfRecommendation::set_value(::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__ value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation.value)
}

// -------------------------------------------------------------------

// DocumentMetaInfo_RetrieverKind

// .cosmoefir.pb.DocumentMetaInfo.RetrieverKind._ value = 1;
inline void DocumentMetaInfo_RetrieverKind::clear_value() {
  value_ = 0;
}
inline ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__ DocumentMetaInfo_RetrieverKind::value() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.RetrieverKind.value)
  return static_cast< ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__ >(value_);
}
inline void DocumentMetaInfo_RetrieverKind::set_value(::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__ value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentMetaInfo.RetrieverKind.value)
}

// -------------------------------------------------------------------

// DocumentMetaInfo

// .cosmoefir.pb.DocumentMetaInfo.OriginOfRecommendation origin = 1;
inline bool DocumentMetaInfo::has_origin() const {
  return this != internal_default_instance() && origin_ != NULL;
}
inline void DocumentMetaInfo::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) delete origin_;
  origin_ = NULL;
}
inline const ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation& DocumentMetaInfo::origin() const {
  const ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* p = origin_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.origin)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation*>(
      &::cosmoefir::pb::_DocumentMetaInfo_OriginOfRecommendation_default_instance_);
}
inline ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* DocumentMetaInfo::mutable_origin() {
  
  if (origin_ == NULL) {
    origin_ = new ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.DocumentMetaInfo.origin)
  return origin_;
}
inline ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* DocumentMetaInfo::release_origin() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.DocumentMetaInfo.origin)
  
  ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void DocumentMetaInfo::set_allocated_origin(::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.DocumentMetaInfo.origin)
}

// int64 origin_id = 2;
inline void DocumentMetaInfo::clear_origin_id() {
  origin_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DocumentMetaInfo::origin_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.origin_id)
  return origin_id_;
}
inline void DocumentMetaInfo::set_origin_id(::google::protobuf::int64 value) {
  
  origin_id_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentMetaInfo.origin_id)
}

// .cosmoefir.pb.DocumentMetaInfo.RetrieverKind retriever_kind = 3;
inline bool DocumentMetaInfo::has_retriever_kind() const {
  return this != internal_default_instance() && retriever_kind_ != NULL;
}
inline void DocumentMetaInfo::clear_retriever_kind() {
  if (GetArenaNoVirtual() == NULL && retriever_kind_ != NULL) delete retriever_kind_;
  retriever_kind_ = NULL;
}
inline const ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind& DocumentMetaInfo::retriever_kind() const {
  const ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* p = retriever_kind_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.retriever_kind)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind*>(
      &::cosmoefir::pb::_DocumentMetaInfo_RetrieverKind_default_instance_);
}
inline ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* DocumentMetaInfo::mutable_retriever_kind() {
  
  if (retriever_kind_ == NULL) {
    retriever_kind_ = new ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.DocumentMetaInfo.retriever_kind)
  return retriever_kind_;
}
inline ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* DocumentMetaInfo::release_retriever_kind() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.DocumentMetaInfo.retriever_kind)
  
  ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* temp = retriever_kind_;
  retriever_kind_ = NULL;
  return temp;
}
inline void DocumentMetaInfo::set_allocated_retriever_kind(::cosmoefir::pb::DocumentMetaInfo_RetrieverKind* retriever_kind) {
  delete retriever_kind_;
  retriever_kind_ = retriever_kind;
  if (retriever_kind) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.DocumentMetaInfo.retriever_kind)
}

// string category = 4;
inline void DocumentMetaInfo::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DocumentMetaInfo::category() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.category)
  return category_.GetNoArena();
}
inline void DocumentMetaInfo::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentMetaInfo.category)
}
#if LANG_CXX11
inline void DocumentMetaInfo::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.DocumentMetaInfo.category)
}
#endif
inline void DocumentMetaInfo::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.DocumentMetaInfo.category)
}
inline void DocumentMetaInfo::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.DocumentMetaInfo.category)
}
inline ::std::string* DocumentMetaInfo::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.DocumentMetaInfo.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DocumentMetaInfo::release_category() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.DocumentMetaInfo.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentMetaInfo::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.DocumentMetaInfo.category)
}

// repeated uint64 tags = 5;
inline int DocumentMetaInfo::tags_size() const {
  return tags_.size();
}
inline void DocumentMetaInfo::clear_tags() {
  tags_.Clear();
}
inline ::google::protobuf::uint64 DocumentMetaInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentMetaInfo.tags)
  return tags_.Get(index);
}
inline void DocumentMetaInfo::set_tags(int index, ::google::protobuf::uint64 value) {
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentMetaInfo.tags)
}
inline void DocumentMetaInfo::add_tags(::google::protobuf::uint64 value) {
  tags_.Add(value);
  // @@protoc_insertion_point(field_add:cosmoefir.pb.DocumentMetaInfo.tags)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DocumentMetaInfo::tags() const {
  // @@protoc_insertion_point(field_list:cosmoefir.pb.DocumentMetaInfo.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DocumentMetaInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:cosmoefir.pb.DocumentMetaInfo.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// PixelMetaInfo

// bytes document = 1;
inline void PixelMetaInfo::clear_document() {
  document_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PixelMetaInfo::document() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.PixelMetaInfo.document)
  return document_.GetNoArena();
}
inline void PixelMetaInfo::set_document(const ::std::string& value) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.PixelMetaInfo.document)
}
#if LANG_CXX11
inline void PixelMetaInfo::set_document(::std::string&& value) {
  
  document_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.PixelMetaInfo.document)
}
#endif
inline void PixelMetaInfo::set_document(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.PixelMetaInfo.document)
}
inline void PixelMetaInfo::set_document(const void* value, size_t size) {
  
  document_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.PixelMetaInfo.document)
}
inline ::std::string* PixelMetaInfo::mutable_document() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.PixelMetaInfo.document)
  return document_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PixelMetaInfo::release_document() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.PixelMetaInfo.document)
  
  return document_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PixelMetaInfo::set_allocated_document(::std::string* document) {
  if (document != NULL) {
    
  } else {
    
  }
  document_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), document);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.PixelMetaInfo.document)
}

// bytes user_common = 2;
inline void PixelMetaInfo::clear_user_common() {
  user_common_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PixelMetaInfo::user_common() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.PixelMetaInfo.user_common)
  return user_common_.GetNoArena();
}
inline void PixelMetaInfo::set_user_common(const ::std::string& value) {
  
  user_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.PixelMetaInfo.user_common)
}
#if LANG_CXX11
inline void PixelMetaInfo::set_user_common(::std::string&& value) {
  
  user_common_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.PixelMetaInfo.user_common)
}
#endif
inline void PixelMetaInfo::set_user_common(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.PixelMetaInfo.user_common)
}
inline void PixelMetaInfo::set_user_common(const void* value, size_t size) {
  
  user_common_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.PixelMetaInfo.user_common)
}
inline ::std::string* PixelMetaInfo::mutable_user_common() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.PixelMetaInfo.user_common)
  return user_common_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PixelMetaInfo::release_user_common() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.PixelMetaInfo.user_common)
  
  return user_common_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PixelMetaInfo::set_allocated_user_common(::std::string* user_common) {
  if (user_common != NULL) {
    
  } else {
    
  }
  user_common_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_common);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.PixelMetaInfo.user_common)
}

// bytes user_simple = 3;
inline void PixelMetaInfo::clear_user_simple() {
  user_simple_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PixelMetaInfo::user_simple() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.PixelMetaInfo.user_simple)
  return user_simple_.GetNoArena();
}
inline void PixelMetaInfo::set_user_simple(const ::std::string& value) {
  
  user_simple_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.PixelMetaInfo.user_simple)
}
#if LANG_CXX11
inline void PixelMetaInfo::set_user_simple(::std::string&& value) {
  
  user_simple_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.PixelMetaInfo.user_simple)
}
#endif
inline void PixelMetaInfo::set_user_simple(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_simple_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.PixelMetaInfo.user_simple)
}
inline void PixelMetaInfo::set_user_simple(const void* value, size_t size) {
  
  user_simple_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.PixelMetaInfo.user_simple)
}
inline ::std::string* PixelMetaInfo::mutable_user_simple() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.PixelMetaInfo.user_simple)
  return user_simple_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PixelMetaInfo::release_user_simple() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.PixelMetaInfo.user_simple)
  
  return user_simple_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PixelMetaInfo::set_allocated_user_simple(::std::string* user_simple) {
  if (user_simple != NULL) {
    
  } else {
    
  }
  user_simple_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_simple);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.PixelMetaInfo.user_simple)
}

// -------------------------------------------------------------------

// VideoInfo_Player

// string type = 1;
inline void VideoInfo_Player::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo_Player::type() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Player.type)
  return type_.GetNoArena();
}
inline void VideoInfo_Player::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Player.type)
}
#if LANG_CXX11
inline void VideoInfo_Player::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.Player.type)
}
#endif
inline void VideoInfo_Player::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.Player.type)
}
inline void VideoInfo_Player::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.Player.type)
}
inline ::std::string* VideoInfo_Player::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.Player.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo_Player::release_type() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.Player.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo_Player::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.Player.type)
}

// string url = 2;
inline void VideoInfo_Player::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo_Player::url() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Player.url)
  return url_.GetNoArena();
}
inline void VideoInfo_Player::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Player.url)
}
#if LANG_CXX11
inline void VideoInfo_Player::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.Player.url)
}
#endif
inline void VideoInfo_Player::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.Player.url)
}
inline void VideoInfo_Player::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.Player.url)
}
inline ::std::string* VideoInfo_Player::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.Player.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo_Player::release_url() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.Player.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo_Player::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.Player.url)
}

// uint32 width = 3;
inline void VideoInfo_Player::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 VideoInfo_Player::width() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Player.width)
  return width_;
}
inline void VideoInfo_Player::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Player.width)
}

// uint32 height = 4;
inline void VideoInfo_Player::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 VideoInfo_Player::height() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Player.height)
  return height_;
}
inline void VideoInfo_Player::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Player.height)
}

// -------------------------------------------------------------------

// VideoInfo_Preview

// string url = 1;
inline void VideoInfo_Preview::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo_Preview::url() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Preview.url)
  return url_.GetNoArena();
}
inline void VideoInfo_Preview::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Preview.url)
}
#if LANG_CXX11
inline void VideoInfo_Preview::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.Preview.url)
}
#endif
inline void VideoInfo_Preview::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.Preview.url)
}
inline void VideoInfo_Preview::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.Preview.url)
}
inline ::std::string* VideoInfo_Preview::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.Preview.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo_Preview::release_url() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.Preview.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo_Preview::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.Preview.url)
}

// string local_url = 2;
inline void VideoInfo_Preview::clear_local_url() {
  local_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo_Preview::local_url() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Preview.local_url)
  return local_url_.GetNoArena();
}
inline void VideoInfo_Preview::set_local_url(const ::std::string& value) {
  
  local_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Preview.local_url)
}
#if LANG_CXX11
inline void VideoInfo_Preview::set_local_url(::std::string&& value) {
  
  local_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.Preview.local_url)
}
#endif
inline void VideoInfo_Preview::set_local_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.Preview.local_url)
}
inline void VideoInfo_Preview::set_local_url(const char* value, size_t size) {
  
  local_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.Preview.local_url)
}
inline ::std::string* VideoInfo_Preview::mutable_local_url() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.Preview.local_url)
  return local_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo_Preview::release_local_url() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.Preview.local_url)
  
  return local_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo_Preview::set_allocated_local_url(::std::string* local_url) {
  if (local_url != NULL) {
    
  } else {
    
  }
  local_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_url);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.Preview.local_url)
}

// uint32 width = 3;
inline void VideoInfo_Preview::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 VideoInfo_Preview::width() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Preview.width)
  return width_;
}
inline void VideoInfo_Preview::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Preview.width)
}

// uint32 height = 4;
inline void VideoInfo_Preview::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 VideoInfo_Preview::height() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.Preview.height)
  return height_;
}
inline void VideoInfo_Preview::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.Preview.height)
}

// -------------------------------------------------------------------

// VideoInfo

// string url = 1;
inline void VideoInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::url() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.url)
  return url_.GetNoArena();
}
inline void VideoInfo::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.url)
}
#if LANG_CXX11
inline void VideoInfo::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.url)
}
#endif
inline void VideoInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.url)
}
inline void VideoInfo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.url)
}
inline ::std::string* VideoInfo::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_url() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.url)
}

// string id = 2;
inline void VideoInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.id)
  return id_.GetNoArena();
}
inline void VideoInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.id)
}
#if LANG_CXX11
inline void VideoInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.id)
}
#endif
inline void VideoInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.id)
}
inline void VideoInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.id)
}
inline ::std::string* VideoInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_id() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.id)
}

// string name = 3;
inline void VideoInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::name() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.name)
  return name_.GetNoArena();
}
inline void VideoInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.name)
}
#if LANG_CXX11
inline void VideoInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.name)
}
#endif
inline void VideoInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.name)
}
inline void VideoInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.name)
}
inline ::std::string* VideoInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_name() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.name)
}

// string description = 4;
inline void VideoInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::description() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.description)
  return description_.GetNoArena();
}
inline void VideoInfo::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.description)
}
#if LANG_CXX11
inline void VideoInfo::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.description)
}
#endif
inline void VideoInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.description)
}
inline void VideoInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.description)
}
inline ::std::string* VideoInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_description() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.description)
}

// uint32 duration = 5;
inline void VideoInfo::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 VideoInfo::duration() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.duration)
  return duration_;
}
inline void VideoInfo::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.duration)
}

// bool hd = 6;
inline void VideoInfo::clear_hd() {
  hd_ = false;
}
inline bool VideoInfo::hd() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.hd)
  return hd_;
}
inline void VideoInfo::set_hd(bool value) {
  
  hd_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.hd)
}

// bool full_hd = 7;
inline void VideoInfo::clear_full_hd() {
  full_hd_ = false;
}
inline bool VideoInfo::full_hd() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.full_hd)
  return full_hd_;
}
inline void VideoInfo::set_full_hd(bool value) {
  
  full_hd_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.full_hd)
}

// string sig = 8;
inline void VideoInfo::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::sig() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.sig)
  return sig_.GetNoArena();
}
inline void VideoInfo::set_sig(const ::std::string& value) {
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.sig)
}
#if LANG_CXX11
inline void VideoInfo::set_sig(::std::string&& value) {
  
  sig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.sig)
}
#endif
inline void VideoInfo::set_sig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.sig)
}
inline void VideoInfo::set_sig(const char* value, size_t size) {
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.sig)
}
inline ::std::string* VideoInfo::mutable_sig() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_sig() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.sig)
  
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    
  } else {
    
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.sig)
}

// uint32 source_id = 9;
inline void VideoInfo::clear_source_id() {
  source_id_ = 0u;
}
inline ::google::protobuf::uint32 VideoInfo::source_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.source_id)
  return source_id_;
}
inline void VideoInfo::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.source_id)
}

// string source_name = 10;
inline void VideoInfo::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoInfo::source_name() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.source_name)
  return source_name_.GetNoArena();
}
inline void VideoInfo::set_source_name(const ::std::string& value) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.source_name)
}
#if LANG_CXX11
inline void VideoInfo::set_source_name(::std::string&& value) {
  
  source_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.VideoInfo.source_name)
}
#endif
inline void VideoInfo::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.VideoInfo.source_name)
}
inline void VideoInfo::set_source_name(const char* value, size_t size) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.VideoInfo.source_name)
}
inline ::std::string* VideoInfo::mutable_source_name() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.source_name)
  return source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoInfo::release_source_name() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.source_name)
  
  return source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoInfo::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.source_name)
}

// uint64 time = 11;
inline void VideoInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VideoInfo::time() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.time)
  return time_;
}
inline void VideoInfo::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.VideoInfo.time)
}

// .cosmoefir.pb.VideoInfo.Player player = 12;
inline bool VideoInfo::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
inline void VideoInfo::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
inline const ::cosmoefir::pb::VideoInfo_Player& VideoInfo::player() const {
  const ::cosmoefir::pb::VideoInfo_Player* p = player_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.player)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::VideoInfo_Player*>(
      &::cosmoefir::pb::_VideoInfo_Player_default_instance_);
}
inline ::cosmoefir::pb::VideoInfo_Player* VideoInfo::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::cosmoefir::pb::VideoInfo_Player;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.player)
  return player_;
}
inline ::cosmoefir::pb::VideoInfo_Player* VideoInfo::release_player() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.player)
  
  ::cosmoefir::pb::VideoInfo_Player* temp = player_;
  player_ = NULL;
  return temp;
}
inline void VideoInfo::set_allocated_player(::cosmoefir::pb::VideoInfo_Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.player)
}

// .cosmoefir.pb.VideoInfo.Preview preview = 13;
inline bool VideoInfo::has_preview() const {
  return this != internal_default_instance() && preview_ != NULL;
}
inline void VideoInfo::clear_preview() {
  if (GetArenaNoVirtual() == NULL && preview_ != NULL) delete preview_;
  preview_ = NULL;
}
inline const ::cosmoefir::pb::VideoInfo_Preview& VideoInfo::preview() const {
  const ::cosmoefir::pb::VideoInfo_Preview* p = preview_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.preview)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::VideoInfo_Preview*>(
      &::cosmoefir::pb::_VideoInfo_Preview_default_instance_);
}
inline ::cosmoefir::pb::VideoInfo_Preview* VideoInfo::mutable_preview() {
  
  if (preview_ == NULL) {
    preview_ = new ::cosmoefir::pb::VideoInfo_Preview;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.preview)
  return preview_;
}
inline ::cosmoefir::pb::VideoInfo_Preview* VideoInfo::release_preview() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.preview)
  
  ::cosmoefir::pb::VideoInfo_Preview* temp = preview_;
  preview_ = NULL;
  return temp;
}
inline void VideoInfo::set_allocated_preview(::cosmoefir::pb::VideoInfo_Preview* preview) {
  delete preview_;
  preview_ = preview;
  if (preview) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.preview)
}

// .cosmoefir.pb.VideoInfo.Preview poster_preview = 14;
inline bool VideoInfo::has_poster_preview() const {
  return this != internal_default_instance() && poster_preview_ != NULL;
}
inline void VideoInfo::clear_poster_preview() {
  if (GetArenaNoVirtual() == NULL && poster_preview_ != NULL) delete poster_preview_;
  poster_preview_ = NULL;
}
inline const ::cosmoefir::pb::VideoInfo_Preview& VideoInfo::poster_preview() const {
  const ::cosmoefir::pb::VideoInfo_Preview* p = poster_preview_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.VideoInfo.poster_preview)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::VideoInfo_Preview*>(
      &::cosmoefir::pb::_VideoInfo_Preview_default_instance_);
}
inline ::cosmoefir::pb::VideoInfo_Preview* VideoInfo::mutable_poster_preview() {
  
  if (poster_preview_ == NULL) {
    poster_preview_ = new ::cosmoefir::pb::VideoInfo_Preview;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.VideoInfo.poster_preview)
  return poster_preview_;
}
inline ::cosmoefir::pb::VideoInfo_Preview* VideoInfo::release_poster_preview() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.VideoInfo.poster_preview)
  
  ::cosmoefir::pb::VideoInfo_Preview* temp = poster_preview_;
  poster_preview_ = NULL;
  return temp;
}
inline void VideoInfo::set_allocated_poster_preview(::cosmoefir::pb::VideoInfo_Preview* poster_preview) {
  delete poster_preview_;
  poster_preview_ = poster_preview;
  if (poster_preview) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.VideoInfo.poster_preview)
}

// -------------------------------------------------------------------

// Document

// int64 doc_id = 1;
inline void Document::clear_doc_id() {
  doc_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Document::doc_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.doc_id)
  return doc_id_;
}
inline void Document::set_doc_id(::google::protobuf::int64 value) {
  
  doc_id_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.Document.doc_id)
}

// float rank = 2;
inline void Document::clear_rank() {
  rank_ = 0;
}
inline float Document::rank() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.rank)
  return rank_;
}
inline void Document::set_rank(float value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.Document.rank)
}

// .google.protobuf.StringValue name = 3;
inline bool Document::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline void Document::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) delete name_;
  name_ = NULL;
}
inline const ::google::protobuf::StringValue& Document::name() const {
  const ::google::protobuf::StringValue* p = name_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* Document::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.name)
  return name_;
}
inline ::google::protobuf::StringValue* Document::release_name() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.name)
  
  ::google::protobuf::StringValue* temp = name_;
  name_ = NULL;
  return temp;
}
inline void Document::set_allocated_name(::google::protobuf::StringValue* name) {
  delete name_;
  if (name != NULL && name->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_name = new ::google::protobuf::StringValue;
    new_name->CopyFrom(*name);
    name = new_name;
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.name)
}

// .google.protobuf.StringValue category = 4;
inline bool Document::has_category() const {
  return this != internal_default_instance() && category_ != NULL;
}
inline void Document::clear_category() {
  if (GetArenaNoVirtual() == NULL && category_ != NULL) delete category_;
  category_ = NULL;
}
inline const ::google::protobuf::StringValue& Document::category() const {
  const ::google::protobuf::StringValue* p = category_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.category)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* Document::mutable_category() {
  
  if (category_ == NULL) {
    category_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.category)
  return category_;
}
inline ::google::protobuf::StringValue* Document::release_category() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.category)
  
  ::google::protobuf::StringValue* temp = category_;
  category_ = NULL;
  return temp;
}
inline void Document::set_allocated_category(::google::protobuf::StringValue* category) {
  delete category_;
  if (category != NULL && category->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_category = new ::google::protobuf::StringValue;
    new_category->CopyFrom(*category);
    category = new_category;
  }
  category_ = category;
  if (category) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.category)
}

// .google.protobuf.UInt32Value age_restrict = 5;
inline bool Document::has_age_restrict() const {
  return this != internal_default_instance() && age_restrict_ != NULL;
}
inline void Document::clear_age_restrict() {
  if (GetArenaNoVirtual() == NULL && age_restrict_ != NULL) delete age_restrict_;
  age_restrict_ = NULL;
}
inline const ::google::protobuf::UInt32Value& Document::age_restrict() const {
  const ::google::protobuf::UInt32Value* p = age_restrict_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.age_restrict)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::UInt32Value*>(
      &::google::protobuf::_UInt32Value_default_instance_);
}
inline ::google::protobuf::UInt32Value* Document::mutable_age_restrict() {
  
  if (age_restrict_ == NULL) {
    age_restrict_ = new ::google::protobuf::UInt32Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.age_restrict)
  return age_restrict_;
}
inline ::google::protobuf::UInt32Value* Document::release_age_restrict() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.age_restrict)
  
  ::google::protobuf::UInt32Value* temp = age_restrict_;
  age_restrict_ = NULL;
  return temp;
}
inline void Document::set_allocated_age_restrict(::google::protobuf::UInt32Value* age_restrict) {
  delete age_restrict_;
  if (age_restrict != NULL && age_restrict->GetArena() != NULL) {
    ::google::protobuf::UInt32Value* new_age_restrict = new ::google::protobuf::UInt32Value;
    new_age_restrict->CopyFrom(*age_restrict);
    age_restrict = new_age_restrict;
  }
  age_restrict_ = age_restrict;
  if (age_restrict) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.age_restrict)
}

// .google.protobuf.BoolValue is_published = 6;
inline bool Document::has_is_published() const {
  return this != internal_default_instance() && is_published_ != NULL;
}
inline void Document::clear_is_published() {
  if (GetArenaNoVirtual() == NULL && is_published_ != NULL) delete is_published_;
  is_published_ = NULL;
}
inline const ::google::protobuf::BoolValue& Document::is_published() const {
  const ::google::protobuf::BoolValue* p = is_published_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.is_published)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* Document::mutable_is_published() {
  
  if (is_published_ == NULL) {
    is_published_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.is_published)
  return is_published_;
}
inline ::google::protobuf::BoolValue* Document::release_is_published() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.is_published)
  
  ::google::protobuf::BoolValue* temp = is_published_;
  is_published_ = NULL;
  return temp;
}
inline void Document::set_allocated_is_published(::google::protobuf::BoolValue* is_published) {
  delete is_published_;
  if (is_published != NULL && is_published->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_is_published = new ::google::protobuf::BoolValue;
    new_is_published->CopyFrom(*is_published);
    is_published = new_is_published;
  }
  is_published_ = is_published;
  if (is_published) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.is_published)
}

// .cosmoefir.pb.VideoInfo video_info = 8;
inline bool Document::has_video_info() const {
  return this != internal_default_instance() && video_info_ != NULL;
}
inline void Document::clear_video_info() {
  if (GetArenaNoVirtual() == NULL && video_info_ != NULL) delete video_info_;
  video_info_ = NULL;
}
inline const ::cosmoefir::pb::VideoInfo& Document::video_info() const {
  const ::cosmoefir::pb::VideoInfo* p = video_info_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.video_info)
  return p != NULL ? *p : *reinterpret_cast<const ::cosmoefir::pb::VideoInfo*>(
      &::cosmoefir::pb::_VideoInfo_default_instance_);
}
inline ::cosmoefir::pb::VideoInfo* Document::mutable_video_info() {
  
  if (video_info_ == NULL) {
    video_info_ = new ::cosmoefir::pb::VideoInfo;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.video_info)
  return video_info_;
}
inline ::cosmoefir::pb::VideoInfo* Document::release_video_info() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.video_info)
  
  ::cosmoefir::pb::VideoInfo* temp = video_info_;
  video_info_ = NULL;
  return temp;
}
inline void Document::set_allocated_video_info(::cosmoefir::pb::VideoInfo* video_info) {
  delete video_info_;
  video_info_ = video_info;
  if (video_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.video_info)
}

// .google.protobuf.StringValue image_poster = 9;
inline bool Document::has_image_poster() const {
  return this != internal_default_instance() && image_poster_ != NULL;
}
inline void Document::clear_image_poster() {
  if (GetArenaNoVirtual() == NULL && image_poster_ != NULL) delete image_poster_;
  image_poster_ = NULL;
}
inline const ::google::protobuf::StringValue& Document::image_poster() const {
  const ::google::protobuf::StringValue* p = image_poster_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.image_poster)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* Document::mutable_image_poster() {
  
  if (image_poster_ == NULL) {
    image_poster_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.image_poster)
  return image_poster_;
}
inline ::google::protobuf::StringValue* Document::release_image_poster() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.image_poster)
  
  ::google::protobuf::StringValue* temp = image_poster_;
  image_poster_ = NULL;
  return temp;
}
inline void Document::set_allocated_image_poster(::google::protobuf::StringValue* image_poster) {
  delete image_poster_;
  if (image_poster != NULL && image_poster->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_image_poster = new ::google::protobuf::StringValue;
    new_image_poster->CopyFrom(*image_poster);
    image_poster = new_image_poster;
  }
  image_poster_ = image_poster;
  if (image_poster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.image_poster)
}

// .google.protobuf.StringValue preview_url = 10;
inline bool Document::has_preview_url() const {
  return this != internal_default_instance() && preview_url_ != NULL;
}
inline void Document::clear_preview_url() {
  if (GetArenaNoVirtual() == NULL && preview_url_ != NULL) delete preview_url_;
  preview_url_ = NULL;
}
inline const ::google::protobuf::StringValue& Document::preview_url() const {
  const ::google::protobuf::StringValue* p = preview_url_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.preview_url)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* Document::mutable_preview_url() {
  
  if (preview_url_ == NULL) {
    preview_url_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.preview_url)
  return preview_url_;
}
inline ::google::protobuf::StringValue* Document::release_preview_url() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.preview_url)
  
  ::google::protobuf::StringValue* temp = preview_url_;
  preview_url_ = NULL;
  return temp;
}
inline void Document::set_allocated_preview_url(::google::protobuf::StringValue* preview_url) {
  delete preview_url_;
  if (preview_url != NULL && preview_url->GetArena() != NULL) {
    ::google::protobuf::StringValue* new_preview_url = new ::google::protobuf::StringValue;
    new_preview_url->CopyFrom(*preview_url);
    preview_url = new_preview_url;
  }
  preview_url_ = preview_url;
  if (preview_url) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.preview_url)
}

// .google.protobuf.BoolValue is_series = 11;
inline bool Document::has_is_series() const {
  return this != internal_default_instance() && is_series_ != NULL;
}
inline void Document::clear_is_series() {
  if (GetArenaNoVirtual() == NULL && is_series_ != NULL) delete is_series_;
  is_series_ = NULL;
}
inline const ::google::protobuf::BoolValue& Document::is_series() const {
  const ::google::protobuf::BoolValue* p = is_series_;
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.is_series)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::BoolValue*>(
      &::google::protobuf::_BoolValue_default_instance_);
}
inline ::google::protobuf::BoolValue* Document::mutable_is_series() {
  
  if (is_series_ == NULL) {
    is_series_ = new ::google::protobuf::BoolValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.is_series)
  return is_series_;
}
inline ::google::protobuf::BoolValue* Document::release_is_series() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.is_series)
  
  ::google::protobuf::BoolValue* temp = is_series_;
  is_series_ = NULL;
  return temp;
}
inline void Document::set_allocated_is_series(::google::protobuf::BoolValue* is_series) {
  delete is_series_;
  if (is_series != NULL && is_series->GetArena() != NULL) {
    ::google::protobuf::BoolValue* new_is_series = new ::google::protobuf::BoolValue;
    new_is_series->CopyFrom(*is_series);
    is_series = new_is_series;
  }
  is_series_ = is_series;
  if (is_series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.is_series)
}

// .google.protobuf.Int64Value external_int_id = 12;
inline bool Document::has_external_int_id() const {
  return variant_external_id_case() == kExternalIntId;
}
inline void Document::set_has_external_int_id() {
  _oneof_case_[0] = kExternalIntId;
}
inline void Document::clear_external_int_id() {
  if (has_external_int_id()) {
    delete variant_external_id_.external_int_id_;
    clear_has_variant_external_id();
  }
}
inline  const ::google::protobuf::Int64Value& Document::external_int_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.external_int_id)
  return has_external_int_id()
      ? *variant_external_id_.external_int_id_
      : ::google::protobuf::Int64Value::default_instance();
}
inline ::google::protobuf::Int64Value* Document::mutable_external_int_id() {
  if (!has_external_int_id()) {
    clear_variant_external_id();
    set_has_external_int_id();
    variant_external_id_.external_int_id_ = new ::google::protobuf::Int64Value;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.external_int_id)
  return variant_external_id_.external_int_id_;
}
inline ::google::protobuf::Int64Value* Document::release_external_int_id() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.external_int_id)
  if (has_external_int_id()) {
    clear_has_variant_external_id();
    ::google::protobuf::Int64Value* temp = variant_external_id_.external_int_id_;
    variant_external_id_.external_int_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Document::set_allocated_external_int_id(::google::protobuf::Int64Value* external_int_id) {
  clear_variant_external_id();
  if (external_int_id) {
    if (static_cast< ::google::protobuf::Int64Value*>(external_int_id)->GetArena() != NULL) {
      ::google::protobuf::Int64Value* new_external_int_id = new ::google::protobuf::Int64Value;
      new_external_int_id->CopyFrom(*external_int_id);
      external_int_id = new_external_int_id;
    }
    set_has_external_int_id();
    variant_external_id_.external_int_id_ = external_int_id;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.external_int_id)
}

// .google.protobuf.StringValue external_string_id = 13;
inline bool Document::has_external_string_id() const {
  return variant_external_id_case() == kExternalStringId;
}
inline void Document::set_has_external_string_id() {
  _oneof_case_[0] = kExternalStringId;
}
inline void Document::clear_external_string_id() {
  if (has_external_string_id()) {
    delete variant_external_id_.external_string_id_;
    clear_has_variant_external_id();
  }
}
inline  const ::google::protobuf::StringValue& Document::external_string_id() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.external_string_id)
  return has_external_string_id()
      ? *variant_external_id_.external_string_id_
      : ::google::protobuf::StringValue::default_instance();
}
inline ::google::protobuf::StringValue* Document::mutable_external_string_id() {
  if (!has_external_string_id()) {
    clear_variant_external_id();
    set_has_external_string_id();
    variant_external_id_.external_string_id_ = new ::google::protobuf::StringValue;
  }
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.external_string_id)
  return variant_external_id_.external_string_id_;
}
inline ::google::protobuf::StringValue* Document::release_external_string_id() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.external_string_id)
  if (has_external_string_id()) {
    clear_has_variant_external_id();
    ::google::protobuf::StringValue* temp = variant_external_id_.external_string_id_;
    variant_external_id_.external_string_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Document::set_allocated_external_string_id(::google::protobuf::StringValue* external_string_id) {
  clear_variant_external_id();
  if (external_string_id) {
    if (static_cast< ::google::protobuf::StringValue*>(external_string_id)->GetArena() != NULL) {
      ::google::protobuf::StringValue* new_external_string_id = new ::google::protobuf::StringValue;
      new_external_string_id->CopyFrom(*external_string_id);
      external_string_id = new_external_string_id;
    }
    set_has_external_string_id();
    variant_external_id_.external_string_id_ = external_string_id;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.external_string_id)
}

// bytes compact_meta_info = 51;
inline void Document::clear_compact_meta_info() {
  compact_meta_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Document::compact_meta_info() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.Document.compact_meta_info)
  return compact_meta_info_.GetNoArena();
}
inline void Document::set_compact_meta_info(const ::std::string& value) {
  
  compact_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.Document.compact_meta_info)
}
#if LANG_CXX11
inline void Document::set_compact_meta_info(::std::string&& value) {
  
  compact_meta_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.Document.compact_meta_info)
}
#endif
inline void Document::set_compact_meta_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compact_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.Document.compact_meta_info)
}
inline void Document::set_compact_meta_info(const void* value, size_t size) {
  
  compact_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.Document.compact_meta_info)
}
inline ::std::string* Document::mutable_compact_meta_info() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.Document.compact_meta_info)
  return compact_meta_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Document::release_compact_meta_info() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.Document.compact_meta_info)
  
  return compact_meta_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Document::set_allocated_compact_meta_info(::std::string* compact_meta_info) {
  if (compact_meta_info != NULL) {
    
  } else {
    
  }
  compact_meta_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compact_meta_info);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.Document.compact_meta_info)
}

inline bool Document::has_variant_external_id() const {
  return variant_external_id_case() != VARIANT_EXTERNAL_ID_NOT_SET;
}
inline void Document::clear_has_variant_external_id() {
  _oneof_case_[0] = VARIANT_EXTERNAL_ID_NOT_SET;
}
inline Document::VariantExternalIdCase Document::variant_external_id_case() const {
  return Document::VariantExternalIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CosmoResponse

// repeated .cosmoefir.pb.Document documents = 1;
inline int CosmoResponse::documents_size() const {
  return documents_.size();
}
inline void CosmoResponse::clear_documents() {
  documents_.Clear();
}
inline const ::cosmoefir::pb::Document& CosmoResponse::documents(int index) const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.CosmoResponse.documents)
  return documents_.Get(index);
}
inline ::cosmoefir::pb::Document* CosmoResponse::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.CosmoResponse.documents)
  return documents_.Mutable(index);
}
inline ::cosmoefir::pb::Document* CosmoResponse::add_documents() {
  // @@protoc_insertion_point(field_add:cosmoefir.pb.CosmoResponse.documents)
  return documents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cosmoefir::pb::Document >*
CosmoResponse::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:cosmoefir.pb.CosmoResponse.documents)
  return &documents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cosmoefir::pb::Document >&
CosmoResponse::documents() const {
  // @@protoc_insertion_point(field_list:cosmoefir.pb.CosmoResponse.documents)
  return documents_;
}

// bytes compact_user_meta_info = 3;
inline void CosmoResponse::clear_compact_user_meta_info() {
  compact_user_meta_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CosmoResponse::compact_user_meta_info() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
  return compact_user_meta_info_.GetNoArena();
}
inline void CosmoResponse::set_compact_user_meta_info(const ::std::string& value) {
  
  compact_user_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
}
#if LANG_CXX11
inline void CosmoResponse::set_compact_user_meta_info(::std::string&& value) {
  
  compact_user_meta_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
}
#endif
inline void CosmoResponse::set_compact_user_meta_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compact_user_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
}
inline void CosmoResponse::set_compact_user_meta_info(const void* value, size_t size) {
  
  compact_user_meta_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
}
inline ::std::string* CosmoResponse::mutable_compact_user_meta_info() {
  
  // @@protoc_insertion_point(field_mutable:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
  return compact_user_meta_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CosmoResponse::release_compact_user_meta_info() {
  // @@protoc_insertion_point(field_release:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
  
  return compact_user_meta_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CosmoResponse::set_allocated_compact_user_meta_info(::std::string* compact_user_meta_info) {
  if (compact_user_meta_info != NULL) {
    
  } else {
    
  }
  compact_user_meta_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compact_user_meta_info);
  // @@protoc_insertion_point(field_set_allocated:cosmoefir.pb.CosmoResponse.compact_user_meta_info)
}

// repeated uint32 channels = 4;
inline int CosmoResponse::channels_size() const {
  return channels_.size();
}
inline void CosmoResponse::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::uint32 CosmoResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.CosmoResponse.channels)
  return channels_.Get(index);
}
inline void CosmoResponse::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.CosmoResponse.channels)
}
inline void CosmoResponse::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:cosmoefir.pb.CosmoResponse.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CosmoResponse::channels() const {
  // @@protoc_insertion_point(field_list:cosmoefir.pb.CosmoResponse.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CosmoResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:cosmoefir.pb.CosmoResponse.channels)
  return &channels_;
}

// -------------------------------------------------------------------

// DocumentIdList

// repeated int64 ids = 1;
inline int DocumentIdList::ids_size() const {
  return ids_.size();
}
inline void DocumentIdList::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int64 DocumentIdList::ids(int index) const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentIdList.ids)
  return ids_.Get(index);
}
inline void DocumentIdList::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentIdList.ids)
}
inline void DocumentIdList::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:cosmoefir.pb.DocumentIdList.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DocumentIdList::ids() const {
  // @@protoc_insertion_point(field_list:cosmoefir.pb.DocumentIdList.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DocumentIdList::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:cosmoefir.pb.DocumentIdList.ids)
  return &ids_;
}

// uint32 ids_limit = 2;
inline void DocumentIdList::clear_ids_limit() {
  ids_limit_ = 0u;
}
inline ::google::protobuf::uint32 DocumentIdList::ids_limit() const {
  // @@protoc_insertion_point(field_get:cosmoefir.pb.DocumentIdList.ids_limit)
  return ids_limit_;
}
inline void DocumentIdList::set_ids_limit(::google::protobuf::uint32 value) {
  
  ids_limit_ = value;
  // @@protoc_insertion_point(field_set:cosmoefir.pb.DocumentIdList.ids_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pb
}  // namespace cosmoefir

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation__>() {
  return ::cosmoefir::pb::DocumentMetaInfo_OriginOfRecommendation___descriptor();
}
template <> struct is_proto_enum< ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind__>() {
  return ::cosmoefir::pb::DocumentMetaInfo_RetrieverKind___descriptor();
}
template <> struct is_proto_enum< ::cosmoefir::pb::Gender> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cosmoefir::pb::Gender>() {
  return ::cosmoefir::pb::Gender_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cosmo_5fefir_2eproto__INCLUDED
